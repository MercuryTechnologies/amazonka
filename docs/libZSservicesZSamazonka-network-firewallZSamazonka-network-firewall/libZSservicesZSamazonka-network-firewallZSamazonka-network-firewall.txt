-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/

@package libZSservicesZSamazonka-network-firewallZSamazonka-network-firewall
@version 2.0


module Amazonka.NetworkFirewall.Types.Address

-- | A single IP address specification. This is used in the MatchAttributes
--   source and destination specifications.
--   
--   <i>See:</i> <a>newAddress</a> smart constructor.
data Address
Address' :: Text -> Address

-- | Specify an IP address or a block of IP addresses in Classless
--   Inter-Domain Routing (CIDR) notation. Network Firewall supports all
--   address ranges for IPv4.
--   
--   Examples:
--   
--   <ul>
--   <li>To configure Network Firewall to inspect for the IP address
--   192.0.2.44, specify <tt>192.0.2.44/32</tt>.</li>
--   <li>To configure Network Firewall to inspect for IP addresses from
--   192.0.2.0 to 192.0.2.255, specify <tt>192.0.2.0/24</tt>.</li>
--   </ul>
--   
--   For more information about CIDR notation, see the Wikipedia entry
--   <a>Classless Inter-Domain Routing</a>.
[$sel:addressDefinition:Address'] :: Address -> Text

-- | Create a value of <a>Address</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:addressDefinition:Address'</a>,
--   <a>address_addressDefinition</a> - Specify an IP address or a block of
--   IP addresses in Classless Inter-Domain Routing (CIDR) notation.
--   Network Firewall supports all address ranges for IPv4.
--   
--   Examples:
--   
--   <ul>
--   <li>To configure Network Firewall to inspect for the IP address
--   192.0.2.44, specify <tt>192.0.2.44/32</tt>.</li>
--   <li>To configure Network Firewall to inspect for IP addresses from
--   192.0.2.0 to 192.0.2.255, specify <tt>192.0.2.0/24</tt>.</li>
--   </ul>
--   
--   For more information about CIDR notation, see the Wikipedia entry
--   <a>Classless Inter-Domain Routing</a>.
newAddress :: Text -> Address

-- | Specify an IP address or a block of IP addresses in Classless
--   Inter-Domain Routing (CIDR) notation. Network Firewall supports all
--   address ranges for IPv4.
--   
--   Examples:
--   
--   <ul>
--   <li>To configure Network Firewall to inspect for the IP address
--   192.0.2.44, specify <tt>192.0.2.44/32</tt>.</li>
--   <li>To configure Network Firewall to inspect for IP addresses from
--   192.0.2.0 to 192.0.2.255, specify <tt>192.0.2.0/24</tt>.</li>
--   </ul>
--   
--   For more information about CIDR notation, see the Wikipedia entry
--   <a>Classless Inter-Domain Routing</a>.
address_addressDefinition :: Lens' Address Text
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.Address.Address
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.Address.Address
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.Address.Address
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.Address.Address
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.Address.Address
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.Address.Address
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.Address.Address
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.Address.Address


module Amazonka.NetworkFirewall.Types.AttachmentStatus
newtype AttachmentStatus
AttachmentStatus' :: Text -> AttachmentStatus
[fromAttachmentStatus] :: AttachmentStatus -> Text
pattern AttachmentStatus_CREATING :: AttachmentStatus
pattern AttachmentStatus_DELETING :: AttachmentStatus
pattern AttachmentStatus_READY :: AttachmentStatus
pattern AttachmentStatus_SCALING :: AttachmentStatus
instance Amazonka.Data.XML.ToXML Amazonka.NetworkFirewall.Types.AttachmentStatus.AttachmentStatus
instance Amazonka.Data.XML.FromXML Amazonka.NetworkFirewall.Types.AttachmentStatus.AttachmentStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.NetworkFirewall.Types.AttachmentStatus.AttachmentStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.AttachmentStatus.AttachmentStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.NetworkFirewall.Types.AttachmentStatus.AttachmentStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.AttachmentStatus.AttachmentStatus
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.Types.AttachmentStatus.AttachmentStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.NetworkFirewall.Types.AttachmentStatus.AttachmentStatus
instance Amazonka.Data.Log.ToLog Amazonka.NetworkFirewall.Types.AttachmentStatus.AttachmentStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.NetworkFirewall.Types.AttachmentStatus.AttachmentStatus
instance Amazonka.Data.Text.ToText Amazonka.NetworkFirewall.Types.AttachmentStatus.AttachmentStatus
instance Amazonka.Data.Text.FromText Amazonka.NetworkFirewall.Types.AttachmentStatus.AttachmentStatus
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.AttachmentStatus.AttachmentStatus
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.AttachmentStatus.AttachmentStatus
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.AttachmentStatus.AttachmentStatus
instance GHC.Classes.Ord Amazonka.NetworkFirewall.Types.AttachmentStatus.AttachmentStatus
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.AttachmentStatus.AttachmentStatus
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.AttachmentStatus.AttachmentStatus
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.AttachmentStatus.AttachmentStatus


module Amazonka.NetworkFirewall.Types.Attachment

-- | The configuration and status for a single subnet that you've specified
--   for use by the AWS Network Firewall firewall. This is part of the
--   FirewallStatus.
--   
--   <i>See:</i> <a>newAttachment</a> smart constructor.
data Attachment
Attachment' :: Maybe AttachmentStatus -> Maybe Text -> Maybe Text -> Attachment

-- | The current status of the firewall endpoint in the subnet. This value
--   reflects both the instantiation of the endpoint in the VPC subnet and
--   the sync states that are reported in the <tt>Config</tt> settings.
--   When this value is <tt>READY</tt>, the endpoint is available and
--   configured properly to handle network traffic. When the endpoint isn't
--   available for traffic, this value will reflect its state, for example
--   <tt>CREATING</tt>, <tt>DELETING</tt>, or <tt>FAILED</tt>.
[$sel:status:Attachment'] :: Attachment -> Maybe AttachmentStatus

-- | The unique identifier of the subnet that you've specified to be used
--   for a firewall endpoint.
[$sel:subnetId:Attachment'] :: Attachment -> Maybe Text

-- | The identifier of the firewall endpoint that Network Firewall has
--   instantiated in the subnet. You use this to identify the firewall
--   endpoint in the VPC route tables, when you redirect the VPC traffic
--   through the endpoint.
[$sel:endpointId:Attachment'] :: Attachment -> Maybe Text

-- | Create a value of <a>Attachment</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:Attachment'</a>, <a>attachment_status</a> - The current
--   status of the firewall endpoint in the subnet. This value reflects
--   both the instantiation of the endpoint in the VPC subnet and the sync
--   states that are reported in the <tt>Config</tt> settings. When this
--   value is <tt>READY</tt>, the endpoint is available and configured
--   properly to handle network traffic. When the endpoint isn't available
--   for traffic, this value will reflect its state, for example
--   <tt>CREATING</tt>, <tt>DELETING</tt>, or <tt>FAILED</tt>.
--   
--   <a>$sel:subnetId:Attachment'</a>, <a>attachment_subnetId</a> - The
--   unique identifier of the subnet that you've specified to be used for a
--   firewall endpoint.
--   
--   <a>$sel:endpointId:Attachment'</a>, <a>attachment_endpointId</a> - The
--   identifier of the firewall endpoint that Network Firewall has
--   instantiated in the subnet. You use this to identify the firewall
--   endpoint in the VPC route tables, when you redirect the VPC traffic
--   through the endpoint.
newAttachment :: Attachment

-- | The current status of the firewall endpoint in the subnet. This value
--   reflects both the instantiation of the endpoint in the VPC subnet and
--   the sync states that are reported in the <tt>Config</tt> settings.
--   When this value is <tt>READY</tt>, the endpoint is available and
--   configured properly to handle network traffic. When the endpoint isn't
--   available for traffic, this value will reflect its state, for example
--   <tt>CREATING</tt>, <tt>DELETING</tt>, or <tt>FAILED</tt>.
attachment_status :: Lens' Attachment (Maybe AttachmentStatus)

-- | The unique identifier of the subnet that you've specified to be used
--   for a firewall endpoint.
attachment_subnetId :: Lens' Attachment (Maybe Text)

-- | The identifier of the firewall endpoint that Network Firewall has
--   instantiated in the subnet. You use this to identify the firewall
--   endpoint in the VPC route tables, when you redirect the VPC traffic
--   through the endpoint.
attachment_endpointId :: Lens' Attachment (Maybe Text)
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.Attachment.Attachment
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.Attachment.Attachment
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.Attachment.Attachment
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.Attachment.Attachment
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.Attachment.Attachment
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.Attachment.Attachment
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.Attachment.Attachment


module Amazonka.NetworkFirewall.Types.ConfigurationSyncState
newtype ConfigurationSyncState
ConfigurationSyncState' :: Text -> ConfigurationSyncState
[fromConfigurationSyncState] :: ConfigurationSyncState -> Text
pattern ConfigurationSyncState_IN_SYNC :: ConfigurationSyncState
pattern ConfigurationSyncState_PENDING :: ConfigurationSyncState
instance Amazonka.Data.XML.ToXML Amazonka.NetworkFirewall.Types.ConfigurationSyncState.ConfigurationSyncState
instance Amazonka.Data.XML.FromXML Amazonka.NetworkFirewall.Types.ConfigurationSyncState.ConfigurationSyncState
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.NetworkFirewall.Types.ConfigurationSyncState.ConfigurationSyncState
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.ConfigurationSyncState.ConfigurationSyncState
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.NetworkFirewall.Types.ConfigurationSyncState.ConfigurationSyncState
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.ConfigurationSyncState.ConfigurationSyncState
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.Types.ConfigurationSyncState.ConfigurationSyncState
instance Amazonka.Data.Headers.ToHeader Amazonka.NetworkFirewall.Types.ConfigurationSyncState.ConfigurationSyncState
instance Amazonka.Data.Log.ToLog Amazonka.NetworkFirewall.Types.ConfigurationSyncState.ConfigurationSyncState
instance Amazonka.Data.ByteString.ToByteString Amazonka.NetworkFirewall.Types.ConfigurationSyncState.ConfigurationSyncState
instance Amazonka.Data.Text.ToText Amazonka.NetworkFirewall.Types.ConfigurationSyncState.ConfigurationSyncState
instance Amazonka.Data.Text.FromText Amazonka.NetworkFirewall.Types.ConfigurationSyncState.ConfigurationSyncState
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.ConfigurationSyncState.ConfigurationSyncState
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.ConfigurationSyncState.ConfigurationSyncState
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.ConfigurationSyncState.ConfigurationSyncState
instance GHC.Classes.Ord Amazonka.NetworkFirewall.Types.ConfigurationSyncState.ConfigurationSyncState
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.ConfigurationSyncState.ConfigurationSyncState
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.ConfigurationSyncState.ConfigurationSyncState
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.ConfigurationSyncState.ConfigurationSyncState


module Amazonka.NetworkFirewall.Types.Dimension

-- | The value to use in an Amazon CloudWatch custom metric dimension. This
--   is used in the <tt>PublishMetrics</tt> CustomAction. A CloudWatch
--   custom metric dimension is a name/value pair that's part of the
--   identity of a metric.
--   
--   AWS Network Firewall sets the dimension name to <tt>CustomAction</tt>
--   and you provide the dimension value.
--   
--   For more information about CloudWatch custom metric dimensions, see
--   <a>Publishing Custom Metrics</a> in the <a>Amazon CloudWatch User
--   Guide</a>.
--   
--   <i>See:</i> <a>newDimension</a> smart constructor.
data Dimension
Dimension' :: Text -> Dimension

-- | The value to use in the custom metric dimension.
[$sel:value:Dimension'] :: Dimension -> Text

-- | Create a value of <a>Dimension</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:Dimension'</a>, <a>dimension_value</a> - The value to
--   use in the custom metric dimension.
newDimension :: Text -> Dimension

-- | The value to use in the custom metric dimension.
dimension_value :: Lens' Dimension Text
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.Dimension.Dimension
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.Dimension.Dimension
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.Dimension.Dimension
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.Dimension.Dimension
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.Dimension.Dimension
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.Dimension.Dimension
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.Dimension.Dimension
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.Dimension.Dimension


module Amazonka.NetworkFirewall.Types.FirewallMetadata

-- | High-level information about a firewall, returned by operations like
--   create and describe. You can use the information provided in the
--   metadata to retrieve and manage a firewall.
--   
--   <i>See:</i> <a>newFirewallMetadata</a> smart constructor.
data FirewallMetadata
FirewallMetadata' :: Maybe Text -> Maybe Text -> FirewallMetadata

-- | The Amazon Resource Name (ARN) of the firewall.
[$sel:firewallArn:FirewallMetadata'] :: FirewallMetadata -> Maybe Text

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
[$sel:firewallName:FirewallMetadata'] :: FirewallMetadata -> Maybe Text

-- | Create a value of <a>FirewallMetadata</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:firewallArn:FirewallMetadata'</a>,
--   <a>firewallMetadata_firewallArn</a> - The Amazon Resource Name (ARN)
--   of the firewall.
--   
--   <a>$sel:firewallName:FirewallMetadata'</a>,
--   <a>firewallMetadata_firewallName</a> - The descriptive name of the
--   firewall. You can't change the name of a firewall after you create it.
newFirewallMetadata :: FirewallMetadata

-- | The Amazon Resource Name (ARN) of the firewall.
firewallMetadata_firewallArn :: Lens' FirewallMetadata (Maybe Text)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
firewallMetadata_firewallName :: Lens' FirewallMetadata (Maybe Text)
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.FirewallMetadata.FirewallMetadata
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.FirewallMetadata.FirewallMetadata
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.FirewallMetadata.FirewallMetadata
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.FirewallMetadata.FirewallMetadata
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.FirewallMetadata.FirewallMetadata
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.FirewallMetadata.FirewallMetadata
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.FirewallMetadata.FirewallMetadata


module Amazonka.NetworkFirewall.Types.FirewallPolicyMetadata

-- | High-level information about a firewall policy, returned by operations
--   like create and describe. You can use the information provided in the
--   metadata to retrieve and manage a firewall policy. You can retrieve
--   all objects for a firewall policy by calling DescribeFirewallPolicy.
--   
--   <i>See:</i> <a>newFirewallPolicyMetadata</a> smart constructor.
data FirewallPolicyMetadata
FirewallPolicyMetadata' :: Maybe Text -> Maybe Text -> FirewallPolicyMetadata

-- | The Amazon Resource Name (ARN) of the firewall policy.
[$sel:arn:FirewallPolicyMetadata'] :: FirewallPolicyMetadata -> Maybe Text

-- | The descriptive name of the firewall policy. You can't change the name
--   of a firewall policy after you create it.
[$sel:name:FirewallPolicyMetadata'] :: FirewallPolicyMetadata -> Maybe Text

-- | Create a value of <a>FirewallPolicyMetadata</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:arn:FirewallPolicyMetadata'</a>,
--   <a>firewallPolicyMetadata_arn</a> - The Amazon Resource Name (ARN) of
--   the firewall policy.
--   
--   <a>$sel:name:FirewallPolicyMetadata'</a>,
--   <a>firewallPolicyMetadata_name</a> - The descriptive name of the
--   firewall policy. You can't change the name of a firewall policy after
--   you create it.
newFirewallPolicyMetadata :: FirewallPolicyMetadata

-- | The Amazon Resource Name (ARN) of the firewall policy.
firewallPolicyMetadata_arn :: Lens' FirewallPolicyMetadata (Maybe Text)

-- | The descriptive name of the firewall policy. You can't change the name
--   of a firewall policy after you create it.
firewallPolicyMetadata_name :: Lens' FirewallPolicyMetadata (Maybe Text)
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.FirewallPolicyMetadata.FirewallPolicyMetadata
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.FirewallPolicyMetadata.FirewallPolicyMetadata
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.FirewallPolicyMetadata.FirewallPolicyMetadata
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.FirewallPolicyMetadata.FirewallPolicyMetadata
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.FirewallPolicyMetadata.FirewallPolicyMetadata
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.FirewallPolicyMetadata.FirewallPolicyMetadata
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.FirewallPolicyMetadata.FirewallPolicyMetadata


module Amazonka.NetworkFirewall.Types.FirewallStatusValue
newtype FirewallStatusValue
FirewallStatusValue' :: Text -> FirewallStatusValue
[fromFirewallStatusValue] :: FirewallStatusValue -> Text
pattern FirewallStatusValue_DELETING :: FirewallStatusValue
pattern FirewallStatusValue_PROVISIONING :: FirewallStatusValue
pattern FirewallStatusValue_READY :: FirewallStatusValue
instance Amazonka.Data.XML.ToXML Amazonka.NetworkFirewall.Types.FirewallStatusValue.FirewallStatusValue
instance Amazonka.Data.XML.FromXML Amazonka.NetworkFirewall.Types.FirewallStatusValue.FirewallStatusValue
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.NetworkFirewall.Types.FirewallStatusValue.FirewallStatusValue
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.FirewallStatusValue.FirewallStatusValue
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.NetworkFirewall.Types.FirewallStatusValue.FirewallStatusValue
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.FirewallStatusValue.FirewallStatusValue
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.Types.FirewallStatusValue.FirewallStatusValue
instance Amazonka.Data.Headers.ToHeader Amazonka.NetworkFirewall.Types.FirewallStatusValue.FirewallStatusValue
instance Amazonka.Data.Log.ToLog Amazonka.NetworkFirewall.Types.FirewallStatusValue.FirewallStatusValue
instance Amazonka.Data.ByteString.ToByteString Amazonka.NetworkFirewall.Types.FirewallStatusValue.FirewallStatusValue
instance Amazonka.Data.Text.ToText Amazonka.NetworkFirewall.Types.FirewallStatusValue.FirewallStatusValue
instance Amazonka.Data.Text.FromText Amazonka.NetworkFirewall.Types.FirewallStatusValue.FirewallStatusValue
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.FirewallStatusValue.FirewallStatusValue
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.FirewallStatusValue.FirewallStatusValue
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.FirewallStatusValue.FirewallStatusValue
instance GHC.Classes.Ord Amazonka.NetworkFirewall.Types.FirewallStatusValue.FirewallStatusValue
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.FirewallStatusValue.FirewallStatusValue
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.FirewallStatusValue.FirewallStatusValue
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.FirewallStatusValue.FirewallStatusValue


module Amazonka.NetworkFirewall.Types.GeneratedRulesType
newtype GeneratedRulesType
GeneratedRulesType' :: Text -> GeneratedRulesType
[fromGeneratedRulesType] :: GeneratedRulesType -> Text
pattern GeneratedRulesType_ALLOWLIST :: GeneratedRulesType
pattern GeneratedRulesType_DENYLIST :: GeneratedRulesType
instance Amazonka.Data.XML.ToXML Amazonka.NetworkFirewall.Types.GeneratedRulesType.GeneratedRulesType
instance Amazonka.Data.XML.FromXML Amazonka.NetworkFirewall.Types.GeneratedRulesType.GeneratedRulesType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.NetworkFirewall.Types.GeneratedRulesType.GeneratedRulesType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.GeneratedRulesType.GeneratedRulesType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.NetworkFirewall.Types.GeneratedRulesType.GeneratedRulesType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.GeneratedRulesType.GeneratedRulesType
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.Types.GeneratedRulesType.GeneratedRulesType
instance Amazonka.Data.Headers.ToHeader Amazonka.NetworkFirewall.Types.GeneratedRulesType.GeneratedRulesType
instance Amazonka.Data.Log.ToLog Amazonka.NetworkFirewall.Types.GeneratedRulesType.GeneratedRulesType
instance Amazonka.Data.ByteString.ToByteString Amazonka.NetworkFirewall.Types.GeneratedRulesType.GeneratedRulesType
instance Amazonka.Data.Text.ToText Amazonka.NetworkFirewall.Types.GeneratedRulesType.GeneratedRulesType
instance Amazonka.Data.Text.FromText Amazonka.NetworkFirewall.Types.GeneratedRulesType.GeneratedRulesType
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.GeneratedRulesType.GeneratedRulesType
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.GeneratedRulesType.GeneratedRulesType
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.GeneratedRulesType.GeneratedRulesType
instance GHC.Classes.Ord Amazonka.NetworkFirewall.Types.GeneratedRulesType.GeneratedRulesType
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.GeneratedRulesType.GeneratedRulesType
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.GeneratedRulesType.GeneratedRulesType
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.GeneratedRulesType.GeneratedRulesType


module Amazonka.NetworkFirewall.Types.IPSet

-- | A list of IP addresses and address ranges, in CIDR notation. This is
--   part of a RuleVariables.
--   
--   <i>See:</i> <a>newIPSet</a> smart constructor.
data IPSet
IPSet' :: [Text] -> IPSet

-- | The list of IP addresses and address ranges, in CIDR notation.
[$sel:definition:IPSet'] :: IPSet -> [Text]

-- | Create a value of <a>IPSet</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:definition:IPSet'</a>, <a>iPSet_definition</a> - The list of
--   IP addresses and address ranges, in CIDR notation.
newIPSet :: IPSet

-- | The list of IP addresses and address ranges, in CIDR notation.
iPSet_definition :: Lens' IPSet [Text]
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.IPSet.IPSet
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.IPSet.IPSet
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.IPSet.IPSet
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.IPSet.IPSet
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.IPSet.IPSet
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.IPSet.IPSet
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.IPSet.IPSet
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.IPSet.IPSet


module Amazonka.NetworkFirewall.Types.LogDestinationType
newtype LogDestinationType
LogDestinationType' :: Text -> LogDestinationType
[fromLogDestinationType] :: LogDestinationType -> Text
pattern LogDestinationType_CloudWatchLogs :: LogDestinationType
pattern LogDestinationType_KinesisDataFirehose :: LogDestinationType
pattern LogDestinationType_S3 :: LogDestinationType
instance Amazonka.Data.XML.ToXML Amazonka.NetworkFirewall.Types.LogDestinationType.LogDestinationType
instance Amazonka.Data.XML.FromXML Amazonka.NetworkFirewall.Types.LogDestinationType.LogDestinationType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.NetworkFirewall.Types.LogDestinationType.LogDestinationType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.LogDestinationType.LogDestinationType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.NetworkFirewall.Types.LogDestinationType.LogDestinationType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.LogDestinationType.LogDestinationType
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.Types.LogDestinationType.LogDestinationType
instance Amazonka.Data.Headers.ToHeader Amazonka.NetworkFirewall.Types.LogDestinationType.LogDestinationType
instance Amazonka.Data.Log.ToLog Amazonka.NetworkFirewall.Types.LogDestinationType.LogDestinationType
instance Amazonka.Data.ByteString.ToByteString Amazonka.NetworkFirewall.Types.LogDestinationType.LogDestinationType
instance Amazonka.Data.Text.ToText Amazonka.NetworkFirewall.Types.LogDestinationType.LogDestinationType
instance Amazonka.Data.Text.FromText Amazonka.NetworkFirewall.Types.LogDestinationType.LogDestinationType
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.LogDestinationType.LogDestinationType
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.LogDestinationType.LogDestinationType
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.LogDestinationType.LogDestinationType
instance GHC.Classes.Ord Amazonka.NetworkFirewall.Types.LogDestinationType.LogDestinationType
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.LogDestinationType.LogDestinationType
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.LogDestinationType.LogDestinationType
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.LogDestinationType.LogDestinationType


module Amazonka.NetworkFirewall.Types.LogType
newtype LogType
LogType' :: Text -> LogType
[fromLogType] :: LogType -> Text
pattern LogType_ALERT :: LogType
pattern LogType_FLOW :: LogType
instance Amazonka.Data.XML.ToXML Amazonka.NetworkFirewall.Types.LogType.LogType
instance Amazonka.Data.XML.FromXML Amazonka.NetworkFirewall.Types.LogType.LogType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.NetworkFirewall.Types.LogType.LogType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.LogType.LogType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.NetworkFirewall.Types.LogType.LogType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.LogType.LogType
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.Types.LogType.LogType
instance Amazonka.Data.Headers.ToHeader Amazonka.NetworkFirewall.Types.LogType.LogType
instance Amazonka.Data.Log.ToLog Amazonka.NetworkFirewall.Types.LogType.LogType
instance Amazonka.Data.ByteString.ToByteString Amazonka.NetworkFirewall.Types.LogType.LogType
instance Amazonka.Data.Text.ToText Amazonka.NetworkFirewall.Types.LogType.LogType
instance Amazonka.Data.Text.FromText Amazonka.NetworkFirewall.Types.LogType.LogType
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.LogType.LogType
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.LogType.LogType
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.LogType.LogType
instance GHC.Classes.Ord Amazonka.NetworkFirewall.Types.LogType.LogType
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.LogType.LogType
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.LogType.LogType
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.LogType.LogType


module Amazonka.NetworkFirewall.Types.LogDestinationConfig

-- | Defines where AWS Network Firewall sends logs for the firewall for one
--   log type. This is used in LoggingConfiguration. You can send each type
--   of log to an Amazon S3 bucket, a CloudWatch log group, or a Kinesis
--   Data Firehose delivery stream.
--   
--   Network Firewall generates logs for stateful rule groups. You can save
--   alert and flow log types. The stateful rules engine records flow logs
--   for all network traffic that it receives. It records alert logs for
--   traffic that matches stateful rules that have the rule action set to
--   <tt>DROP</tt> or <tt>ALERT</tt>.
--   
--   <i>See:</i> <a>newLogDestinationConfig</a> smart constructor.
data LogDestinationConfig
LogDestinationConfig' :: LogType -> LogDestinationType -> HashMap Text Text -> LogDestinationConfig

-- | The type of log to send. Alert logs report traffic that matches a
--   StatefulRule with an action setting that sends an alert log message.
--   Flow logs are standard network traffic flow logs.
[$sel:logType:LogDestinationConfig'] :: LogDestinationConfig -> LogType

-- | The type of storage destination to send these logs to. You can send
--   logs to an Amazon S3 bucket, a CloudWatch log group, or a Kinesis Data
--   Firehose delivery stream.
[$sel:logDestinationType:LogDestinationConfig'] :: LogDestinationConfig -> LogDestinationType

-- | The named location for the logs, provided in a key:value mapping that
--   is specific to the chosen destination type.
--   
--   <ul>
--   <li>For an Amazon S3 bucket, provide the name of the bucket, with key
--   <tt>bucketName</tt>, and optionally provide a prefix, with key
--   <tt>prefix</tt>. The following example specifies an Amazon S3 bucket
--   named <tt>DOC-EXAMPLE-BUCKET</tt> and the prefix
--   <tt>alerts</tt>:<pre>"LogDestination": { "bucketName":
--   "DOC-EXAMPLE-BUCKET", "prefix": "alerts" }</pre></li>
--   <li>For a CloudWatch log group, provide the name of the CloudWatch log
--   group, with key <tt>logGroup</tt>. The following example specifies a
--   log group named <tt>alert-log-group</tt>:<pre>"LogDestination": {
--   "logGroup": "alert-log-group" }</pre></li>
--   <li>For a Kinesis Data Firehose delivery stream, provide the name of
--   the delivery stream, with key <tt>deliveryStream</tt>. The following
--   example specifies a delivery stream named
--   <tt>alert-delivery-stream</tt>:<pre>"LogDestination": {
--   "deliveryStream": "alert-delivery-stream" }</pre></li>
--   </ul>
[$sel:logDestination:LogDestinationConfig'] :: LogDestinationConfig -> HashMap Text Text

-- | Create a value of <a>LogDestinationConfig</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:logType:LogDestinationConfig'</a>,
--   <a>logDestinationConfig_logType</a> - The type of log to send. Alert
--   logs report traffic that matches a StatefulRule with an action setting
--   that sends an alert log message. Flow logs are standard network
--   traffic flow logs.
--   
--   <a>$sel:logDestinationType:LogDestinationConfig'</a>,
--   <a>logDestinationConfig_logDestinationType</a> - The type of storage
--   destination to send these logs to. You can send logs to an Amazon S3
--   bucket, a CloudWatch log group, or a Kinesis Data Firehose delivery
--   stream.
--   
--   <a>$sel:logDestination:LogDestinationConfig'</a>,
--   <a>logDestinationConfig_logDestination</a> - The named location for
--   the logs, provided in a key:value mapping that is specific to the
--   chosen destination type.
--   
--   <ul>
--   <li>For an Amazon S3 bucket, provide the name of the bucket, with key
--   <tt>bucketName</tt>, and optionally provide a prefix, with key
--   <tt>prefix</tt>. The following example specifies an Amazon S3 bucket
--   named <tt>DOC-EXAMPLE-BUCKET</tt> and the prefix
--   <tt>alerts</tt>:<pre>"LogDestination": { "bucketName":
--   "DOC-EXAMPLE-BUCKET", "prefix": "alerts" }</pre></li>
--   <li>For a CloudWatch log group, provide the name of the CloudWatch log
--   group, with key <tt>logGroup</tt>. The following example specifies a
--   log group named <tt>alert-log-group</tt>:<pre>"LogDestination": {
--   "logGroup": "alert-log-group" }</pre></li>
--   <li>For a Kinesis Data Firehose delivery stream, provide the name of
--   the delivery stream, with key <tt>deliveryStream</tt>. The following
--   example specifies a delivery stream named
--   <tt>alert-delivery-stream</tt>:<pre>"LogDestination": {
--   "deliveryStream": "alert-delivery-stream" }</pre></li>
--   </ul>
newLogDestinationConfig :: LogType -> LogDestinationType -> LogDestinationConfig

-- | The type of log to send. Alert logs report traffic that matches a
--   StatefulRule with an action setting that sends an alert log message.
--   Flow logs are standard network traffic flow logs.
logDestinationConfig_logType :: Lens' LogDestinationConfig LogType

-- | The type of storage destination to send these logs to. You can send
--   logs to an Amazon S3 bucket, a CloudWatch log group, or a Kinesis Data
--   Firehose delivery stream.
logDestinationConfig_logDestinationType :: Lens' LogDestinationConfig LogDestinationType

-- | The named location for the logs, provided in a key:value mapping that
--   is specific to the chosen destination type.
--   
--   <ul>
--   <li>For an Amazon S3 bucket, provide the name of the bucket, with key
--   <tt>bucketName</tt>, and optionally provide a prefix, with key
--   <tt>prefix</tt>. The following example specifies an Amazon S3 bucket
--   named <tt>DOC-EXAMPLE-BUCKET</tt> and the prefix
--   <tt>alerts</tt>:<pre>"LogDestination": { "bucketName":
--   "DOC-EXAMPLE-BUCKET", "prefix": "alerts" }</pre></li>
--   <li>For a CloudWatch log group, provide the name of the CloudWatch log
--   group, with key <tt>logGroup</tt>. The following example specifies a
--   log group named <tt>alert-log-group</tt>:<pre>"LogDestination": {
--   "logGroup": "alert-log-group" }</pre></li>
--   <li>For a Kinesis Data Firehose delivery stream, provide the name of
--   the delivery stream, with key <tt>deliveryStream</tt>. The following
--   example specifies a delivery stream named
--   <tt>alert-delivery-stream</tt>:<pre>"LogDestination": {
--   "deliveryStream": "alert-delivery-stream" }</pre></li>
--   </ul>
logDestinationConfig_logDestination :: Lens' LogDestinationConfig (HashMap Text Text)
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.LogDestinationConfig.LogDestinationConfig
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.LogDestinationConfig.LogDestinationConfig
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.LogDestinationConfig.LogDestinationConfig
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.LogDestinationConfig.LogDestinationConfig
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.LogDestinationConfig.LogDestinationConfig
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.LogDestinationConfig.LogDestinationConfig
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.LogDestinationConfig.LogDestinationConfig
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.LogDestinationConfig.LogDestinationConfig


module Amazonka.NetworkFirewall.Types.LoggingConfiguration

-- | Defines how AWS Network Firewall performs logging for a Firewall.
--   
--   <i>See:</i> <a>newLoggingConfiguration</a> smart constructor.
data LoggingConfiguration
LoggingConfiguration' :: [LogDestinationConfig] -> LoggingConfiguration

-- | Defines the logging destinations for the logs for a firewall. Network
--   Firewall generates logs for stateful rule groups.
[$sel:logDestinationConfigs:LoggingConfiguration'] :: LoggingConfiguration -> [LogDestinationConfig]

-- | Create a value of <a>LoggingConfiguration</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:logDestinationConfigs:LoggingConfiguration'</a>,
--   <a>loggingConfiguration_logDestinationConfigs</a> - Defines the
--   logging destinations for the logs for a firewall. Network Firewall
--   generates logs for stateful rule groups.
newLoggingConfiguration :: LoggingConfiguration

-- | Defines the logging destinations for the logs for a firewall. Network
--   Firewall generates logs for stateful rule groups.
loggingConfiguration_logDestinationConfigs :: Lens' LoggingConfiguration [LogDestinationConfig]
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.LoggingConfiguration.LoggingConfiguration
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.LoggingConfiguration.LoggingConfiguration
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.LoggingConfiguration.LoggingConfiguration
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.LoggingConfiguration.LoggingConfiguration
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.LoggingConfiguration.LoggingConfiguration
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.LoggingConfiguration.LoggingConfiguration
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.LoggingConfiguration.LoggingConfiguration
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.LoggingConfiguration.LoggingConfiguration


module Amazonka.NetworkFirewall.Types.PerObjectSyncStatus
newtype PerObjectSyncStatus
PerObjectSyncStatus' :: Text -> PerObjectSyncStatus
[fromPerObjectSyncStatus] :: PerObjectSyncStatus -> Text
pattern PerObjectSyncStatus_IN_SYNC :: PerObjectSyncStatus
pattern PerObjectSyncStatus_PENDING :: PerObjectSyncStatus
instance Amazonka.Data.XML.ToXML Amazonka.NetworkFirewall.Types.PerObjectSyncStatus.PerObjectSyncStatus
instance Amazonka.Data.XML.FromXML Amazonka.NetworkFirewall.Types.PerObjectSyncStatus.PerObjectSyncStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.NetworkFirewall.Types.PerObjectSyncStatus.PerObjectSyncStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.PerObjectSyncStatus.PerObjectSyncStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.NetworkFirewall.Types.PerObjectSyncStatus.PerObjectSyncStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.PerObjectSyncStatus.PerObjectSyncStatus
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.Types.PerObjectSyncStatus.PerObjectSyncStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.NetworkFirewall.Types.PerObjectSyncStatus.PerObjectSyncStatus
instance Amazonka.Data.Log.ToLog Amazonka.NetworkFirewall.Types.PerObjectSyncStatus.PerObjectSyncStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.NetworkFirewall.Types.PerObjectSyncStatus.PerObjectSyncStatus
instance Amazonka.Data.Text.ToText Amazonka.NetworkFirewall.Types.PerObjectSyncStatus.PerObjectSyncStatus
instance Amazonka.Data.Text.FromText Amazonka.NetworkFirewall.Types.PerObjectSyncStatus.PerObjectSyncStatus
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.PerObjectSyncStatus.PerObjectSyncStatus
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.PerObjectSyncStatus.PerObjectSyncStatus
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.PerObjectSyncStatus.PerObjectSyncStatus
instance GHC.Classes.Ord Amazonka.NetworkFirewall.Types.PerObjectSyncStatus.PerObjectSyncStatus
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.PerObjectSyncStatus.PerObjectSyncStatus
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.PerObjectSyncStatus.PerObjectSyncStatus
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.PerObjectSyncStatus.PerObjectSyncStatus


module Amazonka.NetworkFirewall.Types.PerObjectStatus

-- | Provides configuration status for a single policy or rule group that
--   is used for a firewall endpoint. Network Firewall provides each
--   endpoint with the rules that are configured in the firewall policy.
--   Each time you add a subnet or modify the associated firewall policy,
--   Network Firewall synchronizes the rules in the endpoint, so it can
--   properly filter network traffic. This is part of a SyncState for a
--   firewall.
--   
--   <i>See:</i> <a>newPerObjectStatus</a> smart constructor.
data PerObjectStatus
PerObjectStatus' :: Maybe Text -> Maybe PerObjectSyncStatus -> PerObjectStatus

-- | The current version of the object that is either in sync or pending
--   synchronization.
[$sel:updateToken:PerObjectStatus'] :: PerObjectStatus -> Maybe Text

-- | Indicates whether this object is in sync with the version indicated in
--   the update token.
[$sel:syncStatus:PerObjectStatus'] :: PerObjectStatus -> Maybe PerObjectSyncStatus

-- | Create a value of <a>PerObjectStatus</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:updateToken:PerObjectStatus'</a>,
--   <a>perObjectStatus_updateToken</a> - The current version of the object
--   that is either in sync or pending synchronization.
--   
--   <a>$sel:syncStatus:PerObjectStatus'</a>,
--   <a>perObjectStatus_syncStatus</a> - Indicates whether this object is
--   in sync with the version indicated in the update token.
newPerObjectStatus :: PerObjectStatus

-- | The current version of the object that is either in sync or pending
--   synchronization.
perObjectStatus_updateToken :: Lens' PerObjectStatus (Maybe Text)

-- | Indicates whether this object is in sync with the version indicated in
--   the update token.
perObjectStatus_syncStatus :: Lens' PerObjectStatus (Maybe PerObjectSyncStatus)
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.PerObjectStatus.PerObjectStatus
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.PerObjectStatus.PerObjectStatus
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.PerObjectStatus.PerObjectStatus
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.PerObjectStatus.PerObjectStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.PerObjectStatus.PerObjectStatus
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.PerObjectStatus.PerObjectStatus
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.PerObjectStatus.PerObjectStatus


module Amazonka.NetworkFirewall.Types.PortRange

-- | A single port range specification. This is used for source and
--   destination port ranges in the stateless rule MatchAttributes,
--   <tt>SourcePorts</tt>, and <tt>DestinationPorts</tt> settings.
--   
--   <i>See:</i> <a>newPortRange</a> smart constructor.
data PortRange
PortRange' :: Natural -> Natural -> PortRange

-- | The lower limit of the port range. This must be less than or equal to
--   the <tt>ToPort</tt> specification.
[$sel:fromPort:PortRange'] :: PortRange -> Natural

-- | The upper limit of the port range. This must be greater than or equal
--   to the <tt>FromPort</tt> specification.
[$sel:toPort:PortRange'] :: PortRange -> Natural

-- | Create a value of <a>PortRange</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:fromPort:PortRange'</a>, <a>portRange_fromPort</a> - The lower
--   limit of the port range. This must be less than or equal to the
--   <tt>ToPort</tt> specification.
--   
--   <a>$sel:toPort:PortRange'</a>, <a>portRange_toPort</a> - The upper
--   limit of the port range. This must be greater than or equal to the
--   <tt>FromPort</tt> specification.
newPortRange :: Natural -> Natural -> PortRange

-- | The lower limit of the port range. This must be less than or equal to
--   the <tt>ToPort</tt> specification.
portRange_fromPort :: Lens' PortRange Natural

-- | The upper limit of the port range. This must be greater than or equal
--   to the <tt>FromPort</tt> specification.
portRange_toPort :: Lens' PortRange Natural
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.PortRange.PortRange
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.PortRange.PortRange
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.PortRange.PortRange
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.PortRange.PortRange
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.PortRange.PortRange
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.PortRange.PortRange
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.PortRange.PortRange
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.PortRange.PortRange


module Amazonka.NetworkFirewall.Types.PortSet

-- | A set of port ranges for use in the rules in a rule group.
--   
--   <i>See:</i> <a>newPortSet</a> smart constructor.
data PortSet
PortSet' :: Maybe [Text] -> PortSet

-- | The set of port ranges.
[$sel:definition:PortSet'] :: PortSet -> Maybe [Text]

-- | Create a value of <a>PortSet</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:definition:PortSet'</a>, <a>portSet_definition</a> - The set
--   of port ranges.
newPortSet :: PortSet

-- | The set of port ranges.
portSet_definition :: Lens' PortSet (Maybe [Text])
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.PortSet.PortSet
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.PortSet.PortSet
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.PortSet.PortSet
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.PortSet.PortSet
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.PortSet.PortSet
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.PortSet.PortSet
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.PortSet.PortSet
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.PortSet.PortSet


module Amazonka.NetworkFirewall.Types.PublishMetricAction

-- | Stateless inspection criteria that publishes the specified metrics to
--   Amazon CloudWatch for the matching packet. This setting defines a
--   CloudWatch dimension value to be published.
--   
--   <i>See:</i> <a>newPublishMetricAction</a> smart constructor.
data PublishMetricAction
PublishMetricAction' :: NonEmpty Dimension -> PublishMetricAction
[$sel:dimensions:PublishMetricAction'] :: PublishMetricAction -> NonEmpty Dimension

-- | Create a value of <a>PublishMetricAction</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dimensions:PublishMetricAction'</a>,
--   <a>publishMetricAction_dimensions</a> -
newPublishMetricAction :: NonEmpty Dimension -> PublishMetricAction

publishMetricAction_dimensions :: Lens' PublishMetricAction (NonEmpty Dimension)
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.PublishMetricAction.PublishMetricAction
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.PublishMetricAction.PublishMetricAction
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.PublishMetricAction.PublishMetricAction
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.PublishMetricAction.PublishMetricAction
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.PublishMetricAction.PublishMetricAction
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.PublishMetricAction.PublishMetricAction
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.PublishMetricAction.PublishMetricAction
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.PublishMetricAction.PublishMetricAction


module Amazonka.NetworkFirewall.Types.ActionDefinition

-- | A custom action to use in stateless rule actions settings. This is
--   used in CustomAction.
--   
--   <i>See:</i> <a>newActionDefinition</a> smart constructor.
data ActionDefinition
ActionDefinition' :: Maybe PublishMetricAction -> ActionDefinition

-- | Stateless inspection criteria that publishes the specified metrics to
--   Amazon CloudWatch for the matching packet. This setting defines a
--   CloudWatch dimension value to be published.
--   
--   You can pair this custom action with any of the standard stateless
--   rule actions. For example, you could pair this in a rule action with
--   the standard action that forwards the packet for stateful inspection.
--   Then, when a packet matches the rule, Network Firewall publishes
--   metrics for the packet and forwards it.
[$sel:publishMetricAction:ActionDefinition'] :: ActionDefinition -> Maybe PublishMetricAction

-- | Create a value of <a>ActionDefinition</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:publishMetricAction:ActionDefinition'</a>,
--   <a>actionDefinition_publishMetricAction</a> - Stateless inspection
--   criteria that publishes the specified metrics to Amazon CloudWatch for
--   the matching packet. This setting defines a CloudWatch dimension value
--   to be published.
--   
--   You can pair this custom action with any of the standard stateless
--   rule actions. For example, you could pair this in a rule action with
--   the standard action that forwards the packet for stateful inspection.
--   Then, when a packet matches the rule, Network Firewall publishes
--   metrics for the packet and forwards it.
newActionDefinition :: ActionDefinition

-- | Stateless inspection criteria that publishes the specified metrics to
--   Amazon CloudWatch for the matching packet. This setting defines a
--   CloudWatch dimension value to be published.
--   
--   You can pair this custom action with any of the standard stateless
--   rule actions. For example, you could pair this in a rule action with
--   the standard action that forwards the packet for stateful inspection.
--   Then, when a packet matches the rule, Network Firewall publishes
--   metrics for the packet and forwards it.
actionDefinition_publishMetricAction :: Lens' ActionDefinition (Maybe PublishMetricAction)
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.ActionDefinition.ActionDefinition
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.ActionDefinition.ActionDefinition
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.ActionDefinition.ActionDefinition
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.ActionDefinition.ActionDefinition
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.ActionDefinition.ActionDefinition
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.ActionDefinition.ActionDefinition
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.ActionDefinition.ActionDefinition
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.ActionDefinition.ActionDefinition


module Amazonka.NetworkFirewall.Types.CustomAction

-- | An optional, non-standard action to use for stateless packet handling.
--   You can define this in addition to the standard action that you must
--   specify.
--   
--   You define and name the custom actions that you want to be able to
--   use, and then you reference them by name in your actions settings.
--   
--   You can use custom actions in the following places:
--   
--   <ul>
--   <li>In a rule group's StatelessRulesAndCustomActions specification.
--   The custom actions are available for use by name inside the
--   <tt>StatelessRulesAndCustomActions</tt> where you define them. You can
--   use them for your stateless rule actions to specify what to do with a
--   packet that matches the rule's match attributes.</li>
--   <li>In a FirewallPolicy specification, in
--   <tt>StatelessCustomActions</tt>. The custom actions are available for
--   use inside the policy where you define them. You can use them for the
--   policy's default stateless actions settings to specify what to do with
--   packets that don't match any of the policy's stateless rules.</li>
--   </ul>
--   
--   <i>See:</i> <a>newCustomAction</a> smart constructor.
data CustomAction
CustomAction' :: Text -> ActionDefinition -> CustomAction

-- | The descriptive name of the custom action. You can't change the name
--   of a custom action after you create it.
[$sel:actionName:CustomAction'] :: CustomAction -> Text

-- | The custom action associated with the action name.
[$sel:actionDefinition:CustomAction'] :: CustomAction -> ActionDefinition

-- | Create a value of <a>CustomAction</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:actionName:CustomAction'</a>, <a>customAction_actionName</a> -
--   The descriptive name of the custom action. You can't change the name
--   of a custom action after you create it.
--   
--   <a>$sel:actionDefinition:CustomAction'</a>,
--   <a>customAction_actionDefinition</a> - The custom action associated
--   with the action name.
newCustomAction :: Text -> ActionDefinition -> CustomAction

-- | The descriptive name of the custom action. You can't change the name
--   of a custom action after you create it.
customAction_actionName :: Lens' CustomAction Text

-- | The custom action associated with the action name.
customAction_actionDefinition :: Lens' CustomAction ActionDefinition
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.CustomAction.CustomAction
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.CustomAction.CustomAction
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.CustomAction.CustomAction
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.CustomAction.CustomAction
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.CustomAction.CustomAction
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.CustomAction.CustomAction
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.CustomAction.CustomAction
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.CustomAction.CustomAction


module Amazonka.NetworkFirewall.Types.ResourceStatus
newtype ResourceStatus
ResourceStatus' :: Text -> ResourceStatus
[fromResourceStatus] :: ResourceStatus -> Text
pattern ResourceStatus_ACTIVE :: ResourceStatus
pattern ResourceStatus_DELETING :: ResourceStatus
instance Amazonka.Data.XML.ToXML Amazonka.NetworkFirewall.Types.ResourceStatus.ResourceStatus
instance Amazonka.Data.XML.FromXML Amazonka.NetworkFirewall.Types.ResourceStatus.ResourceStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.NetworkFirewall.Types.ResourceStatus.ResourceStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.ResourceStatus.ResourceStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.NetworkFirewall.Types.ResourceStatus.ResourceStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.ResourceStatus.ResourceStatus
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.Types.ResourceStatus.ResourceStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.NetworkFirewall.Types.ResourceStatus.ResourceStatus
instance Amazonka.Data.Log.ToLog Amazonka.NetworkFirewall.Types.ResourceStatus.ResourceStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.NetworkFirewall.Types.ResourceStatus.ResourceStatus
instance Amazonka.Data.Text.ToText Amazonka.NetworkFirewall.Types.ResourceStatus.ResourceStatus
instance Amazonka.Data.Text.FromText Amazonka.NetworkFirewall.Types.ResourceStatus.ResourceStatus
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.ResourceStatus.ResourceStatus
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.ResourceStatus.ResourceStatus
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.ResourceStatus.ResourceStatus
instance GHC.Classes.Ord Amazonka.NetworkFirewall.Types.ResourceStatus.ResourceStatus
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.ResourceStatus.ResourceStatus
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.ResourceStatus.ResourceStatus
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.ResourceStatus.ResourceStatus


module Amazonka.NetworkFirewall.Types.RuleGroupMetadata

-- | High-level information about a rule group, returned by ListRuleGroups.
--   You can use the information provided in the metadata to retrieve and
--   manage a rule group.
--   
--   <i>See:</i> <a>newRuleGroupMetadata</a> smart constructor.
data RuleGroupMetadata
RuleGroupMetadata' :: Maybe Text -> Maybe Text -> RuleGroupMetadata

-- | The Amazon Resource Name (ARN) of the rule group.
[$sel:arn:RuleGroupMetadata'] :: RuleGroupMetadata -> Maybe Text

-- | The descriptive name of the rule group. You can't change the name of a
--   rule group after you create it.
[$sel:name:RuleGroupMetadata'] :: RuleGroupMetadata -> Maybe Text

-- | Create a value of <a>RuleGroupMetadata</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:arn:RuleGroupMetadata'</a>, <a>ruleGroupMetadata_arn</a> - The
--   Amazon Resource Name (ARN) of the rule group.
--   
--   <a>$sel:name:RuleGroupMetadata'</a>, <a>ruleGroupMetadata_name</a> -
--   The descriptive name of the rule group. You can't change the name of a
--   rule group after you create it.
newRuleGroupMetadata :: RuleGroupMetadata

-- | The Amazon Resource Name (ARN) of the rule group.
ruleGroupMetadata_arn :: Lens' RuleGroupMetadata (Maybe Text)

-- | The descriptive name of the rule group. You can't change the name of a
--   rule group after you create it.
ruleGroupMetadata_name :: Lens' RuleGroupMetadata (Maybe Text)
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.RuleGroupMetadata.RuleGroupMetadata
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.RuleGroupMetadata.RuleGroupMetadata
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.RuleGroupMetadata.RuleGroupMetadata
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.RuleGroupMetadata.RuleGroupMetadata
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.RuleGroupMetadata.RuleGroupMetadata
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.RuleGroupMetadata.RuleGroupMetadata
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.RuleGroupMetadata.RuleGroupMetadata


module Amazonka.NetworkFirewall.Types.RuleGroupType
newtype RuleGroupType
RuleGroupType' :: Text -> RuleGroupType
[fromRuleGroupType] :: RuleGroupType -> Text
pattern RuleGroupType_STATEFUL :: RuleGroupType
pattern RuleGroupType_STATELESS :: RuleGroupType
instance Amazonka.Data.XML.ToXML Amazonka.NetworkFirewall.Types.RuleGroupType.RuleGroupType
instance Amazonka.Data.XML.FromXML Amazonka.NetworkFirewall.Types.RuleGroupType.RuleGroupType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.NetworkFirewall.Types.RuleGroupType.RuleGroupType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.RuleGroupType.RuleGroupType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.NetworkFirewall.Types.RuleGroupType.RuleGroupType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.RuleGroupType.RuleGroupType
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.Types.RuleGroupType.RuleGroupType
instance Amazonka.Data.Headers.ToHeader Amazonka.NetworkFirewall.Types.RuleGroupType.RuleGroupType
instance Amazonka.Data.Log.ToLog Amazonka.NetworkFirewall.Types.RuleGroupType.RuleGroupType
instance Amazonka.Data.ByteString.ToByteString Amazonka.NetworkFirewall.Types.RuleGroupType.RuleGroupType
instance Amazonka.Data.Text.ToText Amazonka.NetworkFirewall.Types.RuleGroupType.RuleGroupType
instance Amazonka.Data.Text.FromText Amazonka.NetworkFirewall.Types.RuleGroupType.RuleGroupType
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.RuleGroupType.RuleGroupType
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.RuleGroupType.RuleGroupType
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.RuleGroupType.RuleGroupType
instance GHC.Classes.Ord Amazonka.NetworkFirewall.Types.RuleGroupType.RuleGroupType
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.RuleGroupType.RuleGroupType
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.RuleGroupType.RuleGroupType
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.RuleGroupType.RuleGroupType


module Amazonka.NetworkFirewall.Types.RuleOption

-- | Additional settings for a stateful rule. This is part of the
--   StatefulRule configuration.
--   
--   <i>See:</i> <a>newRuleOption</a> smart constructor.
data RuleOption
RuleOption' :: Maybe [Text] -> Text -> RuleOption
[$sel:settings:RuleOption'] :: RuleOption -> Maybe [Text]
[$sel:keyword:RuleOption'] :: RuleOption -> Text

-- | Create a value of <a>RuleOption</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:settings:RuleOption'</a>, <a>ruleOption_settings</a> -
--   
--   <a>$sel:keyword:RuleOption'</a>, <a>ruleOption_keyword</a> -
newRuleOption :: Text -> RuleOption

ruleOption_settings :: Lens' RuleOption (Maybe [Text])

ruleOption_keyword :: Lens' RuleOption Text
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.RuleOption.RuleOption
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.RuleOption.RuleOption
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.RuleOption.RuleOption
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.RuleOption.RuleOption
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.RuleOption.RuleOption
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.RuleOption.RuleOption
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.RuleOption.RuleOption
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.RuleOption.RuleOption


module Amazonka.NetworkFirewall.Types.RuleOrder
newtype RuleOrder
RuleOrder' :: Text -> RuleOrder
[fromRuleOrder] :: RuleOrder -> Text
pattern RuleOrder_DEFAULT_ACTION_ORDER :: RuleOrder
pattern RuleOrder_STRICT_ORDER :: RuleOrder
instance Amazonka.Data.XML.ToXML Amazonka.NetworkFirewall.Types.RuleOrder.RuleOrder
instance Amazonka.Data.XML.FromXML Amazonka.NetworkFirewall.Types.RuleOrder.RuleOrder
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.NetworkFirewall.Types.RuleOrder.RuleOrder
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.RuleOrder.RuleOrder
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.NetworkFirewall.Types.RuleOrder.RuleOrder
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.RuleOrder.RuleOrder
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.Types.RuleOrder.RuleOrder
instance Amazonka.Data.Headers.ToHeader Amazonka.NetworkFirewall.Types.RuleOrder.RuleOrder
instance Amazonka.Data.Log.ToLog Amazonka.NetworkFirewall.Types.RuleOrder.RuleOrder
instance Amazonka.Data.ByteString.ToByteString Amazonka.NetworkFirewall.Types.RuleOrder.RuleOrder
instance Amazonka.Data.Text.ToText Amazonka.NetworkFirewall.Types.RuleOrder.RuleOrder
instance Amazonka.Data.Text.FromText Amazonka.NetworkFirewall.Types.RuleOrder.RuleOrder
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.RuleOrder.RuleOrder
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.RuleOrder.RuleOrder
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.RuleOrder.RuleOrder
instance GHC.Classes.Ord Amazonka.NetworkFirewall.Types.RuleOrder.RuleOrder
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.RuleOrder.RuleOrder
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.RuleOrder.RuleOrder
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.RuleOrder.RuleOrder


module Amazonka.NetworkFirewall.Types.RuleVariables

-- | Settings that are available for use in the rules in the RuleGroup
--   where this is defined.
--   
--   <i>See:</i> <a>newRuleVariables</a> smart constructor.
data RuleVariables
RuleVariables' :: Maybe (HashMap Text PortSet) -> Maybe (HashMap Text IPSet) -> RuleVariables

-- | A list of port ranges.
[$sel:portSets:RuleVariables'] :: RuleVariables -> Maybe (HashMap Text PortSet)

-- | A list of IP addresses and address ranges, in CIDR notation.
[$sel:iPSets:RuleVariables'] :: RuleVariables -> Maybe (HashMap Text IPSet)

-- | Create a value of <a>RuleVariables</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:portSets:RuleVariables'</a>, <a>ruleVariables_portSets</a> - A
--   list of port ranges.
--   
--   <a>$sel:iPSets:RuleVariables'</a>, <a>ruleVariables_iPSets</a> - A
--   list of IP addresses and address ranges, in CIDR notation.
newRuleVariables :: RuleVariables

-- | A list of port ranges.
ruleVariables_portSets :: Lens' RuleVariables (Maybe (HashMap Text PortSet))

-- | A list of IP addresses and address ranges, in CIDR notation.
ruleVariables_iPSets :: Lens' RuleVariables (Maybe (HashMap Text IPSet))
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.RuleVariables.RuleVariables
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.RuleVariables.RuleVariables
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.RuleVariables.RuleVariables
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.RuleVariables.RuleVariables
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.RuleVariables.RuleVariables
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.RuleVariables.RuleVariables
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.RuleVariables.RuleVariables
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.RuleVariables.RuleVariables


module Amazonka.NetworkFirewall.Types.StatefulAction
newtype StatefulAction
StatefulAction' :: Text -> StatefulAction
[fromStatefulAction] :: StatefulAction -> Text
pattern StatefulAction_ALERT :: StatefulAction
pattern StatefulAction_DROP :: StatefulAction
pattern StatefulAction_PASS :: StatefulAction
instance Amazonka.Data.XML.ToXML Amazonka.NetworkFirewall.Types.StatefulAction.StatefulAction
instance Amazonka.Data.XML.FromXML Amazonka.NetworkFirewall.Types.StatefulAction.StatefulAction
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.NetworkFirewall.Types.StatefulAction.StatefulAction
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.StatefulAction.StatefulAction
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.NetworkFirewall.Types.StatefulAction.StatefulAction
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.StatefulAction.StatefulAction
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.Types.StatefulAction.StatefulAction
instance Amazonka.Data.Headers.ToHeader Amazonka.NetworkFirewall.Types.StatefulAction.StatefulAction
instance Amazonka.Data.Log.ToLog Amazonka.NetworkFirewall.Types.StatefulAction.StatefulAction
instance Amazonka.Data.ByteString.ToByteString Amazonka.NetworkFirewall.Types.StatefulAction.StatefulAction
instance Amazonka.Data.Text.ToText Amazonka.NetworkFirewall.Types.StatefulAction.StatefulAction
instance Amazonka.Data.Text.FromText Amazonka.NetworkFirewall.Types.StatefulAction.StatefulAction
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.StatefulAction.StatefulAction
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.StatefulAction.StatefulAction
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.StatefulAction.StatefulAction
instance GHC.Classes.Ord Amazonka.NetworkFirewall.Types.StatefulAction.StatefulAction
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.StatefulAction.StatefulAction
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.StatefulAction.StatefulAction
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.StatefulAction.StatefulAction


module Amazonka.NetworkFirewall.Types.StatefulEngineOptions

-- | Configuration settings for the handling of the stateful rule groups in
--   a firewall policy.
--   
--   <i>See:</i> <a>newStatefulEngineOptions</a> smart constructor.
data StatefulEngineOptions
StatefulEngineOptions' :: Maybe RuleOrder -> StatefulEngineOptions

-- | Indicates how to manage the order of stateful rule evaluation for the
--   policy. By default, Network Firewall leaves the rule evaluation order
--   up to the Suricata rule processing engine. If you set this to
--   <tt>STRICT_ORDER</tt>, your rules are evaluated in the exact order
--   that you provide them in the policy. With strict ordering, the rule
--   groups are evaluated by order of priority, starting from the lowest
--   number, and the rules in each rule group are processed in the order
--   that they're defined.
[$sel:ruleOrder:StatefulEngineOptions'] :: StatefulEngineOptions -> Maybe RuleOrder

-- | Create a value of <a>StatefulEngineOptions</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:ruleOrder:StatefulEngineOptions'</a>,
--   <a>statefulEngineOptions_ruleOrder</a> - Indicates how to manage the
--   order of stateful rule evaluation for the policy. By default, Network
--   Firewall leaves the rule evaluation order up to the Suricata rule
--   processing engine. If you set this to <tt>STRICT_ORDER</tt>, your
--   rules are evaluated in the exact order that you provide them in the
--   policy. With strict ordering, the rule groups are evaluated by order
--   of priority, starting from the lowest number, and the rules in each
--   rule group are processed in the order that they're defined.
newStatefulEngineOptions :: StatefulEngineOptions

-- | Indicates how to manage the order of stateful rule evaluation for the
--   policy. By default, Network Firewall leaves the rule evaluation order
--   up to the Suricata rule processing engine. If you set this to
--   <tt>STRICT_ORDER</tt>, your rules are evaluated in the exact order
--   that you provide them in the policy. With strict ordering, the rule
--   groups are evaluated by order of priority, starting from the lowest
--   number, and the rules in each rule group are processed in the order
--   that they're defined.
statefulEngineOptions_ruleOrder :: Lens' StatefulEngineOptions (Maybe RuleOrder)
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.StatefulEngineOptions.StatefulEngineOptions
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.StatefulEngineOptions.StatefulEngineOptions
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.StatefulEngineOptions.StatefulEngineOptions
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.StatefulEngineOptions.StatefulEngineOptions
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.StatefulEngineOptions.StatefulEngineOptions
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.StatefulEngineOptions.StatefulEngineOptions
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.StatefulEngineOptions.StatefulEngineOptions
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.StatefulEngineOptions.StatefulEngineOptions


module Amazonka.NetworkFirewall.Types.StatefulRuleDirection
newtype StatefulRuleDirection
StatefulRuleDirection' :: Text -> StatefulRuleDirection
[fromStatefulRuleDirection] :: StatefulRuleDirection -> Text
pattern StatefulRuleDirection_ANY :: StatefulRuleDirection
pattern StatefulRuleDirection_FORWARD :: StatefulRuleDirection
instance Amazonka.Data.XML.ToXML Amazonka.NetworkFirewall.Types.StatefulRuleDirection.StatefulRuleDirection
instance Amazonka.Data.XML.FromXML Amazonka.NetworkFirewall.Types.StatefulRuleDirection.StatefulRuleDirection
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.NetworkFirewall.Types.StatefulRuleDirection.StatefulRuleDirection
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.StatefulRuleDirection.StatefulRuleDirection
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.NetworkFirewall.Types.StatefulRuleDirection.StatefulRuleDirection
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.StatefulRuleDirection.StatefulRuleDirection
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.Types.StatefulRuleDirection.StatefulRuleDirection
instance Amazonka.Data.Headers.ToHeader Amazonka.NetworkFirewall.Types.StatefulRuleDirection.StatefulRuleDirection
instance Amazonka.Data.Log.ToLog Amazonka.NetworkFirewall.Types.StatefulRuleDirection.StatefulRuleDirection
instance Amazonka.Data.ByteString.ToByteString Amazonka.NetworkFirewall.Types.StatefulRuleDirection.StatefulRuleDirection
instance Amazonka.Data.Text.ToText Amazonka.NetworkFirewall.Types.StatefulRuleDirection.StatefulRuleDirection
instance Amazonka.Data.Text.FromText Amazonka.NetworkFirewall.Types.StatefulRuleDirection.StatefulRuleDirection
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.StatefulRuleDirection.StatefulRuleDirection
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.StatefulRuleDirection.StatefulRuleDirection
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.StatefulRuleDirection.StatefulRuleDirection
instance GHC.Classes.Ord Amazonka.NetworkFirewall.Types.StatefulRuleDirection.StatefulRuleDirection
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.StatefulRuleDirection.StatefulRuleDirection
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.StatefulRuleDirection.StatefulRuleDirection
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.StatefulRuleDirection.StatefulRuleDirection


module Amazonka.NetworkFirewall.Types.StatefulRuleGroupReference

-- | Identifier for a single stateful rule group, used in a firewall policy
--   to refer to a rule group.
--   
--   <i>See:</i> <a>newStatefulRuleGroupReference</a> smart constructor.
data StatefulRuleGroupReference
StatefulRuleGroupReference' :: Maybe Natural -> Text -> StatefulRuleGroupReference

-- | An integer setting that indicates the order in which to run the
--   stateful rule groups in a single FirewallPolicy. This setting only
--   applies to firewall policies that specify the <tt>STRICT_ORDER</tt>
--   rule order in the stateful engine options settings.
--   
--   Network Firewall evalutes each stateful rule group against a packet
--   starting with the group that has the lowest priority setting. You must
--   ensure that the priority settings are unique within each policy.
--   
--   You can change the priority settings of your rule groups at any time.
--   To make it easier to insert rule groups later, number them so there's
--   a wide range in between, for example use 100, 200, and so on.
[$sel:priority:StatefulRuleGroupReference'] :: StatefulRuleGroupReference -> Maybe Natural

-- | The Amazon Resource Name (ARN) of the stateful rule group.
[$sel:resourceArn:StatefulRuleGroupReference'] :: StatefulRuleGroupReference -> Text

-- | Create a value of <a>StatefulRuleGroupReference</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:priority:StatefulRuleGroupReference'</a>,
--   <a>statefulRuleGroupReference_priority</a> - An integer setting that
--   indicates the order in which to run the stateful rule groups in a
--   single FirewallPolicy. This setting only applies to firewall policies
--   that specify the <tt>STRICT_ORDER</tt> rule order in the stateful
--   engine options settings.
--   
--   Network Firewall evalutes each stateful rule group against a packet
--   starting with the group that has the lowest priority setting. You must
--   ensure that the priority settings are unique within each policy.
--   
--   You can change the priority settings of your rule groups at any time.
--   To make it easier to insert rule groups later, number them so there's
--   a wide range in between, for example use 100, 200, and so on.
--   
--   <a>$sel:resourceArn:StatefulRuleGroupReference'</a>,
--   <a>statefulRuleGroupReference_resourceArn</a> - The Amazon Resource
--   Name (ARN) of the stateful rule group.
newStatefulRuleGroupReference :: Text -> StatefulRuleGroupReference

-- | An integer setting that indicates the order in which to run the
--   stateful rule groups in a single FirewallPolicy. This setting only
--   applies to firewall policies that specify the <tt>STRICT_ORDER</tt>
--   rule order in the stateful engine options settings.
--   
--   Network Firewall evalutes each stateful rule group against a packet
--   starting with the group that has the lowest priority setting. You must
--   ensure that the priority settings are unique within each policy.
--   
--   You can change the priority settings of your rule groups at any time.
--   To make it easier to insert rule groups later, number them so there's
--   a wide range in between, for example use 100, 200, and so on.
statefulRuleGroupReference_priority :: Lens' StatefulRuleGroupReference (Maybe Natural)

-- | The Amazon Resource Name (ARN) of the stateful rule group.
statefulRuleGroupReference_resourceArn :: Lens' StatefulRuleGroupReference Text
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.StatefulRuleGroupReference.StatefulRuleGroupReference
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.StatefulRuleGroupReference.StatefulRuleGroupReference
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.StatefulRuleGroupReference.StatefulRuleGroupReference
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.StatefulRuleGroupReference.StatefulRuleGroupReference
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.StatefulRuleGroupReference.StatefulRuleGroupReference
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.StatefulRuleGroupReference.StatefulRuleGroupReference
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.StatefulRuleGroupReference.StatefulRuleGroupReference
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.StatefulRuleGroupReference.StatefulRuleGroupReference


module Amazonka.NetworkFirewall.Types.StatefulRuleOptions

-- | Additional options governing how Network Firewall handles the rule
--   group. You can only use these for stateful rule groups.
--   
--   <i>See:</i> <a>newStatefulRuleOptions</a> smart constructor.
data StatefulRuleOptions
StatefulRuleOptions' :: Maybe RuleOrder -> StatefulRuleOptions

-- | Indicates how to manage the order of the rule evaluation for the rule
--   group. By default, Network Firewall leaves the rule evaluation order
--   up to the Suricata rule processing engine. If you set this to
--   <tt>STRICT_ORDER</tt>, your rules are evaluated in the exact order
--   that they're listed in your Suricata rules string.
[$sel:ruleOrder:StatefulRuleOptions'] :: StatefulRuleOptions -> Maybe RuleOrder

-- | Create a value of <a>StatefulRuleOptions</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:ruleOrder:StatefulRuleOptions'</a>,
--   <a>statefulRuleOptions_ruleOrder</a> - Indicates how to manage the
--   order of the rule evaluation for the rule group. By default, Network
--   Firewall leaves the rule evaluation order up to the Suricata rule
--   processing engine. If you set this to <tt>STRICT_ORDER</tt>, your
--   rules are evaluated in the exact order that they're listed in your
--   Suricata rules string.
newStatefulRuleOptions :: StatefulRuleOptions

-- | Indicates how to manage the order of the rule evaluation for the rule
--   group. By default, Network Firewall leaves the rule evaluation order
--   up to the Suricata rule processing engine. If you set this to
--   <tt>STRICT_ORDER</tt>, your rules are evaluated in the exact order
--   that they're listed in your Suricata rules string.
statefulRuleOptions_ruleOrder :: Lens' StatefulRuleOptions (Maybe RuleOrder)
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.StatefulRuleOptions.StatefulRuleOptions
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.StatefulRuleOptions.StatefulRuleOptions
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.StatefulRuleOptions.StatefulRuleOptions
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.StatefulRuleOptions.StatefulRuleOptions
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.StatefulRuleOptions.StatefulRuleOptions
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.StatefulRuleOptions.StatefulRuleOptions
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.StatefulRuleOptions.StatefulRuleOptions
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.StatefulRuleOptions.StatefulRuleOptions


module Amazonka.NetworkFirewall.Types.StatefulRuleProtocol
newtype StatefulRuleProtocol
StatefulRuleProtocol' :: Text -> StatefulRuleProtocol
[fromStatefulRuleProtocol] :: StatefulRuleProtocol -> Text
pattern StatefulRuleProtocol_DCERPC :: StatefulRuleProtocol
pattern StatefulRuleProtocol_DHCP :: StatefulRuleProtocol
pattern StatefulRuleProtocol_DNS :: StatefulRuleProtocol
pattern StatefulRuleProtocol_FTP :: StatefulRuleProtocol
pattern StatefulRuleProtocol_HTTP :: StatefulRuleProtocol
pattern StatefulRuleProtocol_ICMP :: StatefulRuleProtocol
pattern StatefulRuleProtocol_IKEV2 :: StatefulRuleProtocol
pattern StatefulRuleProtocol_IMAP :: StatefulRuleProtocol
pattern StatefulRuleProtocol_IP :: StatefulRuleProtocol
pattern StatefulRuleProtocol_KRB5 :: StatefulRuleProtocol
pattern StatefulRuleProtocol_MSN :: StatefulRuleProtocol
pattern StatefulRuleProtocol_NTP :: StatefulRuleProtocol
pattern StatefulRuleProtocol_SMB :: StatefulRuleProtocol
pattern StatefulRuleProtocol_SMTP :: StatefulRuleProtocol
pattern StatefulRuleProtocol_SSH :: StatefulRuleProtocol
pattern StatefulRuleProtocol_TCP :: StatefulRuleProtocol
pattern StatefulRuleProtocol_TFTP :: StatefulRuleProtocol
pattern StatefulRuleProtocol_TLS :: StatefulRuleProtocol
pattern StatefulRuleProtocol_UDP :: StatefulRuleProtocol
instance Amazonka.Data.XML.ToXML Amazonka.NetworkFirewall.Types.StatefulRuleProtocol.StatefulRuleProtocol
instance Amazonka.Data.XML.FromXML Amazonka.NetworkFirewall.Types.StatefulRuleProtocol.StatefulRuleProtocol
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.NetworkFirewall.Types.StatefulRuleProtocol.StatefulRuleProtocol
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.StatefulRuleProtocol.StatefulRuleProtocol
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.NetworkFirewall.Types.StatefulRuleProtocol.StatefulRuleProtocol
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.StatefulRuleProtocol.StatefulRuleProtocol
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.Types.StatefulRuleProtocol.StatefulRuleProtocol
instance Amazonka.Data.Headers.ToHeader Amazonka.NetworkFirewall.Types.StatefulRuleProtocol.StatefulRuleProtocol
instance Amazonka.Data.Log.ToLog Amazonka.NetworkFirewall.Types.StatefulRuleProtocol.StatefulRuleProtocol
instance Amazonka.Data.ByteString.ToByteString Amazonka.NetworkFirewall.Types.StatefulRuleProtocol.StatefulRuleProtocol
instance Amazonka.Data.Text.ToText Amazonka.NetworkFirewall.Types.StatefulRuleProtocol.StatefulRuleProtocol
instance Amazonka.Data.Text.FromText Amazonka.NetworkFirewall.Types.StatefulRuleProtocol.StatefulRuleProtocol
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.StatefulRuleProtocol.StatefulRuleProtocol
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.StatefulRuleProtocol.StatefulRuleProtocol
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.StatefulRuleProtocol.StatefulRuleProtocol
instance GHC.Classes.Ord Amazonka.NetworkFirewall.Types.StatefulRuleProtocol.StatefulRuleProtocol
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.StatefulRuleProtocol.StatefulRuleProtocol
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.StatefulRuleProtocol.StatefulRuleProtocol
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.StatefulRuleProtocol.StatefulRuleProtocol


module Amazonka.NetworkFirewall.Types.Header

-- | The basic rule criteria for AWS Network Firewall to use to inspect
--   packet headers in stateful traffic flow inspection. Traffic flows that
--   match the criteria are a match for the corresponding StatefulRule.
--   
--   <i>See:</i> <a>newHeader</a> smart constructor.
data Header
Header' :: StatefulRuleProtocol -> Text -> Text -> StatefulRuleDirection -> Text -> Text -> Header

-- | The protocol to inspect for. To specify all, you can use <tt>IP</tt>,
--   because all traffic on AWS and on the internet is IP.
[$sel:protocol:Header'] :: Header -> StatefulRuleProtocol

-- | The source IP address or address range to inspect for, in CIDR
--   notation. To match with any address, specify <tt>ANY</tt>.
--   
--   Specify an IP address or a block of IP addresses in Classless
--   Inter-Domain Routing (CIDR) notation. Network Firewall supports all
--   address ranges for IPv4.
--   
--   Examples:
--   
--   <ul>
--   <li>To configure Network Firewall to inspect for the IP address
--   192.0.2.44, specify <tt>192.0.2.44/32</tt>.</li>
--   <li>To configure Network Firewall to inspect for IP addresses from
--   192.0.2.0 to 192.0.2.255, specify <tt>192.0.2.0/24</tt>.</li>
--   </ul>
--   
--   For more information about CIDR notation, see the Wikipedia entry
--   <a>Classless Inter-Domain Routing</a>.
[$sel:source:Header'] :: Header -> Text

-- | The source port to inspect for. You can specify an individual port,
--   for example <tt>1994</tt> and you can specify a port range, for
--   example <tt>1990:1994</tt>. To match with any port, specify
--   <tt>ANY</tt>.
[$sel:sourcePort:Header'] :: Header -> Text

-- | The direction of traffic flow to inspect. If set to <tt>ANY</tt>, the
--   inspection matches bidirectional traffic, both from the source to the
--   destination and from the destination to the source. If set to
--   <tt>FORWARD</tt>, the inspection only matches traffic going from the
--   source to the destination.
[$sel:direction:Header'] :: Header -> StatefulRuleDirection

-- | The destination IP address or address range to inspect for, in CIDR
--   notation. To match with any address, specify <tt>ANY</tt>.
--   
--   Specify an IP address or a block of IP addresses in Classless
--   Inter-Domain Routing (CIDR) notation. Network Firewall supports all
--   address ranges for IPv4.
--   
--   Examples:
--   
--   <ul>
--   <li>To configure Network Firewall to inspect for the IP address
--   192.0.2.44, specify <tt>192.0.2.44/32</tt>.</li>
--   <li>To configure Network Firewall to inspect for IP addresses from
--   192.0.2.0 to 192.0.2.255, specify <tt>192.0.2.0/24</tt>.</li>
--   </ul>
--   
--   For more information about CIDR notation, see the Wikipedia entry
--   <a>Classless Inter-Domain Routing</a>.
[$sel:destination:Header'] :: Header -> Text

-- | The destination port to inspect for. You can specify an individual
--   port, for example <tt>1994</tt> and you can specify a port range, for
--   example <tt>1990:1994</tt>. To match with any port, specify
--   <tt>ANY</tt>.
[$sel:destinationPort:Header'] :: Header -> Text

-- | Create a value of <a>Header</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:protocol:Header'</a>, <a>header_protocol</a> - The protocol to
--   inspect for. To specify all, you can use <tt>IP</tt>, because all
--   traffic on AWS and on the internet is IP.
--   
--   <a>$sel:source:Header'</a>, <a>header_source</a> - The source IP
--   address or address range to inspect for, in CIDR notation. To match
--   with any address, specify <tt>ANY</tt>.
--   
--   Specify an IP address or a block of IP addresses in Classless
--   Inter-Domain Routing (CIDR) notation. Network Firewall supports all
--   address ranges for IPv4.
--   
--   Examples:
--   
--   <ul>
--   <li>To configure Network Firewall to inspect for the IP address
--   192.0.2.44, specify <tt>192.0.2.44/32</tt>.</li>
--   <li>To configure Network Firewall to inspect for IP addresses from
--   192.0.2.0 to 192.0.2.255, specify <tt>192.0.2.0/24</tt>.</li>
--   </ul>
--   
--   For more information about CIDR notation, see the Wikipedia entry
--   <a>Classless Inter-Domain Routing</a>.
--   
--   <a>$sel:sourcePort:Header'</a>, <a>header_sourcePort</a> - The source
--   port to inspect for. You can specify an individual port, for example
--   <tt>1994</tt> and you can specify a port range, for example
--   <tt>1990:1994</tt>. To match with any port, specify <tt>ANY</tt>.
--   
--   <a>$sel:direction:Header'</a>, <a>header_direction</a> - The direction
--   of traffic flow to inspect. If set to <tt>ANY</tt>, the inspection
--   matches bidirectional traffic, both from the source to the destination
--   and from the destination to the source. If set to <tt>FORWARD</tt>,
--   the inspection only matches traffic going from the source to the
--   destination.
--   
--   <a>$sel:destination:Header'</a>, <a>header_destination</a> - The
--   destination IP address or address range to inspect for, in CIDR
--   notation. To match with any address, specify <tt>ANY</tt>.
--   
--   Specify an IP address or a block of IP addresses in Classless
--   Inter-Domain Routing (CIDR) notation. Network Firewall supports all
--   address ranges for IPv4.
--   
--   Examples:
--   
--   <ul>
--   <li>To configure Network Firewall to inspect for the IP address
--   192.0.2.44, specify <tt>192.0.2.44/32</tt>.</li>
--   <li>To configure Network Firewall to inspect for IP addresses from
--   192.0.2.0 to 192.0.2.255, specify <tt>192.0.2.0/24</tt>.</li>
--   </ul>
--   
--   For more information about CIDR notation, see the Wikipedia entry
--   <a>Classless Inter-Domain Routing</a>.
--   
--   <a>$sel:destinationPort:Header'</a>, <a>header_destinationPort</a> -
--   The destination port to inspect for. You can specify an individual
--   port, for example <tt>1994</tt> and you can specify a port range, for
--   example <tt>1990:1994</tt>. To match with any port, specify
--   <tt>ANY</tt>.
newHeader :: StatefulRuleProtocol -> Text -> Text -> StatefulRuleDirection -> Text -> Text -> Header

-- | The protocol to inspect for. To specify all, you can use <tt>IP</tt>,
--   because all traffic on AWS and on the internet is IP.
header_protocol :: Lens' Header StatefulRuleProtocol

-- | The source IP address or address range to inspect for, in CIDR
--   notation. To match with any address, specify <tt>ANY</tt>.
--   
--   Specify an IP address or a block of IP addresses in Classless
--   Inter-Domain Routing (CIDR) notation. Network Firewall supports all
--   address ranges for IPv4.
--   
--   Examples:
--   
--   <ul>
--   <li>To configure Network Firewall to inspect for the IP address
--   192.0.2.44, specify <tt>192.0.2.44/32</tt>.</li>
--   <li>To configure Network Firewall to inspect for IP addresses from
--   192.0.2.0 to 192.0.2.255, specify <tt>192.0.2.0/24</tt>.</li>
--   </ul>
--   
--   For more information about CIDR notation, see the Wikipedia entry
--   <a>Classless Inter-Domain Routing</a>.
header_source :: Lens' Header Text

-- | The source port to inspect for. You can specify an individual port,
--   for example <tt>1994</tt> and you can specify a port range, for
--   example <tt>1990:1994</tt>. To match with any port, specify
--   <tt>ANY</tt>.
header_sourcePort :: Lens' Header Text

-- | The direction of traffic flow to inspect. If set to <tt>ANY</tt>, the
--   inspection matches bidirectional traffic, both from the source to the
--   destination and from the destination to the source. If set to
--   <tt>FORWARD</tt>, the inspection only matches traffic going from the
--   source to the destination.
header_direction :: Lens' Header StatefulRuleDirection

-- | The destination IP address or address range to inspect for, in CIDR
--   notation. To match with any address, specify <tt>ANY</tt>.
--   
--   Specify an IP address or a block of IP addresses in Classless
--   Inter-Domain Routing (CIDR) notation. Network Firewall supports all
--   address ranges for IPv4.
--   
--   Examples:
--   
--   <ul>
--   <li>To configure Network Firewall to inspect for the IP address
--   192.0.2.44, specify <tt>192.0.2.44/32</tt>.</li>
--   <li>To configure Network Firewall to inspect for IP addresses from
--   192.0.2.0 to 192.0.2.255, specify <tt>192.0.2.0/24</tt>.</li>
--   </ul>
--   
--   For more information about CIDR notation, see the Wikipedia entry
--   <a>Classless Inter-Domain Routing</a>.
header_destination :: Lens' Header Text

-- | The destination port to inspect for. You can specify an individual
--   port, for example <tt>1994</tt> and you can specify a port range, for
--   example <tt>1990:1994</tt>. To match with any port, specify
--   <tt>ANY</tt>.
header_destinationPort :: Lens' Header Text
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.Header.Header
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.Header.Header
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.Header.Header
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.Header.Header
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.Header.Header
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.Header.Header
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.Header.Header
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.Header.Header


module Amazonka.NetworkFirewall.Types.StatefulRule

-- | A single Suricata rules specification, for use in a stateful rule
--   group. Use this option to specify a simple Suricata rule with
--   protocol, source and destination, ports, direction, and rule options.
--   For information about the Suricata <tt>Rules</tt> format, see <a>Rules
--   Format</a>.
--   
--   <i>See:</i> <a>newStatefulRule</a> smart constructor.
data StatefulRule
StatefulRule' :: StatefulAction -> Header -> [RuleOption] -> StatefulRule

-- | Defines what Network Firewall should do with the packets in a traffic
--   flow when the flow matches the stateful rule criteria. For all
--   actions, Network Firewall performs the specified action and
--   discontinues stateful inspection of the traffic flow.
--   
--   The actions for a stateful rule are defined as follows:
--   
--   <ul>
--   <li><b>PASS</b> - Permits the packets to go to the intended
--   destination.</li>
--   <li><b>DROP</b> - Blocks the packets from going to the intended
--   destination and sends an alert log message, if alert logging is
--   configured in the Firewall LoggingConfiguration.</li>
--   <li><b>ALERT</b> - Permits the packets to go to the intended
--   destination and sends an alert log message, if alert logging is
--   configured in the Firewall LoggingConfiguration.You can use this
--   action to test a rule that you intend to use to drop traffic. You can
--   enable the rule with <tt>ALERT</tt> action, verify in the logs that
--   the rule is filtering as you want, then change the action to
--   <tt>DROP</tt>.</li>
--   </ul>
[$sel:action:StatefulRule'] :: StatefulRule -> StatefulAction

-- | The stateful inspection criteria for this rule, used to inspect
--   traffic flows.
[$sel:header:StatefulRule'] :: StatefulRule -> Header

-- | Additional options for the rule. These are the Suricata
--   <tt>RuleOptions</tt> settings.
[$sel:ruleOptions:StatefulRule'] :: StatefulRule -> [RuleOption]

-- | Create a value of <a>StatefulRule</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:action:StatefulRule'</a>, <a>statefulRule_action</a> - Defines
--   what Network Firewall should do with the packets in a traffic flow
--   when the flow matches the stateful rule criteria. For all actions,
--   Network Firewall performs the specified action and discontinues
--   stateful inspection of the traffic flow.
--   
--   The actions for a stateful rule are defined as follows:
--   
--   <ul>
--   <li><b>PASS</b> - Permits the packets to go to the intended
--   destination.</li>
--   <li><b>DROP</b> - Blocks the packets from going to the intended
--   destination and sends an alert log message, if alert logging is
--   configured in the Firewall LoggingConfiguration.</li>
--   <li><b>ALERT</b> - Permits the packets to go to the intended
--   destination and sends an alert log message, if alert logging is
--   configured in the Firewall LoggingConfiguration.You can use this
--   action to test a rule that you intend to use to drop traffic. You can
--   enable the rule with <tt>ALERT</tt> action, verify in the logs that
--   the rule is filtering as you want, then change the action to
--   <tt>DROP</tt>.</li>
--   </ul>
--   
--   <a>$sel:header:StatefulRule'</a>, <a>statefulRule_header</a> - The
--   stateful inspection criteria for this rule, used to inspect traffic
--   flows.
--   
--   <a>$sel:ruleOptions:StatefulRule'</a>, <a>statefulRule_ruleOptions</a>
--   - Additional options for the rule. These are the Suricata
--   <tt>RuleOptions</tt> settings.
newStatefulRule :: StatefulAction -> Header -> StatefulRule

-- | Defines what Network Firewall should do with the packets in a traffic
--   flow when the flow matches the stateful rule criteria. For all
--   actions, Network Firewall performs the specified action and
--   discontinues stateful inspection of the traffic flow.
--   
--   The actions for a stateful rule are defined as follows:
--   
--   <ul>
--   <li><b>PASS</b> - Permits the packets to go to the intended
--   destination.</li>
--   <li><b>DROP</b> - Blocks the packets from going to the intended
--   destination and sends an alert log message, if alert logging is
--   configured in the Firewall LoggingConfiguration.</li>
--   <li><b>ALERT</b> - Permits the packets to go to the intended
--   destination and sends an alert log message, if alert logging is
--   configured in the Firewall LoggingConfiguration.You can use this
--   action to test a rule that you intend to use to drop traffic. You can
--   enable the rule with <tt>ALERT</tt> action, verify in the logs that
--   the rule is filtering as you want, then change the action to
--   <tt>DROP</tt>.</li>
--   </ul>
statefulRule_action :: Lens' StatefulRule StatefulAction

-- | The stateful inspection criteria for this rule, used to inspect
--   traffic flows.
statefulRule_header :: Lens' StatefulRule Header

-- | Additional options for the rule. These are the Suricata
--   <tt>RuleOptions</tt> settings.
statefulRule_ruleOptions :: Lens' StatefulRule [RuleOption]
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.StatefulRule.StatefulRule
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.StatefulRule.StatefulRule
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.StatefulRule.StatefulRule
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.StatefulRule.StatefulRule
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.StatefulRule.StatefulRule
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.StatefulRule.StatefulRule
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.StatefulRule.StatefulRule
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.StatefulRule.StatefulRule


module Amazonka.NetworkFirewall.Types.StatelessRuleGroupReference

-- | Identifier for a single stateless rule group, used in a firewall
--   policy to refer to the rule group.
--   
--   <i>See:</i> <a>newStatelessRuleGroupReference</a> smart constructor.
data StatelessRuleGroupReference
StatelessRuleGroupReference' :: Text -> Natural -> StatelessRuleGroupReference

-- | The Amazon Resource Name (ARN) of the stateless rule group.
[$sel:resourceArn:StatelessRuleGroupReference'] :: StatelessRuleGroupReference -> Text

-- | An integer setting that indicates the order in which to run the
--   stateless rule groups in a single FirewallPolicy. Network Firewall
--   applies each stateless rule group to a packet starting with the group
--   that has the lowest priority setting. You must ensure that the
--   priority settings are unique within each policy.
[$sel:priority:StatelessRuleGroupReference'] :: StatelessRuleGroupReference -> Natural

-- | Create a value of <a>StatelessRuleGroupReference</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:StatelessRuleGroupReference'</a>,
--   <a>statelessRuleGroupReference_resourceArn</a> - The Amazon Resource
--   Name (ARN) of the stateless rule group.
--   
--   <a>$sel:priority:StatelessRuleGroupReference'</a>,
--   <a>statelessRuleGroupReference_priority</a> - An integer setting that
--   indicates the order in which to run the stateless rule groups in a
--   single FirewallPolicy. Network Firewall applies each stateless rule
--   group to a packet starting with the group that has the lowest priority
--   setting. You must ensure that the priority settings are unique within
--   each policy.
newStatelessRuleGroupReference :: Text -> Natural -> StatelessRuleGroupReference

-- | The Amazon Resource Name (ARN) of the stateless rule group.
statelessRuleGroupReference_resourceArn :: Lens' StatelessRuleGroupReference Text

-- | An integer setting that indicates the order in which to run the
--   stateless rule groups in a single FirewallPolicy. Network Firewall
--   applies each stateless rule group to a packet starting with the group
--   that has the lowest priority setting. You must ensure that the
--   priority settings are unique within each policy.
statelessRuleGroupReference_priority :: Lens' StatelessRuleGroupReference Natural
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.StatelessRuleGroupReference.StatelessRuleGroupReference
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.StatelessRuleGroupReference.StatelessRuleGroupReference
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.StatelessRuleGroupReference.StatelessRuleGroupReference
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.StatelessRuleGroupReference.StatelessRuleGroupReference
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.StatelessRuleGroupReference.StatelessRuleGroupReference
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.StatelessRuleGroupReference.StatelessRuleGroupReference
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.StatelessRuleGroupReference.StatelessRuleGroupReference
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.StatelessRuleGroupReference.StatelessRuleGroupReference


module Amazonka.NetworkFirewall.Types.FirewallPolicy

-- | The firewall policy defines the behavior of a firewall using a
--   collection of stateless and stateful rule groups and other settings.
--   You can use one firewall policy for multiple firewalls.
--   
--   This, along with FirewallPolicyResponse, define the policy. You can
--   retrieve all objects for a firewall policy by calling
--   DescribeFirewallPolicy.
--   
--   <i>See:</i> <a>newFirewallPolicy</a> smart constructor.
data FirewallPolicy
FirewallPolicy' :: Maybe StatefulEngineOptions -> Maybe [StatefulRuleGroupReference] -> Maybe [StatelessRuleGroupReference] -> Maybe [CustomAction] -> Maybe [Text] -> [Text] -> [Text] -> FirewallPolicy

-- | Additional options governing how Network Firewall handles stateful
--   rules. The stateful rule groups that you use in your policy must have
--   stateful rule options settings that are compatible with these
--   settings.
[$sel:statefulEngineOptions:FirewallPolicy'] :: FirewallPolicy -> Maybe StatefulEngineOptions

-- | References to the stateful rule groups that are used in the policy.
--   These define the inspection criteria in stateful rules.
[$sel:statefulRuleGroupReferences:FirewallPolicy'] :: FirewallPolicy -> Maybe [StatefulRuleGroupReference]

-- | References to the stateless rule groups that are used in the policy.
--   These define the matching criteria in stateless rules.
[$sel:statelessRuleGroupReferences:FirewallPolicy'] :: FirewallPolicy -> Maybe [StatelessRuleGroupReference]

-- | The custom action definitions that are available for use in the
--   firewall policy's <tt>StatelessDefaultActions</tt> setting. You name
--   each custom action that you define, and then you can use it by name in
--   your default actions specifications.
[$sel:statelessCustomActions:FirewallPolicy'] :: FirewallPolicy -> Maybe [CustomAction]

-- | The default actions to take on a packet that doesn't match any
--   stateful rules.
[$sel:statefulDefaultActions:FirewallPolicy'] :: FirewallPolicy -> Maybe [Text]

-- | The actions to take on a packet if it doesn't match any of the
--   stateless rules in the policy. If you want non-matching packets to be
--   forwarded for stateful inspection, specify
--   <tt>aws:forward_to_sfe</tt>.
--   
--   You must specify one of the standard actions: <tt>aws:pass</tt>,
--   <tt>aws:drop</tt>, or <tt>aws:forward_to_sfe</tt>. In addition, you
--   can specify custom actions that are compatible with your standard
--   section choice.
--   
--   For example, you could specify <tt>["aws:pass"]</tt> or you could
--   specify <tt>["aws:pass", “customActionName”]</tt>. For information
--   about compatibility, see the custom action descriptions under
--   CustomAction.
[$sel:statelessDefaultActions:FirewallPolicy'] :: FirewallPolicy -> [Text]

-- | The actions to take on a fragmented UDP packet if it doesn't match any
--   of the stateless rules in the policy. Network Firewall only manages
--   UDP packet fragments and silently drops packet fragments for other
--   protocols. If you want non-matching fragmented UDP packets to be
--   forwarded for stateful inspection, specify
--   <tt>aws:forward_to_sfe</tt>.
--   
--   You must specify one of the standard actions: <tt>aws:pass</tt>,
--   <tt>aws:drop</tt>, or <tt>aws:forward_to_sfe</tt>. In addition, you
--   can specify custom actions that are compatible with your standard
--   section choice.
--   
--   For example, you could specify <tt>["aws:pass"]</tt> or you could
--   specify <tt>["aws:pass", “customActionName”]</tt>. For information
--   about compatibility, see the custom action descriptions under
--   CustomAction.
[$sel:statelessFragmentDefaultActions:FirewallPolicy'] :: FirewallPolicy -> [Text]

-- | Create a value of <a>FirewallPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:statefulEngineOptions:FirewallPolicy'</a>,
--   <a>firewallPolicy_statefulEngineOptions</a> - Additional options
--   governing how Network Firewall handles stateful rules. The stateful
--   rule groups that you use in your policy must have stateful rule
--   options settings that are compatible with these settings.
--   
--   <a>$sel:statefulRuleGroupReferences:FirewallPolicy'</a>,
--   <a>firewallPolicy_statefulRuleGroupReferences</a> - References to the
--   stateful rule groups that are used in the policy. These define the
--   inspection criteria in stateful rules.
--   
--   <a>$sel:statelessRuleGroupReferences:FirewallPolicy'</a>,
--   <a>firewallPolicy_statelessRuleGroupReferences</a> - References to the
--   stateless rule groups that are used in the policy. These define the
--   matching criteria in stateless rules.
--   
--   <a>$sel:statelessCustomActions:FirewallPolicy'</a>,
--   <a>firewallPolicy_statelessCustomActions</a> - The custom action
--   definitions that are available for use in the firewall policy's
--   <tt>StatelessDefaultActions</tt> setting. You name each custom action
--   that you define, and then you can use it by name in your default
--   actions specifications.
--   
--   <a>$sel:statefulDefaultActions:FirewallPolicy'</a>,
--   <a>firewallPolicy_statefulDefaultActions</a> - The default actions to
--   take on a packet that doesn't match any stateful rules.
--   
--   <a>$sel:statelessDefaultActions:FirewallPolicy'</a>,
--   <a>firewallPolicy_statelessDefaultActions</a> - The actions to take on
--   a packet if it doesn't match any of the stateless rules in the policy.
--   If you want non-matching packets to be forwarded for stateful
--   inspection, specify <tt>aws:forward_to_sfe</tt>.
--   
--   You must specify one of the standard actions: <tt>aws:pass</tt>,
--   <tt>aws:drop</tt>, or <tt>aws:forward_to_sfe</tt>. In addition, you
--   can specify custom actions that are compatible with your standard
--   section choice.
--   
--   For example, you could specify <tt>["aws:pass"]</tt> or you could
--   specify <tt>["aws:pass", “customActionName”]</tt>. For information
--   about compatibility, see the custom action descriptions under
--   CustomAction.
--   
--   <a>$sel:statelessFragmentDefaultActions:FirewallPolicy'</a>,
--   <a>firewallPolicy_statelessFragmentDefaultActions</a> - The actions to
--   take on a fragmented UDP packet if it doesn't match any of the
--   stateless rules in the policy. Network Firewall only manages UDP
--   packet fragments and silently drops packet fragments for other
--   protocols. If you want non-matching fragmented UDP packets to be
--   forwarded for stateful inspection, specify
--   <tt>aws:forward_to_sfe</tt>.
--   
--   You must specify one of the standard actions: <tt>aws:pass</tt>,
--   <tt>aws:drop</tt>, or <tt>aws:forward_to_sfe</tt>. In addition, you
--   can specify custom actions that are compatible with your standard
--   section choice.
--   
--   For example, you could specify <tt>["aws:pass"]</tt> or you could
--   specify <tt>["aws:pass", “customActionName”]</tt>. For information
--   about compatibility, see the custom action descriptions under
--   CustomAction.
newFirewallPolicy :: FirewallPolicy

-- | Additional options governing how Network Firewall handles stateful
--   rules. The stateful rule groups that you use in your policy must have
--   stateful rule options settings that are compatible with these
--   settings.
firewallPolicy_statefulEngineOptions :: Lens' FirewallPolicy (Maybe StatefulEngineOptions)

-- | References to the stateful rule groups that are used in the policy.
--   These define the inspection criteria in stateful rules.
firewallPolicy_statefulRuleGroupReferences :: Lens' FirewallPolicy (Maybe [StatefulRuleGroupReference])

-- | References to the stateless rule groups that are used in the policy.
--   These define the matching criteria in stateless rules.
firewallPolicy_statelessRuleGroupReferences :: Lens' FirewallPolicy (Maybe [StatelessRuleGroupReference])

-- | The custom action definitions that are available for use in the
--   firewall policy's <tt>StatelessDefaultActions</tt> setting. You name
--   each custom action that you define, and then you can use it by name in
--   your default actions specifications.
firewallPolicy_statelessCustomActions :: Lens' FirewallPolicy (Maybe [CustomAction])

-- | The default actions to take on a packet that doesn't match any
--   stateful rules.
firewallPolicy_statefulDefaultActions :: Lens' FirewallPolicy (Maybe [Text])

-- | The actions to take on a packet if it doesn't match any of the
--   stateless rules in the policy. If you want non-matching packets to be
--   forwarded for stateful inspection, specify
--   <tt>aws:forward_to_sfe</tt>.
--   
--   You must specify one of the standard actions: <tt>aws:pass</tt>,
--   <tt>aws:drop</tt>, or <tt>aws:forward_to_sfe</tt>. In addition, you
--   can specify custom actions that are compatible with your standard
--   section choice.
--   
--   For example, you could specify <tt>["aws:pass"]</tt> or you could
--   specify <tt>["aws:pass", “customActionName”]</tt>. For information
--   about compatibility, see the custom action descriptions under
--   CustomAction.
firewallPolicy_statelessDefaultActions :: Lens' FirewallPolicy [Text]

-- | The actions to take on a fragmented UDP packet if it doesn't match any
--   of the stateless rules in the policy. Network Firewall only manages
--   UDP packet fragments and silently drops packet fragments for other
--   protocols. If you want non-matching fragmented UDP packets to be
--   forwarded for stateful inspection, specify
--   <tt>aws:forward_to_sfe</tt>.
--   
--   You must specify one of the standard actions: <tt>aws:pass</tt>,
--   <tt>aws:drop</tt>, or <tt>aws:forward_to_sfe</tt>. In addition, you
--   can specify custom actions that are compatible with your standard
--   section choice.
--   
--   For example, you could specify <tt>["aws:pass"]</tt> or you could
--   specify <tt>["aws:pass", “customActionName”]</tt>. For information
--   about compatibility, see the custom action descriptions under
--   CustomAction.
firewallPolicy_statelessFragmentDefaultActions :: Lens' FirewallPolicy [Text]
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.FirewallPolicy.FirewallPolicy
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.FirewallPolicy.FirewallPolicy
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.FirewallPolicy.FirewallPolicy
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.FirewallPolicy.FirewallPolicy
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.FirewallPolicy.FirewallPolicy
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.FirewallPolicy.FirewallPolicy
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.FirewallPolicy.FirewallPolicy
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.FirewallPolicy.FirewallPolicy


module Amazonka.NetworkFirewall.Types.SubnetMapping

-- | The ID for a subnet that you want to associate with the firewall. This
--   is used with CreateFirewall and AssociateSubnets. AWS Network Firewall
--   creates an instance of the associated firewall in each subnet that you
--   specify, to filter traffic in the subnet's Availability Zone.
--   
--   <i>See:</i> <a>newSubnetMapping</a> smart constructor.
data SubnetMapping
SubnetMapping' :: Text -> SubnetMapping

-- | The unique identifier for the subnet.
[$sel:subnetId:SubnetMapping'] :: SubnetMapping -> Text

-- | Create a value of <a>SubnetMapping</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:subnetId:SubnetMapping'</a>, <a>subnetMapping_subnetId</a> -
--   The unique identifier for the subnet.
newSubnetMapping :: Text -> SubnetMapping

-- | The unique identifier for the subnet.
subnetMapping_subnetId :: Lens' SubnetMapping Text
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.SubnetMapping.SubnetMapping
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.SubnetMapping.SubnetMapping
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.SubnetMapping.SubnetMapping
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.SubnetMapping.SubnetMapping
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.SubnetMapping.SubnetMapping
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.SubnetMapping.SubnetMapping
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.SubnetMapping.SubnetMapping
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.SubnetMapping.SubnetMapping


module Amazonka.NetworkFirewall.Types.SyncState

-- | The status of the firewall endpoint and firewall policy configuration
--   for a single VPC subnet.
--   
--   For each VPC subnet that you associate with a firewall, AWS Network
--   Firewall does the following:
--   
--   <ul>
--   <li>Instantiates a firewall endpoint in the subnet, ready to take
--   traffic.</li>
--   <li>Configures the endpoint with the current firewall policy settings,
--   to provide the filtering behavior for the endpoint.</li>
--   </ul>
--   
--   When you update a firewall, for example to add a subnet association or
--   change a rule group in the firewall policy, the affected sync states
--   reflect out-of-sync or not ready status until the changes are
--   complete.
--   
--   <i>See:</i> <a>newSyncState</a> smart constructor.
data SyncState
SyncState' :: Maybe (HashMap Text PerObjectStatus) -> Maybe Attachment -> SyncState

-- | The configuration status of the firewall endpoint in a single VPC
--   subnet. Network Firewall provides each endpoint with the rules that
--   are configured in the firewall policy. Each time you add a subnet or
--   modify the associated firewall policy, Network Firewall synchronizes
--   the rules in the endpoint, so it can properly filter network traffic.
--   This is part of the FirewallStatus.
[$sel:config:SyncState'] :: SyncState -> Maybe (HashMap Text PerObjectStatus)

-- | The attachment status of the firewall's association with a single VPC
--   subnet. For each configured subnet, Network Firewall creates the
--   attachment by instantiating the firewall endpoint in the subnet so
--   that it's ready to take traffic. This is part of the FirewallStatus.
[$sel:attachment:SyncState'] :: SyncState -> Maybe Attachment

-- | Create a value of <a>SyncState</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:config:SyncState'</a>, <a>syncState_config</a> - The
--   configuration status of the firewall endpoint in a single VPC subnet.
--   Network Firewall provides each endpoint with the rules that are
--   configured in the firewall policy. Each time you add a subnet or
--   modify the associated firewall policy, Network Firewall synchronizes
--   the rules in the endpoint, so it can properly filter network traffic.
--   This is part of the FirewallStatus.
--   
--   <a>$sel:attachment:SyncState'</a>, <a>syncState_attachment</a> - The
--   attachment status of the firewall's association with a single VPC
--   subnet. For each configured subnet, Network Firewall creates the
--   attachment by instantiating the firewall endpoint in the subnet so
--   that it's ready to take traffic. This is part of the FirewallStatus.
newSyncState :: SyncState

-- | The configuration status of the firewall endpoint in a single VPC
--   subnet. Network Firewall provides each endpoint with the rules that
--   are configured in the firewall policy. Each time you add a subnet or
--   modify the associated firewall policy, Network Firewall synchronizes
--   the rules in the endpoint, so it can properly filter network traffic.
--   This is part of the FirewallStatus.
syncState_config :: Lens' SyncState (Maybe (HashMap Text PerObjectStatus))

-- | The attachment status of the firewall's association with a single VPC
--   subnet. For each configured subnet, Network Firewall creates the
--   attachment by instantiating the firewall endpoint in the subnet so
--   that it's ready to take traffic. This is part of the FirewallStatus.
syncState_attachment :: Lens' SyncState (Maybe Attachment)
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.SyncState.SyncState
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.SyncState.SyncState
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.SyncState.SyncState
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.SyncState.SyncState
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.SyncState.SyncState
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.SyncState.SyncState
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.SyncState.SyncState


module Amazonka.NetworkFirewall.Types.FirewallStatus

-- | Detailed information about the current status of a Firewall. You can
--   retrieve this for a firewall by calling DescribeFirewall and providing
--   the firewall name and ARN.
--   
--   <i>See:</i> <a>newFirewallStatus</a> smart constructor.
data FirewallStatus
FirewallStatus' :: Maybe (HashMap Text SyncState) -> FirewallStatusValue -> ConfigurationSyncState -> FirewallStatus

-- | The subnets that you've configured for use by the Network Firewall
--   firewall. This contains one array element per Availability Zone where
--   you've configured a subnet. These objects provide details of the
--   information that is summarized in the
--   <tt>ConfigurationSyncStateSummary</tt> and <tt>Status</tt>, broken
--   down by zone and configuration object.
[$sel:syncStates:FirewallStatus'] :: FirewallStatus -> Maybe (HashMap Text SyncState)

-- | The readiness of the configured firewall to handle network traffic
--   across all of the Availability Zones where you've configured it. This
--   setting is <tt>READY</tt> only when the
--   <tt>ConfigurationSyncStateSummary</tt> value is <tt>IN_SYNC</tt> and
--   the <tt>Attachment</tt> <tt>Status</tt> values for all of the
--   configured subnets are <tt>READY</tt>.
[$sel:status:FirewallStatus'] :: FirewallStatus -> FirewallStatusValue

-- | The configuration sync state for the firewall. This summarizes the
--   sync states reported in the <tt>Config</tt> settings for all of the
--   Availability Zones where you have configured the firewall.
--   
--   When you create a firewall or update its configuration, for example by
--   adding a rule group to its firewall policy, Network Firewall
--   distributes the configuration changes to all zones where the firewall
--   is in use. This summary indicates whether the configuration changes
--   have been applied everywhere.
--   
--   This status must be <tt>IN_SYNC</tt> for the firewall to be ready for
--   use, but it doesn't indicate that the firewall is ready. The
--   <tt>Status</tt> setting indicates firewall readiness.
[$sel:configurationSyncStateSummary:FirewallStatus'] :: FirewallStatus -> ConfigurationSyncState

-- | Create a value of <a>FirewallStatus</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:syncStates:FirewallStatus'</a>,
--   <a>firewallStatus_syncStates</a> - The subnets that you've configured
--   for use by the Network Firewall firewall. This contains one array
--   element per Availability Zone where you've configured a subnet. These
--   objects provide details of the information that is summarized in the
--   <tt>ConfigurationSyncStateSummary</tt> and <tt>Status</tt>, broken
--   down by zone and configuration object.
--   
--   <a>$sel:status:FirewallStatus'</a>, <a>firewallStatus_status</a> - The
--   readiness of the configured firewall to handle network traffic across
--   all of the Availability Zones where you've configured it. This setting
--   is <tt>READY</tt> only when the <tt>ConfigurationSyncStateSummary</tt>
--   value is <tt>IN_SYNC</tt> and the <tt>Attachment</tt> <tt>Status</tt>
--   values for all of the configured subnets are <tt>READY</tt>.
--   
--   <a>$sel:configurationSyncStateSummary:FirewallStatus'</a>,
--   <a>firewallStatus_configurationSyncStateSummary</a> - The
--   configuration sync state for the firewall. This summarizes the sync
--   states reported in the <tt>Config</tt> settings for all of the
--   Availability Zones where you have configured the firewall.
--   
--   When you create a firewall or update its configuration, for example by
--   adding a rule group to its firewall policy, Network Firewall
--   distributes the configuration changes to all zones where the firewall
--   is in use. This summary indicates whether the configuration changes
--   have been applied everywhere.
--   
--   This status must be <tt>IN_SYNC</tt> for the firewall to be ready for
--   use, but it doesn't indicate that the firewall is ready. The
--   <tt>Status</tt> setting indicates firewall readiness.
newFirewallStatus :: FirewallStatusValue -> ConfigurationSyncState -> FirewallStatus

-- | The subnets that you've configured for use by the Network Firewall
--   firewall. This contains one array element per Availability Zone where
--   you've configured a subnet. These objects provide details of the
--   information that is summarized in the
--   <tt>ConfigurationSyncStateSummary</tt> and <tt>Status</tt>, broken
--   down by zone and configuration object.
firewallStatus_syncStates :: Lens' FirewallStatus (Maybe (HashMap Text SyncState))

-- | The readiness of the configured firewall to handle network traffic
--   across all of the Availability Zones where you've configured it. This
--   setting is <tt>READY</tt> only when the
--   <tt>ConfigurationSyncStateSummary</tt> value is <tt>IN_SYNC</tt> and
--   the <tt>Attachment</tt> <tt>Status</tt> values for all of the
--   configured subnets are <tt>READY</tt>.
firewallStatus_status :: Lens' FirewallStatus FirewallStatusValue

-- | The configuration sync state for the firewall. This summarizes the
--   sync states reported in the <tt>Config</tt> settings for all of the
--   Availability Zones where you have configured the firewall.
--   
--   When you create a firewall or update its configuration, for example by
--   adding a rule group to its firewall policy, Network Firewall
--   distributes the configuration changes to all zones where the firewall
--   is in use. This summary indicates whether the configuration changes
--   have been applied everywhere.
--   
--   This status must be <tt>IN_SYNC</tt> for the firewall to be ready for
--   use, but it doesn't indicate that the firewall is ready. The
--   <tt>Status</tt> setting indicates firewall readiness.
firewallStatus_configurationSyncStateSummary :: Lens' FirewallStatus ConfigurationSyncState
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.FirewallStatus.FirewallStatus
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.FirewallStatus.FirewallStatus
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.FirewallStatus.FirewallStatus
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.FirewallStatus.FirewallStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.FirewallStatus.FirewallStatus
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.FirewallStatus.FirewallStatus
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.FirewallStatus.FirewallStatus


module Amazonka.NetworkFirewall.Types.TCPFlag
newtype TCPFlag
TCPFlag' :: Text -> TCPFlag
[fromTCPFlag] :: TCPFlag -> Text
pattern TCPFlag_ACK :: TCPFlag
pattern TCPFlag_CWR :: TCPFlag
pattern TCPFlag_ECE :: TCPFlag
pattern TCPFlag_FIN :: TCPFlag
pattern TCPFlag_PSH :: TCPFlag
pattern TCPFlag_RST :: TCPFlag
pattern TCPFlag_SYN :: TCPFlag
pattern TCPFlag_URG :: TCPFlag
instance Amazonka.Data.XML.ToXML Amazonka.NetworkFirewall.Types.TCPFlag.TCPFlag
instance Amazonka.Data.XML.FromXML Amazonka.NetworkFirewall.Types.TCPFlag.TCPFlag
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.NetworkFirewall.Types.TCPFlag.TCPFlag
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.TCPFlag.TCPFlag
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.NetworkFirewall.Types.TCPFlag.TCPFlag
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.TCPFlag.TCPFlag
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.Types.TCPFlag.TCPFlag
instance Amazonka.Data.Headers.ToHeader Amazonka.NetworkFirewall.Types.TCPFlag.TCPFlag
instance Amazonka.Data.Log.ToLog Amazonka.NetworkFirewall.Types.TCPFlag.TCPFlag
instance Amazonka.Data.ByteString.ToByteString Amazonka.NetworkFirewall.Types.TCPFlag.TCPFlag
instance Amazonka.Data.Text.ToText Amazonka.NetworkFirewall.Types.TCPFlag.TCPFlag
instance Amazonka.Data.Text.FromText Amazonka.NetworkFirewall.Types.TCPFlag.TCPFlag
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.TCPFlag.TCPFlag
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.TCPFlag.TCPFlag
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.TCPFlag.TCPFlag
instance GHC.Classes.Ord Amazonka.NetworkFirewall.Types.TCPFlag.TCPFlag
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.TCPFlag.TCPFlag
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.TCPFlag.TCPFlag
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.TCPFlag.TCPFlag


module Amazonka.NetworkFirewall.Types.TCPFlagField

-- | TCP flags and masks to inspect packets for, used in stateless rules
--   MatchAttributes settings.
--   
--   <i>See:</i> <a>newTCPFlagField</a> smart constructor.
data TCPFlagField
TCPFlagField' :: Maybe [TCPFlag] -> [TCPFlag] -> TCPFlagField

-- | The set of flags to consider in the inspection. To inspect all flags
--   in the valid values list, leave this with no setting.
[$sel:masks:TCPFlagField'] :: TCPFlagField -> Maybe [TCPFlag]

-- | Used in conjunction with the <tt>Masks</tt> setting to define the
--   flags that must be set and flags that must not be set in order for the
--   packet to match. This setting can only specify values that are also
--   specified in the <tt>Masks</tt> setting.
--   
--   For the flags that are specified in the masks setting, the following
--   must be true for the packet to match:
--   
--   <ul>
--   <li>The ones that are set in this flags setting must be set in the
--   packet.</li>
--   <li>The ones that are not set in this flags setting must also not be
--   set in the packet.</li>
--   </ul>
[$sel:flags:TCPFlagField'] :: TCPFlagField -> [TCPFlag]

-- | Create a value of <a>TCPFlagField</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:masks:TCPFlagField'</a>, <a>tCPFlagField_masks</a> - The set
--   of flags to consider in the inspection. To inspect all flags in the
--   valid values list, leave this with no setting.
--   
--   <a>$sel:flags:TCPFlagField'</a>, <a>tCPFlagField_flags</a> - Used in
--   conjunction with the <tt>Masks</tt> setting to define the flags that
--   must be set and flags that must not be set in order for the packet to
--   match. This setting can only specify values that are also specified in
--   the <tt>Masks</tt> setting.
--   
--   For the flags that are specified in the masks setting, the following
--   must be true for the packet to match:
--   
--   <ul>
--   <li>The ones that are set in this flags setting must be set in the
--   packet.</li>
--   <li>The ones that are not set in this flags setting must also not be
--   set in the packet.</li>
--   </ul>
newTCPFlagField :: TCPFlagField

-- | The set of flags to consider in the inspection. To inspect all flags
--   in the valid values list, leave this with no setting.
tCPFlagField_masks :: Lens' TCPFlagField (Maybe [TCPFlag])

-- | Used in conjunction with the <tt>Masks</tt> setting to define the
--   flags that must be set and flags that must not be set in order for the
--   packet to match. This setting can only specify values that are also
--   specified in the <tt>Masks</tt> setting.
--   
--   For the flags that are specified in the masks setting, the following
--   must be true for the packet to match:
--   
--   <ul>
--   <li>The ones that are set in this flags setting must be set in the
--   packet.</li>
--   <li>The ones that are not set in this flags setting must also not be
--   set in the packet.</li>
--   </ul>
tCPFlagField_flags :: Lens' TCPFlagField [TCPFlag]
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.TCPFlagField.TCPFlagField
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.TCPFlagField.TCPFlagField
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.TCPFlagField.TCPFlagField
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.TCPFlagField.TCPFlagField
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.TCPFlagField.TCPFlagField
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.TCPFlagField.TCPFlagField
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.TCPFlagField.TCPFlagField
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.TCPFlagField.TCPFlagField


module Amazonka.NetworkFirewall.Types.MatchAttributes

-- | Criteria for Network Firewall to use to inspect an individual packet
--   in stateless rule inspection. Each match attributes set can include
--   one or more items such as IP address, CIDR range, port number,
--   protocol, and TCP flags.
--   
--   <i>See:</i> <a>newMatchAttributes</a> smart constructor.
data MatchAttributes
MatchAttributes' :: Maybe [Natural] -> Maybe [TCPFlagField] -> Maybe [PortRange] -> Maybe [Address] -> Maybe [PortRange] -> Maybe [Address] -> MatchAttributes

-- | The protocols to inspect for, specified using each protocol's assigned
--   internet protocol number (IANA). If not specified, this matches with
--   any protocol.
[$sel:protocols:MatchAttributes'] :: MatchAttributes -> Maybe [Natural]

-- | The TCP flags and masks to inspect for. If not specified, this matches
--   with any settings. This setting is only used for protocol 6 (TCP).
[$sel:tCPFlags:MatchAttributes'] :: MatchAttributes -> Maybe [TCPFlagField]

-- | The destination ports to inspect for. If not specified, this matches
--   with any destination port. This setting is only used for protocols 6
--   (TCP) and 17 (UDP).
--   
--   You can specify individual ports, for example <tt>1994</tt> and you
--   can specify port ranges, for example <tt>1990:1994</tt>.
[$sel:destinationPorts:MatchAttributes'] :: MatchAttributes -> Maybe [PortRange]

-- | The source IP addresses and address ranges to inspect for, in CIDR
--   notation. If not specified, this matches with any source address.
[$sel:sources:MatchAttributes'] :: MatchAttributes -> Maybe [Address]

-- | The source ports to inspect for. If not specified, this matches with
--   any source port. This setting is only used for protocols 6 (TCP) and
--   17 (UDP).
--   
--   You can specify individual ports, for example <tt>1994</tt> and you
--   can specify port ranges, for example <tt>1990:1994</tt>.
[$sel:sourcePorts:MatchAttributes'] :: MatchAttributes -> Maybe [PortRange]

-- | The destination IP addresses and address ranges to inspect for, in
--   CIDR notation. If not specified, this matches with any destination
--   address.
[$sel:destinations:MatchAttributes'] :: MatchAttributes -> Maybe [Address]

-- | Create a value of <a>MatchAttributes</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:protocols:MatchAttributes'</a>,
--   <a>matchAttributes_protocols</a> - The protocols to inspect for,
--   specified using each protocol's assigned internet protocol number
--   (IANA). If not specified, this matches with any protocol.
--   
--   <a>$sel:tCPFlags:MatchAttributes'</a>, <a>matchAttributes_tCPFlags</a>
--   - The TCP flags and masks to inspect for. If not specified, this
--   matches with any settings. This setting is only used for protocol 6
--   (TCP).
--   
--   <a>$sel:destinationPorts:MatchAttributes'</a>,
--   <a>matchAttributes_destinationPorts</a> - The destination ports to
--   inspect for. If not specified, this matches with any destination port.
--   This setting is only used for protocols 6 (TCP) and 17 (UDP).
--   
--   You can specify individual ports, for example <tt>1994</tt> and you
--   can specify port ranges, for example <tt>1990:1994</tt>.
--   
--   <a>$sel:sources:MatchAttributes'</a>, <a>matchAttributes_sources</a> -
--   The source IP addresses and address ranges to inspect for, in CIDR
--   notation. If not specified, this matches with any source address.
--   
--   <a>$sel:sourcePorts:MatchAttributes'</a>,
--   <a>matchAttributes_sourcePorts</a> - The source ports to inspect for.
--   If not specified, this matches with any source port. This setting is
--   only used for protocols 6 (TCP) and 17 (UDP).
--   
--   You can specify individual ports, for example <tt>1994</tt> and you
--   can specify port ranges, for example <tt>1990:1994</tt>.
--   
--   <a>$sel:destinations:MatchAttributes'</a>,
--   <a>matchAttributes_destinations</a> - The destination IP addresses and
--   address ranges to inspect for, in CIDR notation. If not specified,
--   this matches with any destination address.
newMatchAttributes :: MatchAttributes

-- | The protocols to inspect for, specified using each protocol's assigned
--   internet protocol number (IANA). If not specified, this matches with
--   any protocol.
matchAttributes_protocols :: Lens' MatchAttributes (Maybe [Natural])

-- | The TCP flags and masks to inspect for. If not specified, this matches
--   with any settings. This setting is only used for protocol 6 (TCP).
matchAttributes_tCPFlags :: Lens' MatchAttributes (Maybe [TCPFlagField])

-- | The destination ports to inspect for. If not specified, this matches
--   with any destination port. This setting is only used for protocols 6
--   (TCP) and 17 (UDP).
--   
--   You can specify individual ports, for example <tt>1994</tt> and you
--   can specify port ranges, for example <tt>1990:1994</tt>.
matchAttributes_destinationPorts :: Lens' MatchAttributes (Maybe [PortRange])

-- | The source IP addresses and address ranges to inspect for, in CIDR
--   notation. If not specified, this matches with any source address.
matchAttributes_sources :: Lens' MatchAttributes (Maybe [Address])

-- | The source ports to inspect for. If not specified, this matches with
--   any source port. This setting is only used for protocols 6 (TCP) and
--   17 (UDP).
--   
--   You can specify individual ports, for example <tt>1994</tt> and you
--   can specify port ranges, for example <tt>1990:1994</tt>.
matchAttributes_sourcePorts :: Lens' MatchAttributes (Maybe [PortRange])

-- | The destination IP addresses and address ranges to inspect for, in
--   CIDR notation. If not specified, this matches with any destination
--   address.
matchAttributes_destinations :: Lens' MatchAttributes (Maybe [Address])
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.MatchAttributes.MatchAttributes
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.MatchAttributes.MatchAttributes
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.MatchAttributes.MatchAttributes
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.MatchAttributes.MatchAttributes
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.MatchAttributes.MatchAttributes
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.MatchAttributes.MatchAttributes
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.MatchAttributes.MatchAttributes
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.MatchAttributes.MatchAttributes


module Amazonka.NetworkFirewall.Types.RuleDefinition

-- | The inspection criteria and action for a single stateless rule. AWS
--   Network Firewall inspects each packet for the specified matching
--   criteria. When a packet matches the criteria, Network Firewall
--   performs the rule's actions on the packet.
--   
--   <i>See:</i> <a>newRuleDefinition</a> smart constructor.
data RuleDefinition
RuleDefinition' :: MatchAttributes -> [Text] -> RuleDefinition

-- | Criteria for Network Firewall to use to inspect an individual packet
--   in stateless rule inspection. Each match attributes set can include
--   one or more items such as IP address, CIDR range, port number,
--   protocol, and TCP flags.
[$sel:matchAttributes:RuleDefinition'] :: RuleDefinition -> MatchAttributes

-- | The actions to take on a packet that matches one of the stateless rule
--   definition's match attributes. You must specify a standard action and
--   you can add custom actions.
--   
--   Network Firewall only forwards a packet for stateful rule inspection
--   if you specify <tt>aws:forward_to_sfe</tt> for a rule that the packet
--   matches, or if the packet doesn't match any stateless rule and you
--   specify <tt>aws:forward_to_sfe</tt> for the
--   <tt>StatelessDefaultActions</tt> setting for the FirewallPolicy.
--   
--   For every rule, you must specify exactly one of the following standard
--   actions.
--   
--   <ul>
--   <li><b>aws:pass</b> - Discontinues all inspection of the packet and
--   permits it to go to its intended destination.</li>
--   <li><b>aws:drop</b> - Discontinues all inspection of the packet and
--   blocks it from going to its intended destination.</li>
--   <li><b>aws:forward_to_sfe</b> - Discontinues stateless inspection of
--   the packet and forwards it to the stateful rule engine for
--   inspection.</li>
--   </ul>
--   
--   Additionally, you can specify a custom action. To do this, you define
--   a custom action by name and type, then provide the name you've
--   assigned to the action in this <tt>Actions</tt> setting. For
--   information about the options, see CustomAction.
--   
--   To provide more than one action in this setting, separate the settings
--   with a comma. For example, if you have a custom
--   <tt>PublishMetrics</tt> action that you've named
--   <tt>MyMetricsAction</tt>, then you could specify the standard action
--   <tt>aws:pass</tt> and the custom action with <tt>[“aws:pass”,
--   “MyMetricsAction”]</tt>.
[$sel:actions:RuleDefinition'] :: RuleDefinition -> [Text]

-- | Create a value of <a>RuleDefinition</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:matchAttributes:RuleDefinition'</a>,
--   <a>ruleDefinition_matchAttributes</a> - Criteria for Network Firewall
--   to use to inspect an individual packet in stateless rule inspection.
--   Each match attributes set can include one or more items such as IP
--   address, CIDR range, port number, protocol, and TCP flags.
--   
--   <a>$sel:actions:RuleDefinition'</a>, <a>ruleDefinition_actions</a> -
--   The actions to take on a packet that matches one of the stateless rule
--   definition's match attributes. You must specify a standard action and
--   you can add custom actions.
--   
--   Network Firewall only forwards a packet for stateful rule inspection
--   if you specify <tt>aws:forward_to_sfe</tt> for a rule that the packet
--   matches, or if the packet doesn't match any stateless rule and you
--   specify <tt>aws:forward_to_sfe</tt> for the
--   <tt>StatelessDefaultActions</tt> setting for the FirewallPolicy.
--   
--   For every rule, you must specify exactly one of the following standard
--   actions.
--   
--   <ul>
--   <li><b>aws:pass</b> - Discontinues all inspection of the packet and
--   permits it to go to its intended destination.</li>
--   <li><b>aws:drop</b> - Discontinues all inspection of the packet and
--   blocks it from going to its intended destination.</li>
--   <li><b>aws:forward_to_sfe</b> - Discontinues stateless inspection of
--   the packet and forwards it to the stateful rule engine for
--   inspection.</li>
--   </ul>
--   
--   Additionally, you can specify a custom action. To do this, you define
--   a custom action by name and type, then provide the name you've
--   assigned to the action in this <tt>Actions</tt> setting. For
--   information about the options, see CustomAction.
--   
--   To provide more than one action in this setting, separate the settings
--   with a comma. For example, if you have a custom
--   <tt>PublishMetrics</tt> action that you've named
--   <tt>MyMetricsAction</tt>, then you could specify the standard action
--   <tt>aws:pass</tt> and the custom action with <tt>[“aws:pass”,
--   “MyMetricsAction”]</tt>.
newRuleDefinition :: MatchAttributes -> RuleDefinition

-- | Criteria for Network Firewall to use to inspect an individual packet
--   in stateless rule inspection. Each match attributes set can include
--   one or more items such as IP address, CIDR range, port number,
--   protocol, and TCP flags.
ruleDefinition_matchAttributes :: Lens' RuleDefinition MatchAttributes

-- | The actions to take on a packet that matches one of the stateless rule
--   definition's match attributes. You must specify a standard action and
--   you can add custom actions.
--   
--   Network Firewall only forwards a packet for stateful rule inspection
--   if you specify <tt>aws:forward_to_sfe</tt> for a rule that the packet
--   matches, or if the packet doesn't match any stateless rule and you
--   specify <tt>aws:forward_to_sfe</tt> for the
--   <tt>StatelessDefaultActions</tt> setting for the FirewallPolicy.
--   
--   For every rule, you must specify exactly one of the following standard
--   actions.
--   
--   <ul>
--   <li><b>aws:pass</b> - Discontinues all inspection of the packet and
--   permits it to go to its intended destination.</li>
--   <li><b>aws:drop</b> - Discontinues all inspection of the packet and
--   blocks it from going to its intended destination.</li>
--   <li><b>aws:forward_to_sfe</b> - Discontinues stateless inspection of
--   the packet and forwards it to the stateful rule engine for
--   inspection.</li>
--   </ul>
--   
--   Additionally, you can specify a custom action. To do this, you define
--   a custom action by name and type, then provide the name you've
--   assigned to the action in this <tt>Actions</tt> setting. For
--   information about the options, see CustomAction.
--   
--   To provide more than one action in this setting, separate the settings
--   with a comma. For example, if you have a custom
--   <tt>PublishMetrics</tt> action that you've named
--   <tt>MyMetricsAction</tt>, then you could specify the standard action
--   <tt>aws:pass</tt> and the custom action with <tt>[“aws:pass”,
--   “MyMetricsAction”]</tt>.
ruleDefinition_actions :: Lens' RuleDefinition [Text]
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.RuleDefinition.RuleDefinition
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.RuleDefinition.RuleDefinition
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.RuleDefinition.RuleDefinition
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.RuleDefinition.RuleDefinition
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.RuleDefinition.RuleDefinition
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.RuleDefinition.RuleDefinition
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.RuleDefinition.RuleDefinition
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.RuleDefinition.RuleDefinition


module Amazonka.NetworkFirewall.Types.StatelessRule

-- | A single stateless rule. This is used in
--   StatelessRulesAndCustomActions.
--   
--   <i>See:</i> <a>newStatelessRule</a> smart constructor.
data StatelessRule
StatelessRule' :: RuleDefinition -> Natural -> StatelessRule

-- | Defines the stateless 5-tuple packet inspection criteria and the
--   action to take on a packet that matches the criteria.
[$sel:ruleDefinition:StatelessRule'] :: StatelessRule -> RuleDefinition

-- | Indicates the order in which to run this rule relative to all of the
--   rules that are defined for a stateless rule group. Network Firewall
--   evaluates the rules in a rule group starting with the lowest priority
--   setting. You must ensure that the priority settings are unique for the
--   rule group.
--   
--   Each stateless rule group uses exactly one
--   <tt>StatelessRulesAndCustomActions</tt> object, and each
--   <tt>StatelessRulesAndCustomActions</tt> contains exactly one
--   <tt>StatelessRules</tt> object. To ensure unique priority settings for
--   your rule groups, set unique priorities for the stateless rules that
--   you define inside any single <tt>StatelessRules</tt> object.
--   
--   You can change the priority settings of your rules at any time. To
--   make it easier to insert rules later, number them so there's a wide
--   range in between, for example use 100, 200, and so on.
[$sel:priority:StatelessRule'] :: StatelessRule -> Natural

-- | Create a value of <a>StatelessRule</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:ruleDefinition:StatelessRule'</a>,
--   <a>statelessRule_ruleDefinition</a> - Defines the stateless 5-tuple
--   packet inspection criteria and the action to take on a packet that
--   matches the criteria.
--   
--   <a>$sel:priority:StatelessRule'</a>, <a>statelessRule_priority</a> -
--   Indicates the order in which to run this rule relative to all of the
--   rules that are defined for a stateless rule group. Network Firewall
--   evaluates the rules in a rule group starting with the lowest priority
--   setting. You must ensure that the priority settings are unique for the
--   rule group.
--   
--   Each stateless rule group uses exactly one
--   <tt>StatelessRulesAndCustomActions</tt> object, and each
--   <tt>StatelessRulesAndCustomActions</tt> contains exactly one
--   <tt>StatelessRules</tt> object. To ensure unique priority settings for
--   your rule groups, set unique priorities for the stateless rules that
--   you define inside any single <tt>StatelessRules</tt> object.
--   
--   You can change the priority settings of your rules at any time. To
--   make it easier to insert rules later, number them so there's a wide
--   range in between, for example use 100, 200, and so on.
newStatelessRule :: RuleDefinition -> Natural -> StatelessRule

-- | Defines the stateless 5-tuple packet inspection criteria and the
--   action to take on a packet that matches the criteria.
statelessRule_ruleDefinition :: Lens' StatelessRule RuleDefinition

-- | Indicates the order in which to run this rule relative to all of the
--   rules that are defined for a stateless rule group. Network Firewall
--   evaluates the rules in a rule group starting with the lowest priority
--   setting. You must ensure that the priority settings are unique for the
--   rule group.
--   
--   Each stateless rule group uses exactly one
--   <tt>StatelessRulesAndCustomActions</tt> object, and each
--   <tt>StatelessRulesAndCustomActions</tt> contains exactly one
--   <tt>StatelessRules</tt> object. To ensure unique priority settings for
--   your rule groups, set unique priorities for the stateless rules that
--   you define inside any single <tt>StatelessRules</tt> object.
--   
--   You can change the priority settings of your rules at any time. To
--   make it easier to insert rules later, number them so there's a wide
--   range in between, for example use 100, 200, and so on.
statelessRule_priority :: Lens' StatelessRule Natural
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.StatelessRule.StatelessRule
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.StatelessRule.StatelessRule
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.StatelessRule.StatelessRule
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.StatelessRule.StatelessRule
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.StatelessRule.StatelessRule
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.StatelessRule.StatelessRule
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.StatelessRule.StatelessRule
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.StatelessRule.StatelessRule


module Amazonka.NetworkFirewall.Types.StatelessRulesAndCustomActions

-- | Stateless inspection criteria. Each stateless rule group uses exactly
--   one of these data types to define its stateless rules.
--   
--   <i>See:</i> <a>newStatelessRulesAndCustomActions</a> smart
--   constructor.
data StatelessRulesAndCustomActions
StatelessRulesAndCustomActions' :: Maybe [CustomAction] -> [StatelessRule] -> StatelessRulesAndCustomActions

-- | Defines an array of individual custom action definitions that are
--   available for use by the stateless rules in this
--   <tt>StatelessRulesAndCustomActions</tt> specification. You name each
--   custom action that you define, and then you can use it by name in your
--   StatelessRule RuleDefinition <tt>Actions</tt> specification.
[$sel:customActions:StatelessRulesAndCustomActions'] :: StatelessRulesAndCustomActions -> Maybe [CustomAction]

-- | Defines the set of stateless rules for use in a stateless rule group.
[$sel:statelessRules:StatelessRulesAndCustomActions'] :: StatelessRulesAndCustomActions -> [StatelessRule]

-- | Create a value of <a>StatelessRulesAndCustomActions</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:customActions:StatelessRulesAndCustomActions'</a>,
--   <a>statelessRulesAndCustomActions_customActions</a> - Defines an array
--   of individual custom action definitions that are available for use by
--   the stateless rules in this <tt>StatelessRulesAndCustomActions</tt>
--   specification. You name each custom action that you define, and then
--   you can use it by name in your StatelessRule RuleDefinition
--   <tt>Actions</tt> specification.
--   
--   <a>$sel:statelessRules:StatelessRulesAndCustomActions'</a>,
--   <a>statelessRulesAndCustomActions_statelessRules</a> - Defines the set
--   of stateless rules for use in a stateless rule group.
newStatelessRulesAndCustomActions :: StatelessRulesAndCustomActions

-- | Defines an array of individual custom action definitions that are
--   available for use by the stateless rules in this
--   <tt>StatelessRulesAndCustomActions</tt> specification. You name each
--   custom action that you define, and then you can use it by name in your
--   StatelessRule RuleDefinition <tt>Actions</tt> specification.
statelessRulesAndCustomActions_customActions :: Lens' StatelessRulesAndCustomActions (Maybe [CustomAction])

-- | Defines the set of stateless rules for use in a stateless rule group.
statelessRulesAndCustomActions_statelessRules :: Lens' StatelessRulesAndCustomActions [StatelessRule]
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.StatelessRulesAndCustomActions.StatelessRulesAndCustomActions
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.StatelessRulesAndCustomActions.StatelessRulesAndCustomActions
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.StatelessRulesAndCustomActions.StatelessRulesAndCustomActions
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.StatelessRulesAndCustomActions.StatelessRulesAndCustomActions
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.StatelessRulesAndCustomActions.StatelessRulesAndCustomActions
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.StatelessRulesAndCustomActions.StatelessRulesAndCustomActions
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.StatelessRulesAndCustomActions.StatelessRulesAndCustomActions
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.StatelessRulesAndCustomActions.StatelessRulesAndCustomActions


module Amazonka.NetworkFirewall.Types.Tag

-- | A key:value pair associated with an AWS resource. The key:value pair
--   can be anything you define. Typically, the tag key represents a
--   category (such as "environment") and the tag value represents a
--   specific value within that category (such as "test," "development," or
--   "production"). You can add up to 50 tags to each AWS resource.
--   
--   <i>See:</i> <a>newTag</a> smart constructor.
data Tag
Tag' :: Text -> Text -> Tag

-- | The part of the key:value pair that defines a tag. You can use a tag
--   key to describe a category of information, such as "customer." Tag
--   keys are case-sensitive.
[$sel:key:Tag'] :: Tag -> Text

-- | The part of the key:value pair that defines a tag. You can use a tag
--   value to describe a specific value within a category, such as
--   "companyA" or "companyB." Tag values are case-sensitive.
[$sel:value:Tag'] :: Tag -> Text

-- | Create a value of <a>Tag</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:key:Tag'</a>, <a>tag_key</a> - The part of the key:value pair
--   that defines a tag. You can use a tag key to describe a category of
--   information, such as "customer." Tag keys are case-sensitive.
--   
--   <a>$sel:value:Tag'</a>, <a>tag_value</a> - The part of the key:value
--   pair that defines a tag. You can use a tag value to describe a
--   specific value within a category, such as "companyA" or "companyB."
--   Tag values are case-sensitive.
newTag :: Text -> Text -> Tag

-- | The part of the key:value pair that defines a tag. You can use a tag
--   key to describe a category of information, such as "customer." Tag
--   keys are case-sensitive.
tag_key :: Lens' Tag Text

-- | The part of the key:value pair that defines a tag. You can use a tag
--   value to describe a specific value within a category, such as
--   "companyA" or "companyB." Tag values are case-sensitive.
tag_value :: Lens' Tag Text
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.Tag.Tag
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.Tag.Tag
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.Tag.Tag
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.Tag.Tag
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.Tag.Tag
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.Tag.Tag
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.Tag.Tag
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.Tag.Tag


module Amazonka.NetworkFirewall.Types.RuleGroupResponse

-- | The high-level properties of a rule group. This, along with the
--   RuleGroup, define the rule group. You can retrieve all objects for a
--   rule group by calling DescribeRuleGroup.
--   
--   <i>See:</i> <a>newRuleGroupResponse</a> smart constructor.
data RuleGroupResponse
RuleGroupResponse' :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe ResourceStatus -> Maybe RuleGroupType -> Maybe Text -> Maybe (NonEmpty Tag) -> Text -> Text -> Text -> RuleGroupResponse

-- | The number of firewall policies that use this rule group.
[$sel:numberOfAssociations:RuleGroupResponse'] :: RuleGroupResponse -> Maybe Int

-- | The maximum operating resources that this rule group can use. Rule
--   group capacity is fixed at creation. When you update a rule group, you
--   are limited to this capacity. When you reference a rule group from a
--   firewall policy, Network Firewall reserves this capacity for the rule
--   group.
--   
--   You can retrieve the capacity that would be required for a rule group
--   before you create the rule group by calling CreateRuleGroup with
--   <tt>DryRun</tt> set to <tt>TRUE</tt>.
[$sel:capacity:RuleGroupResponse'] :: RuleGroupResponse -> Maybe Int

-- | The number of capacity units currently consumed by the rule group
--   rules.
[$sel:consumedCapacity:RuleGroupResponse'] :: RuleGroupResponse -> Maybe Int

-- | Detailed information about the current status of a rule group.
[$sel:ruleGroupStatus:RuleGroupResponse'] :: RuleGroupResponse -> Maybe ResourceStatus

-- | Indicates whether the rule group is stateless or stateful. If the rule
--   group is stateless, it contains stateless rules. If it is stateful, it
--   contains stateful rules.
[$sel:type':RuleGroupResponse'] :: RuleGroupResponse -> Maybe RuleGroupType

-- | A description of the rule group.
[$sel:description:RuleGroupResponse'] :: RuleGroupResponse -> Maybe Text

-- | The key:value pairs to associate with the resource.
[$sel:tags:RuleGroupResponse'] :: RuleGroupResponse -> Maybe (NonEmpty Tag)

-- | The Amazon Resource Name (ARN) of the rule group.
--   
--   If this response is for a create request that had <tt>DryRun</tt> set
--   to <tt>TRUE</tt>, then this ARN is a placeholder that isn't attached
--   to a valid resource.
[$sel:ruleGroupArn:RuleGroupResponse'] :: RuleGroupResponse -> Text

-- | The descriptive name of the rule group. You can't change the name of a
--   rule group after you create it.
[$sel:ruleGroupName:RuleGroupResponse'] :: RuleGroupResponse -> Text

-- | The unique identifier for the rule group.
[$sel:ruleGroupId:RuleGroupResponse'] :: RuleGroupResponse -> Text

-- | Create a value of <a>RuleGroupResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:numberOfAssociations:RuleGroupResponse'</a>,
--   <a>ruleGroupResponse_numberOfAssociations</a> - The number of firewall
--   policies that use this rule group.
--   
--   <a>$sel:capacity:RuleGroupResponse'</a>,
--   <a>ruleGroupResponse_capacity</a> - The maximum operating resources
--   that this rule group can use. Rule group capacity is fixed at
--   creation. When you update a rule group, you are limited to this
--   capacity. When you reference a rule group from a firewall policy,
--   Network Firewall reserves this capacity for the rule group.
--   
--   You can retrieve the capacity that would be required for a rule group
--   before you create the rule group by calling CreateRuleGroup with
--   <tt>DryRun</tt> set to <tt>TRUE</tt>.
--   
--   <a>$sel:consumedCapacity:RuleGroupResponse'</a>,
--   <a>ruleGroupResponse_consumedCapacity</a> - The number of capacity
--   units currently consumed by the rule group rules.
--   
--   <a>$sel:ruleGroupStatus:RuleGroupResponse'</a>,
--   <a>ruleGroupResponse_ruleGroupStatus</a> - Detailed information about
--   the current status of a rule group.
--   
--   <a>$sel:type':RuleGroupResponse'</a>, <a>ruleGroupResponse_type</a> -
--   Indicates whether the rule group is stateless or stateful. If the rule
--   group is stateless, it contains stateless rules. If it is stateful, it
--   contains stateful rules.
--   
--   <a>$sel:description:RuleGroupResponse'</a>,
--   <a>ruleGroupResponse_description</a> - A description of the rule
--   group.
--   
--   <a>$sel:tags:RuleGroupResponse'</a>, <a>ruleGroupResponse_tags</a> -
--   The key:value pairs to associate with the resource.
--   
--   <a>$sel:ruleGroupArn:RuleGroupResponse'</a>,
--   <a>ruleGroupResponse_ruleGroupArn</a> - The Amazon Resource Name (ARN)
--   of the rule group.
--   
--   If this response is for a create request that had <tt>DryRun</tt> set
--   to <tt>TRUE</tt>, then this ARN is a placeholder that isn't attached
--   to a valid resource.
--   
--   <a>$sel:ruleGroupName:RuleGroupResponse'</a>,
--   <a>ruleGroupResponse_ruleGroupName</a> - The descriptive name of the
--   rule group. You can't change the name of a rule group after you create
--   it.
--   
--   <a>$sel:ruleGroupId:RuleGroupResponse'</a>,
--   <a>ruleGroupResponse_ruleGroupId</a> - The unique identifier for the
--   rule group.
newRuleGroupResponse :: Text -> Text -> Text -> RuleGroupResponse

-- | The number of firewall policies that use this rule group.
ruleGroupResponse_numberOfAssociations :: Lens' RuleGroupResponse (Maybe Int)

-- | The maximum operating resources that this rule group can use. Rule
--   group capacity is fixed at creation. When you update a rule group, you
--   are limited to this capacity. When you reference a rule group from a
--   firewall policy, Network Firewall reserves this capacity for the rule
--   group.
--   
--   You can retrieve the capacity that would be required for a rule group
--   before you create the rule group by calling CreateRuleGroup with
--   <tt>DryRun</tt> set to <tt>TRUE</tt>.
ruleGroupResponse_capacity :: Lens' RuleGroupResponse (Maybe Int)

-- | The number of capacity units currently consumed by the rule group
--   rules.
ruleGroupResponse_consumedCapacity :: Lens' RuleGroupResponse (Maybe Int)

-- | Detailed information about the current status of a rule group.
ruleGroupResponse_ruleGroupStatus :: Lens' RuleGroupResponse (Maybe ResourceStatus)

-- | Indicates whether the rule group is stateless or stateful. If the rule
--   group is stateless, it contains stateless rules. If it is stateful, it
--   contains stateful rules.
ruleGroupResponse_type :: Lens' RuleGroupResponse (Maybe RuleGroupType)

-- | A description of the rule group.
ruleGroupResponse_description :: Lens' RuleGroupResponse (Maybe Text)

-- | The key:value pairs to associate with the resource.
ruleGroupResponse_tags :: Lens' RuleGroupResponse (Maybe (NonEmpty Tag))

-- | The Amazon Resource Name (ARN) of the rule group.
--   
--   If this response is for a create request that had <tt>DryRun</tt> set
--   to <tt>TRUE</tt>, then this ARN is a placeholder that isn't attached
--   to a valid resource.
ruleGroupResponse_ruleGroupArn :: Lens' RuleGroupResponse Text

-- | The descriptive name of the rule group. You can't change the name of a
--   rule group after you create it.
ruleGroupResponse_ruleGroupName :: Lens' RuleGroupResponse Text

-- | The unique identifier for the rule group.
ruleGroupResponse_ruleGroupId :: Lens' RuleGroupResponse Text
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.RuleGroupResponse.RuleGroupResponse
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.RuleGroupResponse.RuleGroupResponse
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.RuleGroupResponse.RuleGroupResponse
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.RuleGroupResponse.RuleGroupResponse
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.RuleGroupResponse.RuleGroupResponse
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.RuleGroupResponse.RuleGroupResponse
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.RuleGroupResponse.RuleGroupResponse


module Amazonka.NetworkFirewall.Types.FirewallPolicyResponse

-- | The high-level properties of a firewall policy. This, along with the
--   FirewallPolicy, define the policy. You can retrieve all objects for a
--   firewall policy by calling DescribeFirewallPolicy.
--   
--   <i>See:</i> <a>newFirewallPolicyResponse</a> smart constructor.
data FirewallPolicyResponse
FirewallPolicyResponse' :: Maybe Int -> Maybe Int -> Maybe ResourceStatus -> Maybe Int -> Maybe Text -> Maybe (NonEmpty Tag) -> Text -> Text -> Text -> FirewallPolicyResponse

-- | The number of capacity units currently consumed by the policy's
--   stateless rules.
[$sel:consumedStatelessRuleCapacity:FirewallPolicyResponse'] :: FirewallPolicyResponse -> Maybe Int

-- | The number of firewalls that are associated with this firewall policy.
[$sel:numberOfAssociations:FirewallPolicyResponse'] :: FirewallPolicyResponse -> Maybe Int

-- | The current status of the firewall policy. You can retrieve this for a
--   firewall policy by calling DescribeFirewallPolicy and providing the
--   firewall policy's name or ARN.
[$sel:firewallPolicyStatus:FirewallPolicyResponse'] :: FirewallPolicyResponse -> Maybe ResourceStatus

-- | The number of capacity units currently consumed by the policy's
--   stateful rules.
[$sel:consumedStatefulRuleCapacity:FirewallPolicyResponse'] :: FirewallPolicyResponse -> Maybe Int

-- | A description of the firewall policy.
[$sel:description:FirewallPolicyResponse'] :: FirewallPolicyResponse -> Maybe Text

-- | The key:value pairs to associate with the resource.
[$sel:tags:FirewallPolicyResponse'] :: FirewallPolicyResponse -> Maybe (NonEmpty Tag)

-- | The descriptive name of the firewall policy. You can't change the name
--   of a firewall policy after you create it.
[$sel:firewallPolicyName:FirewallPolicyResponse'] :: FirewallPolicyResponse -> Text

-- | The Amazon Resource Name (ARN) of the firewall policy.
--   
--   If this response is for a create request that had <tt>DryRun</tt> set
--   to <tt>TRUE</tt>, then this ARN is a placeholder that isn't attached
--   to a valid resource.
[$sel:firewallPolicyArn:FirewallPolicyResponse'] :: FirewallPolicyResponse -> Text

-- | The unique identifier for the firewall policy.
[$sel:firewallPolicyId:FirewallPolicyResponse'] :: FirewallPolicyResponse -> Text

-- | Create a value of <a>FirewallPolicyResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:consumedStatelessRuleCapacity:FirewallPolicyResponse'</a>,
--   <a>firewallPolicyResponse_consumedStatelessRuleCapacity</a> - The
--   number of capacity units currently consumed by the policy's stateless
--   rules.
--   
--   <a>$sel:numberOfAssociations:FirewallPolicyResponse'</a>,
--   <a>firewallPolicyResponse_numberOfAssociations</a> - The number of
--   firewalls that are associated with this firewall policy.
--   
--   <a>$sel:firewallPolicyStatus:FirewallPolicyResponse'</a>,
--   <a>firewallPolicyResponse_firewallPolicyStatus</a> - The current
--   status of the firewall policy. You can retrieve this for a firewall
--   policy by calling DescribeFirewallPolicy and providing the firewall
--   policy's name or ARN.
--   
--   <a>$sel:consumedStatefulRuleCapacity:FirewallPolicyResponse'</a>,
--   <a>firewallPolicyResponse_consumedStatefulRuleCapacity</a> - The
--   number of capacity units currently consumed by the policy's stateful
--   rules.
--   
--   <a>$sel:description:FirewallPolicyResponse'</a>,
--   <a>firewallPolicyResponse_description</a> - A description of the
--   firewall policy.
--   
--   <a>$sel:tags:FirewallPolicyResponse'</a>,
--   <a>firewallPolicyResponse_tags</a> - The key:value pairs to associate
--   with the resource.
--   
--   <a>$sel:firewallPolicyName:FirewallPolicyResponse'</a>,
--   <a>firewallPolicyResponse_firewallPolicyName</a> - The descriptive
--   name of the firewall policy. You can't change the name of a firewall
--   policy after you create it.
--   
--   <a>$sel:firewallPolicyArn:FirewallPolicyResponse'</a>,
--   <a>firewallPolicyResponse_firewallPolicyArn</a> - The Amazon Resource
--   Name (ARN) of the firewall policy.
--   
--   If this response is for a create request that had <tt>DryRun</tt> set
--   to <tt>TRUE</tt>, then this ARN is a placeholder that isn't attached
--   to a valid resource.
--   
--   <a>$sel:firewallPolicyId:FirewallPolicyResponse'</a>,
--   <a>firewallPolicyResponse_firewallPolicyId</a> - The unique identifier
--   for the firewall policy.
newFirewallPolicyResponse :: Text -> Text -> Text -> FirewallPolicyResponse

-- | The number of capacity units currently consumed by the policy's
--   stateless rules.
firewallPolicyResponse_consumedStatelessRuleCapacity :: Lens' FirewallPolicyResponse (Maybe Int)

-- | The number of firewalls that are associated with this firewall policy.
firewallPolicyResponse_numberOfAssociations :: Lens' FirewallPolicyResponse (Maybe Int)

-- | The current status of the firewall policy. You can retrieve this for a
--   firewall policy by calling DescribeFirewallPolicy and providing the
--   firewall policy's name or ARN.
firewallPolicyResponse_firewallPolicyStatus :: Lens' FirewallPolicyResponse (Maybe ResourceStatus)

-- | The number of capacity units currently consumed by the policy's
--   stateful rules.
firewallPolicyResponse_consumedStatefulRuleCapacity :: Lens' FirewallPolicyResponse (Maybe Int)

-- | A description of the firewall policy.
firewallPolicyResponse_description :: Lens' FirewallPolicyResponse (Maybe Text)

-- | The key:value pairs to associate with the resource.
firewallPolicyResponse_tags :: Lens' FirewallPolicyResponse (Maybe (NonEmpty Tag))

-- | The descriptive name of the firewall policy. You can't change the name
--   of a firewall policy after you create it.
firewallPolicyResponse_firewallPolicyName :: Lens' FirewallPolicyResponse Text

-- | The Amazon Resource Name (ARN) of the firewall policy.
--   
--   If this response is for a create request that had <tt>DryRun</tt> set
--   to <tt>TRUE</tt>, then this ARN is a placeholder that isn't attached
--   to a valid resource.
firewallPolicyResponse_firewallPolicyArn :: Lens' FirewallPolicyResponse Text

-- | The unique identifier for the firewall policy.
firewallPolicyResponse_firewallPolicyId :: Lens' FirewallPolicyResponse Text
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.FirewallPolicyResponse.FirewallPolicyResponse
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.FirewallPolicyResponse.FirewallPolicyResponse
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.FirewallPolicyResponse.FirewallPolicyResponse
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.FirewallPolicyResponse.FirewallPolicyResponse
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.FirewallPolicyResponse.FirewallPolicyResponse
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.FirewallPolicyResponse.FirewallPolicyResponse
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.FirewallPolicyResponse.FirewallPolicyResponse


module Amazonka.NetworkFirewall.Types.Firewall

-- | The firewall defines the configuration settings for an AWS Network
--   Firewall firewall. These settings include the firewall policy, the
--   subnets in your VPC to use for the firewall endpoints, and any tags
--   that are attached to the firewall AWS resource.
--   
--   The status of the firewall, for example whether it's ready to filter
--   network traffic, is provided in the corresponding FirewallStatus. You
--   can retrieve both objects by calling DescribeFirewall.
--   
--   <i>See:</i> <a>newFirewall</a> smart constructor.
data Firewall
Firewall' :: Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Text -> Maybe (NonEmpty Tag) -> Maybe Text -> Text -> Text -> [SubnetMapping] -> Text -> Firewall

-- | The Amazon Resource Name (ARN) of the firewall.
[$sel:firewallArn:Firewall'] :: Firewall -> Maybe Text

-- | A setting indicating whether the firewall is protected against a
--   change to the firewall policy association. Use this setting to protect
--   against accidentally modifying the firewall policy for a firewall that
--   is in use. When you create a firewall, the operation initializes this
--   setting to <tt>TRUE</tt>.
[$sel:firewallPolicyChangeProtection:Firewall'] :: Firewall -> Maybe Bool

-- | A setting indicating whether the firewall is protected against changes
--   to the subnet associations. Use this setting to protect against
--   accidentally modifying the subnet associations for a firewall that is
--   in use. When you create a firewall, the operation initializes this
--   setting to <tt>TRUE</tt>.
[$sel:subnetChangeProtection:Firewall'] :: Firewall -> Maybe Bool

-- | A flag indicating whether it is possible to delete the firewall. A
--   setting of <tt>TRUE</tt> indicates that the firewall is protected
--   against deletion. Use this setting to protect against accidentally
--   deleting a firewall that is in use. When you create a firewall, the
--   operation initializes this flag to <tt>TRUE</tt>.
[$sel:deleteProtection:Firewall'] :: Firewall -> Maybe Bool

-- | A description of the firewall.
[$sel:description:Firewall'] :: Firewall -> Maybe Text
[$sel:tags:Firewall'] :: Firewall -> Maybe (NonEmpty Tag)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
[$sel:firewallName:Firewall'] :: Firewall -> Maybe Text

-- | The Amazon Resource Name (ARN) of the firewall policy.
--   
--   The relationship of firewall to firewall policy is many to one. Each
--   firewall requires one firewall policy association, and you can use the
--   same firewall policy for multiple firewalls.
[$sel:firewallPolicyArn:Firewall'] :: Firewall -> Text

-- | The unique identifier of the VPC where the firewall is in use.
[$sel:vpcId:Firewall'] :: Firewall -> Text

-- | The public subnets that Network Firewall is using for the firewall.
--   Each subnet must belong to a different Availability Zone.
[$sel:subnetMappings:Firewall'] :: Firewall -> [SubnetMapping]

-- | The unique identifier for the firewall.
[$sel:firewallId:Firewall'] :: Firewall -> Text

-- | Create a value of <a>Firewall</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:firewallArn:Firewall'</a>, <a>firewall_firewallArn</a> - The
--   Amazon Resource Name (ARN) of the firewall.
--   
--   <a>$sel:firewallPolicyChangeProtection:Firewall'</a>,
--   <a>firewall_firewallPolicyChangeProtection</a> - A setting indicating
--   whether the firewall is protected against a change to the firewall
--   policy association. Use this setting to protect against accidentally
--   modifying the firewall policy for a firewall that is in use. When you
--   create a firewall, the operation initializes this setting to
--   <tt>TRUE</tt>.
--   
--   <a>$sel:subnetChangeProtection:Firewall'</a>,
--   <a>firewall_subnetChangeProtection</a> - A setting indicating whether
--   the firewall is protected against changes to the subnet associations.
--   Use this setting to protect against accidentally modifying the subnet
--   associations for a firewall that is in use. When you create a
--   firewall, the operation initializes this setting to <tt>TRUE</tt>.
--   
--   <a>$sel:deleteProtection:Firewall'</a>,
--   <a>firewall_deleteProtection</a> - A flag indicating whether it is
--   possible to delete the firewall. A setting of <tt>TRUE</tt> indicates
--   that the firewall is protected against deletion. Use this setting to
--   protect against accidentally deleting a firewall that is in use. When
--   you create a firewall, the operation initializes this flag to
--   <tt>TRUE</tt>.
--   
--   <a>$sel:description:Firewall'</a>, <a>firewall_description</a> - A
--   description of the firewall.
--   
--   <a>$sel:tags:Firewall'</a>, <a>firewall_tags</a> -
--   
--   <a>$sel:firewallName:Firewall'</a>, <a>firewall_firewallName</a> - The
--   descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   <a>$sel:firewallPolicyArn:Firewall'</a>,
--   <a>firewall_firewallPolicyArn</a> - The Amazon Resource Name (ARN) of
--   the firewall policy.
--   
--   The relationship of firewall to firewall policy is many to one. Each
--   firewall requires one firewall policy association, and you can use the
--   same firewall policy for multiple firewalls.
--   
--   <a>$sel:vpcId:Firewall'</a>, <a>firewall_vpcId</a> - The unique
--   identifier of the VPC where the firewall is in use.
--   
--   <a>$sel:subnetMappings:Firewall'</a>, <a>firewall_subnetMappings</a> -
--   The public subnets that Network Firewall is using for the firewall.
--   Each subnet must belong to a different Availability Zone.
--   
--   <a>$sel:firewallId:Firewall'</a>, <a>firewall_firewallId</a> - The
--   unique identifier for the firewall.
newFirewall :: Text -> Text -> Text -> Firewall

-- | The Amazon Resource Name (ARN) of the firewall.
firewall_firewallArn :: Lens' Firewall (Maybe Text)

-- | A setting indicating whether the firewall is protected against a
--   change to the firewall policy association. Use this setting to protect
--   against accidentally modifying the firewall policy for a firewall that
--   is in use. When you create a firewall, the operation initializes this
--   setting to <tt>TRUE</tt>.
firewall_firewallPolicyChangeProtection :: Lens' Firewall (Maybe Bool)

-- | A setting indicating whether the firewall is protected against changes
--   to the subnet associations. Use this setting to protect against
--   accidentally modifying the subnet associations for a firewall that is
--   in use. When you create a firewall, the operation initializes this
--   setting to <tt>TRUE</tt>.
firewall_subnetChangeProtection :: Lens' Firewall (Maybe Bool)

-- | A flag indicating whether it is possible to delete the firewall. A
--   setting of <tt>TRUE</tt> indicates that the firewall is protected
--   against deletion. Use this setting to protect against accidentally
--   deleting a firewall that is in use. When you create a firewall, the
--   operation initializes this flag to <tt>TRUE</tt>.
firewall_deleteProtection :: Lens' Firewall (Maybe Bool)

-- | A description of the firewall.
firewall_description :: Lens' Firewall (Maybe Text)

firewall_tags :: Lens' Firewall (Maybe (NonEmpty Tag))

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
firewall_firewallName :: Lens' Firewall (Maybe Text)

-- | The Amazon Resource Name (ARN) of the firewall policy.
--   
--   The relationship of firewall to firewall policy is many to one. Each
--   firewall requires one firewall policy association, and you can use the
--   same firewall policy for multiple firewalls.
firewall_firewallPolicyArn :: Lens' Firewall Text

-- | The unique identifier of the VPC where the firewall is in use.
firewall_vpcId :: Lens' Firewall Text

-- | The public subnets that Network Firewall is using for the firewall.
--   Each subnet must belong to a different Availability Zone.
firewall_subnetMappings :: Lens' Firewall [SubnetMapping]

-- | The unique identifier for the firewall.
firewall_firewallId :: Lens' Firewall Text
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.Firewall.Firewall
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.Firewall.Firewall
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.Firewall.Firewall
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.Firewall.Firewall
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.Firewall.Firewall
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.Firewall.Firewall
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.Firewall.Firewall


module Amazonka.NetworkFirewall.Types.TargetType
newtype TargetType
TargetType' :: Text -> TargetType
[fromTargetType] :: TargetType -> Text
pattern TargetType_HTTP_HOST :: TargetType
pattern TargetType_TLS_SNI :: TargetType
instance Amazonka.Data.XML.ToXML Amazonka.NetworkFirewall.Types.TargetType.TargetType
instance Amazonka.Data.XML.FromXML Amazonka.NetworkFirewall.Types.TargetType.TargetType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.NetworkFirewall.Types.TargetType.TargetType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.TargetType.TargetType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.NetworkFirewall.Types.TargetType.TargetType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.TargetType.TargetType
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.Types.TargetType.TargetType
instance Amazonka.Data.Headers.ToHeader Amazonka.NetworkFirewall.Types.TargetType.TargetType
instance Amazonka.Data.Log.ToLog Amazonka.NetworkFirewall.Types.TargetType.TargetType
instance Amazonka.Data.ByteString.ToByteString Amazonka.NetworkFirewall.Types.TargetType.TargetType
instance Amazonka.Data.Text.ToText Amazonka.NetworkFirewall.Types.TargetType.TargetType
instance Amazonka.Data.Text.FromText Amazonka.NetworkFirewall.Types.TargetType.TargetType
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.TargetType.TargetType
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.TargetType.TargetType
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.TargetType.TargetType
instance GHC.Classes.Ord Amazonka.NetworkFirewall.Types.TargetType.TargetType
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.TargetType.TargetType
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.TargetType.TargetType
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.TargetType.TargetType


module Amazonka.NetworkFirewall.Types.RulesSourceList

-- | Stateful inspection criteria for a domain list rule group.
--   
--   For HTTPS traffic, domain filtering is SNI-based. It uses the server
--   name indicator extension of the TLS handshake.
--   
--   By default, Network Firewall domain list inspection only includes
--   traffic coming from the VPC where you deploy the firewall. To inspect
--   traffic from IP addresses outside of the deployment VPC, you set the
--   <tt>HOME_NET</tt> rule variable to include the CIDR range of the
--   deployment VPC plus the other CIDR ranges. For more information, see
--   RuleVariables in this guide and <a>Stateful domain list rule groups in
--   AWS Network Firewall</a> in the <i>Network Firewall Developer
--   Guide</i>.
--   
--   <i>See:</i> <a>newRulesSourceList</a> smart constructor.
data RulesSourceList
RulesSourceList' :: [Text] -> [TargetType] -> GeneratedRulesType -> RulesSourceList

-- | The domains that you want to inspect for in your traffic flows. To
--   provide multiple domains, separate them with commas. Valid domain
--   specifications are the following:
--   
--   <ul>
--   <li>Explicit names. For example, <tt>abc.example.com</tt> matches only
--   the domain <tt>abc.example.com</tt>.</li>
--   <li>Names that use a domain wildcard, which you indicate with an
--   initial '<tt>.</tt>'. For example,<tt>.example.com</tt> matches
--   <tt>example.com</tt> and matches all subdomains of
--   <tt>example.com</tt>, such as <tt>abc.example.com</tt> and
--   <tt>www.example.com</tt>.</li>
--   </ul>
[$sel:targets:RulesSourceList'] :: RulesSourceList -> [Text]

-- | The protocols you want to inspect. Specify <tt>TLS_SNI</tt> for
--   <tt>HTTPS</tt>. Specify <tt>HTTP_HOST</tt> for <tt>HTTP</tt>. You can
--   specify either or both.
[$sel:targetTypes:RulesSourceList'] :: RulesSourceList -> [TargetType]

-- | Whether you want to allow or deny access to the domains in your target
--   list.
[$sel:generatedRulesType:RulesSourceList'] :: RulesSourceList -> GeneratedRulesType

-- | Create a value of <a>RulesSourceList</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:targets:RulesSourceList'</a>, <a>rulesSourceList_targets</a> -
--   The domains that you want to inspect for in your traffic flows. To
--   provide multiple domains, separate them with commas. Valid domain
--   specifications are the following:
--   
--   <ul>
--   <li>Explicit names. For example, <tt>abc.example.com</tt> matches only
--   the domain <tt>abc.example.com</tt>.</li>
--   <li>Names that use a domain wildcard, which you indicate with an
--   initial '<tt>.</tt>'. For example,<tt>.example.com</tt> matches
--   <tt>example.com</tt> and matches all subdomains of
--   <tt>example.com</tt>, such as <tt>abc.example.com</tt> and
--   <tt>www.example.com</tt>.</li>
--   </ul>
--   
--   <a>$sel:targetTypes:RulesSourceList'</a>,
--   <a>rulesSourceList_targetTypes</a> - The protocols you want to
--   inspect. Specify <tt>TLS_SNI</tt> for <tt>HTTPS</tt>. Specify
--   <tt>HTTP_HOST</tt> for <tt>HTTP</tt>. You can specify either or both.
--   
--   <a>$sel:generatedRulesType:RulesSourceList'</a>,
--   <a>rulesSourceList_generatedRulesType</a> - Whether you want to allow
--   or deny access to the domains in your target list.
newRulesSourceList :: GeneratedRulesType -> RulesSourceList

-- | The domains that you want to inspect for in your traffic flows. To
--   provide multiple domains, separate them with commas. Valid domain
--   specifications are the following:
--   
--   <ul>
--   <li>Explicit names. For example, <tt>abc.example.com</tt> matches only
--   the domain <tt>abc.example.com</tt>.</li>
--   <li>Names that use a domain wildcard, which you indicate with an
--   initial '<tt>.</tt>'. For example,<tt>.example.com</tt> matches
--   <tt>example.com</tt> and matches all subdomains of
--   <tt>example.com</tt>, such as <tt>abc.example.com</tt> and
--   <tt>www.example.com</tt>.</li>
--   </ul>
rulesSourceList_targets :: Lens' RulesSourceList [Text]

-- | The protocols you want to inspect. Specify <tt>TLS_SNI</tt> for
--   <tt>HTTPS</tt>. Specify <tt>HTTP_HOST</tt> for <tt>HTTP</tt>. You can
--   specify either or both.
rulesSourceList_targetTypes :: Lens' RulesSourceList [TargetType]

-- | Whether you want to allow or deny access to the domains in your target
--   list.
rulesSourceList_generatedRulesType :: Lens' RulesSourceList GeneratedRulesType
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.RulesSourceList.RulesSourceList
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.RulesSourceList.RulesSourceList
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.RulesSourceList.RulesSourceList
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.RulesSourceList.RulesSourceList
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.RulesSourceList.RulesSourceList
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.RulesSourceList.RulesSourceList
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.RulesSourceList.RulesSourceList
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.RulesSourceList.RulesSourceList


module Amazonka.NetworkFirewall.Types.RulesSource

-- | The stateless or stateful rules definitions for use in a single rule
--   group. Each rule group requires a single <tt>RulesSource</tt>. You can
--   use an instance of this for either stateless rules or stateful rules.
--   
--   <i>See:</i> <a>newRulesSource</a> smart constructor.
data RulesSource
RulesSource' :: Maybe Text -> Maybe RulesSourceList -> Maybe [StatefulRule] -> Maybe StatelessRulesAndCustomActions -> RulesSource

-- | Stateful inspection criteria, provided in Suricata compatible
--   intrusion prevention system (IPS) rules. Suricata is an open-source
--   network IPS that includes a standard rule-based language for network
--   traffic inspection.
--   
--   These rules contain the inspection criteria and the action to take for
--   traffic that matches the criteria, so this type of rule group doesn't
--   have a separate action setting.
[$sel:rulesString:RulesSource'] :: RulesSource -> Maybe Text

-- | Stateful inspection criteria for a domain list rule group.
[$sel:rulesSourceList:RulesSource'] :: RulesSource -> Maybe RulesSourceList

-- | An array of individual stateful rules inspection criteria to be used
--   together in a stateful rule group. Use this option to specify simple
--   Suricata rules with protocol, source and destination, ports,
--   direction, and rule options. For information about the Suricata
--   <tt>Rules</tt> format, see <a>Rules Format</a>.
[$sel:statefulRules:RulesSource'] :: RulesSource -> Maybe [StatefulRule]

-- | Stateless inspection criteria to be used in a stateless rule group.
[$sel:statelessRulesAndCustomActions:RulesSource'] :: RulesSource -> Maybe StatelessRulesAndCustomActions

-- | Create a value of <a>RulesSource</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rulesString:RulesSource'</a>, <a>rulesSource_rulesString</a> -
--   Stateful inspection criteria, provided in Suricata compatible
--   intrusion prevention system (IPS) rules. Suricata is an open-source
--   network IPS that includes a standard rule-based language for network
--   traffic inspection.
--   
--   These rules contain the inspection criteria and the action to take for
--   traffic that matches the criteria, so this type of rule group doesn't
--   have a separate action setting.
--   
--   <a>$sel:rulesSourceList:RulesSource'</a>,
--   <a>rulesSource_rulesSourceList</a> - Stateful inspection criteria for
--   a domain list rule group.
--   
--   <a>$sel:statefulRules:RulesSource'</a>,
--   <a>rulesSource_statefulRules</a> - An array of individual stateful
--   rules inspection criteria to be used together in a stateful rule
--   group. Use this option to specify simple Suricata rules with protocol,
--   source and destination, ports, direction, and rule options. For
--   information about the Suricata <tt>Rules</tt> format, see <a>Rules
--   Format</a>.
--   
--   <a>$sel:statelessRulesAndCustomActions:RulesSource'</a>,
--   <a>rulesSource_statelessRulesAndCustomActions</a> - Stateless
--   inspection criteria to be used in a stateless rule group.
newRulesSource :: RulesSource

-- | Stateful inspection criteria, provided in Suricata compatible
--   intrusion prevention system (IPS) rules. Suricata is an open-source
--   network IPS that includes a standard rule-based language for network
--   traffic inspection.
--   
--   These rules contain the inspection criteria and the action to take for
--   traffic that matches the criteria, so this type of rule group doesn't
--   have a separate action setting.
rulesSource_rulesString :: Lens' RulesSource (Maybe Text)

-- | Stateful inspection criteria for a domain list rule group.
rulesSource_rulesSourceList :: Lens' RulesSource (Maybe RulesSourceList)

-- | An array of individual stateful rules inspection criteria to be used
--   together in a stateful rule group. Use this option to specify simple
--   Suricata rules with protocol, source and destination, ports,
--   direction, and rule options. For information about the Suricata
--   <tt>Rules</tt> format, see <a>Rules Format</a>.
rulesSource_statefulRules :: Lens' RulesSource (Maybe [StatefulRule])

-- | Stateless inspection criteria to be used in a stateless rule group.
rulesSource_statelessRulesAndCustomActions :: Lens' RulesSource (Maybe StatelessRulesAndCustomActions)
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.RulesSource.RulesSource
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.RulesSource.RulesSource
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.RulesSource.RulesSource
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.RulesSource.RulesSource
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.RulesSource.RulesSource
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.RulesSource.RulesSource
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.RulesSource.RulesSource
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.RulesSource.RulesSource


module Amazonka.NetworkFirewall.Types.RuleGroup

-- | The object that defines the rules in a rule group. This, along with
--   RuleGroupResponse, define the rule group. You can retrieve all objects
--   for a rule group by calling DescribeRuleGroup.
--   
--   AWS Network Firewall uses a rule group to inspect and control network
--   traffic. You define stateless rule groups to inspect individual
--   packets and you define stateful rule groups to inspect packets in the
--   context of their traffic flow.
--   
--   To use a rule group, you include it by reference in an Network
--   Firewall firewall policy, then you use the policy in a firewall. You
--   can reference a rule group from more than one firewall policy, and you
--   can use a firewall policy in more than one firewall.
--   
--   <i>See:</i> <a>newRuleGroup</a> smart constructor.
data RuleGroup
RuleGroup' :: Maybe StatefulRuleOptions -> Maybe RuleVariables -> RulesSource -> RuleGroup

-- | Additional options governing how Network Firewall handles stateful
--   rules. The policies where you use your stateful rule group must have
--   stateful rule options settings that are compatible with these
--   settings.
[$sel:statefulRuleOptions:RuleGroup'] :: RuleGroup -> Maybe StatefulRuleOptions

-- | Settings that are available for use in the rules in the rule group.
--   You can only use these for stateful rule groups.
[$sel:ruleVariables:RuleGroup'] :: RuleGroup -> Maybe RuleVariables

-- | The stateful rules or stateless rules for the rule group.
[$sel:rulesSource:RuleGroup'] :: RuleGroup -> RulesSource

-- | Create a value of <a>RuleGroup</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:statefulRuleOptions:RuleGroup'</a>,
--   <a>ruleGroup_statefulRuleOptions</a> - Additional options governing
--   how Network Firewall handles stateful rules. The policies where you
--   use your stateful rule group must have stateful rule options settings
--   that are compatible with these settings.
--   
--   <a>$sel:ruleVariables:RuleGroup'</a>, <a>ruleGroup_ruleVariables</a> -
--   Settings that are available for use in the rules in the rule group.
--   You can only use these for stateful rule groups.
--   
--   <a>$sel:rulesSource:RuleGroup'</a>, <a>ruleGroup_rulesSource</a> - The
--   stateful rules or stateless rules for the rule group.
newRuleGroup :: RulesSource -> RuleGroup

-- | Additional options governing how Network Firewall handles stateful
--   rules. The policies where you use your stateful rule group must have
--   stateful rule options settings that are compatible with these
--   settings.
ruleGroup_statefulRuleOptions :: Lens' RuleGroup (Maybe StatefulRuleOptions)

-- | Settings that are available for use in the rules in the rule group.
--   You can only use these for stateful rule groups.
ruleGroup_ruleVariables :: Lens' RuleGroup (Maybe RuleVariables)

-- | The stateful rules or stateless rules for the rule group.
ruleGroup_rulesSource :: Lens' RuleGroup RulesSource
instance GHC.Generics.Generic Amazonka.NetworkFirewall.Types.RuleGroup.RuleGroup
instance GHC.Show.Show Amazonka.NetworkFirewall.Types.RuleGroup.RuleGroup
instance GHC.Read.Read Amazonka.NetworkFirewall.Types.RuleGroup.RuleGroup
instance GHC.Classes.Eq Amazonka.NetworkFirewall.Types.RuleGroup.RuleGroup
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.NetworkFirewall.Types.RuleGroup.RuleGroup
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.Types.RuleGroup.RuleGroup
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.Types.RuleGroup.RuleGroup
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.Types.RuleGroup.RuleGroup


module Amazonka.NetworkFirewall.Types

-- | API version <tt>2020-11-12</tt> of the Amazon Network Firewall SDK
--   configuration.
defaultService :: Service

-- | Unable to send logs to a configured logging destination.
_LogDestinationPermissionException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The operation failed because of a problem with your request. Examples
--   include:
--   
--   <ul>
--   <li>You specified an unsupported parameter name or value.</li>
--   <li>You tried to update a property with a value that isn't among the
--   available types.</li>
--   <li>Your request references an ARN that is malformed, or corresponds
--   to a resource that isn't valid in the context of the request.</li>
--   </ul>
_InvalidRequestException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The operation you requested isn't supported by Network Firewall.
_UnsupportedOperationException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Unable to change the resource because your account doesn't own it.
_ResourceOwnerCheckException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The policy statement failed validation.
_InvalidResourcePolicyException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Unable to process the request due to throttling limitations.
_ThrottlingException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Your request is valid, but Network Firewall couldn’t perform the
--   operation because of a system problem. Retry your request.
_InternalServerError :: AsError a => Getting (First ServiceError) a ServiceError

-- | The token you provided is stale or isn't valid for the operation.
_InvalidTokenException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The operation failed because it's not valid. For example, you might
--   have tried to delete a rule group or firewall policy that's in use.
_InvalidOperationException :: AsError a => Getting (First ServiceError) a ServiceError

-- | AWS doesn't currently have enough available capacity to fulfill your
--   request. Try your request later.
_InsufficientCapacityException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Unable to locate a resource using the parameters that you provided.
_ResourceNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Unable to perform the operation because doing so would violate a limit
--   setting.
_LimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError
newtype AttachmentStatus
AttachmentStatus' :: Text -> AttachmentStatus
[fromAttachmentStatus] :: AttachmentStatus -> Text
pattern AttachmentStatus_CREATING :: AttachmentStatus
pattern AttachmentStatus_DELETING :: AttachmentStatus
pattern AttachmentStatus_READY :: AttachmentStatus
pattern AttachmentStatus_SCALING :: AttachmentStatus
newtype ConfigurationSyncState
ConfigurationSyncState' :: Text -> ConfigurationSyncState
[fromConfigurationSyncState] :: ConfigurationSyncState -> Text
pattern ConfigurationSyncState_IN_SYNC :: ConfigurationSyncState
pattern ConfigurationSyncState_PENDING :: ConfigurationSyncState
newtype FirewallStatusValue
FirewallStatusValue' :: Text -> FirewallStatusValue
[fromFirewallStatusValue] :: FirewallStatusValue -> Text
pattern FirewallStatusValue_DELETING :: FirewallStatusValue
pattern FirewallStatusValue_PROVISIONING :: FirewallStatusValue
pattern FirewallStatusValue_READY :: FirewallStatusValue
newtype GeneratedRulesType
GeneratedRulesType' :: Text -> GeneratedRulesType
[fromGeneratedRulesType] :: GeneratedRulesType -> Text
pattern GeneratedRulesType_ALLOWLIST :: GeneratedRulesType
pattern GeneratedRulesType_DENYLIST :: GeneratedRulesType
newtype LogDestinationType
LogDestinationType' :: Text -> LogDestinationType
[fromLogDestinationType] :: LogDestinationType -> Text
pattern LogDestinationType_CloudWatchLogs :: LogDestinationType
pattern LogDestinationType_KinesisDataFirehose :: LogDestinationType
pattern LogDestinationType_S3 :: LogDestinationType
newtype LogType
LogType' :: Text -> LogType
[fromLogType] :: LogType -> Text
pattern LogType_ALERT :: LogType
pattern LogType_FLOW :: LogType
newtype PerObjectSyncStatus
PerObjectSyncStatus' :: Text -> PerObjectSyncStatus
[fromPerObjectSyncStatus] :: PerObjectSyncStatus -> Text
pattern PerObjectSyncStatus_IN_SYNC :: PerObjectSyncStatus
pattern PerObjectSyncStatus_PENDING :: PerObjectSyncStatus
newtype ResourceStatus
ResourceStatus' :: Text -> ResourceStatus
[fromResourceStatus] :: ResourceStatus -> Text
pattern ResourceStatus_ACTIVE :: ResourceStatus
pattern ResourceStatus_DELETING :: ResourceStatus
newtype RuleGroupType
RuleGroupType' :: Text -> RuleGroupType
[fromRuleGroupType] :: RuleGroupType -> Text
pattern RuleGroupType_STATEFUL :: RuleGroupType
pattern RuleGroupType_STATELESS :: RuleGroupType
newtype RuleOrder
RuleOrder' :: Text -> RuleOrder
[fromRuleOrder] :: RuleOrder -> Text
pattern RuleOrder_DEFAULT_ACTION_ORDER :: RuleOrder
pattern RuleOrder_STRICT_ORDER :: RuleOrder
newtype StatefulAction
StatefulAction' :: Text -> StatefulAction
[fromStatefulAction] :: StatefulAction -> Text
pattern StatefulAction_ALERT :: StatefulAction
pattern StatefulAction_DROP :: StatefulAction
pattern StatefulAction_PASS :: StatefulAction
newtype StatefulRuleDirection
StatefulRuleDirection' :: Text -> StatefulRuleDirection
[fromStatefulRuleDirection] :: StatefulRuleDirection -> Text
pattern StatefulRuleDirection_ANY :: StatefulRuleDirection
pattern StatefulRuleDirection_FORWARD :: StatefulRuleDirection
newtype StatefulRuleProtocol
StatefulRuleProtocol' :: Text -> StatefulRuleProtocol
[fromStatefulRuleProtocol] :: StatefulRuleProtocol -> Text
pattern StatefulRuleProtocol_DCERPC :: StatefulRuleProtocol
pattern StatefulRuleProtocol_DHCP :: StatefulRuleProtocol
pattern StatefulRuleProtocol_DNS :: StatefulRuleProtocol
pattern StatefulRuleProtocol_FTP :: StatefulRuleProtocol
pattern StatefulRuleProtocol_HTTP :: StatefulRuleProtocol
pattern StatefulRuleProtocol_ICMP :: StatefulRuleProtocol
pattern StatefulRuleProtocol_IKEV2 :: StatefulRuleProtocol
pattern StatefulRuleProtocol_IMAP :: StatefulRuleProtocol
pattern StatefulRuleProtocol_IP :: StatefulRuleProtocol
pattern StatefulRuleProtocol_KRB5 :: StatefulRuleProtocol
pattern StatefulRuleProtocol_MSN :: StatefulRuleProtocol
pattern StatefulRuleProtocol_NTP :: StatefulRuleProtocol
pattern StatefulRuleProtocol_SMB :: StatefulRuleProtocol
pattern StatefulRuleProtocol_SMTP :: StatefulRuleProtocol
pattern StatefulRuleProtocol_SSH :: StatefulRuleProtocol
pattern StatefulRuleProtocol_TCP :: StatefulRuleProtocol
pattern StatefulRuleProtocol_TFTP :: StatefulRuleProtocol
pattern StatefulRuleProtocol_TLS :: StatefulRuleProtocol
pattern StatefulRuleProtocol_UDP :: StatefulRuleProtocol
newtype TCPFlag
TCPFlag' :: Text -> TCPFlag
[fromTCPFlag] :: TCPFlag -> Text
pattern TCPFlag_ACK :: TCPFlag
pattern TCPFlag_CWR :: TCPFlag
pattern TCPFlag_ECE :: TCPFlag
pattern TCPFlag_FIN :: TCPFlag
pattern TCPFlag_PSH :: TCPFlag
pattern TCPFlag_RST :: TCPFlag
pattern TCPFlag_SYN :: TCPFlag
pattern TCPFlag_URG :: TCPFlag
newtype TargetType
TargetType' :: Text -> TargetType
[fromTargetType] :: TargetType -> Text
pattern TargetType_HTTP_HOST :: TargetType
pattern TargetType_TLS_SNI :: TargetType

-- | A custom action to use in stateless rule actions settings. This is
--   used in CustomAction.
--   
--   <i>See:</i> <a>newActionDefinition</a> smart constructor.
data ActionDefinition
ActionDefinition' :: Maybe PublishMetricAction -> ActionDefinition

-- | Stateless inspection criteria that publishes the specified metrics to
--   Amazon CloudWatch for the matching packet. This setting defines a
--   CloudWatch dimension value to be published.
--   
--   You can pair this custom action with any of the standard stateless
--   rule actions. For example, you could pair this in a rule action with
--   the standard action that forwards the packet for stateful inspection.
--   Then, when a packet matches the rule, Network Firewall publishes
--   metrics for the packet and forwards it.
[$sel:publishMetricAction:ActionDefinition'] :: ActionDefinition -> Maybe PublishMetricAction

-- | Create a value of <a>ActionDefinition</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:publishMetricAction:ActionDefinition'</a>,
--   <a>actionDefinition_publishMetricAction</a> - Stateless inspection
--   criteria that publishes the specified metrics to Amazon CloudWatch for
--   the matching packet. This setting defines a CloudWatch dimension value
--   to be published.
--   
--   You can pair this custom action with any of the standard stateless
--   rule actions. For example, you could pair this in a rule action with
--   the standard action that forwards the packet for stateful inspection.
--   Then, when a packet matches the rule, Network Firewall publishes
--   metrics for the packet and forwards it.
newActionDefinition :: ActionDefinition

-- | Stateless inspection criteria that publishes the specified metrics to
--   Amazon CloudWatch for the matching packet. This setting defines a
--   CloudWatch dimension value to be published.
--   
--   You can pair this custom action with any of the standard stateless
--   rule actions. For example, you could pair this in a rule action with
--   the standard action that forwards the packet for stateful inspection.
--   Then, when a packet matches the rule, Network Firewall publishes
--   metrics for the packet and forwards it.
actionDefinition_publishMetricAction :: Lens' ActionDefinition (Maybe PublishMetricAction)

-- | A single IP address specification. This is used in the MatchAttributes
--   source and destination specifications.
--   
--   <i>See:</i> <a>newAddress</a> smart constructor.
data Address
Address' :: Text -> Address

-- | Specify an IP address or a block of IP addresses in Classless
--   Inter-Domain Routing (CIDR) notation. Network Firewall supports all
--   address ranges for IPv4.
--   
--   Examples:
--   
--   <ul>
--   <li>To configure Network Firewall to inspect for the IP address
--   192.0.2.44, specify <tt>192.0.2.44/32</tt>.</li>
--   <li>To configure Network Firewall to inspect for IP addresses from
--   192.0.2.0 to 192.0.2.255, specify <tt>192.0.2.0/24</tt>.</li>
--   </ul>
--   
--   For more information about CIDR notation, see the Wikipedia entry
--   <a>Classless Inter-Domain Routing</a>.
[$sel:addressDefinition:Address'] :: Address -> Text

-- | Create a value of <a>Address</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:addressDefinition:Address'</a>,
--   <a>address_addressDefinition</a> - Specify an IP address or a block of
--   IP addresses in Classless Inter-Domain Routing (CIDR) notation.
--   Network Firewall supports all address ranges for IPv4.
--   
--   Examples:
--   
--   <ul>
--   <li>To configure Network Firewall to inspect for the IP address
--   192.0.2.44, specify <tt>192.0.2.44/32</tt>.</li>
--   <li>To configure Network Firewall to inspect for IP addresses from
--   192.0.2.0 to 192.0.2.255, specify <tt>192.0.2.0/24</tt>.</li>
--   </ul>
--   
--   For more information about CIDR notation, see the Wikipedia entry
--   <a>Classless Inter-Domain Routing</a>.
newAddress :: Text -> Address

-- | Specify an IP address or a block of IP addresses in Classless
--   Inter-Domain Routing (CIDR) notation. Network Firewall supports all
--   address ranges for IPv4.
--   
--   Examples:
--   
--   <ul>
--   <li>To configure Network Firewall to inspect for the IP address
--   192.0.2.44, specify <tt>192.0.2.44/32</tt>.</li>
--   <li>To configure Network Firewall to inspect for IP addresses from
--   192.0.2.0 to 192.0.2.255, specify <tt>192.0.2.0/24</tt>.</li>
--   </ul>
--   
--   For more information about CIDR notation, see the Wikipedia entry
--   <a>Classless Inter-Domain Routing</a>.
address_addressDefinition :: Lens' Address Text

-- | The configuration and status for a single subnet that you've specified
--   for use by the AWS Network Firewall firewall. This is part of the
--   FirewallStatus.
--   
--   <i>See:</i> <a>newAttachment</a> smart constructor.
data Attachment
Attachment' :: Maybe AttachmentStatus -> Maybe Text -> Maybe Text -> Attachment

-- | The current status of the firewall endpoint in the subnet. This value
--   reflects both the instantiation of the endpoint in the VPC subnet and
--   the sync states that are reported in the <tt>Config</tt> settings.
--   When this value is <tt>READY</tt>, the endpoint is available and
--   configured properly to handle network traffic. When the endpoint isn't
--   available for traffic, this value will reflect its state, for example
--   <tt>CREATING</tt>, <tt>DELETING</tt>, or <tt>FAILED</tt>.
[$sel:status:Attachment'] :: Attachment -> Maybe AttachmentStatus

-- | The unique identifier of the subnet that you've specified to be used
--   for a firewall endpoint.
[$sel:subnetId:Attachment'] :: Attachment -> Maybe Text

-- | The identifier of the firewall endpoint that Network Firewall has
--   instantiated in the subnet. You use this to identify the firewall
--   endpoint in the VPC route tables, when you redirect the VPC traffic
--   through the endpoint.
[$sel:endpointId:Attachment'] :: Attachment -> Maybe Text

-- | Create a value of <a>Attachment</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:Attachment'</a>, <a>attachment_status</a> - The current
--   status of the firewall endpoint in the subnet. This value reflects
--   both the instantiation of the endpoint in the VPC subnet and the sync
--   states that are reported in the <tt>Config</tt> settings. When this
--   value is <tt>READY</tt>, the endpoint is available and configured
--   properly to handle network traffic. When the endpoint isn't available
--   for traffic, this value will reflect its state, for example
--   <tt>CREATING</tt>, <tt>DELETING</tt>, or <tt>FAILED</tt>.
--   
--   <a>$sel:subnetId:Attachment'</a>, <a>attachment_subnetId</a> - The
--   unique identifier of the subnet that you've specified to be used for a
--   firewall endpoint.
--   
--   <a>$sel:endpointId:Attachment'</a>, <a>attachment_endpointId</a> - The
--   identifier of the firewall endpoint that Network Firewall has
--   instantiated in the subnet. You use this to identify the firewall
--   endpoint in the VPC route tables, when you redirect the VPC traffic
--   through the endpoint.
newAttachment :: Attachment

-- | The current status of the firewall endpoint in the subnet. This value
--   reflects both the instantiation of the endpoint in the VPC subnet and
--   the sync states that are reported in the <tt>Config</tt> settings.
--   When this value is <tt>READY</tt>, the endpoint is available and
--   configured properly to handle network traffic. When the endpoint isn't
--   available for traffic, this value will reflect its state, for example
--   <tt>CREATING</tt>, <tt>DELETING</tt>, or <tt>FAILED</tt>.
attachment_status :: Lens' Attachment (Maybe AttachmentStatus)

-- | The unique identifier of the subnet that you've specified to be used
--   for a firewall endpoint.
attachment_subnetId :: Lens' Attachment (Maybe Text)

-- | The identifier of the firewall endpoint that Network Firewall has
--   instantiated in the subnet. You use this to identify the firewall
--   endpoint in the VPC route tables, when you redirect the VPC traffic
--   through the endpoint.
attachment_endpointId :: Lens' Attachment (Maybe Text)

-- | An optional, non-standard action to use for stateless packet handling.
--   You can define this in addition to the standard action that you must
--   specify.
--   
--   You define and name the custom actions that you want to be able to
--   use, and then you reference them by name in your actions settings.
--   
--   You can use custom actions in the following places:
--   
--   <ul>
--   <li>In a rule group's StatelessRulesAndCustomActions specification.
--   The custom actions are available for use by name inside the
--   <tt>StatelessRulesAndCustomActions</tt> where you define them. You can
--   use them for your stateless rule actions to specify what to do with a
--   packet that matches the rule's match attributes.</li>
--   <li>In a FirewallPolicy specification, in
--   <tt>StatelessCustomActions</tt>. The custom actions are available for
--   use inside the policy where you define them. You can use them for the
--   policy's default stateless actions settings to specify what to do with
--   packets that don't match any of the policy's stateless rules.</li>
--   </ul>
--   
--   <i>See:</i> <a>newCustomAction</a> smart constructor.
data CustomAction
CustomAction' :: Text -> ActionDefinition -> CustomAction

-- | The descriptive name of the custom action. You can't change the name
--   of a custom action after you create it.
[$sel:actionName:CustomAction'] :: CustomAction -> Text

-- | The custom action associated with the action name.
[$sel:actionDefinition:CustomAction'] :: CustomAction -> ActionDefinition

-- | Create a value of <a>CustomAction</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:actionName:CustomAction'</a>, <a>customAction_actionName</a> -
--   The descriptive name of the custom action. You can't change the name
--   of a custom action after you create it.
--   
--   <a>$sel:actionDefinition:CustomAction'</a>,
--   <a>customAction_actionDefinition</a> - The custom action associated
--   with the action name.
newCustomAction :: Text -> ActionDefinition -> CustomAction

-- | The descriptive name of the custom action. You can't change the name
--   of a custom action after you create it.
customAction_actionName :: Lens' CustomAction Text

-- | The custom action associated with the action name.
customAction_actionDefinition :: Lens' CustomAction ActionDefinition

-- | The value to use in an Amazon CloudWatch custom metric dimension. This
--   is used in the <tt>PublishMetrics</tt> CustomAction. A CloudWatch
--   custom metric dimension is a name/value pair that's part of the
--   identity of a metric.
--   
--   AWS Network Firewall sets the dimension name to <tt>CustomAction</tt>
--   and you provide the dimension value.
--   
--   For more information about CloudWatch custom metric dimensions, see
--   <a>Publishing Custom Metrics</a> in the <a>Amazon CloudWatch User
--   Guide</a>.
--   
--   <i>See:</i> <a>newDimension</a> smart constructor.
data Dimension
Dimension' :: Text -> Dimension

-- | The value to use in the custom metric dimension.
[$sel:value:Dimension'] :: Dimension -> Text

-- | Create a value of <a>Dimension</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:Dimension'</a>, <a>dimension_value</a> - The value to
--   use in the custom metric dimension.
newDimension :: Text -> Dimension

-- | The value to use in the custom metric dimension.
dimension_value :: Lens' Dimension Text

-- | The firewall defines the configuration settings for an AWS Network
--   Firewall firewall. These settings include the firewall policy, the
--   subnets in your VPC to use for the firewall endpoints, and any tags
--   that are attached to the firewall AWS resource.
--   
--   The status of the firewall, for example whether it's ready to filter
--   network traffic, is provided in the corresponding FirewallStatus. You
--   can retrieve both objects by calling DescribeFirewall.
--   
--   <i>See:</i> <a>newFirewall</a> smart constructor.
data Firewall
Firewall' :: Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Text -> Maybe (NonEmpty Tag) -> Maybe Text -> Text -> Text -> [SubnetMapping] -> Text -> Firewall

-- | The Amazon Resource Name (ARN) of the firewall.
[$sel:firewallArn:Firewall'] :: Firewall -> Maybe Text

-- | A setting indicating whether the firewall is protected against a
--   change to the firewall policy association. Use this setting to protect
--   against accidentally modifying the firewall policy for a firewall that
--   is in use. When you create a firewall, the operation initializes this
--   setting to <tt>TRUE</tt>.
[$sel:firewallPolicyChangeProtection:Firewall'] :: Firewall -> Maybe Bool

-- | A setting indicating whether the firewall is protected against changes
--   to the subnet associations. Use this setting to protect against
--   accidentally modifying the subnet associations for a firewall that is
--   in use. When you create a firewall, the operation initializes this
--   setting to <tt>TRUE</tt>.
[$sel:subnetChangeProtection:Firewall'] :: Firewall -> Maybe Bool

-- | A flag indicating whether it is possible to delete the firewall. A
--   setting of <tt>TRUE</tt> indicates that the firewall is protected
--   against deletion. Use this setting to protect against accidentally
--   deleting a firewall that is in use. When you create a firewall, the
--   operation initializes this flag to <tt>TRUE</tt>.
[$sel:deleteProtection:Firewall'] :: Firewall -> Maybe Bool

-- | A description of the firewall.
[$sel:description:Firewall'] :: Firewall -> Maybe Text
[$sel:tags:Firewall'] :: Firewall -> Maybe (NonEmpty Tag)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
[$sel:firewallName:Firewall'] :: Firewall -> Maybe Text

-- | The Amazon Resource Name (ARN) of the firewall policy.
--   
--   The relationship of firewall to firewall policy is many to one. Each
--   firewall requires one firewall policy association, and you can use the
--   same firewall policy for multiple firewalls.
[$sel:firewallPolicyArn:Firewall'] :: Firewall -> Text

-- | The unique identifier of the VPC where the firewall is in use.
[$sel:vpcId:Firewall'] :: Firewall -> Text

-- | The public subnets that Network Firewall is using for the firewall.
--   Each subnet must belong to a different Availability Zone.
[$sel:subnetMappings:Firewall'] :: Firewall -> [SubnetMapping]

-- | The unique identifier for the firewall.
[$sel:firewallId:Firewall'] :: Firewall -> Text

-- | Create a value of <a>Firewall</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:firewallArn:Firewall'</a>, <a>firewall_firewallArn</a> - The
--   Amazon Resource Name (ARN) of the firewall.
--   
--   <a>$sel:firewallPolicyChangeProtection:Firewall'</a>,
--   <a>firewall_firewallPolicyChangeProtection</a> - A setting indicating
--   whether the firewall is protected against a change to the firewall
--   policy association. Use this setting to protect against accidentally
--   modifying the firewall policy for a firewall that is in use. When you
--   create a firewall, the operation initializes this setting to
--   <tt>TRUE</tt>.
--   
--   <a>$sel:subnetChangeProtection:Firewall'</a>,
--   <a>firewall_subnetChangeProtection</a> - A setting indicating whether
--   the firewall is protected against changes to the subnet associations.
--   Use this setting to protect against accidentally modifying the subnet
--   associations for a firewall that is in use. When you create a
--   firewall, the operation initializes this setting to <tt>TRUE</tt>.
--   
--   <a>$sel:deleteProtection:Firewall'</a>,
--   <a>firewall_deleteProtection</a> - A flag indicating whether it is
--   possible to delete the firewall. A setting of <tt>TRUE</tt> indicates
--   that the firewall is protected against deletion. Use this setting to
--   protect against accidentally deleting a firewall that is in use. When
--   you create a firewall, the operation initializes this flag to
--   <tt>TRUE</tt>.
--   
--   <a>$sel:description:Firewall'</a>, <a>firewall_description</a> - A
--   description of the firewall.
--   
--   <a>$sel:tags:Firewall'</a>, <a>firewall_tags</a> -
--   
--   <a>$sel:firewallName:Firewall'</a>, <a>firewall_firewallName</a> - The
--   descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   <a>$sel:firewallPolicyArn:Firewall'</a>,
--   <a>firewall_firewallPolicyArn</a> - The Amazon Resource Name (ARN) of
--   the firewall policy.
--   
--   The relationship of firewall to firewall policy is many to one. Each
--   firewall requires one firewall policy association, and you can use the
--   same firewall policy for multiple firewalls.
--   
--   <a>$sel:vpcId:Firewall'</a>, <a>firewall_vpcId</a> - The unique
--   identifier of the VPC where the firewall is in use.
--   
--   <a>$sel:subnetMappings:Firewall'</a>, <a>firewall_subnetMappings</a> -
--   The public subnets that Network Firewall is using for the firewall.
--   Each subnet must belong to a different Availability Zone.
--   
--   <a>$sel:firewallId:Firewall'</a>, <a>firewall_firewallId</a> - The
--   unique identifier for the firewall.
newFirewall :: Text -> Text -> Text -> Firewall

-- | The Amazon Resource Name (ARN) of the firewall.
firewall_firewallArn :: Lens' Firewall (Maybe Text)

-- | A setting indicating whether the firewall is protected against a
--   change to the firewall policy association. Use this setting to protect
--   against accidentally modifying the firewall policy for a firewall that
--   is in use. When you create a firewall, the operation initializes this
--   setting to <tt>TRUE</tt>.
firewall_firewallPolicyChangeProtection :: Lens' Firewall (Maybe Bool)

-- | A setting indicating whether the firewall is protected against changes
--   to the subnet associations. Use this setting to protect against
--   accidentally modifying the subnet associations for a firewall that is
--   in use. When you create a firewall, the operation initializes this
--   setting to <tt>TRUE</tt>.
firewall_subnetChangeProtection :: Lens' Firewall (Maybe Bool)

-- | A flag indicating whether it is possible to delete the firewall. A
--   setting of <tt>TRUE</tt> indicates that the firewall is protected
--   against deletion. Use this setting to protect against accidentally
--   deleting a firewall that is in use. When you create a firewall, the
--   operation initializes this flag to <tt>TRUE</tt>.
firewall_deleteProtection :: Lens' Firewall (Maybe Bool)

-- | A description of the firewall.
firewall_description :: Lens' Firewall (Maybe Text)

firewall_tags :: Lens' Firewall (Maybe (NonEmpty Tag))

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
firewall_firewallName :: Lens' Firewall (Maybe Text)

-- | The Amazon Resource Name (ARN) of the firewall policy.
--   
--   The relationship of firewall to firewall policy is many to one. Each
--   firewall requires one firewall policy association, and you can use the
--   same firewall policy for multiple firewalls.
firewall_firewallPolicyArn :: Lens' Firewall Text

-- | The unique identifier of the VPC where the firewall is in use.
firewall_vpcId :: Lens' Firewall Text

-- | The public subnets that Network Firewall is using for the firewall.
--   Each subnet must belong to a different Availability Zone.
firewall_subnetMappings :: Lens' Firewall [SubnetMapping]

-- | The unique identifier for the firewall.
firewall_firewallId :: Lens' Firewall Text

-- | High-level information about a firewall, returned by operations like
--   create and describe. You can use the information provided in the
--   metadata to retrieve and manage a firewall.
--   
--   <i>See:</i> <a>newFirewallMetadata</a> smart constructor.
data FirewallMetadata
FirewallMetadata' :: Maybe Text -> Maybe Text -> FirewallMetadata

-- | The Amazon Resource Name (ARN) of the firewall.
[$sel:firewallArn:FirewallMetadata'] :: FirewallMetadata -> Maybe Text

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
[$sel:firewallName:FirewallMetadata'] :: FirewallMetadata -> Maybe Text

-- | Create a value of <a>FirewallMetadata</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:firewallArn:FirewallMetadata'</a>,
--   <a>firewallMetadata_firewallArn</a> - The Amazon Resource Name (ARN)
--   of the firewall.
--   
--   <a>$sel:firewallName:FirewallMetadata'</a>,
--   <a>firewallMetadata_firewallName</a> - The descriptive name of the
--   firewall. You can't change the name of a firewall after you create it.
newFirewallMetadata :: FirewallMetadata

-- | The Amazon Resource Name (ARN) of the firewall.
firewallMetadata_firewallArn :: Lens' FirewallMetadata (Maybe Text)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
firewallMetadata_firewallName :: Lens' FirewallMetadata (Maybe Text)

-- | The firewall policy defines the behavior of a firewall using a
--   collection of stateless and stateful rule groups and other settings.
--   You can use one firewall policy for multiple firewalls.
--   
--   This, along with FirewallPolicyResponse, define the policy. You can
--   retrieve all objects for a firewall policy by calling
--   DescribeFirewallPolicy.
--   
--   <i>See:</i> <a>newFirewallPolicy</a> smart constructor.
data FirewallPolicy
FirewallPolicy' :: Maybe StatefulEngineOptions -> Maybe [StatefulRuleGroupReference] -> Maybe [StatelessRuleGroupReference] -> Maybe [CustomAction] -> Maybe [Text] -> [Text] -> [Text] -> FirewallPolicy

-- | Additional options governing how Network Firewall handles stateful
--   rules. The stateful rule groups that you use in your policy must have
--   stateful rule options settings that are compatible with these
--   settings.
[$sel:statefulEngineOptions:FirewallPolicy'] :: FirewallPolicy -> Maybe StatefulEngineOptions

-- | References to the stateful rule groups that are used in the policy.
--   These define the inspection criteria in stateful rules.
[$sel:statefulRuleGroupReferences:FirewallPolicy'] :: FirewallPolicy -> Maybe [StatefulRuleGroupReference]

-- | References to the stateless rule groups that are used in the policy.
--   These define the matching criteria in stateless rules.
[$sel:statelessRuleGroupReferences:FirewallPolicy'] :: FirewallPolicy -> Maybe [StatelessRuleGroupReference]

-- | The custom action definitions that are available for use in the
--   firewall policy's <tt>StatelessDefaultActions</tt> setting. You name
--   each custom action that you define, and then you can use it by name in
--   your default actions specifications.
[$sel:statelessCustomActions:FirewallPolicy'] :: FirewallPolicy -> Maybe [CustomAction]

-- | The default actions to take on a packet that doesn't match any
--   stateful rules.
[$sel:statefulDefaultActions:FirewallPolicy'] :: FirewallPolicy -> Maybe [Text]

-- | The actions to take on a packet if it doesn't match any of the
--   stateless rules in the policy. If you want non-matching packets to be
--   forwarded for stateful inspection, specify
--   <tt>aws:forward_to_sfe</tt>.
--   
--   You must specify one of the standard actions: <tt>aws:pass</tt>,
--   <tt>aws:drop</tt>, or <tt>aws:forward_to_sfe</tt>. In addition, you
--   can specify custom actions that are compatible with your standard
--   section choice.
--   
--   For example, you could specify <tt>["aws:pass"]</tt> or you could
--   specify <tt>["aws:pass", “customActionName”]</tt>. For information
--   about compatibility, see the custom action descriptions under
--   CustomAction.
[$sel:statelessDefaultActions:FirewallPolicy'] :: FirewallPolicy -> [Text]

-- | The actions to take on a fragmented UDP packet if it doesn't match any
--   of the stateless rules in the policy. Network Firewall only manages
--   UDP packet fragments and silently drops packet fragments for other
--   protocols. If you want non-matching fragmented UDP packets to be
--   forwarded for stateful inspection, specify
--   <tt>aws:forward_to_sfe</tt>.
--   
--   You must specify one of the standard actions: <tt>aws:pass</tt>,
--   <tt>aws:drop</tt>, or <tt>aws:forward_to_sfe</tt>. In addition, you
--   can specify custom actions that are compatible with your standard
--   section choice.
--   
--   For example, you could specify <tt>["aws:pass"]</tt> or you could
--   specify <tt>["aws:pass", “customActionName”]</tt>. For information
--   about compatibility, see the custom action descriptions under
--   CustomAction.
[$sel:statelessFragmentDefaultActions:FirewallPolicy'] :: FirewallPolicy -> [Text]

-- | Create a value of <a>FirewallPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:statefulEngineOptions:FirewallPolicy'</a>,
--   <a>firewallPolicy_statefulEngineOptions</a> - Additional options
--   governing how Network Firewall handles stateful rules. The stateful
--   rule groups that you use in your policy must have stateful rule
--   options settings that are compatible with these settings.
--   
--   <a>$sel:statefulRuleGroupReferences:FirewallPolicy'</a>,
--   <a>firewallPolicy_statefulRuleGroupReferences</a> - References to the
--   stateful rule groups that are used in the policy. These define the
--   inspection criteria in stateful rules.
--   
--   <a>$sel:statelessRuleGroupReferences:FirewallPolicy'</a>,
--   <a>firewallPolicy_statelessRuleGroupReferences</a> - References to the
--   stateless rule groups that are used in the policy. These define the
--   matching criteria in stateless rules.
--   
--   <a>$sel:statelessCustomActions:FirewallPolicy'</a>,
--   <a>firewallPolicy_statelessCustomActions</a> - The custom action
--   definitions that are available for use in the firewall policy's
--   <tt>StatelessDefaultActions</tt> setting. You name each custom action
--   that you define, and then you can use it by name in your default
--   actions specifications.
--   
--   <a>$sel:statefulDefaultActions:FirewallPolicy'</a>,
--   <a>firewallPolicy_statefulDefaultActions</a> - The default actions to
--   take on a packet that doesn't match any stateful rules.
--   
--   <a>$sel:statelessDefaultActions:FirewallPolicy'</a>,
--   <a>firewallPolicy_statelessDefaultActions</a> - The actions to take on
--   a packet if it doesn't match any of the stateless rules in the policy.
--   If you want non-matching packets to be forwarded for stateful
--   inspection, specify <tt>aws:forward_to_sfe</tt>.
--   
--   You must specify one of the standard actions: <tt>aws:pass</tt>,
--   <tt>aws:drop</tt>, or <tt>aws:forward_to_sfe</tt>. In addition, you
--   can specify custom actions that are compatible with your standard
--   section choice.
--   
--   For example, you could specify <tt>["aws:pass"]</tt> or you could
--   specify <tt>["aws:pass", “customActionName”]</tt>. For information
--   about compatibility, see the custom action descriptions under
--   CustomAction.
--   
--   <a>$sel:statelessFragmentDefaultActions:FirewallPolicy'</a>,
--   <a>firewallPolicy_statelessFragmentDefaultActions</a> - The actions to
--   take on a fragmented UDP packet if it doesn't match any of the
--   stateless rules in the policy. Network Firewall only manages UDP
--   packet fragments and silently drops packet fragments for other
--   protocols. If you want non-matching fragmented UDP packets to be
--   forwarded for stateful inspection, specify
--   <tt>aws:forward_to_sfe</tt>.
--   
--   You must specify one of the standard actions: <tt>aws:pass</tt>,
--   <tt>aws:drop</tt>, or <tt>aws:forward_to_sfe</tt>. In addition, you
--   can specify custom actions that are compatible with your standard
--   section choice.
--   
--   For example, you could specify <tt>["aws:pass"]</tt> or you could
--   specify <tt>["aws:pass", “customActionName”]</tt>. For information
--   about compatibility, see the custom action descriptions under
--   CustomAction.
newFirewallPolicy :: FirewallPolicy

-- | Additional options governing how Network Firewall handles stateful
--   rules. The stateful rule groups that you use in your policy must have
--   stateful rule options settings that are compatible with these
--   settings.
firewallPolicy_statefulEngineOptions :: Lens' FirewallPolicy (Maybe StatefulEngineOptions)

-- | References to the stateful rule groups that are used in the policy.
--   These define the inspection criteria in stateful rules.
firewallPolicy_statefulRuleGroupReferences :: Lens' FirewallPolicy (Maybe [StatefulRuleGroupReference])

-- | References to the stateless rule groups that are used in the policy.
--   These define the matching criteria in stateless rules.
firewallPolicy_statelessRuleGroupReferences :: Lens' FirewallPolicy (Maybe [StatelessRuleGroupReference])

-- | The custom action definitions that are available for use in the
--   firewall policy's <tt>StatelessDefaultActions</tt> setting. You name
--   each custom action that you define, and then you can use it by name in
--   your default actions specifications.
firewallPolicy_statelessCustomActions :: Lens' FirewallPolicy (Maybe [CustomAction])

-- | The default actions to take on a packet that doesn't match any
--   stateful rules.
firewallPolicy_statefulDefaultActions :: Lens' FirewallPolicy (Maybe [Text])

-- | The actions to take on a packet if it doesn't match any of the
--   stateless rules in the policy. If you want non-matching packets to be
--   forwarded for stateful inspection, specify
--   <tt>aws:forward_to_sfe</tt>.
--   
--   You must specify one of the standard actions: <tt>aws:pass</tt>,
--   <tt>aws:drop</tt>, or <tt>aws:forward_to_sfe</tt>. In addition, you
--   can specify custom actions that are compatible with your standard
--   section choice.
--   
--   For example, you could specify <tt>["aws:pass"]</tt> or you could
--   specify <tt>["aws:pass", “customActionName”]</tt>. For information
--   about compatibility, see the custom action descriptions under
--   CustomAction.
firewallPolicy_statelessDefaultActions :: Lens' FirewallPolicy [Text]

-- | The actions to take on a fragmented UDP packet if it doesn't match any
--   of the stateless rules in the policy. Network Firewall only manages
--   UDP packet fragments and silently drops packet fragments for other
--   protocols. If you want non-matching fragmented UDP packets to be
--   forwarded for stateful inspection, specify
--   <tt>aws:forward_to_sfe</tt>.
--   
--   You must specify one of the standard actions: <tt>aws:pass</tt>,
--   <tt>aws:drop</tt>, or <tt>aws:forward_to_sfe</tt>. In addition, you
--   can specify custom actions that are compatible with your standard
--   section choice.
--   
--   For example, you could specify <tt>["aws:pass"]</tt> or you could
--   specify <tt>["aws:pass", “customActionName”]</tt>. For information
--   about compatibility, see the custom action descriptions under
--   CustomAction.
firewallPolicy_statelessFragmentDefaultActions :: Lens' FirewallPolicy [Text]

-- | High-level information about a firewall policy, returned by operations
--   like create and describe. You can use the information provided in the
--   metadata to retrieve and manage a firewall policy. You can retrieve
--   all objects for a firewall policy by calling DescribeFirewallPolicy.
--   
--   <i>See:</i> <a>newFirewallPolicyMetadata</a> smart constructor.
data FirewallPolicyMetadata
FirewallPolicyMetadata' :: Maybe Text -> Maybe Text -> FirewallPolicyMetadata

-- | The Amazon Resource Name (ARN) of the firewall policy.
[$sel:arn:FirewallPolicyMetadata'] :: FirewallPolicyMetadata -> Maybe Text

-- | The descriptive name of the firewall policy. You can't change the name
--   of a firewall policy after you create it.
[$sel:name:FirewallPolicyMetadata'] :: FirewallPolicyMetadata -> Maybe Text

-- | Create a value of <a>FirewallPolicyMetadata</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:arn:FirewallPolicyMetadata'</a>,
--   <a>firewallPolicyMetadata_arn</a> - The Amazon Resource Name (ARN) of
--   the firewall policy.
--   
--   <a>$sel:name:FirewallPolicyMetadata'</a>,
--   <a>firewallPolicyMetadata_name</a> - The descriptive name of the
--   firewall policy. You can't change the name of a firewall policy after
--   you create it.
newFirewallPolicyMetadata :: FirewallPolicyMetadata

-- | The Amazon Resource Name (ARN) of the firewall policy.
firewallPolicyMetadata_arn :: Lens' FirewallPolicyMetadata (Maybe Text)

-- | The descriptive name of the firewall policy. You can't change the name
--   of a firewall policy after you create it.
firewallPolicyMetadata_name :: Lens' FirewallPolicyMetadata (Maybe Text)

-- | The high-level properties of a firewall policy. This, along with the
--   FirewallPolicy, define the policy. You can retrieve all objects for a
--   firewall policy by calling DescribeFirewallPolicy.
--   
--   <i>See:</i> <a>newFirewallPolicyResponse</a> smart constructor.
data FirewallPolicyResponse
FirewallPolicyResponse' :: Maybe Int -> Maybe Int -> Maybe ResourceStatus -> Maybe Int -> Maybe Text -> Maybe (NonEmpty Tag) -> Text -> Text -> Text -> FirewallPolicyResponse

-- | The number of capacity units currently consumed by the policy's
--   stateless rules.
[$sel:consumedStatelessRuleCapacity:FirewallPolicyResponse'] :: FirewallPolicyResponse -> Maybe Int

-- | The number of firewalls that are associated with this firewall policy.
[$sel:numberOfAssociations:FirewallPolicyResponse'] :: FirewallPolicyResponse -> Maybe Int

-- | The current status of the firewall policy. You can retrieve this for a
--   firewall policy by calling DescribeFirewallPolicy and providing the
--   firewall policy's name or ARN.
[$sel:firewallPolicyStatus:FirewallPolicyResponse'] :: FirewallPolicyResponse -> Maybe ResourceStatus

-- | The number of capacity units currently consumed by the policy's
--   stateful rules.
[$sel:consumedStatefulRuleCapacity:FirewallPolicyResponse'] :: FirewallPolicyResponse -> Maybe Int

-- | A description of the firewall policy.
[$sel:description:FirewallPolicyResponse'] :: FirewallPolicyResponse -> Maybe Text

-- | The key:value pairs to associate with the resource.
[$sel:tags:FirewallPolicyResponse'] :: FirewallPolicyResponse -> Maybe (NonEmpty Tag)

-- | The descriptive name of the firewall policy. You can't change the name
--   of a firewall policy after you create it.
[$sel:firewallPolicyName:FirewallPolicyResponse'] :: FirewallPolicyResponse -> Text

-- | The Amazon Resource Name (ARN) of the firewall policy.
--   
--   If this response is for a create request that had <tt>DryRun</tt> set
--   to <tt>TRUE</tt>, then this ARN is a placeholder that isn't attached
--   to a valid resource.
[$sel:firewallPolicyArn:FirewallPolicyResponse'] :: FirewallPolicyResponse -> Text

-- | The unique identifier for the firewall policy.
[$sel:firewallPolicyId:FirewallPolicyResponse'] :: FirewallPolicyResponse -> Text

-- | Create a value of <a>FirewallPolicyResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:consumedStatelessRuleCapacity:FirewallPolicyResponse'</a>,
--   <a>firewallPolicyResponse_consumedStatelessRuleCapacity</a> - The
--   number of capacity units currently consumed by the policy's stateless
--   rules.
--   
--   <a>$sel:numberOfAssociations:FirewallPolicyResponse'</a>,
--   <a>firewallPolicyResponse_numberOfAssociations</a> - The number of
--   firewalls that are associated with this firewall policy.
--   
--   <a>$sel:firewallPolicyStatus:FirewallPolicyResponse'</a>,
--   <a>firewallPolicyResponse_firewallPolicyStatus</a> - The current
--   status of the firewall policy. You can retrieve this for a firewall
--   policy by calling DescribeFirewallPolicy and providing the firewall
--   policy's name or ARN.
--   
--   <a>$sel:consumedStatefulRuleCapacity:FirewallPolicyResponse'</a>,
--   <a>firewallPolicyResponse_consumedStatefulRuleCapacity</a> - The
--   number of capacity units currently consumed by the policy's stateful
--   rules.
--   
--   <a>$sel:description:FirewallPolicyResponse'</a>,
--   <a>firewallPolicyResponse_description</a> - A description of the
--   firewall policy.
--   
--   <a>$sel:tags:FirewallPolicyResponse'</a>,
--   <a>firewallPolicyResponse_tags</a> - The key:value pairs to associate
--   with the resource.
--   
--   <a>$sel:firewallPolicyName:FirewallPolicyResponse'</a>,
--   <a>firewallPolicyResponse_firewallPolicyName</a> - The descriptive
--   name of the firewall policy. You can't change the name of a firewall
--   policy after you create it.
--   
--   <a>$sel:firewallPolicyArn:FirewallPolicyResponse'</a>,
--   <a>firewallPolicyResponse_firewallPolicyArn</a> - The Amazon Resource
--   Name (ARN) of the firewall policy.
--   
--   If this response is for a create request that had <tt>DryRun</tt> set
--   to <tt>TRUE</tt>, then this ARN is a placeholder that isn't attached
--   to a valid resource.
--   
--   <a>$sel:firewallPolicyId:FirewallPolicyResponse'</a>,
--   <a>firewallPolicyResponse_firewallPolicyId</a> - The unique identifier
--   for the firewall policy.
newFirewallPolicyResponse :: Text -> Text -> Text -> FirewallPolicyResponse

-- | The number of capacity units currently consumed by the policy's
--   stateless rules.
firewallPolicyResponse_consumedStatelessRuleCapacity :: Lens' FirewallPolicyResponse (Maybe Int)

-- | The number of firewalls that are associated with this firewall policy.
firewallPolicyResponse_numberOfAssociations :: Lens' FirewallPolicyResponse (Maybe Int)

-- | The current status of the firewall policy. You can retrieve this for a
--   firewall policy by calling DescribeFirewallPolicy and providing the
--   firewall policy's name or ARN.
firewallPolicyResponse_firewallPolicyStatus :: Lens' FirewallPolicyResponse (Maybe ResourceStatus)

-- | The number of capacity units currently consumed by the policy's
--   stateful rules.
firewallPolicyResponse_consumedStatefulRuleCapacity :: Lens' FirewallPolicyResponse (Maybe Int)

-- | A description of the firewall policy.
firewallPolicyResponse_description :: Lens' FirewallPolicyResponse (Maybe Text)

-- | The key:value pairs to associate with the resource.
firewallPolicyResponse_tags :: Lens' FirewallPolicyResponse (Maybe (NonEmpty Tag))

-- | The descriptive name of the firewall policy. You can't change the name
--   of a firewall policy after you create it.
firewallPolicyResponse_firewallPolicyName :: Lens' FirewallPolicyResponse Text

-- | The Amazon Resource Name (ARN) of the firewall policy.
--   
--   If this response is for a create request that had <tt>DryRun</tt> set
--   to <tt>TRUE</tt>, then this ARN is a placeholder that isn't attached
--   to a valid resource.
firewallPolicyResponse_firewallPolicyArn :: Lens' FirewallPolicyResponse Text

-- | The unique identifier for the firewall policy.
firewallPolicyResponse_firewallPolicyId :: Lens' FirewallPolicyResponse Text

-- | Detailed information about the current status of a Firewall. You can
--   retrieve this for a firewall by calling DescribeFirewall and providing
--   the firewall name and ARN.
--   
--   <i>See:</i> <a>newFirewallStatus</a> smart constructor.
data FirewallStatus
FirewallStatus' :: Maybe (HashMap Text SyncState) -> FirewallStatusValue -> ConfigurationSyncState -> FirewallStatus

-- | The subnets that you've configured for use by the Network Firewall
--   firewall. This contains one array element per Availability Zone where
--   you've configured a subnet. These objects provide details of the
--   information that is summarized in the
--   <tt>ConfigurationSyncStateSummary</tt> and <tt>Status</tt>, broken
--   down by zone and configuration object.
[$sel:syncStates:FirewallStatus'] :: FirewallStatus -> Maybe (HashMap Text SyncState)

-- | The readiness of the configured firewall to handle network traffic
--   across all of the Availability Zones where you've configured it. This
--   setting is <tt>READY</tt> only when the
--   <tt>ConfigurationSyncStateSummary</tt> value is <tt>IN_SYNC</tt> and
--   the <tt>Attachment</tt> <tt>Status</tt> values for all of the
--   configured subnets are <tt>READY</tt>.
[$sel:status:FirewallStatus'] :: FirewallStatus -> FirewallStatusValue

-- | The configuration sync state for the firewall. This summarizes the
--   sync states reported in the <tt>Config</tt> settings for all of the
--   Availability Zones where you have configured the firewall.
--   
--   When you create a firewall or update its configuration, for example by
--   adding a rule group to its firewall policy, Network Firewall
--   distributes the configuration changes to all zones where the firewall
--   is in use. This summary indicates whether the configuration changes
--   have been applied everywhere.
--   
--   This status must be <tt>IN_SYNC</tt> for the firewall to be ready for
--   use, but it doesn't indicate that the firewall is ready. The
--   <tt>Status</tt> setting indicates firewall readiness.
[$sel:configurationSyncStateSummary:FirewallStatus'] :: FirewallStatus -> ConfigurationSyncState

-- | Create a value of <a>FirewallStatus</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:syncStates:FirewallStatus'</a>,
--   <a>firewallStatus_syncStates</a> - The subnets that you've configured
--   for use by the Network Firewall firewall. This contains one array
--   element per Availability Zone where you've configured a subnet. These
--   objects provide details of the information that is summarized in the
--   <tt>ConfigurationSyncStateSummary</tt> and <tt>Status</tt>, broken
--   down by zone and configuration object.
--   
--   <a>$sel:status:FirewallStatus'</a>, <a>firewallStatus_status</a> - The
--   readiness of the configured firewall to handle network traffic across
--   all of the Availability Zones where you've configured it. This setting
--   is <tt>READY</tt> only when the <tt>ConfigurationSyncStateSummary</tt>
--   value is <tt>IN_SYNC</tt> and the <tt>Attachment</tt> <tt>Status</tt>
--   values for all of the configured subnets are <tt>READY</tt>.
--   
--   <a>$sel:configurationSyncStateSummary:FirewallStatus'</a>,
--   <a>firewallStatus_configurationSyncStateSummary</a> - The
--   configuration sync state for the firewall. This summarizes the sync
--   states reported in the <tt>Config</tt> settings for all of the
--   Availability Zones where you have configured the firewall.
--   
--   When you create a firewall or update its configuration, for example by
--   adding a rule group to its firewall policy, Network Firewall
--   distributes the configuration changes to all zones where the firewall
--   is in use. This summary indicates whether the configuration changes
--   have been applied everywhere.
--   
--   This status must be <tt>IN_SYNC</tt> for the firewall to be ready for
--   use, but it doesn't indicate that the firewall is ready. The
--   <tt>Status</tt> setting indicates firewall readiness.
newFirewallStatus :: FirewallStatusValue -> ConfigurationSyncState -> FirewallStatus

-- | The subnets that you've configured for use by the Network Firewall
--   firewall. This contains one array element per Availability Zone where
--   you've configured a subnet. These objects provide details of the
--   information that is summarized in the
--   <tt>ConfigurationSyncStateSummary</tt> and <tt>Status</tt>, broken
--   down by zone and configuration object.
firewallStatus_syncStates :: Lens' FirewallStatus (Maybe (HashMap Text SyncState))

-- | The readiness of the configured firewall to handle network traffic
--   across all of the Availability Zones where you've configured it. This
--   setting is <tt>READY</tt> only when the
--   <tt>ConfigurationSyncStateSummary</tt> value is <tt>IN_SYNC</tt> and
--   the <tt>Attachment</tt> <tt>Status</tt> values for all of the
--   configured subnets are <tt>READY</tt>.
firewallStatus_status :: Lens' FirewallStatus FirewallStatusValue

-- | The configuration sync state for the firewall. This summarizes the
--   sync states reported in the <tt>Config</tt> settings for all of the
--   Availability Zones where you have configured the firewall.
--   
--   When you create a firewall or update its configuration, for example by
--   adding a rule group to its firewall policy, Network Firewall
--   distributes the configuration changes to all zones where the firewall
--   is in use. This summary indicates whether the configuration changes
--   have been applied everywhere.
--   
--   This status must be <tt>IN_SYNC</tt> for the firewall to be ready for
--   use, but it doesn't indicate that the firewall is ready. The
--   <tt>Status</tt> setting indicates firewall readiness.
firewallStatus_configurationSyncStateSummary :: Lens' FirewallStatus ConfigurationSyncState

-- | The basic rule criteria for AWS Network Firewall to use to inspect
--   packet headers in stateful traffic flow inspection. Traffic flows that
--   match the criteria are a match for the corresponding StatefulRule.
--   
--   <i>See:</i> <a>newHeader</a> smart constructor.
data Header
Header' :: StatefulRuleProtocol -> Text -> Text -> StatefulRuleDirection -> Text -> Text -> Header

-- | The protocol to inspect for. To specify all, you can use <tt>IP</tt>,
--   because all traffic on AWS and on the internet is IP.
[$sel:protocol:Header'] :: Header -> StatefulRuleProtocol

-- | The source IP address or address range to inspect for, in CIDR
--   notation. To match with any address, specify <tt>ANY</tt>.
--   
--   Specify an IP address or a block of IP addresses in Classless
--   Inter-Domain Routing (CIDR) notation. Network Firewall supports all
--   address ranges for IPv4.
--   
--   Examples:
--   
--   <ul>
--   <li>To configure Network Firewall to inspect for the IP address
--   192.0.2.44, specify <tt>192.0.2.44/32</tt>.</li>
--   <li>To configure Network Firewall to inspect for IP addresses from
--   192.0.2.0 to 192.0.2.255, specify <tt>192.0.2.0/24</tt>.</li>
--   </ul>
--   
--   For more information about CIDR notation, see the Wikipedia entry
--   <a>Classless Inter-Domain Routing</a>.
[$sel:source:Header'] :: Header -> Text

-- | The source port to inspect for. You can specify an individual port,
--   for example <tt>1994</tt> and you can specify a port range, for
--   example <tt>1990:1994</tt>. To match with any port, specify
--   <tt>ANY</tt>.
[$sel:sourcePort:Header'] :: Header -> Text

-- | The direction of traffic flow to inspect. If set to <tt>ANY</tt>, the
--   inspection matches bidirectional traffic, both from the source to the
--   destination and from the destination to the source. If set to
--   <tt>FORWARD</tt>, the inspection only matches traffic going from the
--   source to the destination.
[$sel:direction:Header'] :: Header -> StatefulRuleDirection

-- | The destination IP address or address range to inspect for, in CIDR
--   notation. To match with any address, specify <tt>ANY</tt>.
--   
--   Specify an IP address or a block of IP addresses in Classless
--   Inter-Domain Routing (CIDR) notation. Network Firewall supports all
--   address ranges for IPv4.
--   
--   Examples:
--   
--   <ul>
--   <li>To configure Network Firewall to inspect for the IP address
--   192.0.2.44, specify <tt>192.0.2.44/32</tt>.</li>
--   <li>To configure Network Firewall to inspect for IP addresses from
--   192.0.2.0 to 192.0.2.255, specify <tt>192.0.2.0/24</tt>.</li>
--   </ul>
--   
--   For more information about CIDR notation, see the Wikipedia entry
--   <a>Classless Inter-Domain Routing</a>.
[$sel:destination:Header'] :: Header -> Text

-- | The destination port to inspect for. You can specify an individual
--   port, for example <tt>1994</tt> and you can specify a port range, for
--   example <tt>1990:1994</tt>. To match with any port, specify
--   <tt>ANY</tt>.
[$sel:destinationPort:Header'] :: Header -> Text

-- | Create a value of <a>Header</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:protocol:Header'</a>, <a>header_protocol</a> - The protocol to
--   inspect for. To specify all, you can use <tt>IP</tt>, because all
--   traffic on AWS and on the internet is IP.
--   
--   <a>$sel:source:Header'</a>, <a>header_source</a> - The source IP
--   address or address range to inspect for, in CIDR notation. To match
--   with any address, specify <tt>ANY</tt>.
--   
--   Specify an IP address or a block of IP addresses in Classless
--   Inter-Domain Routing (CIDR) notation. Network Firewall supports all
--   address ranges for IPv4.
--   
--   Examples:
--   
--   <ul>
--   <li>To configure Network Firewall to inspect for the IP address
--   192.0.2.44, specify <tt>192.0.2.44/32</tt>.</li>
--   <li>To configure Network Firewall to inspect for IP addresses from
--   192.0.2.0 to 192.0.2.255, specify <tt>192.0.2.0/24</tt>.</li>
--   </ul>
--   
--   For more information about CIDR notation, see the Wikipedia entry
--   <a>Classless Inter-Domain Routing</a>.
--   
--   <a>$sel:sourcePort:Header'</a>, <a>header_sourcePort</a> - The source
--   port to inspect for. You can specify an individual port, for example
--   <tt>1994</tt> and you can specify a port range, for example
--   <tt>1990:1994</tt>. To match with any port, specify <tt>ANY</tt>.
--   
--   <a>$sel:direction:Header'</a>, <a>header_direction</a> - The direction
--   of traffic flow to inspect. If set to <tt>ANY</tt>, the inspection
--   matches bidirectional traffic, both from the source to the destination
--   and from the destination to the source. If set to <tt>FORWARD</tt>,
--   the inspection only matches traffic going from the source to the
--   destination.
--   
--   <a>$sel:destination:Header'</a>, <a>header_destination</a> - The
--   destination IP address or address range to inspect for, in CIDR
--   notation. To match with any address, specify <tt>ANY</tt>.
--   
--   Specify an IP address or a block of IP addresses in Classless
--   Inter-Domain Routing (CIDR) notation. Network Firewall supports all
--   address ranges for IPv4.
--   
--   Examples:
--   
--   <ul>
--   <li>To configure Network Firewall to inspect for the IP address
--   192.0.2.44, specify <tt>192.0.2.44/32</tt>.</li>
--   <li>To configure Network Firewall to inspect for IP addresses from
--   192.0.2.0 to 192.0.2.255, specify <tt>192.0.2.0/24</tt>.</li>
--   </ul>
--   
--   For more information about CIDR notation, see the Wikipedia entry
--   <a>Classless Inter-Domain Routing</a>.
--   
--   <a>$sel:destinationPort:Header'</a>, <a>header_destinationPort</a> -
--   The destination port to inspect for. You can specify an individual
--   port, for example <tt>1994</tt> and you can specify a port range, for
--   example <tt>1990:1994</tt>. To match with any port, specify
--   <tt>ANY</tt>.
newHeader :: StatefulRuleProtocol -> Text -> Text -> StatefulRuleDirection -> Text -> Text -> Header

-- | The protocol to inspect for. To specify all, you can use <tt>IP</tt>,
--   because all traffic on AWS and on the internet is IP.
header_protocol :: Lens' Header StatefulRuleProtocol

-- | The source IP address or address range to inspect for, in CIDR
--   notation. To match with any address, specify <tt>ANY</tt>.
--   
--   Specify an IP address or a block of IP addresses in Classless
--   Inter-Domain Routing (CIDR) notation. Network Firewall supports all
--   address ranges for IPv4.
--   
--   Examples:
--   
--   <ul>
--   <li>To configure Network Firewall to inspect for the IP address
--   192.0.2.44, specify <tt>192.0.2.44/32</tt>.</li>
--   <li>To configure Network Firewall to inspect for IP addresses from
--   192.0.2.0 to 192.0.2.255, specify <tt>192.0.2.0/24</tt>.</li>
--   </ul>
--   
--   For more information about CIDR notation, see the Wikipedia entry
--   <a>Classless Inter-Domain Routing</a>.
header_source :: Lens' Header Text

-- | The source port to inspect for. You can specify an individual port,
--   for example <tt>1994</tt> and you can specify a port range, for
--   example <tt>1990:1994</tt>. To match with any port, specify
--   <tt>ANY</tt>.
header_sourcePort :: Lens' Header Text

-- | The direction of traffic flow to inspect. If set to <tt>ANY</tt>, the
--   inspection matches bidirectional traffic, both from the source to the
--   destination and from the destination to the source. If set to
--   <tt>FORWARD</tt>, the inspection only matches traffic going from the
--   source to the destination.
header_direction :: Lens' Header StatefulRuleDirection

-- | The destination IP address or address range to inspect for, in CIDR
--   notation. To match with any address, specify <tt>ANY</tt>.
--   
--   Specify an IP address or a block of IP addresses in Classless
--   Inter-Domain Routing (CIDR) notation. Network Firewall supports all
--   address ranges for IPv4.
--   
--   Examples:
--   
--   <ul>
--   <li>To configure Network Firewall to inspect for the IP address
--   192.0.2.44, specify <tt>192.0.2.44/32</tt>.</li>
--   <li>To configure Network Firewall to inspect for IP addresses from
--   192.0.2.0 to 192.0.2.255, specify <tt>192.0.2.0/24</tt>.</li>
--   </ul>
--   
--   For more information about CIDR notation, see the Wikipedia entry
--   <a>Classless Inter-Domain Routing</a>.
header_destination :: Lens' Header Text

-- | The destination port to inspect for. You can specify an individual
--   port, for example <tt>1994</tt> and you can specify a port range, for
--   example <tt>1990:1994</tt>. To match with any port, specify
--   <tt>ANY</tt>.
header_destinationPort :: Lens' Header Text

-- | A list of IP addresses and address ranges, in CIDR notation. This is
--   part of a RuleVariables.
--   
--   <i>See:</i> <a>newIPSet</a> smart constructor.
data IPSet
IPSet' :: [Text] -> IPSet

-- | The list of IP addresses and address ranges, in CIDR notation.
[$sel:definition:IPSet'] :: IPSet -> [Text]

-- | Create a value of <a>IPSet</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:definition:IPSet'</a>, <a>iPSet_definition</a> - The list of
--   IP addresses and address ranges, in CIDR notation.
newIPSet :: IPSet

-- | The list of IP addresses and address ranges, in CIDR notation.
iPSet_definition :: Lens' IPSet [Text]

-- | Defines where AWS Network Firewall sends logs for the firewall for one
--   log type. This is used in LoggingConfiguration. You can send each type
--   of log to an Amazon S3 bucket, a CloudWatch log group, or a Kinesis
--   Data Firehose delivery stream.
--   
--   Network Firewall generates logs for stateful rule groups. You can save
--   alert and flow log types. The stateful rules engine records flow logs
--   for all network traffic that it receives. It records alert logs for
--   traffic that matches stateful rules that have the rule action set to
--   <tt>DROP</tt> or <tt>ALERT</tt>.
--   
--   <i>See:</i> <a>newLogDestinationConfig</a> smart constructor.
data LogDestinationConfig
LogDestinationConfig' :: LogType -> LogDestinationType -> HashMap Text Text -> LogDestinationConfig

-- | The type of log to send. Alert logs report traffic that matches a
--   StatefulRule with an action setting that sends an alert log message.
--   Flow logs are standard network traffic flow logs.
[$sel:logType:LogDestinationConfig'] :: LogDestinationConfig -> LogType

-- | The type of storage destination to send these logs to. You can send
--   logs to an Amazon S3 bucket, a CloudWatch log group, or a Kinesis Data
--   Firehose delivery stream.
[$sel:logDestinationType:LogDestinationConfig'] :: LogDestinationConfig -> LogDestinationType

-- | The named location for the logs, provided in a key:value mapping that
--   is specific to the chosen destination type.
--   
--   <ul>
--   <li>For an Amazon S3 bucket, provide the name of the bucket, with key
--   <tt>bucketName</tt>, and optionally provide a prefix, with key
--   <tt>prefix</tt>. The following example specifies an Amazon S3 bucket
--   named <tt>DOC-EXAMPLE-BUCKET</tt> and the prefix
--   <tt>alerts</tt>:<pre>"LogDestination": { "bucketName":
--   "DOC-EXAMPLE-BUCKET", "prefix": "alerts" }</pre></li>
--   <li>For a CloudWatch log group, provide the name of the CloudWatch log
--   group, with key <tt>logGroup</tt>. The following example specifies a
--   log group named <tt>alert-log-group</tt>:<pre>"LogDestination": {
--   "logGroup": "alert-log-group" }</pre></li>
--   <li>For a Kinesis Data Firehose delivery stream, provide the name of
--   the delivery stream, with key <tt>deliveryStream</tt>. The following
--   example specifies a delivery stream named
--   <tt>alert-delivery-stream</tt>:<pre>"LogDestination": {
--   "deliveryStream": "alert-delivery-stream" }</pre></li>
--   </ul>
[$sel:logDestination:LogDestinationConfig'] :: LogDestinationConfig -> HashMap Text Text

-- | Create a value of <a>LogDestinationConfig</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:logType:LogDestinationConfig'</a>,
--   <a>logDestinationConfig_logType</a> - The type of log to send. Alert
--   logs report traffic that matches a StatefulRule with an action setting
--   that sends an alert log message. Flow logs are standard network
--   traffic flow logs.
--   
--   <a>$sel:logDestinationType:LogDestinationConfig'</a>,
--   <a>logDestinationConfig_logDestinationType</a> - The type of storage
--   destination to send these logs to. You can send logs to an Amazon S3
--   bucket, a CloudWatch log group, or a Kinesis Data Firehose delivery
--   stream.
--   
--   <a>$sel:logDestination:LogDestinationConfig'</a>,
--   <a>logDestinationConfig_logDestination</a> - The named location for
--   the logs, provided in a key:value mapping that is specific to the
--   chosen destination type.
--   
--   <ul>
--   <li>For an Amazon S3 bucket, provide the name of the bucket, with key
--   <tt>bucketName</tt>, and optionally provide a prefix, with key
--   <tt>prefix</tt>. The following example specifies an Amazon S3 bucket
--   named <tt>DOC-EXAMPLE-BUCKET</tt> and the prefix
--   <tt>alerts</tt>:<pre>"LogDestination": { "bucketName":
--   "DOC-EXAMPLE-BUCKET", "prefix": "alerts" }</pre></li>
--   <li>For a CloudWatch log group, provide the name of the CloudWatch log
--   group, with key <tt>logGroup</tt>. The following example specifies a
--   log group named <tt>alert-log-group</tt>:<pre>"LogDestination": {
--   "logGroup": "alert-log-group" }</pre></li>
--   <li>For a Kinesis Data Firehose delivery stream, provide the name of
--   the delivery stream, with key <tt>deliveryStream</tt>. The following
--   example specifies a delivery stream named
--   <tt>alert-delivery-stream</tt>:<pre>"LogDestination": {
--   "deliveryStream": "alert-delivery-stream" }</pre></li>
--   </ul>
newLogDestinationConfig :: LogType -> LogDestinationType -> LogDestinationConfig

-- | The type of log to send. Alert logs report traffic that matches a
--   StatefulRule with an action setting that sends an alert log message.
--   Flow logs are standard network traffic flow logs.
logDestinationConfig_logType :: Lens' LogDestinationConfig LogType

-- | The type of storage destination to send these logs to. You can send
--   logs to an Amazon S3 bucket, a CloudWatch log group, or a Kinesis Data
--   Firehose delivery stream.
logDestinationConfig_logDestinationType :: Lens' LogDestinationConfig LogDestinationType

-- | The named location for the logs, provided in a key:value mapping that
--   is specific to the chosen destination type.
--   
--   <ul>
--   <li>For an Amazon S3 bucket, provide the name of the bucket, with key
--   <tt>bucketName</tt>, and optionally provide a prefix, with key
--   <tt>prefix</tt>. The following example specifies an Amazon S3 bucket
--   named <tt>DOC-EXAMPLE-BUCKET</tt> and the prefix
--   <tt>alerts</tt>:<pre>"LogDestination": { "bucketName":
--   "DOC-EXAMPLE-BUCKET", "prefix": "alerts" }</pre></li>
--   <li>For a CloudWatch log group, provide the name of the CloudWatch log
--   group, with key <tt>logGroup</tt>. The following example specifies a
--   log group named <tt>alert-log-group</tt>:<pre>"LogDestination": {
--   "logGroup": "alert-log-group" }</pre></li>
--   <li>For a Kinesis Data Firehose delivery stream, provide the name of
--   the delivery stream, with key <tt>deliveryStream</tt>. The following
--   example specifies a delivery stream named
--   <tt>alert-delivery-stream</tt>:<pre>"LogDestination": {
--   "deliveryStream": "alert-delivery-stream" }</pre></li>
--   </ul>
logDestinationConfig_logDestination :: Lens' LogDestinationConfig (HashMap Text Text)

-- | Defines how AWS Network Firewall performs logging for a Firewall.
--   
--   <i>See:</i> <a>newLoggingConfiguration</a> smart constructor.
data LoggingConfiguration
LoggingConfiguration' :: [LogDestinationConfig] -> LoggingConfiguration

-- | Defines the logging destinations for the logs for a firewall. Network
--   Firewall generates logs for stateful rule groups.
[$sel:logDestinationConfigs:LoggingConfiguration'] :: LoggingConfiguration -> [LogDestinationConfig]

-- | Create a value of <a>LoggingConfiguration</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:logDestinationConfigs:LoggingConfiguration'</a>,
--   <a>loggingConfiguration_logDestinationConfigs</a> - Defines the
--   logging destinations for the logs for a firewall. Network Firewall
--   generates logs for stateful rule groups.
newLoggingConfiguration :: LoggingConfiguration

-- | Defines the logging destinations for the logs for a firewall. Network
--   Firewall generates logs for stateful rule groups.
loggingConfiguration_logDestinationConfigs :: Lens' LoggingConfiguration [LogDestinationConfig]

-- | Criteria for Network Firewall to use to inspect an individual packet
--   in stateless rule inspection. Each match attributes set can include
--   one or more items such as IP address, CIDR range, port number,
--   protocol, and TCP flags.
--   
--   <i>See:</i> <a>newMatchAttributes</a> smart constructor.
data MatchAttributes
MatchAttributes' :: Maybe [Natural] -> Maybe [TCPFlagField] -> Maybe [PortRange] -> Maybe [Address] -> Maybe [PortRange] -> Maybe [Address] -> MatchAttributes

-- | The protocols to inspect for, specified using each protocol's assigned
--   internet protocol number (IANA). If not specified, this matches with
--   any protocol.
[$sel:protocols:MatchAttributes'] :: MatchAttributes -> Maybe [Natural]

-- | The TCP flags and masks to inspect for. If not specified, this matches
--   with any settings. This setting is only used for protocol 6 (TCP).
[$sel:tCPFlags:MatchAttributes'] :: MatchAttributes -> Maybe [TCPFlagField]

-- | The destination ports to inspect for. If not specified, this matches
--   with any destination port. This setting is only used for protocols 6
--   (TCP) and 17 (UDP).
--   
--   You can specify individual ports, for example <tt>1994</tt> and you
--   can specify port ranges, for example <tt>1990:1994</tt>.
[$sel:destinationPorts:MatchAttributes'] :: MatchAttributes -> Maybe [PortRange]

-- | The source IP addresses and address ranges to inspect for, in CIDR
--   notation. If not specified, this matches with any source address.
[$sel:sources:MatchAttributes'] :: MatchAttributes -> Maybe [Address]

-- | The source ports to inspect for. If not specified, this matches with
--   any source port. This setting is only used for protocols 6 (TCP) and
--   17 (UDP).
--   
--   You can specify individual ports, for example <tt>1994</tt> and you
--   can specify port ranges, for example <tt>1990:1994</tt>.
[$sel:sourcePorts:MatchAttributes'] :: MatchAttributes -> Maybe [PortRange]

-- | The destination IP addresses and address ranges to inspect for, in
--   CIDR notation. If not specified, this matches with any destination
--   address.
[$sel:destinations:MatchAttributes'] :: MatchAttributes -> Maybe [Address]

-- | Create a value of <a>MatchAttributes</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:protocols:MatchAttributes'</a>,
--   <a>matchAttributes_protocols</a> - The protocols to inspect for,
--   specified using each protocol's assigned internet protocol number
--   (IANA). If not specified, this matches with any protocol.
--   
--   <a>$sel:tCPFlags:MatchAttributes'</a>, <a>matchAttributes_tCPFlags</a>
--   - The TCP flags and masks to inspect for. If not specified, this
--   matches with any settings. This setting is only used for protocol 6
--   (TCP).
--   
--   <a>$sel:destinationPorts:MatchAttributes'</a>,
--   <a>matchAttributes_destinationPorts</a> - The destination ports to
--   inspect for. If not specified, this matches with any destination port.
--   This setting is only used for protocols 6 (TCP) and 17 (UDP).
--   
--   You can specify individual ports, for example <tt>1994</tt> and you
--   can specify port ranges, for example <tt>1990:1994</tt>.
--   
--   <a>$sel:sources:MatchAttributes'</a>, <a>matchAttributes_sources</a> -
--   The source IP addresses and address ranges to inspect for, in CIDR
--   notation. If not specified, this matches with any source address.
--   
--   <a>$sel:sourcePorts:MatchAttributes'</a>,
--   <a>matchAttributes_sourcePorts</a> - The source ports to inspect for.
--   If not specified, this matches with any source port. This setting is
--   only used for protocols 6 (TCP) and 17 (UDP).
--   
--   You can specify individual ports, for example <tt>1994</tt> and you
--   can specify port ranges, for example <tt>1990:1994</tt>.
--   
--   <a>$sel:destinations:MatchAttributes'</a>,
--   <a>matchAttributes_destinations</a> - The destination IP addresses and
--   address ranges to inspect for, in CIDR notation. If not specified,
--   this matches with any destination address.
newMatchAttributes :: MatchAttributes

-- | The protocols to inspect for, specified using each protocol's assigned
--   internet protocol number (IANA). If not specified, this matches with
--   any protocol.
matchAttributes_protocols :: Lens' MatchAttributes (Maybe [Natural])

-- | The TCP flags and masks to inspect for. If not specified, this matches
--   with any settings. This setting is only used for protocol 6 (TCP).
matchAttributes_tCPFlags :: Lens' MatchAttributes (Maybe [TCPFlagField])

-- | The destination ports to inspect for. If not specified, this matches
--   with any destination port. This setting is only used for protocols 6
--   (TCP) and 17 (UDP).
--   
--   You can specify individual ports, for example <tt>1994</tt> and you
--   can specify port ranges, for example <tt>1990:1994</tt>.
matchAttributes_destinationPorts :: Lens' MatchAttributes (Maybe [PortRange])

-- | The source IP addresses and address ranges to inspect for, in CIDR
--   notation. If not specified, this matches with any source address.
matchAttributes_sources :: Lens' MatchAttributes (Maybe [Address])

-- | The source ports to inspect for. If not specified, this matches with
--   any source port. This setting is only used for protocols 6 (TCP) and
--   17 (UDP).
--   
--   You can specify individual ports, for example <tt>1994</tt> and you
--   can specify port ranges, for example <tt>1990:1994</tt>.
matchAttributes_sourcePorts :: Lens' MatchAttributes (Maybe [PortRange])

-- | The destination IP addresses and address ranges to inspect for, in
--   CIDR notation. If not specified, this matches with any destination
--   address.
matchAttributes_destinations :: Lens' MatchAttributes (Maybe [Address])

-- | Provides configuration status for a single policy or rule group that
--   is used for a firewall endpoint. Network Firewall provides each
--   endpoint with the rules that are configured in the firewall policy.
--   Each time you add a subnet or modify the associated firewall policy,
--   Network Firewall synchronizes the rules in the endpoint, so it can
--   properly filter network traffic. This is part of a SyncState for a
--   firewall.
--   
--   <i>See:</i> <a>newPerObjectStatus</a> smart constructor.
data PerObjectStatus
PerObjectStatus' :: Maybe Text -> Maybe PerObjectSyncStatus -> PerObjectStatus

-- | The current version of the object that is either in sync or pending
--   synchronization.
[$sel:updateToken:PerObjectStatus'] :: PerObjectStatus -> Maybe Text

-- | Indicates whether this object is in sync with the version indicated in
--   the update token.
[$sel:syncStatus:PerObjectStatus'] :: PerObjectStatus -> Maybe PerObjectSyncStatus

-- | Create a value of <a>PerObjectStatus</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:updateToken:PerObjectStatus'</a>,
--   <a>perObjectStatus_updateToken</a> - The current version of the object
--   that is either in sync or pending synchronization.
--   
--   <a>$sel:syncStatus:PerObjectStatus'</a>,
--   <a>perObjectStatus_syncStatus</a> - Indicates whether this object is
--   in sync with the version indicated in the update token.
newPerObjectStatus :: PerObjectStatus

-- | The current version of the object that is either in sync or pending
--   synchronization.
perObjectStatus_updateToken :: Lens' PerObjectStatus (Maybe Text)

-- | Indicates whether this object is in sync with the version indicated in
--   the update token.
perObjectStatus_syncStatus :: Lens' PerObjectStatus (Maybe PerObjectSyncStatus)

-- | A single port range specification. This is used for source and
--   destination port ranges in the stateless rule MatchAttributes,
--   <tt>SourcePorts</tt>, and <tt>DestinationPorts</tt> settings.
--   
--   <i>See:</i> <a>newPortRange</a> smart constructor.
data PortRange
PortRange' :: Natural -> Natural -> PortRange

-- | The lower limit of the port range. This must be less than or equal to
--   the <tt>ToPort</tt> specification.
[$sel:fromPort:PortRange'] :: PortRange -> Natural

-- | The upper limit of the port range. This must be greater than or equal
--   to the <tt>FromPort</tt> specification.
[$sel:toPort:PortRange'] :: PortRange -> Natural

-- | Create a value of <a>PortRange</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:fromPort:PortRange'</a>, <a>portRange_fromPort</a> - The lower
--   limit of the port range. This must be less than or equal to the
--   <tt>ToPort</tt> specification.
--   
--   <a>$sel:toPort:PortRange'</a>, <a>portRange_toPort</a> - The upper
--   limit of the port range. This must be greater than or equal to the
--   <tt>FromPort</tt> specification.
newPortRange :: Natural -> Natural -> PortRange

-- | The lower limit of the port range. This must be less than or equal to
--   the <tt>ToPort</tt> specification.
portRange_fromPort :: Lens' PortRange Natural

-- | The upper limit of the port range. This must be greater than or equal
--   to the <tt>FromPort</tt> specification.
portRange_toPort :: Lens' PortRange Natural

-- | A set of port ranges for use in the rules in a rule group.
--   
--   <i>See:</i> <a>newPortSet</a> smart constructor.
data PortSet
PortSet' :: Maybe [Text] -> PortSet

-- | The set of port ranges.
[$sel:definition:PortSet'] :: PortSet -> Maybe [Text]

-- | Create a value of <a>PortSet</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:definition:PortSet'</a>, <a>portSet_definition</a> - The set
--   of port ranges.
newPortSet :: PortSet

-- | The set of port ranges.
portSet_definition :: Lens' PortSet (Maybe [Text])

-- | Stateless inspection criteria that publishes the specified metrics to
--   Amazon CloudWatch for the matching packet. This setting defines a
--   CloudWatch dimension value to be published.
--   
--   <i>See:</i> <a>newPublishMetricAction</a> smart constructor.
data PublishMetricAction
PublishMetricAction' :: NonEmpty Dimension -> PublishMetricAction
[$sel:dimensions:PublishMetricAction'] :: PublishMetricAction -> NonEmpty Dimension

-- | Create a value of <a>PublishMetricAction</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dimensions:PublishMetricAction'</a>,
--   <a>publishMetricAction_dimensions</a> -
newPublishMetricAction :: NonEmpty Dimension -> PublishMetricAction

publishMetricAction_dimensions :: Lens' PublishMetricAction (NonEmpty Dimension)

-- | The inspection criteria and action for a single stateless rule. AWS
--   Network Firewall inspects each packet for the specified matching
--   criteria. When a packet matches the criteria, Network Firewall
--   performs the rule's actions on the packet.
--   
--   <i>See:</i> <a>newRuleDefinition</a> smart constructor.
data RuleDefinition
RuleDefinition' :: MatchAttributes -> [Text] -> RuleDefinition

-- | Criteria for Network Firewall to use to inspect an individual packet
--   in stateless rule inspection. Each match attributes set can include
--   one or more items such as IP address, CIDR range, port number,
--   protocol, and TCP flags.
[$sel:matchAttributes:RuleDefinition'] :: RuleDefinition -> MatchAttributes

-- | The actions to take on a packet that matches one of the stateless rule
--   definition's match attributes. You must specify a standard action and
--   you can add custom actions.
--   
--   Network Firewall only forwards a packet for stateful rule inspection
--   if you specify <tt>aws:forward_to_sfe</tt> for a rule that the packet
--   matches, or if the packet doesn't match any stateless rule and you
--   specify <tt>aws:forward_to_sfe</tt> for the
--   <tt>StatelessDefaultActions</tt> setting for the FirewallPolicy.
--   
--   For every rule, you must specify exactly one of the following standard
--   actions.
--   
--   <ul>
--   <li><b>aws:pass</b> - Discontinues all inspection of the packet and
--   permits it to go to its intended destination.</li>
--   <li><b>aws:drop</b> - Discontinues all inspection of the packet and
--   blocks it from going to its intended destination.</li>
--   <li><b>aws:forward_to_sfe</b> - Discontinues stateless inspection of
--   the packet and forwards it to the stateful rule engine for
--   inspection.</li>
--   </ul>
--   
--   Additionally, you can specify a custom action. To do this, you define
--   a custom action by name and type, then provide the name you've
--   assigned to the action in this <tt>Actions</tt> setting. For
--   information about the options, see CustomAction.
--   
--   To provide more than one action in this setting, separate the settings
--   with a comma. For example, if you have a custom
--   <tt>PublishMetrics</tt> action that you've named
--   <tt>MyMetricsAction</tt>, then you could specify the standard action
--   <tt>aws:pass</tt> and the custom action with <tt>[“aws:pass”,
--   “MyMetricsAction”]</tt>.
[$sel:actions:RuleDefinition'] :: RuleDefinition -> [Text]

-- | Create a value of <a>RuleDefinition</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:matchAttributes:RuleDefinition'</a>,
--   <a>ruleDefinition_matchAttributes</a> - Criteria for Network Firewall
--   to use to inspect an individual packet in stateless rule inspection.
--   Each match attributes set can include one or more items such as IP
--   address, CIDR range, port number, protocol, and TCP flags.
--   
--   <a>$sel:actions:RuleDefinition'</a>, <a>ruleDefinition_actions</a> -
--   The actions to take on a packet that matches one of the stateless rule
--   definition's match attributes. You must specify a standard action and
--   you can add custom actions.
--   
--   Network Firewall only forwards a packet for stateful rule inspection
--   if you specify <tt>aws:forward_to_sfe</tt> for a rule that the packet
--   matches, or if the packet doesn't match any stateless rule and you
--   specify <tt>aws:forward_to_sfe</tt> for the
--   <tt>StatelessDefaultActions</tt> setting for the FirewallPolicy.
--   
--   For every rule, you must specify exactly one of the following standard
--   actions.
--   
--   <ul>
--   <li><b>aws:pass</b> - Discontinues all inspection of the packet and
--   permits it to go to its intended destination.</li>
--   <li><b>aws:drop</b> - Discontinues all inspection of the packet and
--   blocks it from going to its intended destination.</li>
--   <li><b>aws:forward_to_sfe</b> - Discontinues stateless inspection of
--   the packet and forwards it to the stateful rule engine for
--   inspection.</li>
--   </ul>
--   
--   Additionally, you can specify a custom action. To do this, you define
--   a custom action by name and type, then provide the name you've
--   assigned to the action in this <tt>Actions</tt> setting. For
--   information about the options, see CustomAction.
--   
--   To provide more than one action in this setting, separate the settings
--   with a comma. For example, if you have a custom
--   <tt>PublishMetrics</tt> action that you've named
--   <tt>MyMetricsAction</tt>, then you could specify the standard action
--   <tt>aws:pass</tt> and the custom action with <tt>[“aws:pass”,
--   “MyMetricsAction”]</tt>.
newRuleDefinition :: MatchAttributes -> RuleDefinition

-- | Criteria for Network Firewall to use to inspect an individual packet
--   in stateless rule inspection. Each match attributes set can include
--   one or more items such as IP address, CIDR range, port number,
--   protocol, and TCP flags.
ruleDefinition_matchAttributes :: Lens' RuleDefinition MatchAttributes

-- | The actions to take on a packet that matches one of the stateless rule
--   definition's match attributes. You must specify a standard action and
--   you can add custom actions.
--   
--   Network Firewall only forwards a packet for stateful rule inspection
--   if you specify <tt>aws:forward_to_sfe</tt> for a rule that the packet
--   matches, or if the packet doesn't match any stateless rule and you
--   specify <tt>aws:forward_to_sfe</tt> for the
--   <tt>StatelessDefaultActions</tt> setting for the FirewallPolicy.
--   
--   For every rule, you must specify exactly one of the following standard
--   actions.
--   
--   <ul>
--   <li><b>aws:pass</b> - Discontinues all inspection of the packet and
--   permits it to go to its intended destination.</li>
--   <li><b>aws:drop</b> - Discontinues all inspection of the packet and
--   blocks it from going to its intended destination.</li>
--   <li><b>aws:forward_to_sfe</b> - Discontinues stateless inspection of
--   the packet and forwards it to the stateful rule engine for
--   inspection.</li>
--   </ul>
--   
--   Additionally, you can specify a custom action. To do this, you define
--   a custom action by name and type, then provide the name you've
--   assigned to the action in this <tt>Actions</tt> setting. For
--   information about the options, see CustomAction.
--   
--   To provide more than one action in this setting, separate the settings
--   with a comma. For example, if you have a custom
--   <tt>PublishMetrics</tt> action that you've named
--   <tt>MyMetricsAction</tt>, then you could specify the standard action
--   <tt>aws:pass</tt> and the custom action with <tt>[“aws:pass”,
--   “MyMetricsAction”]</tt>.
ruleDefinition_actions :: Lens' RuleDefinition [Text]

-- | The object that defines the rules in a rule group. This, along with
--   RuleGroupResponse, define the rule group. You can retrieve all objects
--   for a rule group by calling DescribeRuleGroup.
--   
--   AWS Network Firewall uses a rule group to inspect and control network
--   traffic. You define stateless rule groups to inspect individual
--   packets and you define stateful rule groups to inspect packets in the
--   context of their traffic flow.
--   
--   To use a rule group, you include it by reference in an Network
--   Firewall firewall policy, then you use the policy in a firewall. You
--   can reference a rule group from more than one firewall policy, and you
--   can use a firewall policy in more than one firewall.
--   
--   <i>See:</i> <a>newRuleGroup</a> smart constructor.
data RuleGroup
RuleGroup' :: Maybe StatefulRuleOptions -> Maybe RuleVariables -> RulesSource -> RuleGroup

-- | Additional options governing how Network Firewall handles stateful
--   rules. The policies where you use your stateful rule group must have
--   stateful rule options settings that are compatible with these
--   settings.
[$sel:statefulRuleOptions:RuleGroup'] :: RuleGroup -> Maybe StatefulRuleOptions

-- | Settings that are available for use in the rules in the rule group.
--   You can only use these for stateful rule groups.
[$sel:ruleVariables:RuleGroup'] :: RuleGroup -> Maybe RuleVariables

-- | The stateful rules or stateless rules for the rule group.
[$sel:rulesSource:RuleGroup'] :: RuleGroup -> RulesSource

-- | Create a value of <a>RuleGroup</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:statefulRuleOptions:RuleGroup'</a>,
--   <a>ruleGroup_statefulRuleOptions</a> - Additional options governing
--   how Network Firewall handles stateful rules. The policies where you
--   use your stateful rule group must have stateful rule options settings
--   that are compatible with these settings.
--   
--   <a>$sel:ruleVariables:RuleGroup'</a>, <a>ruleGroup_ruleVariables</a> -
--   Settings that are available for use in the rules in the rule group.
--   You can only use these for stateful rule groups.
--   
--   <a>$sel:rulesSource:RuleGroup'</a>, <a>ruleGroup_rulesSource</a> - The
--   stateful rules or stateless rules for the rule group.
newRuleGroup :: RulesSource -> RuleGroup

-- | Additional options governing how Network Firewall handles stateful
--   rules. The policies where you use your stateful rule group must have
--   stateful rule options settings that are compatible with these
--   settings.
ruleGroup_statefulRuleOptions :: Lens' RuleGroup (Maybe StatefulRuleOptions)

-- | Settings that are available for use in the rules in the rule group.
--   You can only use these for stateful rule groups.
ruleGroup_ruleVariables :: Lens' RuleGroup (Maybe RuleVariables)

-- | The stateful rules or stateless rules for the rule group.
ruleGroup_rulesSource :: Lens' RuleGroup RulesSource

-- | High-level information about a rule group, returned by ListRuleGroups.
--   You can use the information provided in the metadata to retrieve and
--   manage a rule group.
--   
--   <i>See:</i> <a>newRuleGroupMetadata</a> smart constructor.
data RuleGroupMetadata
RuleGroupMetadata' :: Maybe Text -> Maybe Text -> RuleGroupMetadata

-- | The Amazon Resource Name (ARN) of the rule group.
[$sel:arn:RuleGroupMetadata'] :: RuleGroupMetadata -> Maybe Text

-- | The descriptive name of the rule group. You can't change the name of a
--   rule group after you create it.
[$sel:name:RuleGroupMetadata'] :: RuleGroupMetadata -> Maybe Text

-- | Create a value of <a>RuleGroupMetadata</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:arn:RuleGroupMetadata'</a>, <a>ruleGroupMetadata_arn</a> - The
--   Amazon Resource Name (ARN) of the rule group.
--   
--   <a>$sel:name:RuleGroupMetadata'</a>, <a>ruleGroupMetadata_name</a> -
--   The descriptive name of the rule group. You can't change the name of a
--   rule group after you create it.
newRuleGroupMetadata :: RuleGroupMetadata

-- | The Amazon Resource Name (ARN) of the rule group.
ruleGroupMetadata_arn :: Lens' RuleGroupMetadata (Maybe Text)

-- | The descriptive name of the rule group. You can't change the name of a
--   rule group after you create it.
ruleGroupMetadata_name :: Lens' RuleGroupMetadata (Maybe Text)

-- | The high-level properties of a rule group. This, along with the
--   RuleGroup, define the rule group. You can retrieve all objects for a
--   rule group by calling DescribeRuleGroup.
--   
--   <i>See:</i> <a>newRuleGroupResponse</a> smart constructor.
data RuleGroupResponse
RuleGroupResponse' :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe ResourceStatus -> Maybe RuleGroupType -> Maybe Text -> Maybe (NonEmpty Tag) -> Text -> Text -> Text -> RuleGroupResponse

-- | The number of firewall policies that use this rule group.
[$sel:numberOfAssociations:RuleGroupResponse'] :: RuleGroupResponse -> Maybe Int

-- | The maximum operating resources that this rule group can use. Rule
--   group capacity is fixed at creation. When you update a rule group, you
--   are limited to this capacity. When you reference a rule group from a
--   firewall policy, Network Firewall reserves this capacity for the rule
--   group.
--   
--   You can retrieve the capacity that would be required for a rule group
--   before you create the rule group by calling CreateRuleGroup with
--   <tt>DryRun</tt> set to <tt>TRUE</tt>.
[$sel:capacity:RuleGroupResponse'] :: RuleGroupResponse -> Maybe Int

-- | The number of capacity units currently consumed by the rule group
--   rules.
[$sel:consumedCapacity:RuleGroupResponse'] :: RuleGroupResponse -> Maybe Int

-- | Detailed information about the current status of a rule group.
[$sel:ruleGroupStatus:RuleGroupResponse'] :: RuleGroupResponse -> Maybe ResourceStatus

-- | Indicates whether the rule group is stateless or stateful. If the rule
--   group is stateless, it contains stateless rules. If it is stateful, it
--   contains stateful rules.
[$sel:type':RuleGroupResponse'] :: RuleGroupResponse -> Maybe RuleGroupType

-- | A description of the rule group.
[$sel:description:RuleGroupResponse'] :: RuleGroupResponse -> Maybe Text

-- | The key:value pairs to associate with the resource.
[$sel:tags:RuleGroupResponse'] :: RuleGroupResponse -> Maybe (NonEmpty Tag)

-- | The Amazon Resource Name (ARN) of the rule group.
--   
--   If this response is for a create request that had <tt>DryRun</tt> set
--   to <tt>TRUE</tt>, then this ARN is a placeholder that isn't attached
--   to a valid resource.
[$sel:ruleGroupArn:RuleGroupResponse'] :: RuleGroupResponse -> Text

-- | The descriptive name of the rule group. You can't change the name of a
--   rule group after you create it.
[$sel:ruleGroupName:RuleGroupResponse'] :: RuleGroupResponse -> Text

-- | The unique identifier for the rule group.
[$sel:ruleGroupId:RuleGroupResponse'] :: RuleGroupResponse -> Text

-- | Create a value of <a>RuleGroupResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:numberOfAssociations:RuleGroupResponse'</a>,
--   <a>ruleGroupResponse_numberOfAssociations</a> - The number of firewall
--   policies that use this rule group.
--   
--   <a>$sel:capacity:RuleGroupResponse'</a>,
--   <a>ruleGroupResponse_capacity</a> - The maximum operating resources
--   that this rule group can use. Rule group capacity is fixed at
--   creation. When you update a rule group, you are limited to this
--   capacity. When you reference a rule group from a firewall policy,
--   Network Firewall reserves this capacity for the rule group.
--   
--   You can retrieve the capacity that would be required for a rule group
--   before you create the rule group by calling CreateRuleGroup with
--   <tt>DryRun</tt> set to <tt>TRUE</tt>.
--   
--   <a>$sel:consumedCapacity:RuleGroupResponse'</a>,
--   <a>ruleGroupResponse_consumedCapacity</a> - The number of capacity
--   units currently consumed by the rule group rules.
--   
--   <a>$sel:ruleGroupStatus:RuleGroupResponse'</a>,
--   <a>ruleGroupResponse_ruleGroupStatus</a> - Detailed information about
--   the current status of a rule group.
--   
--   <a>$sel:type':RuleGroupResponse'</a>, <a>ruleGroupResponse_type</a> -
--   Indicates whether the rule group is stateless or stateful. If the rule
--   group is stateless, it contains stateless rules. If it is stateful, it
--   contains stateful rules.
--   
--   <a>$sel:description:RuleGroupResponse'</a>,
--   <a>ruleGroupResponse_description</a> - A description of the rule
--   group.
--   
--   <a>$sel:tags:RuleGroupResponse'</a>, <a>ruleGroupResponse_tags</a> -
--   The key:value pairs to associate with the resource.
--   
--   <a>$sel:ruleGroupArn:RuleGroupResponse'</a>,
--   <a>ruleGroupResponse_ruleGroupArn</a> - The Amazon Resource Name (ARN)
--   of the rule group.
--   
--   If this response is for a create request that had <tt>DryRun</tt> set
--   to <tt>TRUE</tt>, then this ARN is a placeholder that isn't attached
--   to a valid resource.
--   
--   <a>$sel:ruleGroupName:RuleGroupResponse'</a>,
--   <a>ruleGroupResponse_ruleGroupName</a> - The descriptive name of the
--   rule group. You can't change the name of a rule group after you create
--   it.
--   
--   <a>$sel:ruleGroupId:RuleGroupResponse'</a>,
--   <a>ruleGroupResponse_ruleGroupId</a> - The unique identifier for the
--   rule group.
newRuleGroupResponse :: Text -> Text -> Text -> RuleGroupResponse

-- | The number of firewall policies that use this rule group.
ruleGroupResponse_numberOfAssociations :: Lens' RuleGroupResponse (Maybe Int)

-- | The maximum operating resources that this rule group can use. Rule
--   group capacity is fixed at creation. When you update a rule group, you
--   are limited to this capacity. When you reference a rule group from a
--   firewall policy, Network Firewall reserves this capacity for the rule
--   group.
--   
--   You can retrieve the capacity that would be required for a rule group
--   before you create the rule group by calling CreateRuleGroup with
--   <tt>DryRun</tt> set to <tt>TRUE</tt>.
ruleGroupResponse_capacity :: Lens' RuleGroupResponse (Maybe Int)

-- | The number of capacity units currently consumed by the rule group
--   rules.
ruleGroupResponse_consumedCapacity :: Lens' RuleGroupResponse (Maybe Int)

-- | Detailed information about the current status of a rule group.
ruleGroupResponse_ruleGroupStatus :: Lens' RuleGroupResponse (Maybe ResourceStatus)

-- | Indicates whether the rule group is stateless or stateful. If the rule
--   group is stateless, it contains stateless rules. If it is stateful, it
--   contains stateful rules.
ruleGroupResponse_type :: Lens' RuleGroupResponse (Maybe RuleGroupType)

-- | A description of the rule group.
ruleGroupResponse_description :: Lens' RuleGroupResponse (Maybe Text)

-- | The key:value pairs to associate with the resource.
ruleGroupResponse_tags :: Lens' RuleGroupResponse (Maybe (NonEmpty Tag))

-- | The Amazon Resource Name (ARN) of the rule group.
--   
--   If this response is for a create request that had <tt>DryRun</tt> set
--   to <tt>TRUE</tt>, then this ARN is a placeholder that isn't attached
--   to a valid resource.
ruleGroupResponse_ruleGroupArn :: Lens' RuleGroupResponse Text

-- | The descriptive name of the rule group. You can't change the name of a
--   rule group after you create it.
ruleGroupResponse_ruleGroupName :: Lens' RuleGroupResponse Text

-- | The unique identifier for the rule group.
ruleGroupResponse_ruleGroupId :: Lens' RuleGroupResponse Text

-- | Additional settings for a stateful rule. This is part of the
--   StatefulRule configuration.
--   
--   <i>See:</i> <a>newRuleOption</a> smart constructor.
data RuleOption
RuleOption' :: Maybe [Text] -> Text -> RuleOption
[$sel:settings:RuleOption'] :: RuleOption -> Maybe [Text]
[$sel:keyword:RuleOption'] :: RuleOption -> Text

-- | Create a value of <a>RuleOption</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:settings:RuleOption'</a>, <a>ruleOption_settings</a> -
--   
--   <a>$sel:keyword:RuleOption'</a>, <a>ruleOption_keyword</a> -
newRuleOption :: Text -> RuleOption

ruleOption_settings :: Lens' RuleOption (Maybe [Text])

ruleOption_keyword :: Lens' RuleOption Text

-- | Settings that are available for use in the rules in the RuleGroup
--   where this is defined.
--   
--   <i>See:</i> <a>newRuleVariables</a> smart constructor.
data RuleVariables
RuleVariables' :: Maybe (HashMap Text PortSet) -> Maybe (HashMap Text IPSet) -> RuleVariables

-- | A list of port ranges.
[$sel:portSets:RuleVariables'] :: RuleVariables -> Maybe (HashMap Text PortSet)

-- | A list of IP addresses and address ranges, in CIDR notation.
[$sel:iPSets:RuleVariables'] :: RuleVariables -> Maybe (HashMap Text IPSet)

-- | Create a value of <a>RuleVariables</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:portSets:RuleVariables'</a>, <a>ruleVariables_portSets</a> - A
--   list of port ranges.
--   
--   <a>$sel:iPSets:RuleVariables'</a>, <a>ruleVariables_iPSets</a> - A
--   list of IP addresses and address ranges, in CIDR notation.
newRuleVariables :: RuleVariables

-- | A list of port ranges.
ruleVariables_portSets :: Lens' RuleVariables (Maybe (HashMap Text PortSet))

-- | A list of IP addresses and address ranges, in CIDR notation.
ruleVariables_iPSets :: Lens' RuleVariables (Maybe (HashMap Text IPSet))

-- | The stateless or stateful rules definitions for use in a single rule
--   group. Each rule group requires a single <tt>RulesSource</tt>. You can
--   use an instance of this for either stateless rules or stateful rules.
--   
--   <i>See:</i> <a>newRulesSource</a> smart constructor.
data RulesSource
RulesSource' :: Maybe Text -> Maybe RulesSourceList -> Maybe [StatefulRule] -> Maybe StatelessRulesAndCustomActions -> RulesSource

-- | Stateful inspection criteria, provided in Suricata compatible
--   intrusion prevention system (IPS) rules. Suricata is an open-source
--   network IPS that includes a standard rule-based language for network
--   traffic inspection.
--   
--   These rules contain the inspection criteria and the action to take for
--   traffic that matches the criteria, so this type of rule group doesn't
--   have a separate action setting.
[$sel:rulesString:RulesSource'] :: RulesSource -> Maybe Text

-- | Stateful inspection criteria for a domain list rule group.
[$sel:rulesSourceList:RulesSource'] :: RulesSource -> Maybe RulesSourceList

-- | An array of individual stateful rules inspection criteria to be used
--   together in a stateful rule group. Use this option to specify simple
--   Suricata rules with protocol, source and destination, ports,
--   direction, and rule options. For information about the Suricata
--   <tt>Rules</tt> format, see <a>Rules Format</a>.
[$sel:statefulRules:RulesSource'] :: RulesSource -> Maybe [StatefulRule]

-- | Stateless inspection criteria to be used in a stateless rule group.
[$sel:statelessRulesAndCustomActions:RulesSource'] :: RulesSource -> Maybe StatelessRulesAndCustomActions

-- | Create a value of <a>RulesSource</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rulesString:RulesSource'</a>, <a>rulesSource_rulesString</a> -
--   Stateful inspection criteria, provided in Suricata compatible
--   intrusion prevention system (IPS) rules. Suricata is an open-source
--   network IPS that includes a standard rule-based language for network
--   traffic inspection.
--   
--   These rules contain the inspection criteria and the action to take for
--   traffic that matches the criteria, so this type of rule group doesn't
--   have a separate action setting.
--   
--   <a>$sel:rulesSourceList:RulesSource'</a>,
--   <a>rulesSource_rulesSourceList</a> - Stateful inspection criteria for
--   a domain list rule group.
--   
--   <a>$sel:statefulRules:RulesSource'</a>,
--   <a>rulesSource_statefulRules</a> - An array of individual stateful
--   rules inspection criteria to be used together in a stateful rule
--   group. Use this option to specify simple Suricata rules with protocol,
--   source and destination, ports, direction, and rule options. For
--   information about the Suricata <tt>Rules</tt> format, see <a>Rules
--   Format</a>.
--   
--   <a>$sel:statelessRulesAndCustomActions:RulesSource'</a>,
--   <a>rulesSource_statelessRulesAndCustomActions</a> - Stateless
--   inspection criteria to be used in a stateless rule group.
newRulesSource :: RulesSource

-- | Stateful inspection criteria, provided in Suricata compatible
--   intrusion prevention system (IPS) rules. Suricata is an open-source
--   network IPS that includes a standard rule-based language for network
--   traffic inspection.
--   
--   These rules contain the inspection criteria and the action to take for
--   traffic that matches the criteria, so this type of rule group doesn't
--   have a separate action setting.
rulesSource_rulesString :: Lens' RulesSource (Maybe Text)

-- | Stateful inspection criteria for a domain list rule group.
rulesSource_rulesSourceList :: Lens' RulesSource (Maybe RulesSourceList)

-- | An array of individual stateful rules inspection criteria to be used
--   together in a stateful rule group. Use this option to specify simple
--   Suricata rules with protocol, source and destination, ports,
--   direction, and rule options. For information about the Suricata
--   <tt>Rules</tt> format, see <a>Rules Format</a>.
rulesSource_statefulRules :: Lens' RulesSource (Maybe [StatefulRule])

-- | Stateless inspection criteria to be used in a stateless rule group.
rulesSource_statelessRulesAndCustomActions :: Lens' RulesSource (Maybe StatelessRulesAndCustomActions)

-- | Stateful inspection criteria for a domain list rule group.
--   
--   For HTTPS traffic, domain filtering is SNI-based. It uses the server
--   name indicator extension of the TLS handshake.
--   
--   By default, Network Firewall domain list inspection only includes
--   traffic coming from the VPC where you deploy the firewall. To inspect
--   traffic from IP addresses outside of the deployment VPC, you set the
--   <tt>HOME_NET</tt> rule variable to include the CIDR range of the
--   deployment VPC plus the other CIDR ranges. For more information, see
--   RuleVariables in this guide and <a>Stateful domain list rule groups in
--   AWS Network Firewall</a> in the <i>Network Firewall Developer
--   Guide</i>.
--   
--   <i>See:</i> <a>newRulesSourceList</a> smart constructor.
data RulesSourceList
RulesSourceList' :: [Text] -> [TargetType] -> GeneratedRulesType -> RulesSourceList

-- | The domains that you want to inspect for in your traffic flows. To
--   provide multiple domains, separate them with commas. Valid domain
--   specifications are the following:
--   
--   <ul>
--   <li>Explicit names. For example, <tt>abc.example.com</tt> matches only
--   the domain <tt>abc.example.com</tt>.</li>
--   <li>Names that use a domain wildcard, which you indicate with an
--   initial '<tt>.</tt>'. For example,<tt>.example.com</tt> matches
--   <tt>example.com</tt> and matches all subdomains of
--   <tt>example.com</tt>, such as <tt>abc.example.com</tt> and
--   <tt>www.example.com</tt>.</li>
--   </ul>
[$sel:targets:RulesSourceList'] :: RulesSourceList -> [Text]

-- | The protocols you want to inspect. Specify <tt>TLS_SNI</tt> for
--   <tt>HTTPS</tt>. Specify <tt>HTTP_HOST</tt> for <tt>HTTP</tt>. You can
--   specify either or both.
[$sel:targetTypes:RulesSourceList'] :: RulesSourceList -> [TargetType]

-- | Whether you want to allow or deny access to the domains in your target
--   list.
[$sel:generatedRulesType:RulesSourceList'] :: RulesSourceList -> GeneratedRulesType

-- | Create a value of <a>RulesSourceList</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:targets:RulesSourceList'</a>, <a>rulesSourceList_targets</a> -
--   The domains that you want to inspect for in your traffic flows. To
--   provide multiple domains, separate them with commas. Valid domain
--   specifications are the following:
--   
--   <ul>
--   <li>Explicit names. For example, <tt>abc.example.com</tt> matches only
--   the domain <tt>abc.example.com</tt>.</li>
--   <li>Names that use a domain wildcard, which you indicate with an
--   initial '<tt>.</tt>'. For example,<tt>.example.com</tt> matches
--   <tt>example.com</tt> and matches all subdomains of
--   <tt>example.com</tt>, such as <tt>abc.example.com</tt> and
--   <tt>www.example.com</tt>.</li>
--   </ul>
--   
--   <a>$sel:targetTypes:RulesSourceList'</a>,
--   <a>rulesSourceList_targetTypes</a> - The protocols you want to
--   inspect. Specify <tt>TLS_SNI</tt> for <tt>HTTPS</tt>. Specify
--   <tt>HTTP_HOST</tt> for <tt>HTTP</tt>. You can specify either or both.
--   
--   <a>$sel:generatedRulesType:RulesSourceList'</a>,
--   <a>rulesSourceList_generatedRulesType</a> - Whether you want to allow
--   or deny access to the domains in your target list.
newRulesSourceList :: GeneratedRulesType -> RulesSourceList

-- | The domains that you want to inspect for in your traffic flows. To
--   provide multiple domains, separate them with commas. Valid domain
--   specifications are the following:
--   
--   <ul>
--   <li>Explicit names. For example, <tt>abc.example.com</tt> matches only
--   the domain <tt>abc.example.com</tt>.</li>
--   <li>Names that use a domain wildcard, which you indicate with an
--   initial '<tt>.</tt>'. For example,<tt>.example.com</tt> matches
--   <tt>example.com</tt> and matches all subdomains of
--   <tt>example.com</tt>, such as <tt>abc.example.com</tt> and
--   <tt>www.example.com</tt>.</li>
--   </ul>
rulesSourceList_targets :: Lens' RulesSourceList [Text]

-- | The protocols you want to inspect. Specify <tt>TLS_SNI</tt> for
--   <tt>HTTPS</tt>. Specify <tt>HTTP_HOST</tt> for <tt>HTTP</tt>. You can
--   specify either or both.
rulesSourceList_targetTypes :: Lens' RulesSourceList [TargetType]

-- | Whether you want to allow or deny access to the domains in your target
--   list.
rulesSourceList_generatedRulesType :: Lens' RulesSourceList GeneratedRulesType

-- | Configuration settings for the handling of the stateful rule groups in
--   a firewall policy.
--   
--   <i>See:</i> <a>newStatefulEngineOptions</a> smart constructor.
data StatefulEngineOptions
StatefulEngineOptions' :: Maybe RuleOrder -> StatefulEngineOptions

-- | Indicates how to manage the order of stateful rule evaluation for the
--   policy. By default, Network Firewall leaves the rule evaluation order
--   up to the Suricata rule processing engine. If you set this to
--   <tt>STRICT_ORDER</tt>, your rules are evaluated in the exact order
--   that you provide them in the policy. With strict ordering, the rule
--   groups are evaluated by order of priority, starting from the lowest
--   number, and the rules in each rule group are processed in the order
--   that they're defined.
[$sel:ruleOrder:StatefulEngineOptions'] :: StatefulEngineOptions -> Maybe RuleOrder

-- | Create a value of <a>StatefulEngineOptions</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:ruleOrder:StatefulEngineOptions'</a>,
--   <a>statefulEngineOptions_ruleOrder</a> - Indicates how to manage the
--   order of stateful rule evaluation for the policy. By default, Network
--   Firewall leaves the rule evaluation order up to the Suricata rule
--   processing engine. If you set this to <tt>STRICT_ORDER</tt>, your
--   rules are evaluated in the exact order that you provide them in the
--   policy. With strict ordering, the rule groups are evaluated by order
--   of priority, starting from the lowest number, and the rules in each
--   rule group are processed in the order that they're defined.
newStatefulEngineOptions :: StatefulEngineOptions

-- | Indicates how to manage the order of stateful rule evaluation for the
--   policy. By default, Network Firewall leaves the rule evaluation order
--   up to the Suricata rule processing engine. If you set this to
--   <tt>STRICT_ORDER</tt>, your rules are evaluated in the exact order
--   that you provide them in the policy. With strict ordering, the rule
--   groups are evaluated by order of priority, starting from the lowest
--   number, and the rules in each rule group are processed in the order
--   that they're defined.
statefulEngineOptions_ruleOrder :: Lens' StatefulEngineOptions (Maybe RuleOrder)

-- | A single Suricata rules specification, for use in a stateful rule
--   group. Use this option to specify a simple Suricata rule with
--   protocol, source and destination, ports, direction, and rule options.
--   For information about the Suricata <tt>Rules</tt> format, see <a>Rules
--   Format</a>.
--   
--   <i>See:</i> <a>newStatefulRule</a> smart constructor.
data StatefulRule
StatefulRule' :: StatefulAction -> Header -> [RuleOption] -> StatefulRule

-- | Defines what Network Firewall should do with the packets in a traffic
--   flow when the flow matches the stateful rule criteria. For all
--   actions, Network Firewall performs the specified action and
--   discontinues stateful inspection of the traffic flow.
--   
--   The actions for a stateful rule are defined as follows:
--   
--   <ul>
--   <li><b>PASS</b> - Permits the packets to go to the intended
--   destination.</li>
--   <li><b>DROP</b> - Blocks the packets from going to the intended
--   destination and sends an alert log message, if alert logging is
--   configured in the Firewall LoggingConfiguration.</li>
--   <li><b>ALERT</b> - Permits the packets to go to the intended
--   destination and sends an alert log message, if alert logging is
--   configured in the Firewall LoggingConfiguration.You can use this
--   action to test a rule that you intend to use to drop traffic. You can
--   enable the rule with <tt>ALERT</tt> action, verify in the logs that
--   the rule is filtering as you want, then change the action to
--   <tt>DROP</tt>.</li>
--   </ul>
[$sel:action:StatefulRule'] :: StatefulRule -> StatefulAction

-- | The stateful inspection criteria for this rule, used to inspect
--   traffic flows.
[$sel:header:StatefulRule'] :: StatefulRule -> Header

-- | Additional options for the rule. These are the Suricata
--   <tt>RuleOptions</tt> settings.
[$sel:ruleOptions:StatefulRule'] :: StatefulRule -> [RuleOption]

-- | Create a value of <a>StatefulRule</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:action:StatefulRule'</a>, <a>statefulRule_action</a> - Defines
--   what Network Firewall should do with the packets in a traffic flow
--   when the flow matches the stateful rule criteria. For all actions,
--   Network Firewall performs the specified action and discontinues
--   stateful inspection of the traffic flow.
--   
--   The actions for a stateful rule are defined as follows:
--   
--   <ul>
--   <li><b>PASS</b> - Permits the packets to go to the intended
--   destination.</li>
--   <li><b>DROP</b> - Blocks the packets from going to the intended
--   destination and sends an alert log message, if alert logging is
--   configured in the Firewall LoggingConfiguration.</li>
--   <li><b>ALERT</b> - Permits the packets to go to the intended
--   destination and sends an alert log message, if alert logging is
--   configured in the Firewall LoggingConfiguration.You can use this
--   action to test a rule that you intend to use to drop traffic. You can
--   enable the rule with <tt>ALERT</tt> action, verify in the logs that
--   the rule is filtering as you want, then change the action to
--   <tt>DROP</tt>.</li>
--   </ul>
--   
--   <a>$sel:header:StatefulRule'</a>, <a>statefulRule_header</a> - The
--   stateful inspection criteria for this rule, used to inspect traffic
--   flows.
--   
--   <a>$sel:ruleOptions:StatefulRule'</a>, <a>statefulRule_ruleOptions</a>
--   - Additional options for the rule. These are the Suricata
--   <tt>RuleOptions</tt> settings.
newStatefulRule :: StatefulAction -> Header -> StatefulRule

-- | Defines what Network Firewall should do with the packets in a traffic
--   flow when the flow matches the stateful rule criteria. For all
--   actions, Network Firewall performs the specified action and
--   discontinues stateful inspection of the traffic flow.
--   
--   The actions for a stateful rule are defined as follows:
--   
--   <ul>
--   <li><b>PASS</b> - Permits the packets to go to the intended
--   destination.</li>
--   <li><b>DROP</b> - Blocks the packets from going to the intended
--   destination and sends an alert log message, if alert logging is
--   configured in the Firewall LoggingConfiguration.</li>
--   <li><b>ALERT</b> - Permits the packets to go to the intended
--   destination and sends an alert log message, if alert logging is
--   configured in the Firewall LoggingConfiguration.You can use this
--   action to test a rule that you intend to use to drop traffic. You can
--   enable the rule with <tt>ALERT</tt> action, verify in the logs that
--   the rule is filtering as you want, then change the action to
--   <tt>DROP</tt>.</li>
--   </ul>
statefulRule_action :: Lens' StatefulRule StatefulAction

-- | The stateful inspection criteria for this rule, used to inspect
--   traffic flows.
statefulRule_header :: Lens' StatefulRule Header

-- | Additional options for the rule. These are the Suricata
--   <tt>RuleOptions</tt> settings.
statefulRule_ruleOptions :: Lens' StatefulRule [RuleOption]

-- | Identifier for a single stateful rule group, used in a firewall policy
--   to refer to a rule group.
--   
--   <i>See:</i> <a>newStatefulRuleGroupReference</a> smart constructor.
data StatefulRuleGroupReference
StatefulRuleGroupReference' :: Maybe Natural -> Text -> StatefulRuleGroupReference

-- | An integer setting that indicates the order in which to run the
--   stateful rule groups in a single FirewallPolicy. This setting only
--   applies to firewall policies that specify the <tt>STRICT_ORDER</tt>
--   rule order in the stateful engine options settings.
--   
--   Network Firewall evalutes each stateful rule group against a packet
--   starting with the group that has the lowest priority setting. You must
--   ensure that the priority settings are unique within each policy.
--   
--   You can change the priority settings of your rule groups at any time.
--   To make it easier to insert rule groups later, number them so there's
--   a wide range in between, for example use 100, 200, and so on.
[$sel:priority:StatefulRuleGroupReference'] :: StatefulRuleGroupReference -> Maybe Natural

-- | The Amazon Resource Name (ARN) of the stateful rule group.
[$sel:resourceArn:StatefulRuleGroupReference'] :: StatefulRuleGroupReference -> Text

-- | Create a value of <a>StatefulRuleGroupReference</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:priority:StatefulRuleGroupReference'</a>,
--   <a>statefulRuleGroupReference_priority</a> - An integer setting that
--   indicates the order in which to run the stateful rule groups in a
--   single FirewallPolicy. This setting only applies to firewall policies
--   that specify the <tt>STRICT_ORDER</tt> rule order in the stateful
--   engine options settings.
--   
--   Network Firewall evalutes each stateful rule group against a packet
--   starting with the group that has the lowest priority setting. You must
--   ensure that the priority settings are unique within each policy.
--   
--   You can change the priority settings of your rule groups at any time.
--   To make it easier to insert rule groups later, number them so there's
--   a wide range in between, for example use 100, 200, and so on.
--   
--   <a>$sel:resourceArn:StatefulRuleGroupReference'</a>,
--   <a>statefulRuleGroupReference_resourceArn</a> - The Amazon Resource
--   Name (ARN) of the stateful rule group.
newStatefulRuleGroupReference :: Text -> StatefulRuleGroupReference

-- | An integer setting that indicates the order in which to run the
--   stateful rule groups in a single FirewallPolicy. This setting only
--   applies to firewall policies that specify the <tt>STRICT_ORDER</tt>
--   rule order in the stateful engine options settings.
--   
--   Network Firewall evalutes each stateful rule group against a packet
--   starting with the group that has the lowest priority setting. You must
--   ensure that the priority settings are unique within each policy.
--   
--   You can change the priority settings of your rule groups at any time.
--   To make it easier to insert rule groups later, number them so there's
--   a wide range in between, for example use 100, 200, and so on.
statefulRuleGroupReference_priority :: Lens' StatefulRuleGroupReference (Maybe Natural)

-- | The Amazon Resource Name (ARN) of the stateful rule group.
statefulRuleGroupReference_resourceArn :: Lens' StatefulRuleGroupReference Text

-- | Additional options governing how Network Firewall handles the rule
--   group. You can only use these for stateful rule groups.
--   
--   <i>See:</i> <a>newStatefulRuleOptions</a> smart constructor.
data StatefulRuleOptions
StatefulRuleOptions' :: Maybe RuleOrder -> StatefulRuleOptions

-- | Indicates how to manage the order of the rule evaluation for the rule
--   group. By default, Network Firewall leaves the rule evaluation order
--   up to the Suricata rule processing engine. If you set this to
--   <tt>STRICT_ORDER</tt>, your rules are evaluated in the exact order
--   that they're listed in your Suricata rules string.
[$sel:ruleOrder:StatefulRuleOptions'] :: StatefulRuleOptions -> Maybe RuleOrder

-- | Create a value of <a>StatefulRuleOptions</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:ruleOrder:StatefulRuleOptions'</a>,
--   <a>statefulRuleOptions_ruleOrder</a> - Indicates how to manage the
--   order of the rule evaluation for the rule group. By default, Network
--   Firewall leaves the rule evaluation order up to the Suricata rule
--   processing engine. If you set this to <tt>STRICT_ORDER</tt>, your
--   rules are evaluated in the exact order that they're listed in your
--   Suricata rules string.
newStatefulRuleOptions :: StatefulRuleOptions

-- | Indicates how to manage the order of the rule evaluation for the rule
--   group. By default, Network Firewall leaves the rule evaluation order
--   up to the Suricata rule processing engine. If you set this to
--   <tt>STRICT_ORDER</tt>, your rules are evaluated in the exact order
--   that they're listed in your Suricata rules string.
statefulRuleOptions_ruleOrder :: Lens' StatefulRuleOptions (Maybe RuleOrder)

-- | A single stateless rule. This is used in
--   StatelessRulesAndCustomActions.
--   
--   <i>See:</i> <a>newStatelessRule</a> smart constructor.
data StatelessRule
StatelessRule' :: RuleDefinition -> Natural -> StatelessRule

-- | Defines the stateless 5-tuple packet inspection criteria and the
--   action to take on a packet that matches the criteria.
[$sel:ruleDefinition:StatelessRule'] :: StatelessRule -> RuleDefinition

-- | Indicates the order in which to run this rule relative to all of the
--   rules that are defined for a stateless rule group. Network Firewall
--   evaluates the rules in a rule group starting with the lowest priority
--   setting. You must ensure that the priority settings are unique for the
--   rule group.
--   
--   Each stateless rule group uses exactly one
--   <tt>StatelessRulesAndCustomActions</tt> object, and each
--   <tt>StatelessRulesAndCustomActions</tt> contains exactly one
--   <tt>StatelessRules</tt> object. To ensure unique priority settings for
--   your rule groups, set unique priorities for the stateless rules that
--   you define inside any single <tt>StatelessRules</tt> object.
--   
--   You can change the priority settings of your rules at any time. To
--   make it easier to insert rules later, number them so there's a wide
--   range in between, for example use 100, 200, and so on.
[$sel:priority:StatelessRule'] :: StatelessRule -> Natural

-- | Create a value of <a>StatelessRule</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:ruleDefinition:StatelessRule'</a>,
--   <a>statelessRule_ruleDefinition</a> - Defines the stateless 5-tuple
--   packet inspection criteria and the action to take on a packet that
--   matches the criteria.
--   
--   <a>$sel:priority:StatelessRule'</a>, <a>statelessRule_priority</a> -
--   Indicates the order in which to run this rule relative to all of the
--   rules that are defined for a stateless rule group. Network Firewall
--   evaluates the rules in a rule group starting with the lowest priority
--   setting. You must ensure that the priority settings are unique for the
--   rule group.
--   
--   Each stateless rule group uses exactly one
--   <tt>StatelessRulesAndCustomActions</tt> object, and each
--   <tt>StatelessRulesAndCustomActions</tt> contains exactly one
--   <tt>StatelessRules</tt> object. To ensure unique priority settings for
--   your rule groups, set unique priorities for the stateless rules that
--   you define inside any single <tt>StatelessRules</tt> object.
--   
--   You can change the priority settings of your rules at any time. To
--   make it easier to insert rules later, number them so there's a wide
--   range in between, for example use 100, 200, and so on.
newStatelessRule :: RuleDefinition -> Natural -> StatelessRule

-- | Defines the stateless 5-tuple packet inspection criteria and the
--   action to take on a packet that matches the criteria.
statelessRule_ruleDefinition :: Lens' StatelessRule RuleDefinition

-- | Indicates the order in which to run this rule relative to all of the
--   rules that are defined for a stateless rule group. Network Firewall
--   evaluates the rules in a rule group starting with the lowest priority
--   setting. You must ensure that the priority settings are unique for the
--   rule group.
--   
--   Each stateless rule group uses exactly one
--   <tt>StatelessRulesAndCustomActions</tt> object, and each
--   <tt>StatelessRulesAndCustomActions</tt> contains exactly one
--   <tt>StatelessRules</tt> object. To ensure unique priority settings for
--   your rule groups, set unique priorities for the stateless rules that
--   you define inside any single <tt>StatelessRules</tt> object.
--   
--   You can change the priority settings of your rules at any time. To
--   make it easier to insert rules later, number them so there's a wide
--   range in between, for example use 100, 200, and so on.
statelessRule_priority :: Lens' StatelessRule Natural

-- | Identifier for a single stateless rule group, used in a firewall
--   policy to refer to the rule group.
--   
--   <i>See:</i> <a>newStatelessRuleGroupReference</a> smart constructor.
data StatelessRuleGroupReference
StatelessRuleGroupReference' :: Text -> Natural -> StatelessRuleGroupReference

-- | The Amazon Resource Name (ARN) of the stateless rule group.
[$sel:resourceArn:StatelessRuleGroupReference'] :: StatelessRuleGroupReference -> Text

-- | An integer setting that indicates the order in which to run the
--   stateless rule groups in a single FirewallPolicy. Network Firewall
--   applies each stateless rule group to a packet starting with the group
--   that has the lowest priority setting. You must ensure that the
--   priority settings are unique within each policy.
[$sel:priority:StatelessRuleGroupReference'] :: StatelessRuleGroupReference -> Natural

-- | Create a value of <a>StatelessRuleGroupReference</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:StatelessRuleGroupReference'</a>,
--   <a>statelessRuleGroupReference_resourceArn</a> - The Amazon Resource
--   Name (ARN) of the stateless rule group.
--   
--   <a>$sel:priority:StatelessRuleGroupReference'</a>,
--   <a>statelessRuleGroupReference_priority</a> - An integer setting that
--   indicates the order in which to run the stateless rule groups in a
--   single FirewallPolicy. Network Firewall applies each stateless rule
--   group to a packet starting with the group that has the lowest priority
--   setting. You must ensure that the priority settings are unique within
--   each policy.
newStatelessRuleGroupReference :: Text -> Natural -> StatelessRuleGroupReference

-- | The Amazon Resource Name (ARN) of the stateless rule group.
statelessRuleGroupReference_resourceArn :: Lens' StatelessRuleGroupReference Text

-- | An integer setting that indicates the order in which to run the
--   stateless rule groups in a single FirewallPolicy. Network Firewall
--   applies each stateless rule group to a packet starting with the group
--   that has the lowest priority setting. You must ensure that the
--   priority settings are unique within each policy.
statelessRuleGroupReference_priority :: Lens' StatelessRuleGroupReference Natural

-- | Stateless inspection criteria. Each stateless rule group uses exactly
--   one of these data types to define its stateless rules.
--   
--   <i>See:</i> <a>newStatelessRulesAndCustomActions</a> smart
--   constructor.
data StatelessRulesAndCustomActions
StatelessRulesAndCustomActions' :: Maybe [CustomAction] -> [StatelessRule] -> StatelessRulesAndCustomActions

-- | Defines an array of individual custom action definitions that are
--   available for use by the stateless rules in this
--   <tt>StatelessRulesAndCustomActions</tt> specification. You name each
--   custom action that you define, and then you can use it by name in your
--   StatelessRule RuleDefinition <tt>Actions</tt> specification.
[$sel:customActions:StatelessRulesAndCustomActions'] :: StatelessRulesAndCustomActions -> Maybe [CustomAction]

-- | Defines the set of stateless rules for use in a stateless rule group.
[$sel:statelessRules:StatelessRulesAndCustomActions'] :: StatelessRulesAndCustomActions -> [StatelessRule]

-- | Create a value of <a>StatelessRulesAndCustomActions</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:customActions:StatelessRulesAndCustomActions'</a>,
--   <a>statelessRulesAndCustomActions_customActions</a> - Defines an array
--   of individual custom action definitions that are available for use by
--   the stateless rules in this <tt>StatelessRulesAndCustomActions</tt>
--   specification. You name each custom action that you define, and then
--   you can use it by name in your StatelessRule RuleDefinition
--   <tt>Actions</tt> specification.
--   
--   <a>$sel:statelessRules:StatelessRulesAndCustomActions'</a>,
--   <a>statelessRulesAndCustomActions_statelessRules</a> - Defines the set
--   of stateless rules for use in a stateless rule group.
newStatelessRulesAndCustomActions :: StatelessRulesAndCustomActions

-- | Defines an array of individual custom action definitions that are
--   available for use by the stateless rules in this
--   <tt>StatelessRulesAndCustomActions</tt> specification. You name each
--   custom action that you define, and then you can use it by name in your
--   StatelessRule RuleDefinition <tt>Actions</tt> specification.
statelessRulesAndCustomActions_customActions :: Lens' StatelessRulesAndCustomActions (Maybe [CustomAction])

-- | Defines the set of stateless rules for use in a stateless rule group.
statelessRulesAndCustomActions_statelessRules :: Lens' StatelessRulesAndCustomActions [StatelessRule]

-- | The ID for a subnet that you want to associate with the firewall. This
--   is used with CreateFirewall and AssociateSubnets. AWS Network Firewall
--   creates an instance of the associated firewall in each subnet that you
--   specify, to filter traffic in the subnet's Availability Zone.
--   
--   <i>See:</i> <a>newSubnetMapping</a> smart constructor.
data SubnetMapping
SubnetMapping' :: Text -> SubnetMapping

-- | The unique identifier for the subnet.
[$sel:subnetId:SubnetMapping'] :: SubnetMapping -> Text

-- | Create a value of <a>SubnetMapping</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:subnetId:SubnetMapping'</a>, <a>subnetMapping_subnetId</a> -
--   The unique identifier for the subnet.
newSubnetMapping :: Text -> SubnetMapping

-- | The unique identifier for the subnet.
subnetMapping_subnetId :: Lens' SubnetMapping Text

-- | The status of the firewall endpoint and firewall policy configuration
--   for a single VPC subnet.
--   
--   For each VPC subnet that you associate with a firewall, AWS Network
--   Firewall does the following:
--   
--   <ul>
--   <li>Instantiates a firewall endpoint in the subnet, ready to take
--   traffic.</li>
--   <li>Configures the endpoint with the current firewall policy settings,
--   to provide the filtering behavior for the endpoint.</li>
--   </ul>
--   
--   When you update a firewall, for example to add a subnet association or
--   change a rule group in the firewall policy, the affected sync states
--   reflect out-of-sync or not ready status until the changes are
--   complete.
--   
--   <i>See:</i> <a>newSyncState</a> smart constructor.
data SyncState
SyncState' :: Maybe (HashMap Text PerObjectStatus) -> Maybe Attachment -> SyncState

-- | The configuration status of the firewall endpoint in a single VPC
--   subnet. Network Firewall provides each endpoint with the rules that
--   are configured in the firewall policy. Each time you add a subnet or
--   modify the associated firewall policy, Network Firewall synchronizes
--   the rules in the endpoint, so it can properly filter network traffic.
--   This is part of the FirewallStatus.
[$sel:config:SyncState'] :: SyncState -> Maybe (HashMap Text PerObjectStatus)

-- | The attachment status of the firewall's association with a single VPC
--   subnet. For each configured subnet, Network Firewall creates the
--   attachment by instantiating the firewall endpoint in the subnet so
--   that it's ready to take traffic. This is part of the FirewallStatus.
[$sel:attachment:SyncState'] :: SyncState -> Maybe Attachment

-- | Create a value of <a>SyncState</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:config:SyncState'</a>, <a>syncState_config</a> - The
--   configuration status of the firewall endpoint in a single VPC subnet.
--   Network Firewall provides each endpoint with the rules that are
--   configured in the firewall policy. Each time you add a subnet or
--   modify the associated firewall policy, Network Firewall synchronizes
--   the rules in the endpoint, so it can properly filter network traffic.
--   This is part of the FirewallStatus.
--   
--   <a>$sel:attachment:SyncState'</a>, <a>syncState_attachment</a> - The
--   attachment status of the firewall's association with a single VPC
--   subnet. For each configured subnet, Network Firewall creates the
--   attachment by instantiating the firewall endpoint in the subnet so
--   that it's ready to take traffic. This is part of the FirewallStatus.
newSyncState :: SyncState

-- | The configuration status of the firewall endpoint in a single VPC
--   subnet. Network Firewall provides each endpoint with the rules that
--   are configured in the firewall policy. Each time you add a subnet or
--   modify the associated firewall policy, Network Firewall synchronizes
--   the rules in the endpoint, so it can properly filter network traffic.
--   This is part of the FirewallStatus.
syncState_config :: Lens' SyncState (Maybe (HashMap Text PerObjectStatus))

-- | The attachment status of the firewall's association with a single VPC
--   subnet. For each configured subnet, Network Firewall creates the
--   attachment by instantiating the firewall endpoint in the subnet so
--   that it's ready to take traffic. This is part of the FirewallStatus.
syncState_attachment :: Lens' SyncState (Maybe Attachment)

-- | TCP flags and masks to inspect packets for, used in stateless rules
--   MatchAttributes settings.
--   
--   <i>See:</i> <a>newTCPFlagField</a> smart constructor.
data TCPFlagField
TCPFlagField' :: Maybe [TCPFlag] -> [TCPFlag] -> TCPFlagField

-- | The set of flags to consider in the inspection. To inspect all flags
--   in the valid values list, leave this with no setting.
[$sel:masks:TCPFlagField'] :: TCPFlagField -> Maybe [TCPFlag]

-- | Used in conjunction with the <tt>Masks</tt> setting to define the
--   flags that must be set and flags that must not be set in order for the
--   packet to match. This setting can only specify values that are also
--   specified in the <tt>Masks</tt> setting.
--   
--   For the flags that are specified in the masks setting, the following
--   must be true for the packet to match:
--   
--   <ul>
--   <li>The ones that are set in this flags setting must be set in the
--   packet.</li>
--   <li>The ones that are not set in this flags setting must also not be
--   set in the packet.</li>
--   </ul>
[$sel:flags:TCPFlagField'] :: TCPFlagField -> [TCPFlag]

-- | Create a value of <a>TCPFlagField</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:masks:TCPFlagField'</a>, <a>tCPFlagField_masks</a> - The set
--   of flags to consider in the inspection. To inspect all flags in the
--   valid values list, leave this with no setting.
--   
--   <a>$sel:flags:TCPFlagField'</a>, <a>tCPFlagField_flags</a> - Used in
--   conjunction with the <tt>Masks</tt> setting to define the flags that
--   must be set and flags that must not be set in order for the packet to
--   match. This setting can only specify values that are also specified in
--   the <tt>Masks</tt> setting.
--   
--   For the flags that are specified in the masks setting, the following
--   must be true for the packet to match:
--   
--   <ul>
--   <li>The ones that are set in this flags setting must be set in the
--   packet.</li>
--   <li>The ones that are not set in this flags setting must also not be
--   set in the packet.</li>
--   </ul>
newTCPFlagField :: TCPFlagField

-- | The set of flags to consider in the inspection. To inspect all flags
--   in the valid values list, leave this with no setting.
tCPFlagField_masks :: Lens' TCPFlagField (Maybe [TCPFlag])

-- | Used in conjunction with the <tt>Masks</tt> setting to define the
--   flags that must be set and flags that must not be set in order for the
--   packet to match. This setting can only specify values that are also
--   specified in the <tt>Masks</tt> setting.
--   
--   For the flags that are specified in the masks setting, the following
--   must be true for the packet to match:
--   
--   <ul>
--   <li>The ones that are set in this flags setting must be set in the
--   packet.</li>
--   <li>The ones that are not set in this flags setting must also not be
--   set in the packet.</li>
--   </ul>
tCPFlagField_flags :: Lens' TCPFlagField [TCPFlag]

-- | A key:value pair associated with an AWS resource. The key:value pair
--   can be anything you define. Typically, the tag key represents a
--   category (such as "environment") and the tag value represents a
--   specific value within that category (such as "test," "development," or
--   "production"). You can add up to 50 tags to each AWS resource.
--   
--   <i>See:</i> <a>newTag</a> smart constructor.
data Tag
Tag' :: Text -> Text -> Tag

-- | The part of the key:value pair that defines a tag. You can use a tag
--   key to describe a category of information, such as "customer." Tag
--   keys are case-sensitive.
[$sel:key:Tag'] :: Tag -> Text

-- | The part of the key:value pair that defines a tag. You can use a tag
--   value to describe a specific value within a category, such as
--   "companyA" or "companyB." Tag values are case-sensitive.
[$sel:value:Tag'] :: Tag -> Text

-- | Create a value of <a>Tag</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:key:Tag'</a>, <a>tag_key</a> - The part of the key:value pair
--   that defines a tag. You can use a tag key to describe a category of
--   information, such as "customer." Tag keys are case-sensitive.
--   
--   <a>$sel:value:Tag'</a>, <a>tag_value</a> - The part of the key:value
--   pair that defines a tag. You can use a tag value to describe a
--   specific value within a category, such as "companyA" or "companyB."
--   Tag values are case-sensitive.
newTag :: Text -> Text -> Tag

-- | The part of the key:value pair that defines a tag. You can use a tag
--   key to describe a category of information, such as "customer." Tag
--   keys are case-sensitive.
tag_key :: Lens' Tag Text

-- | The part of the key:value pair that defines a tag. You can use a tag
--   value to describe a specific value within a category, such as
--   "companyA" or "companyB." Tag values are case-sensitive.
tag_value :: Lens' Tag Text


-- | Adds the specified tags to the specified resource. Tags are key:value
--   pairs that you can use to categorize and manage your resources, for
--   purposes like billing. For example, you might set the tag key to
--   "customer" and the value to the customer name or ID. You can specify
--   one or more tags to add to each AWS resource, up to 50 tags for a
--   resource.
--   
--   You can tag the AWS resources that you manage through AWS Network
--   Firewall: firewalls, firewall policies, and rule groups.
module Amazonka.NetworkFirewall.TagResource

-- | <i>See:</i> <a>newTagResource</a> smart constructor.
data TagResource
TagResource' :: Text -> NonEmpty Tag -> TagResource

-- | The Amazon Resource Name (ARN) of the resource.
[$sel:resourceArn:TagResource'] :: TagResource -> Text
[$sel:tags:TagResource'] :: TagResource -> NonEmpty Tag

-- | Create a value of <a>TagResource</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:TagResource'</a>, <a>tagResource_resourceArn</a> -
--   The Amazon Resource Name (ARN) of the resource.
--   
--   <a>$sel:tags:TagResource'</a>, <a>tagResource_tags</a> -
newTagResource :: Text -> NonEmpty Tag -> TagResource

-- | The Amazon Resource Name (ARN) of the resource.
tagResource_resourceArn :: Lens' TagResource Text

tagResource_tags :: Lens' TagResource (NonEmpty Tag)

-- | <i>See:</i> <a>newTagResourceResponse</a> smart constructor.
data TagResourceResponse
TagResourceResponse' :: Int -> TagResourceResponse

-- | The response's http status code.
[$sel:httpStatus:TagResourceResponse'] :: TagResourceResponse -> Int

-- | Create a value of <a>TagResourceResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:TagResourceResponse'</a>,
--   <a>tagResourceResponse_httpStatus</a> - The response's http status
--   code.
newTagResourceResponse :: Int -> TagResourceResponse

-- | The response's http status code.
tagResourceResponse_httpStatus :: Lens' TagResourceResponse Int
instance GHC.Generics.Generic Amazonka.NetworkFirewall.TagResource.TagResource
instance GHC.Show.Show Amazonka.NetworkFirewall.TagResource.TagResource
instance GHC.Read.Read Amazonka.NetworkFirewall.TagResource.TagResource
instance GHC.Classes.Eq Amazonka.NetworkFirewall.TagResource.TagResource
instance GHC.Generics.Generic Amazonka.NetworkFirewall.TagResource.TagResourceResponse
instance GHC.Show.Show Amazonka.NetworkFirewall.TagResource.TagResourceResponse
instance GHC.Read.Read Amazonka.NetworkFirewall.TagResource.TagResourceResponse
instance GHC.Classes.Eq Amazonka.NetworkFirewall.TagResource.TagResourceResponse
instance Amazonka.Types.AWSRequest Amazonka.NetworkFirewall.TagResource.TagResource
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.TagResource.TagResourceResponse
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.TagResource.TagResource
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.TagResource.TagResource
instance Amazonka.Data.Headers.ToHeaders Amazonka.NetworkFirewall.TagResource.TagResource
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.TagResource.TagResource
instance Amazonka.Data.Path.ToPath Amazonka.NetworkFirewall.TagResource.TagResource
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.TagResource.TagResource


-- | Creates or updates an AWS Identity and Access Management policy for
--   your rule group or firewall policy. Use this to share rule groups and
--   firewall policies between accounts. This operation works in
--   conjunction with the AWS Resource Access Manager (RAM) service to
--   manage resource sharing for Network Firewall.
--   
--   Use this operation to create or update a resource policy for your rule
--   group or firewall policy. In the policy, you specify the accounts that
--   you want to share the resource with and the operations that you want
--   the accounts to be able to perform.
--   
--   When you add an account in the resource policy, you then run the
--   following Resource Access Manager (RAM) operations to access and
--   accept the shared rule group or firewall policy.
--   
--   <ul>
--   <li><a>GetResourceShareInvitations</a></li>
--   <li>Returns the Amazon Resource Names (ARNs) of the resource share
--   invitations.</li>
--   <li><a>AcceptResourceShareInvitation</a></li>
--   <li>Accepts the share invitation for a specified resource share.</li>
--   </ul>
--   
--   For additional information about resource sharing using RAM, see
--   <a>AWS Resource Access Manager User Guide</a>.
module Amazonka.NetworkFirewall.PutResourcePolicy

-- | <i>See:</i> <a>newPutResourcePolicy</a> smart constructor.
data PutResourcePolicy
PutResourcePolicy' :: Text -> Text -> PutResourcePolicy

-- | The Amazon Resource Name (ARN) of the account that you want to share
--   rule groups and firewall policies with.
[$sel:resourceArn:PutResourcePolicy'] :: PutResourcePolicy -> Text

-- | The AWS Identity and Access Management policy statement that lists the
--   accounts that you want to share your rule group or firewall policy
--   with and the operations that you want the accounts to be able to
--   perform.
--   
--   For a rule group resource, you can specify the following operations in
--   the Actions section of the statement:
--   
--   <ul>
--   <li>network-firewall:CreateFirewallPolicy</li>
--   <li>network-firewall:UpdateFirewallPolicy</li>
--   <li>network-firewall:ListRuleGroups</li>
--   </ul>
--   
--   For a firewall policy resource, you can specify the following
--   operations in the Actions section of the statement:
--   
--   <ul>
--   <li>network-firewall:CreateFirewall</li>
--   <li>network-firewall:UpdateFirewall</li>
--   <li>network-firewall:AssociateFirewallPolicy</li>
--   <li>network-firewall:ListFirewallPolicies</li>
--   </ul>
--   
--   In the Resource section of the statement, you specify the ARNs for the
--   rule groups and firewall policies that you want to share with the
--   account that you specified in <tt>Arn</tt>.
[$sel:policy:PutResourcePolicy'] :: PutResourcePolicy -> Text

-- | Create a value of <a>PutResourcePolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:PutResourcePolicy'</a>,
--   <a>putResourcePolicy_resourceArn</a> - The Amazon Resource Name (ARN)
--   of the account that you want to share rule groups and firewall
--   policies with.
--   
--   <a>$sel:policy:PutResourcePolicy'</a>, <a>putResourcePolicy_policy</a>
--   - The AWS Identity and Access Management policy statement that lists
--   the accounts that you want to share your rule group or firewall policy
--   with and the operations that you want the accounts to be able to
--   perform.
--   
--   For a rule group resource, you can specify the following operations in
--   the Actions section of the statement:
--   
--   <ul>
--   <li>network-firewall:CreateFirewallPolicy</li>
--   <li>network-firewall:UpdateFirewallPolicy</li>
--   <li>network-firewall:ListRuleGroups</li>
--   </ul>
--   
--   For a firewall policy resource, you can specify the following
--   operations in the Actions section of the statement:
--   
--   <ul>
--   <li>network-firewall:CreateFirewall</li>
--   <li>network-firewall:UpdateFirewall</li>
--   <li>network-firewall:AssociateFirewallPolicy</li>
--   <li>network-firewall:ListFirewallPolicies</li>
--   </ul>
--   
--   In the Resource section of the statement, you specify the ARNs for the
--   rule groups and firewall policies that you want to share with the
--   account that you specified in <tt>Arn</tt>.
newPutResourcePolicy :: Text -> Text -> PutResourcePolicy

-- | The Amazon Resource Name (ARN) of the account that you want to share
--   rule groups and firewall policies with.
putResourcePolicy_resourceArn :: Lens' PutResourcePolicy Text

-- | The AWS Identity and Access Management policy statement that lists the
--   accounts that you want to share your rule group or firewall policy
--   with and the operations that you want the accounts to be able to
--   perform.
--   
--   For a rule group resource, you can specify the following operations in
--   the Actions section of the statement:
--   
--   <ul>
--   <li>network-firewall:CreateFirewallPolicy</li>
--   <li>network-firewall:UpdateFirewallPolicy</li>
--   <li>network-firewall:ListRuleGroups</li>
--   </ul>
--   
--   For a firewall policy resource, you can specify the following
--   operations in the Actions section of the statement:
--   
--   <ul>
--   <li>network-firewall:CreateFirewall</li>
--   <li>network-firewall:UpdateFirewall</li>
--   <li>network-firewall:AssociateFirewallPolicy</li>
--   <li>network-firewall:ListFirewallPolicies</li>
--   </ul>
--   
--   In the Resource section of the statement, you specify the ARNs for the
--   rule groups and firewall policies that you want to share with the
--   account that you specified in <tt>Arn</tt>.
putResourcePolicy_policy :: Lens' PutResourcePolicy Text

-- | <i>See:</i> <a>newPutResourcePolicyResponse</a> smart constructor.
data PutResourcePolicyResponse
PutResourcePolicyResponse' :: Int -> PutResourcePolicyResponse

-- | The response's http status code.
[$sel:httpStatus:PutResourcePolicyResponse'] :: PutResourcePolicyResponse -> Int

-- | Create a value of <a>PutResourcePolicyResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:PutResourcePolicyResponse'</a>,
--   <a>putResourcePolicyResponse_httpStatus</a> - The response's http
--   status code.
newPutResourcePolicyResponse :: Int -> PutResourcePolicyResponse

-- | The response's http status code.
putResourcePolicyResponse_httpStatus :: Lens' PutResourcePolicyResponse Int
instance GHC.Generics.Generic Amazonka.NetworkFirewall.PutResourcePolicy.PutResourcePolicy
instance GHC.Show.Show Amazonka.NetworkFirewall.PutResourcePolicy.PutResourcePolicy
instance GHC.Read.Read Amazonka.NetworkFirewall.PutResourcePolicy.PutResourcePolicy
instance GHC.Classes.Eq Amazonka.NetworkFirewall.PutResourcePolicy.PutResourcePolicy
instance GHC.Generics.Generic Amazonka.NetworkFirewall.PutResourcePolicy.PutResourcePolicyResponse
instance GHC.Show.Show Amazonka.NetworkFirewall.PutResourcePolicy.PutResourcePolicyResponse
instance GHC.Read.Read Amazonka.NetworkFirewall.PutResourcePolicy.PutResourcePolicyResponse
instance GHC.Classes.Eq Amazonka.NetworkFirewall.PutResourcePolicy.PutResourcePolicyResponse
instance Amazonka.Types.AWSRequest Amazonka.NetworkFirewall.PutResourcePolicy.PutResourcePolicy
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.PutResourcePolicy.PutResourcePolicyResponse
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.PutResourcePolicy.PutResourcePolicy
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.PutResourcePolicy.PutResourcePolicy
instance Amazonka.Data.Headers.ToHeaders Amazonka.NetworkFirewall.PutResourcePolicy.PutResourcePolicy
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.PutResourcePolicy.PutResourcePolicy
instance Amazonka.Data.Path.ToPath Amazonka.NetworkFirewall.PutResourcePolicy.PutResourcePolicy
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.PutResourcePolicy.PutResourcePolicy


-- | Retrieves the tags associated with the specified resource. Tags are
--   key:value pairs that you can use to categorize and manage your
--   resources, for purposes like billing. For example, you might set the
--   tag key to "customer" and the value to the customer name or ID. You
--   can specify one or more tags to add to each AWS resource, up to 50
--   tags for a resource.
--   
--   You can tag the AWS resources that you manage through AWS Network
--   Firewall: firewalls, firewall policies, and rule groups.
--   
--   This operation returns paginated results.
module Amazonka.NetworkFirewall.ListTagsForResource

-- | <i>See:</i> <a>newListTagsForResource</a> smart constructor.
data ListTagsForResource
ListTagsForResource' :: Maybe Text -> Maybe Natural -> Text -> ListTagsForResource

-- | When you request a list of objects with a <tt>MaxResults</tt> setting,
--   if the number of objects that are still available for retrieval
--   exceeds the maximum you requested, Network Firewall returns a
--   <tt>NextToken</tt> value in the response. To retrieve the next batch
--   of objects, use the token returned from the prior request in your next
--   request.
[$sel:nextToken:ListTagsForResource'] :: ListTagsForResource -> Maybe Text

-- | The maximum number of objects that you want Network Firewall to return
--   for this request. If more objects are available, in the response,
--   Network Firewall provides a <tt>NextToken</tt> value that you can use
--   in a subsequent call to get the next batch of objects.
[$sel:maxResults:ListTagsForResource'] :: ListTagsForResource -> Maybe Natural

-- | The Amazon Resource Name (ARN) of the resource.
[$sel:resourceArn:ListTagsForResource'] :: ListTagsForResource -> Text

-- | Create a value of <a>ListTagsForResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListTagsForResource'</a>,
--   <a>listTagsForResource_nextToken</a> - When you request a list of
--   objects with a <tt>MaxResults</tt> setting, if the number of objects
--   that are still available for retrieval exceeds the maximum you
--   requested, Network Firewall returns a <tt>NextToken</tt> value in the
--   response. To retrieve the next batch of objects, use the token
--   returned from the prior request in your next request.
--   
--   <a>$sel:maxResults:ListTagsForResource'</a>,
--   <a>listTagsForResource_maxResults</a> - The maximum number of objects
--   that you want Network Firewall to return for this request. If more
--   objects are available, in the response, Network Firewall provides a
--   <tt>NextToken</tt> value that you can use in a subsequent call to get
--   the next batch of objects.
--   
--   <a>$sel:resourceArn:ListTagsForResource'</a>,
--   <a>listTagsForResource_resourceArn</a> - The Amazon Resource Name
--   (ARN) of the resource.
newListTagsForResource :: Text -> ListTagsForResource

-- | When you request a list of objects with a <tt>MaxResults</tt> setting,
--   if the number of objects that are still available for retrieval
--   exceeds the maximum you requested, Network Firewall returns a
--   <tt>NextToken</tt> value in the response. To retrieve the next batch
--   of objects, use the token returned from the prior request in your next
--   request.
listTagsForResource_nextToken :: Lens' ListTagsForResource (Maybe Text)

-- | The maximum number of objects that you want Network Firewall to return
--   for this request. If more objects are available, in the response,
--   Network Firewall provides a <tt>NextToken</tt> value that you can use
--   in a subsequent call to get the next batch of objects.
listTagsForResource_maxResults :: Lens' ListTagsForResource (Maybe Natural)

-- | The Amazon Resource Name (ARN) of the resource.
listTagsForResource_resourceArn :: Lens' ListTagsForResource Text

-- | <i>See:</i> <a>newListTagsForResourceResponse</a> smart constructor.
data ListTagsForResourceResponse
ListTagsForResourceResponse' :: Maybe Text -> Maybe (NonEmpty Tag) -> Int -> ListTagsForResourceResponse

-- | When you request a list of objects with a <tt>MaxResults</tt> setting,
--   if the number of objects that are still available for retrieval
--   exceeds the maximum you requested, Network Firewall returns a
--   <tt>NextToken</tt> value in the response. To retrieve the next batch
--   of objects, use the token returned from the prior request in your next
--   request.
[$sel:nextToken:ListTagsForResourceResponse'] :: ListTagsForResourceResponse -> Maybe Text

-- | The tags that are associated with the resource.
[$sel:tags:ListTagsForResourceResponse'] :: ListTagsForResourceResponse -> Maybe (NonEmpty Tag)

-- | The response's http status code.
[$sel:httpStatus:ListTagsForResourceResponse'] :: ListTagsForResourceResponse -> Int

-- | Create a value of <a>ListTagsForResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListTagsForResource'</a>,
--   <a>listTagsForResourceResponse_nextToken</a> - When you request a list
--   of objects with a <tt>MaxResults</tt> setting, if the number of
--   objects that are still available for retrieval exceeds the maximum you
--   requested, Network Firewall returns a <tt>NextToken</tt> value in the
--   response. To retrieve the next batch of objects, use the token
--   returned from the prior request in your next request.
--   
--   <a>$sel:tags:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_tags</a> - The tags that are associated
--   with the resource.
--   
--   <a>$sel:httpStatus:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_httpStatus</a> - The response's http
--   status code.
newListTagsForResourceResponse :: Int -> ListTagsForResourceResponse

-- | When you request a list of objects with a <tt>MaxResults</tt> setting,
--   if the number of objects that are still available for retrieval
--   exceeds the maximum you requested, Network Firewall returns a
--   <tt>NextToken</tt> value in the response. To retrieve the next batch
--   of objects, use the token returned from the prior request in your next
--   request.
listTagsForResourceResponse_nextToken :: Lens' ListTagsForResourceResponse (Maybe Text)

-- | The tags that are associated with the resource.
listTagsForResourceResponse_tags :: Lens' ListTagsForResourceResponse (Maybe (NonEmpty Tag))

-- | The response's http status code.
listTagsForResourceResponse_httpStatus :: Lens' ListTagsForResourceResponse Int
instance GHC.Generics.Generic Amazonka.NetworkFirewall.ListTagsForResource.ListTagsForResource
instance GHC.Show.Show Amazonka.NetworkFirewall.ListTagsForResource.ListTagsForResource
instance GHC.Read.Read Amazonka.NetworkFirewall.ListTagsForResource.ListTagsForResource
instance GHC.Classes.Eq Amazonka.NetworkFirewall.ListTagsForResource.ListTagsForResource
instance GHC.Generics.Generic Amazonka.NetworkFirewall.ListTagsForResource.ListTagsForResourceResponse
instance GHC.Show.Show Amazonka.NetworkFirewall.ListTagsForResource.ListTagsForResourceResponse
instance GHC.Read.Read Amazonka.NetworkFirewall.ListTagsForResource.ListTagsForResourceResponse
instance GHC.Classes.Eq Amazonka.NetworkFirewall.ListTagsForResource.ListTagsForResourceResponse
instance Amazonka.Types.AWSRequest Amazonka.NetworkFirewall.ListTagsForResource.ListTagsForResource
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.ListTagsForResource.ListTagsForResourceResponse
instance Amazonka.Pager.AWSPager Amazonka.NetworkFirewall.ListTagsForResource.ListTagsForResource
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.ListTagsForResource.ListTagsForResource
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.ListTagsForResource.ListTagsForResource
instance Amazonka.Data.Headers.ToHeaders Amazonka.NetworkFirewall.ListTagsForResource.ListTagsForResource
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.ListTagsForResource.ListTagsForResource
instance Amazonka.Data.Path.ToPath Amazonka.NetworkFirewall.ListTagsForResource.ListTagsForResource
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.ListTagsForResource.ListTagsForResource


-- | Retrieves the metadata for the rule groups that you have defined.
--   Depending on your setting for max results and the number of rule
--   groups, a single call might not return the full list.
--   
--   This operation returns paginated results.
module Amazonka.NetworkFirewall.ListRuleGroups

-- | <i>See:</i> <a>newListRuleGroups</a> smart constructor.
data ListRuleGroups
ListRuleGroups' :: Maybe Text -> Maybe Natural -> ListRuleGroups

-- | When you request a list of objects with a <tt>MaxResults</tt> setting,
--   if the number of objects that are still available for retrieval
--   exceeds the maximum you requested, Network Firewall returns a
--   <tt>NextToken</tt> value in the response. To retrieve the next batch
--   of objects, use the token returned from the prior request in your next
--   request.
[$sel:nextToken:ListRuleGroups'] :: ListRuleGroups -> Maybe Text

-- | The maximum number of objects that you want Network Firewall to return
--   for this request. If more objects are available, in the response,
--   Network Firewall provides a <tt>NextToken</tt> value that you can use
--   in a subsequent call to get the next batch of objects.
[$sel:maxResults:ListRuleGroups'] :: ListRuleGroups -> Maybe Natural

-- | Create a value of <a>ListRuleGroups</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListRuleGroups'</a>, <a>listRuleGroups_nextToken</a>
--   - When you request a list of objects with a <tt>MaxResults</tt>
--   setting, if the number of objects that are still available for
--   retrieval exceeds the maximum you requested, Network Firewall returns
--   a <tt>NextToken</tt> value in the response. To retrieve the next batch
--   of objects, use the token returned from the prior request in your next
--   request.
--   
--   <a>$sel:maxResults:ListRuleGroups'</a>,
--   <a>listRuleGroups_maxResults</a> - The maximum number of objects that
--   you want Network Firewall to return for this request. If more objects
--   are available, in the response, Network Firewall provides a
--   <tt>NextToken</tt> value that you can use in a subsequent call to get
--   the next batch of objects.
newListRuleGroups :: ListRuleGroups

-- | When you request a list of objects with a <tt>MaxResults</tt> setting,
--   if the number of objects that are still available for retrieval
--   exceeds the maximum you requested, Network Firewall returns a
--   <tt>NextToken</tt> value in the response. To retrieve the next batch
--   of objects, use the token returned from the prior request in your next
--   request.
listRuleGroups_nextToken :: Lens' ListRuleGroups (Maybe Text)

-- | The maximum number of objects that you want Network Firewall to return
--   for this request. If more objects are available, in the response,
--   Network Firewall provides a <tt>NextToken</tt> value that you can use
--   in a subsequent call to get the next batch of objects.
listRuleGroups_maxResults :: Lens' ListRuleGroups (Maybe Natural)

-- | <i>See:</i> <a>newListRuleGroupsResponse</a> smart constructor.
data ListRuleGroupsResponse
ListRuleGroupsResponse' :: Maybe Text -> Maybe [RuleGroupMetadata] -> Int -> ListRuleGroupsResponse

-- | When you request a list of objects with a <tt>MaxResults</tt> setting,
--   if the number of objects that are still available for retrieval
--   exceeds the maximum you requested, Network Firewall returns a
--   <tt>NextToken</tt> value in the response. To retrieve the next batch
--   of objects, use the token returned from the prior request in your next
--   request.
[$sel:nextToken:ListRuleGroupsResponse'] :: ListRuleGroupsResponse -> Maybe Text

-- | The rule group metadata objects that you've defined. Depending on your
--   setting for max results and the number of rule groups, this might not
--   be the full list.
[$sel:ruleGroups:ListRuleGroupsResponse'] :: ListRuleGroupsResponse -> Maybe [RuleGroupMetadata]

-- | The response's http status code.
[$sel:httpStatus:ListRuleGroupsResponse'] :: ListRuleGroupsResponse -> Int

-- | Create a value of <a>ListRuleGroupsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListRuleGroups'</a>,
--   <a>listRuleGroupsResponse_nextToken</a> - When you request a list of
--   objects with a <tt>MaxResults</tt> setting, if the number of objects
--   that are still available for retrieval exceeds the maximum you
--   requested, Network Firewall returns a <tt>NextToken</tt> value in the
--   response. To retrieve the next batch of objects, use the token
--   returned from the prior request in your next request.
--   
--   <a>$sel:ruleGroups:ListRuleGroupsResponse'</a>,
--   <a>listRuleGroupsResponse_ruleGroups</a> - The rule group metadata
--   objects that you've defined. Depending on your setting for max results
--   and the number of rule groups, this might not be the full list.
--   
--   <a>$sel:httpStatus:ListRuleGroupsResponse'</a>,
--   <a>listRuleGroupsResponse_httpStatus</a> - The response's http status
--   code.
newListRuleGroupsResponse :: Int -> ListRuleGroupsResponse

-- | When you request a list of objects with a <tt>MaxResults</tt> setting,
--   if the number of objects that are still available for retrieval
--   exceeds the maximum you requested, Network Firewall returns a
--   <tt>NextToken</tt> value in the response. To retrieve the next batch
--   of objects, use the token returned from the prior request in your next
--   request.
listRuleGroupsResponse_nextToken :: Lens' ListRuleGroupsResponse (Maybe Text)

-- | The rule group metadata objects that you've defined. Depending on your
--   setting for max results and the number of rule groups, this might not
--   be the full list.
listRuleGroupsResponse_ruleGroups :: Lens' ListRuleGroupsResponse (Maybe [RuleGroupMetadata])

-- | The response's http status code.
listRuleGroupsResponse_httpStatus :: Lens' ListRuleGroupsResponse Int
instance GHC.Generics.Generic Amazonka.NetworkFirewall.ListRuleGroups.ListRuleGroups
instance GHC.Show.Show Amazonka.NetworkFirewall.ListRuleGroups.ListRuleGroups
instance GHC.Read.Read Amazonka.NetworkFirewall.ListRuleGroups.ListRuleGroups
instance GHC.Classes.Eq Amazonka.NetworkFirewall.ListRuleGroups.ListRuleGroups
instance GHC.Generics.Generic Amazonka.NetworkFirewall.ListRuleGroups.ListRuleGroupsResponse
instance GHC.Show.Show Amazonka.NetworkFirewall.ListRuleGroups.ListRuleGroupsResponse
instance GHC.Read.Read Amazonka.NetworkFirewall.ListRuleGroups.ListRuleGroupsResponse
instance GHC.Classes.Eq Amazonka.NetworkFirewall.ListRuleGroups.ListRuleGroupsResponse
instance Amazonka.Types.AWSRequest Amazonka.NetworkFirewall.ListRuleGroups.ListRuleGroups
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.ListRuleGroups.ListRuleGroupsResponse
instance Amazonka.Pager.AWSPager Amazonka.NetworkFirewall.ListRuleGroups.ListRuleGroups
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.ListRuleGroups.ListRuleGroups
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.ListRuleGroups.ListRuleGroups
instance Amazonka.Data.Headers.ToHeaders Amazonka.NetworkFirewall.ListRuleGroups.ListRuleGroups
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.ListRuleGroups.ListRuleGroups
instance Amazonka.Data.Path.ToPath Amazonka.NetworkFirewall.ListRuleGroups.ListRuleGroups
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.ListRuleGroups.ListRuleGroups


-- | Retrieves the metadata for the firewalls that you have defined. If you
--   provide VPC identifiers in your request, this returns only the
--   firewalls for those VPCs.
--   
--   Depending on your setting for max results and the number of firewalls,
--   a single call might not return the full list.
--   
--   This operation returns paginated results.
module Amazonka.NetworkFirewall.ListFirewalls

-- | <i>See:</i> <a>newListFirewalls</a> smart constructor.
data ListFirewalls
ListFirewalls' :: Maybe Text -> Maybe [Text] -> Maybe Natural -> ListFirewalls

-- | When you request a list of objects with a <tt>MaxResults</tt> setting,
--   if the number of objects that are still available for retrieval
--   exceeds the maximum you requested, Network Firewall returns a
--   <tt>NextToken</tt> value in the response. To retrieve the next batch
--   of objects, use the token returned from the prior request in your next
--   request.
[$sel:nextToken:ListFirewalls'] :: ListFirewalls -> Maybe Text

-- | The unique identifiers of the VPCs that you want Network Firewall to
--   retrieve the firewalls for. Leave this blank to retrieve all firewalls
--   that you have defined.
[$sel:vpcIds:ListFirewalls'] :: ListFirewalls -> Maybe [Text]

-- | The maximum number of objects that you want Network Firewall to return
--   for this request. If more objects are available, in the response,
--   Network Firewall provides a <tt>NextToken</tt> value that you can use
--   in a subsequent call to get the next batch of objects.
[$sel:maxResults:ListFirewalls'] :: ListFirewalls -> Maybe Natural

-- | Create a value of <a>ListFirewalls</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListFirewalls'</a>, <a>listFirewalls_nextToken</a> -
--   When you request a list of objects with a <tt>MaxResults</tt> setting,
--   if the number of objects that are still available for retrieval
--   exceeds the maximum you requested, Network Firewall returns a
--   <tt>NextToken</tt> value in the response. To retrieve the next batch
--   of objects, use the token returned from the prior request in your next
--   request.
--   
--   <a>$sel:vpcIds:ListFirewalls'</a>, <a>listFirewalls_vpcIds</a> - The
--   unique identifiers of the VPCs that you want Network Firewall to
--   retrieve the firewalls for. Leave this blank to retrieve all firewalls
--   that you have defined.
--   
--   <a>$sel:maxResults:ListFirewalls'</a>, <a>listFirewalls_maxResults</a>
--   - The maximum number of objects that you want Network Firewall to
--   return for this request. If more objects are available, in the
--   response, Network Firewall provides a <tt>NextToken</tt> value that
--   you can use in a subsequent call to get the next batch of objects.
newListFirewalls :: ListFirewalls

-- | When you request a list of objects with a <tt>MaxResults</tt> setting,
--   if the number of objects that are still available for retrieval
--   exceeds the maximum you requested, Network Firewall returns a
--   <tt>NextToken</tt> value in the response. To retrieve the next batch
--   of objects, use the token returned from the prior request in your next
--   request.
listFirewalls_nextToken :: Lens' ListFirewalls (Maybe Text)

-- | The unique identifiers of the VPCs that you want Network Firewall to
--   retrieve the firewalls for. Leave this blank to retrieve all firewalls
--   that you have defined.
listFirewalls_vpcIds :: Lens' ListFirewalls (Maybe [Text])

-- | The maximum number of objects that you want Network Firewall to return
--   for this request. If more objects are available, in the response,
--   Network Firewall provides a <tt>NextToken</tt> value that you can use
--   in a subsequent call to get the next batch of objects.
listFirewalls_maxResults :: Lens' ListFirewalls (Maybe Natural)

-- | <i>See:</i> <a>newListFirewallsResponse</a> smart constructor.
data ListFirewallsResponse
ListFirewallsResponse' :: Maybe Text -> Maybe [FirewallMetadata] -> Int -> ListFirewallsResponse

-- | When you request a list of objects with a <tt>MaxResults</tt> setting,
--   if the number of objects that are still available for retrieval
--   exceeds the maximum you requested, Network Firewall returns a
--   <tt>NextToken</tt> value in the response. To retrieve the next batch
--   of objects, use the token returned from the prior request in your next
--   request.
[$sel:nextToken:ListFirewallsResponse'] :: ListFirewallsResponse -> Maybe Text

-- | The firewall metadata objects for the VPCs that you specified.
--   Depending on your setting for max results and the number of firewalls
--   you have, a single call might not be the full list.
[$sel:firewalls:ListFirewallsResponse'] :: ListFirewallsResponse -> Maybe [FirewallMetadata]

-- | The response's http status code.
[$sel:httpStatus:ListFirewallsResponse'] :: ListFirewallsResponse -> Int

-- | Create a value of <a>ListFirewallsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListFirewalls'</a>,
--   <a>listFirewallsResponse_nextToken</a> - When you request a list of
--   objects with a <tt>MaxResults</tt> setting, if the number of objects
--   that are still available for retrieval exceeds the maximum you
--   requested, Network Firewall returns a <tt>NextToken</tt> value in the
--   response. To retrieve the next batch of objects, use the token
--   returned from the prior request in your next request.
--   
--   <a>$sel:firewalls:ListFirewallsResponse'</a>,
--   <a>listFirewallsResponse_firewalls</a> - The firewall metadata objects
--   for the VPCs that you specified. Depending on your setting for max
--   results and the number of firewalls you have, a single call might not
--   be the full list.
--   
--   <a>$sel:httpStatus:ListFirewallsResponse'</a>,
--   <a>listFirewallsResponse_httpStatus</a> - The response's http status
--   code.
newListFirewallsResponse :: Int -> ListFirewallsResponse

-- | When you request a list of objects with a <tt>MaxResults</tt> setting,
--   if the number of objects that are still available for retrieval
--   exceeds the maximum you requested, Network Firewall returns a
--   <tt>NextToken</tt> value in the response. To retrieve the next batch
--   of objects, use the token returned from the prior request in your next
--   request.
listFirewallsResponse_nextToken :: Lens' ListFirewallsResponse (Maybe Text)

-- | The firewall metadata objects for the VPCs that you specified.
--   Depending on your setting for max results and the number of firewalls
--   you have, a single call might not be the full list.
listFirewallsResponse_firewalls :: Lens' ListFirewallsResponse (Maybe [FirewallMetadata])

-- | The response's http status code.
listFirewallsResponse_httpStatus :: Lens' ListFirewallsResponse Int
instance GHC.Generics.Generic Amazonka.NetworkFirewall.ListFirewalls.ListFirewalls
instance GHC.Show.Show Amazonka.NetworkFirewall.ListFirewalls.ListFirewalls
instance GHC.Read.Read Amazonka.NetworkFirewall.ListFirewalls.ListFirewalls
instance GHC.Classes.Eq Amazonka.NetworkFirewall.ListFirewalls.ListFirewalls
instance GHC.Generics.Generic Amazonka.NetworkFirewall.ListFirewalls.ListFirewallsResponse
instance GHC.Show.Show Amazonka.NetworkFirewall.ListFirewalls.ListFirewallsResponse
instance GHC.Read.Read Amazonka.NetworkFirewall.ListFirewalls.ListFirewallsResponse
instance GHC.Classes.Eq Amazonka.NetworkFirewall.ListFirewalls.ListFirewallsResponse
instance Amazonka.Types.AWSRequest Amazonka.NetworkFirewall.ListFirewalls.ListFirewalls
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.ListFirewalls.ListFirewallsResponse
instance Amazonka.Pager.AWSPager Amazonka.NetworkFirewall.ListFirewalls.ListFirewalls
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.ListFirewalls.ListFirewalls
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.ListFirewalls.ListFirewalls
instance Amazonka.Data.Headers.ToHeaders Amazonka.NetworkFirewall.ListFirewalls.ListFirewalls
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.ListFirewalls.ListFirewalls
instance Amazonka.Data.Path.ToPath Amazonka.NetworkFirewall.ListFirewalls.ListFirewalls
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.ListFirewalls.ListFirewalls


-- | Retrieves the metadata for the firewall policies that you have
--   defined. Depending on your setting for max results and the number of
--   firewall policies, a single call might not return the full list.
--   
--   This operation returns paginated results.
module Amazonka.NetworkFirewall.ListFirewallPolicies

-- | <i>See:</i> <a>newListFirewallPolicies</a> smart constructor.
data ListFirewallPolicies
ListFirewallPolicies' :: Maybe Text -> Maybe Natural -> ListFirewallPolicies

-- | When you request a list of objects with a <tt>MaxResults</tt> setting,
--   if the number of objects that are still available for retrieval
--   exceeds the maximum you requested, Network Firewall returns a
--   <tt>NextToken</tt> value in the response. To retrieve the next batch
--   of objects, use the token returned from the prior request in your next
--   request.
[$sel:nextToken:ListFirewallPolicies'] :: ListFirewallPolicies -> Maybe Text

-- | The maximum number of objects that you want Network Firewall to return
--   for this request. If more objects are available, in the response,
--   Network Firewall provides a <tt>NextToken</tt> value that you can use
--   in a subsequent call to get the next batch of objects.
[$sel:maxResults:ListFirewallPolicies'] :: ListFirewallPolicies -> Maybe Natural

-- | Create a value of <a>ListFirewallPolicies</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListFirewallPolicies'</a>,
--   <a>listFirewallPolicies_nextToken</a> - When you request a list of
--   objects with a <tt>MaxResults</tt> setting, if the number of objects
--   that are still available for retrieval exceeds the maximum you
--   requested, Network Firewall returns a <tt>NextToken</tt> value in the
--   response. To retrieve the next batch of objects, use the token
--   returned from the prior request in your next request.
--   
--   <a>$sel:maxResults:ListFirewallPolicies'</a>,
--   <a>listFirewallPolicies_maxResults</a> - The maximum number of objects
--   that you want Network Firewall to return for this request. If more
--   objects are available, in the response, Network Firewall provides a
--   <tt>NextToken</tt> value that you can use in a subsequent call to get
--   the next batch of objects.
newListFirewallPolicies :: ListFirewallPolicies

-- | When you request a list of objects with a <tt>MaxResults</tt> setting,
--   if the number of objects that are still available for retrieval
--   exceeds the maximum you requested, Network Firewall returns a
--   <tt>NextToken</tt> value in the response. To retrieve the next batch
--   of objects, use the token returned from the prior request in your next
--   request.
listFirewallPolicies_nextToken :: Lens' ListFirewallPolicies (Maybe Text)

-- | The maximum number of objects that you want Network Firewall to return
--   for this request. If more objects are available, in the response,
--   Network Firewall provides a <tt>NextToken</tt> value that you can use
--   in a subsequent call to get the next batch of objects.
listFirewallPolicies_maxResults :: Lens' ListFirewallPolicies (Maybe Natural)

-- | <i>See:</i> <a>newListFirewallPoliciesResponse</a> smart constructor.
data ListFirewallPoliciesResponse
ListFirewallPoliciesResponse' :: Maybe [FirewallPolicyMetadata] -> Maybe Text -> Int -> ListFirewallPoliciesResponse

-- | The metadata for the firewall policies. Depending on your setting for
--   max results and the number of firewall policies that you have, this
--   might not be the full list.
[$sel:firewallPolicies:ListFirewallPoliciesResponse'] :: ListFirewallPoliciesResponse -> Maybe [FirewallPolicyMetadata]

-- | When you request a list of objects with a <tt>MaxResults</tt> setting,
--   if the number of objects that are still available for retrieval
--   exceeds the maximum you requested, Network Firewall returns a
--   <tt>NextToken</tt> value in the response. To retrieve the next batch
--   of objects, use the token returned from the prior request in your next
--   request.
[$sel:nextToken:ListFirewallPoliciesResponse'] :: ListFirewallPoliciesResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:ListFirewallPoliciesResponse'] :: ListFirewallPoliciesResponse -> Int

-- | Create a value of <a>ListFirewallPoliciesResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:firewallPolicies:ListFirewallPoliciesResponse'</a>,
--   <a>listFirewallPoliciesResponse_firewallPolicies</a> - The metadata
--   for the firewall policies. Depending on your setting for max results
--   and the number of firewall policies that you have, this might not be
--   the full list.
--   
--   <a>$sel:nextToken:ListFirewallPolicies'</a>,
--   <a>listFirewallPoliciesResponse_nextToken</a> - When you request a
--   list of objects with a <tt>MaxResults</tt> setting, if the number of
--   objects that are still available for retrieval exceeds the maximum you
--   requested, Network Firewall returns a <tt>NextToken</tt> value in the
--   response. To retrieve the next batch of objects, use the token
--   returned from the prior request in your next request.
--   
--   <a>$sel:httpStatus:ListFirewallPoliciesResponse'</a>,
--   <a>listFirewallPoliciesResponse_httpStatus</a> - The response's http
--   status code.
newListFirewallPoliciesResponse :: Int -> ListFirewallPoliciesResponse

-- | The metadata for the firewall policies. Depending on your setting for
--   max results and the number of firewall policies that you have, this
--   might not be the full list.
listFirewallPoliciesResponse_firewallPolicies :: Lens' ListFirewallPoliciesResponse (Maybe [FirewallPolicyMetadata])

-- | When you request a list of objects with a <tt>MaxResults</tt> setting,
--   if the number of objects that are still available for retrieval
--   exceeds the maximum you requested, Network Firewall returns a
--   <tt>NextToken</tt> value in the response. To retrieve the next batch
--   of objects, use the token returned from the prior request in your next
--   request.
listFirewallPoliciesResponse_nextToken :: Lens' ListFirewallPoliciesResponse (Maybe Text)

-- | The response's http status code.
listFirewallPoliciesResponse_httpStatus :: Lens' ListFirewallPoliciesResponse Int
instance GHC.Generics.Generic Amazonka.NetworkFirewall.ListFirewallPolicies.ListFirewallPolicies
instance GHC.Show.Show Amazonka.NetworkFirewall.ListFirewallPolicies.ListFirewallPolicies
instance GHC.Read.Read Amazonka.NetworkFirewall.ListFirewallPolicies.ListFirewallPolicies
instance GHC.Classes.Eq Amazonka.NetworkFirewall.ListFirewallPolicies.ListFirewallPolicies
instance GHC.Generics.Generic Amazonka.NetworkFirewall.ListFirewallPolicies.ListFirewallPoliciesResponse
instance GHC.Show.Show Amazonka.NetworkFirewall.ListFirewallPolicies.ListFirewallPoliciesResponse
instance GHC.Read.Read Amazonka.NetworkFirewall.ListFirewallPolicies.ListFirewallPoliciesResponse
instance GHC.Classes.Eq Amazonka.NetworkFirewall.ListFirewallPolicies.ListFirewallPoliciesResponse
instance Amazonka.Types.AWSRequest Amazonka.NetworkFirewall.ListFirewallPolicies.ListFirewallPolicies
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.ListFirewallPolicies.ListFirewallPoliciesResponse
instance Amazonka.Pager.AWSPager Amazonka.NetworkFirewall.ListFirewallPolicies.ListFirewallPolicies
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.ListFirewallPolicies.ListFirewallPolicies
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.ListFirewallPolicies.ListFirewallPolicies
instance Amazonka.Data.Headers.ToHeaders Amazonka.NetworkFirewall.ListFirewallPolicies.ListFirewallPolicies
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.ListFirewallPolicies.ListFirewallPolicies
instance Amazonka.Data.Path.ToPath Amazonka.NetworkFirewall.ListFirewallPolicies.ListFirewallPolicies
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.ListFirewallPolicies.ListFirewallPolicies


-- | Removes the specified subnet associations from the firewall. This
--   removes the firewall endpoints from the subnets and removes any
--   network filtering protections that the endpoints were providing.
module Amazonka.NetworkFirewall.DisassociateSubnets

-- | <i>See:</i> <a>newDisassociateSubnets</a> smart constructor.
data DisassociateSubnets
DisassociateSubnets' :: Maybe Text -> Maybe Text -> Maybe Text -> [Text] -> DisassociateSubnets

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
[$sel:updateToken:DisassociateSubnets'] :: DisassociateSubnets -> Maybe Text

-- | The Amazon Resource Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
[$sel:firewallArn:DisassociateSubnets'] :: DisassociateSubnets -> Maybe Text

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
[$sel:firewallName:DisassociateSubnets'] :: DisassociateSubnets -> Maybe Text

-- | The unique identifiers for the subnets that you want to disassociate.
[$sel:subnetIds:DisassociateSubnets'] :: DisassociateSubnets -> [Text]

-- | Create a value of <a>DisassociateSubnets</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:updateToken:DisassociateSubnets'</a>,
--   <a>disassociateSubnets_updateToken</a> - An optional token that you
--   can use for optimistic locking. Network Firewall returns a token to
--   your requests that access the firewall. The token marks the state of
--   the firewall resource at the time of the request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
--   
--   <a>$sel:firewallArn:DisassociateSubnets'</a>,
--   <a>disassociateSubnets_firewallArn</a> - The Amazon Resource Name
--   (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:firewallName:DisassociateSubnets'</a>,
--   <a>disassociateSubnets_firewallName</a> - The descriptive name of the
--   firewall. You can't change the name of a firewall after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:subnetIds:DisassociateSubnets'</a>,
--   <a>disassociateSubnets_subnetIds</a> - The unique identifiers for the
--   subnets that you want to disassociate.
newDisassociateSubnets :: DisassociateSubnets

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
disassociateSubnets_updateToken :: Lens' DisassociateSubnets (Maybe Text)

-- | The Amazon Resource Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
disassociateSubnets_firewallArn :: Lens' DisassociateSubnets (Maybe Text)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
disassociateSubnets_firewallName :: Lens' DisassociateSubnets (Maybe Text)

-- | The unique identifiers for the subnets that you want to disassociate.
disassociateSubnets_subnetIds :: Lens' DisassociateSubnets [Text]

-- | <i>See:</i> <a>newDisassociateSubnetsResponse</a> smart constructor.
data DisassociateSubnetsResponse
DisassociateSubnetsResponse' :: Maybe [SubnetMapping] -> Maybe Text -> Maybe Text -> Maybe Text -> Int -> DisassociateSubnetsResponse

-- | The IDs of the subnets that are associated with the firewall.
[$sel:subnetMappings:DisassociateSubnetsResponse'] :: DisassociateSubnetsResponse -> Maybe [SubnetMapping]

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
[$sel:updateToken:DisassociateSubnetsResponse'] :: DisassociateSubnetsResponse -> Maybe Text

-- | The Amazon Resource Name (ARN) of the firewall.
[$sel:firewallArn:DisassociateSubnetsResponse'] :: DisassociateSubnetsResponse -> Maybe Text

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
[$sel:firewallName:DisassociateSubnetsResponse'] :: DisassociateSubnetsResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:DisassociateSubnetsResponse'] :: DisassociateSubnetsResponse -> Int

-- | Create a value of <a>DisassociateSubnetsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:subnetMappings:DisassociateSubnetsResponse'</a>,
--   <a>disassociateSubnetsResponse_subnetMappings</a> - The IDs of the
--   subnets that are associated with the firewall.
--   
--   <a>$sel:updateToken:DisassociateSubnets'</a>,
--   <a>disassociateSubnetsResponse_updateToken</a> - An optional token
--   that you can use for optimistic locking. Network Firewall returns a
--   token to your requests that access the firewall. The token marks the
--   state of the firewall resource at the time of the request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
--   
--   <a>$sel:firewallArn:DisassociateSubnets'</a>,
--   <a>disassociateSubnetsResponse_firewallArn</a> - The Amazon Resource
--   Name (ARN) of the firewall.
--   
--   <a>$sel:firewallName:DisassociateSubnets'</a>,
--   <a>disassociateSubnetsResponse_firewallName</a> - The descriptive name
--   of the firewall. You can't change the name of a firewall after you
--   create it.
--   
--   <a>$sel:httpStatus:DisassociateSubnetsResponse'</a>,
--   <a>disassociateSubnetsResponse_httpStatus</a> - The response's http
--   status code.
newDisassociateSubnetsResponse :: Int -> DisassociateSubnetsResponse

-- | The IDs of the subnets that are associated with the firewall.
disassociateSubnetsResponse_subnetMappings :: Lens' DisassociateSubnetsResponse (Maybe [SubnetMapping])

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
disassociateSubnetsResponse_updateToken :: Lens' DisassociateSubnetsResponse (Maybe Text)

-- | The Amazon Resource Name (ARN) of the firewall.
disassociateSubnetsResponse_firewallArn :: Lens' DisassociateSubnetsResponse (Maybe Text)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
disassociateSubnetsResponse_firewallName :: Lens' DisassociateSubnetsResponse (Maybe Text)

-- | The response's http status code.
disassociateSubnetsResponse_httpStatus :: Lens' DisassociateSubnetsResponse Int
instance GHC.Generics.Generic Amazonka.NetworkFirewall.DisassociateSubnets.DisassociateSubnets
instance GHC.Show.Show Amazonka.NetworkFirewall.DisassociateSubnets.DisassociateSubnets
instance GHC.Read.Read Amazonka.NetworkFirewall.DisassociateSubnets.DisassociateSubnets
instance GHC.Classes.Eq Amazonka.NetworkFirewall.DisassociateSubnets.DisassociateSubnets
instance GHC.Generics.Generic Amazonka.NetworkFirewall.DisassociateSubnets.DisassociateSubnetsResponse
instance GHC.Show.Show Amazonka.NetworkFirewall.DisassociateSubnets.DisassociateSubnetsResponse
instance GHC.Read.Read Amazonka.NetworkFirewall.DisassociateSubnets.DisassociateSubnetsResponse
instance GHC.Classes.Eq Amazonka.NetworkFirewall.DisassociateSubnets.DisassociateSubnetsResponse
instance Amazonka.Types.AWSRequest Amazonka.NetworkFirewall.DisassociateSubnets.DisassociateSubnets
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.DisassociateSubnets.DisassociateSubnetsResponse
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.DisassociateSubnets.DisassociateSubnets
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.DisassociateSubnets.DisassociateSubnets
instance Amazonka.Data.Headers.ToHeaders Amazonka.NetworkFirewall.DisassociateSubnets.DisassociateSubnets
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.DisassociateSubnets.DisassociateSubnets
instance Amazonka.Data.Path.ToPath Amazonka.NetworkFirewall.DisassociateSubnets.DisassociateSubnets
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.DisassociateSubnets.DisassociateSubnets


-- | Returns the data objects for the specified rule group.
module Amazonka.NetworkFirewall.DescribeRuleGroup

-- | <i>See:</i> <a>newDescribeRuleGroup</a> smart constructor.
data DescribeRuleGroup
DescribeRuleGroup' :: Maybe Text -> Maybe RuleGroupType -> Maybe Text -> DescribeRuleGroup

-- | The Amazon Resource Name (ARN) of the rule group.
--   
--   You must specify the ARN or the name, and you can specify both.
[$sel:ruleGroupArn:DescribeRuleGroup'] :: DescribeRuleGroup -> Maybe Text

-- | Indicates whether the rule group is stateless or stateful. If the rule
--   group is stateless, it contains stateless rules. If it is stateful, it
--   contains stateful rules.
--   
--   This setting is required for requests that do not include the
--   <tt>RuleGroupARN</tt>.
[$sel:type':DescribeRuleGroup'] :: DescribeRuleGroup -> Maybe RuleGroupType

-- | The descriptive name of the rule group. You can't change the name of a
--   rule group after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
[$sel:ruleGroupName:DescribeRuleGroup'] :: DescribeRuleGroup -> Maybe Text

-- | Create a value of <a>DescribeRuleGroup</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:ruleGroupArn:DescribeRuleGroup'</a>,
--   <a>describeRuleGroup_ruleGroupArn</a> - The Amazon Resource Name (ARN)
--   of the rule group.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:type':DescribeRuleGroup'</a>, <a>describeRuleGroup_type</a> -
--   Indicates whether the rule group is stateless or stateful. If the rule
--   group is stateless, it contains stateless rules. If it is stateful, it
--   contains stateful rules.
--   
--   This setting is required for requests that do not include the
--   <tt>RuleGroupARN</tt>.
--   
--   <a>$sel:ruleGroupName:DescribeRuleGroup'</a>,
--   <a>describeRuleGroup_ruleGroupName</a> - The descriptive name of the
--   rule group. You can't change the name of a rule group after you create
--   it.
--   
--   You must specify the ARN or the name, and you can specify both.
newDescribeRuleGroup :: DescribeRuleGroup

-- | The Amazon Resource Name (ARN) of the rule group.
--   
--   You must specify the ARN or the name, and you can specify both.
describeRuleGroup_ruleGroupArn :: Lens' DescribeRuleGroup (Maybe Text)

-- | Indicates whether the rule group is stateless or stateful. If the rule
--   group is stateless, it contains stateless rules. If it is stateful, it
--   contains stateful rules.
--   
--   This setting is required for requests that do not include the
--   <tt>RuleGroupARN</tt>.
describeRuleGroup_type :: Lens' DescribeRuleGroup (Maybe RuleGroupType)

-- | The descriptive name of the rule group. You can't change the name of a
--   rule group after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
describeRuleGroup_ruleGroupName :: Lens' DescribeRuleGroup (Maybe Text)

-- | <i>See:</i> <a>newDescribeRuleGroupResponse</a> smart constructor.
data DescribeRuleGroupResponse
DescribeRuleGroupResponse' :: Maybe RuleGroup -> Int -> Text -> RuleGroupResponse -> DescribeRuleGroupResponse

-- | The object that defines the rules in a rule group. This, along with
--   RuleGroupResponse, define the rule group. You can retrieve all objects
--   for a rule group by calling DescribeRuleGroup.
--   
--   AWS Network Firewall uses a rule group to inspect and control network
--   traffic. You define stateless rule groups to inspect individual
--   packets and you define stateful rule groups to inspect packets in the
--   context of their traffic flow.
--   
--   To use a rule group, you include it by reference in an Network
--   Firewall firewall policy, then you use the policy in a firewall. You
--   can reference a rule group from more than one firewall policy, and you
--   can use a firewall policy in more than one firewall.
[$sel:ruleGroup:DescribeRuleGroupResponse'] :: DescribeRuleGroupResponse -> Maybe RuleGroup

-- | The response's http status code.
[$sel:httpStatus:DescribeRuleGroupResponse'] :: DescribeRuleGroupResponse -> Int

-- | A token used for optimistic locking. Network Firewall returns a token
--   to your requests that access the rule group. The token marks the state
--   of the rule group resource at the time of the request.
--   
--   To make changes to the rule group, you provide the token in your
--   request. Network Firewall uses the token to ensure that the rule group
--   hasn't changed since you last retrieved it. If it has changed, the
--   operation fails with an <tt>InvalidTokenException</tt>. If this
--   happens, retrieve the rule group again to get a current copy of it
--   with a current token. Reapply your changes as needed, then try the
--   operation again using the new token.
[$sel:updateToken:DescribeRuleGroupResponse'] :: DescribeRuleGroupResponse -> Text

-- | The high-level properties of a rule group. This, along with the
--   RuleGroup, define the rule group. You can retrieve all objects for a
--   rule group by calling DescribeRuleGroup.
[$sel:ruleGroupResponse:DescribeRuleGroupResponse'] :: DescribeRuleGroupResponse -> RuleGroupResponse

-- | Create a value of <a>DescribeRuleGroupResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:ruleGroup:DescribeRuleGroupResponse'</a>,
--   <a>describeRuleGroupResponse_ruleGroup</a> - The object that defines
--   the rules in a rule group. This, along with RuleGroupResponse, define
--   the rule group. You can retrieve all objects for a rule group by
--   calling DescribeRuleGroup.
--   
--   AWS Network Firewall uses a rule group to inspect and control network
--   traffic. You define stateless rule groups to inspect individual
--   packets and you define stateful rule groups to inspect packets in the
--   context of their traffic flow.
--   
--   To use a rule group, you include it by reference in an Network
--   Firewall firewall policy, then you use the policy in a firewall. You
--   can reference a rule group from more than one firewall policy, and you
--   can use a firewall policy in more than one firewall.
--   
--   <a>$sel:httpStatus:DescribeRuleGroupResponse'</a>,
--   <a>describeRuleGroupResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:updateToken:DescribeRuleGroupResponse'</a>,
--   <a>describeRuleGroupResponse_updateToken</a> - A token used for
--   optimistic locking. Network Firewall returns a token to your requests
--   that access the rule group. The token marks the state of the rule
--   group resource at the time of the request.
--   
--   To make changes to the rule group, you provide the token in your
--   request. Network Firewall uses the token to ensure that the rule group
--   hasn't changed since you last retrieved it. If it has changed, the
--   operation fails with an <tt>InvalidTokenException</tt>. If this
--   happens, retrieve the rule group again to get a current copy of it
--   with a current token. Reapply your changes as needed, then try the
--   operation again using the new token.
--   
--   <a>$sel:ruleGroupResponse:DescribeRuleGroupResponse'</a>,
--   <a>describeRuleGroupResponse_ruleGroupResponse</a> - The high-level
--   properties of a rule group. This, along with the RuleGroup, define the
--   rule group. You can retrieve all objects for a rule group by calling
--   DescribeRuleGroup.
newDescribeRuleGroupResponse :: Int -> Text -> RuleGroupResponse -> DescribeRuleGroupResponse

-- | The object that defines the rules in a rule group. This, along with
--   RuleGroupResponse, define the rule group. You can retrieve all objects
--   for a rule group by calling DescribeRuleGroup.
--   
--   AWS Network Firewall uses a rule group to inspect and control network
--   traffic. You define stateless rule groups to inspect individual
--   packets and you define stateful rule groups to inspect packets in the
--   context of their traffic flow.
--   
--   To use a rule group, you include it by reference in an Network
--   Firewall firewall policy, then you use the policy in a firewall. You
--   can reference a rule group from more than one firewall policy, and you
--   can use a firewall policy in more than one firewall.
describeRuleGroupResponse_ruleGroup :: Lens' DescribeRuleGroupResponse (Maybe RuleGroup)

-- | The response's http status code.
describeRuleGroupResponse_httpStatus :: Lens' DescribeRuleGroupResponse Int

-- | A token used for optimistic locking. Network Firewall returns a token
--   to your requests that access the rule group. The token marks the state
--   of the rule group resource at the time of the request.
--   
--   To make changes to the rule group, you provide the token in your
--   request. Network Firewall uses the token to ensure that the rule group
--   hasn't changed since you last retrieved it. If it has changed, the
--   operation fails with an <tt>InvalidTokenException</tt>. If this
--   happens, retrieve the rule group again to get a current copy of it
--   with a current token. Reapply your changes as needed, then try the
--   operation again using the new token.
describeRuleGroupResponse_updateToken :: Lens' DescribeRuleGroupResponse Text

-- | The high-level properties of a rule group. This, along with the
--   RuleGroup, define the rule group. You can retrieve all objects for a
--   rule group by calling DescribeRuleGroup.
describeRuleGroupResponse_ruleGroupResponse :: Lens' DescribeRuleGroupResponse RuleGroupResponse
instance GHC.Generics.Generic Amazonka.NetworkFirewall.DescribeRuleGroup.DescribeRuleGroup
instance GHC.Show.Show Amazonka.NetworkFirewall.DescribeRuleGroup.DescribeRuleGroup
instance GHC.Read.Read Amazonka.NetworkFirewall.DescribeRuleGroup.DescribeRuleGroup
instance GHC.Classes.Eq Amazonka.NetworkFirewall.DescribeRuleGroup.DescribeRuleGroup
instance GHC.Generics.Generic Amazonka.NetworkFirewall.DescribeRuleGroup.DescribeRuleGroupResponse
instance GHC.Show.Show Amazonka.NetworkFirewall.DescribeRuleGroup.DescribeRuleGroupResponse
instance GHC.Read.Read Amazonka.NetworkFirewall.DescribeRuleGroup.DescribeRuleGroupResponse
instance GHC.Classes.Eq Amazonka.NetworkFirewall.DescribeRuleGroup.DescribeRuleGroupResponse
instance Amazonka.Types.AWSRequest Amazonka.NetworkFirewall.DescribeRuleGroup.DescribeRuleGroup
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.DescribeRuleGroup.DescribeRuleGroupResponse
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.DescribeRuleGroup.DescribeRuleGroup
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.DescribeRuleGroup.DescribeRuleGroup
instance Amazonka.Data.Headers.ToHeaders Amazonka.NetworkFirewall.DescribeRuleGroup.DescribeRuleGroup
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.DescribeRuleGroup.DescribeRuleGroup
instance Amazonka.Data.Path.ToPath Amazonka.NetworkFirewall.DescribeRuleGroup.DescribeRuleGroup
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.DescribeRuleGroup.DescribeRuleGroup


-- | Retrieves a resource policy that you created in a PutResourcePolicy
--   request.
module Amazonka.NetworkFirewall.DescribeResourcePolicy

-- | <i>See:</i> <a>newDescribeResourcePolicy</a> smart constructor.
data DescribeResourcePolicy
DescribeResourcePolicy' :: Text -> DescribeResourcePolicy

-- | The Amazon Resource Name (ARN) of the rule group or firewall policy
--   whose resource policy you want to retrieve.
[$sel:resourceArn:DescribeResourcePolicy'] :: DescribeResourcePolicy -> Text

-- | Create a value of <a>DescribeResourcePolicy</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:DescribeResourcePolicy'</a>,
--   <a>describeResourcePolicy_resourceArn</a> - The Amazon Resource Name
--   (ARN) of the rule group or firewall policy whose resource policy you
--   want to retrieve.
newDescribeResourcePolicy :: Text -> DescribeResourcePolicy

-- | The Amazon Resource Name (ARN) of the rule group or firewall policy
--   whose resource policy you want to retrieve.
describeResourcePolicy_resourceArn :: Lens' DescribeResourcePolicy Text

-- | <i>See:</i> <a>newDescribeResourcePolicyResponse</a> smart
--   constructor.
data DescribeResourcePolicyResponse
DescribeResourcePolicyResponse' :: Maybe Text -> Int -> DescribeResourcePolicyResponse

-- | The AWS Identity and Access Management policy for the resource.
[$sel:policy:DescribeResourcePolicyResponse'] :: DescribeResourcePolicyResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:DescribeResourcePolicyResponse'] :: DescribeResourcePolicyResponse -> Int

-- | Create a value of <a>DescribeResourcePolicyResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:policy:DescribeResourcePolicyResponse'</a>,
--   <a>describeResourcePolicyResponse_policy</a> - The AWS Identity and
--   Access Management policy for the resource.
--   
--   <a>$sel:httpStatus:DescribeResourcePolicyResponse'</a>,
--   <a>describeResourcePolicyResponse_httpStatus</a> - The response's http
--   status code.
newDescribeResourcePolicyResponse :: Int -> DescribeResourcePolicyResponse

-- | The AWS Identity and Access Management policy for the resource.
describeResourcePolicyResponse_policy :: Lens' DescribeResourcePolicyResponse (Maybe Text)

-- | The response's http status code.
describeResourcePolicyResponse_httpStatus :: Lens' DescribeResourcePolicyResponse Int
instance GHC.Generics.Generic Amazonka.NetworkFirewall.DescribeResourcePolicy.DescribeResourcePolicy
instance GHC.Show.Show Amazonka.NetworkFirewall.DescribeResourcePolicy.DescribeResourcePolicy
instance GHC.Read.Read Amazonka.NetworkFirewall.DescribeResourcePolicy.DescribeResourcePolicy
instance GHC.Classes.Eq Amazonka.NetworkFirewall.DescribeResourcePolicy.DescribeResourcePolicy
instance GHC.Generics.Generic Amazonka.NetworkFirewall.DescribeResourcePolicy.DescribeResourcePolicyResponse
instance GHC.Show.Show Amazonka.NetworkFirewall.DescribeResourcePolicy.DescribeResourcePolicyResponse
instance GHC.Read.Read Amazonka.NetworkFirewall.DescribeResourcePolicy.DescribeResourcePolicyResponse
instance GHC.Classes.Eq Amazonka.NetworkFirewall.DescribeResourcePolicy.DescribeResourcePolicyResponse
instance Amazonka.Types.AWSRequest Amazonka.NetworkFirewall.DescribeResourcePolicy.DescribeResourcePolicy
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.DescribeResourcePolicy.DescribeResourcePolicyResponse
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.DescribeResourcePolicy.DescribeResourcePolicy
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.DescribeResourcePolicy.DescribeResourcePolicy
instance Amazonka.Data.Headers.ToHeaders Amazonka.NetworkFirewall.DescribeResourcePolicy.DescribeResourcePolicy
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.DescribeResourcePolicy.DescribeResourcePolicy
instance Amazonka.Data.Path.ToPath Amazonka.NetworkFirewall.DescribeResourcePolicy.DescribeResourcePolicy
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.DescribeResourcePolicy.DescribeResourcePolicy


-- | Returns the logging configuration for the specified firewall.
module Amazonka.NetworkFirewall.DescribeLoggingConfiguration

-- | <i>See:</i> <a>newDescribeLoggingConfiguration</a> smart constructor.
data DescribeLoggingConfiguration
DescribeLoggingConfiguration' :: Maybe Text -> Maybe Text -> DescribeLoggingConfiguration

-- | The Amazon Resource Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
[$sel:firewallArn:DescribeLoggingConfiguration'] :: DescribeLoggingConfiguration -> Maybe Text

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
[$sel:firewallName:DescribeLoggingConfiguration'] :: DescribeLoggingConfiguration -> Maybe Text

-- | Create a value of <a>DescribeLoggingConfiguration</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:firewallArn:DescribeLoggingConfiguration'</a>,
--   <a>describeLoggingConfiguration_firewallArn</a> - The Amazon Resource
--   Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:firewallName:DescribeLoggingConfiguration'</a>,
--   <a>describeLoggingConfiguration_firewallName</a> - The descriptive
--   name of the firewall. You can't change the name of a firewall after
--   you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
newDescribeLoggingConfiguration :: DescribeLoggingConfiguration

-- | The Amazon Resource Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
describeLoggingConfiguration_firewallArn :: Lens' DescribeLoggingConfiguration (Maybe Text)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
describeLoggingConfiguration_firewallName :: Lens' DescribeLoggingConfiguration (Maybe Text)

-- | <i>See:</i> <a>newDescribeLoggingConfigurationResponse</a> smart
--   constructor.
data DescribeLoggingConfigurationResponse
DescribeLoggingConfigurationResponse' :: Maybe Text -> Maybe LoggingConfiguration -> Int -> DescribeLoggingConfigurationResponse

-- | The Amazon Resource Name (ARN) of the firewall.
[$sel:firewallArn:DescribeLoggingConfigurationResponse'] :: DescribeLoggingConfigurationResponse -> Maybe Text
[$sel:loggingConfiguration:DescribeLoggingConfigurationResponse'] :: DescribeLoggingConfigurationResponse -> Maybe LoggingConfiguration

-- | The response's http status code.
[$sel:httpStatus:DescribeLoggingConfigurationResponse'] :: DescribeLoggingConfigurationResponse -> Int

-- | Create a value of <a>DescribeLoggingConfigurationResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:firewallArn:DescribeLoggingConfiguration'</a>,
--   <a>describeLoggingConfigurationResponse_firewallArn</a> - The Amazon
--   Resource Name (ARN) of the firewall.
--   
--   
--   <a>$sel:loggingConfiguration:DescribeLoggingConfigurationResponse'</a>,
--   <a>describeLoggingConfigurationResponse_loggingConfiguration</a> -
--   Undocumented member.
--   
--   <a>$sel:httpStatus:DescribeLoggingConfigurationResponse'</a>,
--   <a>describeLoggingConfigurationResponse_httpStatus</a> - The
--   response's http status code.
newDescribeLoggingConfigurationResponse :: Int -> DescribeLoggingConfigurationResponse

-- | The Amazon Resource Name (ARN) of the firewall.
describeLoggingConfigurationResponse_firewallArn :: Lens' DescribeLoggingConfigurationResponse (Maybe Text)

-- | Undocumented member.
describeLoggingConfigurationResponse_loggingConfiguration :: Lens' DescribeLoggingConfigurationResponse (Maybe LoggingConfiguration)

-- | The response's http status code.
describeLoggingConfigurationResponse_httpStatus :: Lens' DescribeLoggingConfigurationResponse Int
instance GHC.Generics.Generic Amazonka.NetworkFirewall.DescribeLoggingConfiguration.DescribeLoggingConfiguration
instance GHC.Show.Show Amazonka.NetworkFirewall.DescribeLoggingConfiguration.DescribeLoggingConfiguration
instance GHC.Read.Read Amazonka.NetworkFirewall.DescribeLoggingConfiguration.DescribeLoggingConfiguration
instance GHC.Classes.Eq Amazonka.NetworkFirewall.DescribeLoggingConfiguration.DescribeLoggingConfiguration
instance GHC.Generics.Generic Amazonka.NetworkFirewall.DescribeLoggingConfiguration.DescribeLoggingConfigurationResponse
instance GHC.Show.Show Amazonka.NetworkFirewall.DescribeLoggingConfiguration.DescribeLoggingConfigurationResponse
instance GHC.Read.Read Amazonka.NetworkFirewall.DescribeLoggingConfiguration.DescribeLoggingConfigurationResponse
instance GHC.Classes.Eq Amazonka.NetworkFirewall.DescribeLoggingConfiguration.DescribeLoggingConfigurationResponse
instance Amazonka.Types.AWSRequest Amazonka.NetworkFirewall.DescribeLoggingConfiguration.DescribeLoggingConfiguration
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.DescribeLoggingConfiguration.DescribeLoggingConfigurationResponse
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.DescribeLoggingConfiguration.DescribeLoggingConfiguration
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.DescribeLoggingConfiguration.DescribeLoggingConfiguration
instance Amazonka.Data.Headers.ToHeaders Amazonka.NetworkFirewall.DescribeLoggingConfiguration.DescribeLoggingConfiguration
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.DescribeLoggingConfiguration.DescribeLoggingConfiguration
instance Amazonka.Data.Path.ToPath Amazonka.NetworkFirewall.DescribeLoggingConfiguration.DescribeLoggingConfiguration
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.DescribeLoggingConfiguration.DescribeLoggingConfiguration


-- | Returns the data objects for the specified firewall policy.
module Amazonka.NetworkFirewall.DescribeFirewallPolicy

-- | <i>See:</i> <a>newDescribeFirewallPolicy</a> smart constructor.
data DescribeFirewallPolicy
DescribeFirewallPolicy' :: Maybe Text -> Maybe Text -> DescribeFirewallPolicy

-- | The descriptive name of the firewall policy. You can't change the name
--   of a firewall policy after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
[$sel:firewallPolicyName:DescribeFirewallPolicy'] :: DescribeFirewallPolicy -> Maybe Text

-- | The Amazon Resource Name (ARN) of the firewall policy.
--   
--   You must specify the ARN or the name, and you can specify both.
[$sel:firewallPolicyArn:DescribeFirewallPolicy'] :: DescribeFirewallPolicy -> Maybe Text

-- | Create a value of <a>DescribeFirewallPolicy</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:firewallPolicyName:DescribeFirewallPolicy'</a>,
--   <a>describeFirewallPolicy_firewallPolicyName</a> - The descriptive
--   name of the firewall policy. You can't change the name of a firewall
--   policy after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:firewallPolicyArn:DescribeFirewallPolicy'</a>,
--   <a>describeFirewallPolicy_firewallPolicyArn</a> - The Amazon Resource
--   Name (ARN) of the firewall policy.
--   
--   You must specify the ARN or the name, and you can specify both.
newDescribeFirewallPolicy :: DescribeFirewallPolicy

-- | The descriptive name of the firewall policy. You can't change the name
--   of a firewall policy after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
describeFirewallPolicy_firewallPolicyName :: Lens' DescribeFirewallPolicy (Maybe Text)

-- | The Amazon Resource Name (ARN) of the firewall policy.
--   
--   You must specify the ARN or the name, and you can specify both.
describeFirewallPolicy_firewallPolicyArn :: Lens' DescribeFirewallPolicy (Maybe Text)

-- | <i>See:</i> <a>newDescribeFirewallPolicyResponse</a> smart
--   constructor.
data DescribeFirewallPolicyResponse
DescribeFirewallPolicyResponse' :: Maybe FirewallPolicy -> Int -> Text -> FirewallPolicyResponse -> DescribeFirewallPolicyResponse

-- | The policy for the specified firewall policy.
[$sel:firewallPolicy:DescribeFirewallPolicyResponse'] :: DescribeFirewallPolicyResponse -> Maybe FirewallPolicy

-- | The response's http status code.
[$sel:httpStatus:DescribeFirewallPolicyResponse'] :: DescribeFirewallPolicyResponse -> Int

-- | A token used for optimistic locking. Network Firewall returns a token
--   to your requests that access the firewall policy. The token marks the
--   state of the policy resource at the time of the request.
--   
--   To make changes to the policy, you provide the token in your request.
--   Network Firewall uses the token to ensure that the policy hasn't
--   changed since you last retrieved it. If it has changed, the operation
--   fails with an <tt>InvalidTokenException</tt>. If this happens,
--   retrieve the firewall policy again to get a current copy of it with
--   current token. Reapply your changes as needed, then try the operation
--   again using the new token.
[$sel:updateToken:DescribeFirewallPolicyResponse'] :: DescribeFirewallPolicyResponse -> Text

-- | The high-level properties of a firewall policy. This, along with the
--   FirewallPolicy, define the policy. You can retrieve all objects for a
--   firewall policy by calling DescribeFirewallPolicy.
[$sel:firewallPolicyResponse:DescribeFirewallPolicyResponse'] :: DescribeFirewallPolicyResponse -> FirewallPolicyResponse

-- | Create a value of <a>DescribeFirewallPolicyResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:firewallPolicy:DescribeFirewallPolicyResponse'</a>,
--   <a>describeFirewallPolicyResponse_firewallPolicy</a> - The policy for
--   the specified firewall policy.
--   
--   <a>$sel:httpStatus:DescribeFirewallPolicyResponse'</a>,
--   <a>describeFirewallPolicyResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:updateToken:DescribeFirewallPolicyResponse'</a>,
--   <a>describeFirewallPolicyResponse_updateToken</a> - A token used for
--   optimistic locking. Network Firewall returns a token to your requests
--   that access the firewall policy. The token marks the state of the
--   policy resource at the time of the request.
--   
--   To make changes to the policy, you provide the token in your request.
--   Network Firewall uses the token to ensure that the policy hasn't
--   changed since you last retrieved it. If it has changed, the operation
--   fails with an <tt>InvalidTokenException</tt>. If this happens,
--   retrieve the firewall policy again to get a current copy of it with
--   current token. Reapply your changes as needed, then try the operation
--   again using the new token.
--   
--   <a>$sel:firewallPolicyResponse:DescribeFirewallPolicyResponse'</a>,
--   <a>describeFirewallPolicyResponse_firewallPolicyResponse</a> - The
--   high-level properties of a firewall policy. This, along with the
--   FirewallPolicy, define the policy. You can retrieve all objects for a
--   firewall policy by calling DescribeFirewallPolicy.
newDescribeFirewallPolicyResponse :: Int -> Text -> FirewallPolicyResponse -> DescribeFirewallPolicyResponse

-- | The policy for the specified firewall policy.
describeFirewallPolicyResponse_firewallPolicy :: Lens' DescribeFirewallPolicyResponse (Maybe FirewallPolicy)

-- | The response's http status code.
describeFirewallPolicyResponse_httpStatus :: Lens' DescribeFirewallPolicyResponse Int

-- | A token used for optimistic locking. Network Firewall returns a token
--   to your requests that access the firewall policy. The token marks the
--   state of the policy resource at the time of the request.
--   
--   To make changes to the policy, you provide the token in your request.
--   Network Firewall uses the token to ensure that the policy hasn't
--   changed since you last retrieved it. If it has changed, the operation
--   fails with an <tt>InvalidTokenException</tt>. If this happens,
--   retrieve the firewall policy again to get a current copy of it with
--   current token. Reapply your changes as needed, then try the operation
--   again using the new token.
describeFirewallPolicyResponse_updateToken :: Lens' DescribeFirewallPolicyResponse Text

-- | The high-level properties of a firewall policy. This, along with the
--   FirewallPolicy, define the policy. You can retrieve all objects for a
--   firewall policy by calling DescribeFirewallPolicy.
describeFirewallPolicyResponse_firewallPolicyResponse :: Lens' DescribeFirewallPolicyResponse FirewallPolicyResponse
instance GHC.Generics.Generic Amazonka.NetworkFirewall.DescribeFirewallPolicy.DescribeFirewallPolicy
instance GHC.Show.Show Amazonka.NetworkFirewall.DescribeFirewallPolicy.DescribeFirewallPolicy
instance GHC.Read.Read Amazonka.NetworkFirewall.DescribeFirewallPolicy.DescribeFirewallPolicy
instance GHC.Classes.Eq Amazonka.NetworkFirewall.DescribeFirewallPolicy.DescribeFirewallPolicy
instance GHC.Generics.Generic Amazonka.NetworkFirewall.DescribeFirewallPolicy.DescribeFirewallPolicyResponse
instance GHC.Show.Show Amazonka.NetworkFirewall.DescribeFirewallPolicy.DescribeFirewallPolicyResponse
instance GHC.Read.Read Amazonka.NetworkFirewall.DescribeFirewallPolicy.DescribeFirewallPolicyResponse
instance GHC.Classes.Eq Amazonka.NetworkFirewall.DescribeFirewallPolicy.DescribeFirewallPolicyResponse
instance Amazonka.Types.AWSRequest Amazonka.NetworkFirewall.DescribeFirewallPolicy.DescribeFirewallPolicy
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.DescribeFirewallPolicy.DescribeFirewallPolicyResponse
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.DescribeFirewallPolicy.DescribeFirewallPolicy
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.DescribeFirewallPolicy.DescribeFirewallPolicy
instance Amazonka.Data.Headers.ToHeaders Amazonka.NetworkFirewall.DescribeFirewallPolicy.DescribeFirewallPolicy
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.DescribeFirewallPolicy.DescribeFirewallPolicy
instance Amazonka.Data.Path.ToPath Amazonka.NetworkFirewall.DescribeFirewallPolicy.DescribeFirewallPolicy
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.DescribeFirewallPolicy.DescribeFirewallPolicy


-- | Returns the data objects for the specified firewall.
module Amazonka.NetworkFirewall.DescribeFirewall

-- | <i>See:</i> <a>newDescribeFirewall</a> smart constructor.
data DescribeFirewall
DescribeFirewall' :: Maybe Text -> Maybe Text -> DescribeFirewall

-- | The Amazon Resource Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
[$sel:firewallArn:DescribeFirewall'] :: DescribeFirewall -> Maybe Text

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
[$sel:firewallName:DescribeFirewall'] :: DescribeFirewall -> Maybe Text

-- | Create a value of <a>DescribeFirewall</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:firewallArn:DescribeFirewall'</a>,
--   <a>describeFirewall_firewallArn</a> - The Amazon Resource Name (ARN)
--   of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:firewallName:DescribeFirewall'</a>,
--   <a>describeFirewall_firewallName</a> - The descriptive name of the
--   firewall. You can't change the name of a firewall after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
newDescribeFirewall :: DescribeFirewall

-- | The Amazon Resource Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
describeFirewall_firewallArn :: Lens' DescribeFirewall (Maybe Text)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
describeFirewall_firewallName :: Lens' DescribeFirewall (Maybe Text)

-- | <i>See:</i> <a>newDescribeFirewallResponse</a> smart constructor.
data DescribeFirewallResponse
DescribeFirewallResponse' :: Maybe FirewallStatus -> Maybe Text -> Maybe Firewall -> Int -> DescribeFirewallResponse

-- | Detailed information about the current status of a Firewall. You can
--   retrieve this for a firewall by calling DescribeFirewall and providing
--   the firewall name and ARN.
[$sel:firewallStatus:DescribeFirewallResponse'] :: DescribeFirewallResponse -> Maybe FirewallStatus

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
[$sel:updateToken:DescribeFirewallResponse'] :: DescribeFirewallResponse -> Maybe Text

-- | The configuration settings for the firewall. These settings include
--   the firewall policy and the subnets in your VPC to use for the
--   firewall endpoints.
[$sel:firewall:DescribeFirewallResponse'] :: DescribeFirewallResponse -> Maybe Firewall

-- | The response's http status code.
[$sel:httpStatus:DescribeFirewallResponse'] :: DescribeFirewallResponse -> Int

-- | Create a value of <a>DescribeFirewallResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:firewallStatus:DescribeFirewallResponse'</a>,
--   <a>describeFirewallResponse_firewallStatus</a> - Detailed information
--   about the current status of a Firewall. You can retrieve this for a
--   firewall by calling DescribeFirewall and providing the firewall name
--   and ARN.
--   
--   <a>$sel:updateToken:DescribeFirewallResponse'</a>,
--   <a>describeFirewallResponse_updateToken</a> - An optional token that
--   you can use for optimistic locking. Network Firewall returns a token
--   to your requests that access the firewall. The token marks the state
--   of the firewall resource at the time of the request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
--   
--   <a>$sel:firewall:DescribeFirewallResponse'</a>,
--   <a>describeFirewallResponse_firewall</a> - The configuration settings
--   for the firewall. These settings include the firewall policy and the
--   subnets in your VPC to use for the firewall endpoints.
--   
--   <a>$sel:httpStatus:DescribeFirewallResponse'</a>,
--   <a>describeFirewallResponse_httpStatus</a> - The response's http
--   status code.
newDescribeFirewallResponse :: Int -> DescribeFirewallResponse

-- | Detailed information about the current status of a Firewall. You can
--   retrieve this for a firewall by calling DescribeFirewall and providing
--   the firewall name and ARN.
describeFirewallResponse_firewallStatus :: Lens' DescribeFirewallResponse (Maybe FirewallStatus)

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
describeFirewallResponse_updateToken :: Lens' DescribeFirewallResponse (Maybe Text)

-- | The configuration settings for the firewall. These settings include
--   the firewall policy and the subnets in your VPC to use for the
--   firewall endpoints.
describeFirewallResponse_firewall :: Lens' DescribeFirewallResponse (Maybe Firewall)

-- | The response's http status code.
describeFirewallResponse_httpStatus :: Lens' DescribeFirewallResponse Int
instance GHC.Generics.Generic Amazonka.NetworkFirewall.DescribeFirewall.DescribeFirewall
instance GHC.Show.Show Amazonka.NetworkFirewall.DescribeFirewall.DescribeFirewall
instance GHC.Read.Read Amazonka.NetworkFirewall.DescribeFirewall.DescribeFirewall
instance GHC.Classes.Eq Amazonka.NetworkFirewall.DescribeFirewall.DescribeFirewall
instance GHC.Generics.Generic Amazonka.NetworkFirewall.DescribeFirewall.DescribeFirewallResponse
instance GHC.Show.Show Amazonka.NetworkFirewall.DescribeFirewall.DescribeFirewallResponse
instance GHC.Read.Read Amazonka.NetworkFirewall.DescribeFirewall.DescribeFirewallResponse
instance GHC.Classes.Eq Amazonka.NetworkFirewall.DescribeFirewall.DescribeFirewallResponse
instance Amazonka.Types.AWSRequest Amazonka.NetworkFirewall.DescribeFirewall.DescribeFirewall
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.DescribeFirewall.DescribeFirewallResponse
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.DescribeFirewall.DescribeFirewall
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.DescribeFirewall.DescribeFirewall
instance Amazonka.Data.Headers.ToHeaders Amazonka.NetworkFirewall.DescribeFirewall.DescribeFirewall
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.DescribeFirewall.DescribeFirewall
instance Amazonka.Data.Path.ToPath Amazonka.NetworkFirewall.DescribeFirewall.DescribeFirewall
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.DescribeFirewall.DescribeFirewall


-- | Deletes the specified RuleGroup.
module Amazonka.NetworkFirewall.DeleteRuleGroup

-- | <i>See:</i> <a>newDeleteRuleGroup</a> smart constructor.
data DeleteRuleGroup
DeleteRuleGroup' :: Maybe Text -> Maybe RuleGroupType -> Maybe Text -> DeleteRuleGroup

-- | The Amazon Resource Name (ARN) of the rule group.
--   
--   You must specify the ARN or the name, and you can specify both.
[$sel:ruleGroupArn:DeleteRuleGroup'] :: DeleteRuleGroup -> Maybe Text

-- | Indicates whether the rule group is stateless or stateful. If the rule
--   group is stateless, it contains stateless rules. If it is stateful, it
--   contains stateful rules.
--   
--   This setting is required for requests that do not include the
--   <tt>RuleGroupARN</tt>.
[$sel:type':DeleteRuleGroup'] :: DeleteRuleGroup -> Maybe RuleGroupType

-- | The descriptive name of the rule group. You can't change the name of a
--   rule group after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
[$sel:ruleGroupName:DeleteRuleGroup'] :: DeleteRuleGroup -> Maybe Text

-- | Create a value of <a>DeleteRuleGroup</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:ruleGroupArn:DeleteRuleGroup'</a>,
--   <a>deleteRuleGroup_ruleGroupArn</a> - The Amazon Resource Name (ARN)
--   of the rule group.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:type':DeleteRuleGroup'</a>, <a>deleteRuleGroup_type</a> -
--   Indicates whether the rule group is stateless or stateful. If the rule
--   group is stateless, it contains stateless rules. If it is stateful, it
--   contains stateful rules.
--   
--   This setting is required for requests that do not include the
--   <tt>RuleGroupARN</tt>.
--   
--   <a>$sel:ruleGroupName:DeleteRuleGroup'</a>,
--   <a>deleteRuleGroup_ruleGroupName</a> - The descriptive name of the
--   rule group. You can't change the name of a rule group after you create
--   it.
--   
--   You must specify the ARN or the name, and you can specify both.
newDeleteRuleGroup :: DeleteRuleGroup

-- | The Amazon Resource Name (ARN) of the rule group.
--   
--   You must specify the ARN or the name, and you can specify both.
deleteRuleGroup_ruleGroupArn :: Lens' DeleteRuleGroup (Maybe Text)

-- | Indicates whether the rule group is stateless or stateful. If the rule
--   group is stateless, it contains stateless rules. If it is stateful, it
--   contains stateful rules.
--   
--   This setting is required for requests that do not include the
--   <tt>RuleGroupARN</tt>.
deleteRuleGroup_type :: Lens' DeleteRuleGroup (Maybe RuleGroupType)

-- | The descriptive name of the rule group. You can't change the name of a
--   rule group after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
deleteRuleGroup_ruleGroupName :: Lens' DeleteRuleGroup (Maybe Text)

-- | <i>See:</i> <a>newDeleteRuleGroupResponse</a> smart constructor.
data DeleteRuleGroupResponse
DeleteRuleGroupResponse' :: Int -> RuleGroupResponse -> DeleteRuleGroupResponse

-- | The response's http status code.
[$sel:httpStatus:DeleteRuleGroupResponse'] :: DeleteRuleGroupResponse -> Int

-- | The high-level properties of a rule group. This, along with the
--   RuleGroup, define the rule group. You can retrieve all objects for a
--   rule group by calling DescribeRuleGroup.
[$sel:ruleGroupResponse:DeleteRuleGroupResponse'] :: DeleteRuleGroupResponse -> RuleGroupResponse

-- | Create a value of <a>DeleteRuleGroupResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteRuleGroupResponse'</a>,
--   <a>deleteRuleGroupResponse_httpStatus</a> - The response's http status
--   code.
--   
--   <a>$sel:ruleGroupResponse:DeleteRuleGroupResponse'</a>,
--   <a>deleteRuleGroupResponse_ruleGroupResponse</a> - The high-level
--   properties of a rule group. This, along with the RuleGroup, define the
--   rule group. You can retrieve all objects for a rule group by calling
--   DescribeRuleGroup.
newDeleteRuleGroupResponse :: Int -> RuleGroupResponse -> DeleteRuleGroupResponse

-- | The response's http status code.
deleteRuleGroupResponse_httpStatus :: Lens' DeleteRuleGroupResponse Int

-- | The high-level properties of a rule group. This, along with the
--   RuleGroup, define the rule group. You can retrieve all objects for a
--   rule group by calling DescribeRuleGroup.
deleteRuleGroupResponse_ruleGroupResponse :: Lens' DeleteRuleGroupResponse RuleGroupResponse
instance GHC.Generics.Generic Amazonka.NetworkFirewall.DeleteRuleGroup.DeleteRuleGroup
instance GHC.Show.Show Amazonka.NetworkFirewall.DeleteRuleGroup.DeleteRuleGroup
instance GHC.Read.Read Amazonka.NetworkFirewall.DeleteRuleGroup.DeleteRuleGroup
instance GHC.Classes.Eq Amazonka.NetworkFirewall.DeleteRuleGroup.DeleteRuleGroup
instance GHC.Generics.Generic Amazonka.NetworkFirewall.DeleteRuleGroup.DeleteRuleGroupResponse
instance GHC.Show.Show Amazonka.NetworkFirewall.DeleteRuleGroup.DeleteRuleGroupResponse
instance GHC.Read.Read Amazonka.NetworkFirewall.DeleteRuleGroup.DeleteRuleGroupResponse
instance GHC.Classes.Eq Amazonka.NetworkFirewall.DeleteRuleGroup.DeleteRuleGroupResponse
instance Amazonka.Types.AWSRequest Amazonka.NetworkFirewall.DeleteRuleGroup.DeleteRuleGroup
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.DeleteRuleGroup.DeleteRuleGroupResponse
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.DeleteRuleGroup.DeleteRuleGroup
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.DeleteRuleGroup.DeleteRuleGroup
instance Amazonka.Data.Headers.ToHeaders Amazonka.NetworkFirewall.DeleteRuleGroup.DeleteRuleGroup
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.DeleteRuleGroup.DeleteRuleGroup
instance Amazonka.Data.Path.ToPath Amazonka.NetworkFirewall.DeleteRuleGroup.DeleteRuleGroup
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.DeleteRuleGroup.DeleteRuleGroup


-- | Deletes a resource policy that you created in a PutResourcePolicy
--   request.
module Amazonka.NetworkFirewall.DeleteResourcePolicy

-- | <i>See:</i> <a>newDeleteResourcePolicy</a> smart constructor.
data DeleteResourcePolicy
DeleteResourcePolicy' :: Text -> DeleteResourcePolicy

-- | The Amazon Resource Name (ARN) of the rule group or firewall policy
--   whose resource policy you want to delete.
[$sel:resourceArn:DeleteResourcePolicy'] :: DeleteResourcePolicy -> Text

-- | Create a value of <a>DeleteResourcePolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:DeleteResourcePolicy'</a>,
--   <a>deleteResourcePolicy_resourceArn</a> - The Amazon Resource Name
--   (ARN) of the rule group or firewall policy whose resource policy you
--   want to delete.
newDeleteResourcePolicy :: Text -> DeleteResourcePolicy

-- | The Amazon Resource Name (ARN) of the rule group or firewall policy
--   whose resource policy you want to delete.
deleteResourcePolicy_resourceArn :: Lens' DeleteResourcePolicy Text

-- | <i>See:</i> <a>newDeleteResourcePolicyResponse</a> smart constructor.
data DeleteResourcePolicyResponse
DeleteResourcePolicyResponse' :: Int -> DeleteResourcePolicyResponse

-- | The response's http status code.
[$sel:httpStatus:DeleteResourcePolicyResponse'] :: DeleteResourcePolicyResponse -> Int

-- | Create a value of <a>DeleteResourcePolicyResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteResourcePolicyResponse'</a>,
--   <a>deleteResourcePolicyResponse_httpStatus</a> - The response's http
--   status code.
newDeleteResourcePolicyResponse :: Int -> DeleteResourcePolicyResponse

-- | The response's http status code.
deleteResourcePolicyResponse_httpStatus :: Lens' DeleteResourcePolicyResponse Int
instance GHC.Generics.Generic Amazonka.NetworkFirewall.DeleteResourcePolicy.DeleteResourcePolicy
instance GHC.Show.Show Amazonka.NetworkFirewall.DeleteResourcePolicy.DeleteResourcePolicy
instance GHC.Read.Read Amazonka.NetworkFirewall.DeleteResourcePolicy.DeleteResourcePolicy
instance GHC.Classes.Eq Amazonka.NetworkFirewall.DeleteResourcePolicy.DeleteResourcePolicy
instance GHC.Generics.Generic Amazonka.NetworkFirewall.DeleteResourcePolicy.DeleteResourcePolicyResponse
instance GHC.Show.Show Amazonka.NetworkFirewall.DeleteResourcePolicy.DeleteResourcePolicyResponse
instance GHC.Read.Read Amazonka.NetworkFirewall.DeleteResourcePolicy.DeleteResourcePolicyResponse
instance GHC.Classes.Eq Amazonka.NetworkFirewall.DeleteResourcePolicy.DeleteResourcePolicyResponse
instance Amazonka.Types.AWSRequest Amazonka.NetworkFirewall.DeleteResourcePolicy.DeleteResourcePolicy
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.DeleteResourcePolicy.DeleteResourcePolicyResponse
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.DeleteResourcePolicy.DeleteResourcePolicy
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.DeleteResourcePolicy.DeleteResourcePolicy
instance Amazonka.Data.Headers.ToHeaders Amazonka.NetworkFirewall.DeleteResourcePolicy.DeleteResourcePolicy
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.DeleteResourcePolicy.DeleteResourcePolicy
instance Amazonka.Data.Path.ToPath Amazonka.NetworkFirewall.DeleteResourcePolicy.DeleteResourcePolicy
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.DeleteResourcePolicy.DeleteResourcePolicy


-- | Deletes the specified FirewallPolicy.
module Amazonka.NetworkFirewall.DeleteFirewallPolicy

-- | <i>See:</i> <a>newDeleteFirewallPolicy</a> smart constructor.
data DeleteFirewallPolicy
DeleteFirewallPolicy' :: Maybe Text -> Maybe Text -> DeleteFirewallPolicy

-- | The descriptive name of the firewall policy. You can't change the name
--   of a firewall policy after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
[$sel:firewallPolicyName:DeleteFirewallPolicy'] :: DeleteFirewallPolicy -> Maybe Text

-- | The Amazon Resource Name (ARN) of the firewall policy.
--   
--   You must specify the ARN or the name, and you can specify both.
[$sel:firewallPolicyArn:DeleteFirewallPolicy'] :: DeleteFirewallPolicy -> Maybe Text

-- | Create a value of <a>DeleteFirewallPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:firewallPolicyName:DeleteFirewallPolicy'</a>,
--   <a>deleteFirewallPolicy_firewallPolicyName</a> - The descriptive name
--   of the firewall policy. You can't change the name of a firewall policy
--   after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:firewallPolicyArn:DeleteFirewallPolicy'</a>,
--   <a>deleteFirewallPolicy_firewallPolicyArn</a> - The Amazon Resource
--   Name (ARN) of the firewall policy.
--   
--   You must specify the ARN or the name, and you can specify both.
newDeleteFirewallPolicy :: DeleteFirewallPolicy

-- | The descriptive name of the firewall policy. You can't change the name
--   of a firewall policy after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
deleteFirewallPolicy_firewallPolicyName :: Lens' DeleteFirewallPolicy (Maybe Text)

-- | The Amazon Resource Name (ARN) of the firewall policy.
--   
--   You must specify the ARN or the name, and you can specify both.
deleteFirewallPolicy_firewallPolicyArn :: Lens' DeleteFirewallPolicy (Maybe Text)

-- | <i>See:</i> <a>newDeleteFirewallPolicyResponse</a> smart constructor.
data DeleteFirewallPolicyResponse
DeleteFirewallPolicyResponse' :: Int -> FirewallPolicyResponse -> DeleteFirewallPolicyResponse

-- | The response's http status code.
[$sel:httpStatus:DeleteFirewallPolicyResponse'] :: DeleteFirewallPolicyResponse -> Int

-- | The object containing the definition of the FirewallPolicyResponse
--   that you asked to delete.
[$sel:firewallPolicyResponse:DeleteFirewallPolicyResponse'] :: DeleteFirewallPolicyResponse -> FirewallPolicyResponse

-- | Create a value of <a>DeleteFirewallPolicyResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteFirewallPolicyResponse'</a>,
--   <a>deleteFirewallPolicyResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:firewallPolicyResponse:DeleteFirewallPolicyResponse'</a>,
--   <a>deleteFirewallPolicyResponse_firewallPolicyResponse</a> - The
--   object containing the definition of the FirewallPolicyResponse that
--   you asked to delete.
newDeleteFirewallPolicyResponse :: Int -> FirewallPolicyResponse -> DeleteFirewallPolicyResponse

-- | The response's http status code.
deleteFirewallPolicyResponse_httpStatus :: Lens' DeleteFirewallPolicyResponse Int

-- | The object containing the definition of the FirewallPolicyResponse
--   that you asked to delete.
deleteFirewallPolicyResponse_firewallPolicyResponse :: Lens' DeleteFirewallPolicyResponse FirewallPolicyResponse
instance GHC.Generics.Generic Amazonka.NetworkFirewall.DeleteFirewallPolicy.DeleteFirewallPolicy
instance GHC.Show.Show Amazonka.NetworkFirewall.DeleteFirewallPolicy.DeleteFirewallPolicy
instance GHC.Read.Read Amazonka.NetworkFirewall.DeleteFirewallPolicy.DeleteFirewallPolicy
instance GHC.Classes.Eq Amazonka.NetworkFirewall.DeleteFirewallPolicy.DeleteFirewallPolicy
instance GHC.Generics.Generic Amazonka.NetworkFirewall.DeleteFirewallPolicy.DeleteFirewallPolicyResponse
instance GHC.Show.Show Amazonka.NetworkFirewall.DeleteFirewallPolicy.DeleteFirewallPolicyResponse
instance GHC.Read.Read Amazonka.NetworkFirewall.DeleteFirewallPolicy.DeleteFirewallPolicyResponse
instance GHC.Classes.Eq Amazonka.NetworkFirewall.DeleteFirewallPolicy.DeleteFirewallPolicyResponse
instance Amazonka.Types.AWSRequest Amazonka.NetworkFirewall.DeleteFirewallPolicy.DeleteFirewallPolicy
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.DeleteFirewallPolicy.DeleteFirewallPolicyResponse
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.DeleteFirewallPolicy.DeleteFirewallPolicy
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.DeleteFirewallPolicy.DeleteFirewallPolicy
instance Amazonka.Data.Headers.ToHeaders Amazonka.NetworkFirewall.DeleteFirewallPolicy.DeleteFirewallPolicy
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.DeleteFirewallPolicy.DeleteFirewallPolicy
instance Amazonka.Data.Path.ToPath Amazonka.NetworkFirewall.DeleteFirewallPolicy.DeleteFirewallPolicy
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.DeleteFirewallPolicy.DeleteFirewallPolicy


-- | Deletes the specified Firewall and its FirewallStatus. This operation
--   requires the firewall's <tt>DeleteProtection</tt> flag to be
--   <tt>FALSE</tt>. You can't revert this operation.
--   
--   You can check whether a firewall is in use by reviewing the route
--   tables for the Availability Zones where you have firewall subnet
--   mappings. Retrieve the subnet mappings by calling DescribeFirewall.
--   You define and update the route tables through Amazon VPC. As needed,
--   update the route tables for the zones to remove the firewall
--   endpoints. When the route tables no longer use the firewall endpoints,
--   you can remove the firewall safely.
--   
--   To delete a firewall, remove the delete protection if you need to
--   using UpdateFirewallDeleteProtection, then delete the firewall by
--   calling DeleteFirewall.
module Amazonka.NetworkFirewall.DeleteFirewall

-- | <i>See:</i> <a>newDeleteFirewall</a> smart constructor.
data DeleteFirewall
DeleteFirewall' :: Maybe Text -> Maybe Text -> DeleteFirewall

-- | The Amazon Resource Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
[$sel:firewallArn:DeleteFirewall'] :: DeleteFirewall -> Maybe Text

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
[$sel:firewallName:DeleteFirewall'] :: DeleteFirewall -> Maybe Text

-- | Create a value of <a>DeleteFirewall</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:firewallArn:DeleteFirewall'</a>,
--   <a>deleteFirewall_firewallArn</a> - The Amazon Resource Name (ARN) of
--   the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:firewallName:DeleteFirewall'</a>,
--   <a>deleteFirewall_firewallName</a> - The descriptive name of the
--   firewall. You can't change the name of a firewall after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
newDeleteFirewall :: DeleteFirewall

-- | The Amazon Resource Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
deleteFirewall_firewallArn :: Lens' DeleteFirewall (Maybe Text)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
deleteFirewall_firewallName :: Lens' DeleteFirewall (Maybe Text)

-- | <i>See:</i> <a>newDeleteFirewallResponse</a> smart constructor.
data DeleteFirewallResponse
DeleteFirewallResponse' :: Maybe FirewallStatus -> Maybe Firewall -> Int -> DeleteFirewallResponse
[$sel:firewallStatus:DeleteFirewallResponse'] :: DeleteFirewallResponse -> Maybe FirewallStatus
[$sel:firewall:DeleteFirewallResponse'] :: DeleteFirewallResponse -> Maybe Firewall

-- | The response's http status code.
[$sel:httpStatus:DeleteFirewallResponse'] :: DeleteFirewallResponse -> Int

-- | Create a value of <a>DeleteFirewallResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:firewallStatus:DeleteFirewallResponse'</a>,
--   <a>deleteFirewallResponse_firewallStatus</a> - Undocumented member.
--   
--   <a>$sel:firewall:DeleteFirewallResponse'</a>,
--   <a>deleteFirewallResponse_firewall</a> - Undocumented member.
--   
--   <a>$sel:httpStatus:DeleteFirewallResponse'</a>,
--   <a>deleteFirewallResponse_httpStatus</a> - The response's http status
--   code.
newDeleteFirewallResponse :: Int -> DeleteFirewallResponse

-- | Undocumented member.
deleteFirewallResponse_firewallStatus :: Lens' DeleteFirewallResponse (Maybe FirewallStatus)

-- | Undocumented member.
deleteFirewallResponse_firewall :: Lens' DeleteFirewallResponse (Maybe Firewall)

-- | The response's http status code.
deleteFirewallResponse_httpStatus :: Lens' DeleteFirewallResponse Int
instance GHC.Generics.Generic Amazonka.NetworkFirewall.DeleteFirewall.DeleteFirewall
instance GHC.Show.Show Amazonka.NetworkFirewall.DeleteFirewall.DeleteFirewall
instance GHC.Read.Read Amazonka.NetworkFirewall.DeleteFirewall.DeleteFirewall
instance GHC.Classes.Eq Amazonka.NetworkFirewall.DeleteFirewall.DeleteFirewall
instance GHC.Generics.Generic Amazonka.NetworkFirewall.DeleteFirewall.DeleteFirewallResponse
instance GHC.Show.Show Amazonka.NetworkFirewall.DeleteFirewall.DeleteFirewallResponse
instance GHC.Read.Read Amazonka.NetworkFirewall.DeleteFirewall.DeleteFirewallResponse
instance GHC.Classes.Eq Amazonka.NetworkFirewall.DeleteFirewall.DeleteFirewallResponse
instance Amazonka.Types.AWSRequest Amazonka.NetworkFirewall.DeleteFirewall.DeleteFirewall
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.DeleteFirewall.DeleteFirewallResponse
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.DeleteFirewall.DeleteFirewall
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.DeleteFirewall.DeleteFirewall
instance Amazonka.Data.Headers.ToHeaders Amazonka.NetworkFirewall.DeleteFirewall.DeleteFirewall
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.DeleteFirewall.DeleteFirewall
instance Amazonka.Data.Path.ToPath Amazonka.NetworkFirewall.DeleteFirewall.DeleteFirewall
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.DeleteFirewall.DeleteFirewall


-- | Creates the specified stateless or stateful rule group, which includes
--   the rules for network traffic inspection, a capacity setting, and
--   tags.
--   
--   You provide your rule group specification in your request using either
--   <tt>RuleGroup</tt> or <tt>Rules</tt>.
module Amazonka.NetworkFirewall.CreateRuleGroup

-- | <i>See:</i> <a>newCreateRuleGroup</a> smart constructor.
data CreateRuleGroup
CreateRuleGroup' :: Maybe Text -> Maybe Text -> Maybe Bool -> Maybe (NonEmpty Tag) -> Maybe RuleGroup -> Text -> RuleGroupType -> Int -> CreateRuleGroup

-- | A string containing stateful rule group rules specifications in
--   Suricata flat format, with one rule per line. Use this to import your
--   existing Suricata compatible rule groups.
--   
--   You must provide either this rules setting or a populated
--   <tt>RuleGroup</tt> setting, but not both.
--   
--   You can provide your rule group specification in Suricata flat format
--   through this setting when you create or update your rule group. The
--   call response returns a RuleGroup object that Network Firewall has
--   populated from your string.
[$sel:rules:CreateRuleGroup'] :: CreateRuleGroup -> Maybe Text

-- | A description of the rule group.
[$sel:description:CreateRuleGroup'] :: CreateRuleGroup -> Maybe Text

-- | Indicates whether you want Network Firewall to just check the validity
--   of the request, rather than run the request.
--   
--   If set to <tt>TRUE</tt>, Network Firewall checks whether the request
--   can run successfully, but doesn't actually make the requested changes.
--   The call returns the value that the request would return if you ran it
--   with dry run set to <tt>FALSE</tt>, but doesn't make additions or
--   changes to your resources. This option allows you to make sure that
--   you have the required permissions to run the request and that your
--   request parameters are valid.
--   
--   If set to <tt>FALSE</tt>, Network Firewall makes the requested changes
--   to your resources.
[$sel:dryRun:CreateRuleGroup'] :: CreateRuleGroup -> Maybe Bool

-- | The key:value pairs to associate with the resource.
[$sel:tags:CreateRuleGroup'] :: CreateRuleGroup -> Maybe (NonEmpty Tag)

-- | An object that defines the rule group rules.
--   
--   You must provide either this rule group setting or a <tt>Rules</tt>
--   setting, but not both.
[$sel:ruleGroup:CreateRuleGroup'] :: CreateRuleGroup -> Maybe RuleGroup

-- | The descriptive name of the rule group. You can't change the name of a
--   rule group after you create it.
[$sel:ruleGroupName:CreateRuleGroup'] :: CreateRuleGroup -> Text

-- | Indicates whether the rule group is stateless or stateful. If the rule
--   group is stateless, it contains stateless rules. If it is stateful, it
--   contains stateful rules.
[$sel:type':CreateRuleGroup'] :: CreateRuleGroup -> RuleGroupType

-- | The maximum operating resources that this rule group can use. Rule
--   group capacity is fixed at creation. When you update a rule group, you
--   are limited to this capacity. When you reference a rule group from a
--   firewall policy, Network Firewall reserves this capacity for the rule
--   group.
--   
--   You can retrieve the capacity that would be required for a rule group
--   before you create the rule group by calling CreateRuleGroup with
--   <tt>DryRun</tt> set to <tt>TRUE</tt>.
--   
--   You can't change or exceed this capacity when you update the rule
--   group, so leave room for your rule group to grow.
--   
--   <b>Capacity for a stateless rule group</b>
--   
--   For a stateless rule group, the capacity required is the sum of the
--   capacity requirements of the individual rules that you expect to have
--   in the rule group.
--   
--   To calculate the capacity requirement of a single rule, multiply the
--   capacity requirement values of each of the rule's match settings:
--   
--   <ul>
--   <li>A match setting with no criteria specified has a value of 1.</li>
--   <li>A match setting with <tt>Any</tt> specified has a value of 1.</li>
--   <li>All other match settings have a value equal to the number of
--   elements provided in the setting. For example, a protocol setting
--   ["UDP"] and a source setting ["10.0.0.0/24"] each have a value of 1. A
--   protocol setting ["UDP","TCP"] has a value of 2. A source setting
--   ["10.0.0.0/24","10.0.0.1/24","10.0.0.2/24"] has a value of 3.</li>
--   </ul>
--   
--   A rule with no criteria specified in any of its match settings has a
--   capacity requirement of 1. A rule with protocol setting ["UDP","TCP"],
--   source setting ["10.0.0.0/24","10.0.0.1/24","10.0.0.2/24"], and a
--   single specification or no specification for each of the other match
--   settings has a capacity requirement of 6.
--   
--   <b>Capacity for a stateful rule group</b>
--   
--   For a stateful rule group, the minimum capacity required is the number
--   of individual rules that you expect to have in the rule group.
[$sel:capacity:CreateRuleGroup'] :: CreateRuleGroup -> Int

-- | Create a value of <a>CreateRuleGroup</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rules:CreateRuleGroup'</a>, <a>createRuleGroup_rules</a> - A
--   string containing stateful rule group rules specifications in Suricata
--   flat format, with one rule per line. Use this to import your existing
--   Suricata compatible rule groups.
--   
--   You must provide either this rules setting or a populated
--   <tt>RuleGroup</tt> setting, but not both.
--   
--   You can provide your rule group specification in Suricata flat format
--   through this setting when you create or update your rule group. The
--   call response returns a RuleGroup object that Network Firewall has
--   populated from your string.
--   
--   <a>$sel:description:CreateRuleGroup'</a>,
--   <a>createRuleGroup_description</a> - A description of the rule group.
--   
--   <a>$sel:dryRun:CreateRuleGroup'</a>, <a>createRuleGroup_dryRun</a> -
--   Indicates whether you want Network Firewall to just check the validity
--   of the request, rather than run the request.
--   
--   If set to <tt>TRUE</tt>, Network Firewall checks whether the request
--   can run successfully, but doesn't actually make the requested changes.
--   The call returns the value that the request would return if you ran it
--   with dry run set to <tt>FALSE</tt>, but doesn't make additions or
--   changes to your resources. This option allows you to make sure that
--   you have the required permissions to run the request and that your
--   request parameters are valid.
--   
--   If set to <tt>FALSE</tt>, Network Firewall makes the requested changes
--   to your resources.
--   
--   <a>$sel:tags:CreateRuleGroup'</a>, <a>createRuleGroup_tags</a> - The
--   key:value pairs to associate with the resource.
--   
--   <a>$sel:ruleGroup:CreateRuleGroup'</a>,
--   <a>createRuleGroup_ruleGroup</a> - An object that defines the rule
--   group rules.
--   
--   You must provide either this rule group setting or a <tt>Rules</tt>
--   setting, but not both.
--   
--   <a>$sel:ruleGroupName:CreateRuleGroup'</a>,
--   <a>createRuleGroup_ruleGroupName</a> - The descriptive name of the
--   rule group. You can't change the name of a rule group after you create
--   it.
--   
--   <a>$sel:type':CreateRuleGroup'</a>, <a>createRuleGroup_type</a> -
--   Indicates whether the rule group is stateless or stateful. If the rule
--   group is stateless, it contains stateless rules. If it is stateful, it
--   contains stateful rules.
--   
--   <a>$sel:capacity:CreateRuleGroup'</a>, <a>createRuleGroup_capacity</a>
--   - The maximum operating resources that this rule group can use. Rule
--   group capacity is fixed at creation. When you update a rule group, you
--   are limited to this capacity. When you reference a rule group from a
--   firewall policy, Network Firewall reserves this capacity for the rule
--   group.
--   
--   You can retrieve the capacity that would be required for a rule group
--   before you create the rule group by calling CreateRuleGroup with
--   <tt>DryRun</tt> set to <tt>TRUE</tt>.
--   
--   You can't change or exceed this capacity when you update the rule
--   group, so leave room for your rule group to grow.
--   
--   <b>Capacity for a stateless rule group</b>
--   
--   For a stateless rule group, the capacity required is the sum of the
--   capacity requirements of the individual rules that you expect to have
--   in the rule group.
--   
--   To calculate the capacity requirement of a single rule, multiply the
--   capacity requirement values of each of the rule's match settings:
--   
--   <ul>
--   <li>A match setting with no criteria specified has a value of 1.</li>
--   <li>A match setting with <tt>Any</tt> specified has a value of 1.</li>
--   <li>All other match settings have a value equal to the number of
--   elements provided in the setting. For example, a protocol setting
--   ["UDP"] and a source setting ["10.0.0.0/24"] each have a value of 1. A
--   protocol setting ["UDP","TCP"] has a value of 2. A source setting
--   ["10.0.0.0/24","10.0.0.1/24","10.0.0.2/24"] has a value of 3.</li>
--   </ul>
--   
--   A rule with no criteria specified in any of its match settings has a
--   capacity requirement of 1. A rule with protocol setting ["UDP","TCP"],
--   source setting ["10.0.0.0/24","10.0.0.1/24","10.0.0.2/24"], and a
--   single specification or no specification for each of the other match
--   settings has a capacity requirement of 6.
--   
--   <b>Capacity for a stateful rule group</b>
--   
--   For a stateful rule group, the minimum capacity required is the number
--   of individual rules that you expect to have in the rule group.
newCreateRuleGroup :: Text -> RuleGroupType -> Int -> CreateRuleGroup

-- | A string containing stateful rule group rules specifications in
--   Suricata flat format, with one rule per line. Use this to import your
--   existing Suricata compatible rule groups.
--   
--   You must provide either this rules setting or a populated
--   <tt>RuleGroup</tt> setting, but not both.
--   
--   You can provide your rule group specification in Suricata flat format
--   through this setting when you create or update your rule group. The
--   call response returns a RuleGroup object that Network Firewall has
--   populated from your string.
createRuleGroup_rules :: Lens' CreateRuleGroup (Maybe Text)

-- | A description of the rule group.
createRuleGroup_description :: Lens' CreateRuleGroup (Maybe Text)

-- | Indicates whether you want Network Firewall to just check the validity
--   of the request, rather than run the request.
--   
--   If set to <tt>TRUE</tt>, Network Firewall checks whether the request
--   can run successfully, but doesn't actually make the requested changes.
--   The call returns the value that the request would return if you ran it
--   with dry run set to <tt>FALSE</tt>, but doesn't make additions or
--   changes to your resources. This option allows you to make sure that
--   you have the required permissions to run the request and that your
--   request parameters are valid.
--   
--   If set to <tt>FALSE</tt>, Network Firewall makes the requested changes
--   to your resources.
createRuleGroup_dryRun :: Lens' CreateRuleGroup (Maybe Bool)

-- | The key:value pairs to associate with the resource.
createRuleGroup_tags :: Lens' CreateRuleGroup (Maybe (NonEmpty Tag))

-- | An object that defines the rule group rules.
--   
--   You must provide either this rule group setting or a <tt>Rules</tt>
--   setting, but not both.
createRuleGroup_ruleGroup :: Lens' CreateRuleGroup (Maybe RuleGroup)

-- | The descriptive name of the rule group. You can't change the name of a
--   rule group after you create it.
createRuleGroup_ruleGroupName :: Lens' CreateRuleGroup Text

-- | Indicates whether the rule group is stateless or stateful. If the rule
--   group is stateless, it contains stateless rules. If it is stateful, it
--   contains stateful rules.
createRuleGroup_type :: Lens' CreateRuleGroup RuleGroupType

-- | The maximum operating resources that this rule group can use. Rule
--   group capacity is fixed at creation. When you update a rule group, you
--   are limited to this capacity. When you reference a rule group from a
--   firewall policy, Network Firewall reserves this capacity for the rule
--   group.
--   
--   You can retrieve the capacity that would be required for a rule group
--   before you create the rule group by calling CreateRuleGroup with
--   <tt>DryRun</tt> set to <tt>TRUE</tt>.
--   
--   You can't change or exceed this capacity when you update the rule
--   group, so leave room for your rule group to grow.
--   
--   <b>Capacity for a stateless rule group</b>
--   
--   For a stateless rule group, the capacity required is the sum of the
--   capacity requirements of the individual rules that you expect to have
--   in the rule group.
--   
--   To calculate the capacity requirement of a single rule, multiply the
--   capacity requirement values of each of the rule's match settings:
--   
--   <ul>
--   <li>A match setting with no criteria specified has a value of 1.</li>
--   <li>A match setting with <tt>Any</tt> specified has a value of 1.</li>
--   <li>All other match settings have a value equal to the number of
--   elements provided in the setting. For example, a protocol setting
--   ["UDP"] and a source setting ["10.0.0.0/24"] each have a value of 1. A
--   protocol setting ["UDP","TCP"] has a value of 2. A source setting
--   ["10.0.0.0/24","10.0.0.1/24","10.0.0.2/24"] has a value of 3.</li>
--   </ul>
--   
--   A rule with no criteria specified in any of its match settings has a
--   capacity requirement of 1. A rule with protocol setting ["UDP","TCP"],
--   source setting ["10.0.0.0/24","10.0.0.1/24","10.0.0.2/24"], and a
--   single specification or no specification for each of the other match
--   settings has a capacity requirement of 6.
--   
--   <b>Capacity for a stateful rule group</b>
--   
--   For a stateful rule group, the minimum capacity required is the number
--   of individual rules that you expect to have in the rule group.
createRuleGroup_capacity :: Lens' CreateRuleGroup Int

-- | <i>See:</i> <a>newCreateRuleGroupResponse</a> smart constructor.
data CreateRuleGroupResponse
CreateRuleGroupResponse' :: Int -> Text -> RuleGroupResponse -> CreateRuleGroupResponse

-- | The response's http status code.
[$sel:httpStatus:CreateRuleGroupResponse'] :: CreateRuleGroupResponse -> Int

-- | A token used for optimistic locking. Network Firewall returns a token
--   to your requests that access the rule group. The token marks the state
--   of the rule group resource at the time of the request.
--   
--   To make changes to the rule group, you provide the token in your
--   request. Network Firewall uses the token to ensure that the rule group
--   hasn't changed since you last retrieved it. If it has changed, the
--   operation fails with an <tt>InvalidTokenException</tt>. If this
--   happens, retrieve the rule group again to get a current copy of it
--   with a current token. Reapply your changes as needed, then try the
--   operation again using the new token.
[$sel:updateToken:CreateRuleGroupResponse'] :: CreateRuleGroupResponse -> Text

-- | The high-level properties of a rule group. This, along with the
--   RuleGroup, define the rule group. You can retrieve all objects for a
--   rule group by calling DescribeRuleGroup.
[$sel:ruleGroupResponse:CreateRuleGroupResponse'] :: CreateRuleGroupResponse -> RuleGroupResponse

-- | Create a value of <a>CreateRuleGroupResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:CreateRuleGroupResponse'</a>,
--   <a>createRuleGroupResponse_httpStatus</a> - The response's http status
--   code.
--   
--   <a>$sel:updateToken:CreateRuleGroupResponse'</a>,
--   <a>createRuleGroupResponse_updateToken</a> - A token used for
--   optimistic locking. Network Firewall returns a token to your requests
--   that access the rule group. The token marks the state of the rule
--   group resource at the time of the request.
--   
--   To make changes to the rule group, you provide the token in your
--   request. Network Firewall uses the token to ensure that the rule group
--   hasn't changed since you last retrieved it. If it has changed, the
--   operation fails with an <tt>InvalidTokenException</tt>. If this
--   happens, retrieve the rule group again to get a current copy of it
--   with a current token. Reapply your changes as needed, then try the
--   operation again using the new token.
--   
--   <a>$sel:ruleGroupResponse:CreateRuleGroupResponse'</a>,
--   <a>createRuleGroupResponse_ruleGroupResponse</a> - The high-level
--   properties of a rule group. This, along with the RuleGroup, define the
--   rule group. You can retrieve all objects for a rule group by calling
--   DescribeRuleGroup.
newCreateRuleGroupResponse :: Int -> Text -> RuleGroupResponse -> CreateRuleGroupResponse

-- | The response's http status code.
createRuleGroupResponse_httpStatus :: Lens' CreateRuleGroupResponse Int

-- | A token used for optimistic locking. Network Firewall returns a token
--   to your requests that access the rule group. The token marks the state
--   of the rule group resource at the time of the request.
--   
--   To make changes to the rule group, you provide the token in your
--   request. Network Firewall uses the token to ensure that the rule group
--   hasn't changed since you last retrieved it. If it has changed, the
--   operation fails with an <tt>InvalidTokenException</tt>. If this
--   happens, retrieve the rule group again to get a current copy of it
--   with a current token. Reapply your changes as needed, then try the
--   operation again using the new token.
createRuleGroupResponse_updateToken :: Lens' CreateRuleGroupResponse Text

-- | The high-level properties of a rule group. This, along with the
--   RuleGroup, define the rule group. You can retrieve all objects for a
--   rule group by calling DescribeRuleGroup.
createRuleGroupResponse_ruleGroupResponse :: Lens' CreateRuleGroupResponse RuleGroupResponse
instance GHC.Generics.Generic Amazonka.NetworkFirewall.CreateRuleGroup.CreateRuleGroup
instance GHC.Show.Show Amazonka.NetworkFirewall.CreateRuleGroup.CreateRuleGroup
instance GHC.Read.Read Amazonka.NetworkFirewall.CreateRuleGroup.CreateRuleGroup
instance GHC.Classes.Eq Amazonka.NetworkFirewall.CreateRuleGroup.CreateRuleGroup
instance GHC.Generics.Generic Amazonka.NetworkFirewall.CreateRuleGroup.CreateRuleGroupResponse
instance GHC.Show.Show Amazonka.NetworkFirewall.CreateRuleGroup.CreateRuleGroupResponse
instance GHC.Read.Read Amazonka.NetworkFirewall.CreateRuleGroup.CreateRuleGroupResponse
instance GHC.Classes.Eq Amazonka.NetworkFirewall.CreateRuleGroup.CreateRuleGroupResponse
instance Amazonka.Types.AWSRequest Amazonka.NetworkFirewall.CreateRuleGroup.CreateRuleGroup
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.CreateRuleGroup.CreateRuleGroupResponse
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.CreateRuleGroup.CreateRuleGroup
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.CreateRuleGroup.CreateRuleGroup
instance Amazonka.Data.Headers.ToHeaders Amazonka.NetworkFirewall.CreateRuleGroup.CreateRuleGroup
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.CreateRuleGroup.CreateRuleGroup
instance Amazonka.Data.Path.ToPath Amazonka.NetworkFirewall.CreateRuleGroup.CreateRuleGroup
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.CreateRuleGroup.CreateRuleGroup


-- | Creates the firewall policy for the firewall according to the
--   specifications.
--   
--   An AWS Network Firewall firewall policy defines the behavior of a
--   firewall, in a collection of stateless and stateful rule groups and
--   other settings. You can use one firewall policy for multiple
--   firewalls.
module Amazonka.NetworkFirewall.CreateFirewallPolicy

-- | <i>See:</i> <a>newCreateFirewallPolicy</a> smart constructor.
data CreateFirewallPolicy
CreateFirewallPolicy' :: Maybe Text -> Maybe Bool -> Maybe (NonEmpty Tag) -> Text -> FirewallPolicy -> CreateFirewallPolicy

-- | A description of the firewall policy.
[$sel:description:CreateFirewallPolicy'] :: CreateFirewallPolicy -> Maybe Text

-- | Indicates whether you want Network Firewall to just check the validity
--   of the request, rather than run the request.
--   
--   If set to <tt>TRUE</tt>, Network Firewall checks whether the request
--   can run successfully, but doesn't actually make the requested changes.
--   The call returns the value that the request would return if you ran it
--   with dry run set to <tt>FALSE</tt>, but doesn't make additions or
--   changes to your resources. This option allows you to make sure that
--   you have the required permissions to run the request and that your
--   request parameters are valid.
--   
--   If set to <tt>FALSE</tt>, Network Firewall makes the requested changes
--   to your resources.
[$sel:dryRun:CreateFirewallPolicy'] :: CreateFirewallPolicy -> Maybe Bool

-- | The key:value pairs to associate with the resource.
[$sel:tags:CreateFirewallPolicy'] :: CreateFirewallPolicy -> Maybe (NonEmpty Tag)

-- | The descriptive name of the firewall policy. You can't change the name
--   of a firewall policy after you create it.
[$sel:firewallPolicyName:CreateFirewallPolicy'] :: CreateFirewallPolicy -> Text

-- | The rule groups and policy actions to use in the firewall policy.
[$sel:firewallPolicy:CreateFirewallPolicy'] :: CreateFirewallPolicy -> FirewallPolicy

-- | Create a value of <a>CreateFirewallPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:description:CreateFirewallPolicy'</a>,
--   <a>createFirewallPolicy_description</a> - A description of the
--   firewall policy.
--   
--   <a>$sel:dryRun:CreateFirewallPolicy'</a>,
--   <a>createFirewallPolicy_dryRun</a> - Indicates whether you want
--   Network Firewall to just check the validity of the request, rather
--   than run the request.
--   
--   If set to <tt>TRUE</tt>, Network Firewall checks whether the request
--   can run successfully, but doesn't actually make the requested changes.
--   The call returns the value that the request would return if you ran it
--   with dry run set to <tt>FALSE</tt>, but doesn't make additions or
--   changes to your resources. This option allows you to make sure that
--   you have the required permissions to run the request and that your
--   request parameters are valid.
--   
--   If set to <tt>FALSE</tt>, Network Firewall makes the requested changes
--   to your resources.
--   
--   <a>$sel:tags:CreateFirewallPolicy'</a>,
--   <a>createFirewallPolicy_tags</a> - The key:value pairs to associate
--   with the resource.
--   
--   <a>$sel:firewallPolicyName:CreateFirewallPolicy'</a>,
--   <a>createFirewallPolicy_firewallPolicyName</a> - The descriptive name
--   of the firewall policy. You can't change the name of a firewall policy
--   after you create it.
--   
--   <a>$sel:firewallPolicy:CreateFirewallPolicy'</a>,
--   <a>createFirewallPolicy_firewallPolicy</a> - The rule groups and
--   policy actions to use in the firewall policy.
newCreateFirewallPolicy :: Text -> FirewallPolicy -> CreateFirewallPolicy

-- | A description of the firewall policy.
createFirewallPolicy_description :: Lens' CreateFirewallPolicy (Maybe Text)

-- | Indicates whether you want Network Firewall to just check the validity
--   of the request, rather than run the request.
--   
--   If set to <tt>TRUE</tt>, Network Firewall checks whether the request
--   can run successfully, but doesn't actually make the requested changes.
--   The call returns the value that the request would return if you ran it
--   with dry run set to <tt>FALSE</tt>, but doesn't make additions or
--   changes to your resources. This option allows you to make sure that
--   you have the required permissions to run the request and that your
--   request parameters are valid.
--   
--   If set to <tt>FALSE</tt>, Network Firewall makes the requested changes
--   to your resources.
createFirewallPolicy_dryRun :: Lens' CreateFirewallPolicy (Maybe Bool)

-- | The key:value pairs to associate with the resource.
createFirewallPolicy_tags :: Lens' CreateFirewallPolicy (Maybe (NonEmpty Tag))

-- | The descriptive name of the firewall policy. You can't change the name
--   of a firewall policy after you create it.
createFirewallPolicy_firewallPolicyName :: Lens' CreateFirewallPolicy Text

-- | The rule groups and policy actions to use in the firewall policy.
createFirewallPolicy_firewallPolicy :: Lens' CreateFirewallPolicy FirewallPolicy

-- | <i>See:</i> <a>newCreateFirewallPolicyResponse</a> smart constructor.
data CreateFirewallPolicyResponse
CreateFirewallPolicyResponse' :: Int -> Text -> FirewallPolicyResponse -> CreateFirewallPolicyResponse

-- | The response's http status code.
[$sel:httpStatus:CreateFirewallPolicyResponse'] :: CreateFirewallPolicyResponse -> Int

-- | A token used for optimistic locking. Network Firewall returns a token
--   to your requests that access the firewall policy. The token marks the
--   state of the policy resource at the time of the request.
--   
--   To make changes to the policy, you provide the token in your request.
--   Network Firewall uses the token to ensure that the policy hasn't
--   changed since you last retrieved it. If it has changed, the operation
--   fails with an <tt>InvalidTokenException</tt>. If this happens,
--   retrieve the firewall policy again to get a current copy of it with
--   current token. Reapply your changes as needed, then try the operation
--   again using the new token.
[$sel:updateToken:CreateFirewallPolicyResponse'] :: CreateFirewallPolicyResponse -> Text

-- | The high-level properties of a firewall policy. This, along with the
--   FirewallPolicy, define the policy. You can retrieve all objects for a
--   firewall policy by calling DescribeFirewallPolicy.
[$sel:firewallPolicyResponse:CreateFirewallPolicyResponse'] :: CreateFirewallPolicyResponse -> FirewallPolicyResponse

-- | Create a value of <a>CreateFirewallPolicyResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:CreateFirewallPolicyResponse'</a>,
--   <a>createFirewallPolicyResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:updateToken:CreateFirewallPolicyResponse'</a>,
--   <a>createFirewallPolicyResponse_updateToken</a> - A token used for
--   optimistic locking. Network Firewall returns a token to your requests
--   that access the firewall policy. The token marks the state of the
--   policy resource at the time of the request.
--   
--   To make changes to the policy, you provide the token in your request.
--   Network Firewall uses the token to ensure that the policy hasn't
--   changed since you last retrieved it. If it has changed, the operation
--   fails with an <tt>InvalidTokenException</tt>. If this happens,
--   retrieve the firewall policy again to get a current copy of it with
--   current token. Reapply your changes as needed, then try the operation
--   again using the new token.
--   
--   <a>$sel:firewallPolicyResponse:CreateFirewallPolicyResponse'</a>,
--   <a>createFirewallPolicyResponse_firewallPolicyResponse</a> - The
--   high-level properties of a firewall policy. This, along with the
--   FirewallPolicy, define the policy. You can retrieve all objects for a
--   firewall policy by calling DescribeFirewallPolicy.
newCreateFirewallPolicyResponse :: Int -> Text -> FirewallPolicyResponse -> CreateFirewallPolicyResponse

-- | The response's http status code.
createFirewallPolicyResponse_httpStatus :: Lens' CreateFirewallPolicyResponse Int

-- | A token used for optimistic locking. Network Firewall returns a token
--   to your requests that access the firewall policy. The token marks the
--   state of the policy resource at the time of the request.
--   
--   To make changes to the policy, you provide the token in your request.
--   Network Firewall uses the token to ensure that the policy hasn't
--   changed since you last retrieved it. If it has changed, the operation
--   fails with an <tt>InvalidTokenException</tt>. If this happens,
--   retrieve the firewall policy again to get a current copy of it with
--   current token. Reapply your changes as needed, then try the operation
--   again using the new token.
createFirewallPolicyResponse_updateToken :: Lens' CreateFirewallPolicyResponse Text

-- | The high-level properties of a firewall policy. This, along with the
--   FirewallPolicy, define the policy. You can retrieve all objects for a
--   firewall policy by calling DescribeFirewallPolicy.
createFirewallPolicyResponse_firewallPolicyResponse :: Lens' CreateFirewallPolicyResponse FirewallPolicyResponse
instance GHC.Generics.Generic Amazonka.NetworkFirewall.CreateFirewallPolicy.CreateFirewallPolicy
instance GHC.Show.Show Amazonka.NetworkFirewall.CreateFirewallPolicy.CreateFirewallPolicy
instance GHC.Read.Read Amazonka.NetworkFirewall.CreateFirewallPolicy.CreateFirewallPolicy
instance GHC.Classes.Eq Amazonka.NetworkFirewall.CreateFirewallPolicy.CreateFirewallPolicy
instance GHC.Generics.Generic Amazonka.NetworkFirewall.CreateFirewallPolicy.CreateFirewallPolicyResponse
instance GHC.Show.Show Amazonka.NetworkFirewall.CreateFirewallPolicy.CreateFirewallPolicyResponse
instance GHC.Read.Read Amazonka.NetworkFirewall.CreateFirewallPolicy.CreateFirewallPolicyResponse
instance GHC.Classes.Eq Amazonka.NetworkFirewall.CreateFirewallPolicy.CreateFirewallPolicyResponse
instance Amazonka.Types.AWSRequest Amazonka.NetworkFirewall.CreateFirewallPolicy.CreateFirewallPolicy
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.CreateFirewallPolicy.CreateFirewallPolicyResponse
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.CreateFirewallPolicy.CreateFirewallPolicy
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.CreateFirewallPolicy.CreateFirewallPolicy
instance Amazonka.Data.Headers.ToHeaders Amazonka.NetworkFirewall.CreateFirewallPolicy.CreateFirewallPolicy
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.CreateFirewallPolicy.CreateFirewallPolicy
instance Amazonka.Data.Path.ToPath Amazonka.NetworkFirewall.CreateFirewallPolicy.CreateFirewallPolicy
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.CreateFirewallPolicy.CreateFirewallPolicy


-- | Creates an AWS Network Firewall Firewall and accompanying
--   FirewallStatus for a VPC.
--   
--   The firewall defines the configuration settings for an AWS Network
--   Firewall firewall. The settings that you can define at creation
--   include the firewall policy, the subnets in your VPC to use for the
--   firewall endpoints, and any tags that are attached to the firewall AWS
--   resource.
--   
--   After you create a firewall, you can provide additional settings, like
--   the logging configuration.
--   
--   To update the settings for a firewall, you use the operations that
--   apply to the settings themselves, for example
--   UpdateLoggingConfiguration, AssociateSubnets, and
--   UpdateFirewallDeleteProtection.
--   
--   To manage a firewall's tags, use the standard AWS resource tagging
--   operations, ListTagsForResource, TagResource, and UntagResource.
--   
--   To retrieve information about firewalls, use ListFirewalls and
--   DescribeFirewall.
module Amazonka.NetworkFirewall.CreateFirewall

-- | <i>See:</i> <a>newCreateFirewall</a> smart constructor.
data CreateFirewall
CreateFirewall' :: Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Text -> Maybe (NonEmpty Tag) -> Text -> Text -> Text -> [SubnetMapping] -> CreateFirewall

-- | A setting indicating whether the firewall is protected against a
--   change to the firewall policy association. Use this setting to protect
--   against accidentally modifying the firewall policy for a firewall that
--   is in use. When you create a firewall, the operation initializes this
--   setting to <tt>TRUE</tt>.
[$sel:firewallPolicyChangeProtection:CreateFirewall'] :: CreateFirewall -> Maybe Bool

-- | A setting indicating whether the firewall is protected against changes
--   to the subnet associations. Use this setting to protect against
--   accidentally modifying the subnet associations for a firewall that is
--   in use. When you create a firewall, the operation initializes this
--   setting to <tt>TRUE</tt>.
[$sel:subnetChangeProtection:CreateFirewall'] :: CreateFirewall -> Maybe Bool

-- | A flag indicating whether it is possible to delete the firewall. A
--   setting of <tt>TRUE</tt> indicates that the firewall is protected
--   against deletion. Use this setting to protect against accidentally
--   deleting a firewall that is in use. When you create a firewall, the
--   operation initializes this flag to <tt>TRUE</tt>.
[$sel:deleteProtection:CreateFirewall'] :: CreateFirewall -> Maybe Bool

-- | A description of the firewall.
[$sel:description:CreateFirewall'] :: CreateFirewall -> Maybe Text

-- | The key:value pairs to associate with the resource.
[$sel:tags:CreateFirewall'] :: CreateFirewall -> Maybe (NonEmpty Tag)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
[$sel:firewallName:CreateFirewall'] :: CreateFirewall -> Text

-- | The Amazon Resource Name (ARN) of the FirewallPolicy that you want to
--   use for the firewall.
[$sel:firewallPolicyArn:CreateFirewall'] :: CreateFirewall -> Text

-- | The unique identifier of the VPC where Network Firewall should create
--   the firewall.
--   
--   You can't change this setting after you create the firewall.
[$sel:vpcId:CreateFirewall'] :: CreateFirewall -> Text

-- | The public subnets to use for your Network Firewall firewalls. Each
--   subnet must belong to a different Availability Zone in the VPC.
--   Network Firewall creates a firewall endpoint in each subnet.
[$sel:subnetMappings:CreateFirewall'] :: CreateFirewall -> [SubnetMapping]

-- | Create a value of <a>CreateFirewall</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:firewallPolicyChangeProtection:CreateFirewall'</a>,
--   <a>createFirewall_firewallPolicyChangeProtection</a> - A setting
--   indicating whether the firewall is protected against a change to the
--   firewall policy association. Use this setting to protect against
--   accidentally modifying the firewall policy for a firewall that is in
--   use. When you create a firewall, the operation initializes this
--   setting to <tt>TRUE</tt>.
--   
--   <a>$sel:subnetChangeProtection:CreateFirewall'</a>,
--   <a>createFirewall_subnetChangeProtection</a> - A setting indicating
--   whether the firewall is protected against changes to the subnet
--   associations. Use this setting to protect against accidentally
--   modifying the subnet associations for a firewall that is in use. When
--   you create a firewall, the operation initializes this setting to
--   <tt>TRUE</tt>.
--   
--   <a>$sel:deleteProtection:CreateFirewall'</a>,
--   <a>createFirewall_deleteProtection</a> - A flag indicating whether it
--   is possible to delete the firewall. A setting of <tt>TRUE</tt>
--   indicates that the firewall is protected against deletion. Use this
--   setting to protect against accidentally deleting a firewall that is in
--   use. When you create a firewall, the operation initializes this flag
--   to <tt>TRUE</tt>.
--   
--   <a>$sel:description:CreateFirewall'</a>,
--   <a>createFirewall_description</a> - A description of the firewall.
--   
--   <a>$sel:tags:CreateFirewall'</a>, <a>createFirewall_tags</a> - The
--   key:value pairs to associate with the resource.
--   
--   <a>$sel:firewallName:CreateFirewall'</a>,
--   <a>createFirewall_firewallName</a> - The descriptive name of the
--   firewall. You can't change the name of a firewall after you create it.
--   
--   <a>$sel:firewallPolicyArn:CreateFirewall'</a>,
--   <a>createFirewall_firewallPolicyArn</a> - The Amazon Resource Name
--   (ARN) of the FirewallPolicy that you want to use for the firewall.
--   
--   <a>$sel:vpcId:CreateFirewall'</a>, <a>createFirewall_vpcId</a> - The
--   unique identifier of the VPC where Network Firewall should create the
--   firewall.
--   
--   You can't change this setting after you create the firewall.
--   
--   <a>$sel:subnetMappings:CreateFirewall'</a>,
--   <a>createFirewall_subnetMappings</a> - The public subnets to use for
--   your Network Firewall firewalls. Each subnet must belong to a
--   different Availability Zone in the VPC. Network Firewall creates a
--   firewall endpoint in each subnet.
newCreateFirewall :: Text -> Text -> Text -> CreateFirewall

-- | A setting indicating whether the firewall is protected against a
--   change to the firewall policy association. Use this setting to protect
--   against accidentally modifying the firewall policy for a firewall that
--   is in use. When you create a firewall, the operation initializes this
--   setting to <tt>TRUE</tt>.
createFirewall_firewallPolicyChangeProtection :: Lens' CreateFirewall (Maybe Bool)

-- | A setting indicating whether the firewall is protected against changes
--   to the subnet associations. Use this setting to protect against
--   accidentally modifying the subnet associations for a firewall that is
--   in use. When you create a firewall, the operation initializes this
--   setting to <tt>TRUE</tt>.
createFirewall_subnetChangeProtection :: Lens' CreateFirewall (Maybe Bool)

-- | A flag indicating whether it is possible to delete the firewall. A
--   setting of <tt>TRUE</tt> indicates that the firewall is protected
--   against deletion. Use this setting to protect against accidentally
--   deleting a firewall that is in use. When you create a firewall, the
--   operation initializes this flag to <tt>TRUE</tt>.
createFirewall_deleteProtection :: Lens' CreateFirewall (Maybe Bool)

-- | A description of the firewall.
createFirewall_description :: Lens' CreateFirewall (Maybe Text)

-- | The key:value pairs to associate with the resource.
createFirewall_tags :: Lens' CreateFirewall (Maybe (NonEmpty Tag))

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
createFirewall_firewallName :: Lens' CreateFirewall Text

-- | The Amazon Resource Name (ARN) of the FirewallPolicy that you want to
--   use for the firewall.
createFirewall_firewallPolicyArn :: Lens' CreateFirewall Text

-- | The unique identifier of the VPC where Network Firewall should create
--   the firewall.
--   
--   You can't change this setting after you create the firewall.
createFirewall_vpcId :: Lens' CreateFirewall Text

-- | The public subnets to use for your Network Firewall firewalls. Each
--   subnet must belong to a different Availability Zone in the VPC.
--   Network Firewall creates a firewall endpoint in each subnet.
createFirewall_subnetMappings :: Lens' CreateFirewall [SubnetMapping]

-- | <i>See:</i> <a>newCreateFirewallResponse</a> smart constructor.
data CreateFirewallResponse
CreateFirewallResponse' :: Maybe FirewallStatus -> Maybe Firewall -> Int -> CreateFirewallResponse

-- | Detailed information about the current status of a Firewall. You can
--   retrieve this for a firewall by calling DescribeFirewall and providing
--   the firewall name and ARN.
[$sel:firewallStatus:CreateFirewallResponse'] :: CreateFirewallResponse -> Maybe FirewallStatus

-- | The configuration settings for the firewall. These settings include
--   the firewall policy and the subnets in your VPC to use for the
--   firewall endpoints.
[$sel:firewall:CreateFirewallResponse'] :: CreateFirewallResponse -> Maybe Firewall

-- | The response's http status code.
[$sel:httpStatus:CreateFirewallResponse'] :: CreateFirewallResponse -> Int

-- | Create a value of <a>CreateFirewallResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:firewallStatus:CreateFirewallResponse'</a>,
--   <a>createFirewallResponse_firewallStatus</a> - Detailed information
--   about the current status of a Firewall. You can retrieve this for a
--   firewall by calling DescribeFirewall and providing the firewall name
--   and ARN.
--   
--   <a>$sel:firewall:CreateFirewallResponse'</a>,
--   <a>createFirewallResponse_firewall</a> - The configuration settings
--   for the firewall. These settings include the firewall policy and the
--   subnets in your VPC to use for the firewall endpoints.
--   
--   <a>$sel:httpStatus:CreateFirewallResponse'</a>,
--   <a>createFirewallResponse_httpStatus</a> - The response's http status
--   code.
newCreateFirewallResponse :: Int -> CreateFirewallResponse

-- | Detailed information about the current status of a Firewall. You can
--   retrieve this for a firewall by calling DescribeFirewall and providing
--   the firewall name and ARN.
createFirewallResponse_firewallStatus :: Lens' CreateFirewallResponse (Maybe FirewallStatus)

-- | The configuration settings for the firewall. These settings include
--   the firewall policy and the subnets in your VPC to use for the
--   firewall endpoints.
createFirewallResponse_firewall :: Lens' CreateFirewallResponse (Maybe Firewall)

-- | The response's http status code.
createFirewallResponse_httpStatus :: Lens' CreateFirewallResponse Int
instance GHC.Generics.Generic Amazonka.NetworkFirewall.CreateFirewall.CreateFirewall
instance GHC.Show.Show Amazonka.NetworkFirewall.CreateFirewall.CreateFirewall
instance GHC.Read.Read Amazonka.NetworkFirewall.CreateFirewall.CreateFirewall
instance GHC.Classes.Eq Amazonka.NetworkFirewall.CreateFirewall.CreateFirewall
instance GHC.Generics.Generic Amazonka.NetworkFirewall.CreateFirewall.CreateFirewallResponse
instance GHC.Show.Show Amazonka.NetworkFirewall.CreateFirewall.CreateFirewallResponse
instance GHC.Read.Read Amazonka.NetworkFirewall.CreateFirewall.CreateFirewallResponse
instance GHC.Classes.Eq Amazonka.NetworkFirewall.CreateFirewall.CreateFirewallResponse
instance Amazonka.Types.AWSRequest Amazonka.NetworkFirewall.CreateFirewall.CreateFirewall
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.CreateFirewall.CreateFirewallResponse
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.CreateFirewall.CreateFirewall
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.CreateFirewall.CreateFirewall
instance Amazonka.Data.Headers.ToHeaders Amazonka.NetworkFirewall.CreateFirewall.CreateFirewall
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.CreateFirewall.CreateFirewall
instance Amazonka.Data.Path.ToPath Amazonka.NetworkFirewall.CreateFirewall.CreateFirewall
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.CreateFirewall.CreateFirewall


-- | Associates the specified subnets in the Amazon VPC to the firewall.
--   You can specify one subnet for each of the Availability Zones that the
--   VPC spans.
--   
--   This request creates an AWS Network Firewall firewall endpoint in each
--   of the subnets. To enable the firewall's protections, you must also
--   modify the VPC's route tables for each subnet's Availability Zone, to
--   redirect the traffic that's coming into and going out of the zone
--   through the firewall endpoint.
module Amazonka.NetworkFirewall.AssociateSubnets

-- | <i>See:</i> <a>newAssociateSubnets</a> smart constructor.
data AssociateSubnets
AssociateSubnets' :: Maybe Text -> Maybe Text -> Maybe Text -> [SubnetMapping] -> AssociateSubnets

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
[$sel:updateToken:AssociateSubnets'] :: AssociateSubnets -> Maybe Text

-- | The Amazon Resource Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
[$sel:firewallArn:AssociateSubnets'] :: AssociateSubnets -> Maybe Text

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
[$sel:firewallName:AssociateSubnets'] :: AssociateSubnets -> Maybe Text

-- | The IDs of the subnets that you want to associate with the firewall.
[$sel:subnetMappings:AssociateSubnets'] :: AssociateSubnets -> [SubnetMapping]

-- | Create a value of <a>AssociateSubnets</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:updateToken:AssociateSubnets'</a>,
--   <a>associateSubnets_updateToken</a> - An optional token that you can
--   use for optimistic locking. Network Firewall returns a token to your
--   requests that access the firewall. The token marks the state of the
--   firewall resource at the time of the request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
--   
--   <a>$sel:firewallArn:AssociateSubnets'</a>,
--   <a>associateSubnets_firewallArn</a> - The Amazon Resource Name (ARN)
--   of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:firewallName:AssociateSubnets'</a>,
--   <a>associateSubnets_firewallName</a> - The descriptive name of the
--   firewall. You can't change the name of a firewall after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:subnetMappings:AssociateSubnets'</a>,
--   <a>associateSubnets_subnetMappings</a> - The IDs of the subnets that
--   you want to associate with the firewall.
newAssociateSubnets :: AssociateSubnets

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
associateSubnets_updateToken :: Lens' AssociateSubnets (Maybe Text)

-- | The Amazon Resource Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
associateSubnets_firewallArn :: Lens' AssociateSubnets (Maybe Text)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
associateSubnets_firewallName :: Lens' AssociateSubnets (Maybe Text)

-- | The IDs of the subnets that you want to associate with the firewall.
associateSubnets_subnetMappings :: Lens' AssociateSubnets [SubnetMapping]

-- | <i>See:</i> <a>newAssociateSubnetsResponse</a> smart constructor.
data AssociateSubnetsResponse
AssociateSubnetsResponse' :: Maybe [SubnetMapping] -> Maybe Text -> Maybe Text -> Maybe Text -> Int -> AssociateSubnetsResponse

-- | The IDs of the subnets that are associated with the firewall.
[$sel:subnetMappings:AssociateSubnetsResponse'] :: AssociateSubnetsResponse -> Maybe [SubnetMapping]

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
[$sel:updateToken:AssociateSubnetsResponse'] :: AssociateSubnetsResponse -> Maybe Text

-- | The Amazon Resource Name (ARN) of the firewall.
[$sel:firewallArn:AssociateSubnetsResponse'] :: AssociateSubnetsResponse -> Maybe Text

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
[$sel:firewallName:AssociateSubnetsResponse'] :: AssociateSubnetsResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:AssociateSubnetsResponse'] :: AssociateSubnetsResponse -> Int

-- | Create a value of <a>AssociateSubnetsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:subnetMappings:AssociateSubnets'</a>,
--   <a>associateSubnetsResponse_subnetMappings</a> - The IDs of the
--   subnets that are associated with the firewall.
--   
--   <a>$sel:updateToken:AssociateSubnets'</a>,
--   <a>associateSubnetsResponse_updateToken</a> - An optional token that
--   you can use for optimistic locking. Network Firewall returns a token
--   to your requests that access the firewall. The token marks the state
--   of the firewall resource at the time of the request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
--   
--   <a>$sel:firewallArn:AssociateSubnets'</a>,
--   <a>associateSubnetsResponse_firewallArn</a> - The Amazon Resource Name
--   (ARN) of the firewall.
--   
--   <a>$sel:firewallName:AssociateSubnets'</a>,
--   <a>associateSubnetsResponse_firewallName</a> - The descriptive name of
--   the firewall. You can't change the name of a firewall after you create
--   it.
--   
--   <a>$sel:httpStatus:AssociateSubnetsResponse'</a>,
--   <a>associateSubnetsResponse_httpStatus</a> - The response's http
--   status code.
newAssociateSubnetsResponse :: Int -> AssociateSubnetsResponse

-- | The IDs of the subnets that are associated with the firewall.
associateSubnetsResponse_subnetMappings :: Lens' AssociateSubnetsResponse (Maybe [SubnetMapping])

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
associateSubnetsResponse_updateToken :: Lens' AssociateSubnetsResponse (Maybe Text)

-- | The Amazon Resource Name (ARN) of the firewall.
associateSubnetsResponse_firewallArn :: Lens' AssociateSubnetsResponse (Maybe Text)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
associateSubnetsResponse_firewallName :: Lens' AssociateSubnetsResponse (Maybe Text)

-- | The response's http status code.
associateSubnetsResponse_httpStatus :: Lens' AssociateSubnetsResponse Int
instance GHC.Generics.Generic Amazonka.NetworkFirewall.AssociateSubnets.AssociateSubnets
instance GHC.Show.Show Amazonka.NetworkFirewall.AssociateSubnets.AssociateSubnets
instance GHC.Read.Read Amazonka.NetworkFirewall.AssociateSubnets.AssociateSubnets
instance GHC.Classes.Eq Amazonka.NetworkFirewall.AssociateSubnets.AssociateSubnets
instance GHC.Generics.Generic Amazonka.NetworkFirewall.AssociateSubnets.AssociateSubnetsResponse
instance GHC.Show.Show Amazonka.NetworkFirewall.AssociateSubnets.AssociateSubnetsResponse
instance GHC.Read.Read Amazonka.NetworkFirewall.AssociateSubnets.AssociateSubnetsResponse
instance GHC.Classes.Eq Amazonka.NetworkFirewall.AssociateSubnets.AssociateSubnetsResponse
instance Amazonka.Types.AWSRequest Amazonka.NetworkFirewall.AssociateSubnets.AssociateSubnets
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.AssociateSubnets.AssociateSubnetsResponse
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.AssociateSubnets.AssociateSubnets
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.AssociateSubnets.AssociateSubnets
instance Amazonka.Data.Headers.ToHeaders Amazonka.NetworkFirewall.AssociateSubnets.AssociateSubnets
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.AssociateSubnets.AssociateSubnets
instance Amazonka.Data.Path.ToPath Amazonka.NetworkFirewall.AssociateSubnets.AssociateSubnets
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.AssociateSubnets.AssociateSubnets


-- | Associates a FirewallPolicy to a Firewall.
--   
--   A firewall policy defines how to monitor and manage your VPC network
--   traffic, using a collection of inspection rule groups and other
--   settings. Each firewall requires one firewall policy association, and
--   you can use the same firewall policy for multiple firewalls.
module Amazonka.NetworkFirewall.AssociateFirewallPolicy

-- | <i>See:</i> <a>newAssociateFirewallPolicy</a> smart constructor.
data AssociateFirewallPolicy
AssociateFirewallPolicy' :: Maybe Text -> Maybe Text -> Maybe Text -> Text -> AssociateFirewallPolicy

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
[$sel:updateToken:AssociateFirewallPolicy'] :: AssociateFirewallPolicy -> Maybe Text

-- | The Amazon Resource Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
[$sel:firewallArn:AssociateFirewallPolicy'] :: AssociateFirewallPolicy -> Maybe Text

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
[$sel:firewallName:AssociateFirewallPolicy'] :: AssociateFirewallPolicy -> Maybe Text

-- | The Amazon Resource Name (ARN) of the firewall policy.
[$sel:firewallPolicyArn:AssociateFirewallPolicy'] :: AssociateFirewallPolicy -> Text

-- | Create a value of <a>AssociateFirewallPolicy</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:updateToken:AssociateFirewallPolicy'</a>,
--   <a>associateFirewallPolicy_updateToken</a> - An optional token that
--   you can use for optimistic locking. Network Firewall returns a token
--   to your requests that access the firewall. The token marks the state
--   of the firewall resource at the time of the request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
--   
--   <a>$sel:firewallArn:AssociateFirewallPolicy'</a>,
--   <a>associateFirewallPolicy_firewallArn</a> - The Amazon Resource Name
--   (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:firewallName:AssociateFirewallPolicy'</a>,
--   <a>associateFirewallPolicy_firewallName</a> - The descriptive name of
--   the firewall. You can't change the name of a firewall after you create
--   it.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:firewallPolicyArn:AssociateFirewallPolicy'</a>,
--   <a>associateFirewallPolicy_firewallPolicyArn</a> - The Amazon Resource
--   Name (ARN) of the firewall policy.
newAssociateFirewallPolicy :: Text -> AssociateFirewallPolicy

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
associateFirewallPolicy_updateToken :: Lens' AssociateFirewallPolicy (Maybe Text)

-- | The Amazon Resource Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
associateFirewallPolicy_firewallArn :: Lens' AssociateFirewallPolicy (Maybe Text)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
associateFirewallPolicy_firewallName :: Lens' AssociateFirewallPolicy (Maybe Text)

-- | The Amazon Resource Name (ARN) of the firewall policy.
associateFirewallPolicy_firewallPolicyArn :: Lens' AssociateFirewallPolicy Text

-- | <i>See:</i> <a>newAssociateFirewallPolicyResponse</a> smart
--   constructor.
data AssociateFirewallPolicyResponse
AssociateFirewallPolicyResponse' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Int -> AssociateFirewallPolicyResponse

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
[$sel:updateToken:AssociateFirewallPolicyResponse'] :: AssociateFirewallPolicyResponse -> Maybe Text

-- | The Amazon Resource Name (ARN) of the firewall.
[$sel:firewallArn:AssociateFirewallPolicyResponse'] :: AssociateFirewallPolicyResponse -> Maybe Text

-- | The Amazon Resource Name (ARN) of the firewall policy.
[$sel:firewallPolicyArn:AssociateFirewallPolicyResponse'] :: AssociateFirewallPolicyResponse -> Maybe Text

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
[$sel:firewallName:AssociateFirewallPolicyResponse'] :: AssociateFirewallPolicyResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:AssociateFirewallPolicyResponse'] :: AssociateFirewallPolicyResponse -> Int

-- | Create a value of <a>AssociateFirewallPolicyResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:updateToken:AssociateFirewallPolicy'</a>,
--   <a>associateFirewallPolicyResponse_updateToken</a> - An optional token
--   that you can use for optimistic locking. Network Firewall returns a
--   token to your requests that access the firewall. The token marks the
--   state of the firewall resource at the time of the request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
--   
--   <a>$sel:firewallArn:AssociateFirewallPolicy'</a>,
--   <a>associateFirewallPolicyResponse_firewallArn</a> - The Amazon
--   Resource Name (ARN) of the firewall.
--   
--   <a>$sel:firewallPolicyArn:AssociateFirewallPolicy'</a>,
--   <a>associateFirewallPolicyResponse_firewallPolicyArn</a> - The Amazon
--   Resource Name (ARN) of the firewall policy.
--   
--   <a>$sel:firewallName:AssociateFirewallPolicy'</a>,
--   <a>associateFirewallPolicyResponse_firewallName</a> - The descriptive
--   name of the firewall. You can't change the name of a firewall after
--   you create it.
--   
--   <a>$sel:httpStatus:AssociateFirewallPolicyResponse'</a>,
--   <a>associateFirewallPolicyResponse_httpStatus</a> - The response's
--   http status code.
newAssociateFirewallPolicyResponse :: Int -> AssociateFirewallPolicyResponse

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
associateFirewallPolicyResponse_updateToken :: Lens' AssociateFirewallPolicyResponse (Maybe Text)

-- | The Amazon Resource Name (ARN) of the firewall.
associateFirewallPolicyResponse_firewallArn :: Lens' AssociateFirewallPolicyResponse (Maybe Text)

-- | The Amazon Resource Name (ARN) of the firewall policy.
associateFirewallPolicyResponse_firewallPolicyArn :: Lens' AssociateFirewallPolicyResponse (Maybe Text)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
associateFirewallPolicyResponse_firewallName :: Lens' AssociateFirewallPolicyResponse (Maybe Text)

-- | The response's http status code.
associateFirewallPolicyResponse_httpStatus :: Lens' AssociateFirewallPolicyResponse Int
instance GHC.Generics.Generic Amazonka.NetworkFirewall.AssociateFirewallPolicy.AssociateFirewallPolicy
instance GHC.Show.Show Amazonka.NetworkFirewall.AssociateFirewallPolicy.AssociateFirewallPolicy
instance GHC.Read.Read Amazonka.NetworkFirewall.AssociateFirewallPolicy.AssociateFirewallPolicy
instance GHC.Classes.Eq Amazonka.NetworkFirewall.AssociateFirewallPolicy.AssociateFirewallPolicy
instance GHC.Generics.Generic Amazonka.NetworkFirewall.AssociateFirewallPolicy.AssociateFirewallPolicyResponse
instance GHC.Show.Show Amazonka.NetworkFirewall.AssociateFirewallPolicy.AssociateFirewallPolicyResponse
instance GHC.Read.Read Amazonka.NetworkFirewall.AssociateFirewallPolicy.AssociateFirewallPolicyResponse
instance GHC.Classes.Eq Amazonka.NetworkFirewall.AssociateFirewallPolicy.AssociateFirewallPolicyResponse
instance Amazonka.Types.AWSRequest Amazonka.NetworkFirewall.AssociateFirewallPolicy.AssociateFirewallPolicy
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.AssociateFirewallPolicy.AssociateFirewallPolicyResponse
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.AssociateFirewallPolicy.AssociateFirewallPolicy
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.AssociateFirewallPolicy.AssociateFirewallPolicy
instance Amazonka.Data.Headers.ToHeaders Amazonka.NetworkFirewall.AssociateFirewallPolicy.AssociateFirewallPolicy
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.AssociateFirewallPolicy.AssociateFirewallPolicy
instance Amazonka.Data.Path.ToPath Amazonka.NetworkFirewall.AssociateFirewallPolicy.AssociateFirewallPolicy
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.AssociateFirewallPolicy.AssociateFirewallPolicy


-- | Removes the tags with the specified keys from the specified resource.
--   Tags are key:value pairs that you can use to categorize and manage
--   your resources, for purposes like billing. For example, you might set
--   the tag key to "customer" and the value to the customer name or ID.
--   You can specify one or more tags to add to each AWS resource, up to 50
--   tags for a resource.
--   
--   You can manage tags for the AWS resources that you manage through AWS
--   Network Firewall: firewalls, firewall policies, and rule groups.
module Amazonka.NetworkFirewall.UntagResource

-- | <i>See:</i> <a>newUntagResource</a> smart constructor.
data UntagResource
UntagResource' :: Text -> NonEmpty Text -> UntagResource

-- | The Amazon Resource Name (ARN) of the resource.
[$sel:resourceArn:UntagResource'] :: UntagResource -> Text
[$sel:tagKeys:UntagResource'] :: UntagResource -> NonEmpty Text

-- | Create a value of <a>UntagResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:UntagResource'</a>,
--   <a>untagResource_resourceArn</a> - The Amazon Resource Name (ARN) of
--   the resource.
--   
--   <a>$sel:tagKeys:UntagResource'</a>, <a>untagResource_tagKeys</a> -
newUntagResource :: Text -> NonEmpty Text -> UntagResource

-- | The Amazon Resource Name (ARN) of the resource.
untagResource_resourceArn :: Lens' UntagResource Text

untagResource_tagKeys :: Lens' UntagResource (NonEmpty Text)

-- | <i>See:</i> <a>newUntagResourceResponse</a> smart constructor.
data UntagResourceResponse
UntagResourceResponse' :: Int -> UntagResourceResponse

-- | The response's http status code.
[$sel:httpStatus:UntagResourceResponse'] :: UntagResourceResponse -> Int

-- | Create a value of <a>UntagResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UntagResourceResponse'</a>,
--   <a>untagResourceResponse_httpStatus</a> - The response's http status
--   code.
newUntagResourceResponse :: Int -> UntagResourceResponse

-- | The response's http status code.
untagResourceResponse_httpStatus :: Lens' UntagResourceResponse Int
instance GHC.Generics.Generic Amazonka.NetworkFirewall.UntagResource.UntagResource
instance GHC.Show.Show Amazonka.NetworkFirewall.UntagResource.UntagResource
instance GHC.Read.Read Amazonka.NetworkFirewall.UntagResource.UntagResource
instance GHC.Classes.Eq Amazonka.NetworkFirewall.UntagResource.UntagResource
instance GHC.Generics.Generic Amazonka.NetworkFirewall.UntagResource.UntagResourceResponse
instance GHC.Show.Show Amazonka.NetworkFirewall.UntagResource.UntagResourceResponse
instance GHC.Read.Read Amazonka.NetworkFirewall.UntagResource.UntagResourceResponse
instance GHC.Classes.Eq Amazonka.NetworkFirewall.UntagResource.UntagResourceResponse
instance Amazonka.Types.AWSRequest Amazonka.NetworkFirewall.UntagResource.UntagResource
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.UntagResource.UntagResourceResponse
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.UntagResource.UntagResource
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.UntagResource.UntagResource
instance Amazonka.Data.Headers.ToHeaders Amazonka.NetworkFirewall.UntagResource.UntagResource
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.UntagResource.UntagResource
instance Amazonka.Data.Path.ToPath Amazonka.NetworkFirewall.UntagResource.UntagResource
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.UntagResource.UntagResource


-- | Modifies the flag, <tt>DeleteProtection</tt>, which indicates whether
--   it is possible to delete the firewall. If the flag is set to
--   <tt>TRUE</tt>, the firewall is protected against deletion. This
--   setting helps protect against accidentally deleting a firewall that's
--   in use.
module Amazonka.NetworkFirewall.UpdateFirewallDeleteProtection

-- | <i>See:</i> <a>newUpdateFirewallDeleteProtection</a> smart
--   constructor.
data UpdateFirewallDeleteProtection
UpdateFirewallDeleteProtection' :: Maybe Text -> Maybe Text -> Maybe Text -> Bool -> UpdateFirewallDeleteProtection

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
[$sel:updateToken:UpdateFirewallDeleteProtection'] :: UpdateFirewallDeleteProtection -> Maybe Text

-- | The Amazon Resource Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
[$sel:firewallArn:UpdateFirewallDeleteProtection'] :: UpdateFirewallDeleteProtection -> Maybe Text

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
[$sel:firewallName:UpdateFirewallDeleteProtection'] :: UpdateFirewallDeleteProtection -> Maybe Text

-- | A flag indicating whether it is possible to delete the firewall. A
--   setting of <tt>TRUE</tt> indicates that the firewall is protected
--   against deletion. Use this setting to protect against accidentally
--   deleting a firewall that is in use. When you create a firewall, the
--   operation initializes this flag to <tt>TRUE</tt>.
[$sel:deleteProtection:UpdateFirewallDeleteProtection'] :: UpdateFirewallDeleteProtection -> Bool

-- | Create a value of <a>UpdateFirewallDeleteProtection</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:updateToken:UpdateFirewallDeleteProtection'</a>,
--   <a>updateFirewallDeleteProtection_updateToken</a> - An optional token
--   that you can use for optimistic locking. Network Firewall returns a
--   token to your requests that access the firewall. The token marks the
--   state of the firewall resource at the time of the request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
--   
--   <a>$sel:firewallArn:UpdateFirewallDeleteProtection'</a>,
--   <a>updateFirewallDeleteProtection_firewallArn</a> - The Amazon
--   Resource Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:firewallName:UpdateFirewallDeleteProtection'</a>,
--   <a>updateFirewallDeleteProtection_firewallName</a> - The descriptive
--   name of the firewall. You can't change the name of a firewall after
--   you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:deleteProtection:UpdateFirewallDeleteProtection'</a>,
--   <a>updateFirewallDeleteProtection_deleteProtection</a> - A flag
--   indicating whether it is possible to delete the firewall. A setting of
--   <tt>TRUE</tt> indicates that the firewall is protected against
--   deletion. Use this setting to protect against accidentally deleting a
--   firewall that is in use. When you create a firewall, the operation
--   initializes this flag to <tt>TRUE</tt>.
newUpdateFirewallDeleteProtection :: Bool -> UpdateFirewallDeleteProtection

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
updateFirewallDeleteProtection_updateToken :: Lens' UpdateFirewallDeleteProtection (Maybe Text)

-- | The Amazon Resource Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
updateFirewallDeleteProtection_firewallArn :: Lens' UpdateFirewallDeleteProtection (Maybe Text)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
updateFirewallDeleteProtection_firewallName :: Lens' UpdateFirewallDeleteProtection (Maybe Text)

-- | A flag indicating whether it is possible to delete the firewall. A
--   setting of <tt>TRUE</tt> indicates that the firewall is protected
--   against deletion. Use this setting to protect against accidentally
--   deleting a firewall that is in use. When you create a firewall, the
--   operation initializes this flag to <tt>TRUE</tt>.
updateFirewallDeleteProtection_deleteProtection :: Lens' UpdateFirewallDeleteProtection Bool

-- | <i>See:</i> <a>newUpdateFirewallDeleteProtectionResponse</a> smart
--   constructor.
data UpdateFirewallDeleteProtectionResponse
UpdateFirewallDeleteProtectionResponse' :: Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Text -> Int -> UpdateFirewallDeleteProtectionResponse

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
[$sel:updateToken:UpdateFirewallDeleteProtectionResponse'] :: UpdateFirewallDeleteProtectionResponse -> Maybe Text

-- | The Amazon Resource Name (ARN) of the firewall.
[$sel:firewallArn:UpdateFirewallDeleteProtectionResponse'] :: UpdateFirewallDeleteProtectionResponse -> Maybe Text
[$sel:deleteProtection:UpdateFirewallDeleteProtectionResponse'] :: UpdateFirewallDeleteProtectionResponse -> Maybe Bool

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
[$sel:firewallName:UpdateFirewallDeleteProtectionResponse'] :: UpdateFirewallDeleteProtectionResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:UpdateFirewallDeleteProtectionResponse'] :: UpdateFirewallDeleteProtectionResponse -> Int

-- | Create a value of <a>UpdateFirewallDeleteProtectionResponse</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:updateToken:UpdateFirewallDeleteProtection'</a>,
--   <a>updateFirewallDeleteProtectionResponse_updateToken</a> - An
--   optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
--   
--   <a>$sel:firewallArn:UpdateFirewallDeleteProtection'</a>,
--   <a>updateFirewallDeleteProtectionResponse_firewallArn</a> - The Amazon
--   Resource Name (ARN) of the firewall.
--   
--   <a>$sel:deleteProtection:UpdateFirewallDeleteProtection'</a>,
--   <a>updateFirewallDeleteProtectionResponse_deleteProtection</a> -
--   
--   <a>$sel:firewallName:UpdateFirewallDeleteProtection'</a>,
--   <a>updateFirewallDeleteProtectionResponse_firewallName</a> - The
--   descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   <a>$sel:httpStatus:UpdateFirewallDeleteProtectionResponse'</a>,
--   <a>updateFirewallDeleteProtectionResponse_httpStatus</a> - The
--   response's http status code.
newUpdateFirewallDeleteProtectionResponse :: Int -> UpdateFirewallDeleteProtectionResponse

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
updateFirewallDeleteProtectionResponse_updateToken :: Lens' UpdateFirewallDeleteProtectionResponse (Maybe Text)

-- | The Amazon Resource Name (ARN) of the firewall.
updateFirewallDeleteProtectionResponse_firewallArn :: Lens' UpdateFirewallDeleteProtectionResponse (Maybe Text)

updateFirewallDeleteProtectionResponse_deleteProtection :: Lens' UpdateFirewallDeleteProtectionResponse (Maybe Bool)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
updateFirewallDeleteProtectionResponse_firewallName :: Lens' UpdateFirewallDeleteProtectionResponse (Maybe Text)

-- | The response's http status code.
updateFirewallDeleteProtectionResponse_httpStatus :: Lens' UpdateFirewallDeleteProtectionResponse Int
instance GHC.Generics.Generic Amazonka.NetworkFirewall.UpdateFirewallDeleteProtection.UpdateFirewallDeleteProtection
instance GHC.Show.Show Amazonka.NetworkFirewall.UpdateFirewallDeleteProtection.UpdateFirewallDeleteProtection
instance GHC.Read.Read Amazonka.NetworkFirewall.UpdateFirewallDeleteProtection.UpdateFirewallDeleteProtection
instance GHC.Classes.Eq Amazonka.NetworkFirewall.UpdateFirewallDeleteProtection.UpdateFirewallDeleteProtection
instance GHC.Generics.Generic Amazonka.NetworkFirewall.UpdateFirewallDeleteProtection.UpdateFirewallDeleteProtectionResponse
instance GHC.Show.Show Amazonka.NetworkFirewall.UpdateFirewallDeleteProtection.UpdateFirewallDeleteProtectionResponse
instance GHC.Read.Read Amazonka.NetworkFirewall.UpdateFirewallDeleteProtection.UpdateFirewallDeleteProtectionResponse
instance GHC.Classes.Eq Amazonka.NetworkFirewall.UpdateFirewallDeleteProtection.UpdateFirewallDeleteProtectionResponse
instance Amazonka.Types.AWSRequest Amazonka.NetworkFirewall.UpdateFirewallDeleteProtection.UpdateFirewallDeleteProtection
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.UpdateFirewallDeleteProtection.UpdateFirewallDeleteProtectionResponse
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.UpdateFirewallDeleteProtection.UpdateFirewallDeleteProtection
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.UpdateFirewallDeleteProtection.UpdateFirewallDeleteProtection
instance Amazonka.Data.Headers.ToHeaders Amazonka.NetworkFirewall.UpdateFirewallDeleteProtection.UpdateFirewallDeleteProtection
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.UpdateFirewallDeleteProtection.UpdateFirewallDeleteProtection
instance Amazonka.Data.Path.ToPath Amazonka.NetworkFirewall.UpdateFirewallDeleteProtection.UpdateFirewallDeleteProtection
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.UpdateFirewallDeleteProtection.UpdateFirewallDeleteProtection


-- | Modifies the description for the specified firewall. Use the
--   description to help you identify the firewall when you're working with
--   it.
module Amazonka.NetworkFirewall.UpdateFirewallDescription

-- | <i>See:</i> <a>newUpdateFirewallDescription</a> smart constructor.
data UpdateFirewallDescription
UpdateFirewallDescription' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> UpdateFirewallDescription

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
[$sel:updateToken:UpdateFirewallDescription'] :: UpdateFirewallDescription -> Maybe Text

-- | The Amazon Resource Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
[$sel:firewallArn:UpdateFirewallDescription'] :: UpdateFirewallDescription -> Maybe Text

-- | The new description for the firewall. If you omit this setting,
--   Network Firewall removes the description for the firewall.
[$sel:description:UpdateFirewallDescription'] :: UpdateFirewallDescription -> Maybe Text

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
[$sel:firewallName:UpdateFirewallDescription'] :: UpdateFirewallDescription -> Maybe Text

-- | Create a value of <a>UpdateFirewallDescription</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:updateToken:UpdateFirewallDescription'</a>,
--   <a>updateFirewallDescription_updateToken</a> - An optional token that
--   you can use for optimistic locking. Network Firewall returns a token
--   to your requests that access the firewall. The token marks the state
--   of the firewall resource at the time of the request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
--   
--   <a>$sel:firewallArn:UpdateFirewallDescription'</a>,
--   <a>updateFirewallDescription_firewallArn</a> - The Amazon Resource
--   Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:description:UpdateFirewallDescription'</a>,
--   <a>updateFirewallDescription_description</a> - The new description for
--   the firewall. If you omit this setting, Network Firewall removes the
--   description for the firewall.
--   
--   <a>$sel:firewallName:UpdateFirewallDescription'</a>,
--   <a>updateFirewallDescription_firewallName</a> - The descriptive name
--   of the firewall. You can't change the name of a firewall after you
--   create it.
--   
--   You must specify the ARN or the name, and you can specify both.
newUpdateFirewallDescription :: UpdateFirewallDescription

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
updateFirewallDescription_updateToken :: Lens' UpdateFirewallDescription (Maybe Text)

-- | The Amazon Resource Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
updateFirewallDescription_firewallArn :: Lens' UpdateFirewallDescription (Maybe Text)

-- | The new description for the firewall. If you omit this setting,
--   Network Firewall removes the description for the firewall.
updateFirewallDescription_description :: Lens' UpdateFirewallDescription (Maybe Text)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
updateFirewallDescription_firewallName :: Lens' UpdateFirewallDescription (Maybe Text)

-- | <i>See:</i> <a>newUpdateFirewallDescriptionResponse</a> smart
--   constructor.
data UpdateFirewallDescriptionResponse
UpdateFirewallDescriptionResponse' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Int -> UpdateFirewallDescriptionResponse

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
[$sel:updateToken:UpdateFirewallDescriptionResponse'] :: UpdateFirewallDescriptionResponse -> Maybe Text

-- | The Amazon Resource Name (ARN) of the firewall.
[$sel:firewallArn:UpdateFirewallDescriptionResponse'] :: UpdateFirewallDescriptionResponse -> Maybe Text

-- | A description of the firewall.
[$sel:description:UpdateFirewallDescriptionResponse'] :: UpdateFirewallDescriptionResponse -> Maybe Text

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
[$sel:firewallName:UpdateFirewallDescriptionResponse'] :: UpdateFirewallDescriptionResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:UpdateFirewallDescriptionResponse'] :: UpdateFirewallDescriptionResponse -> Int

-- | Create a value of <a>UpdateFirewallDescriptionResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:updateToken:UpdateFirewallDescription'</a>,
--   <a>updateFirewallDescriptionResponse_updateToken</a> - An optional
--   token that you can use for optimistic locking. Network Firewall
--   returns a token to your requests that access the firewall. The token
--   marks the state of the firewall resource at the time of the request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
--   
--   <a>$sel:firewallArn:UpdateFirewallDescription'</a>,
--   <a>updateFirewallDescriptionResponse_firewallArn</a> - The Amazon
--   Resource Name (ARN) of the firewall.
--   
--   <a>$sel:description:UpdateFirewallDescription'</a>,
--   <a>updateFirewallDescriptionResponse_description</a> - A description
--   of the firewall.
--   
--   <a>$sel:firewallName:UpdateFirewallDescription'</a>,
--   <a>updateFirewallDescriptionResponse_firewallName</a> - The
--   descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   <a>$sel:httpStatus:UpdateFirewallDescriptionResponse'</a>,
--   <a>updateFirewallDescriptionResponse_httpStatus</a> - The response's
--   http status code.
newUpdateFirewallDescriptionResponse :: Int -> UpdateFirewallDescriptionResponse

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
updateFirewallDescriptionResponse_updateToken :: Lens' UpdateFirewallDescriptionResponse (Maybe Text)

-- | The Amazon Resource Name (ARN) of the firewall.
updateFirewallDescriptionResponse_firewallArn :: Lens' UpdateFirewallDescriptionResponse (Maybe Text)

-- | A description of the firewall.
updateFirewallDescriptionResponse_description :: Lens' UpdateFirewallDescriptionResponse (Maybe Text)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
updateFirewallDescriptionResponse_firewallName :: Lens' UpdateFirewallDescriptionResponse (Maybe Text)

-- | The response's http status code.
updateFirewallDescriptionResponse_httpStatus :: Lens' UpdateFirewallDescriptionResponse Int
instance GHC.Generics.Generic Amazonka.NetworkFirewall.UpdateFirewallDescription.UpdateFirewallDescription
instance GHC.Show.Show Amazonka.NetworkFirewall.UpdateFirewallDescription.UpdateFirewallDescription
instance GHC.Read.Read Amazonka.NetworkFirewall.UpdateFirewallDescription.UpdateFirewallDescription
instance GHC.Classes.Eq Amazonka.NetworkFirewall.UpdateFirewallDescription.UpdateFirewallDescription
instance GHC.Generics.Generic Amazonka.NetworkFirewall.UpdateFirewallDescription.UpdateFirewallDescriptionResponse
instance GHC.Show.Show Amazonka.NetworkFirewall.UpdateFirewallDescription.UpdateFirewallDescriptionResponse
instance GHC.Read.Read Amazonka.NetworkFirewall.UpdateFirewallDescription.UpdateFirewallDescriptionResponse
instance GHC.Classes.Eq Amazonka.NetworkFirewall.UpdateFirewallDescription.UpdateFirewallDescriptionResponse
instance Amazonka.Types.AWSRequest Amazonka.NetworkFirewall.UpdateFirewallDescription.UpdateFirewallDescription
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.UpdateFirewallDescription.UpdateFirewallDescriptionResponse
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.UpdateFirewallDescription.UpdateFirewallDescription
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.UpdateFirewallDescription.UpdateFirewallDescription
instance Amazonka.Data.Headers.ToHeaders Amazonka.NetworkFirewall.UpdateFirewallDescription.UpdateFirewallDescription
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.UpdateFirewallDescription.UpdateFirewallDescription
instance Amazonka.Data.Path.ToPath Amazonka.NetworkFirewall.UpdateFirewallDescription.UpdateFirewallDescription
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.UpdateFirewallDescription.UpdateFirewallDescription


-- | Updates the properties of the specified firewall policy.
module Amazonka.NetworkFirewall.UpdateFirewallPolicy

-- | <i>See:</i> <a>newUpdateFirewallPolicy</a> smart constructor.
data UpdateFirewallPolicy
UpdateFirewallPolicy' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Bool -> Text -> FirewallPolicy -> UpdateFirewallPolicy

-- | The descriptive name of the firewall policy. You can't change the name
--   of a firewall policy after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
[$sel:firewallPolicyName:UpdateFirewallPolicy'] :: UpdateFirewallPolicy -> Maybe Text

-- | The Amazon Resource Name (ARN) of the firewall policy.
--   
--   You must specify the ARN or the name, and you can specify both.
[$sel:firewallPolicyArn:UpdateFirewallPolicy'] :: UpdateFirewallPolicy -> Maybe Text

-- | A description of the firewall policy.
[$sel:description:UpdateFirewallPolicy'] :: UpdateFirewallPolicy -> Maybe Text

-- | Indicates whether you want Network Firewall to just check the validity
--   of the request, rather than run the request.
--   
--   If set to <tt>TRUE</tt>, Network Firewall checks whether the request
--   can run successfully, but doesn't actually make the requested changes.
--   The call returns the value that the request would return if you ran it
--   with dry run set to <tt>FALSE</tt>, but doesn't make additions or
--   changes to your resources. This option allows you to make sure that
--   you have the required permissions to run the request and that your
--   request parameters are valid.
--   
--   If set to <tt>FALSE</tt>, Network Firewall makes the requested changes
--   to your resources.
[$sel:dryRun:UpdateFirewallPolicy'] :: UpdateFirewallPolicy -> Maybe Bool

-- | A token used for optimistic locking. Network Firewall returns a token
--   to your requests that access the firewall policy. The token marks the
--   state of the policy resource at the time of the request.
--   
--   To make changes to the policy, you provide the token in your request.
--   Network Firewall uses the token to ensure that the policy hasn't
--   changed since you last retrieved it. If it has changed, the operation
--   fails with an <tt>InvalidTokenException</tt>. If this happens,
--   retrieve the firewall policy again to get a current copy of it with
--   current token. Reapply your changes as needed, then try the operation
--   again using the new token.
[$sel:updateToken:UpdateFirewallPolicy'] :: UpdateFirewallPolicy -> Text

-- | The updated firewall policy to use for the firewall.
[$sel:firewallPolicy:UpdateFirewallPolicy'] :: UpdateFirewallPolicy -> FirewallPolicy

-- | Create a value of <a>UpdateFirewallPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:firewallPolicyName:UpdateFirewallPolicy'</a>,
--   <a>updateFirewallPolicy_firewallPolicyName</a> - The descriptive name
--   of the firewall policy. You can't change the name of a firewall policy
--   after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:firewallPolicyArn:UpdateFirewallPolicy'</a>,
--   <a>updateFirewallPolicy_firewallPolicyArn</a> - The Amazon Resource
--   Name (ARN) of the firewall policy.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:description:UpdateFirewallPolicy'</a>,
--   <a>updateFirewallPolicy_description</a> - A description of the
--   firewall policy.
--   
--   <a>$sel:dryRun:UpdateFirewallPolicy'</a>,
--   <a>updateFirewallPolicy_dryRun</a> - Indicates whether you want
--   Network Firewall to just check the validity of the request, rather
--   than run the request.
--   
--   If set to <tt>TRUE</tt>, Network Firewall checks whether the request
--   can run successfully, but doesn't actually make the requested changes.
--   The call returns the value that the request would return if you ran it
--   with dry run set to <tt>FALSE</tt>, but doesn't make additions or
--   changes to your resources. This option allows you to make sure that
--   you have the required permissions to run the request and that your
--   request parameters are valid.
--   
--   If set to <tt>FALSE</tt>, Network Firewall makes the requested changes
--   to your resources.
--   
--   <a>$sel:updateToken:UpdateFirewallPolicy'</a>,
--   <a>updateFirewallPolicy_updateToken</a> - A token used for optimistic
--   locking. Network Firewall returns a token to your requests that access
--   the firewall policy. The token marks the state of the policy resource
--   at the time of the request.
--   
--   To make changes to the policy, you provide the token in your request.
--   Network Firewall uses the token to ensure that the policy hasn't
--   changed since you last retrieved it. If it has changed, the operation
--   fails with an <tt>InvalidTokenException</tt>. If this happens,
--   retrieve the firewall policy again to get a current copy of it with
--   current token. Reapply your changes as needed, then try the operation
--   again using the new token.
--   
--   <a>$sel:firewallPolicy:UpdateFirewallPolicy'</a>,
--   <a>updateFirewallPolicy_firewallPolicy</a> - The updated firewall
--   policy to use for the firewall.
newUpdateFirewallPolicy :: Text -> FirewallPolicy -> UpdateFirewallPolicy

-- | The descriptive name of the firewall policy. You can't change the name
--   of a firewall policy after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
updateFirewallPolicy_firewallPolicyName :: Lens' UpdateFirewallPolicy (Maybe Text)

-- | The Amazon Resource Name (ARN) of the firewall policy.
--   
--   You must specify the ARN or the name, and you can specify both.
updateFirewallPolicy_firewallPolicyArn :: Lens' UpdateFirewallPolicy (Maybe Text)

-- | A description of the firewall policy.
updateFirewallPolicy_description :: Lens' UpdateFirewallPolicy (Maybe Text)

-- | Indicates whether you want Network Firewall to just check the validity
--   of the request, rather than run the request.
--   
--   If set to <tt>TRUE</tt>, Network Firewall checks whether the request
--   can run successfully, but doesn't actually make the requested changes.
--   The call returns the value that the request would return if you ran it
--   with dry run set to <tt>FALSE</tt>, but doesn't make additions or
--   changes to your resources. This option allows you to make sure that
--   you have the required permissions to run the request and that your
--   request parameters are valid.
--   
--   If set to <tt>FALSE</tt>, Network Firewall makes the requested changes
--   to your resources.
updateFirewallPolicy_dryRun :: Lens' UpdateFirewallPolicy (Maybe Bool)

-- | A token used for optimistic locking. Network Firewall returns a token
--   to your requests that access the firewall policy. The token marks the
--   state of the policy resource at the time of the request.
--   
--   To make changes to the policy, you provide the token in your request.
--   Network Firewall uses the token to ensure that the policy hasn't
--   changed since you last retrieved it. If it has changed, the operation
--   fails with an <tt>InvalidTokenException</tt>. If this happens,
--   retrieve the firewall policy again to get a current copy of it with
--   current token. Reapply your changes as needed, then try the operation
--   again using the new token.
updateFirewallPolicy_updateToken :: Lens' UpdateFirewallPolicy Text

-- | The updated firewall policy to use for the firewall.
updateFirewallPolicy_firewallPolicy :: Lens' UpdateFirewallPolicy FirewallPolicy

-- | <i>See:</i> <a>newUpdateFirewallPolicyResponse</a> smart constructor.
data UpdateFirewallPolicyResponse
UpdateFirewallPolicyResponse' :: Int -> Text -> FirewallPolicyResponse -> UpdateFirewallPolicyResponse

-- | The response's http status code.
[$sel:httpStatus:UpdateFirewallPolicyResponse'] :: UpdateFirewallPolicyResponse -> Int

-- | A token used for optimistic locking. Network Firewall returns a token
--   to your requests that access the firewall policy. The token marks the
--   state of the policy resource at the time of the request.
--   
--   To make changes to the policy, you provide the token in your request.
--   Network Firewall uses the token to ensure that the policy hasn't
--   changed since you last retrieved it. If it has changed, the operation
--   fails with an <tt>InvalidTokenException</tt>. If this happens,
--   retrieve the firewall policy again to get a current copy of it with
--   current token. Reapply your changes as needed, then try the operation
--   again using the new token.
[$sel:updateToken:UpdateFirewallPolicyResponse'] :: UpdateFirewallPolicyResponse -> Text

-- | The high-level properties of a firewall policy. This, along with the
--   FirewallPolicy, define the policy. You can retrieve all objects for a
--   firewall policy by calling DescribeFirewallPolicy.
[$sel:firewallPolicyResponse:UpdateFirewallPolicyResponse'] :: UpdateFirewallPolicyResponse -> FirewallPolicyResponse

-- | Create a value of <a>UpdateFirewallPolicyResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UpdateFirewallPolicyResponse'</a>,
--   <a>updateFirewallPolicyResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:updateToken:UpdateFirewallPolicy'</a>,
--   <a>updateFirewallPolicyResponse_updateToken</a> - A token used for
--   optimistic locking. Network Firewall returns a token to your requests
--   that access the firewall policy. The token marks the state of the
--   policy resource at the time of the request.
--   
--   To make changes to the policy, you provide the token in your request.
--   Network Firewall uses the token to ensure that the policy hasn't
--   changed since you last retrieved it. If it has changed, the operation
--   fails with an <tt>InvalidTokenException</tt>. If this happens,
--   retrieve the firewall policy again to get a current copy of it with
--   current token. Reapply your changes as needed, then try the operation
--   again using the new token.
--   
--   <a>$sel:firewallPolicyResponse:UpdateFirewallPolicyResponse'</a>,
--   <a>updateFirewallPolicyResponse_firewallPolicyResponse</a> - The
--   high-level properties of a firewall policy. This, along with the
--   FirewallPolicy, define the policy. You can retrieve all objects for a
--   firewall policy by calling DescribeFirewallPolicy.
newUpdateFirewallPolicyResponse :: Int -> Text -> FirewallPolicyResponse -> UpdateFirewallPolicyResponse

-- | The response's http status code.
updateFirewallPolicyResponse_httpStatus :: Lens' UpdateFirewallPolicyResponse Int

-- | A token used for optimistic locking. Network Firewall returns a token
--   to your requests that access the firewall policy. The token marks the
--   state of the policy resource at the time of the request.
--   
--   To make changes to the policy, you provide the token in your request.
--   Network Firewall uses the token to ensure that the policy hasn't
--   changed since you last retrieved it. If it has changed, the operation
--   fails with an <tt>InvalidTokenException</tt>. If this happens,
--   retrieve the firewall policy again to get a current copy of it with
--   current token. Reapply your changes as needed, then try the operation
--   again using the new token.
updateFirewallPolicyResponse_updateToken :: Lens' UpdateFirewallPolicyResponse Text

-- | The high-level properties of a firewall policy. This, along with the
--   FirewallPolicy, define the policy. You can retrieve all objects for a
--   firewall policy by calling DescribeFirewallPolicy.
updateFirewallPolicyResponse_firewallPolicyResponse :: Lens' UpdateFirewallPolicyResponse FirewallPolicyResponse
instance GHC.Generics.Generic Amazonka.NetworkFirewall.UpdateFirewallPolicy.UpdateFirewallPolicy
instance GHC.Show.Show Amazonka.NetworkFirewall.UpdateFirewallPolicy.UpdateFirewallPolicy
instance GHC.Read.Read Amazonka.NetworkFirewall.UpdateFirewallPolicy.UpdateFirewallPolicy
instance GHC.Classes.Eq Amazonka.NetworkFirewall.UpdateFirewallPolicy.UpdateFirewallPolicy
instance GHC.Generics.Generic Amazonka.NetworkFirewall.UpdateFirewallPolicy.UpdateFirewallPolicyResponse
instance GHC.Show.Show Amazonka.NetworkFirewall.UpdateFirewallPolicy.UpdateFirewallPolicyResponse
instance GHC.Read.Read Amazonka.NetworkFirewall.UpdateFirewallPolicy.UpdateFirewallPolicyResponse
instance GHC.Classes.Eq Amazonka.NetworkFirewall.UpdateFirewallPolicy.UpdateFirewallPolicyResponse
instance Amazonka.Types.AWSRequest Amazonka.NetworkFirewall.UpdateFirewallPolicy.UpdateFirewallPolicy
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.UpdateFirewallPolicy.UpdateFirewallPolicyResponse
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.UpdateFirewallPolicy.UpdateFirewallPolicy
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.UpdateFirewallPolicy.UpdateFirewallPolicy
instance Amazonka.Data.Headers.ToHeaders Amazonka.NetworkFirewall.UpdateFirewallPolicy.UpdateFirewallPolicy
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.UpdateFirewallPolicy.UpdateFirewallPolicy
instance Amazonka.Data.Path.ToPath Amazonka.NetworkFirewall.UpdateFirewallPolicy.UpdateFirewallPolicy
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.UpdateFirewallPolicy.UpdateFirewallPolicy


module Amazonka.NetworkFirewall.UpdateFirewallPolicyChangeProtection

-- | <i>See:</i> <a>newUpdateFirewallPolicyChangeProtection</a> smart
--   constructor.
data UpdateFirewallPolicyChangeProtection
UpdateFirewallPolicyChangeProtection' :: Maybe Text -> Maybe Text -> Maybe Text -> Bool -> UpdateFirewallPolicyChangeProtection

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
[$sel:updateToken:UpdateFirewallPolicyChangeProtection'] :: UpdateFirewallPolicyChangeProtection -> Maybe Text

-- | The Amazon Resource Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
[$sel:firewallArn:UpdateFirewallPolicyChangeProtection'] :: UpdateFirewallPolicyChangeProtection -> Maybe Text

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
[$sel:firewallName:UpdateFirewallPolicyChangeProtection'] :: UpdateFirewallPolicyChangeProtection -> Maybe Text

-- | A setting indicating whether the firewall is protected against a
--   change to the firewall policy association. Use this setting to protect
--   against accidentally modifying the firewall policy for a firewall that
--   is in use. When you create a firewall, the operation initializes this
--   setting to <tt>TRUE</tt>.
[$sel:firewallPolicyChangeProtection:UpdateFirewallPolicyChangeProtection'] :: UpdateFirewallPolicyChangeProtection -> Bool

-- | Create a value of <a>UpdateFirewallPolicyChangeProtection</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:updateToken:UpdateFirewallPolicyChangeProtection'</a>,
--   <a>updateFirewallPolicyChangeProtection_updateToken</a> - An optional
--   token that you can use for optimistic locking. Network Firewall
--   returns a token to your requests that access the firewall. The token
--   marks the state of the firewall resource at the time of the request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
--   
--   <a>$sel:firewallArn:UpdateFirewallPolicyChangeProtection'</a>,
--   <a>updateFirewallPolicyChangeProtection_firewallArn</a> - The Amazon
--   Resource Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:firewallName:UpdateFirewallPolicyChangeProtection'</a>,
--   <a>updateFirewallPolicyChangeProtection_firewallName</a> - The
--   descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   
--   <a>$sel:firewallPolicyChangeProtection:UpdateFirewallPolicyChangeProtection'</a>,
--   <a>updateFirewallPolicyChangeProtection_firewallPolicyChangeProtection</a>
--   - A setting indicating whether the firewall is protected against a
--   change to the firewall policy association. Use this setting to protect
--   against accidentally modifying the firewall policy for a firewall that
--   is in use. When you create a firewall, the operation initializes this
--   setting to <tt>TRUE</tt>.
newUpdateFirewallPolicyChangeProtection :: Bool -> UpdateFirewallPolicyChangeProtection

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
updateFirewallPolicyChangeProtection_updateToken :: Lens' UpdateFirewallPolicyChangeProtection (Maybe Text)

-- | The Amazon Resource Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
updateFirewallPolicyChangeProtection_firewallArn :: Lens' UpdateFirewallPolicyChangeProtection (Maybe Text)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
updateFirewallPolicyChangeProtection_firewallName :: Lens' UpdateFirewallPolicyChangeProtection (Maybe Text)

-- | A setting indicating whether the firewall is protected against a
--   change to the firewall policy association. Use this setting to protect
--   against accidentally modifying the firewall policy for a firewall that
--   is in use. When you create a firewall, the operation initializes this
--   setting to <tt>TRUE</tt>.
updateFirewallPolicyChangeProtection_firewallPolicyChangeProtection :: Lens' UpdateFirewallPolicyChangeProtection Bool

-- | <i>See:</i> <a>newUpdateFirewallPolicyChangeProtectionResponse</a>
--   smart constructor.
data UpdateFirewallPolicyChangeProtectionResponse
UpdateFirewallPolicyChangeProtectionResponse' :: Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Text -> Int -> UpdateFirewallPolicyChangeProtectionResponse

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
[$sel:updateToken:UpdateFirewallPolicyChangeProtectionResponse'] :: UpdateFirewallPolicyChangeProtectionResponse -> Maybe Text

-- | The Amazon Resource Name (ARN) of the firewall.
[$sel:firewallArn:UpdateFirewallPolicyChangeProtectionResponse'] :: UpdateFirewallPolicyChangeProtectionResponse -> Maybe Text

-- | A setting indicating whether the firewall is protected against a
--   change to the firewall policy association. Use this setting to protect
--   against accidentally modifying the firewall policy for a firewall that
--   is in use. When you create a firewall, the operation initializes this
--   setting to <tt>TRUE</tt>.
[$sel:firewallPolicyChangeProtection:UpdateFirewallPolicyChangeProtectionResponse'] :: UpdateFirewallPolicyChangeProtectionResponse -> Maybe Bool

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
[$sel:firewallName:UpdateFirewallPolicyChangeProtectionResponse'] :: UpdateFirewallPolicyChangeProtectionResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:UpdateFirewallPolicyChangeProtectionResponse'] :: UpdateFirewallPolicyChangeProtectionResponse -> Int

-- | Create a value of <a>UpdateFirewallPolicyChangeProtectionResponse</a>
--   with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:updateToken:UpdateFirewallPolicyChangeProtection'</a>,
--   <a>updateFirewallPolicyChangeProtectionResponse_updateToken</a> - An
--   optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
--   
--   <a>$sel:firewallArn:UpdateFirewallPolicyChangeProtection'</a>,
--   <a>updateFirewallPolicyChangeProtectionResponse_firewallArn</a> - The
--   Amazon Resource Name (ARN) of the firewall.
--   
--   
--   <a>$sel:firewallPolicyChangeProtection:UpdateFirewallPolicyChangeProtection'</a>,
--   <a>updateFirewallPolicyChangeProtectionResponse_firewallPolicyChangeProtection</a>
--   - A setting indicating whether the firewall is protected against a
--   change to the firewall policy association. Use this setting to protect
--   against accidentally modifying the firewall policy for a firewall that
--   is in use. When you create a firewall, the operation initializes this
--   setting to <tt>TRUE</tt>.
--   
--   <a>$sel:firewallName:UpdateFirewallPolicyChangeProtection'</a>,
--   <a>updateFirewallPolicyChangeProtectionResponse_firewallName</a> - The
--   descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   <a>$sel:httpStatus:UpdateFirewallPolicyChangeProtectionResponse'</a>,
--   <a>updateFirewallPolicyChangeProtectionResponse_httpStatus</a> - The
--   response's http status code.
newUpdateFirewallPolicyChangeProtectionResponse :: Int -> UpdateFirewallPolicyChangeProtectionResponse

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
updateFirewallPolicyChangeProtectionResponse_updateToken :: Lens' UpdateFirewallPolicyChangeProtectionResponse (Maybe Text)

-- | The Amazon Resource Name (ARN) of the firewall.
updateFirewallPolicyChangeProtectionResponse_firewallArn :: Lens' UpdateFirewallPolicyChangeProtectionResponse (Maybe Text)

-- | A setting indicating whether the firewall is protected against a
--   change to the firewall policy association. Use this setting to protect
--   against accidentally modifying the firewall policy for a firewall that
--   is in use. When you create a firewall, the operation initializes this
--   setting to <tt>TRUE</tt>.
updateFirewallPolicyChangeProtectionResponse_firewallPolicyChangeProtection :: Lens' UpdateFirewallPolicyChangeProtectionResponse (Maybe Bool)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
updateFirewallPolicyChangeProtectionResponse_firewallName :: Lens' UpdateFirewallPolicyChangeProtectionResponse (Maybe Text)

-- | The response's http status code.
updateFirewallPolicyChangeProtectionResponse_httpStatus :: Lens' UpdateFirewallPolicyChangeProtectionResponse Int
instance GHC.Generics.Generic Amazonka.NetworkFirewall.UpdateFirewallPolicyChangeProtection.UpdateFirewallPolicyChangeProtection
instance GHC.Show.Show Amazonka.NetworkFirewall.UpdateFirewallPolicyChangeProtection.UpdateFirewallPolicyChangeProtection
instance GHC.Read.Read Amazonka.NetworkFirewall.UpdateFirewallPolicyChangeProtection.UpdateFirewallPolicyChangeProtection
instance GHC.Classes.Eq Amazonka.NetworkFirewall.UpdateFirewallPolicyChangeProtection.UpdateFirewallPolicyChangeProtection
instance GHC.Generics.Generic Amazonka.NetworkFirewall.UpdateFirewallPolicyChangeProtection.UpdateFirewallPolicyChangeProtectionResponse
instance GHC.Show.Show Amazonka.NetworkFirewall.UpdateFirewallPolicyChangeProtection.UpdateFirewallPolicyChangeProtectionResponse
instance GHC.Read.Read Amazonka.NetworkFirewall.UpdateFirewallPolicyChangeProtection.UpdateFirewallPolicyChangeProtectionResponse
instance GHC.Classes.Eq Amazonka.NetworkFirewall.UpdateFirewallPolicyChangeProtection.UpdateFirewallPolicyChangeProtectionResponse
instance Amazonka.Types.AWSRequest Amazonka.NetworkFirewall.UpdateFirewallPolicyChangeProtection.UpdateFirewallPolicyChangeProtection
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.UpdateFirewallPolicyChangeProtection.UpdateFirewallPolicyChangeProtectionResponse
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.UpdateFirewallPolicyChangeProtection.UpdateFirewallPolicyChangeProtection
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.UpdateFirewallPolicyChangeProtection.UpdateFirewallPolicyChangeProtection
instance Amazonka.Data.Headers.ToHeaders Amazonka.NetworkFirewall.UpdateFirewallPolicyChangeProtection.UpdateFirewallPolicyChangeProtection
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.UpdateFirewallPolicyChangeProtection.UpdateFirewallPolicyChangeProtection
instance Amazonka.Data.Path.ToPath Amazonka.NetworkFirewall.UpdateFirewallPolicyChangeProtection.UpdateFirewallPolicyChangeProtection
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.UpdateFirewallPolicyChangeProtection.UpdateFirewallPolicyChangeProtection


-- | Sets the logging configuration for the specified firewall.
--   
--   To change the logging configuration, retrieve the LoggingConfiguration
--   by calling DescribeLoggingConfiguration, then change it and provide
--   the modified object to this update call. You must change the logging
--   configuration one LogDestinationConfig at a time inside the retrieved
--   LoggingConfiguration object.
--   
--   You can perform only one of the following actions in any call to
--   <tt>UpdateLoggingConfiguration</tt>:
--   
--   <ul>
--   <li>Create a new log destination object by adding a single
--   <tt>LogDestinationConfig</tt> array element to
--   <tt>LogDestinationConfigs</tt>.</li>
--   <li>Delete a log destination object by removing a single
--   <tt>LogDestinationConfig</tt> array element from
--   <tt>LogDestinationConfigs</tt>.</li>
--   <li>Change the <tt>LogDestination</tt> setting in a single
--   <tt>LogDestinationConfig</tt> array element.</li>
--   </ul>
--   
--   You can't change the <tt>LogDestinationType</tt> or <tt>LogType</tt>
--   in a <tt>LogDestinationConfig</tt>. To change these settings, delete
--   the existing <tt>LogDestinationConfig</tt> object and create a new
--   one, using two separate calls to this update operation.
module Amazonka.NetworkFirewall.UpdateLoggingConfiguration

-- | <i>See:</i> <a>newUpdateLoggingConfiguration</a> smart constructor.
data UpdateLoggingConfiguration
UpdateLoggingConfiguration' :: Maybe Text -> Maybe LoggingConfiguration -> Maybe Text -> UpdateLoggingConfiguration

-- | The Amazon Resource Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
[$sel:firewallArn:UpdateLoggingConfiguration'] :: UpdateLoggingConfiguration -> Maybe Text

-- | Defines how Network Firewall performs logging for a firewall. If you
--   omit this setting, Network Firewall disables logging for the firewall.
[$sel:loggingConfiguration:UpdateLoggingConfiguration'] :: UpdateLoggingConfiguration -> Maybe LoggingConfiguration

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
[$sel:firewallName:UpdateLoggingConfiguration'] :: UpdateLoggingConfiguration -> Maybe Text

-- | Create a value of <a>UpdateLoggingConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:firewallArn:UpdateLoggingConfiguration'</a>,
--   <a>updateLoggingConfiguration_firewallArn</a> - The Amazon Resource
--   Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:loggingConfiguration:UpdateLoggingConfiguration'</a>,
--   <a>updateLoggingConfiguration_loggingConfiguration</a> - Defines how
--   Network Firewall performs logging for a firewall. If you omit this
--   setting, Network Firewall disables logging for the firewall.
--   
--   <a>$sel:firewallName:UpdateLoggingConfiguration'</a>,
--   <a>updateLoggingConfiguration_firewallName</a> - The descriptive name
--   of the firewall. You can't change the name of a firewall after you
--   create it.
--   
--   You must specify the ARN or the name, and you can specify both.
newUpdateLoggingConfiguration :: UpdateLoggingConfiguration

-- | The Amazon Resource Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
updateLoggingConfiguration_firewallArn :: Lens' UpdateLoggingConfiguration (Maybe Text)

-- | Defines how Network Firewall performs logging for a firewall. If you
--   omit this setting, Network Firewall disables logging for the firewall.
updateLoggingConfiguration_loggingConfiguration :: Lens' UpdateLoggingConfiguration (Maybe LoggingConfiguration)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
updateLoggingConfiguration_firewallName :: Lens' UpdateLoggingConfiguration (Maybe Text)

-- | <i>See:</i> <a>newUpdateLoggingConfigurationResponse</a> smart
--   constructor.
data UpdateLoggingConfigurationResponse
UpdateLoggingConfigurationResponse' :: Maybe Text -> Maybe LoggingConfiguration -> Maybe Text -> Int -> UpdateLoggingConfigurationResponse

-- | The Amazon Resource Name (ARN) of the firewall.
[$sel:firewallArn:UpdateLoggingConfigurationResponse'] :: UpdateLoggingConfigurationResponse -> Maybe Text
[$sel:loggingConfiguration:UpdateLoggingConfigurationResponse'] :: UpdateLoggingConfigurationResponse -> Maybe LoggingConfiguration

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
[$sel:firewallName:UpdateLoggingConfigurationResponse'] :: UpdateLoggingConfigurationResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:UpdateLoggingConfigurationResponse'] :: UpdateLoggingConfigurationResponse -> Int

-- | Create a value of <a>UpdateLoggingConfigurationResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:firewallArn:UpdateLoggingConfiguration'</a>,
--   <a>updateLoggingConfigurationResponse_firewallArn</a> - The Amazon
--   Resource Name (ARN) of the firewall.
--   
--   <a>$sel:loggingConfiguration:UpdateLoggingConfiguration'</a>,
--   <a>updateLoggingConfigurationResponse_loggingConfiguration</a> -
--   Undocumented member.
--   
--   <a>$sel:firewallName:UpdateLoggingConfiguration'</a>,
--   <a>updateLoggingConfigurationResponse_firewallName</a> - The
--   descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   <a>$sel:httpStatus:UpdateLoggingConfigurationResponse'</a>,
--   <a>updateLoggingConfigurationResponse_httpStatus</a> - The response's
--   http status code.
newUpdateLoggingConfigurationResponse :: Int -> UpdateLoggingConfigurationResponse

-- | The Amazon Resource Name (ARN) of the firewall.
updateLoggingConfigurationResponse_firewallArn :: Lens' UpdateLoggingConfigurationResponse (Maybe Text)

-- | Undocumented member.
updateLoggingConfigurationResponse_loggingConfiguration :: Lens' UpdateLoggingConfigurationResponse (Maybe LoggingConfiguration)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
updateLoggingConfigurationResponse_firewallName :: Lens' UpdateLoggingConfigurationResponse (Maybe Text)

-- | The response's http status code.
updateLoggingConfigurationResponse_httpStatus :: Lens' UpdateLoggingConfigurationResponse Int
instance GHC.Generics.Generic Amazonka.NetworkFirewall.UpdateLoggingConfiguration.UpdateLoggingConfiguration
instance GHC.Show.Show Amazonka.NetworkFirewall.UpdateLoggingConfiguration.UpdateLoggingConfiguration
instance GHC.Read.Read Amazonka.NetworkFirewall.UpdateLoggingConfiguration.UpdateLoggingConfiguration
instance GHC.Classes.Eq Amazonka.NetworkFirewall.UpdateLoggingConfiguration.UpdateLoggingConfiguration
instance GHC.Generics.Generic Amazonka.NetworkFirewall.UpdateLoggingConfiguration.UpdateLoggingConfigurationResponse
instance GHC.Show.Show Amazonka.NetworkFirewall.UpdateLoggingConfiguration.UpdateLoggingConfigurationResponse
instance GHC.Read.Read Amazonka.NetworkFirewall.UpdateLoggingConfiguration.UpdateLoggingConfigurationResponse
instance GHC.Classes.Eq Amazonka.NetworkFirewall.UpdateLoggingConfiguration.UpdateLoggingConfigurationResponse
instance Amazonka.Types.AWSRequest Amazonka.NetworkFirewall.UpdateLoggingConfiguration.UpdateLoggingConfiguration
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.UpdateLoggingConfiguration.UpdateLoggingConfigurationResponse
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.UpdateLoggingConfiguration.UpdateLoggingConfiguration
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.UpdateLoggingConfiguration.UpdateLoggingConfiguration
instance Amazonka.Data.Headers.ToHeaders Amazonka.NetworkFirewall.UpdateLoggingConfiguration.UpdateLoggingConfiguration
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.UpdateLoggingConfiguration.UpdateLoggingConfiguration
instance Amazonka.Data.Path.ToPath Amazonka.NetworkFirewall.UpdateLoggingConfiguration.UpdateLoggingConfiguration
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.UpdateLoggingConfiguration.UpdateLoggingConfiguration


-- | Updates the rule settings for the specified rule group. You use a rule
--   group by reference in one or more firewall policies. When you modify a
--   rule group, you modify all firewall policies that use the rule group.
--   
--   To update a rule group, first call DescribeRuleGroup to retrieve the
--   current RuleGroup object, update the object as needed, and then
--   provide the updated object to this call.
module Amazonka.NetworkFirewall.UpdateRuleGroup

-- | <i>See:</i> <a>newUpdateRuleGroup</a> smart constructor.
data UpdateRuleGroup
UpdateRuleGroup' :: Maybe Text -> Maybe Text -> Maybe RuleGroupType -> Maybe Text -> Maybe Text -> Maybe Bool -> Maybe RuleGroup -> Text -> UpdateRuleGroup

-- | The Amazon Resource Name (ARN) of the rule group.
--   
--   You must specify the ARN or the name, and you can specify both.
[$sel:ruleGroupArn:UpdateRuleGroup'] :: UpdateRuleGroup -> Maybe Text

-- | A string containing stateful rule group rules specifications in
--   Suricata flat format, with one rule per line. Use this to import your
--   existing Suricata compatible rule groups.
--   
--   You must provide either this rules setting or a populated
--   <tt>RuleGroup</tt> setting, but not both.
--   
--   You can provide your rule group specification in Suricata flat format
--   through this setting when you create or update your rule group. The
--   call response returns a RuleGroup object that Network Firewall has
--   populated from your string.
[$sel:rules:UpdateRuleGroup'] :: UpdateRuleGroup -> Maybe Text

-- | Indicates whether the rule group is stateless or stateful. If the rule
--   group is stateless, it contains stateless rules. If it is stateful, it
--   contains stateful rules.
--   
--   This setting is required for requests that do not include the
--   <tt>RuleGroupARN</tt>.
[$sel:type':UpdateRuleGroup'] :: UpdateRuleGroup -> Maybe RuleGroupType

-- | A description of the rule group.
[$sel:description:UpdateRuleGroup'] :: UpdateRuleGroup -> Maybe Text

-- | The descriptive name of the rule group. You can't change the name of a
--   rule group after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
[$sel:ruleGroupName:UpdateRuleGroup'] :: UpdateRuleGroup -> Maybe Text

-- | Indicates whether you want Network Firewall to just check the validity
--   of the request, rather than run the request.
--   
--   If set to <tt>TRUE</tt>, Network Firewall checks whether the request
--   can run successfully, but doesn't actually make the requested changes.
--   The call returns the value that the request would return if you ran it
--   with dry run set to <tt>FALSE</tt>, but doesn't make additions or
--   changes to your resources. This option allows you to make sure that
--   you have the required permissions to run the request and that your
--   request parameters are valid.
--   
--   If set to <tt>FALSE</tt>, Network Firewall makes the requested changes
--   to your resources.
[$sel:dryRun:UpdateRuleGroup'] :: UpdateRuleGroup -> Maybe Bool

-- | An object that defines the rule group rules.
--   
--   You must provide either this rule group setting or a <tt>Rules</tt>
--   setting, but not both.
[$sel:ruleGroup:UpdateRuleGroup'] :: UpdateRuleGroup -> Maybe RuleGroup

-- | A token used for optimistic locking. Network Firewall returns a token
--   to your requests that access the rule group. The token marks the state
--   of the rule group resource at the time of the request.
--   
--   To make changes to the rule group, you provide the token in your
--   request. Network Firewall uses the token to ensure that the rule group
--   hasn't changed since you last retrieved it. If it has changed, the
--   operation fails with an <tt>InvalidTokenException</tt>. If this
--   happens, retrieve the rule group again to get a current copy of it
--   with a current token. Reapply your changes as needed, then try the
--   operation again using the new token.
[$sel:updateToken:UpdateRuleGroup'] :: UpdateRuleGroup -> Text

-- | Create a value of <a>UpdateRuleGroup</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:ruleGroupArn:UpdateRuleGroup'</a>,
--   <a>updateRuleGroup_ruleGroupArn</a> - The Amazon Resource Name (ARN)
--   of the rule group.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:rules:UpdateRuleGroup'</a>, <a>updateRuleGroup_rules</a> - A
--   string containing stateful rule group rules specifications in Suricata
--   flat format, with one rule per line. Use this to import your existing
--   Suricata compatible rule groups.
--   
--   You must provide either this rules setting or a populated
--   <tt>RuleGroup</tt> setting, but not both.
--   
--   You can provide your rule group specification in Suricata flat format
--   through this setting when you create or update your rule group. The
--   call response returns a RuleGroup object that Network Firewall has
--   populated from your string.
--   
--   <a>$sel:type':UpdateRuleGroup'</a>, <a>updateRuleGroup_type</a> -
--   Indicates whether the rule group is stateless or stateful. If the rule
--   group is stateless, it contains stateless rules. If it is stateful, it
--   contains stateful rules.
--   
--   This setting is required for requests that do not include the
--   <tt>RuleGroupARN</tt>.
--   
--   <a>$sel:description:UpdateRuleGroup'</a>,
--   <a>updateRuleGroup_description</a> - A description of the rule group.
--   
--   <a>$sel:ruleGroupName:UpdateRuleGroup'</a>,
--   <a>updateRuleGroup_ruleGroupName</a> - The descriptive name of the
--   rule group. You can't change the name of a rule group after you create
--   it.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:dryRun:UpdateRuleGroup'</a>, <a>updateRuleGroup_dryRun</a> -
--   Indicates whether you want Network Firewall to just check the validity
--   of the request, rather than run the request.
--   
--   If set to <tt>TRUE</tt>, Network Firewall checks whether the request
--   can run successfully, but doesn't actually make the requested changes.
--   The call returns the value that the request would return if you ran it
--   with dry run set to <tt>FALSE</tt>, but doesn't make additions or
--   changes to your resources. This option allows you to make sure that
--   you have the required permissions to run the request and that your
--   request parameters are valid.
--   
--   If set to <tt>FALSE</tt>, Network Firewall makes the requested changes
--   to your resources.
--   
--   <a>$sel:ruleGroup:UpdateRuleGroup'</a>,
--   <a>updateRuleGroup_ruleGroup</a> - An object that defines the rule
--   group rules.
--   
--   You must provide either this rule group setting or a <tt>Rules</tt>
--   setting, but not both.
--   
--   <a>$sel:updateToken:UpdateRuleGroup'</a>,
--   <a>updateRuleGroup_updateToken</a> - A token used for optimistic
--   locking. Network Firewall returns a token to your requests that access
--   the rule group. The token marks the state of the rule group resource
--   at the time of the request.
--   
--   To make changes to the rule group, you provide the token in your
--   request. Network Firewall uses the token to ensure that the rule group
--   hasn't changed since you last retrieved it. If it has changed, the
--   operation fails with an <tt>InvalidTokenException</tt>. If this
--   happens, retrieve the rule group again to get a current copy of it
--   with a current token. Reapply your changes as needed, then try the
--   operation again using the new token.
newUpdateRuleGroup :: Text -> UpdateRuleGroup

-- | The Amazon Resource Name (ARN) of the rule group.
--   
--   You must specify the ARN or the name, and you can specify both.
updateRuleGroup_ruleGroupArn :: Lens' UpdateRuleGroup (Maybe Text)

-- | A string containing stateful rule group rules specifications in
--   Suricata flat format, with one rule per line. Use this to import your
--   existing Suricata compatible rule groups.
--   
--   You must provide either this rules setting or a populated
--   <tt>RuleGroup</tt> setting, but not both.
--   
--   You can provide your rule group specification in Suricata flat format
--   through this setting when you create or update your rule group. The
--   call response returns a RuleGroup object that Network Firewall has
--   populated from your string.
updateRuleGroup_rules :: Lens' UpdateRuleGroup (Maybe Text)

-- | Indicates whether the rule group is stateless or stateful. If the rule
--   group is stateless, it contains stateless rules. If it is stateful, it
--   contains stateful rules.
--   
--   This setting is required for requests that do not include the
--   <tt>RuleGroupARN</tt>.
updateRuleGroup_type :: Lens' UpdateRuleGroup (Maybe RuleGroupType)

-- | A description of the rule group.
updateRuleGroup_description :: Lens' UpdateRuleGroup (Maybe Text)

-- | The descriptive name of the rule group. You can't change the name of a
--   rule group after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
updateRuleGroup_ruleGroupName :: Lens' UpdateRuleGroup (Maybe Text)

-- | Indicates whether you want Network Firewall to just check the validity
--   of the request, rather than run the request.
--   
--   If set to <tt>TRUE</tt>, Network Firewall checks whether the request
--   can run successfully, but doesn't actually make the requested changes.
--   The call returns the value that the request would return if you ran it
--   with dry run set to <tt>FALSE</tt>, but doesn't make additions or
--   changes to your resources. This option allows you to make sure that
--   you have the required permissions to run the request and that your
--   request parameters are valid.
--   
--   If set to <tt>FALSE</tt>, Network Firewall makes the requested changes
--   to your resources.
updateRuleGroup_dryRun :: Lens' UpdateRuleGroup (Maybe Bool)

-- | An object that defines the rule group rules.
--   
--   You must provide either this rule group setting or a <tt>Rules</tt>
--   setting, but not both.
updateRuleGroup_ruleGroup :: Lens' UpdateRuleGroup (Maybe RuleGroup)

-- | A token used for optimistic locking. Network Firewall returns a token
--   to your requests that access the rule group. The token marks the state
--   of the rule group resource at the time of the request.
--   
--   To make changes to the rule group, you provide the token in your
--   request. Network Firewall uses the token to ensure that the rule group
--   hasn't changed since you last retrieved it. If it has changed, the
--   operation fails with an <tt>InvalidTokenException</tt>. If this
--   happens, retrieve the rule group again to get a current copy of it
--   with a current token. Reapply your changes as needed, then try the
--   operation again using the new token.
updateRuleGroup_updateToken :: Lens' UpdateRuleGroup Text

-- | <i>See:</i> <a>newUpdateRuleGroupResponse</a> smart constructor.
data UpdateRuleGroupResponse
UpdateRuleGroupResponse' :: Int -> Text -> RuleGroupResponse -> UpdateRuleGroupResponse

-- | The response's http status code.
[$sel:httpStatus:UpdateRuleGroupResponse'] :: UpdateRuleGroupResponse -> Int

-- | A token used for optimistic locking. Network Firewall returns a token
--   to your requests that access the rule group. The token marks the state
--   of the rule group resource at the time of the request.
--   
--   To make changes to the rule group, you provide the token in your
--   request. Network Firewall uses the token to ensure that the rule group
--   hasn't changed since you last retrieved it. If it has changed, the
--   operation fails with an <tt>InvalidTokenException</tt>. If this
--   happens, retrieve the rule group again to get a current copy of it
--   with a current token. Reapply your changes as needed, then try the
--   operation again using the new token.
[$sel:updateToken:UpdateRuleGroupResponse'] :: UpdateRuleGroupResponse -> Text

-- | The high-level properties of a rule group. This, along with the
--   RuleGroup, define the rule group. You can retrieve all objects for a
--   rule group by calling DescribeRuleGroup.
[$sel:ruleGroupResponse:UpdateRuleGroupResponse'] :: UpdateRuleGroupResponse -> RuleGroupResponse

-- | Create a value of <a>UpdateRuleGroupResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UpdateRuleGroupResponse'</a>,
--   <a>updateRuleGroupResponse_httpStatus</a> - The response's http status
--   code.
--   
--   <a>$sel:updateToken:UpdateRuleGroup'</a>,
--   <a>updateRuleGroupResponse_updateToken</a> - A token used for
--   optimistic locking. Network Firewall returns a token to your requests
--   that access the rule group. The token marks the state of the rule
--   group resource at the time of the request.
--   
--   To make changes to the rule group, you provide the token in your
--   request. Network Firewall uses the token to ensure that the rule group
--   hasn't changed since you last retrieved it. If it has changed, the
--   operation fails with an <tt>InvalidTokenException</tt>. If this
--   happens, retrieve the rule group again to get a current copy of it
--   with a current token. Reapply your changes as needed, then try the
--   operation again using the new token.
--   
--   <a>$sel:ruleGroupResponse:UpdateRuleGroupResponse'</a>,
--   <a>updateRuleGroupResponse_ruleGroupResponse</a> - The high-level
--   properties of a rule group. This, along with the RuleGroup, define the
--   rule group. You can retrieve all objects for a rule group by calling
--   DescribeRuleGroup.
newUpdateRuleGroupResponse :: Int -> Text -> RuleGroupResponse -> UpdateRuleGroupResponse

-- | The response's http status code.
updateRuleGroupResponse_httpStatus :: Lens' UpdateRuleGroupResponse Int

-- | A token used for optimistic locking. Network Firewall returns a token
--   to your requests that access the rule group. The token marks the state
--   of the rule group resource at the time of the request.
--   
--   To make changes to the rule group, you provide the token in your
--   request. Network Firewall uses the token to ensure that the rule group
--   hasn't changed since you last retrieved it. If it has changed, the
--   operation fails with an <tt>InvalidTokenException</tt>. If this
--   happens, retrieve the rule group again to get a current copy of it
--   with a current token. Reapply your changes as needed, then try the
--   operation again using the new token.
updateRuleGroupResponse_updateToken :: Lens' UpdateRuleGroupResponse Text

-- | The high-level properties of a rule group. This, along with the
--   RuleGroup, define the rule group. You can retrieve all objects for a
--   rule group by calling DescribeRuleGroup.
updateRuleGroupResponse_ruleGroupResponse :: Lens' UpdateRuleGroupResponse RuleGroupResponse
instance GHC.Generics.Generic Amazonka.NetworkFirewall.UpdateRuleGroup.UpdateRuleGroup
instance GHC.Show.Show Amazonka.NetworkFirewall.UpdateRuleGroup.UpdateRuleGroup
instance GHC.Read.Read Amazonka.NetworkFirewall.UpdateRuleGroup.UpdateRuleGroup
instance GHC.Classes.Eq Amazonka.NetworkFirewall.UpdateRuleGroup.UpdateRuleGroup
instance GHC.Generics.Generic Amazonka.NetworkFirewall.UpdateRuleGroup.UpdateRuleGroupResponse
instance GHC.Show.Show Amazonka.NetworkFirewall.UpdateRuleGroup.UpdateRuleGroupResponse
instance GHC.Read.Read Amazonka.NetworkFirewall.UpdateRuleGroup.UpdateRuleGroupResponse
instance GHC.Classes.Eq Amazonka.NetworkFirewall.UpdateRuleGroup.UpdateRuleGroupResponse
instance Amazonka.Types.AWSRequest Amazonka.NetworkFirewall.UpdateRuleGroup.UpdateRuleGroup
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.UpdateRuleGroup.UpdateRuleGroupResponse
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.UpdateRuleGroup.UpdateRuleGroup
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.UpdateRuleGroup.UpdateRuleGroup
instance Amazonka.Data.Headers.ToHeaders Amazonka.NetworkFirewall.UpdateRuleGroup.UpdateRuleGroup
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.UpdateRuleGroup.UpdateRuleGroup
instance Amazonka.Data.Path.ToPath Amazonka.NetworkFirewall.UpdateRuleGroup.UpdateRuleGroup
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.UpdateRuleGroup.UpdateRuleGroup


module Amazonka.NetworkFirewall.UpdateSubnetChangeProtection

-- | <i>See:</i> <a>newUpdateSubnetChangeProtection</a> smart constructor.
data UpdateSubnetChangeProtection
UpdateSubnetChangeProtection' :: Maybe Text -> Maybe Text -> Maybe Text -> Bool -> UpdateSubnetChangeProtection

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
[$sel:updateToken:UpdateSubnetChangeProtection'] :: UpdateSubnetChangeProtection -> Maybe Text

-- | The Amazon Resource Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
[$sel:firewallArn:UpdateSubnetChangeProtection'] :: UpdateSubnetChangeProtection -> Maybe Text

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
[$sel:firewallName:UpdateSubnetChangeProtection'] :: UpdateSubnetChangeProtection -> Maybe Text

-- | A setting indicating whether the firewall is protected against changes
--   to the subnet associations. Use this setting to protect against
--   accidentally modifying the subnet associations for a firewall that is
--   in use. When you create a firewall, the operation initializes this
--   setting to <tt>TRUE</tt>.
[$sel:subnetChangeProtection:UpdateSubnetChangeProtection'] :: UpdateSubnetChangeProtection -> Bool

-- | Create a value of <a>UpdateSubnetChangeProtection</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:updateToken:UpdateSubnetChangeProtection'</a>,
--   <a>updateSubnetChangeProtection_updateToken</a> - An optional token
--   that you can use for optimistic locking. Network Firewall returns a
--   token to your requests that access the firewall. The token marks the
--   state of the firewall resource at the time of the request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
--   
--   <a>$sel:firewallArn:UpdateSubnetChangeProtection'</a>,
--   <a>updateSubnetChangeProtection_firewallArn</a> - The Amazon Resource
--   Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:firewallName:UpdateSubnetChangeProtection'</a>,
--   <a>updateSubnetChangeProtection_firewallName</a> - The descriptive
--   name of the firewall. You can't change the name of a firewall after
--   you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:subnetChangeProtection:UpdateSubnetChangeProtection'</a>,
--   <a>updateSubnetChangeProtection_subnetChangeProtection</a> - A setting
--   indicating whether the firewall is protected against changes to the
--   subnet associations. Use this setting to protect against accidentally
--   modifying the subnet associations for a firewall that is in use. When
--   you create a firewall, the operation initializes this setting to
--   <tt>TRUE</tt>.
newUpdateSubnetChangeProtection :: Bool -> UpdateSubnetChangeProtection

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
updateSubnetChangeProtection_updateToken :: Lens' UpdateSubnetChangeProtection (Maybe Text)

-- | The Amazon Resource Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
updateSubnetChangeProtection_firewallArn :: Lens' UpdateSubnetChangeProtection (Maybe Text)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
updateSubnetChangeProtection_firewallName :: Lens' UpdateSubnetChangeProtection (Maybe Text)

-- | A setting indicating whether the firewall is protected against changes
--   to the subnet associations. Use this setting to protect against
--   accidentally modifying the subnet associations for a firewall that is
--   in use. When you create a firewall, the operation initializes this
--   setting to <tt>TRUE</tt>.
updateSubnetChangeProtection_subnetChangeProtection :: Lens' UpdateSubnetChangeProtection Bool

-- | <i>See:</i> <a>newUpdateSubnetChangeProtectionResponse</a> smart
--   constructor.
data UpdateSubnetChangeProtectionResponse
UpdateSubnetChangeProtectionResponse' :: Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Text -> Int -> UpdateSubnetChangeProtectionResponse

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
[$sel:updateToken:UpdateSubnetChangeProtectionResponse'] :: UpdateSubnetChangeProtectionResponse -> Maybe Text

-- | The Amazon Resource Name (ARN) of the firewall.
[$sel:firewallArn:UpdateSubnetChangeProtectionResponse'] :: UpdateSubnetChangeProtectionResponse -> Maybe Text

-- | A setting indicating whether the firewall is protected against changes
--   to the subnet associations. Use this setting to protect against
--   accidentally modifying the subnet associations for a firewall that is
--   in use. When you create a firewall, the operation initializes this
--   setting to <tt>TRUE</tt>.
[$sel:subnetChangeProtection:UpdateSubnetChangeProtectionResponse'] :: UpdateSubnetChangeProtectionResponse -> Maybe Bool

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
[$sel:firewallName:UpdateSubnetChangeProtectionResponse'] :: UpdateSubnetChangeProtectionResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:UpdateSubnetChangeProtectionResponse'] :: UpdateSubnetChangeProtectionResponse -> Int

-- | Create a value of <a>UpdateSubnetChangeProtectionResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:updateToken:UpdateSubnetChangeProtection'</a>,
--   <a>updateSubnetChangeProtectionResponse_updateToken</a> - An optional
--   token that you can use for optimistic locking. Network Firewall
--   returns a token to your requests that access the firewall. The token
--   marks the state of the firewall resource at the time of the request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
--   
--   <a>$sel:firewallArn:UpdateSubnetChangeProtection'</a>,
--   <a>updateSubnetChangeProtectionResponse_firewallArn</a> - The Amazon
--   Resource Name (ARN) of the firewall.
--   
--   <a>$sel:subnetChangeProtection:UpdateSubnetChangeProtection'</a>,
--   <a>updateSubnetChangeProtectionResponse_subnetChangeProtection</a> - A
--   setting indicating whether the firewall is protected against changes
--   to the subnet associations. Use this setting to protect against
--   accidentally modifying the subnet associations for a firewall that is
--   in use. When you create a firewall, the operation initializes this
--   setting to <tt>TRUE</tt>.
--   
--   <a>$sel:firewallName:UpdateSubnetChangeProtection'</a>,
--   <a>updateSubnetChangeProtectionResponse_firewallName</a> - The
--   descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   <a>$sel:httpStatus:UpdateSubnetChangeProtectionResponse'</a>,
--   <a>updateSubnetChangeProtectionResponse_httpStatus</a> - The
--   response's http status code.
newUpdateSubnetChangeProtectionResponse :: Int -> UpdateSubnetChangeProtectionResponse

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
updateSubnetChangeProtectionResponse_updateToken :: Lens' UpdateSubnetChangeProtectionResponse (Maybe Text)

-- | The Amazon Resource Name (ARN) of the firewall.
updateSubnetChangeProtectionResponse_firewallArn :: Lens' UpdateSubnetChangeProtectionResponse (Maybe Text)

-- | A setting indicating whether the firewall is protected against changes
--   to the subnet associations. Use this setting to protect against
--   accidentally modifying the subnet associations for a firewall that is
--   in use. When you create a firewall, the operation initializes this
--   setting to <tt>TRUE</tt>.
updateSubnetChangeProtectionResponse_subnetChangeProtection :: Lens' UpdateSubnetChangeProtectionResponse (Maybe Bool)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
updateSubnetChangeProtectionResponse_firewallName :: Lens' UpdateSubnetChangeProtectionResponse (Maybe Text)

-- | The response's http status code.
updateSubnetChangeProtectionResponse_httpStatus :: Lens' UpdateSubnetChangeProtectionResponse Int
instance GHC.Generics.Generic Amazonka.NetworkFirewall.UpdateSubnetChangeProtection.UpdateSubnetChangeProtection
instance GHC.Show.Show Amazonka.NetworkFirewall.UpdateSubnetChangeProtection.UpdateSubnetChangeProtection
instance GHC.Read.Read Amazonka.NetworkFirewall.UpdateSubnetChangeProtection.UpdateSubnetChangeProtection
instance GHC.Classes.Eq Amazonka.NetworkFirewall.UpdateSubnetChangeProtection.UpdateSubnetChangeProtection
instance GHC.Generics.Generic Amazonka.NetworkFirewall.UpdateSubnetChangeProtection.UpdateSubnetChangeProtectionResponse
instance GHC.Show.Show Amazonka.NetworkFirewall.UpdateSubnetChangeProtection.UpdateSubnetChangeProtectionResponse
instance GHC.Read.Read Amazonka.NetworkFirewall.UpdateSubnetChangeProtection.UpdateSubnetChangeProtectionResponse
instance GHC.Classes.Eq Amazonka.NetworkFirewall.UpdateSubnetChangeProtection.UpdateSubnetChangeProtectionResponse
instance Amazonka.Types.AWSRequest Amazonka.NetworkFirewall.UpdateSubnetChangeProtection.UpdateSubnetChangeProtection
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.UpdateSubnetChangeProtection.UpdateSubnetChangeProtectionResponse
instance Data.Hashable.Class.Hashable Amazonka.NetworkFirewall.UpdateSubnetChangeProtection.UpdateSubnetChangeProtection
instance Control.DeepSeq.NFData Amazonka.NetworkFirewall.UpdateSubnetChangeProtection.UpdateSubnetChangeProtection
instance Amazonka.Data.Headers.ToHeaders Amazonka.NetworkFirewall.UpdateSubnetChangeProtection.UpdateSubnetChangeProtection
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.NetworkFirewall.UpdateSubnetChangeProtection.UpdateSubnetChangeProtection
instance Amazonka.Data.Path.ToPath Amazonka.NetworkFirewall.UpdateSubnetChangeProtection.UpdateSubnetChangeProtection
instance Amazonka.Data.Query.ToQuery Amazonka.NetworkFirewall.UpdateSubnetChangeProtection.UpdateSubnetChangeProtection


module Amazonka.NetworkFirewall.Lens

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
associateSubnets_updateToken :: Lens' AssociateSubnets (Maybe Text)

-- | The Amazon Resource Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
associateSubnets_firewallArn :: Lens' AssociateSubnets (Maybe Text)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
associateSubnets_firewallName :: Lens' AssociateSubnets (Maybe Text)

-- | The IDs of the subnets that you want to associate with the firewall.
associateSubnets_subnetMappings :: Lens' AssociateSubnets [SubnetMapping]

-- | The IDs of the subnets that are associated with the firewall.
associateSubnetsResponse_subnetMappings :: Lens' AssociateSubnetsResponse (Maybe [SubnetMapping])

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
associateSubnetsResponse_updateToken :: Lens' AssociateSubnetsResponse (Maybe Text)

-- | The Amazon Resource Name (ARN) of the firewall.
associateSubnetsResponse_firewallArn :: Lens' AssociateSubnetsResponse (Maybe Text)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
associateSubnetsResponse_firewallName :: Lens' AssociateSubnetsResponse (Maybe Text)

-- | The response's http status code.
associateSubnetsResponse_httpStatus :: Lens' AssociateSubnetsResponse Int

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
updateSubnetChangeProtection_updateToken :: Lens' UpdateSubnetChangeProtection (Maybe Text)

-- | The Amazon Resource Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
updateSubnetChangeProtection_firewallArn :: Lens' UpdateSubnetChangeProtection (Maybe Text)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
updateSubnetChangeProtection_firewallName :: Lens' UpdateSubnetChangeProtection (Maybe Text)

-- | A setting indicating whether the firewall is protected against changes
--   to the subnet associations. Use this setting to protect against
--   accidentally modifying the subnet associations for a firewall that is
--   in use. When you create a firewall, the operation initializes this
--   setting to <tt>TRUE</tt>.
updateSubnetChangeProtection_subnetChangeProtection :: Lens' UpdateSubnetChangeProtection Bool

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
updateSubnetChangeProtectionResponse_updateToken :: Lens' UpdateSubnetChangeProtectionResponse (Maybe Text)

-- | The Amazon Resource Name (ARN) of the firewall.
updateSubnetChangeProtectionResponse_firewallArn :: Lens' UpdateSubnetChangeProtectionResponse (Maybe Text)

-- | A setting indicating whether the firewall is protected against changes
--   to the subnet associations. Use this setting to protect against
--   accidentally modifying the subnet associations for a firewall that is
--   in use. When you create a firewall, the operation initializes this
--   setting to <tt>TRUE</tt>.
updateSubnetChangeProtectionResponse_subnetChangeProtection :: Lens' UpdateSubnetChangeProtectionResponse (Maybe Bool)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
updateSubnetChangeProtectionResponse_firewallName :: Lens' UpdateSubnetChangeProtectionResponse (Maybe Text)

-- | The response's http status code.
updateSubnetChangeProtectionResponse_httpStatus :: Lens' UpdateSubnetChangeProtectionResponse Int

-- | The descriptive name of the firewall policy. You can't change the name
--   of a firewall policy after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
updateFirewallPolicy_firewallPolicyName :: Lens' UpdateFirewallPolicy (Maybe Text)

-- | The Amazon Resource Name (ARN) of the firewall policy.
--   
--   You must specify the ARN or the name, and you can specify both.
updateFirewallPolicy_firewallPolicyArn :: Lens' UpdateFirewallPolicy (Maybe Text)

-- | A description of the firewall policy.
updateFirewallPolicy_description :: Lens' UpdateFirewallPolicy (Maybe Text)

-- | Indicates whether you want Network Firewall to just check the validity
--   of the request, rather than run the request.
--   
--   If set to <tt>TRUE</tt>, Network Firewall checks whether the request
--   can run successfully, but doesn't actually make the requested changes.
--   The call returns the value that the request would return if you ran it
--   with dry run set to <tt>FALSE</tt>, but doesn't make additions or
--   changes to your resources. This option allows you to make sure that
--   you have the required permissions to run the request and that your
--   request parameters are valid.
--   
--   If set to <tt>FALSE</tt>, Network Firewall makes the requested changes
--   to your resources.
updateFirewallPolicy_dryRun :: Lens' UpdateFirewallPolicy (Maybe Bool)

-- | A token used for optimistic locking. Network Firewall returns a token
--   to your requests that access the firewall policy. The token marks the
--   state of the policy resource at the time of the request.
--   
--   To make changes to the policy, you provide the token in your request.
--   Network Firewall uses the token to ensure that the policy hasn't
--   changed since you last retrieved it. If it has changed, the operation
--   fails with an <tt>InvalidTokenException</tt>. If this happens,
--   retrieve the firewall policy again to get a current copy of it with
--   current token. Reapply your changes as needed, then try the operation
--   again using the new token.
updateFirewallPolicy_updateToken :: Lens' UpdateFirewallPolicy Text

-- | The updated firewall policy to use for the firewall.
updateFirewallPolicy_firewallPolicy :: Lens' UpdateFirewallPolicy FirewallPolicy

-- | The response's http status code.
updateFirewallPolicyResponse_httpStatus :: Lens' UpdateFirewallPolicyResponse Int

-- | A token used for optimistic locking. Network Firewall returns a token
--   to your requests that access the firewall policy. The token marks the
--   state of the policy resource at the time of the request.
--   
--   To make changes to the policy, you provide the token in your request.
--   Network Firewall uses the token to ensure that the policy hasn't
--   changed since you last retrieved it. If it has changed, the operation
--   fails with an <tt>InvalidTokenException</tt>. If this happens,
--   retrieve the firewall policy again to get a current copy of it with
--   current token. Reapply your changes as needed, then try the operation
--   again using the new token.
updateFirewallPolicyResponse_updateToken :: Lens' UpdateFirewallPolicyResponse Text

-- | The high-level properties of a firewall policy. This, along with the
--   FirewallPolicy, define the policy. You can retrieve all objects for a
--   firewall policy by calling DescribeFirewallPolicy.
updateFirewallPolicyResponse_firewallPolicyResponse :: Lens' UpdateFirewallPolicyResponse FirewallPolicyResponse

-- | The descriptive name of the firewall policy. You can't change the name
--   of a firewall policy after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
deleteFirewallPolicy_firewallPolicyName :: Lens' DeleteFirewallPolicy (Maybe Text)

-- | The Amazon Resource Name (ARN) of the firewall policy.
--   
--   You must specify the ARN or the name, and you can specify both.
deleteFirewallPolicy_firewallPolicyArn :: Lens' DeleteFirewallPolicy (Maybe Text)

-- | The response's http status code.
deleteFirewallPolicyResponse_httpStatus :: Lens' DeleteFirewallPolicyResponse Int

-- | The object containing the definition of the FirewallPolicyResponse
--   that you asked to delete.
deleteFirewallPolicyResponse_firewallPolicyResponse :: Lens' DeleteFirewallPolicyResponse FirewallPolicyResponse

-- | A description of the firewall policy.
createFirewallPolicy_description :: Lens' CreateFirewallPolicy (Maybe Text)

-- | Indicates whether you want Network Firewall to just check the validity
--   of the request, rather than run the request.
--   
--   If set to <tt>TRUE</tt>, Network Firewall checks whether the request
--   can run successfully, but doesn't actually make the requested changes.
--   The call returns the value that the request would return if you ran it
--   with dry run set to <tt>FALSE</tt>, but doesn't make additions or
--   changes to your resources. This option allows you to make sure that
--   you have the required permissions to run the request and that your
--   request parameters are valid.
--   
--   If set to <tt>FALSE</tt>, Network Firewall makes the requested changes
--   to your resources.
createFirewallPolicy_dryRun :: Lens' CreateFirewallPolicy (Maybe Bool)

-- | The key:value pairs to associate with the resource.
createFirewallPolicy_tags :: Lens' CreateFirewallPolicy (Maybe (NonEmpty Tag))

-- | The descriptive name of the firewall policy. You can't change the name
--   of a firewall policy after you create it.
createFirewallPolicy_firewallPolicyName :: Lens' CreateFirewallPolicy Text

-- | The rule groups and policy actions to use in the firewall policy.
createFirewallPolicy_firewallPolicy :: Lens' CreateFirewallPolicy FirewallPolicy

-- | The response's http status code.
createFirewallPolicyResponse_httpStatus :: Lens' CreateFirewallPolicyResponse Int

-- | A token used for optimistic locking. Network Firewall returns a token
--   to your requests that access the firewall policy. The token marks the
--   state of the policy resource at the time of the request.
--   
--   To make changes to the policy, you provide the token in your request.
--   Network Firewall uses the token to ensure that the policy hasn't
--   changed since you last retrieved it. If it has changed, the operation
--   fails with an <tt>InvalidTokenException</tt>. If this happens,
--   retrieve the firewall policy again to get a current copy of it with
--   current token. Reapply your changes as needed, then try the operation
--   again using the new token.
createFirewallPolicyResponse_updateToken :: Lens' CreateFirewallPolicyResponse Text

-- | The high-level properties of a firewall policy. This, along with the
--   FirewallPolicy, define the policy. You can retrieve all objects for a
--   firewall policy by calling DescribeFirewallPolicy.
createFirewallPolicyResponse_firewallPolicyResponse :: Lens' CreateFirewallPolicyResponse FirewallPolicyResponse

-- | The Amazon Resource Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
updateLoggingConfiguration_firewallArn :: Lens' UpdateLoggingConfiguration (Maybe Text)

-- | Defines how Network Firewall performs logging for a firewall. If you
--   omit this setting, Network Firewall disables logging for the firewall.
updateLoggingConfiguration_loggingConfiguration :: Lens' UpdateLoggingConfiguration (Maybe LoggingConfiguration)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
updateLoggingConfiguration_firewallName :: Lens' UpdateLoggingConfiguration (Maybe Text)

-- | The Amazon Resource Name (ARN) of the firewall.
updateLoggingConfigurationResponse_firewallArn :: Lens' UpdateLoggingConfigurationResponse (Maybe Text)

-- | Undocumented member.
updateLoggingConfigurationResponse_loggingConfiguration :: Lens' UpdateLoggingConfigurationResponse (Maybe LoggingConfiguration)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
updateLoggingConfigurationResponse_firewallName :: Lens' UpdateLoggingConfigurationResponse (Maybe Text)

-- | The response's http status code.
updateLoggingConfigurationResponse_httpStatus :: Lens' UpdateLoggingConfigurationResponse Int

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
disassociateSubnets_updateToken :: Lens' DisassociateSubnets (Maybe Text)

-- | The Amazon Resource Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
disassociateSubnets_firewallArn :: Lens' DisassociateSubnets (Maybe Text)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
disassociateSubnets_firewallName :: Lens' DisassociateSubnets (Maybe Text)

-- | The unique identifiers for the subnets that you want to disassociate.
disassociateSubnets_subnetIds :: Lens' DisassociateSubnets [Text]

-- | The IDs of the subnets that are associated with the firewall.
disassociateSubnetsResponse_subnetMappings :: Lens' DisassociateSubnetsResponse (Maybe [SubnetMapping])

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
disassociateSubnetsResponse_updateToken :: Lens' DisassociateSubnetsResponse (Maybe Text)

-- | The Amazon Resource Name (ARN) of the firewall.
disassociateSubnetsResponse_firewallArn :: Lens' DisassociateSubnetsResponse (Maybe Text)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
disassociateSubnetsResponse_firewallName :: Lens' DisassociateSubnetsResponse (Maybe Text)

-- | The response's http status code.
disassociateSubnetsResponse_httpStatus :: Lens' DisassociateSubnetsResponse Int

-- | When you request a list of objects with a <tt>MaxResults</tt> setting,
--   if the number of objects that are still available for retrieval
--   exceeds the maximum you requested, Network Firewall returns a
--   <tt>NextToken</tt> value in the response. To retrieve the next batch
--   of objects, use the token returned from the prior request in your next
--   request.
listTagsForResource_nextToken :: Lens' ListTagsForResource (Maybe Text)

-- | The maximum number of objects that you want Network Firewall to return
--   for this request. If more objects are available, in the response,
--   Network Firewall provides a <tt>NextToken</tt> value that you can use
--   in a subsequent call to get the next batch of objects.
listTagsForResource_maxResults :: Lens' ListTagsForResource (Maybe Natural)

-- | The Amazon Resource Name (ARN) of the resource.
listTagsForResource_resourceArn :: Lens' ListTagsForResource Text

-- | When you request a list of objects with a <tt>MaxResults</tt> setting,
--   if the number of objects that are still available for retrieval
--   exceeds the maximum you requested, Network Firewall returns a
--   <tt>NextToken</tt> value in the response. To retrieve the next batch
--   of objects, use the token returned from the prior request in your next
--   request.
listTagsForResourceResponse_nextToken :: Lens' ListTagsForResourceResponse (Maybe Text)

-- | The tags that are associated with the resource.
listTagsForResourceResponse_tags :: Lens' ListTagsForResourceResponse (Maybe (NonEmpty Tag))

-- | The response's http status code.
listTagsForResourceResponse_httpStatus :: Lens' ListTagsForResourceResponse Int

-- | When you request a list of objects with a <tt>MaxResults</tt> setting,
--   if the number of objects that are still available for retrieval
--   exceeds the maximum you requested, Network Firewall returns a
--   <tt>NextToken</tt> value in the response. To retrieve the next batch
--   of objects, use the token returned from the prior request in your next
--   request.
listFirewallPolicies_nextToken :: Lens' ListFirewallPolicies (Maybe Text)

-- | The maximum number of objects that you want Network Firewall to return
--   for this request. If more objects are available, in the response,
--   Network Firewall provides a <tt>NextToken</tt> value that you can use
--   in a subsequent call to get the next batch of objects.
listFirewallPolicies_maxResults :: Lens' ListFirewallPolicies (Maybe Natural)

-- | The metadata for the firewall policies. Depending on your setting for
--   max results and the number of firewall policies that you have, this
--   might not be the full list.
listFirewallPoliciesResponse_firewallPolicies :: Lens' ListFirewallPoliciesResponse (Maybe [FirewallPolicyMetadata])

-- | When you request a list of objects with a <tt>MaxResults</tt> setting,
--   if the number of objects that are still available for retrieval
--   exceeds the maximum you requested, Network Firewall returns a
--   <tt>NextToken</tt> value in the response. To retrieve the next batch
--   of objects, use the token returned from the prior request in your next
--   request.
listFirewallPoliciesResponse_nextToken :: Lens' ListFirewallPoliciesResponse (Maybe Text)

-- | The response's http status code.
listFirewallPoliciesResponse_httpStatus :: Lens' ListFirewallPoliciesResponse Int

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
updateFirewallDeleteProtection_updateToken :: Lens' UpdateFirewallDeleteProtection (Maybe Text)

-- | The Amazon Resource Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
updateFirewallDeleteProtection_firewallArn :: Lens' UpdateFirewallDeleteProtection (Maybe Text)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
updateFirewallDeleteProtection_firewallName :: Lens' UpdateFirewallDeleteProtection (Maybe Text)

-- | A flag indicating whether it is possible to delete the firewall. A
--   setting of <tt>TRUE</tt> indicates that the firewall is protected
--   against deletion. Use this setting to protect against accidentally
--   deleting a firewall that is in use. When you create a firewall, the
--   operation initializes this flag to <tt>TRUE</tt>.
updateFirewallDeleteProtection_deleteProtection :: Lens' UpdateFirewallDeleteProtection Bool

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
updateFirewallDeleteProtectionResponse_updateToken :: Lens' UpdateFirewallDeleteProtectionResponse (Maybe Text)

-- | The Amazon Resource Name (ARN) of the firewall.
updateFirewallDeleteProtectionResponse_firewallArn :: Lens' UpdateFirewallDeleteProtectionResponse (Maybe Text)

updateFirewallDeleteProtectionResponse_deleteProtection :: Lens' UpdateFirewallDeleteProtectionResponse (Maybe Bool)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
updateFirewallDeleteProtectionResponse_firewallName :: Lens' UpdateFirewallDeleteProtectionResponse (Maybe Text)

-- | The response's http status code.
updateFirewallDeleteProtectionResponse_httpStatus :: Lens' UpdateFirewallDeleteProtectionResponse Int

-- | A string containing stateful rule group rules specifications in
--   Suricata flat format, with one rule per line. Use this to import your
--   existing Suricata compatible rule groups.
--   
--   You must provide either this rules setting or a populated
--   <tt>RuleGroup</tt> setting, but not both.
--   
--   You can provide your rule group specification in Suricata flat format
--   through this setting when you create or update your rule group. The
--   call response returns a RuleGroup object that Network Firewall has
--   populated from your string.
createRuleGroup_rules :: Lens' CreateRuleGroup (Maybe Text)

-- | A description of the rule group.
createRuleGroup_description :: Lens' CreateRuleGroup (Maybe Text)

-- | Indicates whether you want Network Firewall to just check the validity
--   of the request, rather than run the request.
--   
--   If set to <tt>TRUE</tt>, Network Firewall checks whether the request
--   can run successfully, but doesn't actually make the requested changes.
--   The call returns the value that the request would return if you ran it
--   with dry run set to <tt>FALSE</tt>, but doesn't make additions or
--   changes to your resources. This option allows you to make sure that
--   you have the required permissions to run the request and that your
--   request parameters are valid.
--   
--   If set to <tt>FALSE</tt>, Network Firewall makes the requested changes
--   to your resources.
createRuleGroup_dryRun :: Lens' CreateRuleGroup (Maybe Bool)

-- | The key:value pairs to associate with the resource.
createRuleGroup_tags :: Lens' CreateRuleGroup (Maybe (NonEmpty Tag))

-- | An object that defines the rule group rules.
--   
--   You must provide either this rule group setting or a <tt>Rules</tt>
--   setting, but not both.
createRuleGroup_ruleGroup :: Lens' CreateRuleGroup (Maybe RuleGroup)

-- | The descriptive name of the rule group. You can't change the name of a
--   rule group after you create it.
createRuleGroup_ruleGroupName :: Lens' CreateRuleGroup Text

-- | Indicates whether the rule group is stateless or stateful. If the rule
--   group is stateless, it contains stateless rules. If it is stateful, it
--   contains stateful rules.
createRuleGroup_type :: Lens' CreateRuleGroup RuleGroupType

-- | The maximum operating resources that this rule group can use. Rule
--   group capacity is fixed at creation. When you update a rule group, you
--   are limited to this capacity. When you reference a rule group from a
--   firewall policy, Network Firewall reserves this capacity for the rule
--   group.
--   
--   You can retrieve the capacity that would be required for a rule group
--   before you create the rule group by calling CreateRuleGroup with
--   <tt>DryRun</tt> set to <tt>TRUE</tt>.
--   
--   You can't change or exceed this capacity when you update the rule
--   group, so leave room for your rule group to grow.
--   
--   <b>Capacity for a stateless rule group</b>
--   
--   For a stateless rule group, the capacity required is the sum of the
--   capacity requirements of the individual rules that you expect to have
--   in the rule group.
--   
--   To calculate the capacity requirement of a single rule, multiply the
--   capacity requirement values of each of the rule's match settings:
--   
--   <ul>
--   <li>A match setting with no criteria specified has a value of 1.</li>
--   <li>A match setting with <tt>Any</tt> specified has a value of 1.</li>
--   <li>All other match settings have a value equal to the number of
--   elements provided in the setting. For example, a protocol setting
--   ["UDP"] and a source setting ["10.0.0.0/24"] each have a value of 1. A
--   protocol setting ["UDP","TCP"] has a value of 2. A source setting
--   ["10.0.0.0/24","10.0.0.1/24","10.0.0.2/24"] has a value of 3.</li>
--   </ul>
--   
--   A rule with no criteria specified in any of its match settings has a
--   capacity requirement of 1. A rule with protocol setting ["UDP","TCP"],
--   source setting ["10.0.0.0/24","10.0.0.1/24","10.0.0.2/24"], and a
--   single specification or no specification for each of the other match
--   settings has a capacity requirement of 6.
--   
--   <b>Capacity for a stateful rule group</b>
--   
--   For a stateful rule group, the minimum capacity required is the number
--   of individual rules that you expect to have in the rule group.
createRuleGroup_capacity :: Lens' CreateRuleGroup Int

-- | The response's http status code.
createRuleGroupResponse_httpStatus :: Lens' CreateRuleGroupResponse Int

-- | A token used for optimistic locking. Network Firewall returns a token
--   to your requests that access the rule group. The token marks the state
--   of the rule group resource at the time of the request.
--   
--   To make changes to the rule group, you provide the token in your
--   request. Network Firewall uses the token to ensure that the rule group
--   hasn't changed since you last retrieved it. If it has changed, the
--   operation fails with an <tt>InvalidTokenException</tt>. If this
--   happens, retrieve the rule group again to get a current copy of it
--   with a current token. Reapply your changes as needed, then try the
--   operation again using the new token.
createRuleGroupResponse_updateToken :: Lens' CreateRuleGroupResponse Text

-- | The high-level properties of a rule group. This, along with the
--   RuleGroup, define the rule group. You can retrieve all objects for a
--   rule group by calling DescribeRuleGroup.
createRuleGroupResponse_ruleGroupResponse :: Lens' CreateRuleGroupResponse RuleGroupResponse

-- | The descriptive name of the firewall policy. You can't change the name
--   of a firewall policy after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
describeFirewallPolicy_firewallPolicyName :: Lens' DescribeFirewallPolicy (Maybe Text)

-- | The Amazon Resource Name (ARN) of the firewall policy.
--   
--   You must specify the ARN or the name, and you can specify both.
describeFirewallPolicy_firewallPolicyArn :: Lens' DescribeFirewallPolicy (Maybe Text)

-- | The policy for the specified firewall policy.
describeFirewallPolicyResponse_firewallPolicy :: Lens' DescribeFirewallPolicyResponse (Maybe FirewallPolicy)

-- | The response's http status code.
describeFirewallPolicyResponse_httpStatus :: Lens' DescribeFirewallPolicyResponse Int

-- | A token used for optimistic locking. Network Firewall returns a token
--   to your requests that access the firewall policy. The token marks the
--   state of the policy resource at the time of the request.
--   
--   To make changes to the policy, you provide the token in your request.
--   Network Firewall uses the token to ensure that the policy hasn't
--   changed since you last retrieved it. If it has changed, the operation
--   fails with an <tt>InvalidTokenException</tt>. If this happens,
--   retrieve the firewall policy again to get a current copy of it with
--   current token. Reapply your changes as needed, then try the operation
--   again using the new token.
describeFirewallPolicyResponse_updateToken :: Lens' DescribeFirewallPolicyResponse Text

-- | The high-level properties of a firewall policy. This, along with the
--   FirewallPolicy, define the policy. You can retrieve all objects for a
--   firewall policy by calling DescribeFirewallPolicy.
describeFirewallPolicyResponse_firewallPolicyResponse :: Lens' DescribeFirewallPolicyResponse FirewallPolicyResponse

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
updateFirewallDescription_updateToken :: Lens' UpdateFirewallDescription (Maybe Text)

-- | The Amazon Resource Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
updateFirewallDescription_firewallArn :: Lens' UpdateFirewallDescription (Maybe Text)

-- | The new description for the firewall. If you omit this setting,
--   Network Firewall removes the description for the firewall.
updateFirewallDescription_description :: Lens' UpdateFirewallDescription (Maybe Text)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
updateFirewallDescription_firewallName :: Lens' UpdateFirewallDescription (Maybe Text)

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
updateFirewallDescriptionResponse_updateToken :: Lens' UpdateFirewallDescriptionResponse (Maybe Text)

-- | The Amazon Resource Name (ARN) of the firewall.
updateFirewallDescriptionResponse_firewallArn :: Lens' UpdateFirewallDescriptionResponse (Maybe Text)

-- | A description of the firewall.
updateFirewallDescriptionResponse_description :: Lens' UpdateFirewallDescriptionResponse (Maybe Text)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
updateFirewallDescriptionResponse_firewallName :: Lens' UpdateFirewallDescriptionResponse (Maybe Text)

-- | The response's http status code.
updateFirewallDescriptionResponse_httpStatus :: Lens' UpdateFirewallDescriptionResponse Int

-- | The Amazon Resource Name (ARN) of the rule group.
--   
--   You must specify the ARN or the name, and you can specify both.
describeRuleGroup_ruleGroupArn :: Lens' DescribeRuleGroup (Maybe Text)

-- | Indicates whether the rule group is stateless or stateful. If the rule
--   group is stateless, it contains stateless rules. If it is stateful, it
--   contains stateful rules.
--   
--   This setting is required for requests that do not include the
--   <tt>RuleGroupARN</tt>.
describeRuleGroup_type :: Lens' DescribeRuleGroup (Maybe RuleGroupType)

-- | The descriptive name of the rule group. You can't change the name of a
--   rule group after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
describeRuleGroup_ruleGroupName :: Lens' DescribeRuleGroup (Maybe Text)

-- | The object that defines the rules in a rule group. This, along with
--   RuleGroupResponse, define the rule group. You can retrieve all objects
--   for a rule group by calling DescribeRuleGroup.
--   
--   AWS Network Firewall uses a rule group to inspect and control network
--   traffic. You define stateless rule groups to inspect individual
--   packets and you define stateful rule groups to inspect packets in the
--   context of their traffic flow.
--   
--   To use a rule group, you include it by reference in an Network
--   Firewall firewall policy, then you use the policy in a firewall. You
--   can reference a rule group from more than one firewall policy, and you
--   can use a firewall policy in more than one firewall.
describeRuleGroupResponse_ruleGroup :: Lens' DescribeRuleGroupResponse (Maybe RuleGroup)

-- | The response's http status code.
describeRuleGroupResponse_httpStatus :: Lens' DescribeRuleGroupResponse Int

-- | A token used for optimistic locking. Network Firewall returns a token
--   to your requests that access the rule group. The token marks the state
--   of the rule group resource at the time of the request.
--   
--   To make changes to the rule group, you provide the token in your
--   request. Network Firewall uses the token to ensure that the rule group
--   hasn't changed since you last retrieved it. If it has changed, the
--   operation fails with an <tt>InvalidTokenException</tt>. If this
--   happens, retrieve the rule group again to get a current copy of it
--   with a current token. Reapply your changes as needed, then try the
--   operation again using the new token.
describeRuleGroupResponse_updateToken :: Lens' DescribeRuleGroupResponse Text

-- | The high-level properties of a rule group. This, along with the
--   RuleGroup, define the rule group. You can retrieve all objects for a
--   rule group by calling DescribeRuleGroup.
describeRuleGroupResponse_ruleGroupResponse :: Lens' DescribeRuleGroupResponse RuleGroupResponse

-- | The Amazon Resource Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
deleteFirewall_firewallArn :: Lens' DeleteFirewall (Maybe Text)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
deleteFirewall_firewallName :: Lens' DeleteFirewall (Maybe Text)

-- | Undocumented member.
deleteFirewallResponse_firewallStatus :: Lens' DeleteFirewallResponse (Maybe FirewallStatus)

-- | Undocumented member.
deleteFirewallResponse_firewall :: Lens' DeleteFirewallResponse (Maybe Firewall)

-- | The response's http status code.
deleteFirewallResponse_httpStatus :: Lens' DeleteFirewallResponse Int

-- | When you request a list of objects with a <tt>MaxResults</tt> setting,
--   if the number of objects that are still available for retrieval
--   exceeds the maximum you requested, Network Firewall returns a
--   <tt>NextToken</tt> value in the response. To retrieve the next batch
--   of objects, use the token returned from the prior request in your next
--   request.
listFirewalls_nextToken :: Lens' ListFirewalls (Maybe Text)

-- | The unique identifiers of the VPCs that you want Network Firewall to
--   retrieve the firewalls for. Leave this blank to retrieve all firewalls
--   that you have defined.
listFirewalls_vpcIds :: Lens' ListFirewalls (Maybe [Text])

-- | The maximum number of objects that you want Network Firewall to return
--   for this request. If more objects are available, in the response,
--   Network Firewall provides a <tt>NextToken</tt> value that you can use
--   in a subsequent call to get the next batch of objects.
listFirewalls_maxResults :: Lens' ListFirewalls (Maybe Natural)

-- | When you request a list of objects with a <tt>MaxResults</tt> setting,
--   if the number of objects that are still available for retrieval
--   exceeds the maximum you requested, Network Firewall returns a
--   <tt>NextToken</tt> value in the response. To retrieve the next batch
--   of objects, use the token returned from the prior request in your next
--   request.
listFirewallsResponse_nextToken :: Lens' ListFirewallsResponse (Maybe Text)

-- | The firewall metadata objects for the VPCs that you specified.
--   Depending on your setting for max results and the number of firewalls
--   you have, a single call might not be the full list.
listFirewallsResponse_firewalls :: Lens' ListFirewallsResponse (Maybe [FirewallMetadata])

-- | The response's http status code.
listFirewallsResponse_httpStatus :: Lens' ListFirewallsResponse Int

-- | The Amazon Resource Name (ARN) of the rule group or firewall policy
--   whose resource policy you want to retrieve.
describeResourcePolicy_resourceArn :: Lens' DescribeResourcePolicy Text

-- | The AWS Identity and Access Management policy for the resource.
describeResourcePolicyResponse_policy :: Lens' DescribeResourcePolicyResponse (Maybe Text)

-- | The response's http status code.
describeResourcePolicyResponse_httpStatus :: Lens' DescribeResourcePolicyResponse Int

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
associateFirewallPolicy_updateToken :: Lens' AssociateFirewallPolicy (Maybe Text)

-- | The Amazon Resource Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
associateFirewallPolicy_firewallArn :: Lens' AssociateFirewallPolicy (Maybe Text)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
associateFirewallPolicy_firewallName :: Lens' AssociateFirewallPolicy (Maybe Text)

-- | The Amazon Resource Name (ARN) of the firewall policy.
associateFirewallPolicy_firewallPolicyArn :: Lens' AssociateFirewallPolicy Text

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
associateFirewallPolicyResponse_updateToken :: Lens' AssociateFirewallPolicyResponse (Maybe Text)

-- | The Amazon Resource Name (ARN) of the firewall.
associateFirewallPolicyResponse_firewallArn :: Lens' AssociateFirewallPolicyResponse (Maybe Text)

-- | The Amazon Resource Name (ARN) of the firewall policy.
associateFirewallPolicyResponse_firewallPolicyArn :: Lens' AssociateFirewallPolicyResponse (Maybe Text)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
associateFirewallPolicyResponse_firewallName :: Lens' AssociateFirewallPolicyResponse (Maybe Text)

-- | The response's http status code.
associateFirewallPolicyResponse_httpStatus :: Lens' AssociateFirewallPolicyResponse Int

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
updateFirewallPolicyChangeProtection_updateToken :: Lens' UpdateFirewallPolicyChangeProtection (Maybe Text)

-- | The Amazon Resource Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
updateFirewallPolicyChangeProtection_firewallArn :: Lens' UpdateFirewallPolicyChangeProtection (Maybe Text)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
updateFirewallPolicyChangeProtection_firewallName :: Lens' UpdateFirewallPolicyChangeProtection (Maybe Text)

-- | A setting indicating whether the firewall is protected against a
--   change to the firewall policy association. Use this setting to protect
--   against accidentally modifying the firewall policy for a firewall that
--   is in use. When you create a firewall, the operation initializes this
--   setting to <tt>TRUE</tt>.
updateFirewallPolicyChangeProtection_firewallPolicyChangeProtection :: Lens' UpdateFirewallPolicyChangeProtection Bool

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
updateFirewallPolicyChangeProtectionResponse_updateToken :: Lens' UpdateFirewallPolicyChangeProtectionResponse (Maybe Text)

-- | The Amazon Resource Name (ARN) of the firewall.
updateFirewallPolicyChangeProtectionResponse_firewallArn :: Lens' UpdateFirewallPolicyChangeProtectionResponse (Maybe Text)

-- | A setting indicating whether the firewall is protected against a
--   change to the firewall policy association. Use this setting to protect
--   against accidentally modifying the firewall policy for a firewall that
--   is in use. When you create a firewall, the operation initializes this
--   setting to <tt>TRUE</tt>.
updateFirewallPolicyChangeProtectionResponse_firewallPolicyChangeProtection :: Lens' UpdateFirewallPolicyChangeProtectionResponse (Maybe Bool)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
updateFirewallPolicyChangeProtectionResponse_firewallName :: Lens' UpdateFirewallPolicyChangeProtectionResponse (Maybe Text)

-- | The response's http status code.
updateFirewallPolicyChangeProtectionResponse_httpStatus :: Lens' UpdateFirewallPolicyChangeProtectionResponse Int

-- | A setting indicating whether the firewall is protected against a
--   change to the firewall policy association. Use this setting to protect
--   against accidentally modifying the firewall policy for a firewall that
--   is in use. When you create a firewall, the operation initializes this
--   setting to <tt>TRUE</tt>.
createFirewall_firewallPolicyChangeProtection :: Lens' CreateFirewall (Maybe Bool)

-- | A setting indicating whether the firewall is protected against changes
--   to the subnet associations. Use this setting to protect against
--   accidentally modifying the subnet associations for a firewall that is
--   in use. When you create a firewall, the operation initializes this
--   setting to <tt>TRUE</tt>.
createFirewall_subnetChangeProtection :: Lens' CreateFirewall (Maybe Bool)

-- | A flag indicating whether it is possible to delete the firewall. A
--   setting of <tt>TRUE</tt> indicates that the firewall is protected
--   against deletion. Use this setting to protect against accidentally
--   deleting a firewall that is in use. When you create a firewall, the
--   operation initializes this flag to <tt>TRUE</tt>.
createFirewall_deleteProtection :: Lens' CreateFirewall (Maybe Bool)

-- | A description of the firewall.
createFirewall_description :: Lens' CreateFirewall (Maybe Text)

-- | The key:value pairs to associate with the resource.
createFirewall_tags :: Lens' CreateFirewall (Maybe (NonEmpty Tag))

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
createFirewall_firewallName :: Lens' CreateFirewall Text

-- | The Amazon Resource Name (ARN) of the FirewallPolicy that you want to
--   use for the firewall.
createFirewall_firewallPolicyArn :: Lens' CreateFirewall Text

-- | The unique identifier of the VPC where Network Firewall should create
--   the firewall.
--   
--   You can't change this setting after you create the firewall.
createFirewall_vpcId :: Lens' CreateFirewall Text

-- | The public subnets to use for your Network Firewall firewalls. Each
--   subnet must belong to a different Availability Zone in the VPC.
--   Network Firewall creates a firewall endpoint in each subnet.
createFirewall_subnetMappings :: Lens' CreateFirewall [SubnetMapping]

-- | Detailed information about the current status of a Firewall. You can
--   retrieve this for a firewall by calling DescribeFirewall and providing
--   the firewall name and ARN.
createFirewallResponse_firewallStatus :: Lens' CreateFirewallResponse (Maybe FirewallStatus)

-- | The configuration settings for the firewall. These settings include
--   the firewall policy and the subnets in your VPC to use for the
--   firewall endpoints.
createFirewallResponse_firewall :: Lens' CreateFirewallResponse (Maybe Firewall)

-- | The response's http status code.
createFirewallResponse_httpStatus :: Lens' CreateFirewallResponse Int

-- | When you request a list of objects with a <tt>MaxResults</tt> setting,
--   if the number of objects that are still available for retrieval
--   exceeds the maximum you requested, Network Firewall returns a
--   <tt>NextToken</tt> value in the response. To retrieve the next batch
--   of objects, use the token returned from the prior request in your next
--   request.
listRuleGroups_nextToken :: Lens' ListRuleGroups (Maybe Text)

-- | The maximum number of objects that you want Network Firewall to return
--   for this request. If more objects are available, in the response,
--   Network Firewall provides a <tt>NextToken</tt> value that you can use
--   in a subsequent call to get the next batch of objects.
listRuleGroups_maxResults :: Lens' ListRuleGroups (Maybe Natural)

-- | When you request a list of objects with a <tt>MaxResults</tt> setting,
--   if the number of objects that are still available for retrieval
--   exceeds the maximum you requested, Network Firewall returns a
--   <tt>NextToken</tt> value in the response. To retrieve the next batch
--   of objects, use the token returned from the prior request in your next
--   request.
listRuleGroupsResponse_nextToken :: Lens' ListRuleGroupsResponse (Maybe Text)

-- | The rule group metadata objects that you've defined. Depending on your
--   setting for max results and the number of rule groups, this might not
--   be the full list.
listRuleGroupsResponse_ruleGroups :: Lens' ListRuleGroupsResponse (Maybe [RuleGroupMetadata])

-- | The response's http status code.
listRuleGroupsResponse_httpStatus :: Lens' ListRuleGroupsResponse Int

-- | The Amazon Resource Name (ARN) of the resource.
tagResource_resourceArn :: Lens' TagResource Text

tagResource_tags :: Lens' TagResource (NonEmpty Tag)

-- | The response's http status code.
tagResourceResponse_httpStatus :: Lens' TagResourceResponse Int

-- | The Amazon Resource Name (ARN) of the rule group.
--   
--   You must specify the ARN or the name, and you can specify both.
deleteRuleGroup_ruleGroupArn :: Lens' DeleteRuleGroup (Maybe Text)

-- | Indicates whether the rule group is stateless or stateful. If the rule
--   group is stateless, it contains stateless rules. If it is stateful, it
--   contains stateful rules.
--   
--   This setting is required for requests that do not include the
--   <tt>RuleGroupARN</tt>.
deleteRuleGroup_type :: Lens' DeleteRuleGroup (Maybe RuleGroupType)

-- | The descriptive name of the rule group. You can't change the name of a
--   rule group after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
deleteRuleGroup_ruleGroupName :: Lens' DeleteRuleGroup (Maybe Text)

-- | The response's http status code.
deleteRuleGroupResponse_httpStatus :: Lens' DeleteRuleGroupResponse Int

-- | The high-level properties of a rule group. This, along with the
--   RuleGroup, define the rule group. You can retrieve all objects for a
--   rule group by calling DescribeRuleGroup.
deleteRuleGroupResponse_ruleGroupResponse :: Lens' DeleteRuleGroupResponse RuleGroupResponse

-- | The Amazon Resource Name (ARN) of the rule group.
--   
--   You must specify the ARN or the name, and you can specify both.
updateRuleGroup_ruleGroupArn :: Lens' UpdateRuleGroup (Maybe Text)

-- | A string containing stateful rule group rules specifications in
--   Suricata flat format, with one rule per line. Use this to import your
--   existing Suricata compatible rule groups.
--   
--   You must provide either this rules setting or a populated
--   <tt>RuleGroup</tt> setting, but not both.
--   
--   You can provide your rule group specification in Suricata flat format
--   through this setting when you create or update your rule group. The
--   call response returns a RuleGroup object that Network Firewall has
--   populated from your string.
updateRuleGroup_rules :: Lens' UpdateRuleGroup (Maybe Text)

-- | Indicates whether the rule group is stateless or stateful. If the rule
--   group is stateless, it contains stateless rules. If it is stateful, it
--   contains stateful rules.
--   
--   This setting is required for requests that do not include the
--   <tt>RuleGroupARN</tt>.
updateRuleGroup_type :: Lens' UpdateRuleGroup (Maybe RuleGroupType)

-- | A description of the rule group.
updateRuleGroup_description :: Lens' UpdateRuleGroup (Maybe Text)

-- | The descriptive name of the rule group. You can't change the name of a
--   rule group after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
updateRuleGroup_ruleGroupName :: Lens' UpdateRuleGroup (Maybe Text)

-- | Indicates whether you want Network Firewall to just check the validity
--   of the request, rather than run the request.
--   
--   If set to <tt>TRUE</tt>, Network Firewall checks whether the request
--   can run successfully, but doesn't actually make the requested changes.
--   The call returns the value that the request would return if you ran it
--   with dry run set to <tt>FALSE</tt>, but doesn't make additions or
--   changes to your resources. This option allows you to make sure that
--   you have the required permissions to run the request and that your
--   request parameters are valid.
--   
--   If set to <tt>FALSE</tt>, Network Firewall makes the requested changes
--   to your resources.
updateRuleGroup_dryRun :: Lens' UpdateRuleGroup (Maybe Bool)

-- | An object that defines the rule group rules.
--   
--   You must provide either this rule group setting or a <tt>Rules</tt>
--   setting, but not both.
updateRuleGroup_ruleGroup :: Lens' UpdateRuleGroup (Maybe RuleGroup)

-- | A token used for optimistic locking. Network Firewall returns a token
--   to your requests that access the rule group. The token marks the state
--   of the rule group resource at the time of the request.
--   
--   To make changes to the rule group, you provide the token in your
--   request. Network Firewall uses the token to ensure that the rule group
--   hasn't changed since you last retrieved it. If it has changed, the
--   operation fails with an <tt>InvalidTokenException</tt>. If this
--   happens, retrieve the rule group again to get a current copy of it
--   with a current token. Reapply your changes as needed, then try the
--   operation again using the new token.
updateRuleGroup_updateToken :: Lens' UpdateRuleGroup Text

-- | The response's http status code.
updateRuleGroupResponse_httpStatus :: Lens' UpdateRuleGroupResponse Int

-- | A token used for optimistic locking. Network Firewall returns a token
--   to your requests that access the rule group. The token marks the state
--   of the rule group resource at the time of the request.
--   
--   To make changes to the rule group, you provide the token in your
--   request. Network Firewall uses the token to ensure that the rule group
--   hasn't changed since you last retrieved it. If it has changed, the
--   operation fails with an <tt>InvalidTokenException</tt>. If this
--   happens, retrieve the rule group again to get a current copy of it
--   with a current token. Reapply your changes as needed, then try the
--   operation again using the new token.
updateRuleGroupResponse_updateToken :: Lens' UpdateRuleGroupResponse Text

-- | The high-level properties of a rule group. This, along with the
--   RuleGroup, define the rule group. You can retrieve all objects for a
--   rule group by calling DescribeRuleGroup.
updateRuleGroupResponse_ruleGroupResponse :: Lens' UpdateRuleGroupResponse RuleGroupResponse

-- | The Amazon Resource Name (ARN) of the account that you want to share
--   rule groups and firewall policies with.
putResourcePolicy_resourceArn :: Lens' PutResourcePolicy Text

-- | The AWS Identity and Access Management policy statement that lists the
--   accounts that you want to share your rule group or firewall policy
--   with and the operations that you want the accounts to be able to
--   perform.
--   
--   For a rule group resource, you can specify the following operations in
--   the Actions section of the statement:
--   
--   <ul>
--   <li>network-firewall:CreateFirewallPolicy</li>
--   <li>network-firewall:UpdateFirewallPolicy</li>
--   <li>network-firewall:ListRuleGroups</li>
--   </ul>
--   
--   For a firewall policy resource, you can specify the following
--   operations in the Actions section of the statement:
--   
--   <ul>
--   <li>network-firewall:CreateFirewall</li>
--   <li>network-firewall:UpdateFirewall</li>
--   <li>network-firewall:AssociateFirewallPolicy</li>
--   <li>network-firewall:ListFirewallPolicies</li>
--   </ul>
--   
--   In the Resource section of the statement, you specify the ARNs for the
--   rule groups and firewall policies that you want to share with the
--   account that you specified in <tt>Arn</tt>.
putResourcePolicy_policy :: Lens' PutResourcePolicy Text

-- | The response's http status code.
putResourcePolicyResponse_httpStatus :: Lens' PutResourcePolicyResponse Int

-- | The Amazon Resource Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
describeFirewall_firewallArn :: Lens' DescribeFirewall (Maybe Text)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
describeFirewall_firewallName :: Lens' DescribeFirewall (Maybe Text)

-- | Detailed information about the current status of a Firewall. You can
--   retrieve this for a firewall by calling DescribeFirewall and providing
--   the firewall name and ARN.
describeFirewallResponse_firewallStatus :: Lens' DescribeFirewallResponse (Maybe FirewallStatus)

-- | An optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
describeFirewallResponse_updateToken :: Lens' DescribeFirewallResponse (Maybe Text)

-- | The configuration settings for the firewall. These settings include
--   the firewall policy and the subnets in your VPC to use for the
--   firewall endpoints.
describeFirewallResponse_firewall :: Lens' DescribeFirewallResponse (Maybe Firewall)

-- | The response's http status code.
describeFirewallResponse_httpStatus :: Lens' DescribeFirewallResponse Int

-- | The Amazon Resource Name (ARN) of the rule group or firewall policy
--   whose resource policy you want to delete.
deleteResourcePolicy_resourceArn :: Lens' DeleteResourcePolicy Text

-- | The response's http status code.
deleteResourcePolicyResponse_httpStatus :: Lens' DeleteResourcePolicyResponse Int

-- | The Amazon Resource Name (ARN) of the resource.
untagResource_resourceArn :: Lens' UntagResource Text

untagResource_tagKeys :: Lens' UntagResource (NonEmpty Text)

-- | The response's http status code.
untagResourceResponse_httpStatus :: Lens' UntagResourceResponse Int

-- | The Amazon Resource Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
describeLoggingConfiguration_firewallArn :: Lens' DescribeLoggingConfiguration (Maybe Text)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
describeLoggingConfiguration_firewallName :: Lens' DescribeLoggingConfiguration (Maybe Text)

-- | The Amazon Resource Name (ARN) of the firewall.
describeLoggingConfigurationResponse_firewallArn :: Lens' DescribeLoggingConfigurationResponse (Maybe Text)

-- | Undocumented member.
describeLoggingConfigurationResponse_loggingConfiguration :: Lens' DescribeLoggingConfigurationResponse (Maybe LoggingConfiguration)

-- | The response's http status code.
describeLoggingConfigurationResponse_httpStatus :: Lens' DescribeLoggingConfigurationResponse Int

-- | Stateless inspection criteria that publishes the specified metrics to
--   Amazon CloudWatch for the matching packet. This setting defines a
--   CloudWatch dimension value to be published.
--   
--   You can pair this custom action with any of the standard stateless
--   rule actions. For example, you could pair this in a rule action with
--   the standard action that forwards the packet for stateful inspection.
--   Then, when a packet matches the rule, Network Firewall publishes
--   metrics for the packet and forwards it.
actionDefinition_publishMetricAction :: Lens' ActionDefinition (Maybe PublishMetricAction)

-- | Specify an IP address or a block of IP addresses in Classless
--   Inter-Domain Routing (CIDR) notation. Network Firewall supports all
--   address ranges for IPv4.
--   
--   Examples:
--   
--   <ul>
--   <li>To configure Network Firewall to inspect for the IP address
--   192.0.2.44, specify <tt>192.0.2.44/32</tt>.</li>
--   <li>To configure Network Firewall to inspect for IP addresses from
--   192.0.2.0 to 192.0.2.255, specify <tt>192.0.2.0/24</tt>.</li>
--   </ul>
--   
--   For more information about CIDR notation, see the Wikipedia entry
--   <a>Classless Inter-Domain Routing</a>.
address_addressDefinition :: Lens' Address Text

-- | The current status of the firewall endpoint in the subnet. This value
--   reflects both the instantiation of the endpoint in the VPC subnet and
--   the sync states that are reported in the <tt>Config</tt> settings.
--   When this value is <tt>READY</tt>, the endpoint is available and
--   configured properly to handle network traffic. When the endpoint isn't
--   available for traffic, this value will reflect its state, for example
--   <tt>CREATING</tt>, <tt>DELETING</tt>, or <tt>FAILED</tt>.
attachment_status :: Lens' Attachment (Maybe AttachmentStatus)

-- | The unique identifier of the subnet that you've specified to be used
--   for a firewall endpoint.
attachment_subnetId :: Lens' Attachment (Maybe Text)

-- | The identifier of the firewall endpoint that Network Firewall has
--   instantiated in the subnet. You use this to identify the firewall
--   endpoint in the VPC route tables, when you redirect the VPC traffic
--   through the endpoint.
attachment_endpointId :: Lens' Attachment (Maybe Text)

-- | The descriptive name of the custom action. You can't change the name
--   of a custom action after you create it.
customAction_actionName :: Lens' CustomAction Text

-- | The custom action associated with the action name.
customAction_actionDefinition :: Lens' CustomAction ActionDefinition

-- | The value to use in the custom metric dimension.
dimension_value :: Lens' Dimension Text

-- | The Amazon Resource Name (ARN) of the firewall.
firewall_firewallArn :: Lens' Firewall (Maybe Text)

-- | A setting indicating whether the firewall is protected against a
--   change to the firewall policy association. Use this setting to protect
--   against accidentally modifying the firewall policy for a firewall that
--   is in use. When you create a firewall, the operation initializes this
--   setting to <tt>TRUE</tt>.
firewall_firewallPolicyChangeProtection :: Lens' Firewall (Maybe Bool)

-- | A setting indicating whether the firewall is protected against changes
--   to the subnet associations. Use this setting to protect against
--   accidentally modifying the subnet associations for a firewall that is
--   in use. When you create a firewall, the operation initializes this
--   setting to <tt>TRUE</tt>.
firewall_subnetChangeProtection :: Lens' Firewall (Maybe Bool)

-- | A flag indicating whether it is possible to delete the firewall. A
--   setting of <tt>TRUE</tt> indicates that the firewall is protected
--   against deletion. Use this setting to protect against accidentally
--   deleting a firewall that is in use. When you create a firewall, the
--   operation initializes this flag to <tt>TRUE</tt>.
firewall_deleteProtection :: Lens' Firewall (Maybe Bool)

-- | A description of the firewall.
firewall_description :: Lens' Firewall (Maybe Text)

firewall_tags :: Lens' Firewall (Maybe (NonEmpty Tag))

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
firewall_firewallName :: Lens' Firewall (Maybe Text)

-- | The Amazon Resource Name (ARN) of the firewall policy.
--   
--   The relationship of firewall to firewall policy is many to one. Each
--   firewall requires one firewall policy association, and you can use the
--   same firewall policy for multiple firewalls.
firewall_firewallPolicyArn :: Lens' Firewall Text

-- | The unique identifier of the VPC where the firewall is in use.
firewall_vpcId :: Lens' Firewall Text

-- | The public subnets that Network Firewall is using for the firewall.
--   Each subnet must belong to a different Availability Zone.
firewall_subnetMappings :: Lens' Firewall [SubnetMapping]

-- | The unique identifier for the firewall.
firewall_firewallId :: Lens' Firewall Text

-- | The Amazon Resource Name (ARN) of the firewall.
firewallMetadata_firewallArn :: Lens' FirewallMetadata (Maybe Text)

-- | The descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
firewallMetadata_firewallName :: Lens' FirewallMetadata (Maybe Text)

-- | Additional options governing how Network Firewall handles stateful
--   rules. The stateful rule groups that you use in your policy must have
--   stateful rule options settings that are compatible with these
--   settings.
firewallPolicy_statefulEngineOptions :: Lens' FirewallPolicy (Maybe StatefulEngineOptions)

-- | References to the stateful rule groups that are used in the policy.
--   These define the inspection criteria in stateful rules.
firewallPolicy_statefulRuleGroupReferences :: Lens' FirewallPolicy (Maybe [StatefulRuleGroupReference])

-- | References to the stateless rule groups that are used in the policy.
--   These define the matching criteria in stateless rules.
firewallPolicy_statelessRuleGroupReferences :: Lens' FirewallPolicy (Maybe [StatelessRuleGroupReference])

-- | The custom action definitions that are available for use in the
--   firewall policy's <tt>StatelessDefaultActions</tt> setting. You name
--   each custom action that you define, and then you can use it by name in
--   your default actions specifications.
firewallPolicy_statelessCustomActions :: Lens' FirewallPolicy (Maybe [CustomAction])

-- | The default actions to take on a packet that doesn't match any
--   stateful rules.
firewallPolicy_statefulDefaultActions :: Lens' FirewallPolicy (Maybe [Text])

-- | The actions to take on a packet if it doesn't match any of the
--   stateless rules in the policy. If you want non-matching packets to be
--   forwarded for stateful inspection, specify
--   <tt>aws:forward_to_sfe</tt>.
--   
--   You must specify one of the standard actions: <tt>aws:pass</tt>,
--   <tt>aws:drop</tt>, or <tt>aws:forward_to_sfe</tt>. In addition, you
--   can specify custom actions that are compatible with your standard
--   section choice.
--   
--   For example, you could specify <tt>["aws:pass"]</tt> or you could
--   specify <tt>["aws:pass", “customActionName”]</tt>. For information
--   about compatibility, see the custom action descriptions under
--   CustomAction.
firewallPolicy_statelessDefaultActions :: Lens' FirewallPolicy [Text]

-- | The actions to take on a fragmented UDP packet if it doesn't match any
--   of the stateless rules in the policy. Network Firewall only manages
--   UDP packet fragments and silently drops packet fragments for other
--   protocols. If you want non-matching fragmented UDP packets to be
--   forwarded for stateful inspection, specify
--   <tt>aws:forward_to_sfe</tt>.
--   
--   You must specify one of the standard actions: <tt>aws:pass</tt>,
--   <tt>aws:drop</tt>, or <tt>aws:forward_to_sfe</tt>. In addition, you
--   can specify custom actions that are compatible with your standard
--   section choice.
--   
--   For example, you could specify <tt>["aws:pass"]</tt> or you could
--   specify <tt>["aws:pass", “customActionName”]</tt>. For information
--   about compatibility, see the custom action descriptions under
--   CustomAction.
firewallPolicy_statelessFragmentDefaultActions :: Lens' FirewallPolicy [Text]

-- | The Amazon Resource Name (ARN) of the firewall policy.
firewallPolicyMetadata_arn :: Lens' FirewallPolicyMetadata (Maybe Text)

-- | The descriptive name of the firewall policy. You can't change the name
--   of a firewall policy after you create it.
firewallPolicyMetadata_name :: Lens' FirewallPolicyMetadata (Maybe Text)

-- | The number of capacity units currently consumed by the policy's
--   stateless rules.
firewallPolicyResponse_consumedStatelessRuleCapacity :: Lens' FirewallPolicyResponse (Maybe Int)

-- | The number of firewalls that are associated with this firewall policy.
firewallPolicyResponse_numberOfAssociations :: Lens' FirewallPolicyResponse (Maybe Int)

-- | The current status of the firewall policy. You can retrieve this for a
--   firewall policy by calling DescribeFirewallPolicy and providing the
--   firewall policy's name or ARN.
firewallPolicyResponse_firewallPolicyStatus :: Lens' FirewallPolicyResponse (Maybe ResourceStatus)

-- | The number of capacity units currently consumed by the policy's
--   stateful rules.
firewallPolicyResponse_consumedStatefulRuleCapacity :: Lens' FirewallPolicyResponse (Maybe Int)

-- | A description of the firewall policy.
firewallPolicyResponse_description :: Lens' FirewallPolicyResponse (Maybe Text)

-- | The key:value pairs to associate with the resource.
firewallPolicyResponse_tags :: Lens' FirewallPolicyResponse (Maybe (NonEmpty Tag))

-- | The descriptive name of the firewall policy. You can't change the name
--   of a firewall policy after you create it.
firewallPolicyResponse_firewallPolicyName :: Lens' FirewallPolicyResponse Text

-- | The Amazon Resource Name (ARN) of the firewall policy.
--   
--   If this response is for a create request that had <tt>DryRun</tt> set
--   to <tt>TRUE</tt>, then this ARN is a placeholder that isn't attached
--   to a valid resource.
firewallPolicyResponse_firewallPolicyArn :: Lens' FirewallPolicyResponse Text

-- | The unique identifier for the firewall policy.
firewallPolicyResponse_firewallPolicyId :: Lens' FirewallPolicyResponse Text

-- | The subnets that you've configured for use by the Network Firewall
--   firewall. This contains one array element per Availability Zone where
--   you've configured a subnet. These objects provide details of the
--   information that is summarized in the
--   <tt>ConfigurationSyncStateSummary</tt> and <tt>Status</tt>, broken
--   down by zone and configuration object.
firewallStatus_syncStates :: Lens' FirewallStatus (Maybe (HashMap Text SyncState))

-- | The readiness of the configured firewall to handle network traffic
--   across all of the Availability Zones where you've configured it. This
--   setting is <tt>READY</tt> only when the
--   <tt>ConfigurationSyncStateSummary</tt> value is <tt>IN_SYNC</tt> and
--   the <tt>Attachment</tt> <tt>Status</tt> values for all of the
--   configured subnets are <tt>READY</tt>.
firewallStatus_status :: Lens' FirewallStatus FirewallStatusValue

-- | The configuration sync state for the firewall. This summarizes the
--   sync states reported in the <tt>Config</tt> settings for all of the
--   Availability Zones where you have configured the firewall.
--   
--   When you create a firewall or update its configuration, for example by
--   adding a rule group to its firewall policy, Network Firewall
--   distributes the configuration changes to all zones where the firewall
--   is in use. This summary indicates whether the configuration changes
--   have been applied everywhere.
--   
--   This status must be <tt>IN_SYNC</tt> for the firewall to be ready for
--   use, but it doesn't indicate that the firewall is ready. The
--   <tt>Status</tt> setting indicates firewall readiness.
firewallStatus_configurationSyncStateSummary :: Lens' FirewallStatus ConfigurationSyncState

-- | The protocol to inspect for. To specify all, you can use <tt>IP</tt>,
--   because all traffic on AWS and on the internet is IP.
header_protocol :: Lens' Header StatefulRuleProtocol

-- | The source IP address or address range to inspect for, in CIDR
--   notation. To match with any address, specify <tt>ANY</tt>.
--   
--   Specify an IP address or a block of IP addresses in Classless
--   Inter-Domain Routing (CIDR) notation. Network Firewall supports all
--   address ranges for IPv4.
--   
--   Examples:
--   
--   <ul>
--   <li>To configure Network Firewall to inspect for the IP address
--   192.0.2.44, specify <tt>192.0.2.44/32</tt>.</li>
--   <li>To configure Network Firewall to inspect for IP addresses from
--   192.0.2.0 to 192.0.2.255, specify <tt>192.0.2.0/24</tt>.</li>
--   </ul>
--   
--   For more information about CIDR notation, see the Wikipedia entry
--   <a>Classless Inter-Domain Routing</a>.
header_source :: Lens' Header Text

-- | The source port to inspect for. You can specify an individual port,
--   for example <tt>1994</tt> and you can specify a port range, for
--   example <tt>1990:1994</tt>. To match with any port, specify
--   <tt>ANY</tt>.
header_sourcePort :: Lens' Header Text

-- | The direction of traffic flow to inspect. If set to <tt>ANY</tt>, the
--   inspection matches bidirectional traffic, both from the source to the
--   destination and from the destination to the source. If set to
--   <tt>FORWARD</tt>, the inspection only matches traffic going from the
--   source to the destination.
header_direction :: Lens' Header StatefulRuleDirection

-- | The destination IP address or address range to inspect for, in CIDR
--   notation. To match with any address, specify <tt>ANY</tt>.
--   
--   Specify an IP address or a block of IP addresses in Classless
--   Inter-Domain Routing (CIDR) notation. Network Firewall supports all
--   address ranges for IPv4.
--   
--   Examples:
--   
--   <ul>
--   <li>To configure Network Firewall to inspect for the IP address
--   192.0.2.44, specify <tt>192.0.2.44/32</tt>.</li>
--   <li>To configure Network Firewall to inspect for IP addresses from
--   192.0.2.0 to 192.0.2.255, specify <tt>192.0.2.0/24</tt>.</li>
--   </ul>
--   
--   For more information about CIDR notation, see the Wikipedia entry
--   <a>Classless Inter-Domain Routing</a>.
header_destination :: Lens' Header Text

-- | The destination port to inspect for. You can specify an individual
--   port, for example <tt>1994</tt> and you can specify a port range, for
--   example <tt>1990:1994</tt>. To match with any port, specify
--   <tt>ANY</tt>.
header_destinationPort :: Lens' Header Text

-- | The list of IP addresses and address ranges, in CIDR notation.
iPSet_definition :: Lens' IPSet [Text]

-- | The type of log to send. Alert logs report traffic that matches a
--   StatefulRule with an action setting that sends an alert log message.
--   Flow logs are standard network traffic flow logs.
logDestinationConfig_logType :: Lens' LogDestinationConfig LogType

-- | The type of storage destination to send these logs to. You can send
--   logs to an Amazon S3 bucket, a CloudWatch log group, or a Kinesis Data
--   Firehose delivery stream.
logDestinationConfig_logDestinationType :: Lens' LogDestinationConfig LogDestinationType

-- | The named location for the logs, provided in a key:value mapping that
--   is specific to the chosen destination type.
--   
--   <ul>
--   <li>For an Amazon S3 bucket, provide the name of the bucket, with key
--   <tt>bucketName</tt>, and optionally provide a prefix, with key
--   <tt>prefix</tt>. The following example specifies an Amazon S3 bucket
--   named <tt>DOC-EXAMPLE-BUCKET</tt> and the prefix
--   <tt>alerts</tt>:<pre>"LogDestination": { "bucketName":
--   "DOC-EXAMPLE-BUCKET", "prefix": "alerts" }</pre></li>
--   <li>For a CloudWatch log group, provide the name of the CloudWatch log
--   group, with key <tt>logGroup</tt>. The following example specifies a
--   log group named <tt>alert-log-group</tt>:<pre>"LogDestination": {
--   "logGroup": "alert-log-group" }</pre></li>
--   <li>For a Kinesis Data Firehose delivery stream, provide the name of
--   the delivery stream, with key <tt>deliveryStream</tt>. The following
--   example specifies a delivery stream named
--   <tt>alert-delivery-stream</tt>:<pre>"LogDestination": {
--   "deliveryStream": "alert-delivery-stream" }</pre></li>
--   </ul>
logDestinationConfig_logDestination :: Lens' LogDestinationConfig (HashMap Text Text)

-- | Defines the logging destinations for the logs for a firewall. Network
--   Firewall generates logs for stateful rule groups.
loggingConfiguration_logDestinationConfigs :: Lens' LoggingConfiguration [LogDestinationConfig]

-- | The protocols to inspect for, specified using each protocol's assigned
--   internet protocol number (IANA). If not specified, this matches with
--   any protocol.
matchAttributes_protocols :: Lens' MatchAttributes (Maybe [Natural])

-- | The TCP flags and masks to inspect for. If not specified, this matches
--   with any settings. This setting is only used for protocol 6 (TCP).
matchAttributes_tCPFlags :: Lens' MatchAttributes (Maybe [TCPFlagField])

-- | The destination ports to inspect for. If not specified, this matches
--   with any destination port. This setting is only used for protocols 6
--   (TCP) and 17 (UDP).
--   
--   You can specify individual ports, for example <tt>1994</tt> and you
--   can specify port ranges, for example <tt>1990:1994</tt>.
matchAttributes_destinationPorts :: Lens' MatchAttributes (Maybe [PortRange])

-- | The source IP addresses and address ranges to inspect for, in CIDR
--   notation. If not specified, this matches with any source address.
matchAttributes_sources :: Lens' MatchAttributes (Maybe [Address])

-- | The source ports to inspect for. If not specified, this matches with
--   any source port. This setting is only used for protocols 6 (TCP) and
--   17 (UDP).
--   
--   You can specify individual ports, for example <tt>1994</tt> and you
--   can specify port ranges, for example <tt>1990:1994</tt>.
matchAttributes_sourcePorts :: Lens' MatchAttributes (Maybe [PortRange])

-- | The destination IP addresses and address ranges to inspect for, in
--   CIDR notation. If not specified, this matches with any destination
--   address.
matchAttributes_destinations :: Lens' MatchAttributes (Maybe [Address])

-- | The current version of the object that is either in sync or pending
--   synchronization.
perObjectStatus_updateToken :: Lens' PerObjectStatus (Maybe Text)

-- | Indicates whether this object is in sync with the version indicated in
--   the update token.
perObjectStatus_syncStatus :: Lens' PerObjectStatus (Maybe PerObjectSyncStatus)

-- | The lower limit of the port range. This must be less than or equal to
--   the <tt>ToPort</tt> specification.
portRange_fromPort :: Lens' PortRange Natural

-- | The upper limit of the port range. This must be greater than or equal
--   to the <tt>FromPort</tt> specification.
portRange_toPort :: Lens' PortRange Natural

-- | The set of port ranges.
portSet_definition :: Lens' PortSet (Maybe [Text])

publishMetricAction_dimensions :: Lens' PublishMetricAction (NonEmpty Dimension)

-- | Criteria for Network Firewall to use to inspect an individual packet
--   in stateless rule inspection. Each match attributes set can include
--   one or more items such as IP address, CIDR range, port number,
--   protocol, and TCP flags.
ruleDefinition_matchAttributes :: Lens' RuleDefinition MatchAttributes

-- | The actions to take on a packet that matches one of the stateless rule
--   definition's match attributes. You must specify a standard action and
--   you can add custom actions.
--   
--   Network Firewall only forwards a packet for stateful rule inspection
--   if you specify <tt>aws:forward_to_sfe</tt> for a rule that the packet
--   matches, or if the packet doesn't match any stateless rule and you
--   specify <tt>aws:forward_to_sfe</tt> for the
--   <tt>StatelessDefaultActions</tt> setting for the FirewallPolicy.
--   
--   For every rule, you must specify exactly one of the following standard
--   actions.
--   
--   <ul>
--   <li><b>aws:pass</b> - Discontinues all inspection of the packet and
--   permits it to go to its intended destination.</li>
--   <li><b>aws:drop</b> - Discontinues all inspection of the packet and
--   blocks it from going to its intended destination.</li>
--   <li><b>aws:forward_to_sfe</b> - Discontinues stateless inspection of
--   the packet and forwards it to the stateful rule engine for
--   inspection.</li>
--   </ul>
--   
--   Additionally, you can specify a custom action. To do this, you define
--   a custom action by name and type, then provide the name you've
--   assigned to the action in this <tt>Actions</tt> setting. For
--   information about the options, see CustomAction.
--   
--   To provide more than one action in this setting, separate the settings
--   with a comma. For example, if you have a custom
--   <tt>PublishMetrics</tt> action that you've named
--   <tt>MyMetricsAction</tt>, then you could specify the standard action
--   <tt>aws:pass</tt> and the custom action with <tt>[“aws:pass”,
--   “MyMetricsAction”]</tt>.
ruleDefinition_actions :: Lens' RuleDefinition [Text]

-- | Additional options governing how Network Firewall handles stateful
--   rules. The policies where you use your stateful rule group must have
--   stateful rule options settings that are compatible with these
--   settings.
ruleGroup_statefulRuleOptions :: Lens' RuleGroup (Maybe StatefulRuleOptions)

-- | Settings that are available for use in the rules in the rule group.
--   You can only use these for stateful rule groups.
ruleGroup_ruleVariables :: Lens' RuleGroup (Maybe RuleVariables)

-- | The stateful rules or stateless rules for the rule group.
ruleGroup_rulesSource :: Lens' RuleGroup RulesSource

-- | The Amazon Resource Name (ARN) of the rule group.
ruleGroupMetadata_arn :: Lens' RuleGroupMetadata (Maybe Text)

-- | The descriptive name of the rule group. You can't change the name of a
--   rule group after you create it.
ruleGroupMetadata_name :: Lens' RuleGroupMetadata (Maybe Text)

-- | The number of firewall policies that use this rule group.
ruleGroupResponse_numberOfAssociations :: Lens' RuleGroupResponse (Maybe Int)

-- | The maximum operating resources that this rule group can use. Rule
--   group capacity is fixed at creation. When you update a rule group, you
--   are limited to this capacity. When you reference a rule group from a
--   firewall policy, Network Firewall reserves this capacity for the rule
--   group.
--   
--   You can retrieve the capacity that would be required for a rule group
--   before you create the rule group by calling CreateRuleGroup with
--   <tt>DryRun</tt> set to <tt>TRUE</tt>.
ruleGroupResponse_capacity :: Lens' RuleGroupResponse (Maybe Int)

-- | The number of capacity units currently consumed by the rule group
--   rules.
ruleGroupResponse_consumedCapacity :: Lens' RuleGroupResponse (Maybe Int)

-- | Detailed information about the current status of a rule group.
ruleGroupResponse_ruleGroupStatus :: Lens' RuleGroupResponse (Maybe ResourceStatus)

-- | Indicates whether the rule group is stateless or stateful. If the rule
--   group is stateless, it contains stateless rules. If it is stateful, it
--   contains stateful rules.
ruleGroupResponse_type :: Lens' RuleGroupResponse (Maybe RuleGroupType)

-- | A description of the rule group.
ruleGroupResponse_description :: Lens' RuleGroupResponse (Maybe Text)

-- | The key:value pairs to associate with the resource.
ruleGroupResponse_tags :: Lens' RuleGroupResponse (Maybe (NonEmpty Tag))

-- | The Amazon Resource Name (ARN) of the rule group.
--   
--   If this response is for a create request that had <tt>DryRun</tt> set
--   to <tt>TRUE</tt>, then this ARN is a placeholder that isn't attached
--   to a valid resource.
ruleGroupResponse_ruleGroupArn :: Lens' RuleGroupResponse Text

-- | The descriptive name of the rule group. You can't change the name of a
--   rule group after you create it.
ruleGroupResponse_ruleGroupName :: Lens' RuleGroupResponse Text

-- | The unique identifier for the rule group.
ruleGroupResponse_ruleGroupId :: Lens' RuleGroupResponse Text

ruleOption_settings :: Lens' RuleOption (Maybe [Text])

ruleOption_keyword :: Lens' RuleOption Text

-- | A list of port ranges.
ruleVariables_portSets :: Lens' RuleVariables (Maybe (HashMap Text PortSet))

-- | A list of IP addresses and address ranges, in CIDR notation.
ruleVariables_iPSets :: Lens' RuleVariables (Maybe (HashMap Text IPSet))

-- | Stateful inspection criteria, provided in Suricata compatible
--   intrusion prevention system (IPS) rules. Suricata is an open-source
--   network IPS that includes a standard rule-based language for network
--   traffic inspection.
--   
--   These rules contain the inspection criteria and the action to take for
--   traffic that matches the criteria, so this type of rule group doesn't
--   have a separate action setting.
rulesSource_rulesString :: Lens' RulesSource (Maybe Text)

-- | Stateful inspection criteria for a domain list rule group.
rulesSource_rulesSourceList :: Lens' RulesSource (Maybe RulesSourceList)

-- | An array of individual stateful rules inspection criteria to be used
--   together in a stateful rule group. Use this option to specify simple
--   Suricata rules with protocol, source and destination, ports,
--   direction, and rule options. For information about the Suricata
--   <tt>Rules</tt> format, see <a>Rules Format</a>.
rulesSource_statefulRules :: Lens' RulesSource (Maybe [StatefulRule])

-- | Stateless inspection criteria to be used in a stateless rule group.
rulesSource_statelessRulesAndCustomActions :: Lens' RulesSource (Maybe StatelessRulesAndCustomActions)

-- | The domains that you want to inspect for in your traffic flows. To
--   provide multiple domains, separate them with commas. Valid domain
--   specifications are the following:
--   
--   <ul>
--   <li>Explicit names. For example, <tt>abc.example.com</tt> matches only
--   the domain <tt>abc.example.com</tt>.</li>
--   <li>Names that use a domain wildcard, which you indicate with an
--   initial '<tt>.</tt>'. For example,<tt>.example.com</tt> matches
--   <tt>example.com</tt> and matches all subdomains of
--   <tt>example.com</tt>, such as <tt>abc.example.com</tt> and
--   <tt>www.example.com</tt>.</li>
--   </ul>
rulesSourceList_targets :: Lens' RulesSourceList [Text]

-- | The protocols you want to inspect. Specify <tt>TLS_SNI</tt> for
--   <tt>HTTPS</tt>. Specify <tt>HTTP_HOST</tt> for <tt>HTTP</tt>. You can
--   specify either or both.
rulesSourceList_targetTypes :: Lens' RulesSourceList [TargetType]

-- | Whether you want to allow or deny access to the domains in your target
--   list.
rulesSourceList_generatedRulesType :: Lens' RulesSourceList GeneratedRulesType

-- | Indicates how to manage the order of stateful rule evaluation for the
--   policy. By default, Network Firewall leaves the rule evaluation order
--   up to the Suricata rule processing engine. If you set this to
--   <tt>STRICT_ORDER</tt>, your rules are evaluated in the exact order
--   that you provide them in the policy. With strict ordering, the rule
--   groups are evaluated by order of priority, starting from the lowest
--   number, and the rules in each rule group are processed in the order
--   that they're defined.
statefulEngineOptions_ruleOrder :: Lens' StatefulEngineOptions (Maybe RuleOrder)

-- | Defines what Network Firewall should do with the packets in a traffic
--   flow when the flow matches the stateful rule criteria. For all
--   actions, Network Firewall performs the specified action and
--   discontinues stateful inspection of the traffic flow.
--   
--   The actions for a stateful rule are defined as follows:
--   
--   <ul>
--   <li><b>PASS</b> - Permits the packets to go to the intended
--   destination.</li>
--   <li><b>DROP</b> - Blocks the packets from going to the intended
--   destination and sends an alert log message, if alert logging is
--   configured in the Firewall LoggingConfiguration.</li>
--   <li><b>ALERT</b> - Permits the packets to go to the intended
--   destination and sends an alert log message, if alert logging is
--   configured in the Firewall LoggingConfiguration.You can use this
--   action to test a rule that you intend to use to drop traffic. You can
--   enable the rule with <tt>ALERT</tt> action, verify in the logs that
--   the rule is filtering as you want, then change the action to
--   <tt>DROP</tt>.</li>
--   </ul>
statefulRule_action :: Lens' StatefulRule StatefulAction

-- | The stateful inspection criteria for this rule, used to inspect
--   traffic flows.
statefulRule_header :: Lens' StatefulRule Header

-- | Additional options for the rule. These are the Suricata
--   <tt>RuleOptions</tt> settings.
statefulRule_ruleOptions :: Lens' StatefulRule [RuleOption]

-- | An integer setting that indicates the order in which to run the
--   stateful rule groups in a single FirewallPolicy. This setting only
--   applies to firewall policies that specify the <tt>STRICT_ORDER</tt>
--   rule order in the stateful engine options settings.
--   
--   Network Firewall evalutes each stateful rule group against a packet
--   starting with the group that has the lowest priority setting. You must
--   ensure that the priority settings are unique within each policy.
--   
--   You can change the priority settings of your rule groups at any time.
--   To make it easier to insert rule groups later, number them so there's
--   a wide range in between, for example use 100, 200, and so on.
statefulRuleGroupReference_priority :: Lens' StatefulRuleGroupReference (Maybe Natural)

-- | The Amazon Resource Name (ARN) of the stateful rule group.
statefulRuleGroupReference_resourceArn :: Lens' StatefulRuleGroupReference Text

-- | Indicates how to manage the order of the rule evaluation for the rule
--   group. By default, Network Firewall leaves the rule evaluation order
--   up to the Suricata rule processing engine. If you set this to
--   <tt>STRICT_ORDER</tt>, your rules are evaluated in the exact order
--   that they're listed in your Suricata rules string.
statefulRuleOptions_ruleOrder :: Lens' StatefulRuleOptions (Maybe RuleOrder)

-- | Defines the stateless 5-tuple packet inspection criteria and the
--   action to take on a packet that matches the criteria.
statelessRule_ruleDefinition :: Lens' StatelessRule RuleDefinition

-- | Indicates the order in which to run this rule relative to all of the
--   rules that are defined for a stateless rule group. Network Firewall
--   evaluates the rules in a rule group starting with the lowest priority
--   setting. You must ensure that the priority settings are unique for the
--   rule group.
--   
--   Each stateless rule group uses exactly one
--   <tt>StatelessRulesAndCustomActions</tt> object, and each
--   <tt>StatelessRulesAndCustomActions</tt> contains exactly one
--   <tt>StatelessRules</tt> object. To ensure unique priority settings for
--   your rule groups, set unique priorities for the stateless rules that
--   you define inside any single <tt>StatelessRules</tt> object.
--   
--   You can change the priority settings of your rules at any time. To
--   make it easier to insert rules later, number them so there's a wide
--   range in between, for example use 100, 200, and so on.
statelessRule_priority :: Lens' StatelessRule Natural

-- | The Amazon Resource Name (ARN) of the stateless rule group.
statelessRuleGroupReference_resourceArn :: Lens' StatelessRuleGroupReference Text

-- | An integer setting that indicates the order in which to run the
--   stateless rule groups in a single FirewallPolicy. Network Firewall
--   applies each stateless rule group to a packet starting with the group
--   that has the lowest priority setting. You must ensure that the
--   priority settings are unique within each policy.
statelessRuleGroupReference_priority :: Lens' StatelessRuleGroupReference Natural

-- | Defines an array of individual custom action definitions that are
--   available for use by the stateless rules in this
--   <tt>StatelessRulesAndCustomActions</tt> specification. You name each
--   custom action that you define, and then you can use it by name in your
--   StatelessRule RuleDefinition <tt>Actions</tt> specification.
statelessRulesAndCustomActions_customActions :: Lens' StatelessRulesAndCustomActions (Maybe [CustomAction])

-- | Defines the set of stateless rules for use in a stateless rule group.
statelessRulesAndCustomActions_statelessRules :: Lens' StatelessRulesAndCustomActions [StatelessRule]

-- | The unique identifier for the subnet.
subnetMapping_subnetId :: Lens' SubnetMapping Text

-- | The configuration status of the firewall endpoint in a single VPC
--   subnet. Network Firewall provides each endpoint with the rules that
--   are configured in the firewall policy. Each time you add a subnet or
--   modify the associated firewall policy, Network Firewall synchronizes
--   the rules in the endpoint, so it can properly filter network traffic.
--   This is part of the FirewallStatus.
syncState_config :: Lens' SyncState (Maybe (HashMap Text PerObjectStatus))

-- | The attachment status of the firewall's association with a single VPC
--   subnet. For each configured subnet, Network Firewall creates the
--   attachment by instantiating the firewall endpoint in the subnet so
--   that it's ready to take traffic. This is part of the FirewallStatus.
syncState_attachment :: Lens' SyncState (Maybe Attachment)

-- | The set of flags to consider in the inspection. To inspect all flags
--   in the valid values list, leave this with no setting.
tCPFlagField_masks :: Lens' TCPFlagField (Maybe [TCPFlag])

-- | Used in conjunction with the <tt>Masks</tt> setting to define the
--   flags that must be set and flags that must not be set in order for the
--   packet to match. This setting can only specify values that are also
--   specified in the <tt>Masks</tt> setting.
--   
--   For the flags that are specified in the masks setting, the following
--   must be true for the packet to match:
--   
--   <ul>
--   <li>The ones that are set in this flags setting must be set in the
--   packet.</li>
--   <li>The ones that are not set in this flags setting must also not be
--   set in the packet.</li>
--   </ul>
tCPFlagField_flags :: Lens' TCPFlagField [TCPFlag]

-- | The part of the key:value pair that defines a tag. You can use a tag
--   key to describe a category of information, such as "customer." Tag
--   keys are case-sensitive.
tag_key :: Lens' Tag Text

-- | The part of the key:value pair that defines a tag. You can use a tag
--   value to describe a specific value within a category, such as
--   "companyA" or "companyB." Tag values are case-sensitive.
tag_value :: Lens' Tag Text


module Amazonka.NetworkFirewall.Waiters


-- | Derived from API version <tt>2020-11-12</tt> of the AWS service
--   descriptions, licensed under Apache 2.0.
--   
--   This is the API Reference for AWS Network Firewall. This guide is for
--   developers who need detailed information about the Network Firewall
--   API actions, data types, and errors.
--   
--   <ul>
--   <li>The REST API requires you to handle connection details, such as
--   calculating signatures, handling request retries, and error handling.
--   For general information about using the AWS REST APIs, see <a>AWS
--   APIs</a>.To access Network Firewall using the REST API endpoint:
--   <tt>https://network-firewall.&lt;region&gt;.amazonaws.com </tt></li>
--   <li>Alternatively, you can use one of the AWS SDKs to access an API
--   that's tailored to the programming language or platform that you're
--   using. For more information, see <a>AWS SDKs</a>.</li>
--   <li>For descriptions of Network Firewall features, including and
--   step-by-step instructions on how to use them through the Network
--   Firewall console, see the <a>Network Firewall Developer
--   Guide</a>.</li>
--   </ul>
--   
--   Network Firewall is a stateful, managed, network firewall and
--   intrusion detection and prevention service for Amazon Virtual Private
--   Cloud (Amazon VPC). With Network Firewall, you can filter traffic at
--   the perimeter of your VPC. This includes filtering traffic going to
--   and coming from an internet gateway, NAT gateway, or over VPN or AWS
--   Direct Connect. Network Firewall uses rules that are compatible with
--   Suricata, a free, open source intrusion detection system (IDS) engine.
--   AWS Network Firewall supports Suricata version 5.0.2. For information
--   about Suricata, see the <a>Suricata website</a>.
--   
--   You can use Network Firewall to monitor and protect your VPC traffic
--   in a number of ways. The following are just a few examples:
--   
--   <ul>
--   <li>Allow domains or IP addresses for known AWS service endpoints,
--   such as Amazon S3, and block all other forms of traffic.</li>
--   <li>Use custom lists of known bad domains to limit the types of domain
--   names that your applications can access.</li>
--   <li>Perform deep packet inspection on traffic entering or leaving your
--   VPC.</li>
--   <li>Use stateful protocol detection to filter protocols like HTTPS,
--   regardless of the port used.</li>
--   </ul>
--   
--   To enable Network Firewall for your VPCs, you perform steps in both
--   Amazon VPC and in Network Firewall. For information about using Amazon
--   VPC, see <a>Amazon VPC User Guide</a>.
--   
--   To start using Network Firewall, do the following:
--   
--   <ol>
--   <li>(Optional) If you don't already have a VPC that you want to
--   protect, create it in Amazon VPC.</li>
--   <li>In Amazon VPC, in each Availability Zone where you want to have a
--   firewall endpoint, create a subnet for the sole use of Network
--   Firewall.</li>
--   <li>In Network Firewall, create stateless and stateful rule groups, to
--   define the components of the network traffic filtering behavior that
--   you want your firewall to have.</li>
--   <li>In Network Firewall, create a firewall policy that uses your rule
--   groups and specifies additional default traffic filtering
--   behavior.</li>
--   <li>In Network Firewall, create a firewall and specify your new
--   firewall policy and VPC subnets. Network Firewall creates a firewall
--   endpoint in each subnet that you specify, with the behavior that's
--   defined in the firewall policy.</li>
--   <li>In Amazon VPC, use ingress routing enhancements to route traffic
--   through the new firewall endpoints.</li>
--   </ol>
module Amazonka.NetworkFirewall

-- | API version <tt>2020-11-12</tt> of the Amazon Network Firewall SDK
--   configuration.
defaultService :: Service

-- | Unable to send logs to a configured logging destination.
_LogDestinationPermissionException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The operation failed because of a problem with your request. Examples
--   include:
--   
--   <ul>
--   <li>You specified an unsupported parameter name or value.</li>
--   <li>You tried to update a property with a value that isn't among the
--   available types.</li>
--   <li>Your request references an ARN that is malformed, or corresponds
--   to a resource that isn't valid in the context of the request.</li>
--   </ul>
_InvalidRequestException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The operation you requested isn't supported by Network Firewall.
_UnsupportedOperationException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Unable to change the resource because your account doesn't own it.
_ResourceOwnerCheckException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The policy statement failed validation.
_InvalidResourcePolicyException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Unable to process the request due to throttling limitations.
_ThrottlingException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Your request is valid, but Network Firewall couldn’t perform the
--   operation because of a system problem. Retry your request.
_InternalServerError :: AsError a => Getting (First ServiceError) a ServiceError

-- | The token you provided is stale or isn't valid for the operation.
_InvalidTokenException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The operation failed because it's not valid. For example, you might
--   have tried to delete a rule group or firewall policy that's in use.
_InvalidOperationException :: AsError a => Getting (First ServiceError) a ServiceError

-- | AWS doesn't currently have enough available capacity to fulfill your
--   request. Try your request later.
_InsufficientCapacityException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Unable to locate a resource using the parameters that you provided.
_ResourceNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Unable to perform the operation because doing so would violate a limit
--   setting.
_LimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | <i>See:</i> <a>newAssociateSubnets</a> smart constructor.
data AssociateSubnets
AssociateSubnets' :: Maybe Text -> Maybe Text -> Maybe Text -> [SubnetMapping] -> AssociateSubnets

-- | Create a value of <a>AssociateSubnets</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:updateToken:AssociateSubnets'</a>,
--   <a>associateSubnets_updateToken</a> - An optional token that you can
--   use for optimistic locking. Network Firewall returns a token to your
--   requests that access the firewall. The token marks the state of the
--   firewall resource at the time of the request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
--   
--   <a>$sel:firewallArn:AssociateSubnets'</a>,
--   <a>associateSubnets_firewallArn</a> - The Amazon Resource Name (ARN)
--   of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:firewallName:AssociateSubnets'</a>,
--   <a>associateSubnets_firewallName</a> - The descriptive name of the
--   firewall. You can't change the name of a firewall after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:subnetMappings:AssociateSubnets'</a>,
--   <a>associateSubnets_subnetMappings</a> - The IDs of the subnets that
--   you want to associate with the firewall.
newAssociateSubnets :: AssociateSubnets

-- | <i>See:</i> <a>newAssociateSubnetsResponse</a> smart constructor.
data AssociateSubnetsResponse
AssociateSubnetsResponse' :: Maybe [SubnetMapping] -> Maybe Text -> Maybe Text -> Maybe Text -> Int -> AssociateSubnetsResponse

-- | Create a value of <a>AssociateSubnetsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:subnetMappings:AssociateSubnets'</a>,
--   <a>associateSubnetsResponse_subnetMappings</a> - The IDs of the
--   subnets that are associated with the firewall.
--   
--   <a>$sel:updateToken:AssociateSubnets'</a>,
--   <a>associateSubnetsResponse_updateToken</a> - An optional token that
--   you can use for optimistic locking. Network Firewall returns a token
--   to your requests that access the firewall. The token marks the state
--   of the firewall resource at the time of the request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
--   
--   <a>$sel:firewallArn:AssociateSubnets'</a>,
--   <a>associateSubnetsResponse_firewallArn</a> - The Amazon Resource Name
--   (ARN) of the firewall.
--   
--   <a>$sel:firewallName:AssociateSubnets'</a>,
--   <a>associateSubnetsResponse_firewallName</a> - The descriptive name of
--   the firewall. You can't change the name of a firewall after you create
--   it.
--   
--   <a>$sel:httpStatus:AssociateSubnetsResponse'</a>,
--   <a>associateSubnetsResponse_httpStatus</a> - The response's http
--   status code.
newAssociateSubnetsResponse :: Int -> AssociateSubnetsResponse

-- | <i>See:</i> <a>newUpdateSubnetChangeProtection</a> smart constructor.
data UpdateSubnetChangeProtection
UpdateSubnetChangeProtection' :: Maybe Text -> Maybe Text -> Maybe Text -> Bool -> UpdateSubnetChangeProtection

-- | Create a value of <a>UpdateSubnetChangeProtection</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:updateToken:UpdateSubnetChangeProtection'</a>,
--   <a>updateSubnetChangeProtection_updateToken</a> - An optional token
--   that you can use for optimistic locking. Network Firewall returns a
--   token to your requests that access the firewall. The token marks the
--   state of the firewall resource at the time of the request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
--   
--   <a>$sel:firewallArn:UpdateSubnetChangeProtection'</a>,
--   <a>updateSubnetChangeProtection_firewallArn</a> - The Amazon Resource
--   Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:firewallName:UpdateSubnetChangeProtection'</a>,
--   <a>updateSubnetChangeProtection_firewallName</a> - The descriptive
--   name of the firewall. You can't change the name of a firewall after
--   you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:subnetChangeProtection:UpdateSubnetChangeProtection'</a>,
--   <a>updateSubnetChangeProtection_subnetChangeProtection</a> - A setting
--   indicating whether the firewall is protected against changes to the
--   subnet associations. Use this setting to protect against accidentally
--   modifying the subnet associations for a firewall that is in use. When
--   you create a firewall, the operation initializes this setting to
--   <tt>TRUE</tt>.
newUpdateSubnetChangeProtection :: Bool -> UpdateSubnetChangeProtection

-- | <i>See:</i> <a>newUpdateSubnetChangeProtectionResponse</a> smart
--   constructor.
data UpdateSubnetChangeProtectionResponse
UpdateSubnetChangeProtectionResponse' :: Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Text -> Int -> UpdateSubnetChangeProtectionResponse

-- | Create a value of <a>UpdateSubnetChangeProtectionResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:updateToken:UpdateSubnetChangeProtection'</a>,
--   <a>updateSubnetChangeProtectionResponse_updateToken</a> - An optional
--   token that you can use for optimistic locking. Network Firewall
--   returns a token to your requests that access the firewall. The token
--   marks the state of the firewall resource at the time of the request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
--   
--   <a>$sel:firewallArn:UpdateSubnetChangeProtection'</a>,
--   <a>updateSubnetChangeProtectionResponse_firewallArn</a> - The Amazon
--   Resource Name (ARN) of the firewall.
--   
--   <a>$sel:subnetChangeProtection:UpdateSubnetChangeProtection'</a>,
--   <a>updateSubnetChangeProtectionResponse_subnetChangeProtection</a> - A
--   setting indicating whether the firewall is protected against changes
--   to the subnet associations. Use this setting to protect against
--   accidentally modifying the subnet associations for a firewall that is
--   in use. When you create a firewall, the operation initializes this
--   setting to <tt>TRUE</tt>.
--   
--   <a>$sel:firewallName:UpdateSubnetChangeProtection'</a>,
--   <a>updateSubnetChangeProtectionResponse_firewallName</a> - The
--   descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   <a>$sel:httpStatus:UpdateSubnetChangeProtectionResponse'</a>,
--   <a>updateSubnetChangeProtectionResponse_httpStatus</a> - The
--   response's http status code.
newUpdateSubnetChangeProtectionResponse :: Int -> UpdateSubnetChangeProtectionResponse

-- | <i>See:</i> <a>newUpdateFirewallPolicy</a> smart constructor.
data UpdateFirewallPolicy
UpdateFirewallPolicy' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Bool -> Text -> FirewallPolicy -> UpdateFirewallPolicy

-- | Create a value of <a>UpdateFirewallPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:firewallPolicyName:UpdateFirewallPolicy'</a>,
--   <a>updateFirewallPolicy_firewallPolicyName</a> - The descriptive name
--   of the firewall policy. You can't change the name of a firewall policy
--   after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:firewallPolicyArn:UpdateFirewallPolicy'</a>,
--   <a>updateFirewallPolicy_firewallPolicyArn</a> - The Amazon Resource
--   Name (ARN) of the firewall policy.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:description:UpdateFirewallPolicy'</a>,
--   <a>updateFirewallPolicy_description</a> - A description of the
--   firewall policy.
--   
--   <a>$sel:dryRun:UpdateFirewallPolicy'</a>,
--   <a>updateFirewallPolicy_dryRun</a> - Indicates whether you want
--   Network Firewall to just check the validity of the request, rather
--   than run the request.
--   
--   If set to <tt>TRUE</tt>, Network Firewall checks whether the request
--   can run successfully, but doesn't actually make the requested changes.
--   The call returns the value that the request would return if you ran it
--   with dry run set to <tt>FALSE</tt>, but doesn't make additions or
--   changes to your resources. This option allows you to make sure that
--   you have the required permissions to run the request and that your
--   request parameters are valid.
--   
--   If set to <tt>FALSE</tt>, Network Firewall makes the requested changes
--   to your resources.
--   
--   <a>$sel:updateToken:UpdateFirewallPolicy'</a>,
--   <a>updateFirewallPolicy_updateToken</a> - A token used for optimistic
--   locking. Network Firewall returns a token to your requests that access
--   the firewall policy. The token marks the state of the policy resource
--   at the time of the request.
--   
--   To make changes to the policy, you provide the token in your request.
--   Network Firewall uses the token to ensure that the policy hasn't
--   changed since you last retrieved it. If it has changed, the operation
--   fails with an <tt>InvalidTokenException</tt>. If this happens,
--   retrieve the firewall policy again to get a current copy of it with
--   current token. Reapply your changes as needed, then try the operation
--   again using the new token.
--   
--   <a>$sel:firewallPolicy:UpdateFirewallPolicy'</a>,
--   <a>updateFirewallPolicy_firewallPolicy</a> - The updated firewall
--   policy to use for the firewall.
newUpdateFirewallPolicy :: Text -> FirewallPolicy -> UpdateFirewallPolicy

-- | <i>See:</i> <a>newUpdateFirewallPolicyResponse</a> smart constructor.
data UpdateFirewallPolicyResponse
UpdateFirewallPolicyResponse' :: Int -> Text -> FirewallPolicyResponse -> UpdateFirewallPolicyResponse

-- | Create a value of <a>UpdateFirewallPolicyResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UpdateFirewallPolicyResponse'</a>,
--   <a>updateFirewallPolicyResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:updateToken:UpdateFirewallPolicy'</a>,
--   <a>updateFirewallPolicyResponse_updateToken</a> - A token used for
--   optimistic locking. Network Firewall returns a token to your requests
--   that access the firewall policy. The token marks the state of the
--   policy resource at the time of the request.
--   
--   To make changes to the policy, you provide the token in your request.
--   Network Firewall uses the token to ensure that the policy hasn't
--   changed since you last retrieved it. If it has changed, the operation
--   fails with an <tt>InvalidTokenException</tt>. If this happens,
--   retrieve the firewall policy again to get a current copy of it with
--   current token. Reapply your changes as needed, then try the operation
--   again using the new token.
--   
--   <a>$sel:firewallPolicyResponse:UpdateFirewallPolicyResponse'</a>,
--   <a>updateFirewallPolicyResponse_firewallPolicyResponse</a> - The
--   high-level properties of a firewall policy. This, along with the
--   FirewallPolicy, define the policy. You can retrieve all objects for a
--   firewall policy by calling DescribeFirewallPolicy.
newUpdateFirewallPolicyResponse :: Int -> Text -> FirewallPolicyResponse -> UpdateFirewallPolicyResponse

-- | <i>See:</i> <a>newDeleteFirewallPolicy</a> smart constructor.
data DeleteFirewallPolicy
DeleteFirewallPolicy' :: Maybe Text -> Maybe Text -> DeleteFirewallPolicy

-- | Create a value of <a>DeleteFirewallPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:firewallPolicyName:DeleteFirewallPolicy'</a>,
--   <a>deleteFirewallPolicy_firewallPolicyName</a> - The descriptive name
--   of the firewall policy. You can't change the name of a firewall policy
--   after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:firewallPolicyArn:DeleteFirewallPolicy'</a>,
--   <a>deleteFirewallPolicy_firewallPolicyArn</a> - The Amazon Resource
--   Name (ARN) of the firewall policy.
--   
--   You must specify the ARN or the name, and you can specify both.
newDeleteFirewallPolicy :: DeleteFirewallPolicy

-- | <i>See:</i> <a>newDeleteFirewallPolicyResponse</a> smart constructor.
data DeleteFirewallPolicyResponse
DeleteFirewallPolicyResponse' :: Int -> FirewallPolicyResponse -> DeleteFirewallPolicyResponse

-- | Create a value of <a>DeleteFirewallPolicyResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteFirewallPolicyResponse'</a>,
--   <a>deleteFirewallPolicyResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:firewallPolicyResponse:DeleteFirewallPolicyResponse'</a>,
--   <a>deleteFirewallPolicyResponse_firewallPolicyResponse</a> - The
--   object containing the definition of the FirewallPolicyResponse that
--   you asked to delete.
newDeleteFirewallPolicyResponse :: Int -> FirewallPolicyResponse -> DeleteFirewallPolicyResponse

-- | <i>See:</i> <a>newCreateFirewallPolicy</a> smart constructor.
data CreateFirewallPolicy
CreateFirewallPolicy' :: Maybe Text -> Maybe Bool -> Maybe (NonEmpty Tag) -> Text -> FirewallPolicy -> CreateFirewallPolicy

-- | Create a value of <a>CreateFirewallPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:description:CreateFirewallPolicy'</a>,
--   <a>createFirewallPolicy_description</a> - A description of the
--   firewall policy.
--   
--   <a>$sel:dryRun:CreateFirewallPolicy'</a>,
--   <a>createFirewallPolicy_dryRun</a> - Indicates whether you want
--   Network Firewall to just check the validity of the request, rather
--   than run the request.
--   
--   If set to <tt>TRUE</tt>, Network Firewall checks whether the request
--   can run successfully, but doesn't actually make the requested changes.
--   The call returns the value that the request would return if you ran it
--   with dry run set to <tt>FALSE</tt>, but doesn't make additions or
--   changes to your resources. This option allows you to make sure that
--   you have the required permissions to run the request and that your
--   request parameters are valid.
--   
--   If set to <tt>FALSE</tt>, Network Firewall makes the requested changes
--   to your resources.
--   
--   <a>$sel:tags:CreateFirewallPolicy'</a>,
--   <a>createFirewallPolicy_tags</a> - The key:value pairs to associate
--   with the resource.
--   
--   <a>$sel:firewallPolicyName:CreateFirewallPolicy'</a>,
--   <a>createFirewallPolicy_firewallPolicyName</a> - The descriptive name
--   of the firewall policy. You can't change the name of a firewall policy
--   after you create it.
--   
--   <a>$sel:firewallPolicy:CreateFirewallPolicy'</a>,
--   <a>createFirewallPolicy_firewallPolicy</a> - The rule groups and
--   policy actions to use in the firewall policy.
newCreateFirewallPolicy :: Text -> FirewallPolicy -> CreateFirewallPolicy

-- | <i>See:</i> <a>newCreateFirewallPolicyResponse</a> smart constructor.
data CreateFirewallPolicyResponse
CreateFirewallPolicyResponse' :: Int -> Text -> FirewallPolicyResponse -> CreateFirewallPolicyResponse

-- | Create a value of <a>CreateFirewallPolicyResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:CreateFirewallPolicyResponse'</a>,
--   <a>createFirewallPolicyResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:updateToken:CreateFirewallPolicyResponse'</a>,
--   <a>createFirewallPolicyResponse_updateToken</a> - A token used for
--   optimistic locking. Network Firewall returns a token to your requests
--   that access the firewall policy. The token marks the state of the
--   policy resource at the time of the request.
--   
--   To make changes to the policy, you provide the token in your request.
--   Network Firewall uses the token to ensure that the policy hasn't
--   changed since you last retrieved it. If it has changed, the operation
--   fails with an <tt>InvalidTokenException</tt>. If this happens,
--   retrieve the firewall policy again to get a current copy of it with
--   current token. Reapply your changes as needed, then try the operation
--   again using the new token.
--   
--   <a>$sel:firewallPolicyResponse:CreateFirewallPolicyResponse'</a>,
--   <a>createFirewallPolicyResponse_firewallPolicyResponse</a> - The
--   high-level properties of a firewall policy. This, along with the
--   FirewallPolicy, define the policy. You can retrieve all objects for a
--   firewall policy by calling DescribeFirewallPolicy.
newCreateFirewallPolicyResponse :: Int -> Text -> FirewallPolicyResponse -> CreateFirewallPolicyResponse

-- | <i>See:</i> <a>newUpdateLoggingConfiguration</a> smart constructor.
data UpdateLoggingConfiguration
UpdateLoggingConfiguration' :: Maybe Text -> Maybe LoggingConfiguration -> Maybe Text -> UpdateLoggingConfiguration

-- | Create a value of <a>UpdateLoggingConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:firewallArn:UpdateLoggingConfiguration'</a>,
--   <a>updateLoggingConfiguration_firewallArn</a> - The Amazon Resource
--   Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:loggingConfiguration:UpdateLoggingConfiguration'</a>,
--   <a>updateLoggingConfiguration_loggingConfiguration</a> - Defines how
--   Network Firewall performs logging for a firewall. If you omit this
--   setting, Network Firewall disables logging for the firewall.
--   
--   <a>$sel:firewallName:UpdateLoggingConfiguration'</a>,
--   <a>updateLoggingConfiguration_firewallName</a> - The descriptive name
--   of the firewall. You can't change the name of a firewall after you
--   create it.
--   
--   You must specify the ARN or the name, and you can specify both.
newUpdateLoggingConfiguration :: UpdateLoggingConfiguration

-- | <i>See:</i> <a>newUpdateLoggingConfigurationResponse</a> smart
--   constructor.
data UpdateLoggingConfigurationResponse
UpdateLoggingConfigurationResponse' :: Maybe Text -> Maybe LoggingConfiguration -> Maybe Text -> Int -> UpdateLoggingConfigurationResponse

-- | Create a value of <a>UpdateLoggingConfigurationResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:firewallArn:UpdateLoggingConfiguration'</a>,
--   <a>updateLoggingConfigurationResponse_firewallArn</a> - The Amazon
--   Resource Name (ARN) of the firewall.
--   
--   <a>$sel:loggingConfiguration:UpdateLoggingConfiguration'</a>,
--   <a>updateLoggingConfigurationResponse_loggingConfiguration</a> -
--   Undocumented member.
--   
--   <a>$sel:firewallName:UpdateLoggingConfiguration'</a>,
--   <a>updateLoggingConfigurationResponse_firewallName</a> - The
--   descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   <a>$sel:httpStatus:UpdateLoggingConfigurationResponse'</a>,
--   <a>updateLoggingConfigurationResponse_httpStatus</a> - The response's
--   http status code.
newUpdateLoggingConfigurationResponse :: Int -> UpdateLoggingConfigurationResponse

-- | <i>See:</i> <a>newDisassociateSubnets</a> smart constructor.
data DisassociateSubnets
DisassociateSubnets' :: Maybe Text -> Maybe Text -> Maybe Text -> [Text] -> DisassociateSubnets

-- | Create a value of <a>DisassociateSubnets</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:updateToken:DisassociateSubnets'</a>,
--   <a>disassociateSubnets_updateToken</a> - An optional token that you
--   can use for optimistic locking. Network Firewall returns a token to
--   your requests that access the firewall. The token marks the state of
--   the firewall resource at the time of the request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
--   
--   <a>$sel:firewallArn:DisassociateSubnets'</a>,
--   <a>disassociateSubnets_firewallArn</a> - The Amazon Resource Name
--   (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:firewallName:DisassociateSubnets'</a>,
--   <a>disassociateSubnets_firewallName</a> - The descriptive name of the
--   firewall. You can't change the name of a firewall after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:subnetIds:DisassociateSubnets'</a>,
--   <a>disassociateSubnets_subnetIds</a> - The unique identifiers for the
--   subnets that you want to disassociate.
newDisassociateSubnets :: DisassociateSubnets

-- | <i>See:</i> <a>newDisassociateSubnetsResponse</a> smart constructor.
data DisassociateSubnetsResponse
DisassociateSubnetsResponse' :: Maybe [SubnetMapping] -> Maybe Text -> Maybe Text -> Maybe Text -> Int -> DisassociateSubnetsResponse

-- | Create a value of <a>DisassociateSubnetsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:subnetMappings:DisassociateSubnetsResponse'</a>,
--   <a>disassociateSubnetsResponse_subnetMappings</a> - The IDs of the
--   subnets that are associated with the firewall.
--   
--   <a>$sel:updateToken:DisassociateSubnets'</a>,
--   <a>disassociateSubnetsResponse_updateToken</a> - An optional token
--   that you can use for optimistic locking. Network Firewall returns a
--   token to your requests that access the firewall. The token marks the
--   state of the firewall resource at the time of the request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
--   
--   <a>$sel:firewallArn:DisassociateSubnets'</a>,
--   <a>disassociateSubnetsResponse_firewallArn</a> - The Amazon Resource
--   Name (ARN) of the firewall.
--   
--   <a>$sel:firewallName:DisassociateSubnets'</a>,
--   <a>disassociateSubnetsResponse_firewallName</a> - The descriptive name
--   of the firewall. You can't change the name of a firewall after you
--   create it.
--   
--   <a>$sel:httpStatus:DisassociateSubnetsResponse'</a>,
--   <a>disassociateSubnetsResponse_httpStatus</a> - The response's http
--   status code.
newDisassociateSubnetsResponse :: Int -> DisassociateSubnetsResponse

-- | <i>See:</i> <a>newListTagsForResource</a> smart constructor.
data ListTagsForResource
ListTagsForResource' :: Maybe Text -> Maybe Natural -> Text -> ListTagsForResource

-- | Create a value of <a>ListTagsForResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListTagsForResource'</a>,
--   <a>listTagsForResource_nextToken</a> - When you request a list of
--   objects with a <tt>MaxResults</tt> setting, if the number of objects
--   that are still available for retrieval exceeds the maximum you
--   requested, Network Firewall returns a <tt>NextToken</tt> value in the
--   response. To retrieve the next batch of objects, use the token
--   returned from the prior request in your next request.
--   
--   <a>$sel:maxResults:ListTagsForResource'</a>,
--   <a>listTagsForResource_maxResults</a> - The maximum number of objects
--   that you want Network Firewall to return for this request. If more
--   objects are available, in the response, Network Firewall provides a
--   <tt>NextToken</tt> value that you can use in a subsequent call to get
--   the next batch of objects.
--   
--   <a>$sel:resourceArn:ListTagsForResource'</a>,
--   <a>listTagsForResource_resourceArn</a> - The Amazon Resource Name
--   (ARN) of the resource.
newListTagsForResource :: Text -> ListTagsForResource

-- | <i>See:</i> <a>newListTagsForResourceResponse</a> smart constructor.
data ListTagsForResourceResponse
ListTagsForResourceResponse' :: Maybe Text -> Maybe (NonEmpty Tag) -> Int -> ListTagsForResourceResponse

-- | Create a value of <a>ListTagsForResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListTagsForResource'</a>,
--   <a>listTagsForResourceResponse_nextToken</a> - When you request a list
--   of objects with a <tt>MaxResults</tt> setting, if the number of
--   objects that are still available for retrieval exceeds the maximum you
--   requested, Network Firewall returns a <tt>NextToken</tt> value in the
--   response. To retrieve the next batch of objects, use the token
--   returned from the prior request in your next request.
--   
--   <a>$sel:tags:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_tags</a> - The tags that are associated
--   with the resource.
--   
--   <a>$sel:httpStatus:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_httpStatus</a> - The response's http
--   status code.
newListTagsForResourceResponse :: Int -> ListTagsForResourceResponse

-- | <i>See:</i> <a>newListFirewallPolicies</a> smart constructor.
data ListFirewallPolicies
ListFirewallPolicies' :: Maybe Text -> Maybe Natural -> ListFirewallPolicies

-- | Create a value of <a>ListFirewallPolicies</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListFirewallPolicies'</a>,
--   <a>listFirewallPolicies_nextToken</a> - When you request a list of
--   objects with a <tt>MaxResults</tt> setting, if the number of objects
--   that are still available for retrieval exceeds the maximum you
--   requested, Network Firewall returns a <tt>NextToken</tt> value in the
--   response. To retrieve the next batch of objects, use the token
--   returned from the prior request in your next request.
--   
--   <a>$sel:maxResults:ListFirewallPolicies'</a>,
--   <a>listFirewallPolicies_maxResults</a> - The maximum number of objects
--   that you want Network Firewall to return for this request. If more
--   objects are available, in the response, Network Firewall provides a
--   <tt>NextToken</tt> value that you can use in a subsequent call to get
--   the next batch of objects.
newListFirewallPolicies :: ListFirewallPolicies

-- | <i>See:</i> <a>newListFirewallPoliciesResponse</a> smart constructor.
data ListFirewallPoliciesResponse
ListFirewallPoliciesResponse' :: Maybe [FirewallPolicyMetadata] -> Maybe Text -> Int -> ListFirewallPoliciesResponse

-- | Create a value of <a>ListFirewallPoliciesResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:firewallPolicies:ListFirewallPoliciesResponse'</a>,
--   <a>listFirewallPoliciesResponse_firewallPolicies</a> - The metadata
--   for the firewall policies. Depending on your setting for max results
--   and the number of firewall policies that you have, this might not be
--   the full list.
--   
--   <a>$sel:nextToken:ListFirewallPolicies'</a>,
--   <a>listFirewallPoliciesResponse_nextToken</a> - When you request a
--   list of objects with a <tt>MaxResults</tt> setting, if the number of
--   objects that are still available for retrieval exceeds the maximum you
--   requested, Network Firewall returns a <tt>NextToken</tt> value in the
--   response. To retrieve the next batch of objects, use the token
--   returned from the prior request in your next request.
--   
--   <a>$sel:httpStatus:ListFirewallPoliciesResponse'</a>,
--   <a>listFirewallPoliciesResponse_httpStatus</a> - The response's http
--   status code.
newListFirewallPoliciesResponse :: Int -> ListFirewallPoliciesResponse

-- | <i>See:</i> <a>newUpdateFirewallDeleteProtection</a> smart
--   constructor.
data UpdateFirewallDeleteProtection
UpdateFirewallDeleteProtection' :: Maybe Text -> Maybe Text -> Maybe Text -> Bool -> UpdateFirewallDeleteProtection

-- | Create a value of <a>UpdateFirewallDeleteProtection</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:updateToken:UpdateFirewallDeleteProtection'</a>,
--   <a>updateFirewallDeleteProtection_updateToken</a> - An optional token
--   that you can use for optimistic locking. Network Firewall returns a
--   token to your requests that access the firewall. The token marks the
--   state of the firewall resource at the time of the request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
--   
--   <a>$sel:firewallArn:UpdateFirewallDeleteProtection'</a>,
--   <a>updateFirewallDeleteProtection_firewallArn</a> - The Amazon
--   Resource Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:firewallName:UpdateFirewallDeleteProtection'</a>,
--   <a>updateFirewallDeleteProtection_firewallName</a> - The descriptive
--   name of the firewall. You can't change the name of a firewall after
--   you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:deleteProtection:UpdateFirewallDeleteProtection'</a>,
--   <a>updateFirewallDeleteProtection_deleteProtection</a> - A flag
--   indicating whether it is possible to delete the firewall. A setting of
--   <tt>TRUE</tt> indicates that the firewall is protected against
--   deletion. Use this setting to protect against accidentally deleting a
--   firewall that is in use. When you create a firewall, the operation
--   initializes this flag to <tt>TRUE</tt>.
newUpdateFirewallDeleteProtection :: Bool -> UpdateFirewallDeleteProtection

-- | <i>See:</i> <a>newUpdateFirewallDeleteProtectionResponse</a> smart
--   constructor.
data UpdateFirewallDeleteProtectionResponse
UpdateFirewallDeleteProtectionResponse' :: Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Text -> Int -> UpdateFirewallDeleteProtectionResponse

-- | Create a value of <a>UpdateFirewallDeleteProtectionResponse</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:updateToken:UpdateFirewallDeleteProtection'</a>,
--   <a>updateFirewallDeleteProtectionResponse_updateToken</a> - An
--   optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
--   
--   <a>$sel:firewallArn:UpdateFirewallDeleteProtection'</a>,
--   <a>updateFirewallDeleteProtectionResponse_firewallArn</a> - The Amazon
--   Resource Name (ARN) of the firewall.
--   
--   <a>$sel:deleteProtection:UpdateFirewallDeleteProtection'</a>,
--   <a>updateFirewallDeleteProtectionResponse_deleteProtection</a> -
--   
--   <a>$sel:firewallName:UpdateFirewallDeleteProtection'</a>,
--   <a>updateFirewallDeleteProtectionResponse_firewallName</a> - The
--   descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   <a>$sel:httpStatus:UpdateFirewallDeleteProtectionResponse'</a>,
--   <a>updateFirewallDeleteProtectionResponse_httpStatus</a> - The
--   response's http status code.
newUpdateFirewallDeleteProtectionResponse :: Int -> UpdateFirewallDeleteProtectionResponse

-- | <i>See:</i> <a>newCreateRuleGroup</a> smart constructor.
data CreateRuleGroup
CreateRuleGroup' :: Maybe Text -> Maybe Text -> Maybe Bool -> Maybe (NonEmpty Tag) -> Maybe RuleGroup -> Text -> RuleGroupType -> Int -> CreateRuleGroup

-- | Create a value of <a>CreateRuleGroup</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rules:CreateRuleGroup'</a>, <a>createRuleGroup_rules</a> - A
--   string containing stateful rule group rules specifications in Suricata
--   flat format, with one rule per line. Use this to import your existing
--   Suricata compatible rule groups.
--   
--   You must provide either this rules setting or a populated
--   <tt>RuleGroup</tt> setting, but not both.
--   
--   You can provide your rule group specification in Suricata flat format
--   through this setting when you create or update your rule group. The
--   call response returns a RuleGroup object that Network Firewall has
--   populated from your string.
--   
--   <a>$sel:description:CreateRuleGroup'</a>,
--   <a>createRuleGroup_description</a> - A description of the rule group.
--   
--   <a>$sel:dryRun:CreateRuleGroup'</a>, <a>createRuleGroup_dryRun</a> -
--   Indicates whether you want Network Firewall to just check the validity
--   of the request, rather than run the request.
--   
--   If set to <tt>TRUE</tt>, Network Firewall checks whether the request
--   can run successfully, but doesn't actually make the requested changes.
--   The call returns the value that the request would return if you ran it
--   with dry run set to <tt>FALSE</tt>, but doesn't make additions or
--   changes to your resources. This option allows you to make sure that
--   you have the required permissions to run the request and that your
--   request parameters are valid.
--   
--   If set to <tt>FALSE</tt>, Network Firewall makes the requested changes
--   to your resources.
--   
--   <a>$sel:tags:CreateRuleGroup'</a>, <a>createRuleGroup_tags</a> - The
--   key:value pairs to associate with the resource.
--   
--   <a>$sel:ruleGroup:CreateRuleGroup'</a>,
--   <a>createRuleGroup_ruleGroup</a> - An object that defines the rule
--   group rules.
--   
--   You must provide either this rule group setting or a <tt>Rules</tt>
--   setting, but not both.
--   
--   <a>$sel:ruleGroupName:CreateRuleGroup'</a>,
--   <a>createRuleGroup_ruleGroupName</a> - The descriptive name of the
--   rule group. You can't change the name of a rule group after you create
--   it.
--   
--   <a>$sel:type':CreateRuleGroup'</a>, <a>createRuleGroup_type</a> -
--   Indicates whether the rule group is stateless or stateful. If the rule
--   group is stateless, it contains stateless rules. If it is stateful, it
--   contains stateful rules.
--   
--   <a>$sel:capacity:CreateRuleGroup'</a>, <a>createRuleGroup_capacity</a>
--   - The maximum operating resources that this rule group can use. Rule
--   group capacity is fixed at creation. When you update a rule group, you
--   are limited to this capacity. When you reference a rule group from a
--   firewall policy, Network Firewall reserves this capacity for the rule
--   group.
--   
--   You can retrieve the capacity that would be required for a rule group
--   before you create the rule group by calling CreateRuleGroup with
--   <tt>DryRun</tt> set to <tt>TRUE</tt>.
--   
--   You can't change or exceed this capacity when you update the rule
--   group, so leave room for your rule group to grow.
--   
--   <b>Capacity for a stateless rule group</b>
--   
--   For a stateless rule group, the capacity required is the sum of the
--   capacity requirements of the individual rules that you expect to have
--   in the rule group.
--   
--   To calculate the capacity requirement of a single rule, multiply the
--   capacity requirement values of each of the rule's match settings:
--   
--   <ul>
--   <li>A match setting with no criteria specified has a value of 1.</li>
--   <li>A match setting with <tt>Any</tt> specified has a value of 1.</li>
--   <li>All other match settings have a value equal to the number of
--   elements provided in the setting. For example, a protocol setting
--   ["UDP"] and a source setting ["10.0.0.0/24"] each have a value of 1. A
--   protocol setting ["UDP","TCP"] has a value of 2. A source setting
--   ["10.0.0.0/24","10.0.0.1/24","10.0.0.2/24"] has a value of 3.</li>
--   </ul>
--   
--   A rule with no criteria specified in any of its match settings has a
--   capacity requirement of 1. A rule with protocol setting ["UDP","TCP"],
--   source setting ["10.0.0.0/24","10.0.0.1/24","10.0.0.2/24"], and a
--   single specification or no specification for each of the other match
--   settings has a capacity requirement of 6.
--   
--   <b>Capacity for a stateful rule group</b>
--   
--   For a stateful rule group, the minimum capacity required is the number
--   of individual rules that you expect to have in the rule group.
newCreateRuleGroup :: Text -> RuleGroupType -> Int -> CreateRuleGroup

-- | <i>See:</i> <a>newCreateRuleGroupResponse</a> smart constructor.
data CreateRuleGroupResponse
CreateRuleGroupResponse' :: Int -> Text -> RuleGroupResponse -> CreateRuleGroupResponse

-- | Create a value of <a>CreateRuleGroupResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:CreateRuleGroupResponse'</a>,
--   <a>createRuleGroupResponse_httpStatus</a> - The response's http status
--   code.
--   
--   <a>$sel:updateToken:CreateRuleGroupResponse'</a>,
--   <a>createRuleGroupResponse_updateToken</a> - A token used for
--   optimistic locking. Network Firewall returns a token to your requests
--   that access the rule group. The token marks the state of the rule
--   group resource at the time of the request.
--   
--   To make changes to the rule group, you provide the token in your
--   request. Network Firewall uses the token to ensure that the rule group
--   hasn't changed since you last retrieved it. If it has changed, the
--   operation fails with an <tt>InvalidTokenException</tt>. If this
--   happens, retrieve the rule group again to get a current copy of it
--   with a current token. Reapply your changes as needed, then try the
--   operation again using the new token.
--   
--   <a>$sel:ruleGroupResponse:CreateRuleGroupResponse'</a>,
--   <a>createRuleGroupResponse_ruleGroupResponse</a> - The high-level
--   properties of a rule group. This, along with the RuleGroup, define the
--   rule group. You can retrieve all objects for a rule group by calling
--   DescribeRuleGroup.
newCreateRuleGroupResponse :: Int -> Text -> RuleGroupResponse -> CreateRuleGroupResponse

-- | <i>See:</i> <a>newDescribeFirewallPolicy</a> smart constructor.
data DescribeFirewallPolicy
DescribeFirewallPolicy' :: Maybe Text -> Maybe Text -> DescribeFirewallPolicy

-- | Create a value of <a>DescribeFirewallPolicy</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:firewallPolicyName:DescribeFirewallPolicy'</a>,
--   <a>describeFirewallPolicy_firewallPolicyName</a> - The descriptive
--   name of the firewall policy. You can't change the name of a firewall
--   policy after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:firewallPolicyArn:DescribeFirewallPolicy'</a>,
--   <a>describeFirewallPolicy_firewallPolicyArn</a> - The Amazon Resource
--   Name (ARN) of the firewall policy.
--   
--   You must specify the ARN or the name, and you can specify both.
newDescribeFirewallPolicy :: DescribeFirewallPolicy

-- | <i>See:</i> <a>newDescribeFirewallPolicyResponse</a> smart
--   constructor.
data DescribeFirewallPolicyResponse
DescribeFirewallPolicyResponse' :: Maybe FirewallPolicy -> Int -> Text -> FirewallPolicyResponse -> DescribeFirewallPolicyResponse

-- | Create a value of <a>DescribeFirewallPolicyResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:firewallPolicy:DescribeFirewallPolicyResponse'</a>,
--   <a>describeFirewallPolicyResponse_firewallPolicy</a> - The policy for
--   the specified firewall policy.
--   
--   <a>$sel:httpStatus:DescribeFirewallPolicyResponse'</a>,
--   <a>describeFirewallPolicyResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:updateToken:DescribeFirewallPolicyResponse'</a>,
--   <a>describeFirewallPolicyResponse_updateToken</a> - A token used for
--   optimistic locking. Network Firewall returns a token to your requests
--   that access the firewall policy. The token marks the state of the
--   policy resource at the time of the request.
--   
--   To make changes to the policy, you provide the token in your request.
--   Network Firewall uses the token to ensure that the policy hasn't
--   changed since you last retrieved it. If it has changed, the operation
--   fails with an <tt>InvalidTokenException</tt>. If this happens,
--   retrieve the firewall policy again to get a current copy of it with
--   current token. Reapply your changes as needed, then try the operation
--   again using the new token.
--   
--   <a>$sel:firewallPolicyResponse:DescribeFirewallPolicyResponse'</a>,
--   <a>describeFirewallPolicyResponse_firewallPolicyResponse</a> - The
--   high-level properties of a firewall policy. This, along with the
--   FirewallPolicy, define the policy. You can retrieve all objects for a
--   firewall policy by calling DescribeFirewallPolicy.
newDescribeFirewallPolicyResponse :: Int -> Text -> FirewallPolicyResponse -> DescribeFirewallPolicyResponse

-- | <i>See:</i> <a>newUpdateFirewallDescription</a> smart constructor.
data UpdateFirewallDescription
UpdateFirewallDescription' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> UpdateFirewallDescription

-- | Create a value of <a>UpdateFirewallDescription</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:updateToken:UpdateFirewallDescription'</a>,
--   <a>updateFirewallDescription_updateToken</a> - An optional token that
--   you can use for optimistic locking. Network Firewall returns a token
--   to your requests that access the firewall. The token marks the state
--   of the firewall resource at the time of the request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
--   
--   <a>$sel:firewallArn:UpdateFirewallDescription'</a>,
--   <a>updateFirewallDescription_firewallArn</a> - The Amazon Resource
--   Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:description:UpdateFirewallDescription'</a>,
--   <a>updateFirewallDescription_description</a> - The new description for
--   the firewall. If you omit this setting, Network Firewall removes the
--   description for the firewall.
--   
--   <a>$sel:firewallName:UpdateFirewallDescription'</a>,
--   <a>updateFirewallDescription_firewallName</a> - The descriptive name
--   of the firewall. You can't change the name of a firewall after you
--   create it.
--   
--   You must specify the ARN or the name, and you can specify both.
newUpdateFirewallDescription :: UpdateFirewallDescription

-- | <i>See:</i> <a>newUpdateFirewallDescriptionResponse</a> smart
--   constructor.
data UpdateFirewallDescriptionResponse
UpdateFirewallDescriptionResponse' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Int -> UpdateFirewallDescriptionResponse

-- | Create a value of <a>UpdateFirewallDescriptionResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:updateToken:UpdateFirewallDescription'</a>,
--   <a>updateFirewallDescriptionResponse_updateToken</a> - An optional
--   token that you can use for optimistic locking. Network Firewall
--   returns a token to your requests that access the firewall. The token
--   marks the state of the firewall resource at the time of the request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
--   
--   <a>$sel:firewallArn:UpdateFirewallDescription'</a>,
--   <a>updateFirewallDescriptionResponse_firewallArn</a> - The Amazon
--   Resource Name (ARN) of the firewall.
--   
--   <a>$sel:description:UpdateFirewallDescription'</a>,
--   <a>updateFirewallDescriptionResponse_description</a> - A description
--   of the firewall.
--   
--   <a>$sel:firewallName:UpdateFirewallDescription'</a>,
--   <a>updateFirewallDescriptionResponse_firewallName</a> - The
--   descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   <a>$sel:httpStatus:UpdateFirewallDescriptionResponse'</a>,
--   <a>updateFirewallDescriptionResponse_httpStatus</a> - The response's
--   http status code.
newUpdateFirewallDescriptionResponse :: Int -> UpdateFirewallDescriptionResponse

-- | <i>See:</i> <a>newDescribeRuleGroup</a> smart constructor.
data DescribeRuleGroup
DescribeRuleGroup' :: Maybe Text -> Maybe RuleGroupType -> Maybe Text -> DescribeRuleGroup

-- | Create a value of <a>DescribeRuleGroup</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:ruleGroupArn:DescribeRuleGroup'</a>,
--   <a>describeRuleGroup_ruleGroupArn</a> - The Amazon Resource Name (ARN)
--   of the rule group.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:type':DescribeRuleGroup'</a>, <a>describeRuleGroup_type</a> -
--   Indicates whether the rule group is stateless or stateful. If the rule
--   group is stateless, it contains stateless rules. If it is stateful, it
--   contains stateful rules.
--   
--   This setting is required for requests that do not include the
--   <tt>RuleGroupARN</tt>.
--   
--   <a>$sel:ruleGroupName:DescribeRuleGroup'</a>,
--   <a>describeRuleGroup_ruleGroupName</a> - The descriptive name of the
--   rule group. You can't change the name of a rule group after you create
--   it.
--   
--   You must specify the ARN or the name, and you can specify both.
newDescribeRuleGroup :: DescribeRuleGroup

-- | <i>See:</i> <a>newDescribeRuleGroupResponse</a> smart constructor.
data DescribeRuleGroupResponse
DescribeRuleGroupResponse' :: Maybe RuleGroup -> Int -> Text -> RuleGroupResponse -> DescribeRuleGroupResponse

-- | Create a value of <a>DescribeRuleGroupResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:ruleGroup:DescribeRuleGroupResponse'</a>,
--   <a>describeRuleGroupResponse_ruleGroup</a> - The object that defines
--   the rules in a rule group. This, along with RuleGroupResponse, define
--   the rule group. You can retrieve all objects for a rule group by
--   calling DescribeRuleGroup.
--   
--   AWS Network Firewall uses a rule group to inspect and control network
--   traffic. You define stateless rule groups to inspect individual
--   packets and you define stateful rule groups to inspect packets in the
--   context of their traffic flow.
--   
--   To use a rule group, you include it by reference in an Network
--   Firewall firewall policy, then you use the policy in a firewall. You
--   can reference a rule group from more than one firewall policy, and you
--   can use a firewall policy in more than one firewall.
--   
--   <a>$sel:httpStatus:DescribeRuleGroupResponse'</a>,
--   <a>describeRuleGroupResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:updateToken:DescribeRuleGroupResponse'</a>,
--   <a>describeRuleGroupResponse_updateToken</a> - A token used for
--   optimistic locking. Network Firewall returns a token to your requests
--   that access the rule group. The token marks the state of the rule
--   group resource at the time of the request.
--   
--   To make changes to the rule group, you provide the token in your
--   request. Network Firewall uses the token to ensure that the rule group
--   hasn't changed since you last retrieved it. If it has changed, the
--   operation fails with an <tt>InvalidTokenException</tt>. If this
--   happens, retrieve the rule group again to get a current copy of it
--   with a current token. Reapply your changes as needed, then try the
--   operation again using the new token.
--   
--   <a>$sel:ruleGroupResponse:DescribeRuleGroupResponse'</a>,
--   <a>describeRuleGroupResponse_ruleGroupResponse</a> - The high-level
--   properties of a rule group. This, along with the RuleGroup, define the
--   rule group. You can retrieve all objects for a rule group by calling
--   DescribeRuleGroup.
newDescribeRuleGroupResponse :: Int -> Text -> RuleGroupResponse -> DescribeRuleGroupResponse

-- | <i>See:</i> <a>newDeleteFirewall</a> smart constructor.
data DeleteFirewall
DeleteFirewall' :: Maybe Text -> Maybe Text -> DeleteFirewall

-- | Create a value of <a>DeleteFirewall</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:firewallArn:DeleteFirewall'</a>,
--   <a>deleteFirewall_firewallArn</a> - The Amazon Resource Name (ARN) of
--   the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:firewallName:DeleteFirewall'</a>,
--   <a>deleteFirewall_firewallName</a> - The descriptive name of the
--   firewall. You can't change the name of a firewall after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
newDeleteFirewall :: DeleteFirewall

-- | <i>See:</i> <a>newDeleteFirewallResponse</a> smart constructor.
data DeleteFirewallResponse
DeleteFirewallResponse' :: Maybe FirewallStatus -> Maybe Firewall -> Int -> DeleteFirewallResponse

-- | Create a value of <a>DeleteFirewallResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:firewallStatus:DeleteFirewallResponse'</a>,
--   <a>deleteFirewallResponse_firewallStatus</a> - Undocumented member.
--   
--   <a>$sel:firewall:DeleteFirewallResponse'</a>,
--   <a>deleteFirewallResponse_firewall</a> - Undocumented member.
--   
--   <a>$sel:httpStatus:DeleteFirewallResponse'</a>,
--   <a>deleteFirewallResponse_httpStatus</a> - The response's http status
--   code.
newDeleteFirewallResponse :: Int -> DeleteFirewallResponse

-- | <i>See:</i> <a>newListFirewalls</a> smart constructor.
data ListFirewalls
ListFirewalls' :: Maybe Text -> Maybe [Text] -> Maybe Natural -> ListFirewalls

-- | Create a value of <a>ListFirewalls</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListFirewalls'</a>, <a>listFirewalls_nextToken</a> -
--   When you request a list of objects with a <tt>MaxResults</tt> setting,
--   if the number of objects that are still available for retrieval
--   exceeds the maximum you requested, Network Firewall returns a
--   <tt>NextToken</tt> value in the response. To retrieve the next batch
--   of objects, use the token returned from the prior request in your next
--   request.
--   
--   <a>$sel:vpcIds:ListFirewalls'</a>, <a>listFirewalls_vpcIds</a> - The
--   unique identifiers of the VPCs that you want Network Firewall to
--   retrieve the firewalls for. Leave this blank to retrieve all firewalls
--   that you have defined.
--   
--   <a>$sel:maxResults:ListFirewalls'</a>, <a>listFirewalls_maxResults</a>
--   - The maximum number of objects that you want Network Firewall to
--   return for this request. If more objects are available, in the
--   response, Network Firewall provides a <tt>NextToken</tt> value that
--   you can use in a subsequent call to get the next batch of objects.
newListFirewalls :: ListFirewalls

-- | <i>See:</i> <a>newListFirewallsResponse</a> smart constructor.
data ListFirewallsResponse
ListFirewallsResponse' :: Maybe Text -> Maybe [FirewallMetadata] -> Int -> ListFirewallsResponse

-- | Create a value of <a>ListFirewallsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListFirewalls'</a>,
--   <a>listFirewallsResponse_nextToken</a> - When you request a list of
--   objects with a <tt>MaxResults</tt> setting, if the number of objects
--   that are still available for retrieval exceeds the maximum you
--   requested, Network Firewall returns a <tt>NextToken</tt> value in the
--   response. To retrieve the next batch of objects, use the token
--   returned from the prior request in your next request.
--   
--   <a>$sel:firewalls:ListFirewallsResponse'</a>,
--   <a>listFirewallsResponse_firewalls</a> - The firewall metadata objects
--   for the VPCs that you specified. Depending on your setting for max
--   results and the number of firewalls you have, a single call might not
--   be the full list.
--   
--   <a>$sel:httpStatus:ListFirewallsResponse'</a>,
--   <a>listFirewallsResponse_httpStatus</a> - The response's http status
--   code.
newListFirewallsResponse :: Int -> ListFirewallsResponse

-- | <i>See:</i> <a>newDescribeResourcePolicy</a> smart constructor.
data DescribeResourcePolicy
DescribeResourcePolicy' :: Text -> DescribeResourcePolicy

-- | Create a value of <a>DescribeResourcePolicy</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:DescribeResourcePolicy'</a>,
--   <a>describeResourcePolicy_resourceArn</a> - The Amazon Resource Name
--   (ARN) of the rule group or firewall policy whose resource policy you
--   want to retrieve.
newDescribeResourcePolicy :: Text -> DescribeResourcePolicy

-- | <i>See:</i> <a>newDescribeResourcePolicyResponse</a> smart
--   constructor.
data DescribeResourcePolicyResponse
DescribeResourcePolicyResponse' :: Maybe Text -> Int -> DescribeResourcePolicyResponse

-- | Create a value of <a>DescribeResourcePolicyResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:policy:DescribeResourcePolicyResponse'</a>,
--   <a>describeResourcePolicyResponse_policy</a> - The AWS Identity and
--   Access Management policy for the resource.
--   
--   <a>$sel:httpStatus:DescribeResourcePolicyResponse'</a>,
--   <a>describeResourcePolicyResponse_httpStatus</a> - The response's http
--   status code.
newDescribeResourcePolicyResponse :: Int -> DescribeResourcePolicyResponse

-- | <i>See:</i> <a>newAssociateFirewallPolicy</a> smart constructor.
data AssociateFirewallPolicy
AssociateFirewallPolicy' :: Maybe Text -> Maybe Text -> Maybe Text -> Text -> AssociateFirewallPolicy

-- | Create a value of <a>AssociateFirewallPolicy</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:updateToken:AssociateFirewallPolicy'</a>,
--   <a>associateFirewallPolicy_updateToken</a> - An optional token that
--   you can use for optimistic locking. Network Firewall returns a token
--   to your requests that access the firewall. The token marks the state
--   of the firewall resource at the time of the request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
--   
--   <a>$sel:firewallArn:AssociateFirewallPolicy'</a>,
--   <a>associateFirewallPolicy_firewallArn</a> - The Amazon Resource Name
--   (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:firewallName:AssociateFirewallPolicy'</a>,
--   <a>associateFirewallPolicy_firewallName</a> - The descriptive name of
--   the firewall. You can't change the name of a firewall after you create
--   it.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:firewallPolicyArn:AssociateFirewallPolicy'</a>,
--   <a>associateFirewallPolicy_firewallPolicyArn</a> - The Amazon Resource
--   Name (ARN) of the firewall policy.
newAssociateFirewallPolicy :: Text -> AssociateFirewallPolicy

-- | <i>See:</i> <a>newAssociateFirewallPolicyResponse</a> smart
--   constructor.
data AssociateFirewallPolicyResponse
AssociateFirewallPolicyResponse' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Int -> AssociateFirewallPolicyResponse

-- | Create a value of <a>AssociateFirewallPolicyResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:updateToken:AssociateFirewallPolicy'</a>,
--   <a>associateFirewallPolicyResponse_updateToken</a> - An optional token
--   that you can use for optimistic locking. Network Firewall returns a
--   token to your requests that access the firewall. The token marks the
--   state of the firewall resource at the time of the request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
--   
--   <a>$sel:firewallArn:AssociateFirewallPolicy'</a>,
--   <a>associateFirewallPolicyResponse_firewallArn</a> - The Amazon
--   Resource Name (ARN) of the firewall.
--   
--   <a>$sel:firewallPolicyArn:AssociateFirewallPolicy'</a>,
--   <a>associateFirewallPolicyResponse_firewallPolicyArn</a> - The Amazon
--   Resource Name (ARN) of the firewall policy.
--   
--   <a>$sel:firewallName:AssociateFirewallPolicy'</a>,
--   <a>associateFirewallPolicyResponse_firewallName</a> - The descriptive
--   name of the firewall. You can't change the name of a firewall after
--   you create it.
--   
--   <a>$sel:httpStatus:AssociateFirewallPolicyResponse'</a>,
--   <a>associateFirewallPolicyResponse_httpStatus</a> - The response's
--   http status code.
newAssociateFirewallPolicyResponse :: Int -> AssociateFirewallPolicyResponse

-- | <i>See:</i> <a>newUpdateFirewallPolicyChangeProtection</a> smart
--   constructor.
data UpdateFirewallPolicyChangeProtection
UpdateFirewallPolicyChangeProtection' :: Maybe Text -> Maybe Text -> Maybe Text -> Bool -> UpdateFirewallPolicyChangeProtection

-- | Create a value of <a>UpdateFirewallPolicyChangeProtection</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:updateToken:UpdateFirewallPolicyChangeProtection'</a>,
--   <a>updateFirewallPolicyChangeProtection_updateToken</a> - An optional
--   token that you can use for optimistic locking. Network Firewall
--   returns a token to your requests that access the firewall. The token
--   marks the state of the firewall resource at the time of the request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
--   
--   <a>$sel:firewallArn:UpdateFirewallPolicyChangeProtection'</a>,
--   <a>updateFirewallPolicyChangeProtection_firewallArn</a> - The Amazon
--   Resource Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:firewallName:UpdateFirewallPolicyChangeProtection'</a>,
--   <a>updateFirewallPolicyChangeProtection_firewallName</a> - The
--   descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   
--   <a>$sel:firewallPolicyChangeProtection:UpdateFirewallPolicyChangeProtection'</a>,
--   <a>updateFirewallPolicyChangeProtection_firewallPolicyChangeProtection</a>
--   - A setting indicating whether the firewall is protected against a
--   change to the firewall policy association. Use this setting to protect
--   against accidentally modifying the firewall policy for a firewall that
--   is in use. When you create a firewall, the operation initializes this
--   setting to <tt>TRUE</tt>.
newUpdateFirewallPolicyChangeProtection :: Bool -> UpdateFirewallPolicyChangeProtection

-- | <i>See:</i> <a>newUpdateFirewallPolicyChangeProtectionResponse</a>
--   smart constructor.
data UpdateFirewallPolicyChangeProtectionResponse
UpdateFirewallPolicyChangeProtectionResponse' :: Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Text -> Int -> UpdateFirewallPolicyChangeProtectionResponse

-- | Create a value of <a>UpdateFirewallPolicyChangeProtectionResponse</a>
--   with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:updateToken:UpdateFirewallPolicyChangeProtection'</a>,
--   <a>updateFirewallPolicyChangeProtectionResponse_updateToken</a> - An
--   optional token that you can use for optimistic locking. Network
--   Firewall returns a token to your requests that access the firewall.
--   The token marks the state of the firewall resource at the time of the
--   request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
--   
--   <a>$sel:firewallArn:UpdateFirewallPolicyChangeProtection'</a>,
--   <a>updateFirewallPolicyChangeProtectionResponse_firewallArn</a> - The
--   Amazon Resource Name (ARN) of the firewall.
--   
--   
--   <a>$sel:firewallPolicyChangeProtection:UpdateFirewallPolicyChangeProtection'</a>,
--   <a>updateFirewallPolicyChangeProtectionResponse_firewallPolicyChangeProtection</a>
--   - A setting indicating whether the firewall is protected against a
--   change to the firewall policy association. Use this setting to protect
--   against accidentally modifying the firewall policy for a firewall that
--   is in use. When you create a firewall, the operation initializes this
--   setting to <tt>TRUE</tt>.
--   
--   <a>$sel:firewallName:UpdateFirewallPolicyChangeProtection'</a>,
--   <a>updateFirewallPolicyChangeProtectionResponse_firewallName</a> - The
--   descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   <a>$sel:httpStatus:UpdateFirewallPolicyChangeProtectionResponse'</a>,
--   <a>updateFirewallPolicyChangeProtectionResponse_httpStatus</a> - The
--   response's http status code.
newUpdateFirewallPolicyChangeProtectionResponse :: Int -> UpdateFirewallPolicyChangeProtectionResponse

-- | <i>See:</i> <a>newCreateFirewall</a> smart constructor.
data CreateFirewall
CreateFirewall' :: Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Text -> Maybe (NonEmpty Tag) -> Text -> Text -> Text -> [SubnetMapping] -> CreateFirewall

-- | Create a value of <a>CreateFirewall</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:firewallPolicyChangeProtection:CreateFirewall'</a>,
--   <a>createFirewall_firewallPolicyChangeProtection</a> - A setting
--   indicating whether the firewall is protected against a change to the
--   firewall policy association. Use this setting to protect against
--   accidentally modifying the firewall policy for a firewall that is in
--   use. When you create a firewall, the operation initializes this
--   setting to <tt>TRUE</tt>.
--   
--   <a>$sel:subnetChangeProtection:CreateFirewall'</a>,
--   <a>createFirewall_subnetChangeProtection</a> - A setting indicating
--   whether the firewall is protected against changes to the subnet
--   associations. Use this setting to protect against accidentally
--   modifying the subnet associations for a firewall that is in use. When
--   you create a firewall, the operation initializes this setting to
--   <tt>TRUE</tt>.
--   
--   <a>$sel:deleteProtection:CreateFirewall'</a>,
--   <a>createFirewall_deleteProtection</a> - A flag indicating whether it
--   is possible to delete the firewall. A setting of <tt>TRUE</tt>
--   indicates that the firewall is protected against deletion. Use this
--   setting to protect against accidentally deleting a firewall that is in
--   use. When you create a firewall, the operation initializes this flag
--   to <tt>TRUE</tt>.
--   
--   <a>$sel:description:CreateFirewall'</a>,
--   <a>createFirewall_description</a> - A description of the firewall.
--   
--   <a>$sel:tags:CreateFirewall'</a>, <a>createFirewall_tags</a> - The
--   key:value pairs to associate with the resource.
--   
--   <a>$sel:firewallName:CreateFirewall'</a>,
--   <a>createFirewall_firewallName</a> - The descriptive name of the
--   firewall. You can't change the name of a firewall after you create it.
--   
--   <a>$sel:firewallPolicyArn:CreateFirewall'</a>,
--   <a>createFirewall_firewallPolicyArn</a> - The Amazon Resource Name
--   (ARN) of the FirewallPolicy that you want to use for the firewall.
--   
--   <a>$sel:vpcId:CreateFirewall'</a>, <a>createFirewall_vpcId</a> - The
--   unique identifier of the VPC where Network Firewall should create the
--   firewall.
--   
--   You can't change this setting after you create the firewall.
--   
--   <a>$sel:subnetMappings:CreateFirewall'</a>,
--   <a>createFirewall_subnetMappings</a> - The public subnets to use for
--   your Network Firewall firewalls. Each subnet must belong to a
--   different Availability Zone in the VPC. Network Firewall creates a
--   firewall endpoint in each subnet.
newCreateFirewall :: Text -> Text -> Text -> CreateFirewall

-- | <i>See:</i> <a>newCreateFirewallResponse</a> smart constructor.
data CreateFirewallResponse
CreateFirewallResponse' :: Maybe FirewallStatus -> Maybe Firewall -> Int -> CreateFirewallResponse

-- | Create a value of <a>CreateFirewallResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:firewallStatus:CreateFirewallResponse'</a>,
--   <a>createFirewallResponse_firewallStatus</a> - Detailed information
--   about the current status of a Firewall. You can retrieve this for a
--   firewall by calling DescribeFirewall and providing the firewall name
--   and ARN.
--   
--   <a>$sel:firewall:CreateFirewallResponse'</a>,
--   <a>createFirewallResponse_firewall</a> - The configuration settings
--   for the firewall. These settings include the firewall policy and the
--   subnets in your VPC to use for the firewall endpoints.
--   
--   <a>$sel:httpStatus:CreateFirewallResponse'</a>,
--   <a>createFirewallResponse_httpStatus</a> - The response's http status
--   code.
newCreateFirewallResponse :: Int -> CreateFirewallResponse

-- | <i>See:</i> <a>newListRuleGroups</a> smart constructor.
data ListRuleGroups
ListRuleGroups' :: Maybe Text -> Maybe Natural -> ListRuleGroups

-- | Create a value of <a>ListRuleGroups</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListRuleGroups'</a>, <a>listRuleGroups_nextToken</a>
--   - When you request a list of objects with a <tt>MaxResults</tt>
--   setting, if the number of objects that are still available for
--   retrieval exceeds the maximum you requested, Network Firewall returns
--   a <tt>NextToken</tt> value in the response. To retrieve the next batch
--   of objects, use the token returned from the prior request in your next
--   request.
--   
--   <a>$sel:maxResults:ListRuleGroups'</a>,
--   <a>listRuleGroups_maxResults</a> - The maximum number of objects that
--   you want Network Firewall to return for this request. If more objects
--   are available, in the response, Network Firewall provides a
--   <tt>NextToken</tt> value that you can use in a subsequent call to get
--   the next batch of objects.
newListRuleGroups :: ListRuleGroups

-- | <i>See:</i> <a>newListRuleGroupsResponse</a> smart constructor.
data ListRuleGroupsResponse
ListRuleGroupsResponse' :: Maybe Text -> Maybe [RuleGroupMetadata] -> Int -> ListRuleGroupsResponse

-- | Create a value of <a>ListRuleGroupsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListRuleGroups'</a>,
--   <a>listRuleGroupsResponse_nextToken</a> - When you request a list of
--   objects with a <tt>MaxResults</tt> setting, if the number of objects
--   that are still available for retrieval exceeds the maximum you
--   requested, Network Firewall returns a <tt>NextToken</tt> value in the
--   response. To retrieve the next batch of objects, use the token
--   returned from the prior request in your next request.
--   
--   <a>$sel:ruleGroups:ListRuleGroupsResponse'</a>,
--   <a>listRuleGroupsResponse_ruleGroups</a> - The rule group metadata
--   objects that you've defined. Depending on your setting for max results
--   and the number of rule groups, this might not be the full list.
--   
--   <a>$sel:httpStatus:ListRuleGroupsResponse'</a>,
--   <a>listRuleGroupsResponse_httpStatus</a> - The response's http status
--   code.
newListRuleGroupsResponse :: Int -> ListRuleGroupsResponse

-- | <i>See:</i> <a>newTagResource</a> smart constructor.
data TagResource
TagResource' :: Text -> NonEmpty Tag -> TagResource

-- | Create a value of <a>TagResource</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:TagResource'</a>, <a>tagResource_resourceArn</a> -
--   The Amazon Resource Name (ARN) of the resource.
--   
--   <a>$sel:tags:TagResource'</a>, <a>tagResource_tags</a> -
newTagResource :: Text -> NonEmpty Tag -> TagResource

-- | <i>See:</i> <a>newTagResourceResponse</a> smart constructor.
data TagResourceResponse
TagResourceResponse' :: Int -> TagResourceResponse

-- | Create a value of <a>TagResourceResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:TagResourceResponse'</a>,
--   <a>tagResourceResponse_httpStatus</a> - The response's http status
--   code.
newTagResourceResponse :: Int -> TagResourceResponse

-- | <i>See:</i> <a>newDeleteRuleGroup</a> smart constructor.
data DeleteRuleGroup
DeleteRuleGroup' :: Maybe Text -> Maybe RuleGroupType -> Maybe Text -> DeleteRuleGroup

-- | Create a value of <a>DeleteRuleGroup</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:ruleGroupArn:DeleteRuleGroup'</a>,
--   <a>deleteRuleGroup_ruleGroupArn</a> - The Amazon Resource Name (ARN)
--   of the rule group.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:type':DeleteRuleGroup'</a>, <a>deleteRuleGroup_type</a> -
--   Indicates whether the rule group is stateless or stateful. If the rule
--   group is stateless, it contains stateless rules. If it is stateful, it
--   contains stateful rules.
--   
--   This setting is required for requests that do not include the
--   <tt>RuleGroupARN</tt>.
--   
--   <a>$sel:ruleGroupName:DeleteRuleGroup'</a>,
--   <a>deleteRuleGroup_ruleGroupName</a> - The descriptive name of the
--   rule group. You can't change the name of a rule group after you create
--   it.
--   
--   You must specify the ARN or the name, and you can specify both.
newDeleteRuleGroup :: DeleteRuleGroup

-- | <i>See:</i> <a>newDeleteRuleGroupResponse</a> smart constructor.
data DeleteRuleGroupResponse
DeleteRuleGroupResponse' :: Int -> RuleGroupResponse -> DeleteRuleGroupResponse

-- | Create a value of <a>DeleteRuleGroupResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteRuleGroupResponse'</a>,
--   <a>deleteRuleGroupResponse_httpStatus</a> - The response's http status
--   code.
--   
--   <a>$sel:ruleGroupResponse:DeleteRuleGroupResponse'</a>,
--   <a>deleteRuleGroupResponse_ruleGroupResponse</a> - The high-level
--   properties of a rule group. This, along with the RuleGroup, define the
--   rule group. You can retrieve all objects for a rule group by calling
--   DescribeRuleGroup.
newDeleteRuleGroupResponse :: Int -> RuleGroupResponse -> DeleteRuleGroupResponse

-- | <i>See:</i> <a>newUpdateRuleGroup</a> smart constructor.
data UpdateRuleGroup
UpdateRuleGroup' :: Maybe Text -> Maybe Text -> Maybe RuleGroupType -> Maybe Text -> Maybe Text -> Maybe Bool -> Maybe RuleGroup -> Text -> UpdateRuleGroup

-- | Create a value of <a>UpdateRuleGroup</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:ruleGroupArn:UpdateRuleGroup'</a>,
--   <a>updateRuleGroup_ruleGroupArn</a> - The Amazon Resource Name (ARN)
--   of the rule group.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:rules:UpdateRuleGroup'</a>, <a>updateRuleGroup_rules</a> - A
--   string containing stateful rule group rules specifications in Suricata
--   flat format, with one rule per line. Use this to import your existing
--   Suricata compatible rule groups.
--   
--   You must provide either this rules setting or a populated
--   <tt>RuleGroup</tt> setting, but not both.
--   
--   You can provide your rule group specification in Suricata flat format
--   through this setting when you create or update your rule group. The
--   call response returns a RuleGroup object that Network Firewall has
--   populated from your string.
--   
--   <a>$sel:type':UpdateRuleGroup'</a>, <a>updateRuleGroup_type</a> -
--   Indicates whether the rule group is stateless or stateful. If the rule
--   group is stateless, it contains stateless rules. If it is stateful, it
--   contains stateful rules.
--   
--   This setting is required for requests that do not include the
--   <tt>RuleGroupARN</tt>.
--   
--   <a>$sel:description:UpdateRuleGroup'</a>,
--   <a>updateRuleGroup_description</a> - A description of the rule group.
--   
--   <a>$sel:ruleGroupName:UpdateRuleGroup'</a>,
--   <a>updateRuleGroup_ruleGroupName</a> - The descriptive name of the
--   rule group. You can't change the name of a rule group after you create
--   it.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:dryRun:UpdateRuleGroup'</a>, <a>updateRuleGroup_dryRun</a> -
--   Indicates whether you want Network Firewall to just check the validity
--   of the request, rather than run the request.
--   
--   If set to <tt>TRUE</tt>, Network Firewall checks whether the request
--   can run successfully, but doesn't actually make the requested changes.
--   The call returns the value that the request would return if you ran it
--   with dry run set to <tt>FALSE</tt>, but doesn't make additions or
--   changes to your resources. This option allows you to make sure that
--   you have the required permissions to run the request and that your
--   request parameters are valid.
--   
--   If set to <tt>FALSE</tt>, Network Firewall makes the requested changes
--   to your resources.
--   
--   <a>$sel:ruleGroup:UpdateRuleGroup'</a>,
--   <a>updateRuleGroup_ruleGroup</a> - An object that defines the rule
--   group rules.
--   
--   You must provide either this rule group setting or a <tt>Rules</tt>
--   setting, but not both.
--   
--   <a>$sel:updateToken:UpdateRuleGroup'</a>,
--   <a>updateRuleGroup_updateToken</a> - A token used for optimistic
--   locking. Network Firewall returns a token to your requests that access
--   the rule group. The token marks the state of the rule group resource
--   at the time of the request.
--   
--   To make changes to the rule group, you provide the token in your
--   request. Network Firewall uses the token to ensure that the rule group
--   hasn't changed since you last retrieved it. If it has changed, the
--   operation fails with an <tt>InvalidTokenException</tt>. If this
--   happens, retrieve the rule group again to get a current copy of it
--   with a current token. Reapply your changes as needed, then try the
--   operation again using the new token.
newUpdateRuleGroup :: Text -> UpdateRuleGroup

-- | <i>See:</i> <a>newUpdateRuleGroupResponse</a> smart constructor.
data UpdateRuleGroupResponse
UpdateRuleGroupResponse' :: Int -> Text -> RuleGroupResponse -> UpdateRuleGroupResponse

-- | Create a value of <a>UpdateRuleGroupResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UpdateRuleGroupResponse'</a>,
--   <a>updateRuleGroupResponse_httpStatus</a> - The response's http status
--   code.
--   
--   <a>$sel:updateToken:UpdateRuleGroup'</a>,
--   <a>updateRuleGroupResponse_updateToken</a> - A token used for
--   optimistic locking. Network Firewall returns a token to your requests
--   that access the rule group. The token marks the state of the rule
--   group resource at the time of the request.
--   
--   To make changes to the rule group, you provide the token in your
--   request. Network Firewall uses the token to ensure that the rule group
--   hasn't changed since you last retrieved it. If it has changed, the
--   operation fails with an <tt>InvalidTokenException</tt>. If this
--   happens, retrieve the rule group again to get a current copy of it
--   with a current token. Reapply your changes as needed, then try the
--   operation again using the new token.
--   
--   <a>$sel:ruleGroupResponse:UpdateRuleGroupResponse'</a>,
--   <a>updateRuleGroupResponse_ruleGroupResponse</a> - The high-level
--   properties of a rule group. This, along with the RuleGroup, define the
--   rule group. You can retrieve all objects for a rule group by calling
--   DescribeRuleGroup.
newUpdateRuleGroupResponse :: Int -> Text -> RuleGroupResponse -> UpdateRuleGroupResponse

-- | <i>See:</i> <a>newPutResourcePolicy</a> smart constructor.
data PutResourcePolicy
PutResourcePolicy' :: Text -> Text -> PutResourcePolicy

-- | Create a value of <a>PutResourcePolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:PutResourcePolicy'</a>,
--   <a>putResourcePolicy_resourceArn</a> - The Amazon Resource Name (ARN)
--   of the account that you want to share rule groups and firewall
--   policies with.
--   
--   <a>$sel:policy:PutResourcePolicy'</a>, <a>putResourcePolicy_policy</a>
--   - The AWS Identity and Access Management policy statement that lists
--   the accounts that you want to share your rule group or firewall policy
--   with and the operations that you want the accounts to be able to
--   perform.
--   
--   For a rule group resource, you can specify the following operations in
--   the Actions section of the statement:
--   
--   <ul>
--   <li>network-firewall:CreateFirewallPolicy</li>
--   <li>network-firewall:UpdateFirewallPolicy</li>
--   <li>network-firewall:ListRuleGroups</li>
--   </ul>
--   
--   For a firewall policy resource, you can specify the following
--   operations in the Actions section of the statement:
--   
--   <ul>
--   <li>network-firewall:CreateFirewall</li>
--   <li>network-firewall:UpdateFirewall</li>
--   <li>network-firewall:AssociateFirewallPolicy</li>
--   <li>network-firewall:ListFirewallPolicies</li>
--   </ul>
--   
--   In the Resource section of the statement, you specify the ARNs for the
--   rule groups and firewall policies that you want to share with the
--   account that you specified in <tt>Arn</tt>.
newPutResourcePolicy :: Text -> Text -> PutResourcePolicy

-- | <i>See:</i> <a>newPutResourcePolicyResponse</a> smart constructor.
data PutResourcePolicyResponse
PutResourcePolicyResponse' :: Int -> PutResourcePolicyResponse

-- | Create a value of <a>PutResourcePolicyResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:PutResourcePolicyResponse'</a>,
--   <a>putResourcePolicyResponse_httpStatus</a> - The response's http
--   status code.
newPutResourcePolicyResponse :: Int -> PutResourcePolicyResponse

-- | <i>See:</i> <a>newDescribeFirewall</a> smart constructor.
data DescribeFirewall
DescribeFirewall' :: Maybe Text -> Maybe Text -> DescribeFirewall

-- | Create a value of <a>DescribeFirewall</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:firewallArn:DescribeFirewall'</a>,
--   <a>describeFirewall_firewallArn</a> - The Amazon Resource Name (ARN)
--   of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:firewallName:DescribeFirewall'</a>,
--   <a>describeFirewall_firewallName</a> - The descriptive name of the
--   firewall. You can't change the name of a firewall after you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
newDescribeFirewall :: DescribeFirewall

-- | <i>See:</i> <a>newDescribeFirewallResponse</a> smart constructor.
data DescribeFirewallResponse
DescribeFirewallResponse' :: Maybe FirewallStatus -> Maybe Text -> Maybe Firewall -> Int -> DescribeFirewallResponse

-- | Create a value of <a>DescribeFirewallResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:firewallStatus:DescribeFirewallResponse'</a>,
--   <a>describeFirewallResponse_firewallStatus</a> - Detailed information
--   about the current status of a Firewall. You can retrieve this for a
--   firewall by calling DescribeFirewall and providing the firewall name
--   and ARN.
--   
--   <a>$sel:updateToken:DescribeFirewallResponse'</a>,
--   <a>describeFirewallResponse_updateToken</a> - An optional token that
--   you can use for optimistic locking. Network Firewall returns a token
--   to your requests that access the firewall. The token marks the state
--   of the firewall resource at the time of the request.
--   
--   To make an unconditional change to the firewall, omit the token in
--   your update request. Without the token, Network Firewall performs your
--   updates regardless of whether the firewall has changed since you last
--   retrieved it.
--   
--   To make a conditional change to the firewall, provide the token in
--   your update request. Network Firewall uses the token to ensure that
--   the firewall hasn't changed since you last retrieved it. If it has
--   changed, the operation fails with an <tt>InvalidTokenException</tt>.
--   If this happens, retrieve the firewall again to get a current copy of
--   it with a new token. Reapply your changes as needed, then try the
--   operation again using the new token.
--   
--   <a>$sel:firewall:DescribeFirewallResponse'</a>,
--   <a>describeFirewallResponse_firewall</a> - The configuration settings
--   for the firewall. These settings include the firewall policy and the
--   subnets in your VPC to use for the firewall endpoints.
--   
--   <a>$sel:httpStatus:DescribeFirewallResponse'</a>,
--   <a>describeFirewallResponse_httpStatus</a> - The response's http
--   status code.
newDescribeFirewallResponse :: Int -> DescribeFirewallResponse

-- | <i>See:</i> <a>newDeleteResourcePolicy</a> smart constructor.
data DeleteResourcePolicy
DeleteResourcePolicy' :: Text -> DeleteResourcePolicy

-- | Create a value of <a>DeleteResourcePolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:DeleteResourcePolicy'</a>,
--   <a>deleteResourcePolicy_resourceArn</a> - The Amazon Resource Name
--   (ARN) of the rule group or firewall policy whose resource policy you
--   want to delete.
newDeleteResourcePolicy :: Text -> DeleteResourcePolicy

-- | <i>See:</i> <a>newDeleteResourcePolicyResponse</a> smart constructor.
data DeleteResourcePolicyResponse
DeleteResourcePolicyResponse' :: Int -> DeleteResourcePolicyResponse

-- | Create a value of <a>DeleteResourcePolicyResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteResourcePolicyResponse'</a>,
--   <a>deleteResourcePolicyResponse_httpStatus</a> - The response's http
--   status code.
newDeleteResourcePolicyResponse :: Int -> DeleteResourcePolicyResponse

-- | <i>See:</i> <a>newUntagResource</a> smart constructor.
data UntagResource
UntagResource' :: Text -> NonEmpty Text -> UntagResource

-- | Create a value of <a>UntagResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:UntagResource'</a>,
--   <a>untagResource_resourceArn</a> - The Amazon Resource Name (ARN) of
--   the resource.
--   
--   <a>$sel:tagKeys:UntagResource'</a>, <a>untagResource_tagKeys</a> -
newUntagResource :: Text -> NonEmpty Text -> UntagResource

-- | <i>See:</i> <a>newUntagResourceResponse</a> smart constructor.
data UntagResourceResponse
UntagResourceResponse' :: Int -> UntagResourceResponse

-- | Create a value of <a>UntagResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UntagResourceResponse'</a>,
--   <a>untagResourceResponse_httpStatus</a> - The response's http status
--   code.
newUntagResourceResponse :: Int -> UntagResourceResponse

-- | <i>See:</i> <a>newDescribeLoggingConfiguration</a> smart constructor.
data DescribeLoggingConfiguration
DescribeLoggingConfiguration' :: Maybe Text -> Maybe Text -> DescribeLoggingConfiguration

-- | Create a value of <a>DescribeLoggingConfiguration</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:firewallArn:DescribeLoggingConfiguration'</a>,
--   <a>describeLoggingConfiguration_firewallArn</a> - The Amazon Resource
--   Name (ARN) of the firewall.
--   
--   You must specify the ARN or the name, and you can specify both.
--   
--   <a>$sel:firewallName:DescribeLoggingConfiguration'</a>,
--   <a>describeLoggingConfiguration_firewallName</a> - The descriptive
--   name of the firewall. You can't change the name of a firewall after
--   you create it.
--   
--   You must specify the ARN or the name, and you can specify both.
newDescribeLoggingConfiguration :: DescribeLoggingConfiguration

-- | <i>See:</i> <a>newDescribeLoggingConfigurationResponse</a> smart
--   constructor.
data DescribeLoggingConfigurationResponse
DescribeLoggingConfigurationResponse' :: Maybe Text -> Maybe LoggingConfiguration -> Int -> DescribeLoggingConfigurationResponse

-- | Create a value of <a>DescribeLoggingConfigurationResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:firewallArn:DescribeLoggingConfiguration'</a>,
--   <a>describeLoggingConfigurationResponse_firewallArn</a> - The Amazon
--   Resource Name (ARN) of the firewall.
--   
--   
--   <a>$sel:loggingConfiguration:DescribeLoggingConfigurationResponse'</a>,
--   <a>describeLoggingConfigurationResponse_loggingConfiguration</a> -
--   Undocumented member.
--   
--   <a>$sel:httpStatus:DescribeLoggingConfigurationResponse'</a>,
--   <a>describeLoggingConfigurationResponse_httpStatus</a> - The
--   response's http status code.
newDescribeLoggingConfigurationResponse :: Int -> DescribeLoggingConfigurationResponse
newtype AttachmentStatus
AttachmentStatus' :: Text -> AttachmentStatus
[fromAttachmentStatus] :: AttachmentStatus -> Text
pattern AttachmentStatus_CREATING :: AttachmentStatus
pattern AttachmentStatus_DELETING :: AttachmentStatus
pattern AttachmentStatus_READY :: AttachmentStatus
pattern AttachmentStatus_SCALING :: AttachmentStatus
newtype ConfigurationSyncState
ConfigurationSyncState' :: Text -> ConfigurationSyncState
[fromConfigurationSyncState] :: ConfigurationSyncState -> Text
pattern ConfigurationSyncState_IN_SYNC :: ConfigurationSyncState
pattern ConfigurationSyncState_PENDING :: ConfigurationSyncState
newtype FirewallStatusValue
FirewallStatusValue' :: Text -> FirewallStatusValue
[fromFirewallStatusValue] :: FirewallStatusValue -> Text
pattern FirewallStatusValue_DELETING :: FirewallStatusValue
pattern FirewallStatusValue_PROVISIONING :: FirewallStatusValue
pattern FirewallStatusValue_READY :: FirewallStatusValue
newtype GeneratedRulesType
GeneratedRulesType' :: Text -> GeneratedRulesType
[fromGeneratedRulesType] :: GeneratedRulesType -> Text
pattern GeneratedRulesType_ALLOWLIST :: GeneratedRulesType
pattern GeneratedRulesType_DENYLIST :: GeneratedRulesType
newtype LogDestinationType
LogDestinationType' :: Text -> LogDestinationType
[fromLogDestinationType] :: LogDestinationType -> Text
pattern LogDestinationType_CloudWatchLogs :: LogDestinationType
pattern LogDestinationType_KinesisDataFirehose :: LogDestinationType
pattern LogDestinationType_S3 :: LogDestinationType
newtype LogType
LogType' :: Text -> LogType
[fromLogType] :: LogType -> Text
pattern LogType_ALERT :: LogType
pattern LogType_FLOW :: LogType
newtype PerObjectSyncStatus
PerObjectSyncStatus' :: Text -> PerObjectSyncStatus
[fromPerObjectSyncStatus] :: PerObjectSyncStatus -> Text
pattern PerObjectSyncStatus_IN_SYNC :: PerObjectSyncStatus
pattern PerObjectSyncStatus_PENDING :: PerObjectSyncStatus
newtype ResourceStatus
ResourceStatus' :: Text -> ResourceStatus
[fromResourceStatus] :: ResourceStatus -> Text
pattern ResourceStatus_ACTIVE :: ResourceStatus
pattern ResourceStatus_DELETING :: ResourceStatus
newtype RuleGroupType
RuleGroupType' :: Text -> RuleGroupType
[fromRuleGroupType] :: RuleGroupType -> Text
pattern RuleGroupType_STATEFUL :: RuleGroupType
pattern RuleGroupType_STATELESS :: RuleGroupType
newtype RuleOrder
RuleOrder' :: Text -> RuleOrder
[fromRuleOrder] :: RuleOrder -> Text
pattern RuleOrder_DEFAULT_ACTION_ORDER :: RuleOrder
pattern RuleOrder_STRICT_ORDER :: RuleOrder
newtype StatefulAction
StatefulAction' :: Text -> StatefulAction
[fromStatefulAction] :: StatefulAction -> Text
pattern StatefulAction_ALERT :: StatefulAction
pattern StatefulAction_DROP :: StatefulAction
pattern StatefulAction_PASS :: StatefulAction
newtype StatefulRuleDirection
StatefulRuleDirection' :: Text -> StatefulRuleDirection
[fromStatefulRuleDirection] :: StatefulRuleDirection -> Text
pattern StatefulRuleDirection_ANY :: StatefulRuleDirection
pattern StatefulRuleDirection_FORWARD :: StatefulRuleDirection
newtype StatefulRuleProtocol
StatefulRuleProtocol' :: Text -> StatefulRuleProtocol
[fromStatefulRuleProtocol] :: StatefulRuleProtocol -> Text
pattern StatefulRuleProtocol_DCERPC :: StatefulRuleProtocol
pattern StatefulRuleProtocol_DHCP :: StatefulRuleProtocol
pattern StatefulRuleProtocol_DNS :: StatefulRuleProtocol
pattern StatefulRuleProtocol_FTP :: StatefulRuleProtocol
pattern StatefulRuleProtocol_HTTP :: StatefulRuleProtocol
pattern StatefulRuleProtocol_ICMP :: StatefulRuleProtocol
pattern StatefulRuleProtocol_IKEV2 :: StatefulRuleProtocol
pattern StatefulRuleProtocol_IMAP :: StatefulRuleProtocol
pattern StatefulRuleProtocol_IP :: StatefulRuleProtocol
pattern StatefulRuleProtocol_KRB5 :: StatefulRuleProtocol
pattern StatefulRuleProtocol_MSN :: StatefulRuleProtocol
pattern StatefulRuleProtocol_NTP :: StatefulRuleProtocol
pattern StatefulRuleProtocol_SMB :: StatefulRuleProtocol
pattern StatefulRuleProtocol_SMTP :: StatefulRuleProtocol
pattern StatefulRuleProtocol_SSH :: StatefulRuleProtocol
pattern StatefulRuleProtocol_TCP :: StatefulRuleProtocol
pattern StatefulRuleProtocol_TFTP :: StatefulRuleProtocol
pattern StatefulRuleProtocol_TLS :: StatefulRuleProtocol
pattern StatefulRuleProtocol_UDP :: StatefulRuleProtocol
newtype TCPFlag
TCPFlag' :: Text -> TCPFlag
[fromTCPFlag] :: TCPFlag -> Text
pattern TCPFlag_ACK :: TCPFlag
pattern TCPFlag_CWR :: TCPFlag
pattern TCPFlag_ECE :: TCPFlag
pattern TCPFlag_FIN :: TCPFlag
pattern TCPFlag_PSH :: TCPFlag
pattern TCPFlag_RST :: TCPFlag
pattern TCPFlag_SYN :: TCPFlag
pattern TCPFlag_URG :: TCPFlag
newtype TargetType
TargetType' :: Text -> TargetType
[fromTargetType] :: TargetType -> Text
pattern TargetType_HTTP_HOST :: TargetType
pattern TargetType_TLS_SNI :: TargetType

-- | A custom action to use in stateless rule actions settings. This is
--   used in CustomAction.
--   
--   <i>See:</i> <a>newActionDefinition</a> smart constructor.
data ActionDefinition
ActionDefinition' :: Maybe PublishMetricAction -> ActionDefinition

-- | Create a value of <a>ActionDefinition</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:publishMetricAction:ActionDefinition'</a>,
--   <a>actionDefinition_publishMetricAction</a> - Stateless inspection
--   criteria that publishes the specified metrics to Amazon CloudWatch for
--   the matching packet. This setting defines a CloudWatch dimension value
--   to be published.
--   
--   You can pair this custom action with any of the standard stateless
--   rule actions. For example, you could pair this in a rule action with
--   the standard action that forwards the packet for stateful inspection.
--   Then, when a packet matches the rule, Network Firewall publishes
--   metrics for the packet and forwards it.
newActionDefinition :: ActionDefinition

-- | A single IP address specification. This is used in the MatchAttributes
--   source and destination specifications.
--   
--   <i>See:</i> <a>newAddress</a> smart constructor.
data Address
Address' :: Text -> Address

-- | Create a value of <a>Address</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:addressDefinition:Address'</a>,
--   <a>address_addressDefinition</a> - Specify an IP address or a block of
--   IP addresses in Classless Inter-Domain Routing (CIDR) notation.
--   Network Firewall supports all address ranges for IPv4.
--   
--   Examples:
--   
--   <ul>
--   <li>To configure Network Firewall to inspect for the IP address
--   192.0.2.44, specify <tt>192.0.2.44/32</tt>.</li>
--   <li>To configure Network Firewall to inspect for IP addresses from
--   192.0.2.0 to 192.0.2.255, specify <tt>192.0.2.0/24</tt>.</li>
--   </ul>
--   
--   For more information about CIDR notation, see the Wikipedia entry
--   <a>Classless Inter-Domain Routing</a>.
newAddress :: Text -> Address

-- | The configuration and status for a single subnet that you've specified
--   for use by the AWS Network Firewall firewall. This is part of the
--   FirewallStatus.
--   
--   <i>See:</i> <a>newAttachment</a> smart constructor.
data Attachment
Attachment' :: Maybe AttachmentStatus -> Maybe Text -> Maybe Text -> Attachment

-- | Create a value of <a>Attachment</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:Attachment'</a>, <a>attachment_status</a> - The current
--   status of the firewall endpoint in the subnet. This value reflects
--   both the instantiation of the endpoint in the VPC subnet and the sync
--   states that are reported in the <tt>Config</tt> settings. When this
--   value is <tt>READY</tt>, the endpoint is available and configured
--   properly to handle network traffic. When the endpoint isn't available
--   for traffic, this value will reflect its state, for example
--   <tt>CREATING</tt>, <tt>DELETING</tt>, or <tt>FAILED</tt>.
--   
--   <a>$sel:subnetId:Attachment'</a>, <a>attachment_subnetId</a> - The
--   unique identifier of the subnet that you've specified to be used for a
--   firewall endpoint.
--   
--   <a>$sel:endpointId:Attachment'</a>, <a>attachment_endpointId</a> - The
--   identifier of the firewall endpoint that Network Firewall has
--   instantiated in the subnet. You use this to identify the firewall
--   endpoint in the VPC route tables, when you redirect the VPC traffic
--   through the endpoint.
newAttachment :: Attachment

-- | An optional, non-standard action to use for stateless packet handling.
--   You can define this in addition to the standard action that you must
--   specify.
--   
--   You define and name the custom actions that you want to be able to
--   use, and then you reference them by name in your actions settings.
--   
--   You can use custom actions in the following places:
--   
--   <ul>
--   <li>In a rule group's StatelessRulesAndCustomActions specification.
--   The custom actions are available for use by name inside the
--   <tt>StatelessRulesAndCustomActions</tt> where you define them. You can
--   use them for your stateless rule actions to specify what to do with a
--   packet that matches the rule's match attributes.</li>
--   <li>In a FirewallPolicy specification, in
--   <tt>StatelessCustomActions</tt>. The custom actions are available for
--   use inside the policy where you define them. You can use them for the
--   policy's default stateless actions settings to specify what to do with
--   packets that don't match any of the policy's stateless rules.</li>
--   </ul>
--   
--   <i>See:</i> <a>newCustomAction</a> smart constructor.
data CustomAction
CustomAction' :: Text -> ActionDefinition -> CustomAction

-- | Create a value of <a>CustomAction</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:actionName:CustomAction'</a>, <a>customAction_actionName</a> -
--   The descriptive name of the custom action. You can't change the name
--   of a custom action after you create it.
--   
--   <a>$sel:actionDefinition:CustomAction'</a>,
--   <a>customAction_actionDefinition</a> - The custom action associated
--   with the action name.
newCustomAction :: Text -> ActionDefinition -> CustomAction

-- | The value to use in an Amazon CloudWatch custom metric dimension. This
--   is used in the <tt>PublishMetrics</tt> CustomAction. A CloudWatch
--   custom metric dimension is a name/value pair that's part of the
--   identity of a metric.
--   
--   AWS Network Firewall sets the dimension name to <tt>CustomAction</tt>
--   and you provide the dimension value.
--   
--   For more information about CloudWatch custom metric dimensions, see
--   <a>Publishing Custom Metrics</a> in the <a>Amazon CloudWatch User
--   Guide</a>.
--   
--   <i>See:</i> <a>newDimension</a> smart constructor.
data Dimension
Dimension' :: Text -> Dimension

-- | Create a value of <a>Dimension</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:Dimension'</a>, <a>dimension_value</a> - The value to
--   use in the custom metric dimension.
newDimension :: Text -> Dimension

-- | The firewall defines the configuration settings for an AWS Network
--   Firewall firewall. These settings include the firewall policy, the
--   subnets in your VPC to use for the firewall endpoints, and any tags
--   that are attached to the firewall AWS resource.
--   
--   The status of the firewall, for example whether it's ready to filter
--   network traffic, is provided in the corresponding FirewallStatus. You
--   can retrieve both objects by calling DescribeFirewall.
--   
--   <i>See:</i> <a>newFirewall</a> smart constructor.
data Firewall
Firewall' :: Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Text -> Maybe (NonEmpty Tag) -> Maybe Text -> Text -> Text -> [SubnetMapping] -> Text -> Firewall

-- | Create a value of <a>Firewall</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:firewallArn:Firewall'</a>, <a>firewall_firewallArn</a> - The
--   Amazon Resource Name (ARN) of the firewall.
--   
--   <a>$sel:firewallPolicyChangeProtection:Firewall'</a>,
--   <a>firewall_firewallPolicyChangeProtection</a> - A setting indicating
--   whether the firewall is protected against a change to the firewall
--   policy association. Use this setting to protect against accidentally
--   modifying the firewall policy for a firewall that is in use. When you
--   create a firewall, the operation initializes this setting to
--   <tt>TRUE</tt>.
--   
--   <a>$sel:subnetChangeProtection:Firewall'</a>,
--   <a>firewall_subnetChangeProtection</a> - A setting indicating whether
--   the firewall is protected against changes to the subnet associations.
--   Use this setting to protect against accidentally modifying the subnet
--   associations for a firewall that is in use. When you create a
--   firewall, the operation initializes this setting to <tt>TRUE</tt>.
--   
--   <a>$sel:deleteProtection:Firewall'</a>,
--   <a>firewall_deleteProtection</a> - A flag indicating whether it is
--   possible to delete the firewall. A setting of <tt>TRUE</tt> indicates
--   that the firewall is protected against deletion. Use this setting to
--   protect against accidentally deleting a firewall that is in use. When
--   you create a firewall, the operation initializes this flag to
--   <tt>TRUE</tt>.
--   
--   <a>$sel:description:Firewall'</a>, <a>firewall_description</a> - A
--   description of the firewall.
--   
--   <a>$sel:tags:Firewall'</a>, <a>firewall_tags</a> -
--   
--   <a>$sel:firewallName:Firewall'</a>, <a>firewall_firewallName</a> - The
--   descriptive name of the firewall. You can't change the name of a
--   firewall after you create it.
--   
--   <a>$sel:firewallPolicyArn:Firewall'</a>,
--   <a>firewall_firewallPolicyArn</a> - The Amazon Resource Name (ARN) of
--   the firewall policy.
--   
--   The relationship of firewall to firewall policy is many to one. Each
--   firewall requires one firewall policy association, and you can use the
--   same firewall policy for multiple firewalls.
--   
--   <a>$sel:vpcId:Firewall'</a>, <a>firewall_vpcId</a> - The unique
--   identifier of the VPC where the firewall is in use.
--   
--   <a>$sel:subnetMappings:Firewall'</a>, <a>firewall_subnetMappings</a> -
--   The public subnets that Network Firewall is using for the firewall.
--   Each subnet must belong to a different Availability Zone.
--   
--   <a>$sel:firewallId:Firewall'</a>, <a>firewall_firewallId</a> - The
--   unique identifier for the firewall.
newFirewall :: Text -> Text -> Text -> Firewall

-- | High-level information about a firewall, returned by operations like
--   create and describe. You can use the information provided in the
--   metadata to retrieve and manage a firewall.
--   
--   <i>See:</i> <a>newFirewallMetadata</a> smart constructor.
data FirewallMetadata
FirewallMetadata' :: Maybe Text -> Maybe Text -> FirewallMetadata

-- | Create a value of <a>FirewallMetadata</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:firewallArn:FirewallMetadata'</a>,
--   <a>firewallMetadata_firewallArn</a> - The Amazon Resource Name (ARN)
--   of the firewall.
--   
--   <a>$sel:firewallName:FirewallMetadata'</a>,
--   <a>firewallMetadata_firewallName</a> - The descriptive name of the
--   firewall. You can't change the name of a firewall after you create it.
newFirewallMetadata :: FirewallMetadata

-- | The firewall policy defines the behavior of a firewall using a
--   collection of stateless and stateful rule groups and other settings.
--   You can use one firewall policy for multiple firewalls.
--   
--   This, along with FirewallPolicyResponse, define the policy. You can
--   retrieve all objects for a firewall policy by calling
--   DescribeFirewallPolicy.
--   
--   <i>See:</i> <a>newFirewallPolicy</a> smart constructor.
data FirewallPolicy
FirewallPolicy' :: Maybe StatefulEngineOptions -> Maybe [StatefulRuleGroupReference] -> Maybe [StatelessRuleGroupReference] -> Maybe [CustomAction] -> Maybe [Text] -> [Text] -> [Text] -> FirewallPolicy

-- | Create a value of <a>FirewallPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:statefulEngineOptions:FirewallPolicy'</a>,
--   <a>firewallPolicy_statefulEngineOptions</a> - Additional options
--   governing how Network Firewall handles stateful rules. The stateful
--   rule groups that you use in your policy must have stateful rule
--   options settings that are compatible with these settings.
--   
--   <a>$sel:statefulRuleGroupReferences:FirewallPolicy'</a>,
--   <a>firewallPolicy_statefulRuleGroupReferences</a> - References to the
--   stateful rule groups that are used in the policy. These define the
--   inspection criteria in stateful rules.
--   
--   <a>$sel:statelessRuleGroupReferences:FirewallPolicy'</a>,
--   <a>firewallPolicy_statelessRuleGroupReferences</a> - References to the
--   stateless rule groups that are used in the policy. These define the
--   matching criteria in stateless rules.
--   
--   <a>$sel:statelessCustomActions:FirewallPolicy'</a>,
--   <a>firewallPolicy_statelessCustomActions</a> - The custom action
--   definitions that are available for use in the firewall policy's
--   <tt>StatelessDefaultActions</tt> setting. You name each custom action
--   that you define, and then you can use it by name in your default
--   actions specifications.
--   
--   <a>$sel:statefulDefaultActions:FirewallPolicy'</a>,
--   <a>firewallPolicy_statefulDefaultActions</a> - The default actions to
--   take on a packet that doesn't match any stateful rules.
--   
--   <a>$sel:statelessDefaultActions:FirewallPolicy'</a>,
--   <a>firewallPolicy_statelessDefaultActions</a> - The actions to take on
--   a packet if it doesn't match any of the stateless rules in the policy.
--   If you want non-matching packets to be forwarded for stateful
--   inspection, specify <tt>aws:forward_to_sfe</tt>.
--   
--   You must specify one of the standard actions: <tt>aws:pass</tt>,
--   <tt>aws:drop</tt>, or <tt>aws:forward_to_sfe</tt>. In addition, you
--   can specify custom actions that are compatible with your standard
--   section choice.
--   
--   For example, you could specify <tt>["aws:pass"]</tt> or you could
--   specify <tt>["aws:pass", “customActionName”]</tt>. For information
--   about compatibility, see the custom action descriptions under
--   CustomAction.
--   
--   <a>$sel:statelessFragmentDefaultActions:FirewallPolicy'</a>,
--   <a>firewallPolicy_statelessFragmentDefaultActions</a> - The actions to
--   take on a fragmented UDP packet if it doesn't match any of the
--   stateless rules in the policy. Network Firewall only manages UDP
--   packet fragments and silently drops packet fragments for other
--   protocols. If you want non-matching fragmented UDP packets to be
--   forwarded for stateful inspection, specify
--   <tt>aws:forward_to_sfe</tt>.
--   
--   You must specify one of the standard actions: <tt>aws:pass</tt>,
--   <tt>aws:drop</tt>, or <tt>aws:forward_to_sfe</tt>. In addition, you
--   can specify custom actions that are compatible with your standard
--   section choice.
--   
--   For example, you could specify <tt>["aws:pass"]</tt> or you could
--   specify <tt>["aws:pass", “customActionName”]</tt>. For information
--   about compatibility, see the custom action descriptions under
--   CustomAction.
newFirewallPolicy :: FirewallPolicy

-- | High-level information about a firewall policy, returned by operations
--   like create and describe. You can use the information provided in the
--   metadata to retrieve and manage a firewall policy. You can retrieve
--   all objects for a firewall policy by calling DescribeFirewallPolicy.
--   
--   <i>See:</i> <a>newFirewallPolicyMetadata</a> smart constructor.
data FirewallPolicyMetadata
FirewallPolicyMetadata' :: Maybe Text -> Maybe Text -> FirewallPolicyMetadata

-- | Create a value of <a>FirewallPolicyMetadata</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:arn:FirewallPolicyMetadata'</a>,
--   <a>firewallPolicyMetadata_arn</a> - The Amazon Resource Name (ARN) of
--   the firewall policy.
--   
--   <a>$sel:name:FirewallPolicyMetadata'</a>,
--   <a>firewallPolicyMetadata_name</a> - The descriptive name of the
--   firewall policy. You can't change the name of a firewall policy after
--   you create it.
newFirewallPolicyMetadata :: FirewallPolicyMetadata

-- | The high-level properties of a firewall policy. This, along with the
--   FirewallPolicy, define the policy. You can retrieve all objects for a
--   firewall policy by calling DescribeFirewallPolicy.
--   
--   <i>See:</i> <a>newFirewallPolicyResponse</a> smart constructor.
data FirewallPolicyResponse
FirewallPolicyResponse' :: Maybe Int -> Maybe Int -> Maybe ResourceStatus -> Maybe Int -> Maybe Text -> Maybe (NonEmpty Tag) -> Text -> Text -> Text -> FirewallPolicyResponse

-- | Create a value of <a>FirewallPolicyResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:consumedStatelessRuleCapacity:FirewallPolicyResponse'</a>,
--   <a>firewallPolicyResponse_consumedStatelessRuleCapacity</a> - The
--   number of capacity units currently consumed by the policy's stateless
--   rules.
--   
--   <a>$sel:numberOfAssociations:FirewallPolicyResponse'</a>,
--   <a>firewallPolicyResponse_numberOfAssociations</a> - The number of
--   firewalls that are associated with this firewall policy.
--   
--   <a>$sel:firewallPolicyStatus:FirewallPolicyResponse'</a>,
--   <a>firewallPolicyResponse_firewallPolicyStatus</a> - The current
--   status of the firewall policy. You can retrieve this for a firewall
--   policy by calling DescribeFirewallPolicy and providing the firewall
--   policy's name or ARN.
--   
--   <a>$sel:consumedStatefulRuleCapacity:FirewallPolicyResponse'</a>,
--   <a>firewallPolicyResponse_consumedStatefulRuleCapacity</a> - The
--   number of capacity units currently consumed by the policy's stateful
--   rules.
--   
--   <a>$sel:description:FirewallPolicyResponse'</a>,
--   <a>firewallPolicyResponse_description</a> - A description of the
--   firewall policy.
--   
--   <a>$sel:tags:FirewallPolicyResponse'</a>,
--   <a>firewallPolicyResponse_tags</a> - The key:value pairs to associate
--   with the resource.
--   
--   <a>$sel:firewallPolicyName:FirewallPolicyResponse'</a>,
--   <a>firewallPolicyResponse_firewallPolicyName</a> - The descriptive
--   name of the firewall policy. You can't change the name of a firewall
--   policy after you create it.
--   
--   <a>$sel:firewallPolicyArn:FirewallPolicyResponse'</a>,
--   <a>firewallPolicyResponse_firewallPolicyArn</a> - The Amazon Resource
--   Name (ARN) of the firewall policy.
--   
--   If this response is for a create request that had <tt>DryRun</tt> set
--   to <tt>TRUE</tt>, then this ARN is a placeholder that isn't attached
--   to a valid resource.
--   
--   <a>$sel:firewallPolicyId:FirewallPolicyResponse'</a>,
--   <a>firewallPolicyResponse_firewallPolicyId</a> - The unique identifier
--   for the firewall policy.
newFirewallPolicyResponse :: Text -> Text -> Text -> FirewallPolicyResponse

-- | Detailed information about the current status of a Firewall. You can
--   retrieve this for a firewall by calling DescribeFirewall and providing
--   the firewall name and ARN.
--   
--   <i>See:</i> <a>newFirewallStatus</a> smart constructor.
data FirewallStatus
FirewallStatus' :: Maybe (HashMap Text SyncState) -> FirewallStatusValue -> ConfigurationSyncState -> FirewallStatus

-- | Create a value of <a>FirewallStatus</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:syncStates:FirewallStatus'</a>,
--   <a>firewallStatus_syncStates</a> - The subnets that you've configured
--   for use by the Network Firewall firewall. This contains one array
--   element per Availability Zone where you've configured a subnet. These
--   objects provide details of the information that is summarized in the
--   <tt>ConfigurationSyncStateSummary</tt> and <tt>Status</tt>, broken
--   down by zone and configuration object.
--   
--   <a>$sel:status:FirewallStatus'</a>, <a>firewallStatus_status</a> - The
--   readiness of the configured firewall to handle network traffic across
--   all of the Availability Zones where you've configured it. This setting
--   is <tt>READY</tt> only when the <tt>ConfigurationSyncStateSummary</tt>
--   value is <tt>IN_SYNC</tt> and the <tt>Attachment</tt> <tt>Status</tt>
--   values for all of the configured subnets are <tt>READY</tt>.
--   
--   <a>$sel:configurationSyncStateSummary:FirewallStatus'</a>,
--   <a>firewallStatus_configurationSyncStateSummary</a> - The
--   configuration sync state for the firewall. This summarizes the sync
--   states reported in the <tt>Config</tt> settings for all of the
--   Availability Zones where you have configured the firewall.
--   
--   When you create a firewall or update its configuration, for example by
--   adding a rule group to its firewall policy, Network Firewall
--   distributes the configuration changes to all zones where the firewall
--   is in use. This summary indicates whether the configuration changes
--   have been applied everywhere.
--   
--   This status must be <tt>IN_SYNC</tt> for the firewall to be ready for
--   use, but it doesn't indicate that the firewall is ready. The
--   <tt>Status</tt> setting indicates firewall readiness.
newFirewallStatus :: FirewallStatusValue -> ConfigurationSyncState -> FirewallStatus

-- | The basic rule criteria for AWS Network Firewall to use to inspect
--   packet headers in stateful traffic flow inspection. Traffic flows that
--   match the criteria are a match for the corresponding StatefulRule.
--   
--   <i>See:</i> <a>newHeader</a> smart constructor.
data Header
Header' :: StatefulRuleProtocol -> Text -> Text -> StatefulRuleDirection -> Text -> Text -> Header

-- | Create a value of <a>Header</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:protocol:Header'</a>, <a>header_protocol</a> - The protocol to
--   inspect for. To specify all, you can use <tt>IP</tt>, because all
--   traffic on AWS and on the internet is IP.
--   
--   <a>$sel:source:Header'</a>, <a>header_source</a> - The source IP
--   address or address range to inspect for, in CIDR notation. To match
--   with any address, specify <tt>ANY</tt>.
--   
--   Specify an IP address or a block of IP addresses in Classless
--   Inter-Domain Routing (CIDR) notation. Network Firewall supports all
--   address ranges for IPv4.
--   
--   Examples:
--   
--   <ul>
--   <li>To configure Network Firewall to inspect for the IP address
--   192.0.2.44, specify <tt>192.0.2.44/32</tt>.</li>
--   <li>To configure Network Firewall to inspect for IP addresses from
--   192.0.2.0 to 192.0.2.255, specify <tt>192.0.2.0/24</tt>.</li>
--   </ul>
--   
--   For more information about CIDR notation, see the Wikipedia entry
--   <a>Classless Inter-Domain Routing</a>.
--   
--   <a>$sel:sourcePort:Header'</a>, <a>header_sourcePort</a> - The source
--   port to inspect for. You can specify an individual port, for example
--   <tt>1994</tt> and you can specify a port range, for example
--   <tt>1990:1994</tt>. To match with any port, specify <tt>ANY</tt>.
--   
--   <a>$sel:direction:Header'</a>, <a>header_direction</a> - The direction
--   of traffic flow to inspect. If set to <tt>ANY</tt>, the inspection
--   matches bidirectional traffic, both from the source to the destination
--   and from the destination to the source. If set to <tt>FORWARD</tt>,
--   the inspection only matches traffic going from the source to the
--   destination.
--   
--   <a>$sel:destination:Header'</a>, <a>header_destination</a> - The
--   destination IP address or address range to inspect for, in CIDR
--   notation. To match with any address, specify <tt>ANY</tt>.
--   
--   Specify an IP address or a block of IP addresses in Classless
--   Inter-Domain Routing (CIDR) notation. Network Firewall supports all
--   address ranges for IPv4.
--   
--   Examples:
--   
--   <ul>
--   <li>To configure Network Firewall to inspect for the IP address
--   192.0.2.44, specify <tt>192.0.2.44/32</tt>.</li>
--   <li>To configure Network Firewall to inspect for IP addresses from
--   192.0.2.0 to 192.0.2.255, specify <tt>192.0.2.0/24</tt>.</li>
--   </ul>
--   
--   For more information about CIDR notation, see the Wikipedia entry
--   <a>Classless Inter-Domain Routing</a>.
--   
--   <a>$sel:destinationPort:Header'</a>, <a>header_destinationPort</a> -
--   The destination port to inspect for. You can specify an individual
--   port, for example <tt>1994</tt> and you can specify a port range, for
--   example <tt>1990:1994</tt>. To match with any port, specify
--   <tt>ANY</tt>.
newHeader :: StatefulRuleProtocol -> Text -> Text -> StatefulRuleDirection -> Text -> Text -> Header

-- | A list of IP addresses and address ranges, in CIDR notation. This is
--   part of a RuleVariables.
--   
--   <i>See:</i> <a>newIPSet</a> smart constructor.
data IPSet
IPSet' :: [Text] -> IPSet

-- | Create a value of <a>IPSet</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:definition:IPSet'</a>, <a>iPSet_definition</a> - The list of
--   IP addresses and address ranges, in CIDR notation.
newIPSet :: IPSet

-- | Defines where AWS Network Firewall sends logs for the firewall for one
--   log type. This is used in LoggingConfiguration. You can send each type
--   of log to an Amazon S3 bucket, a CloudWatch log group, or a Kinesis
--   Data Firehose delivery stream.
--   
--   Network Firewall generates logs for stateful rule groups. You can save
--   alert and flow log types. The stateful rules engine records flow logs
--   for all network traffic that it receives. It records alert logs for
--   traffic that matches stateful rules that have the rule action set to
--   <tt>DROP</tt> or <tt>ALERT</tt>.
--   
--   <i>See:</i> <a>newLogDestinationConfig</a> smart constructor.
data LogDestinationConfig
LogDestinationConfig' :: LogType -> LogDestinationType -> HashMap Text Text -> LogDestinationConfig

-- | Create a value of <a>LogDestinationConfig</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:logType:LogDestinationConfig'</a>,
--   <a>logDestinationConfig_logType</a> - The type of log to send. Alert
--   logs report traffic that matches a StatefulRule with an action setting
--   that sends an alert log message. Flow logs are standard network
--   traffic flow logs.
--   
--   <a>$sel:logDestinationType:LogDestinationConfig'</a>,
--   <a>logDestinationConfig_logDestinationType</a> - The type of storage
--   destination to send these logs to. You can send logs to an Amazon S3
--   bucket, a CloudWatch log group, or a Kinesis Data Firehose delivery
--   stream.
--   
--   <a>$sel:logDestination:LogDestinationConfig'</a>,
--   <a>logDestinationConfig_logDestination</a> - The named location for
--   the logs, provided in a key:value mapping that is specific to the
--   chosen destination type.
--   
--   <ul>
--   <li>For an Amazon S3 bucket, provide the name of the bucket, with key
--   <tt>bucketName</tt>, and optionally provide a prefix, with key
--   <tt>prefix</tt>. The following example specifies an Amazon S3 bucket
--   named <tt>DOC-EXAMPLE-BUCKET</tt> and the prefix
--   <tt>alerts</tt>:<pre>"LogDestination": { "bucketName":
--   "DOC-EXAMPLE-BUCKET", "prefix": "alerts" }</pre></li>
--   <li>For a CloudWatch log group, provide the name of the CloudWatch log
--   group, with key <tt>logGroup</tt>. The following example specifies a
--   log group named <tt>alert-log-group</tt>:<pre>"LogDestination": {
--   "logGroup": "alert-log-group" }</pre></li>
--   <li>For a Kinesis Data Firehose delivery stream, provide the name of
--   the delivery stream, with key <tt>deliveryStream</tt>. The following
--   example specifies a delivery stream named
--   <tt>alert-delivery-stream</tt>:<pre>"LogDestination": {
--   "deliveryStream": "alert-delivery-stream" }</pre></li>
--   </ul>
newLogDestinationConfig :: LogType -> LogDestinationType -> LogDestinationConfig

-- | Defines how AWS Network Firewall performs logging for a Firewall.
--   
--   <i>See:</i> <a>newLoggingConfiguration</a> smart constructor.
data LoggingConfiguration
LoggingConfiguration' :: [LogDestinationConfig] -> LoggingConfiguration

-- | Create a value of <a>LoggingConfiguration</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:logDestinationConfigs:LoggingConfiguration'</a>,
--   <a>loggingConfiguration_logDestinationConfigs</a> - Defines the
--   logging destinations for the logs for a firewall. Network Firewall
--   generates logs for stateful rule groups.
newLoggingConfiguration :: LoggingConfiguration

-- | Criteria for Network Firewall to use to inspect an individual packet
--   in stateless rule inspection. Each match attributes set can include
--   one or more items such as IP address, CIDR range, port number,
--   protocol, and TCP flags.
--   
--   <i>See:</i> <a>newMatchAttributes</a> smart constructor.
data MatchAttributes
MatchAttributes' :: Maybe [Natural] -> Maybe [TCPFlagField] -> Maybe [PortRange] -> Maybe [Address] -> Maybe [PortRange] -> Maybe [Address] -> MatchAttributes

-- | Create a value of <a>MatchAttributes</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:protocols:MatchAttributes'</a>,
--   <a>matchAttributes_protocols</a> - The protocols to inspect for,
--   specified using each protocol's assigned internet protocol number
--   (IANA). If not specified, this matches with any protocol.
--   
--   <a>$sel:tCPFlags:MatchAttributes'</a>, <a>matchAttributes_tCPFlags</a>
--   - The TCP flags and masks to inspect for. If not specified, this
--   matches with any settings. This setting is only used for protocol 6
--   (TCP).
--   
--   <a>$sel:destinationPorts:MatchAttributes'</a>,
--   <a>matchAttributes_destinationPorts</a> - The destination ports to
--   inspect for. If not specified, this matches with any destination port.
--   This setting is only used for protocols 6 (TCP) and 17 (UDP).
--   
--   You can specify individual ports, for example <tt>1994</tt> and you
--   can specify port ranges, for example <tt>1990:1994</tt>.
--   
--   <a>$sel:sources:MatchAttributes'</a>, <a>matchAttributes_sources</a> -
--   The source IP addresses and address ranges to inspect for, in CIDR
--   notation. If not specified, this matches with any source address.
--   
--   <a>$sel:sourcePorts:MatchAttributes'</a>,
--   <a>matchAttributes_sourcePorts</a> - The source ports to inspect for.
--   If not specified, this matches with any source port. This setting is
--   only used for protocols 6 (TCP) and 17 (UDP).
--   
--   You can specify individual ports, for example <tt>1994</tt> and you
--   can specify port ranges, for example <tt>1990:1994</tt>.
--   
--   <a>$sel:destinations:MatchAttributes'</a>,
--   <a>matchAttributes_destinations</a> - The destination IP addresses and
--   address ranges to inspect for, in CIDR notation. If not specified,
--   this matches with any destination address.
newMatchAttributes :: MatchAttributes

-- | Provides configuration status for a single policy or rule group that
--   is used for a firewall endpoint. Network Firewall provides each
--   endpoint with the rules that are configured in the firewall policy.
--   Each time you add a subnet or modify the associated firewall policy,
--   Network Firewall synchronizes the rules in the endpoint, so it can
--   properly filter network traffic. This is part of a SyncState for a
--   firewall.
--   
--   <i>See:</i> <a>newPerObjectStatus</a> smart constructor.
data PerObjectStatus
PerObjectStatus' :: Maybe Text -> Maybe PerObjectSyncStatus -> PerObjectStatus

-- | Create a value of <a>PerObjectStatus</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:updateToken:PerObjectStatus'</a>,
--   <a>perObjectStatus_updateToken</a> - The current version of the object
--   that is either in sync or pending synchronization.
--   
--   <a>$sel:syncStatus:PerObjectStatus'</a>,
--   <a>perObjectStatus_syncStatus</a> - Indicates whether this object is
--   in sync with the version indicated in the update token.
newPerObjectStatus :: PerObjectStatus

-- | A single port range specification. This is used for source and
--   destination port ranges in the stateless rule MatchAttributes,
--   <tt>SourcePorts</tt>, and <tt>DestinationPorts</tt> settings.
--   
--   <i>See:</i> <a>newPortRange</a> smart constructor.
data PortRange
PortRange' :: Natural -> Natural -> PortRange

-- | Create a value of <a>PortRange</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:fromPort:PortRange'</a>, <a>portRange_fromPort</a> - The lower
--   limit of the port range. This must be less than or equal to the
--   <tt>ToPort</tt> specification.
--   
--   <a>$sel:toPort:PortRange'</a>, <a>portRange_toPort</a> - The upper
--   limit of the port range. This must be greater than or equal to the
--   <tt>FromPort</tt> specification.
newPortRange :: Natural -> Natural -> PortRange

-- | A set of port ranges for use in the rules in a rule group.
--   
--   <i>See:</i> <a>newPortSet</a> smart constructor.
data PortSet
PortSet' :: Maybe [Text] -> PortSet

-- | Create a value of <a>PortSet</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:definition:PortSet'</a>, <a>portSet_definition</a> - The set
--   of port ranges.
newPortSet :: PortSet

-- | Stateless inspection criteria that publishes the specified metrics to
--   Amazon CloudWatch for the matching packet. This setting defines a
--   CloudWatch dimension value to be published.
--   
--   <i>See:</i> <a>newPublishMetricAction</a> smart constructor.
data PublishMetricAction
PublishMetricAction' :: NonEmpty Dimension -> PublishMetricAction

-- | Create a value of <a>PublishMetricAction</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dimensions:PublishMetricAction'</a>,
--   <a>publishMetricAction_dimensions</a> -
newPublishMetricAction :: NonEmpty Dimension -> PublishMetricAction

-- | The inspection criteria and action for a single stateless rule. AWS
--   Network Firewall inspects each packet for the specified matching
--   criteria. When a packet matches the criteria, Network Firewall
--   performs the rule's actions on the packet.
--   
--   <i>See:</i> <a>newRuleDefinition</a> smart constructor.
data RuleDefinition
RuleDefinition' :: MatchAttributes -> [Text] -> RuleDefinition

-- | Create a value of <a>RuleDefinition</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:matchAttributes:RuleDefinition'</a>,
--   <a>ruleDefinition_matchAttributes</a> - Criteria for Network Firewall
--   to use to inspect an individual packet in stateless rule inspection.
--   Each match attributes set can include one or more items such as IP
--   address, CIDR range, port number, protocol, and TCP flags.
--   
--   <a>$sel:actions:RuleDefinition'</a>, <a>ruleDefinition_actions</a> -
--   The actions to take on a packet that matches one of the stateless rule
--   definition's match attributes. You must specify a standard action and
--   you can add custom actions.
--   
--   Network Firewall only forwards a packet for stateful rule inspection
--   if you specify <tt>aws:forward_to_sfe</tt> for a rule that the packet
--   matches, or if the packet doesn't match any stateless rule and you
--   specify <tt>aws:forward_to_sfe</tt> for the
--   <tt>StatelessDefaultActions</tt> setting for the FirewallPolicy.
--   
--   For every rule, you must specify exactly one of the following standard
--   actions.
--   
--   <ul>
--   <li><b>aws:pass</b> - Discontinues all inspection of the packet and
--   permits it to go to its intended destination.</li>
--   <li><b>aws:drop</b> - Discontinues all inspection of the packet and
--   blocks it from going to its intended destination.</li>
--   <li><b>aws:forward_to_sfe</b> - Discontinues stateless inspection of
--   the packet and forwards it to the stateful rule engine for
--   inspection.</li>
--   </ul>
--   
--   Additionally, you can specify a custom action. To do this, you define
--   a custom action by name and type, then provide the name you've
--   assigned to the action in this <tt>Actions</tt> setting. For
--   information about the options, see CustomAction.
--   
--   To provide more than one action in this setting, separate the settings
--   with a comma. For example, if you have a custom
--   <tt>PublishMetrics</tt> action that you've named
--   <tt>MyMetricsAction</tt>, then you could specify the standard action
--   <tt>aws:pass</tt> and the custom action with <tt>[“aws:pass”,
--   “MyMetricsAction”]</tt>.
newRuleDefinition :: MatchAttributes -> RuleDefinition

-- | The object that defines the rules in a rule group. This, along with
--   RuleGroupResponse, define the rule group. You can retrieve all objects
--   for a rule group by calling DescribeRuleGroup.
--   
--   AWS Network Firewall uses a rule group to inspect and control network
--   traffic. You define stateless rule groups to inspect individual
--   packets and you define stateful rule groups to inspect packets in the
--   context of their traffic flow.
--   
--   To use a rule group, you include it by reference in an Network
--   Firewall firewall policy, then you use the policy in a firewall. You
--   can reference a rule group from more than one firewall policy, and you
--   can use a firewall policy in more than one firewall.
--   
--   <i>See:</i> <a>newRuleGroup</a> smart constructor.
data RuleGroup
RuleGroup' :: Maybe StatefulRuleOptions -> Maybe RuleVariables -> RulesSource -> RuleGroup

-- | Create a value of <a>RuleGroup</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:statefulRuleOptions:RuleGroup'</a>,
--   <a>ruleGroup_statefulRuleOptions</a> - Additional options governing
--   how Network Firewall handles stateful rules. The policies where you
--   use your stateful rule group must have stateful rule options settings
--   that are compatible with these settings.
--   
--   <a>$sel:ruleVariables:RuleGroup'</a>, <a>ruleGroup_ruleVariables</a> -
--   Settings that are available for use in the rules in the rule group.
--   You can only use these for stateful rule groups.
--   
--   <a>$sel:rulesSource:RuleGroup'</a>, <a>ruleGroup_rulesSource</a> - The
--   stateful rules or stateless rules for the rule group.
newRuleGroup :: RulesSource -> RuleGroup

-- | High-level information about a rule group, returned by ListRuleGroups.
--   You can use the information provided in the metadata to retrieve and
--   manage a rule group.
--   
--   <i>See:</i> <a>newRuleGroupMetadata</a> smart constructor.
data RuleGroupMetadata
RuleGroupMetadata' :: Maybe Text -> Maybe Text -> RuleGroupMetadata

-- | Create a value of <a>RuleGroupMetadata</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:arn:RuleGroupMetadata'</a>, <a>ruleGroupMetadata_arn</a> - The
--   Amazon Resource Name (ARN) of the rule group.
--   
--   <a>$sel:name:RuleGroupMetadata'</a>, <a>ruleGroupMetadata_name</a> -
--   The descriptive name of the rule group. You can't change the name of a
--   rule group after you create it.
newRuleGroupMetadata :: RuleGroupMetadata

-- | The high-level properties of a rule group. This, along with the
--   RuleGroup, define the rule group. You can retrieve all objects for a
--   rule group by calling DescribeRuleGroup.
--   
--   <i>See:</i> <a>newRuleGroupResponse</a> smart constructor.
data RuleGroupResponse
RuleGroupResponse' :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe ResourceStatus -> Maybe RuleGroupType -> Maybe Text -> Maybe (NonEmpty Tag) -> Text -> Text -> Text -> RuleGroupResponse

-- | Create a value of <a>RuleGroupResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:numberOfAssociations:RuleGroupResponse'</a>,
--   <a>ruleGroupResponse_numberOfAssociations</a> - The number of firewall
--   policies that use this rule group.
--   
--   <a>$sel:capacity:RuleGroupResponse'</a>,
--   <a>ruleGroupResponse_capacity</a> - The maximum operating resources
--   that this rule group can use. Rule group capacity is fixed at
--   creation. When you update a rule group, you are limited to this
--   capacity. When you reference a rule group from a firewall policy,
--   Network Firewall reserves this capacity for the rule group.
--   
--   You can retrieve the capacity that would be required for a rule group
--   before you create the rule group by calling CreateRuleGroup with
--   <tt>DryRun</tt> set to <tt>TRUE</tt>.
--   
--   <a>$sel:consumedCapacity:RuleGroupResponse'</a>,
--   <a>ruleGroupResponse_consumedCapacity</a> - The number of capacity
--   units currently consumed by the rule group rules.
--   
--   <a>$sel:ruleGroupStatus:RuleGroupResponse'</a>,
--   <a>ruleGroupResponse_ruleGroupStatus</a> - Detailed information about
--   the current status of a rule group.
--   
--   <a>$sel:type':RuleGroupResponse'</a>, <a>ruleGroupResponse_type</a> -
--   Indicates whether the rule group is stateless or stateful. If the rule
--   group is stateless, it contains stateless rules. If it is stateful, it
--   contains stateful rules.
--   
--   <a>$sel:description:RuleGroupResponse'</a>,
--   <a>ruleGroupResponse_description</a> - A description of the rule
--   group.
--   
--   <a>$sel:tags:RuleGroupResponse'</a>, <a>ruleGroupResponse_tags</a> -
--   The key:value pairs to associate with the resource.
--   
--   <a>$sel:ruleGroupArn:RuleGroupResponse'</a>,
--   <a>ruleGroupResponse_ruleGroupArn</a> - The Amazon Resource Name (ARN)
--   of the rule group.
--   
--   If this response is for a create request that had <tt>DryRun</tt> set
--   to <tt>TRUE</tt>, then this ARN is a placeholder that isn't attached
--   to a valid resource.
--   
--   <a>$sel:ruleGroupName:RuleGroupResponse'</a>,
--   <a>ruleGroupResponse_ruleGroupName</a> - The descriptive name of the
--   rule group. You can't change the name of a rule group after you create
--   it.
--   
--   <a>$sel:ruleGroupId:RuleGroupResponse'</a>,
--   <a>ruleGroupResponse_ruleGroupId</a> - The unique identifier for the
--   rule group.
newRuleGroupResponse :: Text -> Text -> Text -> RuleGroupResponse

-- | Additional settings for a stateful rule. This is part of the
--   StatefulRule configuration.
--   
--   <i>See:</i> <a>newRuleOption</a> smart constructor.
data RuleOption
RuleOption' :: Maybe [Text] -> Text -> RuleOption

-- | Create a value of <a>RuleOption</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:settings:RuleOption'</a>, <a>ruleOption_settings</a> -
--   
--   <a>$sel:keyword:RuleOption'</a>, <a>ruleOption_keyword</a> -
newRuleOption :: Text -> RuleOption

-- | Settings that are available for use in the rules in the RuleGroup
--   where this is defined.
--   
--   <i>See:</i> <a>newRuleVariables</a> smart constructor.
data RuleVariables
RuleVariables' :: Maybe (HashMap Text PortSet) -> Maybe (HashMap Text IPSet) -> RuleVariables

-- | Create a value of <a>RuleVariables</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:portSets:RuleVariables'</a>, <a>ruleVariables_portSets</a> - A
--   list of port ranges.
--   
--   <a>$sel:iPSets:RuleVariables'</a>, <a>ruleVariables_iPSets</a> - A
--   list of IP addresses and address ranges, in CIDR notation.
newRuleVariables :: RuleVariables

-- | The stateless or stateful rules definitions for use in a single rule
--   group. Each rule group requires a single <tt>RulesSource</tt>. You can
--   use an instance of this for either stateless rules or stateful rules.
--   
--   <i>See:</i> <a>newRulesSource</a> smart constructor.
data RulesSource
RulesSource' :: Maybe Text -> Maybe RulesSourceList -> Maybe [StatefulRule] -> Maybe StatelessRulesAndCustomActions -> RulesSource

-- | Create a value of <a>RulesSource</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rulesString:RulesSource'</a>, <a>rulesSource_rulesString</a> -
--   Stateful inspection criteria, provided in Suricata compatible
--   intrusion prevention system (IPS) rules. Suricata is an open-source
--   network IPS that includes a standard rule-based language for network
--   traffic inspection.
--   
--   These rules contain the inspection criteria and the action to take for
--   traffic that matches the criteria, so this type of rule group doesn't
--   have a separate action setting.
--   
--   <a>$sel:rulesSourceList:RulesSource'</a>,
--   <a>rulesSource_rulesSourceList</a> - Stateful inspection criteria for
--   a domain list rule group.
--   
--   <a>$sel:statefulRules:RulesSource'</a>,
--   <a>rulesSource_statefulRules</a> - An array of individual stateful
--   rules inspection criteria to be used together in a stateful rule
--   group. Use this option to specify simple Suricata rules with protocol,
--   source and destination, ports, direction, and rule options. For
--   information about the Suricata <tt>Rules</tt> format, see <a>Rules
--   Format</a>.
--   
--   <a>$sel:statelessRulesAndCustomActions:RulesSource'</a>,
--   <a>rulesSource_statelessRulesAndCustomActions</a> - Stateless
--   inspection criteria to be used in a stateless rule group.
newRulesSource :: RulesSource

-- | Stateful inspection criteria for a domain list rule group.
--   
--   For HTTPS traffic, domain filtering is SNI-based. It uses the server
--   name indicator extension of the TLS handshake.
--   
--   By default, Network Firewall domain list inspection only includes
--   traffic coming from the VPC where you deploy the firewall. To inspect
--   traffic from IP addresses outside of the deployment VPC, you set the
--   <tt>HOME_NET</tt> rule variable to include the CIDR range of the
--   deployment VPC plus the other CIDR ranges. For more information, see
--   RuleVariables in this guide and <a>Stateful domain list rule groups in
--   AWS Network Firewall</a> in the <i>Network Firewall Developer
--   Guide</i>.
--   
--   <i>See:</i> <a>newRulesSourceList</a> smart constructor.
data RulesSourceList
RulesSourceList' :: [Text] -> [TargetType] -> GeneratedRulesType -> RulesSourceList

-- | Create a value of <a>RulesSourceList</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:targets:RulesSourceList'</a>, <a>rulesSourceList_targets</a> -
--   The domains that you want to inspect for in your traffic flows. To
--   provide multiple domains, separate them with commas. Valid domain
--   specifications are the following:
--   
--   <ul>
--   <li>Explicit names. For example, <tt>abc.example.com</tt> matches only
--   the domain <tt>abc.example.com</tt>.</li>
--   <li>Names that use a domain wildcard, which you indicate with an
--   initial '<tt>.</tt>'. For example,<tt>.example.com</tt> matches
--   <tt>example.com</tt> and matches all subdomains of
--   <tt>example.com</tt>, such as <tt>abc.example.com</tt> and
--   <tt>www.example.com</tt>.</li>
--   </ul>
--   
--   <a>$sel:targetTypes:RulesSourceList'</a>,
--   <a>rulesSourceList_targetTypes</a> - The protocols you want to
--   inspect. Specify <tt>TLS_SNI</tt> for <tt>HTTPS</tt>. Specify
--   <tt>HTTP_HOST</tt> for <tt>HTTP</tt>. You can specify either or both.
--   
--   <a>$sel:generatedRulesType:RulesSourceList'</a>,
--   <a>rulesSourceList_generatedRulesType</a> - Whether you want to allow
--   or deny access to the domains in your target list.
newRulesSourceList :: GeneratedRulesType -> RulesSourceList

-- | Configuration settings for the handling of the stateful rule groups in
--   a firewall policy.
--   
--   <i>See:</i> <a>newStatefulEngineOptions</a> smart constructor.
data StatefulEngineOptions
StatefulEngineOptions' :: Maybe RuleOrder -> StatefulEngineOptions

-- | Create a value of <a>StatefulEngineOptions</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:ruleOrder:StatefulEngineOptions'</a>,
--   <a>statefulEngineOptions_ruleOrder</a> - Indicates how to manage the
--   order of stateful rule evaluation for the policy. By default, Network
--   Firewall leaves the rule evaluation order up to the Suricata rule
--   processing engine. If you set this to <tt>STRICT_ORDER</tt>, your
--   rules are evaluated in the exact order that you provide them in the
--   policy. With strict ordering, the rule groups are evaluated by order
--   of priority, starting from the lowest number, and the rules in each
--   rule group are processed in the order that they're defined.
newStatefulEngineOptions :: StatefulEngineOptions

-- | A single Suricata rules specification, for use in a stateful rule
--   group. Use this option to specify a simple Suricata rule with
--   protocol, source and destination, ports, direction, and rule options.
--   For information about the Suricata <tt>Rules</tt> format, see <a>Rules
--   Format</a>.
--   
--   <i>See:</i> <a>newStatefulRule</a> smart constructor.
data StatefulRule
StatefulRule' :: StatefulAction -> Header -> [RuleOption] -> StatefulRule

-- | Create a value of <a>StatefulRule</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:action:StatefulRule'</a>, <a>statefulRule_action</a> - Defines
--   what Network Firewall should do with the packets in a traffic flow
--   when the flow matches the stateful rule criteria. For all actions,
--   Network Firewall performs the specified action and discontinues
--   stateful inspection of the traffic flow.
--   
--   The actions for a stateful rule are defined as follows:
--   
--   <ul>
--   <li><b>PASS</b> - Permits the packets to go to the intended
--   destination.</li>
--   <li><b>DROP</b> - Blocks the packets from going to the intended
--   destination and sends an alert log message, if alert logging is
--   configured in the Firewall LoggingConfiguration.</li>
--   <li><b>ALERT</b> - Permits the packets to go to the intended
--   destination and sends an alert log message, if alert logging is
--   configured in the Firewall LoggingConfiguration.You can use this
--   action to test a rule that you intend to use to drop traffic. You can
--   enable the rule with <tt>ALERT</tt> action, verify in the logs that
--   the rule is filtering as you want, then change the action to
--   <tt>DROP</tt>.</li>
--   </ul>
--   
--   <a>$sel:header:StatefulRule'</a>, <a>statefulRule_header</a> - The
--   stateful inspection criteria for this rule, used to inspect traffic
--   flows.
--   
--   <a>$sel:ruleOptions:StatefulRule'</a>, <a>statefulRule_ruleOptions</a>
--   - Additional options for the rule. These are the Suricata
--   <tt>RuleOptions</tt> settings.
newStatefulRule :: StatefulAction -> Header -> StatefulRule

-- | Identifier for a single stateful rule group, used in a firewall policy
--   to refer to a rule group.
--   
--   <i>See:</i> <a>newStatefulRuleGroupReference</a> smart constructor.
data StatefulRuleGroupReference
StatefulRuleGroupReference' :: Maybe Natural -> Text -> StatefulRuleGroupReference

-- | Create a value of <a>StatefulRuleGroupReference</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:priority:StatefulRuleGroupReference'</a>,
--   <a>statefulRuleGroupReference_priority</a> - An integer setting that
--   indicates the order in which to run the stateful rule groups in a
--   single FirewallPolicy. This setting only applies to firewall policies
--   that specify the <tt>STRICT_ORDER</tt> rule order in the stateful
--   engine options settings.
--   
--   Network Firewall evalutes each stateful rule group against a packet
--   starting with the group that has the lowest priority setting. You must
--   ensure that the priority settings are unique within each policy.
--   
--   You can change the priority settings of your rule groups at any time.
--   To make it easier to insert rule groups later, number them so there's
--   a wide range in between, for example use 100, 200, and so on.
--   
--   <a>$sel:resourceArn:StatefulRuleGroupReference'</a>,
--   <a>statefulRuleGroupReference_resourceArn</a> - The Amazon Resource
--   Name (ARN) of the stateful rule group.
newStatefulRuleGroupReference :: Text -> StatefulRuleGroupReference

-- | Additional options governing how Network Firewall handles the rule
--   group. You can only use these for stateful rule groups.
--   
--   <i>See:</i> <a>newStatefulRuleOptions</a> smart constructor.
data StatefulRuleOptions
StatefulRuleOptions' :: Maybe RuleOrder -> StatefulRuleOptions

-- | Create a value of <a>StatefulRuleOptions</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:ruleOrder:StatefulRuleOptions'</a>,
--   <a>statefulRuleOptions_ruleOrder</a> - Indicates how to manage the
--   order of the rule evaluation for the rule group. By default, Network
--   Firewall leaves the rule evaluation order up to the Suricata rule
--   processing engine. If you set this to <tt>STRICT_ORDER</tt>, your
--   rules are evaluated in the exact order that they're listed in your
--   Suricata rules string.
newStatefulRuleOptions :: StatefulRuleOptions

-- | A single stateless rule. This is used in
--   StatelessRulesAndCustomActions.
--   
--   <i>See:</i> <a>newStatelessRule</a> smart constructor.
data StatelessRule
StatelessRule' :: RuleDefinition -> Natural -> StatelessRule

-- | Create a value of <a>StatelessRule</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:ruleDefinition:StatelessRule'</a>,
--   <a>statelessRule_ruleDefinition</a> - Defines the stateless 5-tuple
--   packet inspection criteria and the action to take on a packet that
--   matches the criteria.
--   
--   <a>$sel:priority:StatelessRule'</a>, <a>statelessRule_priority</a> -
--   Indicates the order in which to run this rule relative to all of the
--   rules that are defined for a stateless rule group. Network Firewall
--   evaluates the rules in a rule group starting with the lowest priority
--   setting. You must ensure that the priority settings are unique for the
--   rule group.
--   
--   Each stateless rule group uses exactly one
--   <tt>StatelessRulesAndCustomActions</tt> object, and each
--   <tt>StatelessRulesAndCustomActions</tt> contains exactly one
--   <tt>StatelessRules</tt> object. To ensure unique priority settings for
--   your rule groups, set unique priorities for the stateless rules that
--   you define inside any single <tt>StatelessRules</tt> object.
--   
--   You can change the priority settings of your rules at any time. To
--   make it easier to insert rules later, number them so there's a wide
--   range in between, for example use 100, 200, and so on.
newStatelessRule :: RuleDefinition -> Natural -> StatelessRule

-- | Identifier for a single stateless rule group, used in a firewall
--   policy to refer to the rule group.
--   
--   <i>See:</i> <a>newStatelessRuleGroupReference</a> smart constructor.
data StatelessRuleGroupReference
StatelessRuleGroupReference' :: Text -> Natural -> StatelessRuleGroupReference

-- | Create a value of <a>StatelessRuleGroupReference</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:StatelessRuleGroupReference'</a>,
--   <a>statelessRuleGroupReference_resourceArn</a> - The Amazon Resource
--   Name (ARN) of the stateless rule group.
--   
--   <a>$sel:priority:StatelessRuleGroupReference'</a>,
--   <a>statelessRuleGroupReference_priority</a> - An integer setting that
--   indicates the order in which to run the stateless rule groups in a
--   single FirewallPolicy. Network Firewall applies each stateless rule
--   group to a packet starting with the group that has the lowest priority
--   setting. You must ensure that the priority settings are unique within
--   each policy.
newStatelessRuleGroupReference :: Text -> Natural -> StatelessRuleGroupReference

-- | Stateless inspection criteria. Each stateless rule group uses exactly
--   one of these data types to define its stateless rules.
--   
--   <i>See:</i> <a>newStatelessRulesAndCustomActions</a> smart
--   constructor.
data StatelessRulesAndCustomActions
StatelessRulesAndCustomActions' :: Maybe [CustomAction] -> [StatelessRule] -> StatelessRulesAndCustomActions

-- | Create a value of <a>StatelessRulesAndCustomActions</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:customActions:StatelessRulesAndCustomActions'</a>,
--   <a>statelessRulesAndCustomActions_customActions</a> - Defines an array
--   of individual custom action definitions that are available for use by
--   the stateless rules in this <tt>StatelessRulesAndCustomActions</tt>
--   specification. You name each custom action that you define, and then
--   you can use it by name in your StatelessRule RuleDefinition
--   <tt>Actions</tt> specification.
--   
--   <a>$sel:statelessRules:StatelessRulesAndCustomActions'</a>,
--   <a>statelessRulesAndCustomActions_statelessRules</a> - Defines the set
--   of stateless rules for use in a stateless rule group.
newStatelessRulesAndCustomActions :: StatelessRulesAndCustomActions

-- | The ID for a subnet that you want to associate with the firewall. This
--   is used with CreateFirewall and AssociateSubnets. AWS Network Firewall
--   creates an instance of the associated firewall in each subnet that you
--   specify, to filter traffic in the subnet's Availability Zone.
--   
--   <i>See:</i> <a>newSubnetMapping</a> smart constructor.
data SubnetMapping
SubnetMapping' :: Text -> SubnetMapping

-- | Create a value of <a>SubnetMapping</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:subnetId:SubnetMapping'</a>, <a>subnetMapping_subnetId</a> -
--   The unique identifier for the subnet.
newSubnetMapping :: Text -> SubnetMapping

-- | The status of the firewall endpoint and firewall policy configuration
--   for a single VPC subnet.
--   
--   For each VPC subnet that you associate with a firewall, AWS Network
--   Firewall does the following:
--   
--   <ul>
--   <li>Instantiates a firewall endpoint in the subnet, ready to take
--   traffic.</li>
--   <li>Configures the endpoint with the current firewall policy settings,
--   to provide the filtering behavior for the endpoint.</li>
--   </ul>
--   
--   When you update a firewall, for example to add a subnet association or
--   change a rule group in the firewall policy, the affected sync states
--   reflect out-of-sync or not ready status until the changes are
--   complete.
--   
--   <i>See:</i> <a>newSyncState</a> smart constructor.
data SyncState
SyncState' :: Maybe (HashMap Text PerObjectStatus) -> Maybe Attachment -> SyncState

-- | Create a value of <a>SyncState</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:config:SyncState'</a>, <a>syncState_config</a> - The
--   configuration status of the firewall endpoint in a single VPC subnet.
--   Network Firewall provides each endpoint with the rules that are
--   configured in the firewall policy. Each time you add a subnet or
--   modify the associated firewall policy, Network Firewall synchronizes
--   the rules in the endpoint, so it can properly filter network traffic.
--   This is part of the FirewallStatus.
--   
--   <a>$sel:attachment:SyncState'</a>, <a>syncState_attachment</a> - The
--   attachment status of the firewall's association with a single VPC
--   subnet. For each configured subnet, Network Firewall creates the
--   attachment by instantiating the firewall endpoint in the subnet so
--   that it's ready to take traffic. This is part of the FirewallStatus.
newSyncState :: SyncState

-- | TCP flags and masks to inspect packets for, used in stateless rules
--   MatchAttributes settings.
--   
--   <i>See:</i> <a>newTCPFlagField</a> smart constructor.
data TCPFlagField
TCPFlagField' :: Maybe [TCPFlag] -> [TCPFlag] -> TCPFlagField

-- | Create a value of <a>TCPFlagField</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:masks:TCPFlagField'</a>, <a>tCPFlagField_masks</a> - The set
--   of flags to consider in the inspection. To inspect all flags in the
--   valid values list, leave this with no setting.
--   
--   <a>$sel:flags:TCPFlagField'</a>, <a>tCPFlagField_flags</a> - Used in
--   conjunction with the <tt>Masks</tt> setting to define the flags that
--   must be set and flags that must not be set in order for the packet to
--   match. This setting can only specify values that are also specified in
--   the <tt>Masks</tt> setting.
--   
--   For the flags that are specified in the masks setting, the following
--   must be true for the packet to match:
--   
--   <ul>
--   <li>The ones that are set in this flags setting must be set in the
--   packet.</li>
--   <li>The ones that are not set in this flags setting must also not be
--   set in the packet.</li>
--   </ul>
newTCPFlagField :: TCPFlagField

-- | A key:value pair associated with an AWS resource. The key:value pair
--   can be anything you define. Typically, the tag key represents a
--   category (such as "environment") and the tag value represents a
--   specific value within that category (such as "test," "development," or
--   "production"). You can add up to 50 tags to each AWS resource.
--   
--   <i>See:</i> <a>newTag</a> smart constructor.
data Tag
Tag' :: Text -> Text -> Tag

-- | Create a value of <a>Tag</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:key:Tag'</a>, <a>tag_key</a> - The part of the key:value pair
--   that defines a tag. You can use a tag key to describe a category of
--   information, such as "customer." Tag keys are case-sensitive.
--   
--   <a>$sel:value:Tag'</a>, <a>tag_value</a> - The part of the key:value
--   pair that defines a tag. You can use a tag value to describe a
--   specific value within a category, such as "companyA" or "companyB."
--   Tag values are case-sensitive.
newTag :: Text -> Text -> Tag
