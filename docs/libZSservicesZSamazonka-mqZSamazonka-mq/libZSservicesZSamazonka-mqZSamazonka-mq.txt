-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/

@package libZSservicesZSamazonka-mqZSamazonka-mq
@version 2.0


module Amazonka.MQ.Types.AuthenticationStrategy

-- | Optional. The authentication strategy used to secure the broker. The
--   default is SIMPLE.
newtype AuthenticationStrategy
AuthenticationStrategy' :: Text -> AuthenticationStrategy
[fromAuthenticationStrategy] :: AuthenticationStrategy -> Text
pattern AuthenticationStrategy_LDAP :: AuthenticationStrategy
pattern AuthenticationStrategy_SIMPLE :: AuthenticationStrategy
instance Amazonka.Data.XML.ToXML Amazonka.MQ.Types.AuthenticationStrategy.AuthenticationStrategy
instance Amazonka.Data.XML.FromXML Amazonka.MQ.Types.AuthenticationStrategy.AuthenticationStrategy
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.MQ.Types.AuthenticationStrategy.AuthenticationStrategy
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MQ.Types.AuthenticationStrategy.AuthenticationStrategy
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.MQ.Types.AuthenticationStrategy.AuthenticationStrategy
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.MQ.Types.AuthenticationStrategy.AuthenticationStrategy
instance Amazonka.Data.Query.ToQuery Amazonka.MQ.Types.AuthenticationStrategy.AuthenticationStrategy
instance Amazonka.Data.Headers.ToHeader Amazonka.MQ.Types.AuthenticationStrategy.AuthenticationStrategy
instance Amazonka.Data.Log.ToLog Amazonka.MQ.Types.AuthenticationStrategy.AuthenticationStrategy
instance Amazonka.Data.ByteString.ToByteString Amazonka.MQ.Types.AuthenticationStrategy.AuthenticationStrategy
instance Amazonka.Data.Text.ToText Amazonka.MQ.Types.AuthenticationStrategy.AuthenticationStrategy
instance Amazonka.Data.Text.FromText Amazonka.MQ.Types.AuthenticationStrategy.AuthenticationStrategy
instance Control.DeepSeq.NFData Amazonka.MQ.Types.AuthenticationStrategy.AuthenticationStrategy
instance Data.Hashable.Class.Hashable Amazonka.MQ.Types.AuthenticationStrategy.AuthenticationStrategy
instance GHC.Generics.Generic Amazonka.MQ.Types.AuthenticationStrategy.AuthenticationStrategy
instance GHC.Classes.Ord Amazonka.MQ.Types.AuthenticationStrategy.AuthenticationStrategy
instance GHC.Classes.Eq Amazonka.MQ.Types.AuthenticationStrategy.AuthenticationStrategy
instance GHC.Read.Read Amazonka.MQ.Types.AuthenticationStrategy.AuthenticationStrategy
instance GHC.Show.Show Amazonka.MQ.Types.AuthenticationStrategy.AuthenticationStrategy


module Amazonka.MQ.Types.AvailabilityZone

-- | Name of the availability zone.
--   
--   <i>See:</i> <a>newAvailabilityZone</a> smart constructor.
data AvailabilityZone
AvailabilityZone' :: Maybe Text -> AvailabilityZone

-- | Id for the availability zone.
[$sel:name:AvailabilityZone'] :: AvailabilityZone -> Maybe Text

-- | Create a value of <a>AvailabilityZone</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:name:AvailabilityZone'</a>, <a>availabilityZone_name</a> - Id
--   for the availability zone.
newAvailabilityZone :: AvailabilityZone

-- | Id for the availability zone.
availabilityZone_name :: Lens' AvailabilityZone (Maybe Text)
instance GHC.Generics.Generic Amazonka.MQ.Types.AvailabilityZone.AvailabilityZone
instance GHC.Show.Show Amazonka.MQ.Types.AvailabilityZone.AvailabilityZone
instance GHC.Read.Read Amazonka.MQ.Types.AvailabilityZone.AvailabilityZone
instance GHC.Classes.Eq Amazonka.MQ.Types.AvailabilityZone.AvailabilityZone
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.MQ.Types.AvailabilityZone.AvailabilityZone
instance Data.Hashable.Class.Hashable Amazonka.MQ.Types.AvailabilityZone.AvailabilityZone
instance Control.DeepSeq.NFData Amazonka.MQ.Types.AvailabilityZone.AvailabilityZone


module Amazonka.MQ.Types.BrokerInstance

-- | Returns information about all brokers.
--   
--   <i>See:</i> <a>newBrokerInstance</a> smart constructor.
data BrokerInstance
BrokerInstance' :: Maybe Text -> Maybe Text -> Maybe [Text] -> BrokerInstance

-- | The IP address of the Elastic Network Interface (ENI) attached to the
--   broker. Does not apply to RabbitMQ brokers.
[$sel:ipAddress:BrokerInstance'] :: BrokerInstance -> Maybe Text

-- | The brokers web console URL.
[$sel:consoleURL:BrokerInstance'] :: BrokerInstance -> Maybe Text

-- | The broker's wire-level protocol endpoints.
[$sel:endpoints:BrokerInstance'] :: BrokerInstance -> Maybe [Text]

-- | Create a value of <a>BrokerInstance</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:ipAddress:BrokerInstance'</a>, <a>brokerInstance_ipAddress</a>
--   - The IP address of the Elastic Network Interface (ENI) attached to
--   the broker. Does not apply to RabbitMQ brokers.
--   
--   <a>$sel:consoleURL:BrokerInstance'</a>,
--   <a>brokerInstance_consoleURL</a> - The brokers web console URL.
--   
--   <a>$sel:endpoints:BrokerInstance'</a>, <a>brokerInstance_endpoints</a>
--   - The broker's wire-level protocol endpoints.
newBrokerInstance :: BrokerInstance

-- | The IP address of the Elastic Network Interface (ENI) attached to the
--   broker. Does not apply to RabbitMQ brokers.
brokerInstance_ipAddress :: Lens' BrokerInstance (Maybe Text)

-- | The brokers web console URL.
brokerInstance_consoleURL :: Lens' BrokerInstance (Maybe Text)

-- | The broker's wire-level protocol endpoints.
brokerInstance_endpoints :: Lens' BrokerInstance (Maybe [Text])
instance GHC.Generics.Generic Amazonka.MQ.Types.BrokerInstance.BrokerInstance
instance GHC.Show.Show Amazonka.MQ.Types.BrokerInstance.BrokerInstance
instance GHC.Read.Read Amazonka.MQ.Types.BrokerInstance.BrokerInstance
instance GHC.Classes.Eq Amazonka.MQ.Types.BrokerInstance.BrokerInstance
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.MQ.Types.BrokerInstance.BrokerInstance
instance Data.Hashable.Class.Hashable Amazonka.MQ.Types.BrokerInstance.BrokerInstance
instance Control.DeepSeq.NFData Amazonka.MQ.Types.BrokerInstance.BrokerInstance


module Amazonka.MQ.Types.BrokerState

-- | The broker's status.
newtype BrokerState
BrokerState' :: Text -> BrokerState
[fromBrokerState] :: BrokerState -> Text
pattern BrokerState_CREATION_FAILED :: BrokerState
pattern BrokerState_CREATION_IN_PROGRESS :: BrokerState
pattern BrokerState_DELETION_IN_PROGRESS :: BrokerState
pattern BrokerState_REBOOT_IN_PROGRESS :: BrokerState
pattern BrokerState_RUNNING :: BrokerState
instance Amazonka.Data.XML.ToXML Amazonka.MQ.Types.BrokerState.BrokerState
instance Amazonka.Data.XML.FromXML Amazonka.MQ.Types.BrokerState.BrokerState
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.MQ.Types.BrokerState.BrokerState
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MQ.Types.BrokerState.BrokerState
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.MQ.Types.BrokerState.BrokerState
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.MQ.Types.BrokerState.BrokerState
instance Amazonka.Data.Query.ToQuery Amazonka.MQ.Types.BrokerState.BrokerState
instance Amazonka.Data.Headers.ToHeader Amazonka.MQ.Types.BrokerState.BrokerState
instance Amazonka.Data.Log.ToLog Amazonka.MQ.Types.BrokerState.BrokerState
instance Amazonka.Data.ByteString.ToByteString Amazonka.MQ.Types.BrokerState.BrokerState
instance Amazonka.Data.Text.ToText Amazonka.MQ.Types.BrokerState.BrokerState
instance Amazonka.Data.Text.FromText Amazonka.MQ.Types.BrokerState.BrokerState
instance Control.DeepSeq.NFData Amazonka.MQ.Types.BrokerState.BrokerState
instance Data.Hashable.Class.Hashable Amazonka.MQ.Types.BrokerState.BrokerState
instance GHC.Generics.Generic Amazonka.MQ.Types.BrokerState.BrokerState
instance GHC.Classes.Ord Amazonka.MQ.Types.BrokerState.BrokerState
instance GHC.Classes.Eq Amazonka.MQ.Types.BrokerState.BrokerState
instance GHC.Read.Read Amazonka.MQ.Types.BrokerState.BrokerState
instance GHC.Show.Show Amazonka.MQ.Types.BrokerState.BrokerState


module Amazonka.MQ.Types.BrokerStorageType

-- | The broker's storage type.
--   
--   EFS is not supported for RabbitMQ engine type.
newtype BrokerStorageType
BrokerStorageType' :: Text -> BrokerStorageType
[fromBrokerStorageType] :: BrokerStorageType -> Text
pattern BrokerStorageType_EBS :: BrokerStorageType
pattern BrokerStorageType_EFS :: BrokerStorageType
instance Amazonka.Data.XML.ToXML Amazonka.MQ.Types.BrokerStorageType.BrokerStorageType
instance Amazonka.Data.XML.FromXML Amazonka.MQ.Types.BrokerStorageType.BrokerStorageType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.MQ.Types.BrokerStorageType.BrokerStorageType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MQ.Types.BrokerStorageType.BrokerStorageType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.MQ.Types.BrokerStorageType.BrokerStorageType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.MQ.Types.BrokerStorageType.BrokerStorageType
instance Amazonka.Data.Query.ToQuery Amazonka.MQ.Types.BrokerStorageType.BrokerStorageType
instance Amazonka.Data.Headers.ToHeader Amazonka.MQ.Types.BrokerStorageType.BrokerStorageType
instance Amazonka.Data.Log.ToLog Amazonka.MQ.Types.BrokerStorageType.BrokerStorageType
instance Amazonka.Data.ByteString.ToByteString Amazonka.MQ.Types.BrokerStorageType.BrokerStorageType
instance Amazonka.Data.Text.ToText Amazonka.MQ.Types.BrokerStorageType.BrokerStorageType
instance Amazonka.Data.Text.FromText Amazonka.MQ.Types.BrokerStorageType.BrokerStorageType
instance Control.DeepSeq.NFData Amazonka.MQ.Types.BrokerStorageType.BrokerStorageType
instance Data.Hashable.Class.Hashable Amazonka.MQ.Types.BrokerStorageType.BrokerStorageType
instance GHC.Generics.Generic Amazonka.MQ.Types.BrokerStorageType.BrokerStorageType
instance GHC.Classes.Ord Amazonka.MQ.Types.BrokerStorageType.BrokerStorageType
instance GHC.Classes.Eq Amazonka.MQ.Types.BrokerStorageType.BrokerStorageType
instance GHC.Read.Read Amazonka.MQ.Types.BrokerStorageType.BrokerStorageType
instance GHC.Show.Show Amazonka.MQ.Types.BrokerStorageType.BrokerStorageType


module Amazonka.MQ.Types.ChangeType

-- | The type of change pending for the ActiveMQ user.
newtype ChangeType
ChangeType' :: Text -> ChangeType
[fromChangeType] :: ChangeType -> Text
pattern ChangeType_CREATE :: ChangeType
pattern ChangeType_DELETE :: ChangeType
pattern ChangeType_UPDATE :: ChangeType
instance Amazonka.Data.XML.ToXML Amazonka.MQ.Types.ChangeType.ChangeType
instance Amazonka.Data.XML.FromXML Amazonka.MQ.Types.ChangeType.ChangeType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.MQ.Types.ChangeType.ChangeType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MQ.Types.ChangeType.ChangeType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.MQ.Types.ChangeType.ChangeType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.MQ.Types.ChangeType.ChangeType
instance Amazonka.Data.Query.ToQuery Amazonka.MQ.Types.ChangeType.ChangeType
instance Amazonka.Data.Headers.ToHeader Amazonka.MQ.Types.ChangeType.ChangeType
instance Amazonka.Data.Log.ToLog Amazonka.MQ.Types.ChangeType.ChangeType
instance Amazonka.Data.ByteString.ToByteString Amazonka.MQ.Types.ChangeType.ChangeType
instance Amazonka.Data.Text.ToText Amazonka.MQ.Types.ChangeType.ChangeType
instance Amazonka.Data.Text.FromText Amazonka.MQ.Types.ChangeType.ChangeType
instance Control.DeepSeq.NFData Amazonka.MQ.Types.ChangeType.ChangeType
instance Data.Hashable.Class.Hashable Amazonka.MQ.Types.ChangeType.ChangeType
instance GHC.Generics.Generic Amazonka.MQ.Types.ChangeType.ChangeType
instance GHC.Classes.Ord Amazonka.MQ.Types.ChangeType.ChangeType
instance GHC.Classes.Eq Amazonka.MQ.Types.ChangeType.ChangeType
instance GHC.Read.Read Amazonka.MQ.Types.ChangeType.ChangeType
instance GHC.Show.Show Amazonka.MQ.Types.ChangeType.ChangeType


module Amazonka.MQ.Types.ConfigurationId

-- | A list of information about the configuration.
--   
--   Does not apply to RabbitMQ brokers.
--   
--   <i>See:</i> <a>newConfigurationId</a> smart constructor.
data ConfigurationId
ConfigurationId' :: Maybe Int -> Text -> ConfigurationId

-- | The revision number of the configuration.
[$sel:revision:ConfigurationId'] :: ConfigurationId -> Maybe Int

-- | Required. The unique ID that Amazon MQ generates for the
--   configuration.
[$sel:id:ConfigurationId'] :: ConfigurationId -> Text

-- | Create a value of <a>ConfigurationId</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:revision:ConfigurationId'</a>, <a>configurationId_revision</a>
--   - The revision number of the configuration.
--   
--   <a>$sel:id:ConfigurationId'</a>, <a>configurationId_id</a> - Required.
--   The unique ID that Amazon MQ generates for the configuration.
newConfigurationId :: Text -> ConfigurationId

-- | The revision number of the configuration.
configurationId_revision :: Lens' ConfigurationId (Maybe Int)

-- | Required. The unique ID that Amazon MQ generates for the
--   configuration.
configurationId_id :: Lens' ConfigurationId Text
instance GHC.Generics.Generic Amazonka.MQ.Types.ConfigurationId.ConfigurationId
instance GHC.Show.Show Amazonka.MQ.Types.ConfigurationId.ConfigurationId
instance GHC.Read.Read Amazonka.MQ.Types.ConfigurationId.ConfigurationId
instance GHC.Classes.Eq Amazonka.MQ.Types.ConfigurationId.ConfigurationId
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.MQ.Types.ConfigurationId.ConfigurationId
instance Data.Hashable.Class.Hashable Amazonka.MQ.Types.ConfigurationId.ConfigurationId
instance Control.DeepSeq.NFData Amazonka.MQ.Types.ConfigurationId.ConfigurationId
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MQ.Types.ConfigurationId.ConfigurationId


module Amazonka.MQ.Types.ConfigurationRevision

-- | Returns information about the specified configuration revision.
--   
--   <i>See:</i> <a>newConfigurationRevision</a> smart constructor.
data ConfigurationRevision
ConfigurationRevision' :: Maybe Text -> Int -> POSIX -> ConfigurationRevision

-- | The description of the configuration revision.
[$sel:description:ConfigurationRevision'] :: ConfigurationRevision -> Maybe Text

-- | Required. The revision number of the configuration.
[$sel:revision:ConfigurationRevision'] :: ConfigurationRevision -> Int

-- | Required. The date and time of the configuration revision.
[$sel:created:ConfigurationRevision'] :: ConfigurationRevision -> POSIX

-- | Create a value of <a>ConfigurationRevision</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:description:ConfigurationRevision'</a>,
--   <a>configurationRevision_description</a> - The description of the
--   configuration revision.
--   
--   <a>$sel:revision:ConfigurationRevision'</a>,
--   <a>configurationRevision_revision</a> - Required. The revision number
--   of the configuration.
--   
--   <a>$sel:created:ConfigurationRevision'</a>,
--   <a>configurationRevision_created</a> - Required. The date and time of
--   the configuration revision.
newConfigurationRevision :: Int -> UTCTime -> ConfigurationRevision

-- | The description of the configuration revision.
configurationRevision_description :: Lens' ConfigurationRevision (Maybe Text)

-- | Required. The revision number of the configuration.
configurationRevision_revision :: Lens' ConfigurationRevision Int

-- | Required. The date and time of the configuration revision.
configurationRevision_created :: Lens' ConfigurationRevision UTCTime
instance GHC.Generics.Generic Amazonka.MQ.Types.ConfigurationRevision.ConfigurationRevision
instance GHC.Show.Show Amazonka.MQ.Types.ConfigurationRevision.ConfigurationRevision
instance GHC.Read.Read Amazonka.MQ.Types.ConfigurationRevision.ConfigurationRevision
instance GHC.Classes.Eq Amazonka.MQ.Types.ConfigurationRevision.ConfigurationRevision
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.MQ.Types.ConfigurationRevision.ConfigurationRevision
instance Data.Hashable.Class.Hashable Amazonka.MQ.Types.ConfigurationRevision.ConfigurationRevision
instance Control.DeepSeq.NFData Amazonka.MQ.Types.ConfigurationRevision.ConfigurationRevision


module Amazonka.MQ.Types.Configurations

-- | Broker configuration information
--   
--   <i>See:</i> <a>newConfigurations</a> smart constructor.
data Configurations
Configurations' :: Maybe ConfigurationId -> Maybe [ConfigurationId] -> Maybe ConfigurationId -> Configurations

-- | The broker's pending configuration.
[$sel:pending:Configurations'] :: Configurations -> Maybe ConfigurationId

-- | The history of configurations applied to the broker.
[$sel:history:Configurations'] :: Configurations -> Maybe [ConfigurationId]

-- | The broker's current configuration.
[$sel:current:Configurations'] :: Configurations -> Maybe ConfigurationId

-- | Create a value of <a>Configurations</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:pending:Configurations'</a>, <a>configurations_pending</a> -
--   The broker's pending configuration.
--   
--   <a>$sel:history:Configurations'</a>, <a>configurations_history</a> -
--   The history of configurations applied to the broker.
--   
--   <a>$sel:current:Configurations'</a>, <a>configurations_current</a> -
--   The broker's current configuration.
newConfigurations :: Configurations

-- | The broker's pending configuration.
configurations_pending :: Lens' Configurations (Maybe ConfigurationId)

-- | The history of configurations applied to the broker.
configurations_history :: Lens' Configurations (Maybe [ConfigurationId])

-- | The broker's current configuration.
configurations_current :: Lens' Configurations (Maybe ConfigurationId)
instance GHC.Generics.Generic Amazonka.MQ.Types.Configurations.Configurations
instance GHC.Show.Show Amazonka.MQ.Types.Configurations.Configurations
instance GHC.Read.Read Amazonka.MQ.Types.Configurations.Configurations
instance GHC.Classes.Eq Amazonka.MQ.Types.Configurations.Configurations
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.MQ.Types.Configurations.Configurations
instance Data.Hashable.Class.Hashable Amazonka.MQ.Types.Configurations.Configurations
instance Control.DeepSeq.NFData Amazonka.MQ.Types.Configurations.Configurations


module Amazonka.MQ.Types.DayOfWeek
newtype DayOfWeek
DayOfWeek' :: Text -> DayOfWeek
[fromDayOfWeek] :: DayOfWeek -> Text
pattern DayOfWeek_FRIDAY :: DayOfWeek
pattern DayOfWeek_MONDAY :: DayOfWeek
pattern DayOfWeek_SATURDAY :: DayOfWeek
pattern DayOfWeek_SUNDAY :: DayOfWeek
pattern DayOfWeek_THURSDAY :: DayOfWeek
pattern DayOfWeek_TUESDAY :: DayOfWeek
pattern DayOfWeek_WEDNESDAY :: DayOfWeek
instance Amazonka.Data.XML.ToXML Amazonka.MQ.Types.DayOfWeek.DayOfWeek
instance Amazonka.Data.XML.FromXML Amazonka.MQ.Types.DayOfWeek.DayOfWeek
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.MQ.Types.DayOfWeek.DayOfWeek
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MQ.Types.DayOfWeek.DayOfWeek
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.MQ.Types.DayOfWeek.DayOfWeek
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.MQ.Types.DayOfWeek.DayOfWeek
instance Amazonka.Data.Query.ToQuery Amazonka.MQ.Types.DayOfWeek.DayOfWeek
instance Amazonka.Data.Headers.ToHeader Amazonka.MQ.Types.DayOfWeek.DayOfWeek
instance Amazonka.Data.Log.ToLog Amazonka.MQ.Types.DayOfWeek.DayOfWeek
instance Amazonka.Data.ByteString.ToByteString Amazonka.MQ.Types.DayOfWeek.DayOfWeek
instance Amazonka.Data.Text.ToText Amazonka.MQ.Types.DayOfWeek.DayOfWeek
instance Amazonka.Data.Text.FromText Amazonka.MQ.Types.DayOfWeek.DayOfWeek
instance Control.DeepSeq.NFData Amazonka.MQ.Types.DayOfWeek.DayOfWeek
instance Data.Hashable.Class.Hashable Amazonka.MQ.Types.DayOfWeek.DayOfWeek
instance GHC.Generics.Generic Amazonka.MQ.Types.DayOfWeek.DayOfWeek
instance GHC.Classes.Ord Amazonka.MQ.Types.DayOfWeek.DayOfWeek
instance GHC.Classes.Eq Amazonka.MQ.Types.DayOfWeek.DayOfWeek
instance GHC.Read.Read Amazonka.MQ.Types.DayOfWeek.DayOfWeek
instance GHC.Show.Show Amazonka.MQ.Types.DayOfWeek.DayOfWeek


module Amazonka.MQ.Types.DeploymentMode

-- | The broker's deployment mode.
newtype DeploymentMode
DeploymentMode' :: Text -> DeploymentMode
[fromDeploymentMode] :: DeploymentMode -> Text
pattern DeploymentMode_ACTIVE_STANDBY_MULTI_AZ :: DeploymentMode
pattern DeploymentMode_CLUSTER_MULTI_AZ :: DeploymentMode
pattern DeploymentMode_SINGLE_INSTANCE :: DeploymentMode
instance Amazonka.Data.XML.ToXML Amazonka.MQ.Types.DeploymentMode.DeploymentMode
instance Amazonka.Data.XML.FromXML Amazonka.MQ.Types.DeploymentMode.DeploymentMode
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.MQ.Types.DeploymentMode.DeploymentMode
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MQ.Types.DeploymentMode.DeploymentMode
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.MQ.Types.DeploymentMode.DeploymentMode
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.MQ.Types.DeploymentMode.DeploymentMode
instance Amazonka.Data.Query.ToQuery Amazonka.MQ.Types.DeploymentMode.DeploymentMode
instance Amazonka.Data.Headers.ToHeader Amazonka.MQ.Types.DeploymentMode.DeploymentMode
instance Amazonka.Data.Log.ToLog Amazonka.MQ.Types.DeploymentMode.DeploymentMode
instance Amazonka.Data.ByteString.ToByteString Amazonka.MQ.Types.DeploymentMode.DeploymentMode
instance Amazonka.Data.Text.ToText Amazonka.MQ.Types.DeploymentMode.DeploymentMode
instance Amazonka.Data.Text.FromText Amazonka.MQ.Types.DeploymentMode.DeploymentMode
instance Control.DeepSeq.NFData Amazonka.MQ.Types.DeploymentMode.DeploymentMode
instance Data.Hashable.Class.Hashable Amazonka.MQ.Types.DeploymentMode.DeploymentMode
instance GHC.Generics.Generic Amazonka.MQ.Types.DeploymentMode.DeploymentMode
instance GHC.Classes.Ord Amazonka.MQ.Types.DeploymentMode.DeploymentMode
instance GHC.Classes.Eq Amazonka.MQ.Types.DeploymentMode.DeploymentMode
instance GHC.Read.Read Amazonka.MQ.Types.DeploymentMode.DeploymentMode
instance GHC.Show.Show Amazonka.MQ.Types.DeploymentMode.DeploymentMode


module Amazonka.MQ.Types.EncryptionOptions

-- | Does not apply to RabbitMQ brokers.
--   
--   Encryption options for the broker.
--   
--   <i>See:</i> <a>newEncryptionOptions</a> smart constructor.
data EncryptionOptions
EncryptionOptions' :: Maybe Text -> Bool -> EncryptionOptions

-- | The customer master key (CMK) to use for the AWS Key Management
--   Service (KMS). This key is used to encrypt your data at rest. If not
--   provided, Amazon MQ will use a default CMK to encrypt your data.
[$sel:kmsKeyId:EncryptionOptions'] :: EncryptionOptions -> Maybe Text

-- | Enables the use of an AWS owned CMK using AWS Key Management Service
--   (KMS). Set to true by default, if no value is provided, for example,
--   for RabbitMQ brokers.
[$sel:useAwsOwnedKey:EncryptionOptions'] :: EncryptionOptions -> Bool

-- | Create a value of <a>EncryptionOptions</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:kmsKeyId:EncryptionOptions'</a>,
--   <a>encryptionOptions_kmsKeyId</a> - The customer master key (CMK) to
--   use for the AWS Key Management Service (KMS). This key is used to
--   encrypt your data at rest. If not provided, Amazon MQ will use a
--   default CMK to encrypt your data.
--   
--   <a>$sel:useAwsOwnedKey:EncryptionOptions'</a>,
--   <a>encryptionOptions_useAwsOwnedKey</a> - Enables the use of an AWS
--   owned CMK using AWS Key Management Service (KMS). Set to true by
--   default, if no value is provided, for example, for RabbitMQ brokers.
newEncryptionOptions :: Bool -> EncryptionOptions

-- | The customer master key (CMK) to use for the AWS Key Management
--   Service (KMS). This key is used to encrypt your data at rest. If not
--   provided, Amazon MQ will use a default CMK to encrypt your data.
encryptionOptions_kmsKeyId :: Lens' EncryptionOptions (Maybe Text)

-- | Enables the use of an AWS owned CMK using AWS Key Management Service
--   (KMS). Set to true by default, if no value is provided, for example,
--   for RabbitMQ brokers.
encryptionOptions_useAwsOwnedKey :: Lens' EncryptionOptions Bool
instance GHC.Generics.Generic Amazonka.MQ.Types.EncryptionOptions.EncryptionOptions
instance GHC.Show.Show Amazonka.MQ.Types.EncryptionOptions.EncryptionOptions
instance GHC.Read.Read Amazonka.MQ.Types.EncryptionOptions.EncryptionOptions
instance GHC.Classes.Eq Amazonka.MQ.Types.EncryptionOptions.EncryptionOptions
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.MQ.Types.EncryptionOptions.EncryptionOptions
instance Data.Hashable.Class.Hashable Amazonka.MQ.Types.EncryptionOptions.EncryptionOptions
instance Control.DeepSeq.NFData Amazonka.MQ.Types.EncryptionOptions.EncryptionOptions
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MQ.Types.EncryptionOptions.EncryptionOptions


module Amazonka.MQ.Types.EngineType

-- | The type of broker engine. Amazon MQ supports ActiveMQ and RabbitMQ.
newtype EngineType
EngineType' :: Text -> EngineType
[fromEngineType] :: EngineType -> Text
pattern EngineType_ACTIVEMQ :: EngineType
pattern EngineType_RABBITMQ :: EngineType
instance Amazonka.Data.XML.ToXML Amazonka.MQ.Types.EngineType.EngineType
instance Amazonka.Data.XML.FromXML Amazonka.MQ.Types.EngineType.EngineType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.MQ.Types.EngineType.EngineType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MQ.Types.EngineType.EngineType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.MQ.Types.EngineType.EngineType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.MQ.Types.EngineType.EngineType
instance Amazonka.Data.Query.ToQuery Amazonka.MQ.Types.EngineType.EngineType
instance Amazonka.Data.Headers.ToHeader Amazonka.MQ.Types.EngineType.EngineType
instance Amazonka.Data.Log.ToLog Amazonka.MQ.Types.EngineType.EngineType
instance Amazonka.Data.ByteString.ToByteString Amazonka.MQ.Types.EngineType.EngineType
instance Amazonka.Data.Text.ToText Amazonka.MQ.Types.EngineType.EngineType
instance Amazonka.Data.Text.FromText Amazonka.MQ.Types.EngineType.EngineType
instance Control.DeepSeq.NFData Amazonka.MQ.Types.EngineType.EngineType
instance Data.Hashable.Class.Hashable Amazonka.MQ.Types.EngineType.EngineType
instance GHC.Generics.Generic Amazonka.MQ.Types.EngineType.EngineType
instance GHC.Classes.Ord Amazonka.MQ.Types.EngineType.EngineType
instance GHC.Classes.Eq Amazonka.MQ.Types.EngineType.EngineType
instance GHC.Read.Read Amazonka.MQ.Types.EngineType.EngineType
instance GHC.Show.Show Amazonka.MQ.Types.EngineType.EngineType


module Amazonka.MQ.Types.Configuration

-- | Returns information about all configurations.
--   
--   <i>See:</i> <a>newConfiguration</a> smart constructor.
data Configuration
Configuration' :: Maybe (HashMap Text Text) -> Text -> Text -> ConfigurationRevision -> AuthenticationStrategy -> EngineType -> Text -> Text -> Text -> POSIX -> Configuration

-- | The list of all tags associated with this configuration.
[$sel:tags:Configuration'] :: Configuration -> Maybe (HashMap Text Text)

-- | Required. The description of the configuration.
[$sel:description:Configuration'] :: Configuration -> Text

-- | Required. The broker engine's version. For a list of supported engine
--   versions, see, <a>Supported engines</a>.
[$sel:engineVersion:Configuration'] :: Configuration -> Text

-- | Required. The latest revision of the configuration.
[$sel:latestRevision:Configuration'] :: Configuration -> ConfigurationRevision

-- | Optional. The authentication strategy associated with the
--   configuration. The default is SIMPLE.
[$sel:authenticationStrategy:Configuration'] :: Configuration -> AuthenticationStrategy

-- | Required. The type of broker engine. Currently, Amazon MQ supports
--   ACTIVEMQ and RABBITMQ.
[$sel:engineType:Configuration'] :: Configuration -> EngineType

-- | Required. The unique ID that Amazon MQ generates for the
--   configuration.
[$sel:id:Configuration'] :: Configuration -> Text

-- | Required. The ARN of the configuration.
[$sel:arn:Configuration'] :: Configuration -> Text

-- | Required. The name of the configuration. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 1-150 characters long.
[$sel:name:Configuration'] :: Configuration -> Text

-- | Required. The date and time of the configuration revision.
[$sel:created:Configuration'] :: Configuration -> POSIX

-- | Create a value of <a>Configuration</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tags:Configuration'</a>, <a>configuration_tags</a> - The list
--   of all tags associated with this configuration.
--   
--   <a>$sel:description:Configuration'</a>,
--   <a>configuration_description</a> - Required. The description of the
--   configuration.
--   
--   <a>$sel:engineVersion:Configuration'</a>,
--   <a>configuration_engineVersion</a> - Required. The broker engine's
--   version. For a list of supported engine versions, see, <a>Supported
--   engines</a>.
--   
--   <a>$sel:latestRevision:Configuration'</a>,
--   <a>configuration_latestRevision</a> - Required. The latest revision of
--   the configuration.
--   
--   <a>$sel:authenticationStrategy:Configuration'</a>,
--   <a>configuration_authenticationStrategy</a> - Optional. The
--   authentication strategy associated with the configuration. The default
--   is SIMPLE.
--   
--   <a>$sel:engineType:Configuration'</a>, <a>configuration_engineType</a>
--   - Required. The type of broker engine. Currently, Amazon MQ supports
--   ACTIVEMQ and RABBITMQ.
--   
--   <a>$sel:id:Configuration'</a>, <a>configuration_id</a> - Required. The
--   unique ID that Amazon MQ generates for the configuration.
--   
--   <a>$sel:arn:Configuration'</a>, <a>configuration_arn</a> - Required.
--   The ARN of the configuration.
--   
--   <a>$sel:name:Configuration'</a>, <a>configuration_name</a> - Required.
--   The name of the configuration. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 1-150 characters long.
--   
--   <a>$sel:created:Configuration'</a>, <a>configuration_created</a> -
--   Required. The date and time of the configuration revision.
newConfiguration :: Text -> Text -> ConfigurationRevision -> AuthenticationStrategy -> EngineType -> Text -> Text -> Text -> UTCTime -> Configuration

-- | The list of all tags associated with this configuration.
configuration_tags :: Lens' Configuration (Maybe (HashMap Text Text))

-- | Required. The description of the configuration.
configuration_description :: Lens' Configuration Text

-- | Required. The broker engine's version. For a list of supported engine
--   versions, see, <a>Supported engines</a>.
configuration_engineVersion :: Lens' Configuration Text

-- | Required. The latest revision of the configuration.
configuration_latestRevision :: Lens' Configuration ConfigurationRevision

-- | Optional. The authentication strategy associated with the
--   configuration. The default is SIMPLE.
configuration_authenticationStrategy :: Lens' Configuration AuthenticationStrategy

-- | Required. The type of broker engine. Currently, Amazon MQ supports
--   ACTIVEMQ and RABBITMQ.
configuration_engineType :: Lens' Configuration EngineType

-- | Required. The unique ID that Amazon MQ generates for the
--   configuration.
configuration_id :: Lens' Configuration Text

-- | Required. The ARN of the configuration.
configuration_arn :: Lens' Configuration Text

-- | Required. The name of the configuration. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 1-150 characters long.
configuration_name :: Lens' Configuration Text

-- | Required. The date and time of the configuration revision.
configuration_created :: Lens' Configuration UTCTime
instance GHC.Generics.Generic Amazonka.MQ.Types.Configuration.Configuration
instance GHC.Show.Show Amazonka.MQ.Types.Configuration.Configuration
instance GHC.Read.Read Amazonka.MQ.Types.Configuration.Configuration
instance GHC.Classes.Eq Amazonka.MQ.Types.Configuration.Configuration
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.MQ.Types.Configuration.Configuration
instance Data.Hashable.Class.Hashable Amazonka.MQ.Types.Configuration.Configuration
instance Control.DeepSeq.NFData Amazonka.MQ.Types.Configuration.Configuration


module Amazonka.MQ.Types.BrokerSummary

-- | Returns information about all brokers.
--   
--   <i>See:</i> <a>newBrokerSummary</a> smart constructor.
data BrokerSummary
BrokerSummary' :: Maybe Text -> Maybe BrokerState -> Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe Text -> DeploymentMode -> EngineType -> BrokerSummary

-- | The broker's name. This value is unique in your AWS account, 1-50
--   characters long, and containing only letters, numbers, dashes, and
--   underscores, and must not contain white spaces, brackets, wildcard
--   characters, or special characters.
[$sel:brokerName:BrokerSummary'] :: BrokerSummary -> Maybe Text

-- | The broker's status.
[$sel:brokerState:BrokerSummary'] :: BrokerSummary -> Maybe BrokerState

-- | The time when the broker was created.
[$sel:created:BrokerSummary'] :: BrokerSummary -> Maybe POSIX

-- | The unique ID that Amazon MQ generates for the broker.
[$sel:brokerId:BrokerSummary'] :: BrokerSummary -> Maybe Text

-- | The broker's Amazon Resource Name (ARN).
[$sel:brokerArn:BrokerSummary'] :: BrokerSummary -> Maybe Text

-- | The broker's instance type.
[$sel:hostInstanceType:BrokerSummary'] :: BrokerSummary -> Maybe Text

-- | The broker's deployment mode.
[$sel:deploymentMode:BrokerSummary'] :: BrokerSummary -> DeploymentMode

-- | The type of broker engine.
[$sel:engineType:BrokerSummary'] :: BrokerSummary -> EngineType

-- | Create a value of <a>BrokerSummary</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:brokerName:BrokerSummary'</a>, <a>brokerSummary_brokerName</a>
--   - The broker's name. This value is unique in your AWS account, 1-50
--   characters long, and containing only letters, numbers, dashes, and
--   underscores, and must not contain white spaces, brackets, wildcard
--   characters, or special characters.
--   
--   <a>$sel:brokerState:BrokerSummary'</a>,
--   <a>brokerSummary_brokerState</a> - The broker's status.
--   
--   <a>$sel:created:BrokerSummary'</a>, <a>brokerSummary_created</a> - The
--   time when the broker was created.
--   
--   <a>$sel:brokerId:BrokerSummary'</a>, <a>brokerSummary_brokerId</a> -
--   The unique ID that Amazon MQ generates for the broker.
--   
--   <a>$sel:brokerArn:BrokerSummary'</a>, <a>brokerSummary_brokerArn</a> -
--   The broker's Amazon Resource Name (ARN).
--   
--   <a>$sel:hostInstanceType:BrokerSummary'</a>,
--   <a>brokerSummary_hostInstanceType</a> - The broker's instance type.
--   
--   <a>$sel:deploymentMode:BrokerSummary'</a>,
--   <a>brokerSummary_deploymentMode</a> - The broker's deployment mode.
--   
--   <a>$sel:engineType:BrokerSummary'</a>, <a>brokerSummary_engineType</a>
--   - The type of broker engine.
newBrokerSummary :: DeploymentMode -> EngineType -> BrokerSummary

-- | The broker's name. This value is unique in your AWS account, 1-50
--   characters long, and containing only letters, numbers, dashes, and
--   underscores, and must not contain white spaces, brackets, wildcard
--   characters, or special characters.
brokerSummary_brokerName :: Lens' BrokerSummary (Maybe Text)

-- | The broker's status.
brokerSummary_brokerState :: Lens' BrokerSummary (Maybe BrokerState)

-- | The time when the broker was created.
brokerSummary_created :: Lens' BrokerSummary (Maybe UTCTime)

-- | The unique ID that Amazon MQ generates for the broker.
brokerSummary_brokerId :: Lens' BrokerSummary (Maybe Text)

-- | The broker's Amazon Resource Name (ARN).
brokerSummary_brokerArn :: Lens' BrokerSummary (Maybe Text)

-- | The broker's instance type.
brokerSummary_hostInstanceType :: Lens' BrokerSummary (Maybe Text)

-- | The broker's deployment mode.
brokerSummary_deploymentMode :: Lens' BrokerSummary DeploymentMode

-- | The type of broker engine.
brokerSummary_engineType :: Lens' BrokerSummary EngineType
instance GHC.Generics.Generic Amazonka.MQ.Types.BrokerSummary.BrokerSummary
instance GHC.Show.Show Amazonka.MQ.Types.BrokerSummary.BrokerSummary
instance GHC.Read.Read Amazonka.MQ.Types.BrokerSummary.BrokerSummary
instance GHC.Classes.Eq Amazonka.MQ.Types.BrokerSummary.BrokerSummary
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.MQ.Types.BrokerSummary.BrokerSummary
instance Data.Hashable.Class.Hashable Amazonka.MQ.Types.BrokerSummary.BrokerSummary
instance Control.DeepSeq.NFData Amazonka.MQ.Types.BrokerSummary.BrokerSummary


module Amazonka.MQ.Types.BrokerInstanceOption

-- | Option for host instance type.
--   
--   <i>See:</i> <a>newBrokerInstanceOption</a> smart constructor.
data BrokerInstanceOption
BrokerInstanceOption' :: Maybe [Text] -> Maybe [AvailabilityZone] -> Maybe [DeploymentMode] -> Maybe EngineType -> Maybe Text -> Maybe BrokerStorageType -> BrokerInstanceOption

-- | The list of supported engine versions.
[$sel:supportedEngineVersions:BrokerInstanceOption'] :: BrokerInstanceOption -> Maybe [Text]

-- | The list of available az.
[$sel:availabilityZones:BrokerInstanceOption'] :: BrokerInstanceOption -> Maybe [AvailabilityZone]

-- | The list of supported deployment modes.
[$sel:supportedDeploymentModes:BrokerInstanceOption'] :: BrokerInstanceOption -> Maybe [DeploymentMode]

-- | The broker's engine type.
[$sel:engineType:BrokerInstanceOption'] :: BrokerInstanceOption -> Maybe EngineType

-- | The broker's instance type.
[$sel:hostInstanceType:BrokerInstanceOption'] :: BrokerInstanceOption -> Maybe Text

-- | The broker's storage type.
[$sel:storageType:BrokerInstanceOption'] :: BrokerInstanceOption -> Maybe BrokerStorageType

-- | Create a value of <a>BrokerInstanceOption</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:supportedEngineVersions:BrokerInstanceOption'</a>,
--   <a>brokerInstanceOption_supportedEngineVersions</a> - The list of
--   supported engine versions.
--   
--   <a>$sel:availabilityZones:BrokerInstanceOption'</a>,
--   <a>brokerInstanceOption_availabilityZones</a> - The list of available
--   az.
--   
--   <a>$sel:supportedDeploymentModes:BrokerInstanceOption'</a>,
--   <a>brokerInstanceOption_supportedDeploymentModes</a> - The list of
--   supported deployment modes.
--   
--   <a>$sel:engineType:BrokerInstanceOption'</a>,
--   <a>brokerInstanceOption_engineType</a> - The broker's engine type.
--   
--   <a>$sel:hostInstanceType:BrokerInstanceOption'</a>,
--   <a>brokerInstanceOption_hostInstanceType</a> - The broker's instance
--   type.
--   
--   <a>$sel:storageType:BrokerInstanceOption'</a>,
--   <a>brokerInstanceOption_storageType</a> - The broker's storage type.
newBrokerInstanceOption :: BrokerInstanceOption

-- | The list of supported engine versions.
brokerInstanceOption_supportedEngineVersions :: Lens' BrokerInstanceOption (Maybe [Text])

-- | The list of available az.
brokerInstanceOption_availabilityZones :: Lens' BrokerInstanceOption (Maybe [AvailabilityZone])

-- | The list of supported deployment modes.
brokerInstanceOption_supportedDeploymentModes :: Lens' BrokerInstanceOption (Maybe [DeploymentMode])

-- | The broker's engine type.
brokerInstanceOption_engineType :: Lens' BrokerInstanceOption (Maybe EngineType)

-- | The broker's instance type.
brokerInstanceOption_hostInstanceType :: Lens' BrokerInstanceOption (Maybe Text)

-- | The broker's storage type.
brokerInstanceOption_storageType :: Lens' BrokerInstanceOption (Maybe BrokerStorageType)
instance GHC.Generics.Generic Amazonka.MQ.Types.BrokerInstanceOption.BrokerInstanceOption
instance GHC.Show.Show Amazonka.MQ.Types.BrokerInstanceOption.BrokerInstanceOption
instance GHC.Read.Read Amazonka.MQ.Types.BrokerInstanceOption.BrokerInstanceOption
instance GHC.Classes.Eq Amazonka.MQ.Types.BrokerInstanceOption.BrokerInstanceOption
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.MQ.Types.BrokerInstanceOption.BrokerInstanceOption
instance Data.Hashable.Class.Hashable Amazonka.MQ.Types.BrokerInstanceOption.BrokerInstanceOption
instance Control.DeepSeq.NFData Amazonka.MQ.Types.BrokerInstanceOption.BrokerInstanceOption


module Amazonka.MQ.Types.EngineVersion

-- | Id of the engine version.
--   
--   <i>See:</i> <a>newEngineVersion</a> smart constructor.
data EngineVersion
EngineVersion' :: Maybe Text -> EngineVersion

-- | Id for the version.
[$sel:name:EngineVersion'] :: EngineVersion -> Maybe Text

-- | Create a value of <a>EngineVersion</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:name:EngineVersion'</a>, <a>engineVersion_name</a> - Id for
--   the version.
newEngineVersion :: EngineVersion

-- | Id for the version.
engineVersion_name :: Lens' EngineVersion (Maybe Text)
instance GHC.Generics.Generic Amazonka.MQ.Types.EngineVersion.EngineVersion
instance GHC.Show.Show Amazonka.MQ.Types.EngineVersion.EngineVersion
instance GHC.Read.Read Amazonka.MQ.Types.EngineVersion.EngineVersion
instance GHC.Classes.Eq Amazonka.MQ.Types.EngineVersion.EngineVersion
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.MQ.Types.EngineVersion.EngineVersion
instance Data.Hashable.Class.Hashable Amazonka.MQ.Types.EngineVersion.EngineVersion
instance Control.DeepSeq.NFData Amazonka.MQ.Types.EngineVersion.EngineVersion


module Amazonka.MQ.Types.BrokerEngineType

-- | Types of broker engines.
--   
--   <i>See:</i> <a>newBrokerEngineType</a> smart constructor.
data BrokerEngineType
BrokerEngineType' :: Maybe [EngineVersion] -> Maybe EngineType -> BrokerEngineType

-- | The list of engine versions.
[$sel:engineVersions:BrokerEngineType'] :: BrokerEngineType -> Maybe [EngineVersion]

-- | The broker's engine type.
[$sel:engineType:BrokerEngineType'] :: BrokerEngineType -> Maybe EngineType

-- | Create a value of <a>BrokerEngineType</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:engineVersions:BrokerEngineType'</a>,
--   <a>brokerEngineType_engineVersions</a> - The list of engine versions.
--   
--   <a>$sel:engineType:BrokerEngineType'</a>,
--   <a>brokerEngineType_engineType</a> - The broker's engine type.
newBrokerEngineType :: BrokerEngineType

-- | The list of engine versions.
brokerEngineType_engineVersions :: Lens' BrokerEngineType (Maybe [EngineVersion])

-- | The broker's engine type.
brokerEngineType_engineType :: Lens' BrokerEngineType (Maybe EngineType)
instance GHC.Generics.Generic Amazonka.MQ.Types.BrokerEngineType.BrokerEngineType
instance GHC.Show.Show Amazonka.MQ.Types.BrokerEngineType.BrokerEngineType
instance GHC.Read.Read Amazonka.MQ.Types.BrokerEngineType.BrokerEngineType
instance GHC.Classes.Eq Amazonka.MQ.Types.BrokerEngineType.BrokerEngineType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.MQ.Types.BrokerEngineType.BrokerEngineType
instance Data.Hashable.Class.Hashable Amazonka.MQ.Types.BrokerEngineType.BrokerEngineType
instance Control.DeepSeq.NFData Amazonka.MQ.Types.BrokerEngineType.BrokerEngineType


module Amazonka.MQ.Types.LdapServerMetadataInput

-- | Optional. The metadata of the LDAP server used to authenticate and
--   authorize connections to the broker.
--   
--   Does not apply to RabbitMQ brokers.
--   
--   <i>See:</i> <a>newLdapServerMetadataInput</a> smart constructor.
data LdapServerMetadataInput
LdapServerMetadataInput' :: Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe Text -> [Text] -> Text -> Text -> Text -> Text -> Text -> Text -> LdapServerMetadataInput

-- | Specifies the name of the LDAP attribute for the user group
--   membership.
[$sel:userRoleName:LdapServerMetadataInput'] :: LdapServerMetadataInput -> Maybe Text

-- | The directory search scope for the user. If set to true, scope is to
--   search the entire subtree.
[$sel:userSearchSubtree:LdapServerMetadataInput'] :: LdapServerMetadataInput -> Maybe Bool

-- | The directory search scope for the role. If set to true, scope is to
--   search the entire subtree.
[$sel:roleSearchSubtree:LdapServerMetadataInput'] :: LdapServerMetadataInput -> Maybe Bool

-- | Specifies the LDAP attribute that identifies the group name attribute
--   in the object returned from the group membership query.
[$sel:roleName:LdapServerMetadataInput'] :: LdapServerMetadataInput -> Maybe Text

-- | Specifies the location of the LDAP server such as AWS Directory
--   Service for Microsoft Active Directory . Optional failover server.
[$sel:hosts:LdapServerMetadataInput'] :: LdapServerMetadataInput -> [Text]

-- | The LDAP search filter used to find users within the userBase. The
--   client's username is substituted into the {0} placeholder in the
--   search filter. For example, if this option is set to (uid={0}) and the
--   received username is janedoe, the search filter becomes (uid=janedoe)
--   after string substitution. It will result in matching an entry like
--   uid=janedoe, ou=Users,ou=corp, dc=corp, dc=example, dc=com.
[$sel:userSearchMatching:LdapServerMetadataInput'] :: LdapServerMetadataInput -> Text

-- | Select a particular subtree of the directory information tree (DIT) to
--   search for user entries. The subtree is specified by a DN, which
--   specifies the base node of the subtree. For example, by setting this
--   option to ou=Users,ou=corp, dc=corp, dc=example, dc=com, the search
--   for user entries is restricted to the subtree beneath ou=Users,
--   ou=corp, dc=corp, dc=example, dc=com.
[$sel:userBase:LdapServerMetadataInput'] :: LdapServerMetadataInput -> Text

-- | The LDAP search filter used to find roles within the roleBase. The
--   distinguished name of the user matched by userSearchMatching is
--   substituted into the {0} placeholder in the search filter. The
--   client's username is substituted into the {1} placeholder. For
--   example, if you set this option to (member=uid={1})for the user
--   janedoe, the search filter becomes (member=uid=janedoe) after string
--   substitution. It matches all role entries that have a member attribute
--   equal to uid=janedoe under the subtree selected by the roleBase.
[$sel:roleSearchMatching:LdapServerMetadataInput'] :: LdapServerMetadataInput -> Text

-- | Service account username. A service account is an account in your LDAP
--   server that has access to initiate a connection. For example,
--   cn=admin,dc=corp, dc=example, dc=com.
[$sel:serviceAccountUsername:LdapServerMetadataInput'] :: LdapServerMetadataInput -> Text

-- | The distinguished name of the node in the directory information tree
--   (DIT) to search for roles or groups. For example, ou=group, ou=corp,
--   dc=corp, dc=example, dc=com.
[$sel:roleBase:LdapServerMetadataInput'] :: LdapServerMetadataInput -> Text

-- | Service account password. A service account is an account in your LDAP
--   server that has access to initiate a connection. For example,
--   cn=admin,dc=corp, dc=example, dc=com.
[$sel:serviceAccountPassword:LdapServerMetadataInput'] :: LdapServerMetadataInput -> Text

-- | Create a value of <a>LdapServerMetadataInput</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:userRoleName:LdapServerMetadataInput'</a>,
--   <a>ldapServerMetadataInput_userRoleName</a> - Specifies the name of
--   the LDAP attribute for the user group membership.
--   
--   <a>$sel:userSearchSubtree:LdapServerMetadataInput'</a>,
--   <a>ldapServerMetadataInput_userSearchSubtree</a> - The directory
--   search scope for the user. If set to true, scope is to search the
--   entire subtree.
--   
--   <a>$sel:roleSearchSubtree:LdapServerMetadataInput'</a>,
--   <a>ldapServerMetadataInput_roleSearchSubtree</a> - The directory
--   search scope for the role. If set to true, scope is to search the
--   entire subtree.
--   
--   <a>$sel:roleName:LdapServerMetadataInput'</a>,
--   <a>ldapServerMetadataInput_roleName</a> - Specifies the LDAP attribute
--   that identifies the group name attribute in the object returned from
--   the group membership query.
--   
--   <a>$sel:hosts:LdapServerMetadataInput'</a>,
--   <a>ldapServerMetadataInput_hosts</a> - Specifies the location of the
--   LDAP server such as AWS Directory Service for Microsoft Active
--   Directory . Optional failover server.
--   
--   <a>$sel:userSearchMatching:LdapServerMetadataInput'</a>,
--   <a>ldapServerMetadataInput_userSearchMatching</a> - The LDAP search
--   filter used to find users within the userBase. The client's username
--   is substituted into the {0} placeholder in the search filter. For
--   example, if this option is set to (uid={0}) and the received username
--   is janedoe, the search filter becomes (uid=janedoe) after string
--   substitution. It will result in matching an entry like uid=janedoe,
--   ou=Users,ou=corp, dc=corp, dc=example, dc=com.
--   
--   <a>$sel:userBase:LdapServerMetadataInput'</a>,
--   <a>ldapServerMetadataInput_userBase</a> - Select a particular subtree
--   of the directory information tree (DIT) to search for user entries.
--   The subtree is specified by a DN, which specifies the base node of the
--   subtree. For example, by setting this option to ou=Users,ou=corp,
--   dc=corp, dc=example, dc=com, the search for user entries is restricted
--   to the subtree beneath ou=Users, ou=corp, dc=corp, dc=example, dc=com.
--   
--   <a>$sel:roleSearchMatching:LdapServerMetadataInput'</a>,
--   <a>ldapServerMetadataInput_roleSearchMatching</a> - The LDAP search
--   filter used to find roles within the roleBase. The distinguished name
--   of the user matched by userSearchMatching is substituted into the {0}
--   placeholder in the search filter. The client's username is substituted
--   into the {1} placeholder. For example, if you set this option to
--   (member=uid={1})for the user janedoe, the search filter becomes
--   (member=uid=janedoe) after string substitution. It matches all role
--   entries that have a member attribute equal to uid=janedoe under the
--   subtree selected by the roleBase.
--   
--   <a>$sel:serviceAccountUsername:LdapServerMetadataInput'</a>,
--   <a>ldapServerMetadataInput_serviceAccountUsername</a> - Service
--   account username. A service account is an account in your LDAP server
--   that has access to initiate a connection. For example,
--   cn=admin,dc=corp, dc=example, dc=com.
--   
--   <a>$sel:roleBase:LdapServerMetadataInput'</a>,
--   <a>ldapServerMetadataInput_roleBase</a> - The distinguished name of
--   the node in the directory information tree (DIT) to search for roles
--   or groups. For example, ou=group, ou=corp, dc=corp, dc=example,
--   dc=com.
--   
--   <a>$sel:serviceAccountPassword:LdapServerMetadataInput'</a>,
--   <a>ldapServerMetadataInput_serviceAccountPassword</a> - Service
--   account password. A service account is an account in your LDAP server
--   that has access to initiate a connection. For example,
--   cn=admin,dc=corp, dc=example, dc=com.
newLdapServerMetadataInput :: Text -> Text -> Text -> Text -> Text -> Text -> LdapServerMetadataInput

-- | Specifies the name of the LDAP attribute for the user group
--   membership.
ldapServerMetadataInput_userRoleName :: Lens' LdapServerMetadataInput (Maybe Text)

-- | The directory search scope for the user. If set to true, scope is to
--   search the entire subtree.
ldapServerMetadataInput_userSearchSubtree :: Lens' LdapServerMetadataInput (Maybe Bool)

-- | The directory search scope for the role. If set to true, scope is to
--   search the entire subtree.
ldapServerMetadataInput_roleSearchSubtree :: Lens' LdapServerMetadataInput (Maybe Bool)

-- | Specifies the LDAP attribute that identifies the group name attribute
--   in the object returned from the group membership query.
ldapServerMetadataInput_roleName :: Lens' LdapServerMetadataInput (Maybe Text)

-- | Specifies the location of the LDAP server such as AWS Directory
--   Service for Microsoft Active Directory . Optional failover server.
ldapServerMetadataInput_hosts :: Lens' LdapServerMetadataInput [Text]

-- | The LDAP search filter used to find users within the userBase. The
--   client's username is substituted into the {0} placeholder in the
--   search filter. For example, if this option is set to (uid={0}) and the
--   received username is janedoe, the search filter becomes (uid=janedoe)
--   after string substitution. It will result in matching an entry like
--   uid=janedoe, ou=Users,ou=corp, dc=corp, dc=example, dc=com.
ldapServerMetadataInput_userSearchMatching :: Lens' LdapServerMetadataInput Text

-- | Select a particular subtree of the directory information tree (DIT) to
--   search for user entries. The subtree is specified by a DN, which
--   specifies the base node of the subtree. For example, by setting this
--   option to ou=Users,ou=corp, dc=corp, dc=example, dc=com, the search
--   for user entries is restricted to the subtree beneath ou=Users,
--   ou=corp, dc=corp, dc=example, dc=com.
ldapServerMetadataInput_userBase :: Lens' LdapServerMetadataInput Text

-- | The LDAP search filter used to find roles within the roleBase. The
--   distinguished name of the user matched by userSearchMatching is
--   substituted into the {0} placeholder in the search filter. The
--   client's username is substituted into the {1} placeholder. For
--   example, if you set this option to (member=uid={1})for the user
--   janedoe, the search filter becomes (member=uid=janedoe) after string
--   substitution. It matches all role entries that have a member attribute
--   equal to uid=janedoe under the subtree selected by the roleBase.
ldapServerMetadataInput_roleSearchMatching :: Lens' LdapServerMetadataInput Text

-- | Service account username. A service account is an account in your LDAP
--   server that has access to initiate a connection. For example,
--   cn=admin,dc=corp, dc=example, dc=com.
ldapServerMetadataInput_serviceAccountUsername :: Lens' LdapServerMetadataInput Text

-- | The distinguished name of the node in the directory information tree
--   (DIT) to search for roles or groups. For example, ou=group, ou=corp,
--   dc=corp, dc=example, dc=com.
ldapServerMetadataInput_roleBase :: Lens' LdapServerMetadataInput Text

-- | Service account password. A service account is an account in your LDAP
--   server that has access to initiate a connection. For example,
--   cn=admin,dc=corp, dc=example, dc=com.
ldapServerMetadataInput_serviceAccountPassword :: Lens' LdapServerMetadataInput Text
instance GHC.Generics.Generic Amazonka.MQ.Types.LdapServerMetadataInput.LdapServerMetadataInput
instance GHC.Show.Show Amazonka.MQ.Types.LdapServerMetadataInput.LdapServerMetadataInput
instance GHC.Read.Read Amazonka.MQ.Types.LdapServerMetadataInput.LdapServerMetadataInput
instance GHC.Classes.Eq Amazonka.MQ.Types.LdapServerMetadataInput.LdapServerMetadataInput
instance Data.Hashable.Class.Hashable Amazonka.MQ.Types.LdapServerMetadataInput.LdapServerMetadataInput
instance Control.DeepSeq.NFData Amazonka.MQ.Types.LdapServerMetadataInput.LdapServerMetadataInput
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MQ.Types.LdapServerMetadataInput.LdapServerMetadataInput


module Amazonka.MQ.Types.LdapServerMetadataOutput

-- | Optional. The metadata of the LDAP server used to authenticate and
--   authorize connections to the broker.
--   
--   <i>See:</i> <a>newLdapServerMetadataOutput</a> smart constructor.
data LdapServerMetadataOutput
LdapServerMetadataOutput' :: Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe Text -> [Text] -> Text -> Text -> Text -> Text -> Text -> LdapServerMetadataOutput

-- | Specifies the name of the LDAP attribute for the user group
--   membership.
[$sel:userRoleName:LdapServerMetadataOutput'] :: LdapServerMetadataOutput -> Maybe Text

-- | The directory search scope for the user. If set to true, scope is to
--   search the entire subtree.
[$sel:userSearchSubtree:LdapServerMetadataOutput'] :: LdapServerMetadataOutput -> Maybe Bool

-- | The directory search scope for the role. If set to true, scope is to
--   search the entire subtree.
[$sel:roleSearchSubtree:LdapServerMetadataOutput'] :: LdapServerMetadataOutput -> Maybe Bool

-- | Specifies the LDAP attribute that identifies the group name attribute
--   in the object returned from the group membership query.
[$sel:roleName:LdapServerMetadataOutput'] :: LdapServerMetadataOutput -> Maybe Text

-- | Specifies the location of the LDAP server such as AWS Directory
--   Service for Microsoft Active Directory . Optional failover server.
[$sel:hosts:LdapServerMetadataOutput'] :: LdapServerMetadataOutput -> [Text]

-- | The LDAP search filter used to find users within the userBase. The
--   client's username is substituted into the {0} placeholder in the
--   search filter. For example, if this option is set to (uid={0}) and the
--   received username is janedoe, the search filter becomes (uid=janedoe)
--   after string substitution. It will result in matching an entry like
--   uid=janedoe, ou=Users,ou=corp, dc=corp, dc=example, dc=com.
[$sel:userSearchMatching:LdapServerMetadataOutput'] :: LdapServerMetadataOutput -> Text

-- | Select a particular subtree of the directory information tree (DIT) to
--   search for user entries. The subtree is specified by a DN, which
--   specifies the base node of the subtree. For example, by setting this
--   option to ou=Users,ou=corp, dc=corp, dc=example, dc=com, the search
--   for user entries is restricted to the subtree beneath ou=Users,
--   ou=corp, dc=corp, dc=example, dc=com.
[$sel:userBase:LdapServerMetadataOutput'] :: LdapServerMetadataOutput -> Text

-- | The LDAP search filter used to find roles within the roleBase. The
--   distinguished name of the user matched by userSearchMatching is
--   substituted into the {0} placeholder in the search filter. The
--   client's username is substituted into the {1} placeholder. For
--   example, if you set this option to (member=uid={1})for the user
--   janedoe, the search filter becomes (member=uid=janedoe) after string
--   substitution. It matches all role entries that have a member attribute
--   equal to uid=janedoe under the subtree selected by the roleBase.
[$sel:roleSearchMatching:LdapServerMetadataOutput'] :: LdapServerMetadataOutput -> Text

-- | Service account username. A service account is an account in your LDAP
--   server that has access to initiate a connection. For example,
--   cn=admin,dc=corp, dc=example, dc=com.
[$sel:serviceAccountUsername:LdapServerMetadataOutput'] :: LdapServerMetadataOutput -> Text

-- | The distinguished name of the node in the directory information tree
--   (DIT) to search for roles or groups. For example, ou=group, ou=corp,
--   dc=corp, dc=example, dc=com.
[$sel:roleBase:LdapServerMetadataOutput'] :: LdapServerMetadataOutput -> Text

-- | Create a value of <a>LdapServerMetadataOutput</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:userRoleName:LdapServerMetadataOutput'</a>,
--   <a>ldapServerMetadataOutput_userRoleName</a> - Specifies the name of
--   the LDAP attribute for the user group membership.
--   
--   <a>$sel:userSearchSubtree:LdapServerMetadataOutput'</a>,
--   <a>ldapServerMetadataOutput_userSearchSubtree</a> - The directory
--   search scope for the user. If set to true, scope is to search the
--   entire subtree.
--   
--   <a>$sel:roleSearchSubtree:LdapServerMetadataOutput'</a>,
--   <a>ldapServerMetadataOutput_roleSearchSubtree</a> - The directory
--   search scope for the role. If set to true, scope is to search the
--   entire subtree.
--   
--   <a>$sel:roleName:LdapServerMetadataOutput'</a>,
--   <a>ldapServerMetadataOutput_roleName</a> - Specifies the LDAP
--   attribute that identifies the group name attribute in the object
--   returned from the group membership query.
--   
--   <a>$sel:hosts:LdapServerMetadataOutput'</a>,
--   <a>ldapServerMetadataOutput_hosts</a> - Specifies the location of the
--   LDAP server such as AWS Directory Service for Microsoft Active
--   Directory . Optional failover server.
--   
--   <a>$sel:userSearchMatching:LdapServerMetadataOutput'</a>,
--   <a>ldapServerMetadataOutput_userSearchMatching</a> - The LDAP search
--   filter used to find users within the userBase. The client's username
--   is substituted into the {0} placeholder in the search filter. For
--   example, if this option is set to (uid={0}) and the received username
--   is janedoe, the search filter becomes (uid=janedoe) after string
--   substitution. It will result in matching an entry like uid=janedoe,
--   ou=Users,ou=corp, dc=corp, dc=example, dc=com.
--   
--   <a>$sel:userBase:LdapServerMetadataOutput'</a>,
--   <a>ldapServerMetadataOutput_userBase</a> - Select a particular subtree
--   of the directory information tree (DIT) to search for user entries.
--   The subtree is specified by a DN, which specifies the base node of the
--   subtree. For example, by setting this option to ou=Users,ou=corp,
--   dc=corp, dc=example, dc=com, the search for user entries is restricted
--   to the subtree beneath ou=Users, ou=corp, dc=corp, dc=example, dc=com.
--   
--   <a>$sel:roleSearchMatching:LdapServerMetadataOutput'</a>,
--   <a>ldapServerMetadataOutput_roleSearchMatching</a> - The LDAP search
--   filter used to find roles within the roleBase. The distinguished name
--   of the user matched by userSearchMatching is substituted into the {0}
--   placeholder in the search filter. The client's username is substituted
--   into the {1} placeholder. For example, if you set this option to
--   (member=uid={1})for the user janedoe, the search filter becomes
--   (member=uid=janedoe) after string substitution. It matches all role
--   entries that have a member attribute equal to uid=janedoe under the
--   subtree selected by the roleBase.
--   
--   <a>$sel:serviceAccountUsername:LdapServerMetadataOutput'</a>,
--   <a>ldapServerMetadataOutput_serviceAccountUsername</a> - Service
--   account username. A service account is an account in your LDAP server
--   that has access to initiate a connection. For example,
--   cn=admin,dc=corp, dc=example, dc=com.
--   
--   <a>$sel:roleBase:LdapServerMetadataOutput'</a>,
--   <a>ldapServerMetadataOutput_roleBase</a> - The distinguished name of
--   the node in the directory information tree (DIT) to search for roles
--   or groups. For example, ou=group, ou=corp, dc=corp, dc=example,
--   dc=com.
newLdapServerMetadataOutput :: Text -> Text -> Text -> Text -> Text -> LdapServerMetadataOutput

-- | Specifies the name of the LDAP attribute for the user group
--   membership.
ldapServerMetadataOutput_userRoleName :: Lens' LdapServerMetadataOutput (Maybe Text)

-- | The directory search scope for the user. If set to true, scope is to
--   search the entire subtree.
ldapServerMetadataOutput_userSearchSubtree :: Lens' LdapServerMetadataOutput (Maybe Bool)

-- | The directory search scope for the role. If set to true, scope is to
--   search the entire subtree.
ldapServerMetadataOutput_roleSearchSubtree :: Lens' LdapServerMetadataOutput (Maybe Bool)

-- | Specifies the LDAP attribute that identifies the group name attribute
--   in the object returned from the group membership query.
ldapServerMetadataOutput_roleName :: Lens' LdapServerMetadataOutput (Maybe Text)

-- | Specifies the location of the LDAP server such as AWS Directory
--   Service for Microsoft Active Directory . Optional failover server.
ldapServerMetadataOutput_hosts :: Lens' LdapServerMetadataOutput [Text]

-- | The LDAP search filter used to find users within the userBase. The
--   client's username is substituted into the {0} placeholder in the
--   search filter. For example, if this option is set to (uid={0}) and the
--   received username is janedoe, the search filter becomes (uid=janedoe)
--   after string substitution. It will result in matching an entry like
--   uid=janedoe, ou=Users,ou=corp, dc=corp, dc=example, dc=com.
ldapServerMetadataOutput_userSearchMatching :: Lens' LdapServerMetadataOutput Text

-- | Select a particular subtree of the directory information tree (DIT) to
--   search for user entries. The subtree is specified by a DN, which
--   specifies the base node of the subtree. For example, by setting this
--   option to ou=Users,ou=corp, dc=corp, dc=example, dc=com, the search
--   for user entries is restricted to the subtree beneath ou=Users,
--   ou=corp, dc=corp, dc=example, dc=com.
ldapServerMetadataOutput_userBase :: Lens' LdapServerMetadataOutput Text

-- | The LDAP search filter used to find roles within the roleBase. The
--   distinguished name of the user matched by userSearchMatching is
--   substituted into the {0} placeholder in the search filter. The
--   client's username is substituted into the {1} placeholder. For
--   example, if you set this option to (member=uid={1})for the user
--   janedoe, the search filter becomes (member=uid=janedoe) after string
--   substitution. It matches all role entries that have a member attribute
--   equal to uid=janedoe under the subtree selected by the roleBase.
ldapServerMetadataOutput_roleSearchMatching :: Lens' LdapServerMetadataOutput Text

-- | Service account username. A service account is an account in your LDAP
--   server that has access to initiate a connection. For example,
--   cn=admin,dc=corp, dc=example, dc=com.
ldapServerMetadataOutput_serviceAccountUsername :: Lens' LdapServerMetadataOutput Text

-- | The distinguished name of the node in the directory information tree
--   (DIT) to search for roles or groups. For example, ou=group, ou=corp,
--   dc=corp, dc=example, dc=com.
ldapServerMetadataOutput_roleBase :: Lens' LdapServerMetadataOutput Text
instance GHC.Generics.Generic Amazonka.MQ.Types.LdapServerMetadataOutput.LdapServerMetadataOutput
instance GHC.Show.Show Amazonka.MQ.Types.LdapServerMetadataOutput.LdapServerMetadataOutput
instance GHC.Read.Read Amazonka.MQ.Types.LdapServerMetadataOutput.LdapServerMetadataOutput
instance GHC.Classes.Eq Amazonka.MQ.Types.LdapServerMetadataOutput.LdapServerMetadataOutput
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.MQ.Types.LdapServerMetadataOutput.LdapServerMetadataOutput
instance Data.Hashable.Class.Hashable Amazonka.MQ.Types.LdapServerMetadataOutput.LdapServerMetadataOutput
instance Control.DeepSeq.NFData Amazonka.MQ.Types.LdapServerMetadataOutput.LdapServerMetadataOutput


module Amazonka.MQ.Types.Logs

-- | The list of information about logs to be enabled for the specified
--   broker.
--   
--   <i>See:</i> <a>newLogs</a> smart constructor.
data Logs
Logs' :: Maybe Bool -> Maybe Bool -> Logs

-- | Enables audit logging. Every user management action made using JMX or
--   the ActiveMQ Web Console is logged. Does not apply to RabbitMQ
--   brokers.
[$sel:audit:Logs'] :: Logs -> Maybe Bool

-- | Enables general logging.
[$sel:general:Logs'] :: Logs -> Maybe Bool

-- | Create a value of <a>Logs</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:audit:Logs'</a>, <a>logs_audit</a> - Enables audit logging.
--   Every user management action made using JMX or the ActiveMQ Web
--   Console is logged. Does not apply to RabbitMQ brokers.
--   
--   <a>$sel:general:Logs'</a>, <a>logs_general</a> - Enables general
--   logging.
newLogs :: Logs

-- | Enables audit logging. Every user management action made using JMX or
--   the ActiveMQ Web Console is logged. Does not apply to RabbitMQ
--   brokers.
logs_audit :: Lens' Logs (Maybe Bool)

-- | Enables general logging.
logs_general :: Lens' Logs (Maybe Bool)
instance GHC.Generics.Generic Amazonka.MQ.Types.Logs.Logs
instance GHC.Show.Show Amazonka.MQ.Types.Logs.Logs
instance GHC.Read.Read Amazonka.MQ.Types.Logs.Logs
instance GHC.Classes.Eq Amazonka.MQ.Types.Logs.Logs
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.MQ.Types.Logs.Logs
instance Data.Hashable.Class.Hashable Amazonka.MQ.Types.Logs.Logs
instance Control.DeepSeq.NFData Amazonka.MQ.Types.Logs.Logs
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MQ.Types.Logs.Logs


module Amazonka.MQ.Types.PendingLogs

-- | The list of information about logs to be enabled for the specified
--   broker.
--   
--   <i>See:</i> <a>newPendingLogs</a> smart constructor.
data PendingLogs
PendingLogs' :: Maybe Bool -> Maybe Bool -> PendingLogs

-- | Enables audit logging. Every user management action made using JMX or
--   the ActiveMQ Web Console is logged.
[$sel:audit:PendingLogs'] :: PendingLogs -> Maybe Bool

-- | Enables general logging.
[$sel:general:PendingLogs'] :: PendingLogs -> Maybe Bool

-- | Create a value of <a>PendingLogs</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:audit:PendingLogs'</a>, <a>pendingLogs_audit</a> - Enables
--   audit logging. Every user management action made using JMX or the
--   ActiveMQ Web Console is logged.
--   
--   <a>$sel:general:PendingLogs'</a>, <a>pendingLogs_general</a> - Enables
--   general logging.
newPendingLogs :: PendingLogs

-- | Enables audit logging. Every user management action made using JMX or
--   the ActiveMQ Web Console is logged.
pendingLogs_audit :: Lens' PendingLogs (Maybe Bool)

-- | Enables general logging.
pendingLogs_general :: Lens' PendingLogs (Maybe Bool)
instance GHC.Generics.Generic Amazonka.MQ.Types.PendingLogs.PendingLogs
instance GHC.Show.Show Amazonka.MQ.Types.PendingLogs.PendingLogs
instance GHC.Read.Read Amazonka.MQ.Types.PendingLogs.PendingLogs
instance GHC.Classes.Eq Amazonka.MQ.Types.PendingLogs.PendingLogs
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.MQ.Types.PendingLogs.PendingLogs
instance Data.Hashable.Class.Hashable Amazonka.MQ.Types.PendingLogs.PendingLogs
instance Control.DeepSeq.NFData Amazonka.MQ.Types.PendingLogs.PendingLogs


module Amazonka.MQ.Types.LogsSummary

-- | The list of information about logs currently enabled and pending to be
--   deployed for the specified broker.
--   
--   <i>See:</i> <a>newLogsSummary</a> smart constructor.
data LogsSummary
LogsSummary' :: Maybe PendingLogs -> Maybe Bool -> Maybe Text -> Text -> Bool -> LogsSummary

-- | The list of information about logs pending to be deployed for the
--   specified broker.
[$sel:pending:LogsSummary'] :: LogsSummary -> Maybe PendingLogs

-- | Enables audit logging. Every user management action made using JMX or
--   the ActiveMQ Web Console is logged.
[$sel:audit:LogsSummary'] :: LogsSummary -> Maybe Bool

-- | The location of the CloudWatch Logs log group where audit logs are
--   sent.
[$sel:auditLogGroup:LogsSummary'] :: LogsSummary -> Maybe Text

-- | The location of the CloudWatch Logs log group where general logs are
--   sent.
[$sel:generalLogGroup:LogsSummary'] :: LogsSummary -> Text

-- | Enables general logging.
[$sel:general:LogsSummary'] :: LogsSummary -> Bool

-- | Create a value of <a>LogsSummary</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:pending:LogsSummary'</a>, <a>logsSummary_pending</a> - The
--   list of information about logs pending to be deployed for the
--   specified broker.
--   
--   <a>$sel:audit:LogsSummary'</a>, <a>logsSummary_audit</a> - Enables
--   audit logging. Every user management action made using JMX or the
--   ActiveMQ Web Console is logged.
--   
--   <a>$sel:auditLogGroup:LogsSummary'</a>,
--   <a>logsSummary_auditLogGroup</a> - The location of the CloudWatch Logs
--   log group where audit logs are sent.
--   
--   <a>$sel:generalLogGroup:LogsSummary'</a>,
--   <a>logsSummary_generalLogGroup</a> - The location of the CloudWatch
--   Logs log group where general logs are sent.
--   
--   <a>$sel:general:LogsSummary'</a>, <a>logsSummary_general</a> - Enables
--   general logging.
newLogsSummary :: Text -> Bool -> LogsSummary

-- | The list of information about logs pending to be deployed for the
--   specified broker.
logsSummary_pending :: Lens' LogsSummary (Maybe PendingLogs)

-- | Enables audit logging. Every user management action made using JMX or
--   the ActiveMQ Web Console is logged.
logsSummary_audit :: Lens' LogsSummary (Maybe Bool)

-- | The location of the CloudWatch Logs log group where audit logs are
--   sent.
logsSummary_auditLogGroup :: Lens' LogsSummary (Maybe Text)

-- | The location of the CloudWatch Logs log group where general logs are
--   sent.
logsSummary_generalLogGroup :: Lens' LogsSummary Text

-- | Enables general logging.
logsSummary_general :: Lens' LogsSummary Bool
instance GHC.Generics.Generic Amazonka.MQ.Types.LogsSummary.LogsSummary
instance GHC.Show.Show Amazonka.MQ.Types.LogsSummary.LogsSummary
instance GHC.Read.Read Amazonka.MQ.Types.LogsSummary.LogsSummary
instance GHC.Classes.Eq Amazonka.MQ.Types.LogsSummary.LogsSummary
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.MQ.Types.LogsSummary.LogsSummary
instance Data.Hashable.Class.Hashable Amazonka.MQ.Types.LogsSummary.LogsSummary
instance Control.DeepSeq.NFData Amazonka.MQ.Types.LogsSummary.LogsSummary


module Amazonka.MQ.Types.SanitizationWarningReason

-- | The reason for which the XML elements or attributes were sanitized.
newtype SanitizationWarningReason
SanitizationWarningReason' :: Text -> SanitizationWarningReason
[fromSanitizationWarningReason] :: SanitizationWarningReason -> Text
pattern SanitizationWarningReason_DISALLOWED_ATTRIBUTE_REMOVED :: SanitizationWarningReason
pattern SanitizationWarningReason_DISALLOWED_ELEMENT_REMOVED :: SanitizationWarningReason
pattern SanitizationWarningReason_INVALID_ATTRIBUTE_VALUE_REMOVED :: SanitizationWarningReason
instance Amazonka.Data.XML.ToXML Amazonka.MQ.Types.SanitizationWarningReason.SanitizationWarningReason
instance Amazonka.Data.XML.FromXML Amazonka.MQ.Types.SanitizationWarningReason.SanitizationWarningReason
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.MQ.Types.SanitizationWarningReason.SanitizationWarningReason
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MQ.Types.SanitizationWarningReason.SanitizationWarningReason
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.MQ.Types.SanitizationWarningReason.SanitizationWarningReason
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.MQ.Types.SanitizationWarningReason.SanitizationWarningReason
instance Amazonka.Data.Query.ToQuery Amazonka.MQ.Types.SanitizationWarningReason.SanitizationWarningReason
instance Amazonka.Data.Headers.ToHeader Amazonka.MQ.Types.SanitizationWarningReason.SanitizationWarningReason
instance Amazonka.Data.Log.ToLog Amazonka.MQ.Types.SanitizationWarningReason.SanitizationWarningReason
instance Amazonka.Data.ByteString.ToByteString Amazonka.MQ.Types.SanitizationWarningReason.SanitizationWarningReason
instance Amazonka.Data.Text.ToText Amazonka.MQ.Types.SanitizationWarningReason.SanitizationWarningReason
instance Amazonka.Data.Text.FromText Amazonka.MQ.Types.SanitizationWarningReason.SanitizationWarningReason
instance Control.DeepSeq.NFData Amazonka.MQ.Types.SanitizationWarningReason.SanitizationWarningReason
instance Data.Hashable.Class.Hashable Amazonka.MQ.Types.SanitizationWarningReason.SanitizationWarningReason
instance GHC.Generics.Generic Amazonka.MQ.Types.SanitizationWarningReason.SanitizationWarningReason
instance GHC.Classes.Ord Amazonka.MQ.Types.SanitizationWarningReason.SanitizationWarningReason
instance GHC.Classes.Eq Amazonka.MQ.Types.SanitizationWarningReason.SanitizationWarningReason
instance GHC.Read.Read Amazonka.MQ.Types.SanitizationWarningReason.SanitizationWarningReason
instance GHC.Show.Show Amazonka.MQ.Types.SanitizationWarningReason.SanitizationWarningReason


module Amazonka.MQ.Types.SanitizationWarning

-- | Returns information about the XML element or attribute that was
--   sanitized in the configuration.
--   
--   <i>See:</i> <a>newSanitizationWarning</a> smart constructor.
data SanitizationWarning
SanitizationWarning' :: Maybe Text -> Maybe Text -> SanitizationWarningReason -> SanitizationWarning

-- | The name of the XML attribute that has been sanitized.
[$sel:attributeName:SanitizationWarning'] :: SanitizationWarning -> Maybe Text

-- | The name of the XML element that has been sanitized.
[$sel:elementName:SanitizationWarning'] :: SanitizationWarning -> Maybe Text

-- | Required. The reason for which the XML elements or attributes were
--   sanitized.
[$sel:reason:SanitizationWarning'] :: SanitizationWarning -> SanitizationWarningReason

-- | Create a value of <a>SanitizationWarning</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:attributeName:SanitizationWarning'</a>,
--   <a>sanitizationWarning_attributeName</a> - The name of the XML
--   attribute that has been sanitized.
--   
--   <a>$sel:elementName:SanitizationWarning'</a>,
--   <a>sanitizationWarning_elementName</a> - The name of the XML element
--   that has been sanitized.
--   
--   <a>$sel:reason:SanitizationWarning'</a>,
--   <a>sanitizationWarning_reason</a> - Required. The reason for which the
--   XML elements or attributes were sanitized.
newSanitizationWarning :: SanitizationWarningReason -> SanitizationWarning

-- | The name of the XML attribute that has been sanitized.
sanitizationWarning_attributeName :: Lens' SanitizationWarning (Maybe Text)

-- | The name of the XML element that has been sanitized.
sanitizationWarning_elementName :: Lens' SanitizationWarning (Maybe Text)

-- | Required. The reason for which the XML elements or attributes were
--   sanitized.
sanitizationWarning_reason :: Lens' SanitizationWarning SanitizationWarningReason
instance GHC.Generics.Generic Amazonka.MQ.Types.SanitizationWarning.SanitizationWarning
instance GHC.Show.Show Amazonka.MQ.Types.SanitizationWarning.SanitizationWarning
instance GHC.Read.Read Amazonka.MQ.Types.SanitizationWarning.SanitizationWarning
instance GHC.Classes.Eq Amazonka.MQ.Types.SanitizationWarning.SanitizationWarning
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.MQ.Types.SanitizationWarning.SanitizationWarning
instance Data.Hashable.Class.Hashable Amazonka.MQ.Types.SanitizationWarning.SanitizationWarning
instance Control.DeepSeq.NFData Amazonka.MQ.Types.SanitizationWarning.SanitizationWarning


module Amazonka.MQ.Types.User

-- | A user associated with the broker. For RabbitMQ brokers, one and only
--   one administrative user is accepted and created when a broker is first
--   provisioned. All subsequent broker users are created by making
--   RabbitMQ API calls directly to brokers or via the RabbitMQ web
--   console.
--   
--   <i>See:</i> <a>newUser</a> smart constructor.
data User
User' :: Maybe [Text] -> Maybe Bool -> Text -> Text -> User

-- | The list of groups (20 maximum) to which the ActiveMQ user belongs.
--   This value can contain only alphanumeric characters, dashes, periods,
--   underscores, and tildes (- . _ ~). This value must be 2-100 characters
--   long. Does not apply to RabbitMQ brokers.
[$sel:groups:User'] :: User -> Maybe [Text]

-- | Enables access to the ActiveMQ Web Console for the ActiveMQ user. Does
--   not apply to RabbitMQ brokers.
[$sel:consoleAccess:User'] :: User -> Maybe Bool

-- | important&gt;
--   
--   Amazon MQ for ActiveMQ
--   
--   For ActiveMQ brokers, this value can contain only alphanumeric
--   characters, dashes, periods, underscores, and tildes (- . _ ~). This
--   value must be 2-100 characters long.
--   
--   /important&gt;
--   
--   Amazon MQ for RabbitMQ
--   
--   For RabbitMQ brokers, this value can contain only alphanumeric
--   characters, dashes, periods, underscores (- . _). This value must not
--   contain a tilde (~) character. Amazon MQ prohibts using guest as a
--   valid usename. This value must be 2-100 characters long.
[$sel:username:User'] :: User -> Text

-- | Required. The password of the user. This value must be at least 12
--   characters long, must contain at least 4 unique characters, and must
--   not contain commas, colons, or equal signs (,:=).
[$sel:password:User'] :: User -> Text

-- | Create a value of <a>User</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:groups:User'</a>, <a>user_groups</a> - The list of groups (20
--   maximum) to which the ActiveMQ user belongs. This value can contain
--   only alphanumeric characters, dashes, periods, underscores, and tildes
--   (- . _ ~). This value must be 2-100 characters long. Does not apply to
--   RabbitMQ brokers.
--   
--   <a>$sel:consoleAccess:User'</a>, <a>user_consoleAccess</a> - Enables
--   access to the ActiveMQ Web Console for the ActiveMQ user. Does not
--   apply to RabbitMQ brokers.
--   
--   <a>$sel:username:User'</a>, <a>user_username</a> - important&gt;
--   
--   Amazon MQ for ActiveMQ
--   
--   For ActiveMQ brokers, this value can contain only alphanumeric
--   characters, dashes, periods, underscores, and tildes (- . _ ~). This
--   value must be 2-100 characters long.
--   
--   /important&gt;
--   
--   Amazon MQ for RabbitMQ
--   
--   For RabbitMQ brokers, this value can contain only alphanumeric
--   characters, dashes, periods, underscores (- . _). This value must not
--   contain a tilde (~) character. Amazon MQ prohibts using guest as a
--   valid usename. This value must be 2-100 characters long.
--   
--   <a>$sel:password:User'</a>, <a>user_password</a> - Required. The
--   password of the user. This value must be at least 12 characters long,
--   must contain at least 4 unique characters, and must not contain
--   commas, colons, or equal signs (,:=).
newUser :: Text -> Text -> User

-- | The list of groups (20 maximum) to which the ActiveMQ user belongs.
--   This value can contain only alphanumeric characters, dashes, periods,
--   underscores, and tildes (- . _ ~). This value must be 2-100 characters
--   long. Does not apply to RabbitMQ brokers.
user_groups :: Lens' User (Maybe [Text])

-- | Enables access to the ActiveMQ Web Console for the ActiveMQ user. Does
--   not apply to RabbitMQ brokers.
user_consoleAccess :: Lens' User (Maybe Bool)

-- | important&gt;
--   
--   Amazon MQ for ActiveMQ
--   
--   For ActiveMQ brokers, this value can contain only alphanumeric
--   characters, dashes, periods, underscores, and tildes (- . _ ~). This
--   value must be 2-100 characters long.
--   
--   /important&gt;
--   
--   Amazon MQ for RabbitMQ
--   
--   For RabbitMQ brokers, this value can contain only alphanumeric
--   characters, dashes, periods, underscores (- . _). This value must not
--   contain a tilde (~) character. Amazon MQ prohibts using guest as a
--   valid usename. This value must be 2-100 characters long.
user_username :: Lens' User Text

-- | Required. The password of the user. This value must be at least 12
--   characters long, must contain at least 4 unique characters, and must
--   not contain commas, colons, or equal signs (,:=).
user_password :: Lens' User Text
instance GHC.Generics.Generic Amazonka.MQ.Types.User.User
instance GHC.Show.Show Amazonka.MQ.Types.User.User
instance GHC.Read.Read Amazonka.MQ.Types.User.User
instance GHC.Classes.Eq Amazonka.MQ.Types.User.User
instance Data.Hashable.Class.Hashable Amazonka.MQ.Types.User.User
instance Control.DeepSeq.NFData Amazonka.MQ.Types.User.User
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MQ.Types.User.User


module Amazonka.MQ.Types.UserPendingChanges

-- | Returns information about the status of the changes pending for the
--   ActiveMQ user.
--   
--   <i>See:</i> <a>newUserPendingChanges</a> smart constructor.
data UserPendingChanges
UserPendingChanges' :: Maybe [Text] -> Maybe Bool -> ChangeType -> UserPendingChanges

-- | The list of groups (20 maximum) to which the ActiveMQ user belongs.
--   This value can contain only alphanumeric characters, dashes, periods,
--   underscores, and tildes (- . _ ~). This value must be 2-100 characters
--   long.
[$sel:groups:UserPendingChanges'] :: UserPendingChanges -> Maybe [Text]

-- | Enables access to the the ActiveMQ Web Console for the ActiveMQ user.
[$sel:consoleAccess:UserPendingChanges'] :: UserPendingChanges -> Maybe Bool

-- | Required. The type of change pending for the ActiveMQ user.
[$sel:pendingChange:UserPendingChanges'] :: UserPendingChanges -> ChangeType

-- | Create a value of <a>UserPendingChanges</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:groups:UserPendingChanges'</a>,
--   <a>userPendingChanges_groups</a> - The list of groups (20 maximum) to
--   which the ActiveMQ user belongs. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 2-100 characters long.
--   
--   <a>$sel:consoleAccess:UserPendingChanges'</a>,
--   <a>userPendingChanges_consoleAccess</a> - Enables access to the the
--   ActiveMQ Web Console for the ActiveMQ user.
--   
--   <a>$sel:pendingChange:UserPendingChanges'</a>,
--   <a>userPendingChanges_pendingChange</a> - Required. The type of change
--   pending for the ActiveMQ user.
newUserPendingChanges :: ChangeType -> UserPendingChanges

-- | The list of groups (20 maximum) to which the ActiveMQ user belongs.
--   This value can contain only alphanumeric characters, dashes, periods,
--   underscores, and tildes (- . _ ~). This value must be 2-100 characters
--   long.
userPendingChanges_groups :: Lens' UserPendingChanges (Maybe [Text])

-- | Enables access to the the ActiveMQ Web Console for the ActiveMQ user.
userPendingChanges_consoleAccess :: Lens' UserPendingChanges (Maybe Bool)

-- | Required. The type of change pending for the ActiveMQ user.
userPendingChanges_pendingChange :: Lens' UserPendingChanges ChangeType
instance GHC.Generics.Generic Amazonka.MQ.Types.UserPendingChanges.UserPendingChanges
instance GHC.Show.Show Amazonka.MQ.Types.UserPendingChanges.UserPendingChanges
instance GHC.Read.Read Amazonka.MQ.Types.UserPendingChanges.UserPendingChanges
instance GHC.Classes.Eq Amazonka.MQ.Types.UserPendingChanges.UserPendingChanges
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.MQ.Types.UserPendingChanges.UserPendingChanges
instance Data.Hashable.Class.Hashable Amazonka.MQ.Types.UserPendingChanges.UserPendingChanges
instance Control.DeepSeq.NFData Amazonka.MQ.Types.UserPendingChanges.UserPendingChanges


module Amazonka.MQ.Types.UserSummary

-- | Returns a list of all broker users. Does not apply to RabbitMQ
--   brokers.
--   
--   <i>See:</i> <a>newUserSummary</a> smart constructor.
data UserSummary
UserSummary' :: Maybe ChangeType -> Text -> UserSummary

-- | The type of change pending for the broker user.
[$sel:pendingChange:UserSummary'] :: UserSummary -> Maybe ChangeType

-- | Required. The username of the broker user. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 2-100 characters long.
[$sel:username:UserSummary'] :: UserSummary -> Text

-- | Create a value of <a>UserSummary</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:pendingChange:UserSummary'</a>,
--   <a>userSummary_pendingChange</a> - The type of change pending for the
--   broker user.
--   
--   <a>$sel:username:UserSummary'</a>, <a>userSummary_username</a> -
--   Required. The username of the broker user. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 2-100 characters long.
newUserSummary :: Text -> UserSummary

-- | The type of change pending for the broker user.
userSummary_pendingChange :: Lens' UserSummary (Maybe ChangeType)

-- | Required. The username of the broker user. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 2-100 characters long.
userSummary_username :: Lens' UserSummary Text
instance GHC.Generics.Generic Amazonka.MQ.Types.UserSummary.UserSummary
instance GHC.Show.Show Amazonka.MQ.Types.UserSummary.UserSummary
instance GHC.Read.Read Amazonka.MQ.Types.UserSummary.UserSummary
instance GHC.Classes.Eq Amazonka.MQ.Types.UserSummary.UserSummary
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.MQ.Types.UserSummary.UserSummary
instance Data.Hashable.Class.Hashable Amazonka.MQ.Types.UserSummary.UserSummary
instance Control.DeepSeq.NFData Amazonka.MQ.Types.UserSummary.UserSummary


module Amazonka.MQ.Types.WeeklyStartTime

-- | The scheduled time period relative to UTC during which Amazon MQ
--   begins to apply pending updates or patches to the broker.
--   
--   <i>See:</i> <a>newWeeklyStartTime</a> smart constructor.
data WeeklyStartTime
WeeklyStartTime' :: Maybe Text -> Text -> DayOfWeek -> WeeklyStartTime

-- | The time zone, UTC by default, in either the Country/City format, or
--   the UTC offset format.
[$sel:timeZone:WeeklyStartTime'] :: WeeklyStartTime -> Maybe Text

-- | Required. The time, in 24-hour format.
[$sel:timeOfDay:WeeklyStartTime'] :: WeeklyStartTime -> Text

-- | Required. The day of the week.
[$sel:dayOfWeek:WeeklyStartTime'] :: WeeklyStartTime -> DayOfWeek

-- | Create a value of <a>WeeklyStartTime</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:timeZone:WeeklyStartTime'</a>, <a>weeklyStartTime_timeZone</a>
--   - The time zone, UTC by default, in either the Country/City format, or
--   the UTC offset format.
--   
--   <a>$sel:timeOfDay:WeeklyStartTime'</a>,
--   <a>weeklyStartTime_timeOfDay</a> - Required. The time, in 24-hour
--   format.
--   
--   <a>$sel:dayOfWeek:WeeklyStartTime'</a>,
--   <a>weeklyStartTime_dayOfWeek</a> - Required. The day of the week.
newWeeklyStartTime :: Text -> DayOfWeek -> WeeklyStartTime

-- | The time zone, UTC by default, in either the Country/City format, or
--   the UTC offset format.
weeklyStartTime_timeZone :: Lens' WeeklyStartTime (Maybe Text)

-- | Required. The time, in 24-hour format.
weeklyStartTime_timeOfDay :: Lens' WeeklyStartTime Text

-- | Required. The day of the week.
weeklyStartTime_dayOfWeek :: Lens' WeeklyStartTime DayOfWeek
instance GHC.Generics.Generic Amazonka.MQ.Types.WeeklyStartTime.WeeklyStartTime
instance GHC.Show.Show Amazonka.MQ.Types.WeeklyStartTime.WeeklyStartTime
instance GHC.Read.Read Amazonka.MQ.Types.WeeklyStartTime.WeeklyStartTime
instance GHC.Classes.Eq Amazonka.MQ.Types.WeeklyStartTime.WeeklyStartTime
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.MQ.Types.WeeklyStartTime.WeeklyStartTime
instance Data.Hashable.Class.Hashable Amazonka.MQ.Types.WeeklyStartTime.WeeklyStartTime
instance Control.DeepSeq.NFData Amazonka.MQ.Types.WeeklyStartTime.WeeklyStartTime
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MQ.Types.WeeklyStartTime.WeeklyStartTime


module Amazonka.MQ.Types

-- | API version <tt>2017-11-27</tt> of the Amazon MQ SDK configuration.
defaultService :: Service

-- | Returns information about an error.
_ConflictException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Returns information about an error.
_ForbiddenException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Returns information about an error.
_NotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Returns information about an error.
_InternalServerErrorException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Returns information about an error.
_UnauthorizedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Returns information about an error.
_BadRequestException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Optional. The authentication strategy used to secure the broker. The
--   default is SIMPLE.
newtype AuthenticationStrategy
AuthenticationStrategy' :: Text -> AuthenticationStrategy
[fromAuthenticationStrategy] :: AuthenticationStrategy -> Text
pattern AuthenticationStrategy_LDAP :: AuthenticationStrategy
pattern AuthenticationStrategy_SIMPLE :: AuthenticationStrategy

-- | The broker's status.
newtype BrokerState
BrokerState' :: Text -> BrokerState
[fromBrokerState] :: BrokerState -> Text
pattern BrokerState_CREATION_FAILED :: BrokerState
pattern BrokerState_CREATION_IN_PROGRESS :: BrokerState
pattern BrokerState_DELETION_IN_PROGRESS :: BrokerState
pattern BrokerState_REBOOT_IN_PROGRESS :: BrokerState
pattern BrokerState_RUNNING :: BrokerState

-- | The broker's storage type.
--   
--   EFS is not supported for RabbitMQ engine type.
newtype BrokerStorageType
BrokerStorageType' :: Text -> BrokerStorageType
[fromBrokerStorageType] :: BrokerStorageType -> Text
pattern BrokerStorageType_EBS :: BrokerStorageType
pattern BrokerStorageType_EFS :: BrokerStorageType

-- | The type of change pending for the ActiveMQ user.
newtype ChangeType
ChangeType' :: Text -> ChangeType
[fromChangeType] :: ChangeType -> Text
pattern ChangeType_CREATE :: ChangeType
pattern ChangeType_DELETE :: ChangeType
pattern ChangeType_UPDATE :: ChangeType
newtype DayOfWeek
DayOfWeek' :: Text -> DayOfWeek
[fromDayOfWeek] :: DayOfWeek -> Text
pattern DayOfWeek_FRIDAY :: DayOfWeek
pattern DayOfWeek_MONDAY :: DayOfWeek
pattern DayOfWeek_SATURDAY :: DayOfWeek
pattern DayOfWeek_SUNDAY :: DayOfWeek
pattern DayOfWeek_THURSDAY :: DayOfWeek
pattern DayOfWeek_TUESDAY :: DayOfWeek
pattern DayOfWeek_WEDNESDAY :: DayOfWeek

-- | The broker's deployment mode.
newtype DeploymentMode
DeploymentMode' :: Text -> DeploymentMode
[fromDeploymentMode] :: DeploymentMode -> Text
pattern DeploymentMode_ACTIVE_STANDBY_MULTI_AZ :: DeploymentMode
pattern DeploymentMode_CLUSTER_MULTI_AZ :: DeploymentMode
pattern DeploymentMode_SINGLE_INSTANCE :: DeploymentMode

-- | The type of broker engine. Amazon MQ supports ActiveMQ and RabbitMQ.
newtype EngineType
EngineType' :: Text -> EngineType
[fromEngineType] :: EngineType -> Text
pattern EngineType_ACTIVEMQ :: EngineType
pattern EngineType_RABBITMQ :: EngineType

-- | The reason for which the XML elements or attributes were sanitized.
newtype SanitizationWarningReason
SanitizationWarningReason' :: Text -> SanitizationWarningReason
[fromSanitizationWarningReason] :: SanitizationWarningReason -> Text
pattern SanitizationWarningReason_DISALLOWED_ATTRIBUTE_REMOVED :: SanitizationWarningReason
pattern SanitizationWarningReason_DISALLOWED_ELEMENT_REMOVED :: SanitizationWarningReason
pattern SanitizationWarningReason_INVALID_ATTRIBUTE_VALUE_REMOVED :: SanitizationWarningReason

-- | Name of the availability zone.
--   
--   <i>See:</i> <a>newAvailabilityZone</a> smart constructor.
data AvailabilityZone
AvailabilityZone' :: Maybe Text -> AvailabilityZone

-- | Id for the availability zone.
[$sel:name:AvailabilityZone'] :: AvailabilityZone -> Maybe Text

-- | Create a value of <a>AvailabilityZone</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:name:AvailabilityZone'</a>, <a>availabilityZone_name</a> - Id
--   for the availability zone.
newAvailabilityZone :: AvailabilityZone

-- | Id for the availability zone.
availabilityZone_name :: Lens' AvailabilityZone (Maybe Text)

-- | Types of broker engines.
--   
--   <i>See:</i> <a>newBrokerEngineType</a> smart constructor.
data BrokerEngineType
BrokerEngineType' :: Maybe [EngineVersion] -> Maybe EngineType -> BrokerEngineType

-- | The list of engine versions.
[$sel:engineVersions:BrokerEngineType'] :: BrokerEngineType -> Maybe [EngineVersion]

-- | The broker's engine type.
[$sel:engineType:BrokerEngineType'] :: BrokerEngineType -> Maybe EngineType

-- | Create a value of <a>BrokerEngineType</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:engineVersions:BrokerEngineType'</a>,
--   <a>brokerEngineType_engineVersions</a> - The list of engine versions.
--   
--   <a>$sel:engineType:BrokerEngineType'</a>,
--   <a>brokerEngineType_engineType</a> - The broker's engine type.
newBrokerEngineType :: BrokerEngineType

-- | The list of engine versions.
brokerEngineType_engineVersions :: Lens' BrokerEngineType (Maybe [EngineVersion])

-- | The broker's engine type.
brokerEngineType_engineType :: Lens' BrokerEngineType (Maybe EngineType)

-- | Returns information about all brokers.
--   
--   <i>See:</i> <a>newBrokerInstance</a> smart constructor.
data BrokerInstance
BrokerInstance' :: Maybe Text -> Maybe Text -> Maybe [Text] -> BrokerInstance

-- | The IP address of the Elastic Network Interface (ENI) attached to the
--   broker. Does not apply to RabbitMQ brokers.
[$sel:ipAddress:BrokerInstance'] :: BrokerInstance -> Maybe Text

-- | The brokers web console URL.
[$sel:consoleURL:BrokerInstance'] :: BrokerInstance -> Maybe Text

-- | The broker's wire-level protocol endpoints.
[$sel:endpoints:BrokerInstance'] :: BrokerInstance -> Maybe [Text]

-- | Create a value of <a>BrokerInstance</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:ipAddress:BrokerInstance'</a>, <a>brokerInstance_ipAddress</a>
--   - The IP address of the Elastic Network Interface (ENI) attached to
--   the broker. Does not apply to RabbitMQ brokers.
--   
--   <a>$sel:consoleURL:BrokerInstance'</a>,
--   <a>brokerInstance_consoleURL</a> - The brokers web console URL.
--   
--   <a>$sel:endpoints:BrokerInstance'</a>, <a>brokerInstance_endpoints</a>
--   - The broker's wire-level protocol endpoints.
newBrokerInstance :: BrokerInstance

-- | The IP address of the Elastic Network Interface (ENI) attached to the
--   broker. Does not apply to RabbitMQ brokers.
brokerInstance_ipAddress :: Lens' BrokerInstance (Maybe Text)

-- | The brokers web console URL.
brokerInstance_consoleURL :: Lens' BrokerInstance (Maybe Text)

-- | The broker's wire-level protocol endpoints.
brokerInstance_endpoints :: Lens' BrokerInstance (Maybe [Text])

-- | Option for host instance type.
--   
--   <i>See:</i> <a>newBrokerInstanceOption</a> smart constructor.
data BrokerInstanceOption
BrokerInstanceOption' :: Maybe [Text] -> Maybe [AvailabilityZone] -> Maybe [DeploymentMode] -> Maybe EngineType -> Maybe Text -> Maybe BrokerStorageType -> BrokerInstanceOption

-- | The list of supported engine versions.
[$sel:supportedEngineVersions:BrokerInstanceOption'] :: BrokerInstanceOption -> Maybe [Text]

-- | The list of available az.
[$sel:availabilityZones:BrokerInstanceOption'] :: BrokerInstanceOption -> Maybe [AvailabilityZone]

-- | The list of supported deployment modes.
[$sel:supportedDeploymentModes:BrokerInstanceOption'] :: BrokerInstanceOption -> Maybe [DeploymentMode]

-- | The broker's engine type.
[$sel:engineType:BrokerInstanceOption'] :: BrokerInstanceOption -> Maybe EngineType

-- | The broker's instance type.
[$sel:hostInstanceType:BrokerInstanceOption'] :: BrokerInstanceOption -> Maybe Text

-- | The broker's storage type.
[$sel:storageType:BrokerInstanceOption'] :: BrokerInstanceOption -> Maybe BrokerStorageType

-- | Create a value of <a>BrokerInstanceOption</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:supportedEngineVersions:BrokerInstanceOption'</a>,
--   <a>brokerInstanceOption_supportedEngineVersions</a> - The list of
--   supported engine versions.
--   
--   <a>$sel:availabilityZones:BrokerInstanceOption'</a>,
--   <a>brokerInstanceOption_availabilityZones</a> - The list of available
--   az.
--   
--   <a>$sel:supportedDeploymentModes:BrokerInstanceOption'</a>,
--   <a>brokerInstanceOption_supportedDeploymentModes</a> - The list of
--   supported deployment modes.
--   
--   <a>$sel:engineType:BrokerInstanceOption'</a>,
--   <a>brokerInstanceOption_engineType</a> - The broker's engine type.
--   
--   <a>$sel:hostInstanceType:BrokerInstanceOption'</a>,
--   <a>brokerInstanceOption_hostInstanceType</a> - The broker's instance
--   type.
--   
--   <a>$sel:storageType:BrokerInstanceOption'</a>,
--   <a>brokerInstanceOption_storageType</a> - The broker's storage type.
newBrokerInstanceOption :: BrokerInstanceOption

-- | The list of supported engine versions.
brokerInstanceOption_supportedEngineVersions :: Lens' BrokerInstanceOption (Maybe [Text])

-- | The list of available az.
brokerInstanceOption_availabilityZones :: Lens' BrokerInstanceOption (Maybe [AvailabilityZone])

-- | The list of supported deployment modes.
brokerInstanceOption_supportedDeploymentModes :: Lens' BrokerInstanceOption (Maybe [DeploymentMode])

-- | The broker's engine type.
brokerInstanceOption_engineType :: Lens' BrokerInstanceOption (Maybe EngineType)

-- | The broker's instance type.
brokerInstanceOption_hostInstanceType :: Lens' BrokerInstanceOption (Maybe Text)

-- | The broker's storage type.
brokerInstanceOption_storageType :: Lens' BrokerInstanceOption (Maybe BrokerStorageType)

-- | Returns information about all brokers.
--   
--   <i>See:</i> <a>newBrokerSummary</a> smart constructor.
data BrokerSummary
BrokerSummary' :: Maybe Text -> Maybe BrokerState -> Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe Text -> DeploymentMode -> EngineType -> BrokerSummary

-- | The broker's name. This value is unique in your AWS account, 1-50
--   characters long, and containing only letters, numbers, dashes, and
--   underscores, and must not contain white spaces, brackets, wildcard
--   characters, or special characters.
[$sel:brokerName:BrokerSummary'] :: BrokerSummary -> Maybe Text

-- | The broker's status.
[$sel:brokerState:BrokerSummary'] :: BrokerSummary -> Maybe BrokerState

-- | The time when the broker was created.
[$sel:created:BrokerSummary'] :: BrokerSummary -> Maybe POSIX

-- | The unique ID that Amazon MQ generates for the broker.
[$sel:brokerId:BrokerSummary'] :: BrokerSummary -> Maybe Text

-- | The broker's Amazon Resource Name (ARN).
[$sel:brokerArn:BrokerSummary'] :: BrokerSummary -> Maybe Text

-- | The broker's instance type.
[$sel:hostInstanceType:BrokerSummary'] :: BrokerSummary -> Maybe Text

-- | The broker's deployment mode.
[$sel:deploymentMode:BrokerSummary'] :: BrokerSummary -> DeploymentMode

-- | The type of broker engine.
[$sel:engineType:BrokerSummary'] :: BrokerSummary -> EngineType

-- | Create a value of <a>BrokerSummary</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:brokerName:BrokerSummary'</a>, <a>brokerSummary_brokerName</a>
--   - The broker's name. This value is unique in your AWS account, 1-50
--   characters long, and containing only letters, numbers, dashes, and
--   underscores, and must not contain white spaces, brackets, wildcard
--   characters, or special characters.
--   
--   <a>$sel:brokerState:BrokerSummary'</a>,
--   <a>brokerSummary_brokerState</a> - The broker's status.
--   
--   <a>$sel:created:BrokerSummary'</a>, <a>brokerSummary_created</a> - The
--   time when the broker was created.
--   
--   <a>$sel:brokerId:BrokerSummary'</a>, <a>brokerSummary_brokerId</a> -
--   The unique ID that Amazon MQ generates for the broker.
--   
--   <a>$sel:brokerArn:BrokerSummary'</a>, <a>brokerSummary_brokerArn</a> -
--   The broker's Amazon Resource Name (ARN).
--   
--   <a>$sel:hostInstanceType:BrokerSummary'</a>,
--   <a>brokerSummary_hostInstanceType</a> - The broker's instance type.
--   
--   <a>$sel:deploymentMode:BrokerSummary'</a>,
--   <a>brokerSummary_deploymentMode</a> - The broker's deployment mode.
--   
--   <a>$sel:engineType:BrokerSummary'</a>, <a>brokerSummary_engineType</a>
--   - The type of broker engine.
newBrokerSummary :: DeploymentMode -> EngineType -> BrokerSummary

-- | The broker's name. This value is unique in your AWS account, 1-50
--   characters long, and containing only letters, numbers, dashes, and
--   underscores, and must not contain white spaces, brackets, wildcard
--   characters, or special characters.
brokerSummary_brokerName :: Lens' BrokerSummary (Maybe Text)

-- | The broker's status.
brokerSummary_brokerState :: Lens' BrokerSummary (Maybe BrokerState)

-- | The time when the broker was created.
brokerSummary_created :: Lens' BrokerSummary (Maybe UTCTime)

-- | The unique ID that Amazon MQ generates for the broker.
brokerSummary_brokerId :: Lens' BrokerSummary (Maybe Text)

-- | The broker's Amazon Resource Name (ARN).
brokerSummary_brokerArn :: Lens' BrokerSummary (Maybe Text)

-- | The broker's instance type.
brokerSummary_hostInstanceType :: Lens' BrokerSummary (Maybe Text)

-- | The broker's deployment mode.
brokerSummary_deploymentMode :: Lens' BrokerSummary DeploymentMode

-- | The type of broker engine.
brokerSummary_engineType :: Lens' BrokerSummary EngineType

-- | Returns information about all configurations.
--   
--   <i>See:</i> <a>newConfiguration</a> smart constructor.
data Configuration
Configuration' :: Maybe (HashMap Text Text) -> Text -> Text -> ConfigurationRevision -> AuthenticationStrategy -> EngineType -> Text -> Text -> Text -> POSIX -> Configuration

-- | The list of all tags associated with this configuration.
[$sel:tags:Configuration'] :: Configuration -> Maybe (HashMap Text Text)

-- | Required. The description of the configuration.
[$sel:description:Configuration'] :: Configuration -> Text

-- | Required. The broker engine's version. For a list of supported engine
--   versions, see, <a>Supported engines</a>.
[$sel:engineVersion:Configuration'] :: Configuration -> Text

-- | Required. The latest revision of the configuration.
[$sel:latestRevision:Configuration'] :: Configuration -> ConfigurationRevision

-- | Optional. The authentication strategy associated with the
--   configuration. The default is SIMPLE.
[$sel:authenticationStrategy:Configuration'] :: Configuration -> AuthenticationStrategy

-- | Required. The type of broker engine. Currently, Amazon MQ supports
--   ACTIVEMQ and RABBITMQ.
[$sel:engineType:Configuration'] :: Configuration -> EngineType

-- | Required. The unique ID that Amazon MQ generates for the
--   configuration.
[$sel:id:Configuration'] :: Configuration -> Text

-- | Required. The ARN of the configuration.
[$sel:arn:Configuration'] :: Configuration -> Text

-- | Required. The name of the configuration. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 1-150 characters long.
[$sel:name:Configuration'] :: Configuration -> Text

-- | Required. The date and time of the configuration revision.
[$sel:created:Configuration'] :: Configuration -> POSIX

-- | Create a value of <a>Configuration</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tags:Configuration'</a>, <a>configuration_tags</a> - The list
--   of all tags associated with this configuration.
--   
--   <a>$sel:description:Configuration'</a>,
--   <a>configuration_description</a> - Required. The description of the
--   configuration.
--   
--   <a>$sel:engineVersion:Configuration'</a>,
--   <a>configuration_engineVersion</a> - Required. The broker engine's
--   version. For a list of supported engine versions, see, <a>Supported
--   engines</a>.
--   
--   <a>$sel:latestRevision:Configuration'</a>,
--   <a>configuration_latestRevision</a> - Required. The latest revision of
--   the configuration.
--   
--   <a>$sel:authenticationStrategy:Configuration'</a>,
--   <a>configuration_authenticationStrategy</a> - Optional. The
--   authentication strategy associated with the configuration. The default
--   is SIMPLE.
--   
--   <a>$sel:engineType:Configuration'</a>, <a>configuration_engineType</a>
--   - Required. The type of broker engine. Currently, Amazon MQ supports
--   ACTIVEMQ and RABBITMQ.
--   
--   <a>$sel:id:Configuration'</a>, <a>configuration_id</a> - Required. The
--   unique ID that Amazon MQ generates for the configuration.
--   
--   <a>$sel:arn:Configuration'</a>, <a>configuration_arn</a> - Required.
--   The ARN of the configuration.
--   
--   <a>$sel:name:Configuration'</a>, <a>configuration_name</a> - Required.
--   The name of the configuration. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 1-150 characters long.
--   
--   <a>$sel:created:Configuration'</a>, <a>configuration_created</a> -
--   Required. The date and time of the configuration revision.
newConfiguration :: Text -> Text -> ConfigurationRevision -> AuthenticationStrategy -> EngineType -> Text -> Text -> Text -> UTCTime -> Configuration

-- | The list of all tags associated with this configuration.
configuration_tags :: Lens' Configuration (Maybe (HashMap Text Text))

-- | Required. The description of the configuration.
configuration_description :: Lens' Configuration Text

-- | Required. The broker engine's version. For a list of supported engine
--   versions, see, <a>Supported engines</a>.
configuration_engineVersion :: Lens' Configuration Text

-- | Required. The latest revision of the configuration.
configuration_latestRevision :: Lens' Configuration ConfigurationRevision

-- | Optional. The authentication strategy associated with the
--   configuration. The default is SIMPLE.
configuration_authenticationStrategy :: Lens' Configuration AuthenticationStrategy

-- | Required. The type of broker engine. Currently, Amazon MQ supports
--   ACTIVEMQ and RABBITMQ.
configuration_engineType :: Lens' Configuration EngineType

-- | Required. The unique ID that Amazon MQ generates for the
--   configuration.
configuration_id :: Lens' Configuration Text

-- | Required. The ARN of the configuration.
configuration_arn :: Lens' Configuration Text

-- | Required. The name of the configuration. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 1-150 characters long.
configuration_name :: Lens' Configuration Text

-- | Required. The date and time of the configuration revision.
configuration_created :: Lens' Configuration UTCTime

-- | A list of information about the configuration.
--   
--   Does not apply to RabbitMQ brokers.
--   
--   <i>See:</i> <a>newConfigurationId</a> smart constructor.
data ConfigurationId
ConfigurationId' :: Maybe Int -> Text -> ConfigurationId

-- | The revision number of the configuration.
[$sel:revision:ConfigurationId'] :: ConfigurationId -> Maybe Int

-- | Required. The unique ID that Amazon MQ generates for the
--   configuration.
[$sel:id:ConfigurationId'] :: ConfigurationId -> Text

-- | Create a value of <a>ConfigurationId</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:revision:ConfigurationId'</a>, <a>configurationId_revision</a>
--   - The revision number of the configuration.
--   
--   <a>$sel:id:ConfigurationId'</a>, <a>configurationId_id</a> - Required.
--   The unique ID that Amazon MQ generates for the configuration.
newConfigurationId :: Text -> ConfigurationId

-- | The revision number of the configuration.
configurationId_revision :: Lens' ConfigurationId (Maybe Int)

-- | Required. The unique ID that Amazon MQ generates for the
--   configuration.
configurationId_id :: Lens' ConfigurationId Text

-- | Returns information about the specified configuration revision.
--   
--   <i>See:</i> <a>newConfigurationRevision</a> smart constructor.
data ConfigurationRevision
ConfigurationRevision' :: Maybe Text -> Int -> POSIX -> ConfigurationRevision

-- | The description of the configuration revision.
[$sel:description:ConfigurationRevision'] :: ConfigurationRevision -> Maybe Text

-- | Required. The revision number of the configuration.
[$sel:revision:ConfigurationRevision'] :: ConfigurationRevision -> Int

-- | Required. The date and time of the configuration revision.
[$sel:created:ConfigurationRevision'] :: ConfigurationRevision -> POSIX

-- | Create a value of <a>ConfigurationRevision</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:description:ConfigurationRevision'</a>,
--   <a>configurationRevision_description</a> - The description of the
--   configuration revision.
--   
--   <a>$sel:revision:ConfigurationRevision'</a>,
--   <a>configurationRevision_revision</a> - Required. The revision number
--   of the configuration.
--   
--   <a>$sel:created:ConfigurationRevision'</a>,
--   <a>configurationRevision_created</a> - Required. The date and time of
--   the configuration revision.
newConfigurationRevision :: Int -> UTCTime -> ConfigurationRevision

-- | The description of the configuration revision.
configurationRevision_description :: Lens' ConfigurationRevision (Maybe Text)

-- | Required. The revision number of the configuration.
configurationRevision_revision :: Lens' ConfigurationRevision Int

-- | Required. The date and time of the configuration revision.
configurationRevision_created :: Lens' ConfigurationRevision UTCTime

-- | Broker configuration information
--   
--   <i>See:</i> <a>newConfigurations</a> smart constructor.
data Configurations
Configurations' :: Maybe ConfigurationId -> Maybe [ConfigurationId] -> Maybe ConfigurationId -> Configurations

-- | The broker's pending configuration.
[$sel:pending:Configurations'] :: Configurations -> Maybe ConfigurationId

-- | The history of configurations applied to the broker.
[$sel:history:Configurations'] :: Configurations -> Maybe [ConfigurationId]

-- | The broker's current configuration.
[$sel:current:Configurations'] :: Configurations -> Maybe ConfigurationId

-- | Create a value of <a>Configurations</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:pending:Configurations'</a>, <a>configurations_pending</a> -
--   The broker's pending configuration.
--   
--   <a>$sel:history:Configurations'</a>, <a>configurations_history</a> -
--   The history of configurations applied to the broker.
--   
--   <a>$sel:current:Configurations'</a>, <a>configurations_current</a> -
--   The broker's current configuration.
newConfigurations :: Configurations

-- | The broker's pending configuration.
configurations_pending :: Lens' Configurations (Maybe ConfigurationId)

-- | The history of configurations applied to the broker.
configurations_history :: Lens' Configurations (Maybe [ConfigurationId])

-- | The broker's current configuration.
configurations_current :: Lens' Configurations (Maybe ConfigurationId)

-- | Does not apply to RabbitMQ brokers.
--   
--   Encryption options for the broker.
--   
--   <i>See:</i> <a>newEncryptionOptions</a> smart constructor.
data EncryptionOptions
EncryptionOptions' :: Maybe Text -> Bool -> EncryptionOptions

-- | The customer master key (CMK) to use for the AWS Key Management
--   Service (KMS). This key is used to encrypt your data at rest. If not
--   provided, Amazon MQ will use a default CMK to encrypt your data.
[$sel:kmsKeyId:EncryptionOptions'] :: EncryptionOptions -> Maybe Text

-- | Enables the use of an AWS owned CMK using AWS Key Management Service
--   (KMS). Set to true by default, if no value is provided, for example,
--   for RabbitMQ brokers.
[$sel:useAwsOwnedKey:EncryptionOptions'] :: EncryptionOptions -> Bool

-- | Create a value of <a>EncryptionOptions</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:kmsKeyId:EncryptionOptions'</a>,
--   <a>encryptionOptions_kmsKeyId</a> - The customer master key (CMK) to
--   use for the AWS Key Management Service (KMS). This key is used to
--   encrypt your data at rest. If not provided, Amazon MQ will use a
--   default CMK to encrypt your data.
--   
--   <a>$sel:useAwsOwnedKey:EncryptionOptions'</a>,
--   <a>encryptionOptions_useAwsOwnedKey</a> - Enables the use of an AWS
--   owned CMK using AWS Key Management Service (KMS). Set to true by
--   default, if no value is provided, for example, for RabbitMQ brokers.
newEncryptionOptions :: Bool -> EncryptionOptions

-- | The customer master key (CMK) to use for the AWS Key Management
--   Service (KMS). This key is used to encrypt your data at rest. If not
--   provided, Amazon MQ will use a default CMK to encrypt your data.
encryptionOptions_kmsKeyId :: Lens' EncryptionOptions (Maybe Text)

-- | Enables the use of an AWS owned CMK using AWS Key Management Service
--   (KMS). Set to true by default, if no value is provided, for example,
--   for RabbitMQ brokers.
encryptionOptions_useAwsOwnedKey :: Lens' EncryptionOptions Bool

-- | Id of the engine version.
--   
--   <i>See:</i> <a>newEngineVersion</a> smart constructor.
data EngineVersion
EngineVersion' :: Maybe Text -> EngineVersion

-- | Id for the version.
[$sel:name:EngineVersion'] :: EngineVersion -> Maybe Text

-- | Create a value of <a>EngineVersion</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:name:EngineVersion'</a>, <a>engineVersion_name</a> - Id for
--   the version.
newEngineVersion :: EngineVersion

-- | Id for the version.
engineVersion_name :: Lens' EngineVersion (Maybe Text)

-- | Optional. The metadata of the LDAP server used to authenticate and
--   authorize connections to the broker.
--   
--   Does not apply to RabbitMQ brokers.
--   
--   <i>See:</i> <a>newLdapServerMetadataInput</a> smart constructor.
data LdapServerMetadataInput
LdapServerMetadataInput' :: Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe Text -> [Text] -> Text -> Text -> Text -> Text -> Text -> Text -> LdapServerMetadataInput

-- | Specifies the name of the LDAP attribute for the user group
--   membership.
[$sel:userRoleName:LdapServerMetadataInput'] :: LdapServerMetadataInput -> Maybe Text

-- | The directory search scope for the user. If set to true, scope is to
--   search the entire subtree.
[$sel:userSearchSubtree:LdapServerMetadataInput'] :: LdapServerMetadataInput -> Maybe Bool

-- | The directory search scope for the role. If set to true, scope is to
--   search the entire subtree.
[$sel:roleSearchSubtree:LdapServerMetadataInput'] :: LdapServerMetadataInput -> Maybe Bool

-- | Specifies the LDAP attribute that identifies the group name attribute
--   in the object returned from the group membership query.
[$sel:roleName:LdapServerMetadataInput'] :: LdapServerMetadataInput -> Maybe Text

-- | Specifies the location of the LDAP server such as AWS Directory
--   Service for Microsoft Active Directory . Optional failover server.
[$sel:hosts:LdapServerMetadataInput'] :: LdapServerMetadataInput -> [Text]

-- | The LDAP search filter used to find users within the userBase. The
--   client's username is substituted into the {0} placeholder in the
--   search filter. For example, if this option is set to (uid={0}) and the
--   received username is janedoe, the search filter becomes (uid=janedoe)
--   after string substitution. It will result in matching an entry like
--   uid=janedoe, ou=Users,ou=corp, dc=corp, dc=example, dc=com.
[$sel:userSearchMatching:LdapServerMetadataInput'] :: LdapServerMetadataInput -> Text

-- | Select a particular subtree of the directory information tree (DIT) to
--   search for user entries. The subtree is specified by a DN, which
--   specifies the base node of the subtree. For example, by setting this
--   option to ou=Users,ou=corp, dc=corp, dc=example, dc=com, the search
--   for user entries is restricted to the subtree beneath ou=Users,
--   ou=corp, dc=corp, dc=example, dc=com.
[$sel:userBase:LdapServerMetadataInput'] :: LdapServerMetadataInput -> Text

-- | The LDAP search filter used to find roles within the roleBase. The
--   distinguished name of the user matched by userSearchMatching is
--   substituted into the {0} placeholder in the search filter. The
--   client's username is substituted into the {1} placeholder. For
--   example, if you set this option to (member=uid={1})for the user
--   janedoe, the search filter becomes (member=uid=janedoe) after string
--   substitution. It matches all role entries that have a member attribute
--   equal to uid=janedoe under the subtree selected by the roleBase.
[$sel:roleSearchMatching:LdapServerMetadataInput'] :: LdapServerMetadataInput -> Text

-- | Service account username. A service account is an account in your LDAP
--   server that has access to initiate a connection. For example,
--   cn=admin,dc=corp, dc=example, dc=com.
[$sel:serviceAccountUsername:LdapServerMetadataInput'] :: LdapServerMetadataInput -> Text

-- | The distinguished name of the node in the directory information tree
--   (DIT) to search for roles or groups. For example, ou=group, ou=corp,
--   dc=corp, dc=example, dc=com.
[$sel:roleBase:LdapServerMetadataInput'] :: LdapServerMetadataInput -> Text

-- | Service account password. A service account is an account in your LDAP
--   server that has access to initiate a connection. For example,
--   cn=admin,dc=corp, dc=example, dc=com.
[$sel:serviceAccountPassword:LdapServerMetadataInput'] :: LdapServerMetadataInput -> Text

-- | Create a value of <a>LdapServerMetadataInput</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:userRoleName:LdapServerMetadataInput'</a>,
--   <a>ldapServerMetadataInput_userRoleName</a> - Specifies the name of
--   the LDAP attribute for the user group membership.
--   
--   <a>$sel:userSearchSubtree:LdapServerMetadataInput'</a>,
--   <a>ldapServerMetadataInput_userSearchSubtree</a> - The directory
--   search scope for the user. If set to true, scope is to search the
--   entire subtree.
--   
--   <a>$sel:roleSearchSubtree:LdapServerMetadataInput'</a>,
--   <a>ldapServerMetadataInput_roleSearchSubtree</a> - The directory
--   search scope for the role. If set to true, scope is to search the
--   entire subtree.
--   
--   <a>$sel:roleName:LdapServerMetadataInput'</a>,
--   <a>ldapServerMetadataInput_roleName</a> - Specifies the LDAP attribute
--   that identifies the group name attribute in the object returned from
--   the group membership query.
--   
--   <a>$sel:hosts:LdapServerMetadataInput'</a>,
--   <a>ldapServerMetadataInput_hosts</a> - Specifies the location of the
--   LDAP server such as AWS Directory Service for Microsoft Active
--   Directory . Optional failover server.
--   
--   <a>$sel:userSearchMatching:LdapServerMetadataInput'</a>,
--   <a>ldapServerMetadataInput_userSearchMatching</a> - The LDAP search
--   filter used to find users within the userBase. The client's username
--   is substituted into the {0} placeholder in the search filter. For
--   example, if this option is set to (uid={0}) and the received username
--   is janedoe, the search filter becomes (uid=janedoe) after string
--   substitution. It will result in matching an entry like uid=janedoe,
--   ou=Users,ou=corp, dc=corp, dc=example, dc=com.
--   
--   <a>$sel:userBase:LdapServerMetadataInput'</a>,
--   <a>ldapServerMetadataInput_userBase</a> - Select a particular subtree
--   of the directory information tree (DIT) to search for user entries.
--   The subtree is specified by a DN, which specifies the base node of the
--   subtree. For example, by setting this option to ou=Users,ou=corp,
--   dc=corp, dc=example, dc=com, the search for user entries is restricted
--   to the subtree beneath ou=Users, ou=corp, dc=corp, dc=example, dc=com.
--   
--   <a>$sel:roleSearchMatching:LdapServerMetadataInput'</a>,
--   <a>ldapServerMetadataInput_roleSearchMatching</a> - The LDAP search
--   filter used to find roles within the roleBase. The distinguished name
--   of the user matched by userSearchMatching is substituted into the {0}
--   placeholder in the search filter. The client's username is substituted
--   into the {1} placeholder. For example, if you set this option to
--   (member=uid={1})for the user janedoe, the search filter becomes
--   (member=uid=janedoe) after string substitution. It matches all role
--   entries that have a member attribute equal to uid=janedoe under the
--   subtree selected by the roleBase.
--   
--   <a>$sel:serviceAccountUsername:LdapServerMetadataInput'</a>,
--   <a>ldapServerMetadataInput_serviceAccountUsername</a> - Service
--   account username. A service account is an account in your LDAP server
--   that has access to initiate a connection. For example,
--   cn=admin,dc=corp, dc=example, dc=com.
--   
--   <a>$sel:roleBase:LdapServerMetadataInput'</a>,
--   <a>ldapServerMetadataInput_roleBase</a> - The distinguished name of
--   the node in the directory information tree (DIT) to search for roles
--   or groups. For example, ou=group, ou=corp, dc=corp, dc=example,
--   dc=com.
--   
--   <a>$sel:serviceAccountPassword:LdapServerMetadataInput'</a>,
--   <a>ldapServerMetadataInput_serviceAccountPassword</a> - Service
--   account password. A service account is an account in your LDAP server
--   that has access to initiate a connection. For example,
--   cn=admin,dc=corp, dc=example, dc=com.
newLdapServerMetadataInput :: Text -> Text -> Text -> Text -> Text -> Text -> LdapServerMetadataInput

-- | Specifies the name of the LDAP attribute for the user group
--   membership.
ldapServerMetadataInput_userRoleName :: Lens' LdapServerMetadataInput (Maybe Text)

-- | The directory search scope for the user. If set to true, scope is to
--   search the entire subtree.
ldapServerMetadataInput_userSearchSubtree :: Lens' LdapServerMetadataInput (Maybe Bool)

-- | The directory search scope for the role. If set to true, scope is to
--   search the entire subtree.
ldapServerMetadataInput_roleSearchSubtree :: Lens' LdapServerMetadataInput (Maybe Bool)

-- | Specifies the LDAP attribute that identifies the group name attribute
--   in the object returned from the group membership query.
ldapServerMetadataInput_roleName :: Lens' LdapServerMetadataInput (Maybe Text)

-- | Specifies the location of the LDAP server such as AWS Directory
--   Service for Microsoft Active Directory . Optional failover server.
ldapServerMetadataInput_hosts :: Lens' LdapServerMetadataInput [Text]

-- | The LDAP search filter used to find users within the userBase. The
--   client's username is substituted into the {0} placeholder in the
--   search filter. For example, if this option is set to (uid={0}) and the
--   received username is janedoe, the search filter becomes (uid=janedoe)
--   after string substitution. It will result in matching an entry like
--   uid=janedoe, ou=Users,ou=corp, dc=corp, dc=example, dc=com.
ldapServerMetadataInput_userSearchMatching :: Lens' LdapServerMetadataInput Text

-- | Select a particular subtree of the directory information tree (DIT) to
--   search for user entries. The subtree is specified by a DN, which
--   specifies the base node of the subtree. For example, by setting this
--   option to ou=Users,ou=corp, dc=corp, dc=example, dc=com, the search
--   for user entries is restricted to the subtree beneath ou=Users,
--   ou=corp, dc=corp, dc=example, dc=com.
ldapServerMetadataInput_userBase :: Lens' LdapServerMetadataInput Text

-- | The LDAP search filter used to find roles within the roleBase. The
--   distinguished name of the user matched by userSearchMatching is
--   substituted into the {0} placeholder in the search filter. The
--   client's username is substituted into the {1} placeholder. For
--   example, if you set this option to (member=uid={1})for the user
--   janedoe, the search filter becomes (member=uid=janedoe) after string
--   substitution. It matches all role entries that have a member attribute
--   equal to uid=janedoe under the subtree selected by the roleBase.
ldapServerMetadataInput_roleSearchMatching :: Lens' LdapServerMetadataInput Text

-- | Service account username. A service account is an account in your LDAP
--   server that has access to initiate a connection. For example,
--   cn=admin,dc=corp, dc=example, dc=com.
ldapServerMetadataInput_serviceAccountUsername :: Lens' LdapServerMetadataInput Text

-- | The distinguished name of the node in the directory information tree
--   (DIT) to search for roles or groups. For example, ou=group, ou=corp,
--   dc=corp, dc=example, dc=com.
ldapServerMetadataInput_roleBase :: Lens' LdapServerMetadataInput Text

-- | Service account password. A service account is an account in your LDAP
--   server that has access to initiate a connection. For example,
--   cn=admin,dc=corp, dc=example, dc=com.
ldapServerMetadataInput_serviceAccountPassword :: Lens' LdapServerMetadataInput Text

-- | Optional. The metadata of the LDAP server used to authenticate and
--   authorize connections to the broker.
--   
--   <i>See:</i> <a>newLdapServerMetadataOutput</a> smart constructor.
data LdapServerMetadataOutput
LdapServerMetadataOutput' :: Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe Text -> [Text] -> Text -> Text -> Text -> Text -> Text -> LdapServerMetadataOutput

-- | Specifies the name of the LDAP attribute for the user group
--   membership.
[$sel:userRoleName:LdapServerMetadataOutput'] :: LdapServerMetadataOutput -> Maybe Text

-- | The directory search scope for the user. If set to true, scope is to
--   search the entire subtree.
[$sel:userSearchSubtree:LdapServerMetadataOutput'] :: LdapServerMetadataOutput -> Maybe Bool

-- | The directory search scope for the role. If set to true, scope is to
--   search the entire subtree.
[$sel:roleSearchSubtree:LdapServerMetadataOutput'] :: LdapServerMetadataOutput -> Maybe Bool

-- | Specifies the LDAP attribute that identifies the group name attribute
--   in the object returned from the group membership query.
[$sel:roleName:LdapServerMetadataOutput'] :: LdapServerMetadataOutput -> Maybe Text

-- | Specifies the location of the LDAP server such as AWS Directory
--   Service for Microsoft Active Directory . Optional failover server.
[$sel:hosts:LdapServerMetadataOutput'] :: LdapServerMetadataOutput -> [Text]

-- | The LDAP search filter used to find users within the userBase. The
--   client's username is substituted into the {0} placeholder in the
--   search filter. For example, if this option is set to (uid={0}) and the
--   received username is janedoe, the search filter becomes (uid=janedoe)
--   after string substitution. It will result in matching an entry like
--   uid=janedoe, ou=Users,ou=corp, dc=corp, dc=example, dc=com.
[$sel:userSearchMatching:LdapServerMetadataOutput'] :: LdapServerMetadataOutput -> Text

-- | Select a particular subtree of the directory information tree (DIT) to
--   search for user entries. The subtree is specified by a DN, which
--   specifies the base node of the subtree. For example, by setting this
--   option to ou=Users,ou=corp, dc=corp, dc=example, dc=com, the search
--   for user entries is restricted to the subtree beneath ou=Users,
--   ou=corp, dc=corp, dc=example, dc=com.
[$sel:userBase:LdapServerMetadataOutput'] :: LdapServerMetadataOutput -> Text

-- | The LDAP search filter used to find roles within the roleBase. The
--   distinguished name of the user matched by userSearchMatching is
--   substituted into the {0} placeholder in the search filter. The
--   client's username is substituted into the {1} placeholder. For
--   example, if you set this option to (member=uid={1})for the user
--   janedoe, the search filter becomes (member=uid=janedoe) after string
--   substitution. It matches all role entries that have a member attribute
--   equal to uid=janedoe under the subtree selected by the roleBase.
[$sel:roleSearchMatching:LdapServerMetadataOutput'] :: LdapServerMetadataOutput -> Text

-- | Service account username. A service account is an account in your LDAP
--   server that has access to initiate a connection. For example,
--   cn=admin,dc=corp, dc=example, dc=com.
[$sel:serviceAccountUsername:LdapServerMetadataOutput'] :: LdapServerMetadataOutput -> Text

-- | The distinguished name of the node in the directory information tree
--   (DIT) to search for roles or groups. For example, ou=group, ou=corp,
--   dc=corp, dc=example, dc=com.
[$sel:roleBase:LdapServerMetadataOutput'] :: LdapServerMetadataOutput -> Text

-- | Create a value of <a>LdapServerMetadataOutput</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:userRoleName:LdapServerMetadataOutput'</a>,
--   <a>ldapServerMetadataOutput_userRoleName</a> - Specifies the name of
--   the LDAP attribute for the user group membership.
--   
--   <a>$sel:userSearchSubtree:LdapServerMetadataOutput'</a>,
--   <a>ldapServerMetadataOutput_userSearchSubtree</a> - The directory
--   search scope for the user. If set to true, scope is to search the
--   entire subtree.
--   
--   <a>$sel:roleSearchSubtree:LdapServerMetadataOutput'</a>,
--   <a>ldapServerMetadataOutput_roleSearchSubtree</a> - The directory
--   search scope for the role. If set to true, scope is to search the
--   entire subtree.
--   
--   <a>$sel:roleName:LdapServerMetadataOutput'</a>,
--   <a>ldapServerMetadataOutput_roleName</a> - Specifies the LDAP
--   attribute that identifies the group name attribute in the object
--   returned from the group membership query.
--   
--   <a>$sel:hosts:LdapServerMetadataOutput'</a>,
--   <a>ldapServerMetadataOutput_hosts</a> - Specifies the location of the
--   LDAP server such as AWS Directory Service for Microsoft Active
--   Directory . Optional failover server.
--   
--   <a>$sel:userSearchMatching:LdapServerMetadataOutput'</a>,
--   <a>ldapServerMetadataOutput_userSearchMatching</a> - The LDAP search
--   filter used to find users within the userBase. The client's username
--   is substituted into the {0} placeholder in the search filter. For
--   example, if this option is set to (uid={0}) and the received username
--   is janedoe, the search filter becomes (uid=janedoe) after string
--   substitution. It will result in matching an entry like uid=janedoe,
--   ou=Users,ou=corp, dc=corp, dc=example, dc=com.
--   
--   <a>$sel:userBase:LdapServerMetadataOutput'</a>,
--   <a>ldapServerMetadataOutput_userBase</a> - Select a particular subtree
--   of the directory information tree (DIT) to search for user entries.
--   The subtree is specified by a DN, which specifies the base node of the
--   subtree. For example, by setting this option to ou=Users,ou=corp,
--   dc=corp, dc=example, dc=com, the search for user entries is restricted
--   to the subtree beneath ou=Users, ou=corp, dc=corp, dc=example, dc=com.
--   
--   <a>$sel:roleSearchMatching:LdapServerMetadataOutput'</a>,
--   <a>ldapServerMetadataOutput_roleSearchMatching</a> - The LDAP search
--   filter used to find roles within the roleBase. The distinguished name
--   of the user matched by userSearchMatching is substituted into the {0}
--   placeholder in the search filter. The client's username is substituted
--   into the {1} placeholder. For example, if you set this option to
--   (member=uid={1})for the user janedoe, the search filter becomes
--   (member=uid=janedoe) after string substitution. It matches all role
--   entries that have a member attribute equal to uid=janedoe under the
--   subtree selected by the roleBase.
--   
--   <a>$sel:serviceAccountUsername:LdapServerMetadataOutput'</a>,
--   <a>ldapServerMetadataOutput_serviceAccountUsername</a> - Service
--   account username. A service account is an account in your LDAP server
--   that has access to initiate a connection. For example,
--   cn=admin,dc=corp, dc=example, dc=com.
--   
--   <a>$sel:roleBase:LdapServerMetadataOutput'</a>,
--   <a>ldapServerMetadataOutput_roleBase</a> - The distinguished name of
--   the node in the directory information tree (DIT) to search for roles
--   or groups. For example, ou=group, ou=corp, dc=corp, dc=example,
--   dc=com.
newLdapServerMetadataOutput :: Text -> Text -> Text -> Text -> Text -> LdapServerMetadataOutput

-- | Specifies the name of the LDAP attribute for the user group
--   membership.
ldapServerMetadataOutput_userRoleName :: Lens' LdapServerMetadataOutput (Maybe Text)

-- | The directory search scope for the user. If set to true, scope is to
--   search the entire subtree.
ldapServerMetadataOutput_userSearchSubtree :: Lens' LdapServerMetadataOutput (Maybe Bool)

-- | The directory search scope for the role. If set to true, scope is to
--   search the entire subtree.
ldapServerMetadataOutput_roleSearchSubtree :: Lens' LdapServerMetadataOutput (Maybe Bool)

-- | Specifies the LDAP attribute that identifies the group name attribute
--   in the object returned from the group membership query.
ldapServerMetadataOutput_roleName :: Lens' LdapServerMetadataOutput (Maybe Text)

-- | Specifies the location of the LDAP server such as AWS Directory
--   Service for Microsoft Active Directory . Optional failover server.
ldapServerMetadataOutput_hosts :: Lens' LdapServerMetadataOutput [Text]

-- | The LDAP search filter used to find users within the userBase. The
--   client's username is substituted into the {0} placeholder in the
--   search filter. For example, if this option is set to (uid={0}) and the
--   received username is janedoe, the search filter becomes (uid=janedoe)
--   after string substitution. It will result in matching an entry like
--   uid=janedoe, ou=Users,ou=corp, dc=corp, dc=example, dc=com.
ldapServerMetadataOutput_userSearchMatching :: Lens' LdapServerMetadataOutput Text

-- | Select a particular subtree of the directory information tree (DIT) to
--   search for user entries. The subtree is specified by a DN, which
--   specifies the base node of the subtree. For example, by setting this
--   option to ou=Users,ou=corp, dc=corp, dc=example, dc=com, the search
--   for user entries is restricted to the subtree beneath ou=Users,
--   ou=corp, dc=corp, dc=example, dc=com.
ldapServerMetadataOutput_userBase :: Lens' LdapServerMetadataOutput Text

-- | The LDAP search filter used to find roles within the roleBase. The
--   distinguished name of the user matched by userSearchMatching is
--   substituted into the {0} placeholder in the search filter. The
--   client's username is substituted into the {1} placeholder. For
--   example, if you set this option to (member=uid={1})for the user
--   janedoe, the search filter becomes (member=uid=janedoe) after string
--   substitution. It matches all role entries that have a member attribute
--   equal to uid=janedoe under the subtree selected by the roleBase.
ldapServerMetadataOutput_roleSearchMatching :: Lens' LdapServerMetadataOutput Text

-- | Service account username. A service account is an account in your LDAP
--   server that has access to initiate a connection. For example,
--   cn=admin,dc=corp, dc=example, dc=com.
ldapServerMetadataOutput_serviceAccountUsername :: Lens' LdapServerMetadataOutput Text

-- | The distinguished name of the node in the directory information tree
--   (DIT) to search for roles or groups. For example, ou=group, ou=corp,
--   dc=corp, dc=example, dc=com.
ldapServerMetadataOutput_roleBase :: Lens' LdapServerMetadataOutput Text

-- | The list of information about logs to be enabled for the specified
--   broker.
--   
--   <i>See:</i> <a>newLogs</a> smart constructor.
data Logs
Logs' :: Maybe Bool -> Maybe Bool -> Logs

-- | Enables audit logging. Every user management action made using JMX or
--   the ActiveMQ Web Console is logged. Does not apply to RabbitMQ
--   brokers.
[$sel:audit:Logs'] :: Logs -> Maybe Bool

-- | Enables general logging.
[$sel:general:Logs'] :: Logs -> Maybe Bool

-- | Create a value of <a>Logs</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:audit:Logs'</a>, <a>logs_audit</a> - Enables audit logging.
--   Every user management action made using JMX or the ActiveMQ Web
--   Console is logged. Does not apply to RabbitMQ brokers.
--   
--   <a>$sel:general:Logs'</a>, <a>logs_general</a> - Enables general
--   logging.
newLogs :: Logs

-- | Enables audit logging. Every user management action made using JMX or
--   the ActiveMQ Web Console is logged. Does not apply to RabbitMQ
--   brokers.
logs_audit :: Lens' Logs (Maybe Bool)

-- | Enables general logging.
logs_general :: Lens' Logs (Maybe Bool)

-- | The list of information about logs currently enabled and pending to be
--   deployed for the specified broker.
--   
--   <i>See:</i> <a>newLogsSummary</a> smart constructor.
data LogsSummary
LogsSummary' :: Maybe PendingLogs -> Maybe Bool -> Maybe Text -> Text -> Bool -> LogsSummary

-- | The list of information about logs pending to be deployed for the
--   specified broker.
[$sel:pending:LogsSummary'] :: LogsSummary -> Maybe PendingLogs

-- | Enables audit logging. Every user management action made using JMX or
--   the ActiveMQ Web Console is logged.
[$sel:audit:LogsSummary'] :: LogsSummary -> Maybe Bool

-- | The location of the CloudWatch Logs log group where audit logs are
--   sent.
[$sel:auditLogGroup:LogsSummary'] :: LogsSummary -> Maybe Text

-- | The location of the CloudWatch Logs log group where general logs are
--   sent.
[$sel:generalLogGroup:LogsSummary'] :: LogsSummary -> Text

-- | Enables general logging.
[$sel:general:LogsSummary'] :: LogsSummary -> Bool

-- | Create a value of <a>LogsSummary</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:pending:LogsSummary'</a>, <a>logsSummary_pending</a> - The
--   list of information about logs pending to be deployed for the
--   specified broker.
--   
--   <a>$sel:audit:LogsSummary'</a>, <a>logsSummary_audit</a> - Enables
--   audit logging. Every user management action made using JMX or the
--   ActiveMQ Web Console is logged.
--   
--   <a>$sel:auditLogGroup:LogsSummary'</a>,
--   <a>logsSummary_auditLogGroup</a> - The location of the CloudWatch Logs
--   log group where audit logs are sent.
--   
--   <a>$sel:generalLogGroup:LogsSummary'</a>,
--   <a>logsSummary_generalLogGroup</a> - The location of the CloudWatch
--   Logs log group where general logs are sent.
--   
--   <a>$sel:general:LogsSummary'</a>, <a>logsSummary_general</a> - Enables
--   general logging.
newLogsSummary :: Text -> Bool -> LogsSummary

-- | The list of information about logs pending to be deployed for the
--   specified broker.
logsSummary_pending :: Lens' LogsSummary (Maybe PendingLogs)

-- | Enables audit logging. Every user management action made using JMX or
--   the ActiveMQ Web Console is logged.
logsSummary_audit :: Lens' LogsSummary (Maybe Bool)

-- | The location of the CloudWatch Logs log group where audit logs are
--   sent.
logsSummary_auditLogGroup :: Lens' LogsSummary (Maybe Text)

-- | The location of the CloudWatch Logs log group where general logs are
--   sent.
logsSummary_generalLogGroup :: Lens' LogsSummary Text

-- | Enables general logging.
logsSummary_general :: Lens' LogsSummary Bool

-- | The list of information about logs to be enabled for the specified
--   broker.
--   
--   <i>See:</i> <a>newPendingLogs</a> smart constructor.
data PendingLogs
PendingLogs' :: Maybe Bool -> Maybe Bool -> PendingLogs

-- | Enables audit logging. Every user management action made using JMX or
--   the ActiveMQ Web Console is logged.
[$sel:audit:PendingLogs'] :: PendingLogs -> Maybe Bool

-- | Enables general logging.
[$sel:general:PendingLogs'] :: PendingLogs -> Maybe Bool

-- | Create a value of <a>PendingLogs</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:audit:PendingLogs'</a>, <a>pendingLogs_audit</a> - Enables
--   audit logging. Every user management action made using JMX or the
--   ActiveMQ Web Console is logged.
--   
--   <a>$sel:general:PendingLogs'</a>, <a>pendingLogs_general</a> - Enables
--   general logging.
newPendingLogs :: PendingLogs

-- | Enables audit logging. Every user management action made using JMX or
--   the ActiveMQ Web Console is logged.
pendingLogs_audit :: Lens' PendingLogs (Maybe Bool)

-- | Enables general logging.
pendingLogs_general :: Lens' PendingLogs (Maybe Bool)

-- | Returns information about the XML element or attribute that was
--   sanitized in the configuration.
--   
--   <i>See:</i> <a>newSanitizationWarning</a> smart constructor.
data SanitizationWarning
SanitizationWarning' :: Maybe Text -> Maybe Text -> SanitizationWarningReason -> SanitizationWarning

-- | The name of the XML attribute that has been sanitized.
[$sel:attributeName:SanitizationWarning'] :: SanitizationWarning -> Maybe Text

-- | The name of the XML element that has been sanitized.
[$sel:elementName:SanitizationWarning'] :: SanitizationWarning -> Maybe Text

-- | Required. The reason for which the XML elements or attributes were
--   sanitized.
[$sel:reason:SanitizationWarning'] :: SanitizationWarning -> SanitizationWarningReason

-- | Create a value of <a>SanitizationWarning</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:attributeName:SanitizationWarning'</a>,
--   <a>sanitizationWarning_attributeName</a> - The name of the XML
--   attribute that has been sanitized.
--   
--   <a>$sel:elementName:SanitizationWarning'</a>,
--   <a>sanitizationWarning_elementName</a> - The name of the XML element
--   that has been sanitized.
--   
--   <a>$sel:reason:SanitizationWarning'</a>,
--   <a>sanitizationWarning_reason</a> - Required. The reason for which the
--   XML elements or attributes were sanitized.
newSanitizationWarning :: SanitizationWarningReason -> SanitizationWarning

-- | The name of the XML attribute that has been sanitized.
sanitizationWarning_attributeName :: Lens' SanitizationWarning (Maybe Text)

-- | The name of the XML element that has been sanitized.
sanitizationWarning_elementName :: Lens' SanitizationWarning (Maybe Text)

-- | Required. The reason for which the XML elements or attributes were
--   sanitized.
sanitizationWarning_reason :: Lens' SanitizationWarning SanitizationWarningReason

-- | A user associated with the broker. For RabbitMQ brokers, one and only
--   one administrative user is accepted and created when a broker is first
--   provisioned. All subsequent broker users are created by making
--   RabbitMQ API calls directly to brokers or via the RabbitMQ web
--   console.
--   
--   <i>See:</i> <a>newUser</a> smart constructor.
data User
User' :: Maybe [Text] -> Maybe Bool -> Text -> Text -> User

-- | The list of groups (20 maximum) to which the ActiveMQ user belongs.
--   This value can contain only alphanumeric characters, dashes, periods,
--   underscores, and tildes (- . _ ~). This value must be 2-100 characters
--   long. Does not apply to RabbitMQ brokers.
[$sel:groups:User'] :: User -> Maybe [Text]

-- | Enables access to the ActiveMQ Web Console for the ActiveMQ user. Does
--   not apply to RabbitMQ brokers.
[$sel:consoleAccess:User'] :: User -> Maybe Bool

-- | important&gt;
--   
--   Amazon MQ for ActiveMQ
--   
--   For ActiveMQ brokers, this value can contain only alphanumeric
--   characters, dashes, periods, underscores, and tildes (- . _ ~). This
--   value must be 2-100 characters long.
--   
--   /important&gt;
--   
--   Amazon MQ for RabbitMQ
--   
--   For RabbitMQ brokers, this value can contain only alphanumeric
--   characters, dashes, periods, underscores (- . _). This value must not
--   contain a tilde (~) character. Amazon MQ prohibts using guest as a
--   valid usename. This value must be 2-100 characters long.
[$sel:username:User'] :: User -> Text

-- | Required. The password of the user. This value must be at least 12
--   characters long, must contain at least 4 unique characters, and must
--   not contain commas, colons, or equal signs (,:=).
[$sel:password:User'] :: User -> Text

-- | Create a value of <a>User</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:groups:User'</a>, <a>user_groups</a> - The list of groups (20
--   maximum) to which the ActiveMQ user belongs. This value can contain
--   only alphanumeric characters, dashes, periods, underscores, and tildes
--   (- . _ ~). This value must be 2-100 characters long. Does not apply to
--   RabbitMQ brokers.
--   
--   <a>$sel:consoleAccess:User'</a>, <a>user_consoleAccess</a> - Enables
--   access to the ActiveMQ Web Console for the ActiveMQ user. Does not
--   apply to RabbitMQ brokers.
--   
--   <a>$sel:username:User'</a>, <a>user_username</a> - important&gt;
--   
--   Amazon MQ for ActiveMQ
--   
--   For ActiveMQ brokers, this value can contain only alphanumeric
--   characters, dashes, periods, underscores, and tildes (- . _ ~). This
--   value must be 2-100 characters long.
--   
--   /important&gt;
--   
--   Amazon MQ for RabbitMQ
--   
--   For RabbitMQ brokers, this value can contain only alphanumeric
--   characters, dashes, periods, underscores (- . _). This value must not
--   contain a tilde (~) character. Amazon MQ prohibts using guest as a
--   valid usename. This value must be 2-100 characters long.
--   
--   <a>$sel:password:User'</a>, <a>user_password</a> - Required. The
--   password of the user. This value must be at least 12 characters long,
--   must contain at least 4 unique characters, and must not contain
--   commas, colons, or equal signs (,:=).
newUser :: Text -> Text -> User

-- | The list of groups (20 maximum) to which the ActiveMQ user belongs.
--   This value can contain only alphanumeric characters, dashes, periods,
--   underscores, and tildes (- . _ ~). This value must be 2-100 characters
--   long. Does not apply to RabbitMQ brokers.
user_groups :: Lens' User (Maybe [Text])

-- | Enables access to the ActiveMQ Web Console for the ActiveMQ user. Does
--   not apply to RabbitMQ brokers.
user_consoleAccess :: Lens' User (Maybe Bool)

-- | important&gt;
--   
--   Amazon MQ for ActiveMQ
--   
--   For ActiveMQ brokers, this value can contain only alphanumeric
--   characters, dashes, periods, underscores, and tildes (- . _ ~). This
--   value must be 2-100 characters long.
--   
--   /important&gt;
--   
--   Amazon MQ for RabbitMQ
--   
--   For RabbitMQ brokers, this value can contain only alphanumeric
--   characters, dashes, periods, underscores (- . _). This value must not
--   contain a tilde (~) character. Amazon MQ prohibts using guest as a
--   valid usename. This value must be 2-100 characters long.
user_username :: Lens' User Text

-- | Required. The password of the user. This value must be at least 12
--   characters long, must contain at least 4 unique characters, and must
--   not contain commas, colons, or equal signs (,:=).
user_password :: Lens' User Text

-- | Returns information about the status of the changes pending for the
--   ActiveMQ user.
--   
--   <i>See:</i> <a>newUserPendingChanges</a> smart constructor.
data UserPendingChanges
UserPendingChanges' :: Maybe [Text] -> Maybe Bool -> ChangeType -> UserPendingChanges

-- | The list of groups (20 maximum) to which the ActiveMQ user belongs.
--   This value can contain only alphanumeric characters, dashes, periods,
--   underscores, and tildes (- . _ ~). This value must be 2-100 characters
--   long.
[$sel:groups:UserPendingChanges'] :: UserPendingChanges -> Maybe [Text]

-- | Enables access to the the ActiveMQ Web Console for the ActiveMQ user.
[$sel:consoleAccess:UserPendingChanges'] :: UserPendingChanges -> Maybe Bool

-- | Required. The type of change pending for the ActiveMQ user.
[$sel:pendingChange:UserPendingChanges'] :: UserPendingChanges -> ChangeType

-- | Create a value of <a>UserPendingChanges</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:groups:UserPendingChanges'</a>,
--   <a>userPendingChanges_groups</a> - The list of groups (20 maximum) to
--   which the ActiveMQ user belongs. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 2-100 characters long.
--   
--   <a>$sel:consoleAccess:UserPendingChanges'</a>,
--   <a>userPendingChanges_consoleAccess</a> - Enables access to the the
--   ActiveMQ Web Console for the ActiveMQ user.
--   
--   <a>$sel:pendingChange:UserPendingChanges'</a>,
--   <a>userPendingChanges_pendingChange</a> - Required. The type of change
--   pending for the ActiveMQ user.
newUserPendingChanges :: ChangeType -> UserPendingChanges

-- | The list of groups (20 maximum) to which the ActiveMQ user belongs.
--   This value can contain only alphanumeric characters, dashes, periods,
--   underscores, and tildes (- . _ ~). This value must be 2-100 characters
--   long.
userPendingChanges_groups :: Lens' UserPendingChanges (Maybe [Text])

-- | Enables access to the the ActiveMQ Web Console for the ActiveMQ user.
userPendingChanges_consoleAccess :: Lens' UserPendingChanges (Maybe Bool)

-- | Required. The type of change pending for the ActiveMQ user.
userPendingChanges_pendingChange :: Lens' UserPendingChanges ChangeType

-- | Returns a list of all broker users. Does not apply to RabbitMQ
--   brokers.
--   
--   <i>See:</i> <a>newUserSummary</a> smart constructor.
data UserSummary
UserSummary' :: Maybe ChangeType -> Text -> UserSummary

-- | The type of change pending for the broker user.
[$sel:pendingChange:UserSummary'] :: UserSummary -> Maybe ChangeType

-- | Required. The username of the broker user. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 2-100 characters long.
[$sel:username:UserSummary'] :: UserSummary -> Text

-- | Create a value of <a>UserSummary</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:pendingChange:UserSummary'</a>,
--   <a>userSummary_pendingChange</a> - The type of change pending for the
--   broker user.
--   
--   <a>$sel:username:UserSummary'</a>, <a>userSummary_username</a> -
--   Required. The username of the broker user. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 2-100 characters long.
newUserSummary :: Text -> UserSummary

-- | The type of change pending for the broker user.
userSummary_pendingChange :: Lens' UserSummary (Maybe ChangeType)

-- | Required. The username of the broker user. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 2-100 characters long.
userSummary_username :: Lens' UserSummary Text

-- | The scheduled time period relative to UTC during which Amazon MQ
--   begins to apply pending updates or patches to the broker.
--   
--   <i>See:</i> <a>newWeeklyStartTime</a> smart constructor.
data WeeklyStartTime
WeeklyStartTime' :: Maybe Text -> Text -> DayOfWeek -> WeeklyStartTime

-- | The time zone, UTC by default, in either the Country/City format, or
--   the UTC offset format.
[$sel:timeZone:WeeklyStartTime'] :: WeeklyStartTime -> Maybe Text

-- | Required. The time, in 24-hour format.
[$sel:timeOfDay:WeeklyStartTime'] :: WeeklyStartTime -> Text

-- | Required. The day of the week.
[$sel:dayOfWeek:WeeklyStartTime'] :: WeeklyStartTime -> DayOfWeek

-- | Create a value of <a>WeeklyStartTime</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:timeZone:WeeklyStartTime'</a>, <a>weeklyStartTime_timeZone</a>
--   - The time zone, UTC by default, in either the Country/City format, or
--   the UTC offset format.
--   
--   <a>$sel:timeOfDay:WeeklyStartTime'</a>,
--   <a>weeklyStartTime_timeOfDay</a> - Required. The time, in 24-hour
--   format.
--   
--   <a>$sel:dayOfWeek:WeeklyStartTime'</a>,
--   <a>weeklyStartTime_dayOfWeek</a> - Required. The day of the week.
newWeeklyStartTime :: Text -> DayOfWeek -> WeeklyStartTime

-- | The time zone, UTC by default, in either the Country/City format, or
--   the UTC offset format.
weeklyStartTime_timeZone :: Lens' WeeklyStartTime (Maybe Text)

-- | Required. The time, in 24-hour format.
weeklyStartTime_timeOfDay :: Lens' WeeklyStartTime Text

-- | Required. The day of the week.
weeklyStartTime_dayOfWeek :: Lens' WeeklyStartTime DayOfWeek


-- | Reboots a broker. Note: This API is asynchronous.
module Amazonka.MQ.RebootBroker

-- | <i>See:</i> <a>newRebootBroker</a> smart constructor.
data RebootBroker
RebootBroker' :: Text -> RebootBroker

-- | The unique ID that Amazon MQ generates for the broker.
[$sel:brokerId:RebootBroker'] :: RebootBroker -> Text

-- | Create a value of <a>RebootBroker</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:brokerId:RebootBroker'</a>, <a>rebootBroker_brokerId</a> - The
--   unique ID that Amazon MQ generates for the broker.
newRebootBroker :: Text -> RebootBroker

-- | The unique ID that Amazon MQ generates for the broker.
rebootBroker_brokerId :: Lens' RebootBroker Text

-- | <i>See:</i> <a>newRebootBrokerResponse</a> smart constructor.
data RebootBrokerResponse
RebootBrokerResponse' :: Int -> RebootBrokerResponse

-- | The response's http status code.
[$sel:httpStatus:RebootBrokerResponse'] :: RebootBrokerResponse -> Int

-- | Create a value of <a>RebootBrokerResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:RebootBrokerResponse'</a>,
--   <a>rebootBrokerResponse_httpStatus</a> - The response's http status
--   code.
newRebootBrokerResponse :: Int -> RebootBrokerResponse

-- | The response's http status code.
rebootBrokerResponse_httpStatus :: Lens' RebootBrokerResponse Int
instance GHC.Generics.Generic Amazonka.MQ.RebootBroker.RebootBroker
instance GHC.Show.Show Amazonka.MQ.RebootBroker.RebootBroker
instance GHC.Read.Read Amazonka.MQ.RebootBroker.RebootBroker
instance GHC.Classes.Eq Amazonka.MQ.RebootBroker.RebootBroker
instance GHC.Generics.Generic Amazonka.MQ.RebootBroker.RebootBrokerResponse
instance GHC.Show.Show Amazonka.MQ.RebootBroker.RebootBrokerResponse
instance GHC.Read.Read Amazonka.MQ.RebootBroker.RebootBrokerResponse
instance GHC.Classes.Eq Amazonka.MQ.RebootBroker.RebootBrokerResponse
instance Amazonka.Types.AWSRequest Amazonka.MQ.RebootBroker.RebootBroker
instance Control.DeepSeq.NFData Amazonka.MQ.RebootBroker.RebootBrokerResponse
instance Data.Hashable.Class.Hashable Amazonka.MQ.RebootBroker.RebootBroker
instance Control.DeepSeq.NFData Amazonka.MQ.RebootBroker.RebootBroker
instance Amazonka.Data.Headers.ToHeaders Amazonka.MQ.RebootBroker.RebootBroker
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MQ.RebootBroker.RebootBroker
instance Amazonka.Data.Path.ToPath Amazonka.MQ.RebootBroker.RebootBroker
instance Amazonka.Data.Query.ToQuery Amazonka.MQ.RebootBroker.RebootBroker


-- | Returns a list of all ActiveMQ users.
module Amazonka.MQ.ListUsers

-- | <i>See:</i> <a>newListUsers</a> smart constructor.
data ListUsers
ListUsers' :: Maybe Text -> Maybe Natural -> Text -> ListUsers

-- | The token that specifies the next page of results Amazon MQ should
--   return. To request the first page, leave nextToken empty.
[$sel:nextToken:ListUsers'] :: ListUsers -> Maybe Text

-- | The maximum number of brokers that Amazon MQ can return per page (20
--   by default). This value must be an integer from 5 to 100.
[$sel:maxResults:ListUsers'] :: ListUsers -> Maybe Natural

-- | The unique ID that Amazon MQ generates for the broker.
[$sel:brokerId:ListUsers'] :: ListUsers -> Text

-- | Create a value of <a>ListUsers</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListUsers'</a>, <a>listUsers_nextToken</a> - The
--   token that specifies the next page of results Amazon MQ should return.
--   To request the first page, leave nextToken empty.
--   
--   <a>$sel:maxResults:ListUsers'</a>, <a>listUsers_maxResults</a> - The
--   maximum number of brokers that Amazon MQ can return per page (20 by
--   default). This value must be an integer from 5 to 100.
--   
--   <a>$sel:brokerId:ListUsers'</a>, <a>listUsers_brokerId</a> - The
--   unique ID that Amazon MQ generates for the broker.
newListUsers :: Text -> ListUsers

-- | The token that specifies the next page of results Amazon MQ should
--   return. To request the first page, leave nextToken empty.
listUsers_nextToken :: Lens' ListUsers (Maybe Text)

-- | The maximum number of brokers that Amazon MQ can return per page (20
--   by default). This value must be an integer from 5 to 100.
listUsers_maxResults :: Lens' ListUsers (Maybe Natural)

-- | The unique ID that Amazon MQ generates for the broker.
listUsers_brokerId :: Lens' ListUsers Text

-- | <i>See:</i> <a>newListUsersResponse</a> smart constructor.
data ListUsersResponse
ListUsersResponse' :: Maybe [UserSummary] -> Maybe Text -> Maybe Text -> Maybe Natural -> Int -> ListUsersResponse

-- | Required. The list of all ActiveMQ usernames for the specified broker.
--   Does not apply to RabbitMQ brokers.
[$sel:users:ListUsersResponse'] :: ListUsersResponse -> Maybe [UserSummary]

-- | The token that specifies the next page of results Amazon MQ should
--   return. To request the first page, leave nextToken empty.
[$sel:nextToken:ListUsersResponse'] :: ListUsersResponse -> Maybe Text

-- | Required. The unique ID that Amazon MQ generates for the broker.
[$sel:brokerId:ListUsersResponse'] :: ListUsersResponse -> Maybe Text

-- | Required. The maximum number of ActiveMQ users that can be returned
--   per page (20 by default). This value must be an integer from 5 to 100.
[$sel:maxResults:ListUsersResponse'] :: ListUsersResponse -> Maybe Natural

-- | The response's http status code.
[$sel:httpStatus:ListUsersResponse'] :: ListUsersResponse -> Int

-- | Create a value of <a>ListUsersResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:users:ListUsersResponse'</a>, <a>listUsersResponse_users</a> -
--   Required. The list of all ActiveMQ usernames for the specified broker.
--   Does not apply to RabbitMQ brokers.
--   
--   <a>$sel:nextToken:ListUsers'</a>, <a>listUsersResponse_nextToken</a> -
--   The token that specifies the next page of results Amazon MQ should
--   return. To request the first page, leave nextToken empty.
--   
--   <a>$sel:brokerId:ListUsers'</a>, <a>listUsersResponse_brokerId</a> -
--   Required. The unique ID that Amazon MQ generates for the broker.
--   
--   <a>$sel:maxResults:ListUsers'</a>, <a>listUsersResponse_maxResults</a>
--   - Required. The maximum number of ActiveMQ users that can be returned
--   per page (20 by default). This value must be an integer from 5 to 100.
--   
--   <a>$sel:httpStatus:ListUsersResponse'</a>,
--   <a>listUsersResponse_httpStatus</a> - The response's http status code.
newListUsersResponse :: Int -> ListUsersResponse

-- | Required. The list of all ActiveMQ usernames for the specified broker.
--   Does not apply to RabbitMQ brokers.
listUsersResponse_users :: Lens' ListUsersResponse (Maybe [UserSummary])

-- | The token that specifies the next page of results Amazon MQ should
--   return. To request the first page, leave nextToken empty.
listUsersResponse_nextToken :: Lens' ListUsersResponse (Maybe Text)

-- | Required. The unique ID that Amazon MQ generates for the broker.
listUsersResponse_brokerId :: Lens' ListUsersResponse (Maybe Text)

-- | Required. The maximum number of ActiveMQ users that can be returned
--   per page (20 by default). This value must be an integer from 5 to 100.
listUsersResponse_maxResults :: Lens' ListUsersResponse (Maybe Natural)

-- | The response's http status code.
listUsersResponse_httpStatus :: Lens' ListUsersResponse Int
instance GHC.Generics.Generic Amazonka.MQ.ListUsers.ListUsers
instance GHC.Show.Show Amazonka.MQ.ListUsers.ListUsers
instance GHC.Read.Read Amazonka.MQ.ListUsers.ListUsers
instance GHC.Classes.Eq Amazonka.MQ.ListUsers.ListUsers
instance GHC.Generics.Generic Amazonka.MQ.ListUsers.ListUsersResponse
instance GHC.Show.Show Amazonka.MQ.ListUsers.ListUsersResponse
instance GHC.Read.Read Amazonka.MQ.ListUsers.ListUsersResponse
instance GHC.Classes.Eq Amazonka.MQ.ListUsers.ListUsersResponse
instance Amazonka.Types.AWSRequest Amazonka.MQ.ListUsers.ListUsers
instance Control.DeepSeq.NFData Amazonka.MQ.ListUsers.ListUsersResponse
instance Data.Hashable.Class.Hashable Amazonka.MQ.ListUsers.ListUsers
instance Control.DeepSeq.NFData Amazonka.MQ.ListUsers.ListUsers
instance Amazonka.Data.Headers.ToHeaders Amazonka.MQ.ListUsers.ListUsers
instance Amazonka.Data.Path.ToPath Amazonka.MQ.ListUsers.ListUsers
instance Amazonka.Data.Query.ToQuery Amazonka.MQ.ListUsers.ListUsers


-- | Lists tags for a resource.
module Amazonka.MQ.ListTags

-- | <i>See:</i> <a>newListTags</a> smart constructor.
data ListTags
ListTags' :: Text -> ListTags

-- | The Amazon Resource Name (ARN) of the resource tag.
[$sel:resourceArn:ListTags'] :: ListTags -> Text

-- | Create a value of <a>ListTags</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:ListTags'</a>, <a>listTags_resourceArn</a> - The
--   Amazon Resource Name (ARN) of the resource tag.
newListTags :: Text -> ListTags

-- | The Amazon Resource Name (ARN) of the resource tag.
listTags_resourceArn :: Lens' ListTags Text

-- | <i>See:</i> <a>newListTagsResponse</a> smart constructor.
data ListTagsResponse
ListTagsResponse' :: Maybe (HashMap Text Text) -> Int -> ListTagsResponse

-- | The key-value pair for the resource tag.
[$sel:tags:ListTagsResponse'] :: ListTagsResponse -> Maybe (HashMap Text Text)

-- | The response's http status code.
[$sel:httpStatus:ListTagsResponse'] :: ListTagsResponse -> Int

-- | Create a value of <a>ListTagsResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tags:ListTagsResponse'</a>, <a>listTagsResponse_tags</a> - The
--   key-value pair for the resource tag.
--   
--   <a>$sel:httpStatus:ListTagsResponse'</a>,
--   <a>listTagsResponse_httpStatus</a> - The response's http status code.
newListTagsResponse :: Int -> ListTagsResponse

-- | The key-value pair for the resource tag.
listTagsResponse_tags :: Lens' ListTagsResponse (Maybe (HashMap Text Text))

-- | The response's http status code.
listTagsResponse_httpStatus :: Lens' ListTagsResponse Int
instance GHC.Generics.Generic Amazonka.MQ.ListTags.ListTags
instance GHC.Show.Show Amazonka.MQ.ListTags.ListTags
instance GHC.Read.Read Amazonka.MQ.ListTags.ListTags
instance GHC.Classes.Eq Amazonka.MQ.ListTags.ListTags
instance GHC.Generics.Generic Amazonka.MQ.ListTags.ListTagsResponse
instance GHC.Show.Show Amazonka.MQ.ListTags.ListTagsResponse
instance GHC.Read.Read Amazonka.MQ.ListTags.ListTagsResponse
instance GHC.Classes.Eq Amazonka.MQ.ListTags.ListTagsResponse
instance Amazonka.Types.AWSRequest Amazonka.MQ.ListTags.ListTags
instance Control.DeepSeq.NFData Amazonka.MQ.ListTags.ListTagsResponse
instance Data.Hashable.Class.Hashable Amazonka.MQ.ListTags.ListTags
instance Control.DeepSeq.NFData Amazonka.MQ.ListTags.ListTags
instance Amazonka.Data.Headers.ToHeaders Amazonka.MQ.ListTags.ListTags
instance Amazonka.Data.Path.ToPath Amazonka.MQ.ListTags.ListTags
instance Amazonka.Data.Query.ToQuery Amazonka.MQ.ListTags.ListTags


-- | Returns a list of all configurations.
module Amazonka.MQ.ListConfigurations

-- | <i>See:</i> <a>newListConfigurations</a> smart constructor.
data ListConfigurations
ListConfigurations' :: Maybe Text -> Maybe Natural -> ListConfigurations

-- | The token that specifies the next page of results Amazon MQ should
--   return. To request the first page, leave nextToken empty.
[$sel:nextToken:ListConfigurations'] :: ListConfigurations -> Maybe Text

-- | The maximum number of brokers that Amazon MQ can return per page (20
--   by default). This value must be an integer from 5 to 100.
[$sel:maxResults:ListConfigurations'] :: ListConfigurations -> Maybe Natural

-- | Create a value of <a>ListConfigurations</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListConfigurations'</a>,
--   <a>listConfigurations_nextToken</a> - The token that specifies the
--   next page of results Amazon MQ should return. To request the first
--   page, leave nextToken empty.
--   
--   <a>$sel:maxResults:ListConfigurations'</a>,
--   <a>listConfigurations_maxResults</a> - The maximum number of brokers
--   that Amazon MQ can return per page (20 by default). This value must be
--   an integer from 5 to 100.
newListConfigurations :: ListConfigurations

-- | The token that specifies the next page of results Amazon MQ should
--   return. To request the first page, leave nextToken empty.
listConfigurations_nextToken :: Lens' ListConfigurations (Maybe Text)

-- | The maximum number of brokers that Amazon MQ can return per page (20
--   by default). This value must be an integer from 5 to 100.
listConfigurations_maxResults :: Lens' ListConfigurations (Maybe Natural)

-- | <i>See:</i> <a>newListConfigurationsResponse</a> smart constructor.
data ListConfigurationsResponse
ListConfigurationsResponse' :: Maybe [Configuration] -> Maybe Text -> Maybe Int -> Int -> ListConfigurationsResponse

-- | The list of all revisions for the specified configuration.
[$sel:configurations:ListConfigurationsResponse'] :: ListConfigurationsResponse -> Maybe [Configuration]

-- | The token that specifies the next page of results Amazon MQ should
--   return. To request the first page, leave nextToken empty.
[$sel:nextToken:ListConfigurationsResponse'] :: ListConfigurationsResponse -> Maybe Text

-- | The maximum number of configurations that Amazon MQ can return per
--   page (20 by default). This value must be an integer from 5 to 100.
[$sel:maxResults:ListConfigurationsResponse'] :: ListConfigurationsResponse -> Maybe Int

-- | The response's http status code.
[$sel:httpStatus:ListConfigurationsResponse'] :: ListConfigurationsResponse -> Int

-- | Create a value of <a>ListConfigurationsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:configurations:ListConfigurationsResponse'</a>,
--   <a>listConfigurationsResponse_configurations</a> - The list of all
--   revisions for the specified configuration.
--   
--   <a>$sel:nextToken:ListConfigurations'</a>,
--   <a>listConfigurationsResponse_nextToken</a> - The token that specifies
--   the next page of results Amazon MQ should return. To request the first
--   page, leave nextToken empty.
--   
--   <a>$sel:maxResults:ListConfigurations'</a>,
--   <a>listConfigurationsResponse_maxResults</a> - The maximum number of
--   configurations that Amazon MQ can return per page (20 by default).
--   This value must be an integer from 5 to 100.
--   
--   <a>$sel:httpStatus:ListConfigurationsResponse'</a>,
--   <a>listConfigurationsResponse_httpStatus</a> - The response's http
--   status code.
newListConfigurationsResponse :: Int -> ListConfigurationsResponse

-- | The list of all revisions for the specified configuration.
listConfigurationsResponse_configurations :: Lens' ListConfigurationsResponse (Maybe [Configuration])

-- | The token that specifies the next page of results Amazon MQ should
--   return. To request the first page, leave nextToken empty.
listConfigurationsResponse_nextToken :: Lens' ListConfigurationsResponse (Maybe Text)

-- | The maximum number of configurations that Amazon MQ can return per
--   page (20 by default). This value must be an integer from 5 to 100.
listConfigurationsResponse_maxResults :: Lens' ListConfigurationsResponse (Maybe Int)

-- | The response's http status code.
listConfigurationsResponse_httpStatus :: Lens' ListConfigurationsResponse Int
instance GHC.Generics.Generic Amazonka.MQ.ListConfigurations.ListConfigurations
instance GHC.Show.Show Amazonka.MQ.ListConfigurations.ListConfigurations
instance GHC.Read.Read Amazonka.MQ.ListConfigurations.ListConfigurations
instance GHC.Classes.Eq Amazonka.MQ.ListConfigurations.ListConfigurations
instance GHC.Generics.Generic Amazonka.MQ.ListConfigurations.ListConfigurationsResponse
instance GHC.Show.Show Amazonka.MQ.ListConfigurations.ListConfigurationsResponse
instance GHC.Read.Read Amazonka.MQ.ListConfigurations.ListConfigurationsResponse
instance GHC.Classes.Eq Amazonka.MQ.ListConfigurations.ListConfigurationsResponse
instance Amazonka.Types.AWSRequest Amazonka.MQ.ListConfigurations.ListConfigurations
instance Control.DeepSeq.NFData Amazonka.MQ.ListConfigurations.ListConfigurationsResponse
instance Data.Hashable.Class.Hashable Amazonka.MQ.ListConfigurations.ListConfigurations
instance Control.DeepSeq.NFData Amazonka.MQ.ListConfigurations.ListConfigurations
instance Amazonka.Data.Headers.ToHeaders Amazonka.MQ.ListConfigurations.ListConfigurations
instance Amazonka.Data.Path.ToPath Amazonka.MQ.ListConfigurations.ListConfigurations
instance Amazonka.Data.Query.ToQuery Amazonka.MQ.ListConfigurations.ListConfigurations


-- | Returns a list of all revisions for the specified configuration.
module Amazonka.MQ.ListConfigurationRevisions

-- | <i>See:</i> <a>newListConfigurationRevisions</a> smart constructor.
data ListConfigurationRevisions
ListConfigurationRevisions' :: Maybe Text -> Maybe Natural -> Text -> ListConfigurationRevisions

-- | The token that specifies the next page of results Amazon MQ should
--   return. To request the first page, leave nextToken empty.
[$sel:nextToken:ListConfigurationRevisions'] :: ListConfigurationRevisions -> Maybe Text

-- | The maximum number of brokers that Amazon MQ can return per page (20
--   by default). This value must be an integer from 5 to 100.
[$sel:maxResults:ListConfigurationRevisions'] :: ListConfigurationRevisions -> Maybe Natural

-- | The unique ID that Amazon MQ generates for the configuration.
[$sel:configurationId:ListConfigurationRevisions'] :: ListConfigurationRevisions -> Text

-- | Create a value of <a>ListConfigurationRevisions</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListConfigurationRevisions'</a>,
--   <a>listConfigurationRevisions_nextToken</a> - The token that specifies
--   the next page of results Amazon MQ should return. To request the first
--   page, leave nextToken empty.
--   
--   <a>$sel:maxResults:ListConfigurationRevisions'</a>,
--   <a>listConfigurationRevisions_maxResults</a> - The maximum number of
--   brokers that Amazon MQ can return per page (20 by default). This value
--   must be an integer from 5 to 100.
--   
--   <a>$sel:configurationId:ListConfigurationRevisions'</a>,
--   <a>listConfigurationRevisions_configurationId</a> - The unique ID that
--   Amazon MQ generates for the configuration.
newListConfigurationRevisions :: Text -> ListConfigurationRevisions

-- | The token that specifies the next page of results Amazon MQ should
--   return. To request the first page, leave nextToken empty.
listConfigurationRevisions_nextToken :: Lens' ListConfigurationRevisions (Maybe Text)

-- | The maximum number of brokers that Amazon MQ can return per page (20
--   by default). This value must be an integer from 5 to 100.
listConfigurationRevisions_maxResults :: Lens' ListConfigurationRevisions (Maybe Natural)

-- | The unique ID that Amazon MQ generates for the configuration.
listConfigurationRevisions_configurationId :: Lens' ListConfigurationRevisions Text

-- | <i>See:</i> <a>newListConfigurationRevisionsResponse</a> smart
--   constructor.
data ListConfigurationRevisionsResponse
ListConfigurationRevisionsResponse' :: Maybe Text -> Maybe Text -> Maybe [ConfigurationRevision] -> Maybe Int -> Int -> ListConfigurationRevisionsResponse

-- | The unique ID that Amazon MQ generates for the configuration.
[$sel:configurationId:ListConfigurationRevisionsResponse'] :: ListConfigurationRevisionsResponse -> Maybe Text

-- | The token that specifies the next page of results Amazon MQ should
--   return. To request the first page, leave nextToken empty.
[$sel:nextToken:ListConfigurationRevisionsResponse'] :: ListConfigurationRevisionsResponse -> Maybe Text

-- | The list of all revisions for the specified configuration.
[$sel:revisions:ListConfigurationRevisionsResponse'] :: ListConfigurationRevisionsResponse -> Maybe [ConfigurationRevision]

-- | The maximum number of configuration revisions that can be returned per
--   page (20 by default). This value must be an integer from 5 to 100.
[$sel:maxResults:ListConfigurationRevisionsResponse'] :: ListConfigurationRevisionsResponse -> Maybe Int

-- | The response's http status code.
[$sel:httpStatus:ListConfigurationRevisionsResponse'] :: ListConfigurationRevisionsResponse -> Int

-- | Create a value of <a>ListConfigurationRevisionsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:configurationId:ListConfigurationRevisions'</a>,
--   <a>listConfigurationRevisionsResponse_configurationId</a> - The unique
--   ID that Amazon MQ generates for the configuration.
--   
--   <a>$sel:nextToken:ListConfigurationRevisions'</a>,
--   <a>listConfigurationRevisionsResponse_nextToken</a> - The token that
--   specifies the next page of results Amazon MQ should return. To request
--   the first page, leave nextToken empty.
--   
--   <a>$sel:revisions:ListConfigurationRevisionsResponse'</a>,
--   <a>listConfigurationRevisionsResponse_revisions</a> - The list of all
--   revisions for the specified configuration.
--   
--   <a>$sel:maxResults:ListConfigurationRevisions'</a>,
--   <a>listConfigurationRevisionsResponse_maxResults</a> - The maximum
--   number of configuration revisions that can be returned per page (20 by
--   default). This value must be an integer from 5 to 100.
--   
--   <a>$sel:httpStatus:ListConfigurationRevisionsResponse'</a>,
--   <a>listConfigurationRevisionsResponse_httpStatus</a> - The response's
--   http status code.
newListConfigurationRevisionsResponse :: Int -> ListConfigurationRevisionsResponse

-- | The unique ID that Amazon MQ generates for the configuration.
listConfigurationRevisionsResponse_configurationId :: Lens' ListConfigurationRevisionsResponse (Maybe Text)

-- | The token that specifies the next page of results Amazon MQ should
--   return. To request the first page, leave nextToken empty.
listConfigurationRevisionsResponse_nextToken :: Lens' ListConfigurationRevisionsResponse (Maybe Text)

-- | The list of all revisions for the specified configuration.
listConfigurationRevisionsResponse_revisions :: Lens' ListConfigurationRevisionsResponse (Maybe [ConfigurationRevision])

-- | The maximum number of configuration revisions that can be returned per
--   page (20 by default). This value must be an integer from 5 to 100.
listConfigurationRevisionsResponse_maxResults :: Lens' ListConfigurationRevisionsResponse (Maybe Int)

-- | The response's http status code.
listConfigurationRevisionsResponse_httpStatus :: Lens' ListConfigurationRevisionsResponse Int
instance GHC.Generics.Generic Amazonka.MQ.ListConfigurationRevisions.ListConfigurationRevisions
instance GHC.Show.Show Amazonka.MQ.ListConfigurationRevisions.ListConfigurationRevisions
instance GHC.Read.Read Amazonka.MQ.ListConfigurationRevisions.ListConfigurationRevisions
instance GHC.Classes.Eq Amazonka.MQ.ListConfigurationRevisions.ListConfigurationRevisions
instance GHC.Generics.Generic Amazonka.MQ.ListConfigurationRevisions.ListConfigurationRevisionsResponse
instance GHC.Show.Show Amazonka.MQ.ListConfigurationRevisions.ListConfigurationRevisionsResponse
instance GHC.Read.Read Amazonka.MQ.ListConfigurationRevisions.ListConfigurationRevisionsResponse
instance GHC.Classes.Eq Amazonka.MQ.ListConfigurationRevisions.ListConfigurationRevisionsResponse
instance Amazonka.Types.AWSRequest Amazonka.MQ.ListConfigurationRevisions.ListConfigurationRevisions
instance Control.DeepSeq.NFData Amazonka.MQ.ListConfigurationRevisions.ListConfigurationRevisionsResponse
instance Data.Hashable.Class.Hashable Amazonka.MQ.ListConfigurationRevisions.ListConfigurationRevisions
instance Control.DeepSeq.NFData Amazonka.MQ.ListConfigurationRevisions.ListConfigurationRevisions
instance Amazonka.Data.Headers.ToHeaders Amazonka.MQ.ListConfigurationRevisions.ListConfigurationRevisions
instance Amazonka.Data.Path.ToPath Amazonka.MQ.ListConfigurationRevisions.ListConfigurationRevisions
instance Amazonka.Data.Query.ToQuery Amazonka.MQ.ListConfigurationRevisions.ListConfigurationRevisions


-- | Returns a list of all brokers.
--   
--   This operation returns paginated results.
module Amazonka.MQ.ListBrokers

-- | <i>See:</i> <a>newListBrokers</a> smart constructor.
data ListBrokers
ListBrokers' :: Maybe Text -> Maybe Natural -> ListBrokers

-- | The token that specifies the next page of results Amazon MQ should
--   return. To request the first page, leave nextToken empty.
[$sel:nextToken:ListBrokers'] :: ListBrokers -> Maybe Text

-- | The maximum number of brokers that Amazon MQ can return per page (20
--   by default). This value must be an integer from 5 to 100.
[$sel:maxResults:ListBrokers'] :: ListBrokers -> Maybe Natural

-- | Create a value of <a>ListBrokers</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListBrokers'</a>, <a>listBrokers_nextToken</a> - The
--   token that specifies the next page of results Amazon MQ should return.
--   To request the first page, leave nextToken empty.
--   
--   <a>$sel:maxResults:ListBrokers'</a>, <a>listBrokers_maxResults</a> -
--   The maximum number of brokers that Amazon MQ can return per page (20
--   by default). This value must be an integer from 5 to 100.
newListBrokers :: ListBrokers

-- | The token that specifies the next page of results Amazon MQ should
--   return. To request the first page, leave nextToken empty.
listBrokers_nextToken :: Lens' ListBrokers (Maybe Text)

-- | The maximum number of brokers that Amazon MQ can return per page (20
--   by default). This value must be an integer from 5 to 100.
listBrokers_maxResults :: Lens' ListBrokers (Maybe Natural)

-- | <i>See:</i> <a>newListBrokersResponse</a> smart constructor.
data ListBrokersResponse
ListBrokersResponse' :: Maybe Text -> Maybe [BrokerSummary] -> Int -> ListBrokersResponse

-- | The token that specifies the next page of results Amazon MQ should
--   return. To request the first page, leave nextToken empty.
[$sel:nextToken:ListBrokersResponse'] :: ListBrokersResponse -> Maybe Text

-- | A list of information about all brokers.
[$sel:brokerSummaries:ListBrokersResponse'] :: ListBrokersResponse -> Maybe [BrokerSummary]

-- | The response's http status code.
[$sel:httpStatus:ListBrokersResponse'] :: ListBrokersResponse -> Int

-- | Create a value of <a>ListBrokersResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListBrokers'</a>,
--   <a>listBrokersResponse_nextToken</a> - The token that specifies the
--   next page of results Amazon MQ should return. To request the first
--   page, leave nextToken empty.
--   
--   <a>$sel:brokerSummaries:ListBrokersResponse'</a>,
--   <a>listBrokersResponse_brokerSummaries</a> - A list of information
--   about all brokers.
--   
--   <a>$sel:httpStatus:ListBrokersResponse'</a>,
--   <a>listBrokersResponse_httpStatus</a> - The response's http status
--   code.
newListBrokersResponse :: Int -> ListBrokersResponse

-- | The token that specifies the next page of results Amazon MQ should
--   return. To request the first page, leave nextToken empty.
listBrokersResponse_nextToken :: Lens' ListBrokersResponse (Maybe Text)

-- | A list of information about all brokers.
listBrokersResponse_brokerSummaries :: Lens' ListBrokersResponse (Maybe [BrokerSummary])

-- | The response's http status code.
listBrokersResponse_httpStatus :: Lens' ListBrokersResponse Int
instance GHC.Generics.Generic Amazonka.MQ.ListBrokers.ListBrokers
instance GHC.Show.Show Amazonka.MQ.ListBrokers.ListBrokers
instance GHC.Read.Read Amazonka.MQ.ListBrokers.ListBrokers
instance GHC.Classes.Eq Amazonka.MQ.ListBrokers.ListBrokers
instance GHC.Generics.Generic Amazonka.MQ.ListBrokers.ListBrokersResponse
instance GHC.Show.Show Amazonka.MQ.ListBrokers.ListBrokersResponse
instance GHC.Read.Read Amazonka.MQ.ListBrokers.ListBrokersResponse
instance GHC.Classes.Eq Amazonka.MQ.ListBrokers.ListBrokersResponse
instance Amazonka.Types.AWSRequest Amazonka.MQ.ListBrokers.ListBrokers
instance Control.DeepSeq.NFData Amazonka.MQ.ListBrokers.ListBrokersResponse
instance Amazonka.Pager.AWSPager Amazonka.MQ.ListBrokers.ListBrokers
instance Data.Hashable.Class.Hashable Amazonka.MQ.ListBrokers.ListBrokers
instance Control.DeepSeq.NFData Amazonka.MQ.ListBrokers.ListBrokers
instance Amazonka.Data.Headers.ToHeaders Amazonka.MQ.ListBrokers.ListBrokers
instance Amazonka.Data.Path.ToPath Amazonka.MQ.ListBrokers.ListBrokers
instance Amazonka.Data.Query.ToQuery Amazonka.MQ.ListBrokers.ListBrokers


-- | Returns information about an ActiveMQ user.
module Amazonka.MQ.DescribeUser

-- | <i>See:</i> <a>newDescribeUser</a> smart constructor.
data DescribeUser
DescribeUser' :: Text -> Text -> DescribeUser

-- | The username of the ActiveMQ user. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 2-100 characters long.
[$sel:username:DescribeUser'] :: DescribeUser -> Text

-- | The unique ID that Amazon MQ generates for the broker.
[$sel:brokerId:DescribeUser'] :: DescribeUser -> Text

-- | Create a value of <a>DescribeUser</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:username:DescribeUser'</a>, <a>describeUser_username</a> - The
--   username of the ActiveMQ user. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 2-100 characters long.
--   
--   <a>$sel:brokerId:DescribeUser'</a>, <a>describeUser_brokerId</a> - The
--   unique ID that Amazon MQ generates for the broker.
newDescribeUser :: Text -> Text -> DescribeUser

-- | The username of the ActiveMQ user. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 2-100 characters long.
describeUser_username :: Lens' DescribeUser Text

-- | The unique ID that Amazon MQ generates for the broker.
describeUser_brokerId :: Lens' DescribeUser Text

-- | <i>See:</i> <a>newDescribeUserResponse</a> smart constructor.
data DescribeUserResponse
DescribeUserResponse' :: Maybe [Text] -> Maybe UserPendingChanges -> Maybe Bool -> Maybe Text -> Maybe Text -> Int -> DescribeUserResponse

-- | The list of groups (20 maximum) to which the ActiveMQ user belongs.
--   This value can contain only alphanumeric characters, dashes, periods,
--   underscores, and tildes (- . _ ~). This value must be 2-100 characters
--   long.
[$sel:groups:DescribeUserResponse'] :: DescribeUserResponse -> Maybe [Text]

-- | The status of the changes pending for the ActiveMQ user.
[$sel:pending:DescribeUserResponse'] :: DescribeUserResponse -> Maybe UserPendingChanges

-- | Enables access to the the ActiveMQ Web Console for the ActiveMQ user.
[$sel:consoleAccess:DescribeUserResponse'] :: DescribeUserResponse -> Maybe Bool

-- | Required. The username of the ActiveMQ user. This value can contain
--   only alphanumeric characters, dashes, periods, underscores, and tildes
--   (- . _ ~). This value must be 2-100 characters long.
[$sel:username:DescribeUserResponse'] :: DescribeUserResponse -> Maybe Text

-- | Required. The unique ID that Amazon MQ generates for the broker.
[$sel:brokerId:DescribeUserResponse'] :: DescribeUserResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:DescribeUserResponse'] :: DescribeUserResponse -> Int

-- | Create a value of <a>DescribeUserResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:groups:DescribeUserResponse'</a>,
--   <a>describeUserResponse_groups</a> - The list of groups (20 maximum)
--   to which the ActiveMQ user belongs. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 2-100 characters long.
--   
--   <a>$sel:pending:DescribeUserResponse'</a>,
--   <a>describeUserResponse_pending</a> - The status of the changes
--   pending for the ActiveMQ user.
--   
--   <a>$sel:consoleAccess:DescribeUserResponse'</a>,
--   <a>describeUserResponse_consoleAccess</a> - Enables access to the the
--   ActiveMQ Web Console for the ActiveMQ user.
--   
--   <a>$sel:username:DescribeUser'</a>,
--   <a>describeUserResponse_username</a> - Required. The username of the
--   ActiveMQ user. This value can contain only alphanumeric characters,
--   dashes, periods, underscores, and tildes (- . _ ~). This value must be
--   2-100 characters long.
--   
--   <a>$sel:brokerId:DescribeUser'</a>,
--   <a>describeUserResponse_brokerId</a> - Required. The unique ID that
--   Amazon MQ generates for the broker.
--   
--   <a>$sel:httpStatus:DescribeUserResponse'</a>,
--   <a>describeUserResponse_httpStatus</a> - The response's http status
--   code.
newDescribeUserResponse :: Int -> DescribeUserResponse

-- | The list of groups (20 maximum) to which the ActiveMQ user belongs.
--   This value can contain only alphanumeric characters, dashes, periods,
--   underscores, and tildes (- . _ ~). This value must be 2-100 characters
--   long.
describeUserResponse_groups :: Lens' DescribeUserResponse (Maybe [Text])

-- | The status of the changes pending for the ActiveMQ user.
describeUserResponse_pending :: Lens' DescribeUserResponse (Maybe UserPendingChanges)

-- | Enables access to the the ActiveMQ Web Console for the ActiveMQ user.
describeUserResponse_consoleAccess :: Lens' DescribeUserResponse (Maybe Bool)

-- | Required. The username of the ActiveMQ user. This value can contain
--   only alphanumeric characters, dashes, periods, underscores, and tildes
--   (- . _ ~). This value must be 2-100 characters long.
describeUserResponse_username :: Lens' DescribeUserResponse (Maybe Text)

-- | Required. The unique ID that Amazon MQ generates for the broker.
describeUserResponse_brokerId :: Lens' DescribeUserResponse (Maybe Text)

-- | The response's http status code.
describeUserResponse_httpStatus :: Lens' DescribeUserResponse Int
instance GHC.Generics.Generic Amazonka.MQ.DescribeUser.DescribeUser
instance GHC.Show.Show Amazonka.MQ.DescribeUser.DescribeUser
instance GHC.Read.Read Amazonka.MQ.DescribeUser.DescribeUser
instance GHC.Classes.Eq Amazonka.MQ.DescribeUser.DescribeUser
instance GHC.Generics.Generic Amazonka.MQ.DescribeUser.DescribeUserResponse
instance GHC.Show.Show Amazonka.MQ.DescribeUser.DescribeUserResponse
instance GHC.Read.Read Amazonka.MQ.DescribeUser.DescribeUserResponse
instance GHC.Classes.Eq Amazonka.MQ.DescribeUser.DescribeUserResponse
instance Amazonka.Types.AWSRequest Amazonka.MQ.DescribeUser.DescribeUser
instance Control.DeepSeq.NFData Amazonka.MQ.DescribeUser.DescribeUserResponse
instance Data.Hashable.Class.Hashable Amazonka.MQ.DescribeUser.DescribeUser
instance Control.DeepSeq.NFData Amazonka.MQ.DescribeUser.DescribeUser
instance Amazonka.Data.Headers.ToHeaders Amazonka.MQ.DescribeUser.DescribeUser
instance Amazonka.Data.Path.ToPath Amazonka.MQ.DescribeUser.DescribeUser
instance Amazonka.Data.Query.ToQuery Amazonka.MQ.DescribeUser.DescribeUser


-- | Returns the specified configuration revision for the specified
--   configuration.
module Amazonka.MQ.DescribeConfigurationRevision

-- | <i>See:</i> <a>newDescribeConfigurationRevision</a> smart constructor.
data DescribeConfigurationRevision
DescribeConfigurationRevision' :: Text -> Text -> DescribeConfigurationRevision

-- | The revision of the configuration.
[$sel:configurationRevision:DescribeConfigurationRevision'] :: DescribeConfigurationRevision -> Text

-- | The unique ID that Amazon MQ generates for the configuration.
[$sel:configurationId:DescribeConfigurationRevision'] :: DescribeConfigurationRevision -> Text

-- | Create a value of <a>DescribeConfigurationRevision</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:configurationRevision:DescribeConfigurationRevision'</a>,
--   <a>describeConfigurationRevision_configurationRevision</a> - The
--   revision of the configuration.
--   
--   <a>$sel:configurationId:DescribeConfigurationRevision'</a>,
--   <a>describeConfigurationRevision_configurationId</a> - The unique ID
--   that Amazon MQ generates for the configuration.
newDescribeConfigurationRevision :: Text -> Text -> DescribeConfigurationRevision

-- | The revision of the configuration.
describeConfigurationRevision_configurationRevision :: Lens' DescribeConfigurationRevision Text

-- | The unique ID that Amazon MQ generates for the configuration.
describeConfigurationRevision_configurationId :: Lens' DescribeConfigurationRevision Text

-- | <i>See:</i> <a>newDescribeConfigurationRevisionResponse</a> smart
--   constructor.
data DescribeConfigurationRevisionResponse
DescribeConfigurationRevisionResponse' :: Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe Text -> Int -> DescribeConfigurationRevisionResponse

-- | Required. The unique ID that Amazon MQ generates for the
--   configuration.
[$sel:configurationId:DescribeConfigurationRevisionResponse'] :: DescribeConfigurationRevisionResponse -> Maybe Text

-- | Required. The base64-encoded XML configuration.
[$sel:data':DescribeConfigurationRevisionResponse'] :: DescribeConfigurationRevisionResponse -> Maybe Text

-- | Required. The date and time of the configuration.
[$sel:created:DescribeConfigurationRevisionResponse'] :: DescribeConfigurationRevisionResponse -> Maybe POSIX

-- | The description of the configuration.
[$sel:description:DescribeConfigurationRevisionResponse'] :: DescribeConfigurationRevisionResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:DescribeConfigurationRevisionResponse'] :: DescribeConfigurationRevisionResponse -> Int

-- | Create a value of <a>DescribeConfigurationRevisionResponse</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:configurationId:DescribeConfigurationRevision'</a>,
--   <a>describeConfigurationRevisionResponse_configurationId</a> -
--   Required. The unique ID that Amazon MQ generates for the
--   configuration.
--   
--   <a>$sel:data':DescribeConfigurationRevisionResponse'</a>,
--   <a>describeConfigurationRevisionResponse_data</a> - Required. The
--   base64-encoded XML configuration.
--   
--   <a>$sel:created:DescribeConfigurationRevisionResponse'</a>,
--   <a>describeConfigurationRevisionResponse_created</a> - Required. The
--   date and time of the configuration.
--   
--   <a>$sel:description:DescribeConfigurationRevisionResponse'</a>,
--   <a>describeConfigurationRevisionResponse_description</a> - The
--   description of the configuration.
--   
--   <a>$sel:httpStatus:DescribeConfigurationRevisionResponse'</a>,
--   <a>describeConfigurationRevisionResponse_httpStatus</a> - The
--   response's http status code.
newDescribeConfigurationRevisionResponse :: Int -> DescribeConfigurationRevisionResponse

-- | Required. The unique ID that Amazon MQ generates for the
--   configuration.
describeConfigurationRevisionResponse_configurationId :: Lens' DescribeConfigurationRevisionResponse (Maybe Text)

-- | Required. The base64-encoded XML configuration.
describeConfigurationRevisionResponse_data :: Lens' DescribeConfigurationRevisionResponse (Maybe Text)

-- | Required. The date and time of the configuration.
describeConfigurationRevisionResponse_created :: Lens' DescribeConfigurationRevisionResponse (Maybe UTCTime)

-- | The description of the configuration.
describeConfigurationRevisionResponse_description :: Lens' DescribeConfigurationRevisionResponse (Maybe Text)

-- | The response's http status code.
describeConfigurationRevisionResponse_httpStatus :: Lens' DescribeConfigurationRevisionResponse Int
instance GHC.Generics.Generic Amazonka.MQ.DescribeConfigurationRevision.DescribeConfigurationRevision
instance GHC.Show.Show Amazonka.MQ.DescribeConfigurationRevision.DescribeConfigurationRevision
instance GHC.Read.Read Amazonka.MQ.DescribeConfigurationRevision.DescribeConfigurationRevision
instance GHC.Classes.Eq Amazonka.MQ.DescribeConfigurationRevision.DescribeConfigurationRevision
instance GHC.Generics.Generic Amazonka.MQ.DescribeConfigurationRevision.DescribeConfigurationRevisionResponse
instance GHC.Show.Show Amazonka.MQ.DescribeConfigurationRevision.DescribeConfigurationRevisionResponse
instance GHC.Read.Read Amazonka.MQ.DescribeConfigurationRevision.DescribeConfigurationRevisionResponse
instance GHC.Classes.Eq Amazonka.MQ.DescribeConfigurationRevision.DescribeConfigurationRevisionResponse
instance Amazonka.Types.AWSRequest Amazonka.MQ.DescribeConfigurationRevision.DescribeConfigurationRevision
instance Control.DeepSeq.NFData Amazonka.MQ.DescribeConfigurationRevision.DescribeConfigurationRevisionResponse
instance Data.Hashable.Class.Hashable Amazonka.MQ.DescribeConfigurationRevision.DescribeConfigurationRevision
instance Control.DeepSeq.NFData Amazonka.MQ.DescribeConfigurationRevision.DescribeConfigurationRevision
instance Amazonka.Data.Headers.ToHeaders Amazonka.MQ.DescribeConfigurationRevision.DescribeConfigurationRevision
instance Amazonka.Data.Path.ToPath Amazonka.MQ.DescribeConfigurationRevision.DescribeConfigurationRevision
instance Amazonka.Data.Query.ToQuery Amazonka.MQ.DescribeConfigurationRevision.DescribeConfigurationRevision


-- | Returns information about the specified configuration.
module Amazonka.MQ.DescribeConfiguration

-- | <i>See:</i> <a>newDescribeConfiguration</a> smart constructor.
data DescribeConfiguration
DescribeConfiguration' :: Text -> DescribeConfiguration

-- | The unique ID that Amazon MQ generates for the configuration.
[$sel:configurationId:DescribeConfiguration'] :: DescribeConfiguration -> Text

-- | Create a value of <a>DescribeConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:configurationId:DescribeConfiguration'</a>,
--   <a>describeConfiguration_configurationId</a> - The unique ID that
--   Amazon MQ generates for the configuration.
newDescribeConfiguration :: Text -> DescribeConfiguration

-- | The unique ID that Amazon MQ generates for the configuration.
describeConfiguration_configurationId :: Lens' DescribeConfiguration Text

-- | <i>See:</i> <a>newDescribeConfigurationResponse</a> smart constructor.
data DescribeConfigurationResponse
DescribeConfigurationResponse' :: Maybe Text -> Maybe Text -> Maybe ConfigurationRevision -> Maybe POSIX -> Maybe AuthenticationStrategy -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe EngineType -> Maybe (HashMap Text Text) -> Int -> DescribeConfigurationResponse

-- | Required. The broker engine's version. For a list of supported engine
--   versions, see, <a>Supported engines</a>.
[$sel:engineVersion:DescribeConfigurationResponse'] :: DescribeConfigurationResponse -> Maybe Text

-- | Required. The ARN of the configuration.
[$sel:arn:DescribeConfigurationResponse'] :: DescribeConfigurationResponse -> Maybe Text

-- | Required. The latest revision of the configuration.
[$sel:latestRevision:DescribeConfigurationResponse'] :: DescribeConfigurationResponse -> Maybe ConfigurationRevision

-- | Required. The date and time of the configuration revision.
[$sel:created:DescribeConfigurationResponse'] :: DescribeConfigurationResponse -> Maybe POSIX

-- | Optional. The authentication strategy associated with the
--   configuration. The default is SIMPLE.
[$sel:authenticationStrategy:DescribeConfigurationResponse'] :: DescribeConfigurationResponse -> Maybe AuthenticationStrategy

-- | Required. The name of the configuration. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 1-150 characters long.
[$sel:name:DescribeConfigurationResponse'] :: DescribeConfigurationResponse -> Maybe Text

-- | Required. The unique ID that Amazon MQ generates for the
--   configuration.
[$sel:id:DescribeConfigurationResponse'] :: DescribeConfigurationResponse -> Maybe Text

-- | Required. The description of the configuration.
[$sel:description:DescribeConfigurationResponse'] :: DescribeConfigurationResponse -> Maybe Text

-- | Required. The type of broker engine. Currently, Amazon MQ supports
--   ACTIVEMQ and RABBITMQ.
[$sel:engineType:DescribeConfigurationResponse'] :: DescribeConfigurationResponse -> Maybe EngineType

-- | The list of all tags associated with this configuration.
[$sel:tags:DescribeConfigurationResponse'] :: DescribeConfigurationResponse -> Maybe (HashMap Text Text)

-- | The response's http status code.
[$sel:httpStatus:DescribeConfigurationResponse'] :: DescribeConfigurationResponse -> Int

-- | Create a value of <a>DescribeConfigurationResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:engineVersion:DescribeConfigurationResponse'</a>,
--   <a>describeConfigurationResponse_engineVersion</a> - Required. The
--   broker engine's version. For a list of supported engine versions, see,
--   <a>Supported engines</a>.
--   
--   <a>$sel:arn:DescribeConfigurationResponse'</a>,
--   <a>describeConfigurationResponse_arn</a> - Required. The ARN of the
--   configuration.
--   
--   <a>$sel:latestRevision:DescribeConfigurationResponse'</a>,
--   <a>describeConfigurationResponse_latestRevision</a> - Required. The
--   latest revision of the configuration.
--   
--   <a>$sel:created:DescribeConfigurationResponse'</a>,
--   <a>describeConfigurationResponse_created</a> - Required. The date and
--   time of the configuration revision.
--   
--   <a>$sel:authenticationStrategy:DescribeConfigurationResponse'</a>,
--   <a>describeConfigurationResponse_authenticationStrategy</a> -
--   Optional. The authentication strategy associated with the
--   configuration. The default is SIMPLE.
--   
--   <a>$sel:name:DescribeConfigurationResponse'</a>,
--   <a>describeConfigurationResponse_name</a> - Required. The name of the
--   configuration. This value can contain only alphanumeric characters,
--   dashes, periods, underscores, and tildes (- . _ ~). This value must be
--   1-150 characters long.
--   
--   <a>$sel:id:DescribeConfigurationResponse'</a>,
--   <a>describeConfigurationResponse_id</a> - Required. The unique ID that
--   Amazon MQ generates for the configuration.
--   
--   <a>$sel:description:DescribeConfigurationResponse'</a>,
--   <a>describeConfigurationResponse_description</a> - Required. The
--   description of the configuration.
--   
--   <a>$sel:engineType:DescribeConfigurationResponse'</a>,
--   <a>describeConfigurationResponse_engineType</a> - Required. The type
--   of broker engine. Currently, Amazon MQ supports ACTIVEMQ and RABBITMQ.
--   
--   <a>$sel:tags:DescribeConfigurationResponse'</a>,
--   <a>describeConfigurationResponse_tags</a> - The list of all tags
--   associated with this configuration.
--   
--   <a>$sel:httpStatus:DescribeConfigurationResponse'</a>,
--   <a>describeConfigurationResponse_httpStatus</a> - The response's http
--   status code.
newDescribeConfigurationResponse :: Int -> DescribeConfigurationResponse

-- | Required. The broker engine's version. For a list of supported engine
--   versions, see, <a>Supported engines</a>.
describeConfigurationResponse_engineVersion :: Lens' DescribeConfigurationResponse (Maybe Text)

-- | Required. The ARN of the configuration.
describeConfigurationResponse_arn :: Lens' DescribeConfigurationResponse (Maybe Text)

-- | Required. The latest revision of the configuration.
describeConfigurationResponse_latestRevision :: Lens' DescribeConfigurationResponse (Maybe ConfigurationRevision)

-- | Required. The date and time of the configuration revision.
describeConfigurationResponse_created :: Lens' DescribeConfigurationResponse (Maybe UTCTime)

-- | Optional. The authentication strategy associated with the
--   configuration. The default is SIMPLE.
describeConfigurationResponse_authenticationStrategy :: Lens' DescribeConfigurationResponse (Maybe AuthenticationStrategy)

-- | Required. The name of the configuration. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 1-150 characters long.
describeConfigurationResponse_name :: Lens' DescribeConfigurationResponse (Maybe Text)

-- | Required. The unique ID that Amazon MQ generates for the
--   configuration.
describeConfigurationResponse_id :: Lens' DescribeConfigurationResponse (Maybe Text)

-- | Required. The description of the configuration.
describeConfigurationResponse_description :: Lens' DescribeConfigurationResponse (Maybe Text)

-- | Required. The type of broker engine. Currently, Amazon MQ supports
--   ACTIVEMQ and RABBITMQ.
describeConfigurationResponse_engineType :: Lens' DescribeConfigurationResponse (Maybe EngineType)

-- | The list of all tags associated with this configuration.
describeConfigurationResponse_tags :: Lens' DescribeConfigurationResponse (Maybe (HashMap Text Text))

-- | The response's http status code.
describeConfigurationResponse_httpStatus :: Lens' DescribeConfigurationResponse Int
instance GHC.Generics.Generic Amazonka.MQ.DescribeConfiguration.DescribeConfiguration
instance GHC.Show.Show Amazonka.MQ.DescribeConfiguration.DescribeConfiguration
instance GHC.Read.Read Amazonka.MQ.DescribeConfiguration.DescribeConfiguration
instance GHC.Classes.Eq Amazonka.MQ.DescribeConfiguration.DescribeConfiguration
instance GHC.Generics.Generic Amazonka.MQ.DescribeConfiguration.DescribeConfigurationResponse
instance GHC.Show.Show Amazonka.MQ.DescribeConfiguration.DescribeConfigurationResponse
instance GHC.Read.Read Amazonka.MQ.DescribeConfiguration.DescribeConfigurationResponse
instance GHC.Classes.Eq Amazonka.MQ.DescribeConfiguration.DescribeConfigurationResponse
instance Amazonka.Types.AWSRequest Amazonka.MQ.DescribeConfiguration.DescribeConfiguration
instance Control.DeepSeq.NFData Amazonka.MQ.DescribeConfiguration.DescribeConfigurationResponse
instance Data.Hashable.Class.Hashable Amazonka.MQ.DescribeConfiguration.DescribeConfiguration
instance Control.DeepSeq.NFData Amazonka.MQ.DescribeConfiguration.DescribeConfiguration
instance Amazonka.Data.Headers.ToHeaders Amazonka.MQ.DescribeConfiguration.DescribeConfiguration
instance Amazonka.Data.Path.ToPath Amazonka.MQ.DescribeConfiguration.DescribeConfiguration
instance Amazonka.Data.Query.ToQuery Amazonka.MQ.DescribeConfiguration.DescribeConfiguration


-- | Describe available broker instance options.
module Amazonka.MQ.DescribeBrokerInstanceOptions

-- | <i>See:</i> <a>newDescribeBrokerInstanceOptions</a> smart constructor.
data DescribeBrokerInstanceOptions
DescribeBrokerInstanceOptions' :: Maybe Text -> Maybe Text -> Maybe Natural -> Maybe Text -> Maybe Text -> DescribeBrokerInstanceOptions

-- | The token that specifies the next page of results Amazon MQ should
--   return. To request the first page, leave nextToken empty.
[$sel:nextToken:DescribeBrokerInstanceOptions'] :: DescribeBrokerInstanceOptions -> Maybe Text

-- | Filter response by engine type.
[$sel:engineType:DescribeBrokerInstanceOptions'] :: DescribeBrokerInstanceOptions -> Maybe Text

-- | The maximum number of brokers that Amazon MQ can return per page (20
--   by default). This value must be an integer from 5 to 100.
[$sel:maxResults:DescribeBrokerInstanceOptions'] :: DescribeBrokerInstanceOptions -> Maybe Natural

-- | Filter response by host instance type.
[$sel:hostInstanceType:DescribeBrokerInstanceOptions'] :: DescribeBrokerInstanceOptions -> Maybe Text

-- | Filter response by storage type.
[$sel:storageType:DescribeBrokerInstanceOptions'] :: DescribeBrokerInstanceOptions -> Maybe Text

-- | Create a value of <a>DescribeBrokerInstanceOptions</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:DescribeBrokerInstanceOptions'</a>,
--   <a>describeBrokerInstanceOptions_nextToken</a> - The token that
--   specifies the next page of results Amazon MQ should return. To request
--   the first page, leave nextToken empty.
--   
--   <a>$sel:engineType:DescribeBrokerInstanceOptions'</a>,
--   <a>describeBrokerInstanceOptions_engineType</a> - Filter response by
--   engine type.
--   
--   <a>$sel:maxResults:DescribeBrokerInstanceOptions'</a>,
--   <a>describeBrokerInstanceOptions_maxResults</a> - The maximum number
--   of brokers that Amazon MQ can return per page (20 by default). This
--   value must be an integer from 5 to 100.
--   
--   <a>$sel:hostInstanceType:DescribeBrokerInstanceOptions'</a>,
--   <a>describeBrokerInstanceOptions_hostInstanceType</a> - Filter
--   response by host instance type.
--   
--   <a>$sel:storageType:DescribeBrokerInstanceOptions'</a>,
--   <a>describeBrokerInstanceOptions_storageType</a> - Filter response by
--   storage type.
newDescribeBrokerInstanceOptions :: DescribeBrokerInstanceOptions

-- | The token that specifies the next page of results Amazon MQ should
--   return. To request the first page, leave nextToken empty.
describeBrokerInstanceOptions_nextToken :: Lens' DescribeBrokerInstanceOptions (Maybe Text)

-- | Filter response by engine type.
describeBrokerInstanceOptions_engineType :: Lens' DescribeBrokerInstanceOptions (Maybe Text)

-- | The maximum number of brokers that Amazon MQ can return per page (20
--   by default). This value must be an integer from 5 to 100.
describeBrokerInstanceOptions_maxResults :: Lens' DescribeBrokerInstanceOptions (Maybe Natural)

-- | Filter response by host instance type.
describeBrokerInstanceOptions_hostInstanceType :: Lens' DescribeBrokerInstanceOptions (Maybe Text)

-- | Filter response by storage type.
describeBrokerInstanceOptions_storageType :: Lens' DescribeBrokerInstanceOptions (Maybe Text)

-- | <i>See:</i> <a>newDescribeBrokerInstanceOptionsResponse</a> smart
--   constructor.
data DescribeBrokerInstanceOptionsResponse
DescribeBrokerInstanceOptionsResponse' :: Maybe Text -> Maybe [BrokerInstanceOption] -> Maybe Natural -> Int -> DescribeBrokerInstanceOptionsResponse

-- | The token that specifies the next page of results Amazon MQ should
--   return. To request the first page, leave nextToken empty.
[$sel:nextToken:DescribeBrokerInstanceOptionsResponse'] :: DescribeBrokerInstanceOptionsResponse -> Maybe Text

-- | List of available broker instance options.
[$sel:brokerInstanceOptions:DescribeBrokerInstanceOptionsResponse'] :: DescribeBrokerInstanceOptionsResponse -> Maybe [BrokerInstanceOption]

-- | Required. The maximum number of instance options that can be returned
--   per page (20 by default). This value must be an integer from 5 to 100.
[$sel:maxResults:DescribeBrokerInstanceOptionsResponse'] :: DescribeBrokerInstanceOptionsResponse -> Maybe Natural

-- | The response's http status code.
[$sel:httpStatus:DescribeBrokerInstanceOptionsResponse'] :: DescribeBrokerInstanceOptionsResponse -> Int

-- | Create a value of <a>DescribeBrokerInstanceOptionsResponse</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:DescribeBrokerInstanceOptions'</a>,
--   <a>describeBrokerInstanceOptionsResponse_nextToken</a> - The token
--   that specifies the next page of results Amazon MQ should return. To
--   request the first page, leave nextToken empty.
--   
--   
--   <a>$sel:brokerInstanceOptions:DescribeBrokerInstanceOptionsResponse'</a>,
--   <a>describeBrokerInstanceOptionsResponse_brokerInstanceOptions</a> -
--   List of available broker instance options.
--   
--   <a>$sel:maxResults:DescribeBrokerInstanceOptions'</a>,
--   <a>describeBrokerInstanceOptionsResponse_maxResults</a> - Required.
--   The maximum number of instance options that can be returned per page
--   (20 by default). This value must be an integer from 5 to 100.
--   
--   <a>$sel:httpStatus:DescribeBrokerInstanceOptionsResponse'</a>,
--   <a>describeBrokerInstanceOptionsResponse_httpStatus</a> - The
--   response's http status code.
newDescribeBrokerInstanceOptionsResponse :: Int -> DescribeBrokerInstanceOptionsResponse

-- | The token that specifies the next page of results Amazon MQ should
--   return. To request the first page, leave nextToken empty.
describeBrokerInstanceOptionsResponse_nextToken :: Lens' DescribeBrokerInstanceOptionsResponse (Maybe Text)

-- | List of available broker instance options.
describeBrokerInstanceOptionsResponse_brokerInstanceOptions :: Lens' DescribeBrokerInstanceOptionsResponse (Maybe [BrokerInstanceOption])

-- | Required. The maximum number of instance options that can be returned
--   per page (20 by default). This value must be an integer from 5 to 100.
describeBrokerInstanceOptionsResponse_maxResults :: Lens' DescribeBrokerInstanceOptionsResponse (Maybe Natural)

-- | The response's http status code.
describeBrokerInstanceOptionsResponse_httpStatus :: Lens' DescribeBrokerInstanceOptionsResponse Int
instance GHC.Generics.Generic Amazonka.MQ.DescribeBrokerInstanceOptions.DescribeBrokerInstanceOptions
instance GHC.Show.Show Amazonka.MQ.DescribeBrokerInstanceOptions.DescribeBrokerInstanceOptions
instance GHC.Read.Read Amazonka.MQ.DescribeBrokerInstanceOptions.DescribeBrokerInstanceOptions
instance GHC.Classes.Eq Amazonka.MQ.DescribeBrokerInstanceOptions.DescribeBrokerInstanceOptions
instance GHC.Generics.Generic Amazonka.MQ.DescribeBrokerInstanceOptions.DescribeBrokerInstanceOptionsResponse
instance GHC.Show.Show Amazonka.MQ.DescribeBrokerInstanceOptions.DescribeBrokerInstanceOptionsResponse
instance GHC.Read.Read Amazonka.MQ.DescribeBrokerInstanceOptions.DescribeBrokerInstanceOptionsResponse
instance GHC.Classes.Eq Amazonka.MQ.DescribeBrokerInstanceOptions.DescribeBrokerInstanceOptionsResponse
instance Amazonka.Types.AWSRequest Amazonka.MQ.DescribeBrokerInstanceOptions.DescribeBrokerInstanceOptions
instance Control.DeepSeq.NFData Amazonka.MQ.DescribeBrokerInstanceOptions.DescribeBrokerInstanceOptionsResponse
instance Data.Hashable.Class.Hashable Amazonka.MQ.DescribeBrokerInstanceOptions.DescribeBrokerInstanceOptions
instance Control.DeepSeq.NFData Amazonka.MQ.DescribeBrokerInstanceOptions.DescribeBrokerInstanceOptions
instance Amazonka.Data.Headers.ToHeaders Amazonka.MQ.DescribeBrokerInstanceOptions.DescribeBrokerInstanceOptions
instance Amazonka.Data.Path.ToPath Amazonka.MQ.DescribeBrokerInstanceOptions.DescribeBrokerInstanceOptions
instance Amazonka.Data.Query.ToQuery Amazonka.MQ.DescribeBrokerInstanceOptions.DescribeBrokerInstanceOptions


-- | Describe available engine types and versions.
module Amazonka.MQ.DescribeBrokerEngineTypes

-- | <i>See:</i> <a>newDescribeBrokerEngineTypes</a> smart constructor.
data DescribeBrokerEngineTypes
DescribeBrokerEngineTypes' :: Maybe Text -> Maybe Text -> Maybe Natural -> DescribeBrokerEngineTypes

-- | The token that specifies the next page of results Amazon MQ should
--   return. To request the first page, leave nextToken empty.
[$sel:nextToken:DescribeBrokerEngineTypes'] :: DescribeBrokerEngineTypes -> Maybe Text

-- | Filter response by engine type.
[$sel:engineType:DescribeBrokerEngineTypes'] :: DescribeBrokerEngineTypes -> Maybe Text

-- | The maximum number of brokers that Amazon MQ can return per page (20
--   by default). This value must be an integer from 5 to 100.
[$sel:maxResults:DescribeBrokerEngineTypes'] :: DescribeBrokerEngineTypes -> Maybe Natural

-- | Create a value of <a>DescribeBrokerEngineTypes</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:DescribeBrokerEngineTypes'</a>,
--   <a>describeBrokerEngineTypes_nextToken</a> - The token that specifies
--   the next page of results Amazon MQ should return. To request the first
--   page, leave nextToken empty.
--   
--   <a>$sel:engineType:DescribeBrokerEngineTypes'</a>,
--   <a>describeBrokerEngineTypes_engineType</a> - Filter response by
--   engine type.
--   
--   <a>$sel:maxResults:DescribeBrokerEngineTypes'</a>,
--   <a>describeBrokerEngineTypes_maxResults</a> - The maximum number of
--   brokers that Amazon MQ can return per page (20 by default). This value
--   must be an integer from 5 to 100.
newDescribeBrokerEngineTypes :: DescribeBrokerEngineTypes

-- | The token that specifies the next page of results Amazon MQ should
--   return. To request the first page, leave nextToken empty.
describeBrokerEngineTypes_nextToken :: Lens' DescribeBrokerEngineTypes (Maybe Text)

-- | Filter response by engine type.
describeBrokerEngineTypes_engineType :: Lens' DescribeBrokerEngineTypes (Maybe Text)

-- | The maximum number of brokers that Amazon MQ can return per page (20
--   by default). This value must be an integer from 5 to 100.
describeBrokerEngineTypes_maxResults :: Lens' DescribeBrokerEngineTypes (Maybe Natural)

-- | <i>See:</i> <a>newDescribeBrokerEngineTypesResponse</a> smart
--   constructor.
data DescribeBrokerEngineTypesResponse
DescribeBrokerEngineTypesResponse' :: Maybe [BrokerEngineType] -> Maybe Text -> Maybe Natural -> Int -> DescribeBrokerEngineTypesResponse

-- | List of available engine types and versions.
[$sel:brokerEngineTypes:DescribeBrokerEngineTypesResponse'] :: DescribeBrokerEngineTypesResponse -> Maybe [BrokerEngineType]

-- | The token that specifies the next page of results Amazon MQ should
--   return. To request the first page, leave nextToken empty.
[$sel:nextToken:DescribeBrokerEngineTypesResponse'] :: DescribeBrokerEngineTypesResponse -> Maybe Text

-- | Required. The maximum number of engine types that can be returned per
--   page (20 by default). This value must be an integer from 5 to 100.
[$sel:maxResults:DescribeBrokerEngineTypesResponse'] :: DescribeBrokerEngineTypesResponse -> Maybe Natural

-- | The response's http status code.
[$sel:httpStatus:DescribeBrokerEngineTypesResponse'] :: DescribeBrokerEngineTypesResponse -> Int

-- | Create a value of <a>DescribeBrokerEngineTypesResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:brokerEngineTypes:DescribeBrokerEngineTypesResponse'</a>,
--   <a>describeBrokerEngineTypesResponse_brokerEngineTypes</a> - List of
--   available engine types and versions.
--   
--   <a>$sel:nextToken:DescribeBrokerEngineTypes'</a>,
--   <a>describeBrokerEngineTypesResponse_nextToken</a> - The token that
--   specifies the next page of results Amazon MQ should return. To request
--   the first page, leave nextToken empty.
--   
--   <a>$sel:maxResults:DescribeBrokerEngineTypes'</a>,
--   <a>describeBrokerEngineTypesResponse_maxResults</a> - Required. The
--   maximum number of engine types that can be returned per page (20 by
--   default). This value must be an integer from 5 to 100.
--   
--   <a>$sel:httpStatus:DescribeBrokerEngineTypesResponse'</a>,
--   <a>describeBrokerEngineTypesResponse_httpStatus</a> - The response's
--   http status code.
newDescribeBrokerEngineTypesResponse :: Int -> DescribeBrokerEngineTypesResponse

-- | List of available engine types and versions.
describeBrokerEngineTypesResponse_brokerEngineTypes :: Lens' DescribeBrokerEngineTypesResponse (Maybe [BrokerEngineType])

-- | The token that specifies the next page of results Amazon MQ should
--   return. To request the first page, leave nextToken empty.
describeBrokerEngineTypesResponse_nextToken :: Lens' DescribeBrokerEngineTypesResponse (Maybe Text)

-- | Required. The maximum number of engine types that can be returned per
--   page (20 by default). This value must be an integer from 5 to 100.
describeBrokerEngineTypesResponse_maxResults :: Lens' DescribeBrokerEngineTypesResponse (Maybe Natural)

-- | The response's http status code.
describeBrokerEngineTypesResponse_httpStatus :: Lens' DescribeBrokerEngineTypesResponse Int
instance GHC.Generics.Generic Amazonka.MQ.DescribeBrokerEngineTypes.DescribeBrokerEngineTypes
instance GHC.Show.Show Amazonka.MQ.DescribeBrokerEngineTypes.DescribeBrokerEngineTypes
instance GHC.Read.Read Amazonka.MQ.DescribeBrokerEngineTypes.DescribeBrokerEngineTypes
instance GHC.Classes.Eq Amazonka.MQ.DescribeBrokerEngineTypes.DescribeBrokerEngineTypes
instance GHC.Generics.Generic Amazonka.MQ.DescribeBrokerEngineTypes.DescribeBrokerEngineTypesResponse
instance GHC.Show.Show Amazonka.MQ.DescribeBrokerEngineTypes.DescribeBrokerEngineTypesResponse
instance GHC.Read.Read Amazonka.MQ.DescribeBrokerEngineTypes.DescribeBrokerEngineTypesResponse
instance GHC.Classes.Eq Amazonka.MQ.DescribeBrokerEngineTypes.DescribeBrokerEngineTypesResponse
instance Amazonka.Types.AWSRequest Amazonka.MQ.DescribeBrokerEngineTypes.DescribeBrokerEngineTypes
instance Control.DeepSeq.NFData Amazonka.MQ.DescribeBrokerEngineTypes.DescribeBrokerEngineTypesResponse
instance Data.Hashable.Class.Hashable Amazonka.MQ.DescribeBrokerEngineTypes.DescribeBrokerEngineTypes
instance Control.DeepSeq.NFData Amazonka.MQ.DescribeBrokerEngineTypes.DescribeBrokerEngineTypes
instance Amazonka.Data.Headers.ToHeaders Amazonka.MQ.DescribeBrokerEngineTypes.DescribeBrokerEngineTypes
instance Amazonka.Data.Path.ToPath Amazonka.MQ.DescribeBrokerEngineTypes.DescribeBrokerEngineTypes
instance Amazonka.Data.Query.ToQuery Amazonka.MQ.DescribeBrokerEngineTypes.DescribeBrokerEngineTypes


-- | Returns information about the specified broker.
module Amazonka.MQ.DescribeBroker

-- | <i>See:</i> <a>newDescribeBroker</a> smart constructor.
data DescribeBroker
DescribeBroker' :: Text -> DescribeBroker

-- | The unique ID that Amazon MQ generates for the broker.
[$sel:brokerId:DescribeBroker'] :: DescribeBroker -> Text

-- | Create a value of <a>DescribeBroker</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:brokerId:DescribeBroker'</a>, <a>describeBroker_brokerId</a> -
--   The unique ID that Amazon MQ generates for the broker.
newDescribeBroker :: Text -> DescribeBroker

-- | The unique ID that Amazon MQ generates for the broker.
describeBroker_brokerId :: Lens' DescribeBroker Text

-- | <i>See:</i> <a>newDescribeBrokerResponse</a> smart constructor.
data DescribeBrokerResponse
DescribeBrokerResponse' :: Maybe Text -> Maybe Text -> Maybe AuthenticationStrategy -> Maybe BrokerState -> Maybe Bool -> Maybe Bool -> Maybe [Text] -> Maybe [UserSummary] -> Maybe [Text] -> Maybe [Text] -> Maybe POSIX -> Maybe Configurations -> Maybe AuthenticationStrategy -> Maybe Text -> Maybe LdapServerMetadataOutput -> Maybe WeeklyStartTime -> Maybe LogsSummary -> Maybe EncryptionOptions -> Maybe DeploymentMode -> Maybe Text -> Maybe Text -> Maybe LdapServerMetadataOutput -> Maybe EngineType -> Maybe Text -> Maybe (HashMap Text Text) -> Maybe [BrokerInstance] -> Maybe Text -> Maybe BrokerStorageType -> Int -> DescribeBrokerResponse

-- | The broker's name. This value must be unique in your AWS account, 1-50
--   characters long, must contain only letters, numbers, dashes, and
--   underscores, and must not contain white spaces, brackets, wildcard
--   characters, or special characters.
[$sel:brokerName:DescribeBrokerResponse'] :: DescribeBrokerResponse -> Maybe Text

-- | The broker engine's version. For a list of supported engine versions,
--   see <a>Supported engines</a>.
[$sel:engineVersion:DescribeBrokerResponse'] :: DescribeBrokerResponse -> Maybe Text

-- | The authentication strategy that will be applied when the broker is
--   rebooted. The default is SIMPLE.
[$sel:pendingAuthenticationStrategy:DescribeBrokerResponse'] :: DescribeBrokerResponse -> Maybe AuthenticationStrategy

-- | The broker's status.
[$sel:brokerState:DescribeBrokerResponse'] :: DescribeBrokerResponse -> Maybe BrokerState

-- | Enables connections from applications outside of the VPC that hosts
--   the broker's subnets.
[$sel:publiclyAccessible:DescribeBrokerResponse'] :: DescribeBrokerResponse -> Maybe Bool

-- | Enables automatic upgrades to new minor versions for brokers, as new
--   versions are released and supported by Amazon MQ. Automatic upgrades
--   occur during the scheduled maintenance window of the broker or after a
--   manual broker reboot.
[$sel:autoMinorVersionUpgrade:DescribeBrokerResponse'] :: DescribeBrokerResponse -> Maybe Bool

-- | The list of rules (1 minimum, 125 maximum) that authorize connections
--   to brokers.
[$sel:securityGroups:DescribeBrokerResponse'] :: DescribeBrokerResponse -> Maybe [Text]

-- | The list of all broker usernames for the specified broker.
[$sel:users:DescribeBrokerResponse'] :: DescribeBrokerResponse -> Maybe [UserSummary]

-- | The list of pending security groups to authorize connections to
--   brokers.
[$sel:pendingSecurityGroups:DescribeBrokerResponse'] :: DescribeBrokerResponse -> Maybe [Text]

-- | The list of groups that define which subnets and IP ranges the broker
--   can use from different Availability Zones.
[$sel:subnetIds:DescribeBrokerResponse'] :: DescribeBrokerResponse -> Maybe [Text]

-- | The time when the broker was created.
[$sel:created:DescribeBrokerResponse'] :: DescribeBrokerResponse -> Maybe POSIX

-- | The list of all revisions for the specified configuration.
[$sel:configurations:DescribeBrokerResponse'] :: DescribeBrokerResponse -> Maybe Configurations

-- | The authentication strategy used to secure the broker. The default is
--   SIMPLE.
[$sel:authenticationStrategy:DescribeBrokerResponse'] :: DescribeBrokerResponse -> Maybe AuthenticationStrategy

-- | The broker's host instance type to upgrade to. For a list of supported
--   instance types, see <a>Broker instance types</a>.
[$sel:pendingHostInstanceType:DescribeBrokerResponse'] :: DescribeBrokerResponse -> Maybe Text

-- | The metadata of the LDAP server used to authenticate and authorize
--   connections to the broker.
[$sel:ldapServerMetadata:DescribeBrokerResponse'] :: DescribeBrokerResponse -> Maybe LdapServerMetadataOutput

-- | The parameters that determine the WeeklyStartTime.
[$sel:maintenanceWindowStartTime:DescribeBrokerResponse'] :: DescribeBrokerResponse -> Maybe WeeklyStartTime

-- | The list of information about logs currently enabled and pending to be
--   deployed for the specified broker.
[$sel:logs:DescribeBrokerResponse'] :: DescribeBrokerResponse -> Maybe LogsSummary

-- | Encryption options for the broker. Does not apply to RabbitMQ brokers.
[$sel:encryptionOptions:DescribeBrokerResponse'] :: DescribeBrokerResponse -> Maybe EncryptionOptions

-- | The broker's deployment mode.
[$sel:deploymentMode:DescribeBrokerResponse'] :: DescribeBrokerResponse -> Maybe DeploymentMode

-- | The broker engine version to upgrade to. For a list of supported
--   engine versions, see <a>Supported engines</a>.
[$sel:pendingEngineVersion:DescribeBrokerResponse'] :: DescribeBrokerResponse -> Maybe Text

-- | The unique ID that Amazon MQ generates for the broker.
[$sel:brokerId:DescribeBrokerResponse'] :: DescribeBrokerResponse -> Maybe Text

-- | The metadata of the LDAP server that will be used to authenticate and
--   authorize connections to the broker after it is rebooted.
[$sel:pendingLdapServerMetadata:DescribeBrokerResponse'] :: DescribeBrokerResponse -> Maybe LdapServerMetadataOutput

-- | The type of broker engine. Currently, Amazon MQ supports ACTIVEMQ and
--   RABBITMQ.
[$sel:engineType:DescribeBrokerResponse'] :: DescribeBrokerResponse -> Maybe EngineType

-- | The broker's Amazon Resource Name (ARN).
[$sel:brokerArn:DescribeBrokerResponse'] :: DescribeBrokerResponse -> Maybe Text

-- | The list of all tags associated with this broker.
[$sel:tags:DescribeBrokerResponse'] :: DescribeBrokerResponse -> Maybe (HashMap Text Text)

-- | A list of information about allocated brokers.
[$sel:brokerInstances:DescribeBrokerResponse'] :: DescribeBrokerResponse -> Maybe [BrokerInstance]

-- | The broker's instance type.
[$sel:hostInstanceType:DescribeBrokerResponse'] :: DescribeBrokerResponse -> Maybe Text

-- | The broker's storage type.
[$sel:storageType:DescribeBrokerResponse'] :: DescribeBrokerResponse -> Maybe BrokerStorageType

-- | The response's http status code.
[$sel:httpStatus:DescribeBrokerResponse'] :: DescribeBrokerResponse -> Int

-- | Create a value of <a>DescribeBrokerResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:brokerName:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_brokerName</a> - The broker's name. This
--   value must be unique in your AWS account, 1-50 characters long, must
--   contain only letters, numbers, dashes, and underscores, and must not
--   contain white spaces, brackets, wildcard characters, or special
--   characters.
--   
--   <a>$sel:engineVersion:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_engineVersion</a> - The broker engine's
--   version. For a list of supported engine versions, see <a>Supported
--   engines</a>.
--   
--   <a>$sel:pendingAuthenticationStrategy:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_pendingAuthenticationStrategy</a> - The
--   authentication strategy that will be applied when the broker is
--   rebooted. The default is SIMPLE.
--   
--   <a>$sel:brokerState:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_brokerState</a> - The broker's status.
--   
--   <a>$sel:publiclyAccessible:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_publiclyAccessible</a> - Enables connections
--   from applications outside of the VPC that hosts the broker's subnets.
--   
--   <a>$sel:autoMinorVersionUpgrade:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_autoMinorVersionUpgrade</a> - Enables
--   automatic upgrades to new minor versions for brokers, as new versions
--   are released and supported by Amazon MQ. Automatic upgrades occur
--   during the scheduled maintenance window of the broker or after a
--   manual broker reboot.
--   
--   <a>$sel:securityGroups:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_securityGroups</a> - The list of rules (1
--   minimum, 125 maximum) that authorize connections to brokers.
--   
--   <a>$sel:users:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_users</a> - The list of all broker usernames
--   for the specified broker.
--   
--   <a>$sel:pendingSecurityGroups:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_pendingSecurityGroups</a> - The list of
--   pending security groups to authorize connections to brokers.
--   
--   <a>$sel:subnetIds:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_subnetIds</a> - The list of groups that
--   define which subnets and IP ranges the broker can use from different
--   Availability Zones.
--   
--   <a>$sel:created:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_created</a> - The time when the broker was
--   created.
--   
--   <a>$sel:configurations:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_configurations</a> - The list of all
--   revisions for the specified configuration.
--   
--   <a>$sel:authenticationStrategy:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_authenticationStrategy</a> - The
--   authentication strategy used to secure the broker. The default is
--   SIMPLE.
--   
--   <a>$sel:pendingHostInstanceType:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_pendingHostInstanceType</a> - The broker's
--   host instance type to upgrade to. For a list of supported instance
--   types, see <a>Broker instance types</a>.
--   
--   <a>$sel:ldapServerMetadata:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_ldapServerMetadata</a> - The metadata of the
--   LDAP server used to authenticate and authorize connections to the
--   broker.
--   
--   <a>$sel:maintenanceWindowStartTime:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_maintenanceWindowStartTime</a> - The
--   parameters that determine the WeeklyStartTime.
--   
--   <a>$sel:logs:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_logs</a> - The list of information about
--   logs currently enabled and pending to be deployed for the specified
--   broker.
--   
--   <a>$sel:encryptionOptions:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_encryptionOptions</a> - Encryption options
--   for the broker. Does not apply to RabbitMQ brokers.
--   
--   <a>$sel:deploymentMode:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_deploymentMode</a> - The broker's deployment
--   mode.
--   
--   <a>$sel:pendingEngineVersion:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_pendingEngineVersion</a> - The broker engine
--   version to upgrade to. For a list of supported engine versions, see
--   <a>Supported engines</a>.
--   
--   <a>$sel:brokerId:DescribeBroker'</a>,
--   <a>describeBrokerResponse_brokerId</a> - The unique ID that Amazon MQ
--   generates for the broker.
--   
--   <a>$sel:pendingLdapServerMetadata:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_pendingLdapServerMetadata</a> - The metadata
--   of the LDAP server that will be used to authenticate and authorize
--   connections to the broker after it is rebooted.
--   
--   <a>$sel:engineType:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_engineType</a> - The type of broker engine.
--   Currently, Amazon MQ supports ACTIVEMQ and RABBITMQ.
--   
--   <a>$sel:brokerArn:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_brokerArn</a> - The broker's Amazon Resource
--   Name (ARN).
--   
--   <a>$sel:tags:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_tags</a> - The list of all tags associated
--   with this broker.
--   
--   <a>$sel:brokerInstances:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_brokerInstances</a> - A list of information
--   about allocated brokers.
--   
--   <a>$sel:hostInstanceType:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_hostInstanceType</a> - The broker's instance
--   type.
--   
--   <a>$sel:storageType:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_storageType</a> - The broker's storage type.
--   
--   <a>$sel:httpStatus:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_httpStatus</a> - The response's http status
--   code.
newDescribeBrokerResponse :: Int -> DescribeBrokerResponse

-- | The broker's name. This value must be unique in your AWS account, 1-50
--   characters long, must contain only letters, numbers, dashes, and
--   underscores, and must not contain white spaces, brackets, wildcard
--   characters, or special characters.
describeBrokerResponse_brokerName :: Lens' DescribeBrokerResponse (Maybe Text)

-- | The broker engine's version. For a list of supported engine versions,
--   see <a>Supported engines</a>.
describeBrokerResponse_engineVersion :: Lens' DescribeBrokerResponse (Maybe Text)

-- | The authentication strategy that will be applied when the broker is
--   rebooted. The default is SIMPLE.
describeBrokerResponse_pendingAuthenticationStrategy :: Lens' DescribeBrokerResponse (Maybe AuthenticationStrategy)

-- | The broker's status.
describeBrokerResponse_brokerState :: Lens' DescribeBrokerResponse (Maybe BrokerState)

-- | Enables connections from applications outside of the VPC that hosts
--   the broker's subnets.
describeBrokerResponse_publiclyAccessible :: Lens' DescribeBrokerResponse (Maybe Bool)

-- | Enables automatic upgrades to new minor versions for brokers, as new
--   versions are released and supported by Amazon MQ. Automatic upgrades
--   occur during the scheduled maintenance window of the broker or after a
--   manual broker reboot.
describeBrokerResponse_autoMinorVersionUpgrade :: Lens' DescribeBrokerResponse (Maybe Bool)

-- | The list of rules (1 minimum, 125 maximum) that authorize connections
--   to brokers.
describeBrokerResponse_securityGroups :: Lens' DescribeBrokerResponse (Maybe [Text])

-- | The list of all broker usernames for the specified broker.
describeBrokerResponse_users :: Lens' DescribeBrokerResponse (Maybe [UserSummary])

-- | The list of pending security groups to authorize connections to
--   brokers.
describeBrokerResponse_pendingSecurityGroups :: Lens' DescribeBrokerResponse (Maybe [Text])

-- | The list of groups that define which subnets and IP ranges the broker
--   can use from different Availability Zones.
describeBrokerResponse_subnetIds :: Lens' DescribeBrokerResponse (Maybe [Text])

-- | The time when the broker was created.
describeBrokerResponse_created :: Lens' DescribeBrokerResponse (Maybe UTCTime)

-- | The list of all revisions for the specified configuration.
describeBrokerResponse_configurations :: Lens' DescribeBrokerResponse (Maybe Configurations)

-- | The authentication strategy used to secure the broker. The default is
--   SIMPLE.
describeBrokerResponse_authenticationStrategy :: Lens' DescribeBrokerResponse (Maybe AuthenticationStrategy)

-- | The broker's host instance type to upgrade to. For a list of supported
--   instance types, see <a>Broker instance types</a>.
describeBrokerResponse_pendingHostInstanceType :: Lens' DescribeBrokerResponse (Maybe Text)

-- | The metadata of the LDAP server used to authenticate and authorize
--   connections to the broker.
describeBrokerResponse_ldapServerMetadata :: Lens' DescribeBrokerResponse (Maybe LdapServerMetadataOutput)

-- | The parameters that determine the WeeklyStartTime.
describeBrokerResponse_maintenanceWindowStartTime :: Lens' DescribeBrokerResponse (Maybe WeeklyStartTime)

-- | The list of information about logs currently enabled and pending to be
--   deployed for the specified broker.
describeBrokerResponse_logs :: Lens' DescribeBrokerResponse (Maybe LogsSummary)

-- | Encryption options for the broker. Does not apply to RabbitMQ brokers.
describeBrokerResponse_encryptionOptions :: Lens' DescribeBrokerResponse (Maybe EncryptionOptions)

-- | The broker's deployment mode.
describeBrokerResponse_deploymentMode :: Lens' DescribeBrokerResponse (Maybe DeploymentMode)

-- | The broker engine version to upgrade to. For a list of supported
--   engine versions, see <a>Supported engines</a>.
describeBrokerResponse_pendingEngineVersion :: Lens' DescribeBrokerResponse (Maybe Text)

-- | The unique ID that Amazon MQ generates for the broker.
describeBrokerResponse_brokerId :: Lens' DescribeBrokerResponse (Maybe Text)

-- | The metadata of the LDAP server that will be used to authenticate and
--   authorize connections to the broker after it is rebooted.
describeBrokerResponse_pendingLdapServerMetadata :: Lens' DescribeBrokerResponse (Maybe LdapServerMetadataOutput)

-- | The type of broker engine. Currently, Amazon MQ supports ACTIVEMQ and
--   RABBITMQ.
describeBrokerResponse_engineType :: Lens' DescribeBrokerResponse (Maybe EngineType)

-- | The broker's Amazon Resource Name (ARN).
describeBrokerResponse_brokerArn :: Lens' DescribeBrokerResponse (Maybe Text)

-- | The list of all tags associated with this broker.
describeBrokerResponse_tags :: Lens' DescribeBrokerResponse (Maybe (HashMap Text Text))

-- | A list of information about allocated brokers.
describeBrokerResponse_brokerInstances :: Lens' DescribeBrokerResponse (Maybe [BrokerInstance])

-- | The broker's instance type.
describeBrokerResponse_hostInstanceType :: Lens' DescribeBrokerResponse (Maybe Text)

-- | The broker's storage type.
describeBrokerResponse_storageType :: Lens' DescribeBrokerResponse (Maybe BrokerStorageType)

-- | The response's http status code.
describeBrokerResponse_httpStatus :: Lens' DescribeBrokerResponse Int
instance GHC.Generics.Generic Amazonka.MQ.DescribeBroker.DescribeBroker
instance GHC.Show.Show Amazonka.MQ.DescribeBroker.DescribeBroker
instance GHC.Read.Read Amazonka.MQ.DescribeBroker.DescribeBroker
instance GHC.Classes.Eq Amazonka.MQ.DescribeBroker.DescribeBroker
instance GHC.Generics.Generic Amazonka.MQ.DescribeBroker.DescribeBrokerResponse
instance GHC.Show.Show Amazonka.MQ.DescribeBroker.DescribeBrokerResponse
instance GHC.Read.Read Amazonka.MQ.DescribeBroker.DescribeBrokerResponse
instance GHC.Classes.Eq Amazonka.MQ.DescribeBroker.DescribeBrokerResponse
instance Amazonka.Types.AWSRequest Amazonka.MQ.DescribeBroker.DescribeBroker
instance Control.DeepSeq.NFData Amazonka.MQ.DescribeBroker.DescribeBrokerResponse
instance Data.Hashable.Class.Hashable Amazonka.MQ.DescribeBroker.DescribeBroker
instance Control.DeepSeq.NFData Amazonka.MQ.DescribeBroker.DescribeBroker
instance Amazonka.Data.Headers.ToHeaders Amazonka.MQ.DescribeBroker.DescribeBroker
instance Amazonka.Data.Path.ToPath Amazonka.MQ.DescribeBroker.DescribeBroker
instance Amazonka.Data.Query.ToQuery Amazonka.MQ.DescribeBroker.DescribeBroker


-- | Deletes an ActiveMQ user.
module Amazonka.MQ.DeleteUser

-- | <i>See:</i> <a>newDeleteUser</a> smart constructor.
data DeleteUser
DeleteUser' :: Text -> Text -> DeleteUser

-- | The username of the ActiveMQ user. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 2-100 characters long.
[$sel:username:DeleteUser'] :: DeleteUser -> Text

-- | The unique ID that Amazon MQ generates for the broker.
[$sel:brokerId:DeleteUser'] :: DeleteUser -> Text

-- | Create a value of <a>DeleteUser</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:username:DeleteUser'</a>, <a>deleteUser_username</a> - The
--   username of the ActiveMQ user. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 2-100 characters long.
--   
--   <a>$sel:brokerId:DeleteUser'</a>, <a>deleteUser_brokerId</a> - The
--   unique ID that Amazon MQ generates for the broker.
newDeleteUser :: Text -> Text -> DeleteUser

-- | The username of the ActiveMQ user. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 2-100 characters long.
deleteUser_username :: Lens' DeleteUser Text

-- | The unique ID that Amazon MQ generates for the broker.
deleteUser_brokerId :: Lens' DeleteUser Text

-- | <i>See:</i> <a>newDeleteUserResponse</a> smart constructor.
data DeleteUserResponse
DeleteUserResponse' :: Int -> DeleteUserResponse

-- | The response's http status code.
[$sel:httpStatus:DeleteUserResponse'] :: DeleteUserResponse -> Int

-- | Create a value of <a>DeleteUserResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteUserResponse'</a>,
--   <a>deleteUserResponse_httpStatus</a> - The response's http status
--   code.
newDeleteUserResponse :: Int -> DeleteUserResponse

-- | The response's http status code.
deleteUserResponse_httpStatus :: Lens' DeleteUserResponse Int
instance GHC.Generics.Generic Amazonka.MQ.DeleteUser.DeleteUser
instance GHC.Show.Show Amazonka.MQ.DeleteUser.DeleteUser
instance GHC.Read.Read Amazonka.MQ.DeleteUser.DeleteUser
instance GHC.Classes.Eq Amazonka.MQ.DeleteUser.DeleteUser
instance GHC.Generics.Generic Amazonka.MQ.DeleteUser.DeleteUserResponse
instance GHC.Show.Show Amazonka.MQ.DeleteUser.DeleteUserResponse
instance GHC.Read.Read Amazonka.MQ.DeleteUser.DeleteUserResponse
instance GHC.Classes.Eq Amazonka.MQ.DeleteUser.DeleteUserResponse
instance Amazonka.Types.AWSRequest Amazonka.MQ.DeleteUser.DeleteUser
instance Control.DeepSeq.NFData Amazonka.MQ.DeleteUser.DeleteUserResponse
instance Data.Hashable.Class.Hashable Amazonka.MQ.DeleteUser.DeleteUser
instance Control.DeepSeq.NFData Amazonka.MQ.DeleteUser.DeleteUser
instance Amazonka.Data.Headers.ToHeaders Amazonka.MQ.DeleteUser.DeleteUser
instance Amazonka.Data.Path.ToPath Amazonka.MQ.DeleteUser.DeleteUser
instance Amazonka.Data.Query.ToQuery Amazonka.MQ.DeleteUser.DeleteUser


-- | Removes a tag from a resource.
module Amazonka.MQ.DeleteTags

-- | <i>See:</i> <a>newDeleteTags</a> smart constructor.
data DeleteTags
DeleteTags' :: [Text] -> Text -> DeleteTags

-- | An array of tag keys to delete
[$sel:tagKeys:DeleteTags'] :: DeleteTags -> [Text]

-- | The Amazon Resource Name (ARN) of the resource tag.
[$sel:resourceArn:DeleteTags'] :: DeleteTags -> Text

-- | Create a value of <a>DeleteTags</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tagKeys:DeleteTags'</a>, <a>deleteTags_tagKeys</a> - An array
--   of tag keys to delete
--   
--   <a>$sel:resourceArn:DeleteTags'</a>, <a>deleteTags_resourceArn</a> -
--   The Amazon Resource Name (ARN) of the resource tag.
newDeleteTags :: Text -> DeleteTags

-- | An array of tag keys to delete
deleteTags_tagKeys :: Lens' DeleteTags [Text]

-- | The Amazon Resource Name (ARN) of the resource tag.
deleteTags_resourceArn :: Lens' DeleteTags Text

-- | <i>See:</i> <a>newDeleteTagsResponse</a> smart constructor.
data DeleteTagsResponse
DeleteTagsResponse' :: DeleteTagsResponse

-- | Create a value of <a>DeleteTagsResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newDeleteTagsResponse :: DeleteTagsResponse
instance GHC.Generics.Generic Amazonka.MQ.DeleteTags.DeleteTags
instance GHC.Show.Show Amazonka.MQ.DeleteTags.DeleteTags
instance GHC.Read.Read Amazonka.MQ.DeleteTags.DeleteTags
instance GHC.Classes.Eq Amazonka.MQ.DeleteTags.DeleteTags
instance GHC.Generics.Generic Amazonka.MQ.DeleteTags.DeleteTagsResponse
instance GHC.Show.Show Amazonka.MQ.DeleteTags.DeleteTagsResponse
instance GHC.Read.Read Amazonka.MQ.DeleteTags.DeleteTagsResponse
instance GHC.Classes.Eq Amazonka.MQ.DeleteTags.DeleteTagsResponse
instance Amazonka.Types.AWSRequest Amazonka.MQ.DeleteTags.DeleteTags
instance Control.DeepSeq.NFData Amazonka.MQ.DeleteTags.DeleteTagsResponse
instance Data.Hashable.Class.Hashable Amazonka.MQ.DeleteTags.DeleteTags
instance Control.DeepSeq.NFData Amazonka.MQ.DeleteTags.DeleteTags
instance Amazonka.Data.Headers.ToHeaders Amazonka.MQ.DeleteTags.DeleteTags
instance Amazonka.Data.Path.ToPath Amazonka.MQ.DeleteTags.DeleteTags
instance Amazonka.Data.Query.ToQuery Amazonka.MQ.DeleteTags.DeleteTags


-- | Deletes a broker. Note: This API is asynchronous.
module Amazonka.MQ.DeleteBroker

-- | <i>See:</i> <a>newDeleteBroker</a> smart constructor.
data DeleteBroker
DeleteBroker' :: Text -> DeleteBroker

-- | The unique ID that Amazon MQ generates for the broker.
[$sel:brokerId:DeleteBroker'] :: DeleteBroker -> Text

-- | Create a value of <a>DeleteBroker</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:brokerId:DeleteBroker'</a>, <a>deleteBroker_brokerId</a> - The
--   unique ID that Amazon MQ generates for the broker.
newDeleteBroker :: Text -> DeleteBroker

-- | The unique ID that Amazon MQ generates for the broker.
deleteBroker_brokerId :: Lens' DeleteBroker Text

-- | <i>See:</i> <a>newDeleteBrokerResponse</a> smart constructor.
data DeleteBrokerResponse
DeleteBrokerResponse' :: Maybe Text -> Int -> DeleteBrokerResponse

-- | The unique ID that Amazon MQ generates for the broker.
[$sel:brokerId:DeleteBrokerResponse'] :: DeleteBrokerResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:DeleteBrokerResponse'] :: DeleteBrokerResponse -> Int

-- | Create a value of <a>DeleteBrokerResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:brokerId:DeleteBroker'</a>,
--   <a>deleteBrokerResponse_brokerId</a> - The unique ID that Amazon MQ
--   generates for the broker.
--   
--   <a>$sel:httpStatus:DeleteBrokerResponse'</a>,
--   <a>deleteBrokerResponse_httpStatus</a> - The response's http status
--   code.
newDeleteBrokerResponse :: Int -> DeleteBrokerResponse

-- | The unique ID that Amazon MQ generates for the broker.
deleteBrokerResponse_brokerId :: Lens' DeleteBrokerResponse (Maybe Text)

-- | The response's http status code.
deleteBrokerResponse_httpStatus :: Lens' DeleteBrokerResponse Int
instance GHC.Generics.Generic Amazonka.MQ.DeleteBroker.DeleteBroker
instance GHC.Show.Show Amazonka.MQ.DeleteBroker.DeleteBroker
instance GHC.Read.Read Amazonka.MQ.DeleteBroker.DeleteBroker
instance GHC.Classes.Eq Amazonka.MQ.DeleteBroker.DeleteBroker
instance GHC.Generics.Generic Amazonka.MQ.DeleteBroker.DeleteBrokerResponse
instance GHC.Show.Show Amazonka.MQ.DeleteBroker.DeleteBrokerResponse
instance GHC.Read.Read Amazonka.MQ.DeleteBroker.DeleteBrokerResponse
instance GHC.Classes.Eq Amazonka.MQ.DeleteBroker.DeleteBrokerResponse
instance Amazonka.Types.AWSRequest Amazonka.MQ.DeleteBroker.DeleteBroker
instance Control.DeepSeq.NFData Amazonka.MQ.DeleteBroker.DeleteBrokerResponse
instance Data.Hashable.Class.Hashable Amazonka.MQ.DeleteBroker.DeleteBroker
instance Control.DeepSeq.NFData Amazonka.MQ.DeleteBroker.DeleteBroker
instance Amazonka.Data.Headers.ToHeaders Amazonka.MQ.DeleteBroker.DeleteBroker
instance Amazonka.Data.Path.ToPath Amazonka.MQ.DeleteBroker.DeleteBroker
instance Amazonka.Data.Query.ToQuery Amazonka.MQ.DeleteBroker.DeleteBroker


-- | Creates an ActiveMQ user.
module Amazonka.MQ.CreateUser

-- | Creates a new ActiveMQ user.
--   
--   <i>See:</i> <a>newCreateUser</a> smart constructor.
data CreateUser
CreateUser' :: Maybe [Text] -> Maybe Bool -> Text -> Text -> Text -> CreateUser

-- | The list of groups (20 maximum) to which the ActiveMQ user belongs.
--   This value can contain only alphanumeric characters, dashes, periods,
--   underscores, and tildes (- . _ ~). This value must be 2-100 characters
--   long.
[$sel:groups:CreateUser'] :: CreateUser -> Maybe [Text]

-- | Enables access to the ActiveMQ Web Console for the ActiveMQ user.
[$sel:consoleAccess:CreateUser'] :: CreateUser -> Maybe Bool

-- | The username of the ActiveMQ user. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 2-100 characters long.
[$sel:username:CreateUser'] :: CreateUser -> Text

-- | The unique ID that Amazon MQ generates for the broker.
[$sel:brokerId:CreateUser'] :: CreateUser -> Text

-- | Required. The password of the user. This value must be at least 12
--   characters long, must contain at least 4 unique characters, and must
--   not contain commas, colons, or equal signs (,:=).
[$sel:password:CreateUser'] :: CreateUser -> Text

-- | Create a value of <a>CreateUser</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:groups:CreateUser'</a>, <a>createUser_groups</a> - The list of
--   groups (20 maximum) to which the ActiveMQ user belongs. This value can
--   contain only alphanumeric characters, dashes, periods, underscores,
--   and tildes (- . _ ~). This value must be 2-100 characters long.
--   
--   <a>$sel:consoleAccess:CreateUser'</a>, <a>createUser_consoleAccess</a>
--   - Enables access to the ActiveMQ Web Console for the ActiveMQ user.
--   
--   <a>$sel:username:CreateUser'</a>, <a>createUser_username</a> - The
--   username of the ActiveMQ user. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 2-100 characters long.
--   
--   <a>$sel:brokerId:CreateUser'</a>, <a>createUser_brokerId</a> - The
--   unique ID that Amazon MQ generates for the broker.
--   
--   <a>$sel:password:CreateUser'</a>, <a>createUser_password</a> -
--   Required. The password of the user. This value must be at least 12
--   characters long, must contain at least 4 unique characters, and must
--   not contain commas, colons, or equal signs (,:=).
newCreateUser :: Text -> Text -> Text -> CreateUser

-- | The list of groups (20 maximum) to which the ActiveMQ user belongs.
--   This value can contain only alphanumeric characters, dashes, periods,
--   underscores, and tildes (- . _ ~). This value must be 2-100 characters
--   long.
createUser_groups :: Lens' CreateUser (Maybe [Text])

-- | Enables access to the ActiveMQ Web Console for the ActiveMQ user.
createUser_consoleAccess :: Lens' CreateUser (Maybe Bool)

-- | The username of the ActiveMQ user. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 2-100 characters long.
createUser_username :: Lens' CreateUser Text

-- | The unique ID that Amazon MQ generates for the broker.
createUser_brokerId :: Lens' CreateUser Text

-- | Required. The password of the user. This value must be at least 12
--   characters long, must contain at least 4 unique characters, and must
--   not contain commas, colons, or equal signs (,:=).
createUser_password :: Lens' CreateUser Text

-- | <i>See:</i> <a>newCreateUserResponse</a> smart constructor.
data CreateUserResponse
CreateUserResponse' :: Int -> CreateUserResponse

-- | The response's http status code.
[$sel:httpStatus:CreateUserResponse'] :: CreateUserResponse -> Int

-- | Create a value of <a>CreateUserResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:CreateUserResponse'</a>,
--   <a>createUserResponse_httpStatus</a> - The response's http status
--   code.
newCreateUserResponse :: Int -> CreateUserResponse

-- | The response's http status code.
createUserResponse_httpStatus :: Lens' CreateUserResponse Int
instance GHC.Generics.Generic Amazonka.MQ.CreateUser.CreateUser
instance GHC.Show.Show Amazonka.MQ.CreateUser.CreateUser
instance GHC.Read.Read Amazonka.MQ.CreateUser.CreateUser
instance GHC.Classes.Eq Amazonka.MQ.CreateUser.CreateUser
instance GHC.Generics.Generic Amazonka.MQ.CreateUser.CreateUserResponse
instance GHC.Show.Show Amazonka.MQ.CreateUser.CreateUserResponse
instance GHC.Read.Read Amazonka.MQ.CreateUser.CreateUserResponse
instance GHC.Classes.Eq Amazonka.MQ.CreateUser.CreateUserResponse
instance Amazonka.Types.AWSRequest Amazonka.MQ.CreateUser.CreateUser
instance Control.DeepSeq.NFData Amazonka.MQ.CreateUser.CreateUserResponse
instance Data.Hashable.Class.Hashable Amazonka.MQ.CreateUser.CreateUser
instance Control.DeepSeq.NFData Amazonka.MQ.CreateUser.CreateUser
instance Amazonka.Data.Headers.ToHeaders Amazonka.MQ.CreateUser.CreateUser
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MQ.CreateUser.CreateUser
instance Amazonka.Data.Path.ToPath Amazonka.MQ.CreateUser.CreateUser
instance Amazonka.Data.Query.ToQuery Amazonka.MQ.CreateUser.CreateUser


-- | Add a tag to a resource.
module Amazonka.MQ.CreateTags

-- | A map of the key-value pairs for the resource tag.
--   
--   <i>See:</i> <a>newCreateTags</a> smart constructor.
data CreateTags
CreateTags' :: Maybe (HashMap Text Text) -> Text -> CreateTags

-- | The key-value pair for the resource tag.
[$sel:tags:CreateTags'] :: CreateTags -> Maybe (HashMap Text Text)

-- | The Amazon Resource Name (ARN) of the resource tag.
[$sel:resourceArn:CreateTags'] :: CreateTags -> Text

-- | Create a value of <a>CreateTags</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tags:CreateTags'</a>, <a>createTags_tags</a> - The key-value
--   pair for the resource tag.
--   
--   <a>$sel:resourceArn:CreateTags'</a>, <a>createTags_resourceArn</a> -
--   The Amazon Resource Name (ARN) of the resource tag.
newCreateTags :: Text -> CreateTags

-- | The key-value pair for the resource tag.
createTags_tags :: Lens' CreateTags (Maybe (HashMap Text Text))

-- | The Amazon Resource Name (ARN) of the resource tag.
createTags_resourceArn :: Lens' CreateTags Text

-- | <i>See:</i> <a>newCreateTagsResponse</a> smart constructor.
data CreateTagsResponse
CreateTagsResponse' :: CreateTagsResponse

-- | Create a value of <a>CreateTagsResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newCreateTagsResponse :: CreateTagsResponse
instance GHC.Generics.Generic Amazonka.MQ.CreateTags.CreateTags
instance GHC.Show.Show Amazonka.MQ.CreateTags.CreateTags
instance GHC.Read.Read Amazonka.MQ.CreateTags.CreateTags
instance GHC.Classes.Eq Amazonka.MQ.CreateTags.CreateTags
instance GHC.Generics.Generic Amazonka.MQ.CreateTags.CreateTagsResponse
instance GHC.Show.Show Amazonka.MQ.CreateTags.CreateTagsResponse
instance GHC.Read.Read Amazonka.MQ.CreateTags.CreateTagsResponse
instance GHC.Classes.Eq Amazonka.MQ.CreateTags.CreateTagsResponse
instance Amazonka.Types.AWSRequest Amazonka.MQ.CreateTags.CreateTags
instance Control.DeepSeq.NFData Amazonka.MQ.CreateTags.CreateTagsResponse
instance Data.Hashable.Class.Hashable Amazonka.MQ.CreateTags.CreateTags
instance Control.DeepSeq.NFData Amazonka.MQ.CreateTags.CreateTags
instance Amazonka.Data.Headers.ToHeaders Amazonka.MQ.CreateTags.CreateTags
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MQ.CreateTags.CreateTags
instance Amazonka.Data.Path.ToPath Amazonka.MQ.CreateTags.CreateTags
instance Amazonka.Data.Query.ToQuery Amazonka.MQ.CreateTags.CreateTags


-- | Creates a new configuration for the specified configuration name.
--   Amazon MQ uses the default configuration (the engine type and
--   version).
module Amazonka.MQ.CreateConfiguration

-- | Creates a new configuration for the specified configuration name.
--   Amazon MQ uses the default configuration (the engine type and
--   version).
--   
--   <i>See:</i> <a>newCreateConfiguration</a> smart constructor.
data CreateConfiguration
CreateConfiguration' :: Maybe AuthenticationStrategy -> Maybe (HashMap Text Text) -> Text -> EngineType -> Text -> CreateConfiguration

-- | Optional. The authentication strategy associated with the
--   configuration. The default is SIMPLE.
[$sel:authenticationStrategy:CreateConfiguration'] :: CreateConfiguration -> Maybe AuthenticationStrategy

-- | Create tags when creating the configuration.
[$sel:tags:CreateConfiguration'] :: CreateConfiguration -> Maybe (HashMap Text Text)

-- | Required. The broker engine's version. For a list of supported engine
--   versions, see <a>Supported engines</a>.
[$sel:engineVersion:CreateConfiguration'] :: CreateConfiguration -> Text

-- | Required. The type of broker engine. Currently, Amazon MQ supports
--   ACTIVEMQ and RABBITMQ.
[$sel:engineType:CreateConfiguration'] :: CreateConfiguration -> EngineType

-- | Required. The name of the configuration. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 1-150 characters long.
[$sel:name:CreateConfiguration'] :: CreateConfiguration -> Text

-- | Create a value of <a>CreateConfiguration</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:authenticationStrategy:CreateConfiguration'</a>,
--   <a>createConfiguration_authenticationStrategy</a> - Optional. The
--   authentication strategy associated with the configuration. The default
--   is SIMPLE.
--   
--   <a>$sel:tags:CreateConfiguration'</a>, <a>createConfiguration_tags</a>
--   - Create tags when creating the configuration.
--   
--   <a>$sel:engineVersion:CreateConfiguration'</a>,
--   <a>createConfiguration_engineVersion</a> - Required. The broker
--   engine's version. For a list of supported engine versions, see
--   <a>Supported engines</a>.
--   
--   <a>$sel:engineType:CreateConfiguration'</a>,
--   <a>createConfiguration_engineType</a> - Required. The type of broker
--   engine. Currently, Amazon MQ supports ACTIVEMQ and RABBITMQ.
--   
--   <a>$sel:name:CreateConfiguration'</a>, <a>createConfiguration_name</a>
--   - Required. The name of the configuration. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 1-150 characters long.
newCreateConfiguration :: Text -> EngineType -> Text -> CreateConfiguration

-- | Optional. The authentication strategy associated with the
--   configuration. The default is SIMPLE.
createConfiguration_authenticationStrategy :: Lens' CreateConfiguration (Maybe AuthenticationStrategy)

-- | Create tags when creating the configuration.
createConfiguration_tags :: Lens' CreateConfiguration (Maybe (HashMap Text Text))

-- | Required. The broker engine's version. For a list of supported engine
--   versions, see <a>Supported engines</a>.
createConfiguration_engineVersion :: Lens' CreateConfiguration Text

-- | Required. The type of broker engine. Currently, Amazon MQ supports
--   ACTIVEMQ and RABBITMQ.
createConfiguration_engineType :: Lens' CreateConfiguration EngineType

-- | Required. The name of the configuration. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 1-150 characters long.
createConfiguration_name :: Lens' CreateConfiguration Text

-- | <i>See:</i> <a>newCreateConfigurationResponse</a> smart constructor.
data CreateConfigurationResponse
CreateConfigurationResponse' :: Maybe Text -> Maybe ConfigurationRevision -> Maybe POSIX -> Maybe AuthenticationStrategy -> Maybe Text -> Maybe Text -> Int -> CreateConfigurationResponse

-- | Required. The Amazon Resource Name (ARN) of the configuration.
[$sel:arn:CreateConfigurationResponse'] :: CreateConfigurationResponse -> Maybe Text

-- | The latest revision of the configuration.
[$sel:latestRevision:CreateConfigurationResponse'] :: CreateConfigurationResponse -> Maybe ConfigurationRevision

-- | Required. The date and time of the configuration.
[$sel:created:CreateConfigurationResponse'] :: CreateConfigurationResponse -> Maybe POSIX

-- | Optional. The authentication strategy associated with the
--   configuration. The default is SIMPLE.
[$sel:authenticationStrategy:CreateConfigurationResponse'] :: CreateConfigurationResponse -> Maybe AuthenticationStrategy

-- | Required. The name of the configuration. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 1-150 characters long.
[$sel:name:CreateConfigurationResponse'] :: CreateConfigurationResponse -> Maybe Text

-- | Required. The unique ID that Amazon MQ generates for the
--   configuration.
[$sel:id:CreateConfigurationResponse'] :: CreateConfigurationResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:CreateConfigurationResponse'] :: CreateConfigurationResponse -> Int

-- | Create a value of <a>CreateConfigurationResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:arn:CreateConfigurationResponse'</a>,
--   <a>createConfigurationResponse_arn</a> - Required. The Amazon Resource
--   Name (ARN) of the configuration.
--   
--   <a>$sel:latestRevision:CreateConfigurationResponse'</a>,
--   <a>createConfigurationResponse_latestRevision</a> - The latest
--   revision of the configuration.
--   
--   <a>$sel:created:CreateConfigurationResponse'</a>,
--   <a>createConfigurationResponse_created</a> - Required. The date and
--   time of the configuration.
--   
--   <a>$sel:authenticationStrategy:CreateConfiguration'</a>,
--   <a>createConfigurationResponse_authenticationStrategy</a> - Optional.
--   The authentication strategy associated with the configuration. The
--   default is SIMPLE.
--   
--   <a>$sel:name:CreateConfiguration'</a>,
--   <a>createConfigurationResponse_name</a> - Required. The name of the
--   configuration. This value can contain only alphanumeric characters,
--   dashes, periods, underscores, and tildes (- . _ ~). This value must be
--   1-150 characters long.
--   
--   <a>$sel:id:CreateConfigurationResponse'</a>,
--   <a>createConfigurationResponse_id</a> - Required. The unique ID that
--   Amazon MQ generates for the configuration.
--   
--   <a>$sel:httpStatus:CreateConfigurationResponse'</a>,
--   <a>createConfigurationResponse_httpStatus</a> - The response's http
--   status code.
newCreateConfigurationResponse :: Int -> CreateConfigurationResponse

-- | Required. The Amazon Resource Name (ARN) of the configuration.
createConfigurationResponse_arn :: Lens' CreateConfigurationResponse (Maybe Text)

-- | The latest revision of the configuration.
createConfigurationResponse_latestRevision :: Lens' CreateConfigurationResponse (Maybe ConfigurationRevision)

-- | Required. The date and time of the configuration.
createConfigurationResponse_created :: Lens' CreateConfigurationResponse (Maybe UTCTime)

-- | Optional. The authentication strategy associated with the
--   configuration. The default is SIMPLE.
createConfigurationResponse_authenticationStrategy :: Lens' CreateConfigurationResponse (Maybe AuthenticationStrategy)

-- | Required. The name of the configuration. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 1-150 characters long.
createConfigurationResponse_name :: Lens' CreateConfigurationResponse (Maybe Text)

-- | Required. The unique ID that Amazon MQ generates for the
--   configuration.
createConfigurationResponse_id :: Lens' CreateConfigurationResponse (Maybe Text)

-- | The response's http status code.
createConfigurationResponse_httpStatus :: Lens' CreateConfigurationResponse Int
instance GHC.Generics.Generic Amazonka.MQ.CreateConfiguration.CreateConfiguration
instance GHC.Show.Show Amazonka.MQ.CreateConfiguration.CreateConfiguration
instance GHC.Read.Read Amazonka.MQ.CreateConfiguration.CreateConfiguration
instance GHC.Classes.Eq Amazonka.MQ.CreateConfiguration.CreateConfiguration
instance GHC.Generics.Generic Amazonka.MQ.CreateConfiguration.CreateConfigurationResponse
instance GHC.Show.Show Amazonka.MQ.CreateConfiguration.CreateConfigurationResponse
instance GHC.Read.Read Amazonka.MQ.CreateConfiguration.CreateConfigurationResponse
instance GHC.Classes.Eq Amazonka.MQ.CreateConfiguration.CreateConfigurationResponse
instance Amazonka.Types.AWSRequest Amazonka.MQ.CreateConfiguration.CreateConfiguration
instance Control.DeepSeq.NFData Amazonka.MQ.CreateConfiguration.CreateConfigurationResponse
instance Data.Hashable.Class.Hashable Amazonka.MQ.CreateConfiguration.CreateConfiguration
instance Control.DeepSeq.NFData Amazonka.MQ.CreateConfiguration.CreateConfiguration
instance Amazonka.Data.Headers.ToHeaders Amazonka.MQ.CreateConfiguration.CreateConfiguration
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MQ.CreateConfiguration.CreateConfiguration
instance Amazonka.Data.Path.ToPath Amazonka.MQ.CreateConfiguration.CreateConfiguration
instance Amazonka.Data.Query.ToQuery Amazonka.MQ.CreateConfiguration.CreateConfiguration


-- | Creates a broker. Note: This API is asynchronous.
--   
--   To create a broker, you must either use the AmazonMQFullAccess IAM
--   policy or include the following EC2 permissions in your IAM policy.
--   
--   <ul>
--   <li>ec2:CreateNetworkInterfaceThis permission is required to allow
--   Amazon MQ to create an elastic network interface (ENI) on behalf of
--   your account.</li>
--   <li>ec2:CreateNetworkInterfacePermissionThis permission is required to
--   attach the ENI to the broker instance.</li>
--   <li>ec2:DeleteNetworkInterface</li>
--   <li>ec2:DeleteNetworkInterfacePermission</li>
--   <li>ec2:DetachNetworkInterface</li>
--   <li>ec2:DescribeInternetGateways</li>
--   <li>ec2:DescribeNetworkInterfaces</li>
--   <li>ec2:DescribeNetworkInterfacePermissions</li>
--   <li>ec2:DescribeRouteTables</li>
--   <li>ec2:DescribeSecurityGroups</li>
--   <li>ec2:DescribeSubnets</li>
--   <li>ec2:DescribeVpcs</li>
--   </ul>
--   
--   For more information, see <a>Create an IAM User and Get Your AWS
--   Credentials</a> and <a>Never Modify or Delete the Amazon MQ Elastic
--   Network Interface</a> in the <i>Amazon MQ Developer Guide</i>.
module Amazonka.MQ.CreateBroker

-- | Creates a broker using the specified properties.
--   
--   <i>See:</i> <a>newCreateBroker</a> smart constructor.
data CreateBroker
CreateBroker' :: Maybe [Text] -> Maybe [Text] -> Maybe Text -> Maybe AuthenticationStrategy -> Maybe LdapServerMetadataInput -> Maybe WeeklyStartTime -> Maybe Logs -> Maybe EncryptionOptions -> Maybe ConfigurationId -> Maybe (HashMap Text Text) -> Maybe BrokerStorageType -> Text -> Text -> Bool -> [User] -> Text -> DeploymentMode -> EngineType -> Bool -> CreateBroker

-- | The list of rules (1 minimum, 125 maximum) that authorize connections
--   to brokers.
[$sel:securityGroups:CreateBroker'] :: CreateBroker -> Maybe [Text]

-- | The list of groups that define which subnets and IP ranges the broker
--   can use from different Availability Zones. If you specify more than
--   one subnet, the subnets must be in different Availability Zones.
--   Amazon MQ will not be able to create VPC endpoints for your broker
--   with multiple subnets in the same Availability Zone. A SINGLE_INSTANCE
--   deployment requires one subnet (for example, the default subnet). An
--   ACTIVE_STANDBY_MULTI_AZ Amazon MQ for ActiveMQ deployment requires two
--   subnets. A CLUSTER_MULTI_AZ Amazon MQ for RabbitMQ deployment has no
--   subnet requirements when deployed with public accessibility.
--   Deployment without public accessibility requires at least one subnet.
--   
--   If you specify subnets in a <a>shared VPC</a> for a RabbitMQ broker,
--   the associated VPC to which the specified subnets belong must be owned
--   by your AWS account. Amazon MQ will not be able to create VPC
--   endpoints in VPCs that are not owned by your AWS account.
[$sel:subnetIds:CreateBroker'] :: CreateBroker -> Maybe [Text]

-- | The unique ID that the requester receives for the created broker.
--   Amazon MQ passes your ID with the API action. Note: We recommend using
--   a Universally Unique Identifier (UUID) for the creatorRequestId. You
--   may omit the creatorRequestId if your application doesn't require
--   idempotency.
[$sel:creatorRequestId:CreateBroker'] :: CreateBroker -> Maybe Text

-- | Optional. The authentication strategy used to secure the broker. The
--   default is SIMPLE.
[$sel:authenticationStrategy:CreateBroker'] :: CreateBroker -> Maybe AuthenticationStrategy

-- | Optional. The metadata of the LDAP server used to authenticate and
--   authorize connections to the broker. Does not apply to RabbitMQ
--   brokers.
[$sel:ldapServerMetadata:CreateBroker'] :: CreateBroker -> Maybe LdapServerMetadataInput

-- | The parameters that determine the WeeklyStartTime.
[$sel:maintenanceWindowStartTime:CreateBroker'] :: CreateBroker -> Maybe WeeklyStartTime

-- | Enables Amazon CloudWatch logging for brokers.
[$sel:logs:CreateBroker'] :: CreateBroker -> Maybe Logs

-- | Encryption options for the broker. Does not apply to RabbitMQ brokers.
[$sel:encryptionOptions:CreateBroker'] :: CreateBroker -> Maybe EncryptionOptions

-- | A list of information about the configuration.
[$sel:configuration:CreateBroker'] :: CreateBroker -> Maybe ConfigurationId

-- | Create tags when creating the broker.
[$sel:tags:CreateBroker'] :: CreateBroker -> Maybe (HashMap Text Text)

-- | The broker's storage type.
[$sel:storageType:CreateBroker'] :: CreateBroker -> Maybe BrokerStorageType

-- | Required. The broker engine's version. For a list of supported engine
--   versions, see <a>Supported engines</a>.
[$sel:engineVersion:CreateBroker'] :: CreateBroker -> Text

-- | Required. The broker's instance type.
[$sel:hostInstanceType:CreateBroker'] :: CreateBroker -> Text

-- | Enables automatic upgrades to new minor versions for brokers, as new
--   versions are released and supported by Amazon MQ. Automatic upgrades
--   occur during the scheduled maintenance window of the broker or after a
--   manual broker reboot. Set to true by default, if no value is
--   specified.
[$sel:autoMinorVersionUpgrade:CreateBroker'] :: CreateBroker -> Bool

-- | Required. The list of broker users (persons or applications) who can
--   access queues and topics. This value can contain only alphanumeric
--   characters, dashes, periods, underscores, and tildes (- . _ ~). This
--   value must be 2-100 characters long.
--   
--   Amazon MQ for RabbitMQ
--   
--   When you create an Amazon MQ for RabbitMQ broker, one and only one
--   administrative user is accepted and created when a broker is first
--   provisioned. All subsequent broker users are created by making
--   RabbitMQ API calls directly to brokers or via the RabbitMQ web
--   console.
[$sel:users:CreateBroker'] :: CreateBroker -> [User]

-- | Required. The broker's name. This value must be unique in your AWS
--   account, 1-50 characters long, must contain only letters, numbers,
--   dashes, and underscores, and must not contain white spaces, brackets,
--   wildcard characters, or special characters.
[$sel:brokerName:CreateBroker'] :: CreateBroker -> Text

-- | Required. The broker's deployment mode.
[$sel:deploymentMode:CreateBroker'] :: CreateBroker -> DeploymentMode

-- | Required. The type of broker engine. Currently, Amazon MQ supports
--   ACTIVEMQ and RABBITMQ.
[$sel:engineType:CreateBroker'] :: CreateBroker -> EngineType

-- | Enables connections from applications outside of the VPC that hosts
--   the broker's subnets. Set to false by default, if no value is
--   provided.
[$sel:publiclyAccessible:CreateBroker'] :: CreateBroker -> Bool

-- | Create a value of <a>CreateBroker</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:securityGroups:CreateBroker'</a>,
--   <a>createBroker_securityGroups</a> - The list of rules (1 minimum, 125
--   maximum) that authorize connections to brokers.
--   
--   <a>$sel:subnetIds:CreateBroker'</a>, <a>createBroker_subnetIds</a> -
--   The list of groups that define which subnets and IP ranges the broker
--   can use from different Availability Zones. If you specify more than
--   one subnet, the subnets must be in different Availability Zones.
--   Amazon MQ will not be able to create VPC endpoints for your broker
--   with multiple subnets in the same Availability Zone. A SINGLE_INSTANCE
--   deployment requires one subnet (for example, the default subnet). An
--   ACTIVE_STANDBY_MULTI_AZ Amazon MQ for ActiveMQ deployment requires two
--   subnets. A CLUSTER_MULTI_AZ Amazon MQ for RabbitMQ deployment has no
--   subnet requirements when deployed with public accessibility.
--   Deployment without public accessibility requires at least one subnet.
--   
--   If you specify subnets in a <a>shared VPC</a> for a RabbitMQ broker,
--   the associated VPC to which the specified subnets belong must be owned
--   by your AWS account. Amazon MQ will not be able to create VPC
--   endpoints in VPCs that are not owned by your AWS account.
--   
--   <a>$sel:creatorRequestId:CreateBroker'</a>,
--   <a>createBroker_creatorRequestId</a> - The unique ID that the
--   requester receives for the created broker. Amazon MQ passes your ID
--   with the API action. Note: We recommend using a Universally Unique
--   Identifier (UUID) for the creatorRequestId. You may omit the
--   creatorRequestId if your application doesn't require idempotency.
--   
--   <a>$sel:authenticationStrategy:CreateBroker'</a>,
--   <a>createBroker_authenticationStrategy</a> - Optional. The
--   authentication strategy used to secure the broker. The default is
--   SIMPLE.
--   
--   <a>$sel:ldapServerMetadata:CreateBroker'</a>,
--   <a>createBroker_ldapServerMetadata</a> - Optional. The metadata of the
--   LDAP server used to authenticate and authorize connections to the
--   broker. Does not apply to RabbitMQ brokers.
--   
--   <a>$sel:maintenanceWindowStartTime:CreateBroker'</a>,
--   <a>createBroker_maintenanceWindowStartTime</a> - The parameters that
--   determine the WeeklyStartTime.
--   
--   <a>$sel:logs:CreateBroker'</a>, <a>createBroker_logs</a> - Enables
--   Amazon CloudWatch logging for brokers.
--   
--   <a>$sel:encryptionOptions:CreateBroker'</a>,
--   <a>createBroker_encryptionOptions</a> - Encryption options for the
--   broker. Does not apply to RabbitMQ brokers.
--   
--   <a>$sel:configuration:CreateBroker'</a>,
--   <a>createBroker_configuration</a> - A list of information about the
--   configuration.
--   
--   <a>$sel:tags:CreateBroker'</a>, <a>createBroker_tags</a> - Create tags
--   when creating the broker.
--   
--   <a>$sel:storageType:CreateBroker'</a>, <a>createBroker_storageType</a>
--   - The broker's storage type.
--   
--   <a>$sel:engineVersion:CreateBroker'</a>,
--   <a>createBroker_engineVersion</a> - Required. The broker engine's
--   version. For a list of supported engine versions, see <a>Supported
--   engines</a>.
--   
--   <a>$sel:hostInstanceType:CreateBroker'</a>,
--   <a>createBroker_hostInstanceType</a> - Required. The broker's instance
--   type.
--   
--   <a>$sel:autoMinorVersionUpgrade:CreateBroker'</a>,
--   <a>createBroker_autoMinorVersionUpgrade</a> - Enables automatic
--   upgrades to new minor versions for brokers, as new versions are
--   released and supported by Amazon MQ. Automatic upgrades occur during
--   the scheduled maintenance window of the broker or after a manual
--   broker reboot. Set to true by default, if no value is specified.
--   
--   <a>$sel:users:CreateBroker'</a>, <a>createBroker_users</a> - Required.
--   The list of broker users (persons or applications) who can access
--   queues and topics. This value can contain only alphanumeric
--   characters, dashes, periods, underscores, and tildes (- . _ ~). This
--   value must be 2-100 characters long.
--   
--   Amazon MQ for RabbitMQ
--   
--   When you create an Amazon MQ for RabbitMQ broker, one and only one
--   administrative user is accepted and created when a broker is first
--   provisioned. All subsequent broker users are created by making
--   RabbitMQ API calls directly to brokers or via the RabbitMQ web
--   console.
--   
--   <a>$sel:brokerName:CreateBroker'</a>, <a>createBroker_brokerName</a> -
--   Required. The broker's name. This value must be unique in your AWS
--   account, 1-50 characters long, must contain only letters, numbers,
--   dashes, and underscores, and must not contain white spaces, brackets,
--   wildcard characters, or special characters.
--   
--   <a>$sel:deploymentMode:CreateBroker'</a>,
--   <a>createBroker_deploymentMode</a> - Required. The broker's deployment
--   mode.
--   
--   <a>$sel:engineType:CreateBroker'</a>, <a>createBroker_engineType</a> -
--   Required. The type of broker engine. Currently, Amazon MQ supports
--   ACTIVEMQ and RABBITMQ.
--   
--   <a>$sel:publiclyAccessible:CreateBroker'</a>,
--   <a>createBroker_publiclyAccessible</a> - Enables connections from
--   applications outside of the VPC that hosts the broker's subnets. Set
--   to false by default, if no value is provided.
newCreateBroker :: Text -> Text -> Bool -> Text -> DeploymentMode -> EngineType -> Bool -> CreateBroker

-- | The list of rules (1 minimum, 125 maximum) that authorize connections
--   to brokers.
createBroker_securityGroups :: Lens' CreateBroker (Maybe [Text])

-- | The list of groups that define which subnets and IP ranges the broker
--   can use from different Availability Zones. If you specify more than
--   one subnet, the subnets must be in different Availability Zones.
--   Amazon MQ will not be able to create VPC endpoints for your broker
--   with multiple subnets in the same Availability Zone. A SINGLE_INSTANCE
--   deployment requires one subnet (for example, the default subnet). An
--   ACTIVE_STANDBY_MULTI_AZ Amazon MQ for ActiveMQ deployment requires two
--   subnets. A CLUSTER_MULTI_AZ Amazon MQ for RabbitMQ deployment has no
--   subnet requirements when deployed with public accessibility.
--   Deployment without public accessibility requires at least one subnet.
--   
--   If you specify subnets in a <a>shared VPC</a> for a RabbitMQ broker,
--   the associated VPC to which the specified subnets belong must be owned
--   by your AWS account. Amazon MQ will not be able to create VPC
--   endpoints in VPCs that are not owned by your AWS account.
createBroker_subnetIds :: Lens' CreateBroker (Maybe [Text])

-- | The unique ID that the requester receives for the created broker.
--   Amazon MQ passes your ID with the API action. Note: We recommend using
--   a Universally Unique Identifier (UUID) for the creatorRequestId. You
--   may omit the creatorRequestId if your application doesn't require
--   idempotency.
createBroker_creatorRequestId :: Lens' CreateBroker (Maybe Text)

-- | Optional. The authentication strategy used to secure the broker. The
--   default is SIMPLE.
createBroker_authenticationStrategy :: Lens' CreateBroker (Maybe AuthenticationStrategy)

-- | Optional. The metadata of the LDAP server used to authenticate and
--   authorize connections to the broker. Does not apply to RabbitMQ
--   brokers.
createBroker_ldapServerMetadata :: Lens' CreateBroker (Maybe LdapServerMetadataInput)

-- | The parameters that determine the WeeklyStartTime.
createBroker_maintenanceWindowStartTime :: Lens' CreateBroker (Maybe WeeklyStartTime)

-- | Enables Amazon CloudWatch logging for brokers.
createBroker_logs :: Lens' CreateBroker (Maybe Logs)

-- | Encryption options for the broker. Does not apply to RabbitMQ brokers.
createBroker_encryptionOptions :: Lens' CreateBroker (Maybe EncryptionOptions)

-- | A list of information about the configuration.
createBroker_configuration :: Lens' CreateBroker (Maybe ConfigurationId)

-- | Create tags when creating the broker.
createBroker_tags :: Lens' CreateBroker (Maybe (HashMap Text Text))

-- | The broker's storage type.
createBroker_storageType :: Lens' CreateBroker (Maybe BrokerStorageType)

-- | Required. The broker engine's version. For a list of supported engine
--   versions, see <a>Supported engines</a>.
createBroker_engineVersion :: Lens' CreateBroker Text

-- | Required. The broker's instance type.
createBroker_hostInstanceType :: Lens' CreateBroker Text

-- | Enables automatic upgrades to new minor versions for brokers, as new
--   versions are released and supported by Amazon MQ. Automatic upgrades
--   occur during the scheduled maintenance window of the broker or after a
--   manual broker reboot. Set to true by default, if no value is
--   specified.
createBroker_autoMinorVersionUpgrade :: Lens' CreateBroker Bool

-- | Required. The list of broker users (persons or applications) who can
--   access queues and topics. This value can contain only alphanumeric
--   characters, dashes, periods, underscores, and tildes (- . _ ~). This
--   value must be 2-100 characters long.
--   
--   Amazon MQ for RabbitMQ
--   
--   When you create an Amazon MQ for RabbitMQ broker, one and only one
--   administrative user is accepted and created when a broker is first
--   provisioned. All subsequent broker users are created by making
--   RabbitMQ API calls directly to brokers or via the RabbitMQ web
--   console.
createBroker_users :: Lens' CreateBroker [User]

-- | Required. The broker's name. This value must be unique in your AWS
--   account, 1-50 characters long, must contain only letters, numbers,
--   dashes, and underscores, and must not contain white spaces, brackets,
--   wildcard characters, or special characters.
createBroker_brokerName :: Lens' CreateBroker Text

-- | Required. The broker's deployment mode.
createBroker_deploymentMode :: Lens' CreateBroker DeploymentMode

-- | Required. The type of broker engine. Currently, Amazon MQ supports
--   ACTIVEMQ and RABBITMQ.
createBroker_engineType :: Lens' CreateBroker EngineType

-- | Enables connections from applications outside of the VPC that hosts
--   the broker's subnets. Set to false by default, if no value is
--   provided.
createBroker_publiclyAccessible :: Lens' CreateBroker Bool

-- | <i>See:</i> <a>newCreateBrokerResponse</a> smart constructor.
data CreateBrokerResponse
CreateBrokerResponse' :: Maybe Text -> Maybe Text -> Int -> CreateBrokerResponse

-- | The unique ID that Amazon MQ generates for the broker.
[$sel:brokerId:CreateBrokerResponse'] :: CreateBrokerResponse -> Maybe Text

-- | The broker's Amazon Resource Name (ARN).
[$sel:brokerArn:CreateBrokerResponse'] :: CreateBrokerResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:CreateBrokerResponse'] :: CreateBrokerResponse -> Int

-- | Create a value of <a>CreateBrokerResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:brokerId:CreateBrokerResponse'</a>,
--   <a>createBrokerResponse_brokerId</a> - The unique ID that Amazon MQ
--   generates for the broker.
--   
--   <a>$sel:brokerArn:CreateBrokerResponse'</a>,
--   <a>createBrokerResponse_brokerArn</a> - The broker's Amazon Resource
--   Name (ARN).
--   
--   <a>$sel:httpStatus:CreateBrokerResponse'</a>,
--   <a>createBrokerResponse_httpStatus</a> - The response's http status
--   code.
newCreateBrokerResponse :: Int -> CreateBrokerResponse

-- | The unique ID that Amazon MQ generates for the broker.
createBrokerResponse_brokerId :: Lens' CreateBrokerResponse (Maybe Text)

-- | The broker's Amazon Resource Name (ARN).
createBrokerResponse_brokerArn :: Lens' CreateBrokerResponse (Maybe Text)

-- | The response's http status code.
createBrokerResponse_httpStatus :: Lens' CreateBrokerResponse Int
instance GHC.Generics.Generic Amazonka.MQ.CreateBroker.CreateBroker
instance GHC.Show.Show Amazonka.MQ.CreateBroker.CreateBroker
instance GHC.Read.Read Amazonka.MQ.CreateBroker.CreateBroker
instance GHC.Classes.Eq Amazonka.MQ.CreateBroker.CreateBroker
instance GHC.Generics.Generic Amazonka.MQ.CreateBroker.CreateBrokerResponse
instance GHC.Show.Show Amazonka.MQ.CreateBroker.CreateBrokerResponse
instance GHC.Read.Read Amazonka.MQ.CreateBroker.CreateBrokerResponse
instance GHC.Classes.Eq Amazonka.MQ.CreateBroker.CreateBrokerResponse
instance Amazonka.Types.AWSRequest Amazonka.MQ.CreateBroker.CreateBroker
instance Control.DeepSeq.NFData Amazonka.MQ.CreateBroker.CreateBrokerResponse
instance Data.Hashable.Class.Hashable Amazonka.MQ.CreateBroker.CreateBroker
instance Control.DeepSeq.NFData Amazonka.MQ.CreateBroker.CreateBroker
instance Amazonka.Data.Headers.ToHeaders Amazonka.MQ.CreateBroker.CreateBroker
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MQ.CreateBroker.CreateBroker
instance Amazonka.Data.Path.ToPath Amazonka.MQ.CreateBroker.CreateBroker
instance Amazonka.Data.Query.ToQuery Amazonka.MQ.CreateBroker.CreateBroker


-- | Adds a pending configuration change to a broker.
module Amazonka.MQ.UpdateBroker

-- | Updates the broker using the specified properties.
--   
--   <i>See:</i> <a>newUpdateBroker</a> smart constructor.
data UpdateBroker
UpdateBroker' :: Maybe Text -> Maybe Bool -> Maybe [Text] -> Maybe AuthenticationStrategy -> Maybe LdapServerMetadataInput -> Maybe WeeklyStartTime -> Maybe Logs -> Maybe ConfigurationId -> Maybe Text -> Text -> UpdateBroker

-- | The broker engine version. For a list of supported engine versions,
--   see <a>Supported engines</a>.
[$sel:engineVersion:UpdateBroker'] :: UpdateBroker -> Maybe Text

-- | Enables automatic upgrades to new minor versions for brokers, as new
--   versions are released and supported by Amazon MQ. Automatic upgrades
--   occur during the scheduled maintenance window of the broker or after a
--   manual broker reboot.
[$sel:autoMinorVersionUpgrade:UpdateBroker'] :: UpdateBroker -> Maybe Bool

-- | The list of security groups (1 minimum, 5 maximum) that authorizes
--   connections to brokers.
[$sel:securityGroups:UpdateBroker'] :: UpdateBroker -> Maybe [Text]

-- | Optional. The authentication strategy used to secure the broker. The
--   default is SIMPLE.
[$sel:authenticationStrategy:UpdateBroker'] :: UpdateBroker -> Maybe AuthenticationStrategy

-- | Optional. The metadata of the LDAP server used to authenticate and
--   authorize connections to the broker. Does not apply to RabbitMQ
--   brokers.
[$sel:ldapServerMetadata:UpdateBroker'] :: UpdateBroker -> Maybe LdapServerMetadataInput

-- | The parameters that determine the WeeklyStartTime.
[$sel:maintenanceWindowStartTime:UpdateBroker'] :: UpdateBroker -> Maybe WeeklyStartTime

-- | Enables Amazon CloudWatch logging for brokers.
[$sel:logs:UpdateBroker'] :: UpdateBroker -> Maybe Logs

-- | A list of information about the configuration.
[$sel:configuration:UpdateBroker'] :: UpdateBroker -> Maybe ConfigurationId

-- | The broker's host instance type to upgrade to. For a list of supported
--   instance types, see <a>Broker instance types</a>.
[$sel:hostInstanceType:UpdateBroker'] :: UpdateBroker -> Maybe Text

-- | The unique ID that Amazon MQ generates for the broker.
[$sel:brokerId:UpdateBroker'] :: UpdateBroker -> Text

-- | Create a value of <a>UpdateBroker</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:engineVersion:UpdateBroker'</a>,
--   <a>updateBroker_engineVersion</a> - The broker engine version. For a
--   list of supported engine versions, see <a>Supported engines</a>.
--   
--   <a>$sel:autoMinorVersionUpgrade:UpdateBroker'</a>,
--   <a>updateBroker_autoMinorVersionUpgrade</a> - Enables automatic
--   upgrades to new minor versions for brokers, as new versions are
--   released and supported by Amazon MQ. Automatic upgrades occur during
--   the scheduled maintenance window of the broker or after a manual
--   broker reboot.
--   
--   <a>$sel:securityGroups:UpdateBroker'</a>,
--   <a>updateBroker_securityGroups</a> - The list of security groups (1
--   minimum, 5 maximum) that authorizes connections to brokers.
--   
--   <a>$sel:authenticationStrategy:UpdateBroker'</a>,
--   <a>updateBroker_authenticationStrategy</a> - Optional. The
--   authentication strategy used to secure the broker. The default is
--   SIMPLE.
--   
--   <a>$sel:ldapServerMetadata:UpdateBroker'</a>,
--   <a>updateBroker_ldapServerMetadata</a> - Optional. The metadata of the
--   LDAP server used to authenticate and authorize connections to the
--   broker. Does not apply to RabbitMQ brokers.
--   
--   <a>$sel:maintenanceWindowStartTime:UpdateBroker'</a>,
--   <a>updateBroker_maintenanceWindowStartTime</a> - The parameters that
--   determine the WeeklyStartTime.
--   
--   <a>$sel:logs:UpdateBroker'</a>, <a>updateBroker_logs</a> - Enables
--   Amazon CloudWatch logging for brokers.
--   
--   <a>$sel:configuration:UpdateBroker'</a>,
--   <a>updateBroker_configuration</a> - A list of information about the
--   configuration.
--   
--   <a>$sel:hostInstanceType:UpdateBroker'</a>,
--   <a>updateBroker_hostInstanceType</a> - The broker's host instance type
--   to upgrade to. For a list of supported instance types, see <a>Broker
--   instance types</a>.
--   
--   <a>$sel:brokerId:UpdateBroker'</a>, <a>updateBroker_brokerId</a> - The
--   unique ID that Amazon MQ generates for the broker.
newUpdateBroker :: Text -> UpdateBroker

-- | The broker engine version. For a list of supported engine versions,
--   see <a>Supported engines</a>.
updateBroker_engineVersion :: Lens' UpdateBroker (Maybe Text)

-- | Enables automatic upgrades to new minor versions for brokers, as new
--   versions are released and supported by Amazon MQ. Automatic upgrades
--   occur during the scheduled maintenance window of the broker or after a
--   manual broker reboot.
updateBroker_autoMinorVersionUpgrade :: Lens' UpdateBroker (Maybe Bool)

-- | The list of security groups (1 minimum, 5 maximum) that authorizes
--   connections to brokers.
updateBroker_securityGroups :: Lens' UpdateBroker (Maybe [Text])

-- | Optional. The authentication strategy used to secure the broker. The
--   default is SIMPLE.
updateBroker_authenticationStrategy :: Lens' UpdateBroker (Maybe AuthenticationStrategy)

-- | Optional. The metadata of the LDAP server used to authenticate and
--   authorize connections to the broker. Does not apply to RabbitMQ
--   brokers.
updateBroker_ldapServerMetadata :: Lens' UpdateBroker (Maybe LdapServerMetadataInput)

-- | The parameters that determine the WeeklyStartTime.
updateBroker_maintenanceWindowStartTime :: Lens' UpdateBroker (Maybe WeeklyStartTime)

-- | Enables Amazon CloudWatch logging for brokers.
updateBroker_logs :: Lens' UpdateBroker (Maybe Logs)

-- | A list of information about the configuration.
updateBroker_configuration :: Lens' UpdateBroker (Maybe ConfigurationId)

-- | The broker's host instance type to upgrade to. For a list of supported
--   instance types, see <a>Broker instance types</a>.
updateBroker_hostInstanceType :: Lens' UpdateBroker (Maybe Text)

-- | The unique ID that Amazon MQ generates for the broker.
updateBroker_brokerId :: Lens' UpdateBroker Text

-- | <i>See:</i> <a>newUpdateBrokerResponse</a> smart constructor.
data UpdateBrokerResponse
UpdateBrokerResponse' :: Maybe Text -> Maybe Bool -> Maybe [Text] -> Maybe AuthenticationStrategy -> Maybe LdapServerMetadataOutput -> Maybe WeeklyStartTime -> Maybe Logs -> Maybe ConfigurationId -> Maybe Text -> Maybe Text -> Int -> UpdateBrokerResponse

-- | The broker engine version to upgrade to. For a list of supported
--   engine versions, see <a>Supported engines</a>.
[$sel:engineVersion:UpdateBrokerResponse'] :: UpdateBrokerResponse -> Maybe Text

-- | The new boolean value that specifies whether broker engines
--   automatically upgrade to new minor versions as new versions are
--   released and supported by Amazon MQ.
[$sel:autoMinorVersionUpgrade:UpdateBrokerResponse'] :: UpdateBrokerResponse -> Maybe Bool

-- | The list of security groups (1 minimum, 5 maximum) that authorizes
--   connections to brokers.
[$sel:securityGroups:UpdateBrokerResponse'] :: UpdateBrokerResponse -> Maybe [Text]

-- | Optional. The authentication strategy used to secure the broker. The
--   default is SIMPLE.
[$sel:authenticationStrategy:UpdateBrokerResponse'] :: UpdateBrokerResponse -> Maybe AuthenticationStrategy

-- | Optional. The metadata of the LDAP server used to authenticate and
--   authorize connections to the broker. Does not apply to RabbitMQ
--   brokers.
[$sel:ldapServerMetadata:UpdateBrokerResponse'] :: UpdateBrokerResponse -> Maybe LdapServerMetadataOutput

-- | The parameters that determine the WeeklyStartTime.
[$sel:maintenanceWindowStartTime:UpdateBrokerResponse'] :: UpdateBrokerResponse -> Maybe WeeklyStartTime

-- | The list of information about logs to be enabled for the specified
--   broker.
[$sel:logs:UpdateBrokerResponse'] :: UpdateBrokerResponse -> Maybe Logs

-- | The ID of the updated configuration.
[$sel:configuration:UpdateBrokerResponse'] :: UpdateBrokerResponse -> Maybe ConfigurationId

-- | Required. The unique ID that Amazon MQ generates for the broker.
[$sel:brokerId:UpdateBrokerResponse'] :: UpdateBrokerResponse -> Maybe Text

-- | The broker's host instance type to upgrade to. For a list of supported
--   instance types, see <a>Broker instance types</a>.
[$sel:hostInstanceType:UpdateBrokerResponse'] :: UpdateBrokerResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:UpdateBrokerResponse'] :: UpdateBrokerResponse -> Int

-- | Create a value of <a>UpdateBrokerResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:engineVersion:UpdateBroker'</a>,
--   <a>updateBrokerResponse_engineVersion</a> - The broker engine version
--   to upgrade to. For a list of supported engine versions, see
--   <a>Supported engines</a>.
--   
--   <a>$sel:autoMinorVersionUpgrade:UpdateBroker'</a>,
--   <a>updateBrokerResponse_autoMinorVersionUpgrade</a> - The new boolean
--   value that specifies whether broker engines automatically upgrade to
--   new minor versions as new versions are released and supported by
--   Amazon MQ.
--   
--   <a>$sel:securityGroups:UpdateBroker'</a>,
--   <a>updateBrokerResponse_securityGroups</a> - The list of security
--   groups (1 minimum, 5 maximum) that authorizes connections to brokers.
--   
--   <a>$sel:authenticationStrategy:UpdateBroker'</a>,
--   <a>updateBrokerResponse_authenticationStrategy</a> - Optional. The
--   authentication strategy used to secure the broker. The default is
--   SIMPLE.
--   
--   <a>$sel:ldapServerMetadata:UpdateBroker'</a>,
--   <a>updateBrokerResponse_ldapServerMetadata</a> - Optional. The
--   metadata of the LDAP server used to authenticate and authorize
--   connections to the broker. Does not apply to RabbitMQ brokers.
--   
--   <a>$sel:maintenanceWindowStartTime:UpdateBroker'</a>,
--   <a>updateBrokerResponse_maintenanceWindowStartTime</a> - The
--   parameters that determine the WeeklyStartTime.
--   
--   <a>$sel:logs:UpdateBroker'</a>, <a>updateBrokerResponse_logs</a> - The
--   list of information about logs to be enabled for the specified broker.
--   
--   <a>$sel:configuration:UpdateBroker'</a>,
--   <a>updateBrokerResponse_configuration</a> - The ID of the updated
--   configuration.
--   
--   <a>$sel:brokerId:UpdateBroker'</a>,
--   <a>updateBrokerResponse_brokerId</a> - Required. The unique ID that
--   Amazon MQ generates for the broker.
--   
--   <a>$sel:hostInstanceType:UpdateBroker'</a>,
--   <a>updateBrokerResponse_hostInstanceType</a> - The broker's host
--   instance type to upgrade to. For a list of supported instance types,
--   see <a>Broker instance types</a>.
--   
--   <a>$sel:httpStatus:UpdateBrokerResponse'</a>,
--   <a>updateBrokerResponse_httpStatus</a> - The response's http status
--   code.
newUpdateBrokerResponse :: Int -> UpdateBrokerResponse

-- | The broker engine version to upgrade to. For a list of supported
--   engine versions, see <a>Supported engines</a>.
updateBrokerResponse_engineVersion :: Lens' UpdateBrokerResponse (Maybe Text)

-- | The new boolean value that specifies whether broker engines
--   automatically upgrade to new minor versions as new versions are
--   released and supported by Amazon MQ.
updateBrokerResponse_autoMinorVersionUpgrade :: Lens' UpdateBrokerResponse (Maybe Bool)

-- | The list of security groups (1 minimum, 5 maximum) that authorizes
--   connections to brokers.
updateBrokerResponse_securityGroups :: Lens' UpdateBrokerResponse (Maybe [Text])

-- | Optional. The authentication strategy used to secure the broker. The
--   default is SIMPLE.
updateBrokerResponse_authenticationStrategy :: Lens' UpdateBrokerResponse (Maybe AuthenticationStrategy)

-- | Optional. The metadata of the LDAP server used to authenticate and
--   authorize connections to the broker. Does not apply to RabbitMQ
--   brokers.
updateBrokerResponse_ldapServerMetadata :: Lens' UpdateBrokerResponse (Maybe LdapServerMetadataOutput)

-- | The parameters that determine the WeeklyStartTime.
updateBrokerResponse_maintenanceWindowStartTime :: Lens' UpdateBrokerResponse (Maybe WeeklyStartTime)

-- | The list of information about logs to be enabled for the specified
--   broker.
updateBrokerResponse_logs :: Lens' UpdateBrokerResponse (Maybe Logs)

-- | The ID of the updated configuration.
updateBrokerResponse_configuration :: Lens' UpdateBrokerResponse (Maybe ConfigurationId)

-- | Required. The unique ID that Amazon MQ generates for the broker.
updateBrokerResponse_brokerId :: Lens' UpdateBrokerResponse (Maybe Text)

-- | The broker's host instance type to upgrade to. For a list of supported
--   instance types, see <a>Broker instance types</a>.
updateBrokerResponse_hostInstanceType :: Lens' UpdateBrokerResponse (Maybe Text)

-- | The response's http status code.
updateBrokerResponse_httpStatus :: Lens' UpdateBrokerResponse Int
instance GHC.Generics.Generic Amazonka.MQ.UpdateBroker.UpdateBroker
instance GHC.Show.Show Amazonka.MQ.UpdateBroker.UpdateBroker
instance GHC.Read.Read Amazonka.MQ.UpdateBroker.UpdateBroker
instance GHC.Classes.Eq Amazonka.MQ.UpdateBroker.UpdateBroker
instance GHC.Generics.Generic Amazonka.MQ.UpdateBroker.UpdateBrokerResponse
instance GHC.Show.Show Amazonka.MQ.UpdateBroker.UpdateBrokerResponse
instance GHC.Read.Read Amazonka.MQ.UpdateBroker.UpdateBrokerResponse
instance GHC.Classes.Eq Amazonka.MQ.UpdateBroker.UpdateBrokerResponse
instance Amazonka.Types.AWSRequest Amazonka.MQ.UpdateBroker.UpdateBroker
instance Control.DeepSeq.NFData Amazonka.MQ.UpdateBroker.UpdateBrokerResponse
instance Data.Hashable.Class.Hashable Amazonka.MQ.UpdateBroker.UpdateBroker
instance Control.DeepSeq.NFData Amazonka.MQ.UpdateBroker.UpdateBroker
instance Amazonka.Data.Headers.ToHeaders Amazonka.MQ.UpdateBroker.UpdateBroker
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MQ.UpdateBroker.UpdateBroker
instance Amazonka.Data.Path.ToPath Amazonka.MQ.UpdateBroker.UpdateBroker
instance Amazonka.Data.Query.ToQuery Amazonka.MQ.UpdateBroker.UpdateBroker


-- | Updates the specified configuration.
module Amazonka.MQ.UpdateConfiguration

-- | Updates the specified configuration.
--   
--   <i>See:</i> <a>newUpdateConfiguration</a> smart constructor.
data UpdateConfiguration
UpdateConfiguration' :: Maybe Text -> Text -> Text -> UpdateConfiguration

-- | The description of the configuration.
[$sel:description:UpdateConfiguration'] :: UpdateConfiguration -> Maybe Text

-- | The unique ID that Amazon MQ generates for the configuration.
[$sel:configurationId:UpdateConfiguration'] :: UpdateConfiguration -> Text

-- | Required. The base64-encoded XML configuration.
[$sel:data':UpdateConfiguration'] :: UpdateConfiguration -> Text

-- | Create a value of <a>UpdateConfiguration</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:description:UpdateConfiguration'</a>,
--   <a>updateConfiguration_description</a> - The description of the
--   configuration.
--   
--   <a>$sel:configurationId:UpdateConfiguration'</a>,
--   <a>updateConfiguration_configurationId</a> - The unique ID that Amazon
--   MQ generates for the configuration.
--   
--   <a>$sel:data':UpdateConfiguration'</a>,
--   <a>updateConfiguration_data</a> - Required. The base64-encoded XML
--   configuration.
newUpdateConfiguration :: Text -> Text -> UpdateConfiguration

-- | The description of the configuration.
updateConfiguration_description :: Lens' UpdateConfiguration (Maybe Text)

-- | The unique ID that Amazon MQ generates for the configuration.
updateConfiguration_configurationId :: Lens' UpdateConfiguration Text

-- | Required. The base64-encoded XML configuration.
updateConfiguration_data :: Lens' UpdateConfiguration Text

-- | <i>See:</i> <a>newUpdateConfigurationResponse</a> smart constructor.
data UpdateConfigurationResponse
UpdateConfigurationResponse' :: Maybe Text -> Maybe ConfigurationRevision -> Maybe POSIX -> Maybe [SanitizationWarning] -> Maybe Text -> Maybe Text -> Int -> UpdateConfigurationResponse

-- | Required. The Amazon Resource Name (ARN) of the configuration.
[$sel:arn:UpdateConfigurationResponse'] :: UpdateConfigurationResponse -> Maybe Text

-- | The latest revision of the configuration.
[$sel:latestRevision:UpdateConfigurationResponse'] :: UpdateConfigurationResponse -> Maybe ConfigurationRevision

-- | Required. The date and time of the configuration.
[$sel:created:UpdateConfigurationResponse'] :: UpdateConfigurationResponse -> Maybe POSIX

-- | The list of the first 20 warnings about the configuration XML elements
--   or attributes that were sanitized.
[$sel:warnings:UpdateConfigurationResponse'] :: UpdateConfigurationResponse -> Maybe [SanitizationWarning]

-- | Required. The name of the configuration. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 1-150 characters long.
[$sel:name:UpdateConfigurationResponse'] :: UpdateConfigurationResponse -> Maybe Text

-- | Required. The unique ID that Amazon MQ generates for the
--   configuration.
[$sel:id:UpdateConfigurationResponse'] :: UpdateConfigurationResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:UpdateConfigurationResponse'] :: UpdateConfigurationResponse -> Int

-- | Create a value of <a>UpdateConfigurationResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:arn:UpdateConfigurationResponse'</a>,
--   <a>updateConfigurationResponse_arn</a> - Required. The Amazon Resource
--   Name (ARN) of the configuration.
--   
--   <a>$sel:latestRevision:UpdateConfigurationResponse'</a>,
--   <a>updateConfigurationResponse_latestRevision</a> - The latest
--   revision of the configuration.
--   
--   <a>$sel:created:UpdateConfigurationResponse'</a>,
--   <a>updateConfigurationResponse_created</a> - Required. The date and
--   time of the configuration.
--   
--   <a>$sel:warnings:UpdateConfigurationResponse'</a>,
--   <a>updateConfigurationResponse_warnings</a> - The list of the first 20
--   warnings about the configuration XML elements or attributes that were
--   sanitized.
--   
--   <a>$sel:name:UpdateConfigurationResponse'</a>,
--   <a>updateConfigurationResponse_name</a> - Required. The name of the
--   configuration. This value can contain only alphanumeric characters,
--   dashes, periods, underscores, and tildes (- . _ ~). This value must be
--   1-150 characters long.
--   
--   <a>$sel:id:UpdateConfigurationResponse'</a>,
--   <a>updateConfigurationResponse_id</a> - Required. The unique ID that
--   Amazon MQ generates for the configuration.
--   
--   <a>$sel:httpStatus:UpdateConfigurationResponse'</a>,
--   <a>updateConfigurationResponse_httpStatus</a> - The response's http
--   status code.
newUpdateConfigurationResponse :: Int -> UpdateConfigurationResponse

-- | Required. The Amazon Resource Name (ARN) of the configuration.
updateConfigurationResponse_arn :: Lens' UpdateConfigurationResponse (Maybe Text)

-- | The latest revision of the configuration.
updateConfigurationResponse_latestRevision :: Lens' UpdateConfigurationResponse (Maybe ConfigurationRevision)

-- | Required. The date and time of the configuration.
updateConfigurationResponse_created :: Lens' UpdateConfigurationResponse (Maybe UTCTime)

-- | The list of the first 20 warnings about the configuration XML elements
--   or attributes that were sanitized.
updateConfigurationResponse_warnings :: Lens' UpdateConfigurationResponse (Maybe [SanitizationWarning])

-- | Required. The name of the configuration. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 1-150 characters long.
updateConfigurationResponse_name :: Lens' UpdateConfigurationResponse (Maybe Text)

-- | Required. The unique ID that Amazon MQ generates for the
--   configuration.
updateConfigurationResponse_id :: Lens' UpdateConfigurationResponse (Maybe Text)

-- | The response's http status code.
updateConfigurationResponse_httpStatus :: Lens' UpdateConfigurationResponse Int
instance GHC.Generics.Generic Amazonka.MQ.UpdateConfiguration.UpdateConfiguration
instance GHC.Show.Show Amazonka.MQ.UpdateConfiguration.UpdateConfiguration
instance GHC.Read.Read Amazonka.MQ.UpdateConfiguration.UpdateConfiguration
instance GHC.Classes.Eq Amazonka.MQ.UpdateConfiguration.UpdateConfiguration
instance GHC.Generics.Generic Amazonka.MQ.UpdateConfiguration.UpdateConfigurationResponse
instance GHC.Show.Show Amazonka.MQ.UpdateConfiguration.UpdateConfigurationResponse
instance GHC.Read.Read Amazonka.MQ.UpdateConfiguration.UpdateConfigurationResponse
instance GHC.Classes.Eq Amazonka.MQ.UpdateConfiguration.UpdateConfigurationResponse
instance Amazonka.Types.AWSRequest Amazonka.MQ.UpdateConfiguration.UpdateConfiguration
instance Control.DeepSeq.NFData Amazonka.MQ.UpdateConfiguration.UpdateConfigurationResponse
instance Data.Hashable.Class.Hashable Amazonka.MQ.UpdateConfiguration.UpdateConfiguration
instance Control.DeepSeq.NFData Amazonka.MQ.UpdateConfiguration.UpdateConfiguration
instance Amazonka.Data.Headers.ToHeaders Amazonka.MQ.UpdateConfiguration.UpdateConfiguration
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MQ.UpdateConfiguration.UpdateConfiguration
instance Amazonka.Data.Path.ToPath Amazonka.MQ.UpdateConfiguration.UpdateConfiguration
instance Amazonka.Data.Query.ToQuery Amazonka.MQ.UpdateConfiguration.UpdateConfiguration


-- | Updates the information for an ActiveMQ user.
module Amazonka.MQ.UpdateUser

-- | Updates the information for an ActiveMQ user.
--   
--   <i>See:</i> <a>newUpdateUser</a> smart constructor.
data UpdateUser
UpdateUser' :: Maybe [Text] -> Maybe Bool -> Maybe Text -> Text -> Text -> UpdateUser

-- | The list of groups (20 maximum) to which the ActiveMQ user belongs.
--   This value can contain only alphanumeric characters, dashes, periods,
--   underscores, and tildes (- . _ ~). This value must be 2-100 characters
--   long.
[$sel:groups:UpdateUser'] :: UpdateUser -> Maybe [Text]

-- | Enables access to the the ActiveMQ Web Console for the ActiveMQ user.
[$sel:consoleAccess:UpdateUser'] :: UpdateUser -> Maybe Bool

-- | The password of the user. This value must be at least 12 characters
--   long, must contain at least 4 unique characters, and must not contain
--   commas, colons, or equal signs (,:=).
[$sel:password:UpdateUser'] :: UpdateUser -> Maybe Text

-- | The username of the ActiveMQ user. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 2-100 characters long.
[$sel:username:UpdateUser'] :: UpdateUser -> Text

-- | The unique ID that Amazon MQ generates for the broker.
[$sel:brokerId:UpdateUser'] :: UpdateUser -> Text

-- | Create a value of <a>UpdateUser</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:groups:UpdateUser'</a>, <a>updateUser_groups</a> - The list of
--   groups (20 maximum) to which the ActiveMQ user belongs. This value can
--   contain only alphanumeric characters, dashes, periods, underscores,
--   and tildes (- . _ ~). This value must be 2-100 characters long.
--   
--   <a>$sel:consoleAccess:UpdateUser'</a>, <a>updateUser_consoleAccess</a>
--   - Enables access to the the ActiveMQ Web Console for the ActiveMQ
--   user.
--   
--   <a>$sel:password:UpdateUser'</a>, <a>updateUser_password</a> - The
--   password of the user. This value must be at least 12 characters long,
--   must contain at least 4 unique characters, and must not contain
--   commas, colons, or equal signs (,:=).
--   
--   <a>$sel:username:UpdateUser'</a>, <a>updateUser_username</a> - The
--   username of the ActiveMQ user. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 2-100 characters long.
--   
--   <a>$sel:brokerId:UpdateUser'</a>, <a>updateUser_brokerId</a> - The
--   unique ID that Amazon MQ generates for the broker.
newUpdateUser :: Text -> Text -> UpdateUser

-- | The list of groups (20 maximum) to which the ActiveMQ user belongs.
--   This value can contain only alphanumeric characters, dashes, periods,
--   underscores, and tildes (- . _ ~). This value must be 2-100 characters
--   long.
updateUser_groups :: Lens' UpdateUser (Maybe [Text])

-- | Enables access to the the ActiveMQ Web Console for the ActiveMQ user.
updateUser_consoleAccess :: Lens' UpdateUser (Maybe Bool)

-- | The password of the user. This value must be at least 12 characters
--   long, must contain at least 4 unique characters, and must not contain
--   commas, colons, or equal signs (,:=).
updateUser_password :: Lens' UpdateUser (Maybe Text)

-- | The username of the ActiveMQ user. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 2-100 characters long.
updateUser_username :: Lens' UpdateUser Text

-- | The unique ID that Amazon MQ generates for the broker.
updateUser_brokerId :: Lens' UpdateUser Text

-- | <i>See:</i> <a>newUpdateUserResponse</a> smart constructor.
data UpdateUserResponse
UpdateUserResponse' :: Int -> UpdateUserResponse

-- | The response's http status code.
[$sel:httpStatus:UpdateUserResponse'] :: UpdateUserResponse -> Int

-- | Create a value of <a>UpdateUserResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UpdateUserResponse'</a>,
--   <a>updateUserResponse_httpStatus</a> - The response's http status
--   code.
newUpdateUserResponse :: Int -> UpdateUserResponse

-- | The response's http status code.
updateUserResponse_httpStatus :: Lens' UpdateUserResponse Int
instance GHC.Generics.Generic Amazonka.MQ.UpdateUser.UpdateUser
instance GHC.Show.Show Amazonka.MQ.UpdateUser.UpdateUser
instance GHC.Read.Read Amazonka.MQ.UpdateUser.UpdateUser
instance GHC.Classes.Eq Amazonka.MQ.UpdateUser.UpdateUser
instance GHC.Generics.Generic Amazonka.MQ.UpdateUser.UpdateUserResponse
instance GHC.Show.Show Amazonka.MQ.UpdateUser.UpdateUserResponse
instance GHC.Read.Read Amazonka.MQ.UpdateUser.UpdateUserResponse
instance GHC.Classes.Eq Amazonka.MQ.UpdateUser.UpdateUserResponse
instance Amazonka.Types.AWSRequest Amazonka.MQ.UpdateUser.UpdateUser
instance Control.DeepSeq.NFData Amazonka.MQ.UpdateUser.UpdateUserResponse
instance Data.Hashable.Class.Hashable Amazonka.MQ.UpdateUser.UpdateUser
instance Control.DeepSeq.NFData Amazonka.MQ.UpdateUser.UpdateUser
instance Amazonka.Data.Headers.ToHeaders Amazonka.MQ.UpdateUser.UpdateUser
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MQ.UpdateUser.UpdateUser
instance Amazonka.Data.Path.ToPath Amazonka.MQ.UpdateUser.UpdateUser
instance Amazonka.Data.Query.ToQuery Amazonka.MQ.UpdateUser.UpdateUser


module Amazonka.MQ.Lens

-- | Optional. The authentication strategy associated with the
--   configuration. The default is SIMPLE.
createConfiguration_authenticationStrategy :: Lens' CreateConfiguration (Maybe AuthenticationStrategy)

-- | Create tags when creating the configuration.
createConfiguration_tags :: Lens' CreateConfiguration (Maybe (HashMap Text Text))

-- | Required. The broker engine's version. For a list of supported engine
--   versions, see <a>Supported engines</a>.
createConfiguration_engineVersion :: Lens' CreateConfiguration Text

-- | Required. The type of broker engine. Currently, Amazon MQ supports
--   ACTIVEMQ and RABBITMQ.
createConfiguration_engineType :: Lens' CreateConfiguration EngineType

-- | Required. The name of the configuration. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 1-150 characters long.
createConfiguration_name :: Lens' CreateConfiguration Text

-- | Required. The Amazon Resource Name (ARN) of the configuration.
createConfigurationResponse_arn :: Lens' CreateConfigurationResponse (Maybe Text)

-- | The latest revision of the configuration.
createConfigurationResponse_latestRevision :: Lens' CreateConfigurationResponse (Maybe ConfigurationRevision)

-- | Required. The date and time of the configuration.
createConfigurationResponse_created :: Lens' CreateConfigurationResponse (Maybe UTCTime)

-- | Optional. The authentication strategy associated with the
--   configuration. The default is SIMPLE.
createConfigurationResponse_authenticationStrategy :: Lens' CreateConfigurationResponse (Maybe AuthenticationStrategy)

-- | Required. The name of the configuration. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 1-150 characters long.
createConfigurationResponse_name :: Lens' CreateConfigurationResponse (Maybe Text)

-- | Required. The unique ID that Amazon MQ generates for the
--   configuration.
createConfigurationResponse_id :: Lens' CreateConfigurationResponse (Maybe Text)

-- | The response's http status code.
createConfigurationResponse_httpStatus :: Lens' CreateConfigurationResponse Int

-- | The list of rules (1 minimum, 125 maximum) that authorize connections
--   to brokers.
createBroker_securityGroups :: Lens' CreateBroker (Maybe [Text])

-- | The list of groups that define which subnets and IP ranges the broker
--   can use from different Availability Zones. If you specify more than
--   one subnet, the subnets must be in different Availability Zones.
--   Amazon MQ will not be able to create VPC endpoints for your broker
--   with multiple subnets in the same Availability Zone. A SINGLE_INSTANCE
--   deployment requires one subnet (for example, the default subnet). An
--   ACTIVE_STANDBY_MULTI_AZ Amazon MQ for ActiveMQ deployment requires two
--   subnets. A CLUSTER_MULTI_AZ Amazon MQ for RabbitMQ deployment has no
--   subnet requirements when deployed with public accessibility.
--   Deployment without public accessibility requires at least one subnet.
--   
--   If you specify subnets in a <a>shared VPC</a> for a RabbitMQ broker,
--   the associated VPC to which the specified subnets belong must be owned
--   by your AWS account. Amazon MQ will not be able to create VPC
--   endpoints in VPCs that are not owned by your AWS account.
createBroker_subnetIds :: Lens' CreateBroker (Maybe [Text])

-- | The unique ID that the requester receives for the created broker.
--   Amazon MQ passes your ID with the API action. Note: We recommend using
--   a Universally Unique Identifier (UUID) for the creatorRequestId. You
--   may omit the creatorRequestId if your application doesn't require
--   idempotency.
createBroker_creatorRequestId :: Lens' CreateBroker (Maybe Text)

-- | Optional. The authentication strategy used to secure the broker. The
--   default is SIMPLE.
createBroker_authenticationStrategy :: Lens' CreateBroker (Maybe AuthenticationStrategy)

-- | Optional. The metadata of the LDAP server used to authenticate and
--   authorize connections to the broker. Does not apply to RabbitMQ
--   brokers.
createBroker_ldapServerMetadata :: Lens' CreateBroker (Maybe LdapServerMetadataInput)

-- | The parameters that determine the WeeklyStartTime.
createBroker_maintenanceWindowStartTime :: Lens' CreateBroker (Maybe WeeklyStartTime)

-- | Enables Amazon CloudWatch logging for brokers.
createBroker_logs :: Lens' CreateBroker (Maybe Logs)

-- | Encryption options for the broker. Does not apply to RabbitMQ brokers.
createBroker_encryptionOptions :: Lens' CreateBroker (Maybe EncryptionOptions)

-- | A list of information about the configuration.
createBroker_configuration :: Lens' CreateBroker (Maybe ConfigurationId)

-- | Create tags when creating the broker.
createBroker_tags :: Lens' CreateBroker (Maybe (HashMap Text Text))

-- | The broker's storage type.
createBroker_storageType :: Lens' CreateBroker (Maybe BrokerStorageType)

-- | Required. The broker engine's version. For a list of supported engine
--   versions, see <a>Supported engines</a>.
createBroker_engineVersion :: Lens' CreateBroker Text

-- | Required. The broker's instance type.
createBroker_hostInstanceType :: Lens' CreateBroker Text

-- | Enables automatic upgrades to new minor versions for brokers, as new
--   versions are released and supported by Amazon MQ. Automatic upgrades
--   occur during the scheduled maintenance window of the broker or after a
--   manual broker reboot. Set to true by default, if no value is
--   specified.
createBroker_autoMinorVersionUpgrade :: Lens' CreateBroker Bool

-- | Required. The list of broker users (persons or applications) who can
--   access queues and topics. This value can contain only alphanumeric
--   characters, dashes, periods, underscores, and tildes (- . _ ~). This
--   value must be 2-100 characters long.
--   
--   Amazon MQ for RabbitMQ
--   
--   When you create an Amazon MQ for RabbitMQ broker, one and only one
--   administrative user is accepted and created when a broker is first
--   provisioned. All subsequent broker users are created by making
--   RabbitMQ API calls directly to brokers or via the RabbitMQ web
--   console.
createBroker_users :: Lens' CreateBroker [User]

-- | Required. The broker's name. This value must be unique in your AWS
--   account, 1-50 characters long, must contain only letters, numbers,
--   dashes, and underscores, and must not contain white spaces, brackets,
--   wildcard characters, or special characters.
createBroker_brokerName :: Lens' CreateBroker Text

-- | Required. The broker's deployment mode.
createBroker_deploymentMode :: Lens' CreateBroker DeploymentMode

-- | Required. The type of broker engine. Currently, Amazon MQ supports
--   ACTIVEMQ and RABBITMQ.
createBroker_engineType :: Lens' CreateBroker EngineType

-- | Enables connections from applications outside of the VPC that hosts
--   the broker's subnets. Set to false by default, if no value is
--   provided.
createBroker_publiclyAccessible :: Lens' CreateBroker Bool

-- | The unique ID that Amazon MQ generates for the broker.
createBrokerResponse_brokerId :: Lens' CreateBrokerResponse (Maybe Text)

-- | The broker's Amazon Resource Name (ARN).
createBrokerResponse_brokerArn :: Lens' CreateBrokerResponse (Maybe Text)

-- | The response's http status code.
createBrokerResponse_httpStatus :: Lens' CreateBrokerResponse Int

-- | The unique ID that Amazon MQ generates for the broker.
deleteBroker_brokerId :: Lens' DeleteBroker Text

-- | The unique ID that Amazon MQ generates for the broker.
deleteBrokerResponse_brokerId :: Lens' DeleteBrokerResponse (Maybe Text)

-- | The response's http status code.
deleteBrokerResponse_httpStatus :: Lens' DeleteBrokerResponse Int

-- | The broker engine version. For a list of supported engine versions,
--   see <a>Supported engines</a>.
updateBroker_engineVersion :: Lens' UpdateBroker (Maybe Text)

-- | Enables automatic upgrades to new minor versions for brokers, as new
--   versions are released and supported by Amazon MQ. Automatic upgrades
--   occur during the scheduled maintenance window of the broker or after a
--   manual broker reboot.
updateBroker_autoMinorVersionUpgrade :: Lens' UpdateBroker (Maybe Bool)

-- | The list of security groups (1 minimum, 5 maximum) that authorizes
--   connections to brokers.
updateBroker_securityGroups :: Lens' UpdateBroker (Maybe [Text])

-- | Optional. The authentication strategy used to secure the broker. The
--   default is SIMPLE.
updateBroker_authenticationStrategy :: Lens' UpdateBroker (Maybe AuthenticationStrategy)

-- | Optional. The metadata of the LDAP server used to authenticate and
--   authorize connections to the broker. Does not apply to RabbitMQ
--   brokers.
updateBroker_ldapServerMetadata :: Lens' UpdateBroker (Maybe LdapServerMetadataInput)

-- | The parameters that determine the WeeklyStartTime.
updateBroker_maintenanceWindowStartTime :: Lens' UpdateBroker (Maybe WeeklyStartTime)

-- | Enables Amazon CloudWatch logging for brokers.
updateBroker_logs :: Lens' UpdateBroker (Maybe Logs)

-- | A list of information about the configuration.
updateBroker_configuration :: Lens' UpdateBroker (Maybe ConfigurationId)

-- | The broker's host instance type to upgrade to. For a list of supported
--   instance types, see <a>Broker instance types</a>.
updateBroker_hostInstanceType :: Lens' UpdateBroker (Maybe Text)

-- | The unique ID that Amazon MQ generates for the broker.
updateBroker_brokerId :: Lens' UpdateBroker Text

-- | The broker engine version to upgrade to. For a list of supported
--   engine versions, see <a>Supported engines</a>.
updateBrokerResponse_engineVersion :: Lens' UpdateBrokerResponse (Maybe Text)

-- | The new boolean value that specifies whether broker engines
--   automatically upgrade to new minor versions as new versions are
--   released and supported by Amazon MQ.
updateBrokerResponse_autoMinorVersionUpgrade :: Lens' UpdateBrokerResponse (Maybe Bool)

-- | The list of security groups (1 minimum, 5 maximum) that authorizes
--   connections to brokers.
updateBrokerResponse_securityGroups :: Lens' UpdateBrokerResponse (Maybe [Text])

-- | Optional. The authentication strategy used to secure the broker. The
--   default is SIMPLE.
updateBrokerResponse_authenticationStrategy :: Lens' UpdateBrokerResponse (Maybe AuthenticationStrategy)

-- | Optional. The metadata of the LDAP server used to authenticate and
--   authorize connections to the broker. Does not apply to RabbitMQ
--   brokers.
updateBrokerResponse_ldapServerMetadata :: Lens' UpdateBrokerResponse (Maybe LdapServerMetadataOutput)

-- | The parameters that determine the WeeklyStartTime.
updateBrokerResponse_maintenanceWindowStartTime :: Lens' UpdateBrokerResponse (Maybe WeeklyStartTime)

-- | The list of information about logs to be enabled for the specified
--   broker.
updateBrokerResponse_logs :: Lens' UpdateBrokerResponse (Maybe Logs)

-- | The ID of the updated configuration.
updateBrokerResponse_configuration :: Lens' UpdateBrokerResponse (Maybe ConfigurationId)

-- | Required. The unique ID that Amazon MQ generates for the broker.
updateBrokerResponse_brokerId :: Lens' UpdateBrokerResponse (Maybe Text)

-- | The broker's host instance type to upgrade to. For a list of supported
--   instance types, see <a>Broker instance types</a>.
updateBrokerResponse_hostInstanceType :: Lens' UpdateBrokerResponse (Maybe Text)

-- | The response's http status code.
updateBrokerResponse_httpStatus :: Lens' UpdateBrokerResponse Int

-- | The unique ID that Amazon MQ generates for the broker.
rebootBroker_brokerId :: Lens' RebootBroker Text

-- | The response's http status code.
rebootBrokerResponse_httpStatus :: Lens' RebootBrokerResponse Int

-- | The token that specifies the next page of results Amazon MQ should
--   return. To request the first page, leave nextToken empty.
listConfigurationRevisions_nextToken :: Lens' ListConfigurationRevisions (Maybe Text)

-- | The maximum number of brokers that Amazon MQ can return per page (20
--   by default). This value must be an integer from 5 to 100.
listConfigurationRevisions_maxResults :: Lens' ListConfigurationRevisions (Maybe Natural)

-- | The unique ID that Amazon MQ generates for the configuration.
listConfigurationRevisions_configurationId :: Lens' ListConfigurationRevisions Text

-- | The unique ID that Amazon MQ generates for the configuration.
listConfigurationRevisionsResponse_configurationId :: Lens' ListConfigurationRevisionsResponse (Maybe Text)

-- | The token that specifies the next page of results Amazon MQ should
--   return. To request the first page, leave nextToken empty.
listConfigurationRevisionsResponse_nextToken :: Lens' ListConfigurationRevisionsResponse (Maybe Text)

-- | The list of all revisions for the specified configuration.
listConfigurationRevisionsResponse_revisions :: Lens' ListConfigurationRevisionsResponse (Maybe [ConfigurationRevision])

-- | The maximum number of configuration revisions that can be returned per
--   page (20 by default). This value must be an integer from 5 to 100.
listConfigurationRevisionsResponse_maxResults :: Lens' ListConfigurationRevisionsResponse (Maybe Int)

-- | The response's http status code.
listConfigurationRevisionsResponse_httpStatus :: Lens' ListConfigurationRevisionsResponse Int

-- | The key-value pair for the resource tag.
createTags_tags :: Lens' CreateTags (Maybe (HashMap Text Text))

-- | The Amazon Resource Name (ARN) of the resource tag.
createTags_resourceArn :: Lens' CreateTags Text

-- | The token that specifies the next page of results Amazon MQ should
--   return. To request the first page, leave nextToken empty.
listUsers_nextToken :: Lens' ListUsers (Maybe Text)

-- | The maximum number of brokers that Amazon MQ can return per page (20
--   by default). This value must be an integer from 5 to 100.
listUsers_maxResults :: Lens' ListUsers (Maybe Natural)

-- | The unique ID that Amazon MQ generates for the broker.
listUsers_brokerId :: Lens' ListUsers Text

-- | Required. The list of all ActiveMQ usernames for the specified broker.
--   Does not apply to RabbitMQ brokers.
listUsersResponse_users :: Lens' ListUsersResponse (Maybe [UserSummary])

-- | The token that specifies the next page of results Amazon MQ should
--   return. To request the first page, leave nextToken empty.
listUsersResponse_nextToken :: Lens' ListUsersResponse (Maybe Text)

-- | Required. The unique ID that Amazon MQ generates for the broker.
listUsersResponse_brokerId :: Lens' ListUsersResponse (Maybe Text)

-- | Required. The maximum number of ActiveMQ users that can be returned
--   per page (20 by default). This value must be an integer from 5 to 100.
listUsersResponse_maxResults :: Lens' ListUsersResponse (Maybe Natural)

-- | The response's http status code.
listUsersResponse_httpStatus :: Lens' ListUsersResponse Int

-- | An array of tag keys to delete
deleteTags_tagKeys :: Lens' DeleteTags [Text]

-- | The Amazon Resource Name (ARN) of the resource tag.
deleteTags_resourceArn :: Lens' DeleteTags Text

-- | The token that specifies the next page of results Amazon MQ should
--   return. To request the first page, leave nextToken empty.
listConfigurations_nextToken :: Lens' ListConfigurations (Maybe Text)

-- | The maximum number of brokers that Amazon MQ can return per page (20
--   by default). This value must be an integer from 5 to 100.
listConfigurations_maxResults :: Lens' ListConfigurations (Maybe Natural)

-- | The list of all revisions for the specified configuration.
listConfigurationsResponse_configurations :: Lens' ListConfigurationsResponse (Maybe [Configuration])

-- | The token that specifies the next page of results Amazon MQ should
--   return. To request the first page, leave nextToken empty.
listConfigurationsResponse_nextToken :: Lens' ListConfigurationsResponse (Maybe Text)

-- | The maximum number of configurations that Amazon MQ can return per
--   page (20 by default). This value must be an integer from 5 to 100.
listConfigurationsResponse_maxResults :: Lens' ListConfigurationsResponse (Maybe Int)

-- | The response's http status code.
listConfigurationsResponse_httpStatus :: Lens' ListConfigurationsResponse Int

-- | The username of the ActiveMQ user. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 2-100 characters long.
describeUser_username :: Lens' DescribeUser Text

-- | The unique ID that Amazon MQ generates for the broker.
describeUser_brokerId :: Lens' DescribeUser Text

-- | The list of groups (20 maximum) to which the ActiveMQ user belongs.
--   This value can contain only alphanumeric characters, dashes, periods,
--   underscores, and tildes (- . _ ~). This value must be 2-100 characters
--   long.
describeUserResponse_groups :: Lens' DescribeUserResponse (Maybe [Text])

-- | The status of the changes pending for the ActiveMQ user.
describeUserResponse_pending :: Lens' DescribeUserResponse (Maybe UserPendingChanges)

-- | Enables access to the the ActiveMQ Web Console for the ActiveMQ user.
describeUserResponse_consoleAccess :: Lens' DescribeUserResponse (Maybe Bool)

-- | Required. The username of the ActiveMQ user. This value can contain
--   only alphanumeric characters, dashes, periods, underscores, and tildes
--   (- . _ ~). This value must be 2-100 characters long.
describeUserResponse_username :: Lens' DescribeUserResponse (Maybe Text)

-- | Required. The unique ID that Amazon MQ generates for the broker.
describeUserResponse_brokerId :: Lens' DescribeUserResponse (Maybe Text)

-- | The response's http status code.
describeUserResponse_httpStatus :: Lens' DescribeUserResponse Int

-- | The token that specifies the next page of results Amazon MQ should
--   return. To request the first page, leave nextToken empty.
describeBrokerInstanceOptions_nextToken :: Lens' DescribeBrokerInstanceOptions (Maybe Text)

-- | Filter response by engine type.
describeBrokerInstanceOptions_engineType :: Lens' DescribeBrokerInstanceOptions (Maybe Text)

-- | The maximum number of brokers that Amazon MQ can return per page (20
--   by default). This value must be an integer from 5 to 100.
describeBrokerInstanceOptions_maxResults :: Lens' DescribeBrokerInstanceOptions (Maybe Natural)

-- | Filter response by host instance type.
describeBrokerInstanceOptions_hostInstanceType :: Lens' DescribeBrokerInstanceOptions (Maybe Text)

-- | Filter response by storage type.
describeBrokerInstanceOptions_storageType :: Lens' DescribeBrokerInstanceOptions (Maybe Text)

-- | The token that specifies the next page of results Amazon MQ should
--   return. To request the first page, leave nextToken empty.
describeBrokerInstanceOptionsResponse_nextToken :: Lens' DescribeBrokerInstanceOptionsResponse (Maybe Text)

-- | List of available broker instance options.
describeBrokerInstanceOptionsResponse_brokerInstanceOptions :: Lens' DescribeBrokerInstanceOptionsResponse (Maybe [BrokerInstanceOption])

-- | Required. The maximum number of instance options that can be returned
--   per page (20 by default). This value must be an integer from 5 to 100.
describeBrokerInstanceOptionsResponse_maxResults :: Lens' DescribeBrokerInstanceOptionsResponse (Maybe Natural)

-- | The response's http status code.
describeBrokerInstanceOptionsResponse_httpStatus :: Lens' DescribeBrokerInstanceOptionsResponse Int

-- | The token that specifies the next page of results Amazon MQ should
--   return. To request the first page, leave nextToken empty.
listBrokers_nextToken :: Lens' ListBrokers (Maybe Text)

-- | The maximum number of brokers that Amazon MQ can return per page (20
--   by default). This value must be an integer from 5 to 100.
listBrokers_maxResults :: Lens' ListBrokers (Maybe Natural)

-- | The token that specifies the next page of results Amazon MQ should
--   return. To request the first page, leave nextToken empty.
listBrokersResponse_nextToken :: Lens' ListBrokersResponse (Maybe Text)

-- | A list of information about all brokers.
listBrokersResponse_brokerSummaries :: Lens' ListBrokersResponse (Maybe [BrokerSummary])

-- | The response's http status code.
listBrokersResponse_httpStatus :: Lens' ListBrokersResponse Int

-- | The list of groups (20 maximum) to which the ActiveMQ user belongs.
--   This value can contain only alphanumeric characters, dashes, periods,
--   underscores, and tildes (- . _ ~). This value must be 2-100 characters
--   long.
createUser_groups :: Lens' CreateUser (Maybe [Text])

-- | Enables access to the ActiveMQ Web Console for the ActiveMQ user.
createUser_consoleAccess :: Lens' CreateUser (Maybe Bool)

-- | The username of the ActiveMQ user. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 2-100 characters long.
createUser_username :: Lens' CreateUser Text

-- | The unique ID that Amazon MQ generates for the broker.
createUser_brokerId :: Lens' CreateUser Text

-- | Required. The password of the user. This value must be at least 12
--   characters long, must contain at least 4 unique characters, and must
--   not contain commas, colons, or equal signs (,:=).
createUser_password :: Lens' CreateUser Text

-- | The response's http status code.
createUserResponse_httpStatus :: Lens' CreateUserResponse Int

-- | The unique ID that Amazon MQ generates for the configuration.
describeConfiguration_configurationId :: Lens' DescribeConfiguration Text

-- | Required. The broker engine's version. For a list of supported engine
--   versions, see, <a>Supported engines</a>.
describeConfigurationResponse_engineVersion :: Lens' DescribeConfigurationResponse (Maybe Text)

-- | Required. The ARN of the configuration.
describeConfigurationResponse_arn :: Lens' DescribeConfigurationResponse (Maybe Text)

-- | Required. The latest revision of the configuration.
describeConfigurationResponse_latestRevision :: Lens' DescribeConfigurationResponse (Maybe ConfigurationRevision)

-- | Required. The date and time of the configuration revision.
describeConfigurationResponse_created :: Lens' DescribeConfigurationResponse (Maybe UTCTime)

-- | Optional. The authentication strategy associated with the
--   configuration. The default is SIMPLE.
describeConfigurationResponse_authenticationStrategy :: Lens' DescribeConfigurationResponse (Maybe AuthenticationStrategy)

-- | Required. The name of the configuration. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 1-150 characters long.
describeConfigurationResponse_name :: Lens' DescribeConfigurationResponse (Maybe Text)

-- | Required. The unique ID that Amazon MQ generates for the
--   configuration.
describeConfigurationResponse_id :: Lens' DescribeConfigurationResponse (Maybe Text)

-- | Required. The description of the configuration.
describeConfigurationResponse_description :: Lens' DescribeConfigurationResponse (Maybe Text)

-- | Required. The type of broker engine. Currently, Amazon MQ supports
--   ACTIVEMQ and RABBITMQ.
describeConfigurationResponse_engineType :: Lens' DescribeConfigurationResponse (Maybe EngineType)

-- | The list of all tags associated with this configuration.
describeConfigurationResponse_tags :: Lens' DescribeConfigurationResponse (Maybe (HashMap Text Text))

-- | The response's http status code.
describeConfigurationResponse_httpStatus :: Lens' DescribeConfigurationResponse Int

-- | The list of groups (20 maximum) to which the ActiveMQ user belongs.
--   This value can contain only alphanumeric characters, dashes, periods,
--   underscores, and tildes (- . _ ~). This value must be 2-100 characters
--   long.
updateUser_groups :: Lens' UpdateUser (Maybe [Text])

-- | Enables access to the the ActiveMQ Web Console for the ActiveMQ user.
updateUser_consoleAccess :: Lens' UpdateUser (Maybe Bool)

-- | The password of the user. This value must be at least 12 characters
--   long, must contain at least 4 unique characters, and must not contain
--   commas, colons, or equal signs (,:=).
updateUser_password :: Lens' UpdateUser (Maybe Text)

-- | The username of the ActiveMQ user. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 2-100 characters long.
updateUser_username :: Lens' UpdateUser Text

-- | The unique ID that Amazon MQ generates for the broker.
updateUser_brokerId :: Lens' UpdateUser Text

-- | The response's http status code.
updateUserResponse_httpStatus :: Lens' UpdateUserResponse Int

-- | The username of the ActiveMQ user. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 2-100 characters long.
deleteUser_username :: Lens' DeleteUser Text

-- | The unique ID that Amazon MQ generates for the broker.
deleteUser_brokerId :: Lens' DeleteUser Text

-- | The response's http status code.
deleteUserResponse_httpStatus :: Lens' DeleteUserResponse Int

-- | The Amazon Resource Name (ARN) of the resource tag.
listTags_resourceArn :: Lens' ListTags Text

-- | The key-value pair for the resource tag.
listTagsResponse_tags :: Lens' ListTagsResponse (Maybe (HashMap Text Text))

-- | The response's http status code.
listTagsResponse_httpStatus :: Lens' ListTagsResponse Int

-- | The token that specifies the next page of results Amazon MQ should
--   return. To request the first page, leave nextToken empty.
describeBrokerEngineTypes_nextToken :: Lens' DescribeBrokerEngineTypes (Maybe Text)

-- | Filter response by engine type.
describeBrokerEngineTypes_engineType :: Lens' DescribeBrokerEngineTypes (Maybe Text)

-- | The maximum number of brokers that Amazon MQ can return per page (20
--   by default). This value must be an integer from 5 to 100.
describeBrokerEngineTypes_maxResults :: Lens' DescribeBrokerEngineTypes (Maybe Natural)

-- | List of available engine types and versions.
describeBrokerEngineTypesResponse_brokerEngineTypes :: Lens' DescribeBrokerEngineTypesResponse (Maybe [BrokerEngineType])

-- | The token that specifies the next page of results Amazon MQ should
--   return. To request the first page, leave nextToken empty.
describeBrokerEngineTypesResponse_nextToken :: Lens' DescribeBrokerEngineTypesResponse (Maybe Text)

-- | Required. The maximum number of engine types that can be returned per
--   page (20 by default). This value must be an integer from 5 to 100.
describeBrokerEngineTypesResponse_maxResults :: Lens' DescribeBrokerEngineTypesResponse (Maybe Natural)

-- | The response's http status code.
describeBrokerEngineTypesResponse_httpStatus :: Lens' DescribeBrokerEngineTypesResponse Int

-- | The revision of the configuration.
describeConfigurationRevision_configurationRevision :: Lens' DescribeConfigurationRevision Text

-- | The unique ID that Amazon MQ generates for the configuration.
describeConfigurationRevision_configurationId :: Lens' DescribeConfigurationRevision Text

-- | Required. The unique ID that Amazon MQ generates for the
--   configuration.
describeConfigurationRevisionResponse_configurationId :: Lens' DescribeConfigurationRevisionResponse (Maybe Text)

-- | Required. The base64-encoded XML configuration.
describeConfigurationRevisionResponse_data :: Lens' DescribeConfigurationRevisionResponse (Maybe Text)

-- | Required. The date and time of the configuration.
describeConfigurationRevisionResponse_created :: Lens' DescribeConfigurationRevisionResponse (Maybe UTCTime)

-- | The description of the configuration.
describeConfigurationRevisionResponse_description :: Lens' DescribeConfigurationRevisionResponse (Maybe Text)

-- | The response's http status code.
describeConfigurationRevisionResponse_httpStatus :: Lens' DescribeConfigurationRevisionResponse Int

-- | The unique ID that Amazon MQ generates for the broker.
describeBroker_brokerId :: Lens' DescribeBroker Text

-- | The broker's name. This value must be unique in your AWS account, 1-50
--   characters long, must contain only letters, numbers, dashes, and
--   underscores, and must not contain white spaces, brackets, wildcard
--   characters, or special characters.
describeBrokerResponse_brokerName :: Lens' DescribeBrokerResponse (Maybe Text)

-- | The broker engine's version. For a list of supported engine versions,
--   see <a>Supported engines</a>.
describeBrokerResponse_engineVersion :: Lens' DescribeBrokerResponse (Maybe Text)

-- | The authentication strategy that will be applied when the broker is
--   rebooted. The default is SIMPLE.
describeBrokerResponse_pendingAuthenticationStrategy :: Lens' DescribeBrokerResponse (Maybe AuthenticationStrategy)

-- | The broker's status.
describeBrokerResponse_brokerState :: Lens' DescribeBrokerResponse (Maybe BrokerState)

-- | Enables connections from applications outside of the VPC that hosts
--   the broker's subnets.
describeBrokerResponse_publiclyAccessible :: Lens' DescribeBrokerResponse (Maybe Bool)

-- | Enables automatic upgrades to new minor versions for brokers, as new
--   versions are released and supported by Amazon MQ. Automatic upgrades
--   occur during the scheduled maintenance window of the broker or after a
--   manual broker reboot.
describeBrokerResponse_autoMinorVersionUpgrade :: Lens' DescribeBrokerResponse (Maybe Bool)

-- | The list of rules (1 minimum, 125 maximum) that authorize connections
--   to brokers.
describeBrokerResponse_securityGroups :: Lens' DescribeBrokerResponse (Maybe [Text])

-- | The list of all broker usernames for the specified broker.
describeBrokerResponse_users :: Lens' DescribeBrokerResponse (Maybe [UserSummary])

-- | The list of pending security groups to authorize connections to
--   brokers.
describeBrokerResponse_pendingSecurityGroups :: Lens' DescribeBrokerResponse (Maybe [Text])

-- | The list of groups that define which subnets and IP ranges the broker
--   can use from different Availability Zones.
describeBrokerResponse_subnetIds :: Lens' DescribeBrokerResponse (Maybe [Text])

-- | The time when the broker was created.
describeBrokerResponse_created :: Lens' DescribeBrokerResponse (Maybe UTCTime)

-- | The list of all revisions for the specified configuration.
describeBrokerResponse_configurations :: Lens' DescribeBrokerResponse (Maybe Configurations)

-- | The authentication strategy used to secure the broker. The default is
--   SIMPLE.
describeBrokerResponse_authenticationStrategy :: Lens' DescribeBrokerResponse (Maybe AuthenticationStrategy)

-- | The broker's host instance type to upgrade to. For a list of supported
--   instance types, see <a>Broker instance types</a>.
describeBrokerResponse_pendingHostInstanceType :: Lens' DescribeBrokerResponse (Maybe Text)

-- | The metadata of the LDAP server used to authenticate and authorize
--   connections to the broker.
describeBrokerResponse_ldapServerMetadata :: Lens' DescribeBrokerResponse (Maybe LdapServerMetadataOutput)

-- | The parameters that determine the WeeklyStartTime.
describeBrokerResponse_maintenanceWindowStartTime :: Lens' DescribeBrokerResponse (Maybe WeeklyStartTime)

-- | The list of information about logs currently enabled and pending to be
--   deployed for the specified broker.
describeBrokerResponse_logs :: Lens' DescribeBrokerResponse (Maybe LogsSummary)

-- | Encryption options for the broker. Does not apply to RabbitMQ brokers.
describeBrokerResponse_encryptionOptions :: Lens' DescribeBrokerResponse (Maybe EncryptionOptions)

-- | The broker's deployment mode.
describeBrokerResponse_deploymentMode :: Lens' DescribeBrokerResponse (Maybe DeploymentMode)

-- | The broker engine version to upgrade to. For a list of supported
--   engine versions, see <a>Supported engines</a>.
describeBrokerResponse_pendingEngineVersion :: Lens' DescribeBrokerResponse (Maybe Text)

-- | The unique ID that Amazon MQ generates for the broker.
describeBrokerResponse_brokerId :: Lens' DescribeBrokerResponse (Maybe Text)

-- | The metadata of the LDAP server that will be used to authenticate and
--   authorize connections to the broker after it is rebooted.
describeBrokerResponse_pendingLdapServerMetadata :: Lens' DescribeBrokerResponse (Maybe LdapServerMetadataOutput)

-- | The type of broker engine. Currently, Amazon MQ supports ACTIVEMQ and
--   RABBITMQ.
describeBrokerResponse_engineType :: Lens' DescribeBrokerResponse (Maybe EngineType)

-- | The broker's Amazon Resource Name (ARN).
describeBrokerResponse_brokerArn :: Lens' DescribeBrokerResponse (Maybe Text)

-- | The list of all tags associated with this broker.
describeBrokerResponse_tags :: Lens' DescribeBrokerResponse (Maybe (HashMap Text Text))

-- | A list of information about allocated brokers.
describeBrokerResponse_brokerInstances :: Lens' DescribeBrokerResponse (Maybe [BrokerInstance])

-- | The broker's instance type.
describeBrokerResponse_hostInstanceType :: Lens' DescribeBrokerResponse (Maybe Text)

-- | The broker's storage type.
describeBrokerResponse_storageType :: Lens' DescribeBrokerResponse (Maybe BrokerStorageType)

-- | The response's http status code.
describeBrokerResponse_httpStatus :: Lens' DescribeBrokerResponse Int

-- | The description of the configuration.
updateConfiguration_description :: Lens' UpdateConfiguration (Maybe Text)

-- | The unique ID that Amazon MQ generates for the configuration.
updateConfiguration_configurationId :: Lens' UpdateConfiguration Text

-- | Required. The base64-encoded XML configuration.
updateConfiguration_data :: Lens' UpdateConfiguration Text

-- | Required. The Amazon Resource Name (ARN) of the configuration.
updateConfigurationResponse_arn :: Lens' UpdateConfigurationResponse (Maybe Text)

-- | The latest revision of the configuration.
updateConfigurationResponse_latestRevision :: Lens' UpdateConfigurationResponse (Maybe ConfigurationRevision)

-- | Required. The date and time of the configuration.
updateConfigurationResponse_created :: Lens' UpdateConfigurationResponse (Maybe UTCTime)

-- | The list of the first 20 warnings about the configuration XML elements
--   or attributes that were sanitized.
updateConfigurationResponse_warnings :: Lens' UpdateConfigurationResponse (Maybe [SanitizationWarning])

-- | Required. The name of the configuration. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 1-150 characters long.
updateConfigurationResponse_name :: Lens' UpdateConfigurationResponse (Maybe Text)

-- | Required. The unique ID that Amazon MQ generates for the
--   configuration.
updateConfigurationResponse_id :: Lens' UpdateConfigurationResponse (Maybe Text)

-- | The response's http status code.
updateConfigurationResponse_httpStatus :: Lens' UpdateConfigurationResponse Int

-- | Id for the availability zone.
availabilityZone_name :: Lens' AvailabilityZone (Maybe Text)

-- | The list of engine versions.
brokerEngineType_engineVersions :: Lens' BrokerEngineType (Maybe [EngineVersion])

-- | The broker's engine type.
brokerEngineType_engineType :: Lens' BrokerEngineType (Maybe EngineType)

-- | The IP address of the Elastic Network Interface (ENI) attached to the
--   broker. Does not apply to RabbitMQ brokers.
brokerInstance_ipAddress :: Lens' BrokerInstance (Maybe Text)

-- | The brokers web console URL.
brokerInstance_consoleURL :: Lens' BrokerInstance (Maybe Text)

-- | The broker's wire-level protocol endpoints.
brokerInstance_endpoints :: Lens' BrokerInstance (Maybe [Text])

-- | The list of supported engine versions.
brokerInstanceOption_supportedEngineVersions :: Lens' BrokerInstanceOption (Maybe [Text])

-- | The list of available az.
brokerInstanceOption_availabilityZones :: Lens' BrokerInstanceOption (Maybe [AvailabilityZone])

-- | The list of supported deployment modes.
brokerInstanceOption_supportedDeploymentModes :: Lens' BrokerInstanceOption (Maybe [DeploymentMode])

-- | The broker's engine type.
brokerInstanceOption_engineType :: Lens' BrokerInstanceOption (Maybe EngineType)

-- | The broker's instance type.
brokerInstanceOption_hostInstanceType :: Lens' BrokerInstanceOption (Maybe Text)

-- | The broker's storage type.
brokerInstanceOption_storageType :: Lens' BrokerInstanceOption (Maybe BrokerStorageType)

-- | The broker's name. This value is unique in your AWS account, 1-50
--   characters long, and containing only letters, numbers, dashes, and
--   underscores, and must not contain white spaces, brackets, wildcard
--   characters, or special characters.
brokerSummary_brokerName :: Lens' BrokerSummary (Maybe Text)

-- | The broker's status.
brokerSummary_brokerState :: Lens' BrokerSummary (Maybe BrokerState)

-- | The time when the broker was created.
brokerSummary_created :: Lens' BrokerSummary (Maybe UTCTime)

-- | The unique ID that Amazon MQ generates for the broker.
brokerSummary_brokerId :: Lens' BrokerSummary (Maybe Text)

-- | The broker's Amazon Resource Name (ARN).
brokerSummary_brokerArn :: Lens' BrokerSummary (Maybe Text)

-- | The broker's instance type.
brokerSummary_hostInstanceType :: Lens' BrokerSummary (Maybe Text)

-- | The broker's deployment mode.
brokerSummary_deploymentMode :: Lens' BrokerSummary DeploymentMode

-- | The type of broker engine.
brokerSummary_engineType :: Lens' BrokerSummary EngineType

-- | The list of all tags associated with this configuration.
configuration_tags :: Lens' Configuration (Maybe (HashMap Text Text))

-- | Required. The description of the configuration.
configuration_description :: Lens' Configuration Text

-- | Required. The broker engine's version. For a list of supported engine
--   versions, see, <a>Supported engines</a>.
configuration_engineVersion :: Lens' Configuration Text

-- | Required. The latest revision of the configuration.
configuration_latestRevision :: Lens' Configuration ConfigurationRevision

-- | Optional. The authentication strategy associated with the
--   configuration. The default is SIMPLE.
configuration_authenticationStrategy :: Lens' Configuration AuthenticationStrategy

-- | Required. The type of broker engine. Currently, Amazon MQ supports
--   ACTIVEMQ and RABBITMQ.
configuration_engineType :: Lens' Configuration EngineType

-- | Required. The unique ID that Amazon MQ generates for the
--   configuration.
configuration_id :: Lens' Configuration Text

-- | Required. The ARN of the configuration.
configuration_arn :: Lens' Configuration Text

-- | Required. The name of the configuration. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 1-150 characters long.
configuration_name :: Lens' Configuration Text

-- | Required. The date and time of the configuration revision.
configuration_created :: Lens' Configuration UTCTime

-- | The revision number of the configuration.
configurationId_revision :: Lens' ConfigurationId (Maybe Int)

-- | Required. The unique ID that Amazon MQ generates for the
--   configuration.
configurationId_id :: Lens' ConfigurationId Text

-- | The description of the configuration revision.
configurationRevision_description :: Lens' ConfigurationRevision (Maybe Text)

-- | Required. The revision number of the configuration.
configurationRevision_revision :: Lens' ConfigurationRevision Int

-- | Required. The date and time of the configuration revision.
configurationRevision_created :: Lens' ConfigurationRevision UTCTime

-- | The broker's pending configuration.
configurations_pending :: Lens' Configurations (Maybe ConfigurationId)

-- | The history of configurations applied to the broker.
configurations_history :: Lens' Configurations (Maybe [ConfigurationId])

-- | The broker's current configuration.
configurations_current :: Lens' Configurations (Maybe ConfigurationId)

-- | The customer master key (CMK) to use for the AWS Key Management
--   Service (KMS). This key is used to encrypt your data at rest. If not
--   provided, Amazon MQ will use a default CMK to encrypt your data.
encryptionOptions_kmsKeyId :: Lens' EncryptionOptions (Maybe Text)

-- | Enables the use of an AWS owned CMK using AWS Key Management Service
--   (KMS). Set to true by default, if no value is provided, for example,
--   for RabbitMQ brokers.
encryptionOptions_useAwsOwnedKey :: Lens' EncryptionOptions Bool

-- | Id for the version.
engineVersion_name :: Lens' EngineVersion (Maybe Text)

-- | Specifies the name of the LDAP attribute for the user group
--   membership.
ldapServerMetadataInput_userRoleName :: Lens' LdapServerMetadataInput (Maybe Text)

-- | The directory search scope for the user. If set to true, scope is to
--   search the entire subtree.
ldapServerMetadataInput_userSearchSubtree :: Lens' LdapServerMetadataInput (Maybe Bool)

-- | The directory search scope for the role. If set to true, scope is to
--   search the entire subtree.
ldapServerMetadataInput_roleSearchSubtree :: Lens' LdapServerMetadataInput (Maybe Bool)

-- | Specifies the LDAP attribute that identifies the group name attribute
--   in the object returned from the group membership query.
ldapServerMetadataInput_roleName :: Lens' LdapServerMetadataInput (Maybe Text)

-- | Specifies the location of the LDAP server such as AWS Directory
--   Service for Microsoft Active Directory . Optional failover server.
ldapServerMetadataInput_hosts :: Lens' LdapServerMetadataInput [Text]

-- | The LDAP search filter used to find users within the userBase. The
--   client's username is substituted into the {0} placeholder in the
--   search filter. For example, if this option is set to (uid={0}) and the
--   received username is janedoe, the search filter becomes (uid=janedoe)
--   after string substitution. It will result in matching an entry like
--   uid=janedoe, ou=Users,ou=corp, dc=corp, dc=example, dc=com.
ldapServerMetadataInput_userSearchMatching :: Lens' LdapServerMetadataInput Text

-- | Select a particular subtree of the directory information tree (DIT) to
--   search for user entries. The subtree is specified by a DN, which
--   specifies the base node of the subtree. For example, by setting this
--   option to ou=Users,ou=corp, dc=corp, dc=example, dc=com, the search
--   for user entries is restricted to the subtree beneath ou=Users,
--   ou=corp, dc=corp, dc=example, dc=com.
ldapServerMetadataInput_userBase :: Lens' LdapServerMetadataInput Text

-- | The LDAP search filter used to find roles within the roleBase. The
--   distinguished name of the user matched by userSearchMatching is
--   substituted into the {0} placeholder in the search filter. The
--   client's username is substituted into the {1} placeholder. For
--   example, if you set this option to (member=uid={1})for the user
--   janedoe, the search filter becomes (member=uid=janedoe) after string
--   substitution. It matches all role entries that have a member attribute
--   equal to uid=janedoe under the subtree selected by the roleBase.
ldapServerMetadataInput_roleSearchMatching :: Lens' LdapServerMetadataInput Text

-- | Service account username. A service account is an account in your LDAP
--   server that has access to initiate a connection. For example,
--   cn=admin,dc=corp, dc=example, dc=com.
ldapServerMetadataInput_serviceAccountUsername :: Lens' LdapServerMetadataInput Text

-- | The distinguished name of the node in the directory information tree
--   (DIT) to search for roles or groups. For example, ou=group, ou=corp,
--   dc=corp, dc=example, dc=com.
ldapServerMetadataInput_roleBase :: Lens' LdapServerMetadataInput Text

-- | Service account password. A service account is an account in your LDAP
--   server that has access to initiate a connection. For example,
--   cn=admin,dc=corp, dc=example, dc=com.
ldapServerMetadataInput_serviceAccountPassword :: Lens' LdapServerMetadataInput Text

-- | Specifies the name of the LDAP attribute for the user group
--   membership.
ldapServerMetadataOutput_userRoleName :: Lens' LdapServerMetadataOutput (Maybe Text)

-- | The directory search scope for the user. If set to true, scope is to
--   search the entire subtree.
ldapServerMetadataOutput_userSearchSubtree :: Lens' LdapServerMetadataOutput (Maybe Bool)

-- | The directory search scope for the role. If set to true, scope is to
--   search the entire subtree.
ldapServerMetadataOutput_roleSearchSubtree :: Lens' LdapServerMetadataOutput (Maybe Bool)

-- | Specifies the LDAP attribute that identifies the group name attribute
--   in the object returned from the group membership query.
ldapServerMetadataOutput_roleName :: Lens' LdapServerMetadataOutput (Maybe Text)

-- | Specifies the location of the LDAP server such as AWS Directory
--   Service for Microsoft Active Directory . Optional failover server.
ldapServerMetadataOutput_hosts :: Lens' LdapServerMetadataOutput [Text]

-- | The LDAP search filter used to find users within the userBase. The
--   client's username is substituted into the {0} placeholder in the
--   search filter. For example, if this option is set to (uid={0}) and the
--   received username is janedoe, the search filter becomes (uid=janedoe)
--   after string substitution. It will result in matching an entry like
--   uid=janedoe, ou=Users,ou=corp, dc=corp, dc=example, dc=com.
ldapServerMetadataOutput_userSearchMatching :: Lens' LdapServerMetadataOutput Text

-- | Select a particular subtree of the directory information tree (DIT) to
--   search for user entries. The subtree is specified by a DN, which
--   specifies the base node of the subtree. For example, by setting this
--   option to ou=Users,ou=corp, dc=corp, dc=example, dc=com, the search
--   for user entries is restricted to the subtree beneath ou=Users,
--   ou=corp, dc=corp, dc=example, dc=com.
ldapServerMetadataOutput_userBase :: Lens' LdapServerMetadataOutput Text

-- | The LDAP search filter used to find roles within the roleBase. The
--   distinguished name of the user matched by userSearchMatching is
--   substituted into the {0} placeholder in the search filter. The
--   client's username is substituted into the {1} placeholder. For
--   example, if you set this option to (member=uid={1})for the user
--   janedoe, the search filter becomes (member=uid=janedoe) after string
--   substitution. It matches all role entries that have a member attribute
--   equal to uid=janedoe under the subtree selected by the roleBase.
ldapServerMetadataOutput_roleSearchMatching :: Lens' LdapServerMetadataOutput Text

-- | Service account username. A service account is an account in your LDAP
--   server that has access to initiate a connection. For example,
--   cn=admin,dc=corp, dc=example, dc=com.
ldapServerMetadataOutput_serviceAccountUsername :: Lens' LdapServerMetadataOutput Text

-- | The distinguished name of the node in the directory information tree
--   (DIT) to search for roles or groups. For example, ou=group, ou=corp,
--   dc=corp, dc=example, dc=com.
ldapServerMetadataOutput_roleBase :: Lens' LdapServerMetadataOutput Text

-- | Enables audit logging. Every user management action made using JMX or
--   the ActiveMQ Web Console is logged. Does not apply to RabbitMQ
--   brokers.
logs_audit :: Lens' Logs (Maybe Bool)

-- | Enables general logging.
logs_general :: Lens' Logs (Maybe Bool)

-- | The list of information about logs pending to be deployed for the
--   specified broker.
logsSummary_pending :: Lens' LogsSummary (Maybe PendingLogs)

-- | Enables audit logging. Every user management action made using JMX or
--   the ActiveMQ Web Console is logged.
logsSummary_audit :: Lens' LogsSummary (Maybe Bool)

-- | The location of the CloudWatch Logs log group where audit logs are
--   sent.
logsSummary_auditLogGroup :: Lens' LogsSummary (Maybe Text)

-- | The location of the CloudWatch Logs log group where general logs are
--   sent.
logsSummary_generalLogGroup :: Lens' LogsSummary Text

-- | Enables general logging.
logsSummary_general :: Lens' LogsSummary Bool

-- | Enables audit logging. Every user management action made using JMX or
--   the ActiveMQ Web Console is logged.
pendingLogs_audit :: Lens' PendingLogs (Maybe Bool)

-- | Enables general logging.
pendingLogs_general :: Lens' PendingLogs (Maybe Bool)

-- | The name of the XML attribute that has been sanitized.
sanitizationWarning_attributeName :: Lens' SanitizationWarning (Maybe Text)

-- | The name of the XML element that has been sanitized.
sanitizationWarning_elementName :: Lens' SanitizationWarning (Maybe Text)

-- | Required. The reason for which the XML elements or attributes were
--   sanitized.
sanitizationWarning_reason :: Lens' SanitizationWarning SanitizationWarningReason

-- | The list of groups (20 maximum) to which the ActiveMQ user belongs.
--   This value can contain only alphanumeric characters, dashes, periods,
--   underscores, and tildes (- . _ ~). This value must be 2-100 characters
--   long. Does not apply to RabbitMQ brokers.
user_groups :: Lens' User (Maybe [Text])

-- | Enables access to the ActiveMQ Web Console for the ActiveMQ user. Does
--   not apply to RabbitMQ brokers.
user_consoleAccess :: Lens' User (Maybe Bool)

-- | important&gt;
--   
--   Amazon MQ for ActiveMQ
--   
--   For ActiveMQ brokers, this value can contain only alphanumeric
--   characters, dashes, periods, underscores, and tildes (- . _ ~). This
--   value must be 2-100 characters long.
--   
--   /important&gt;
--   
--   Amazon MQ for RabbitMQ
--   
--   For RabbitMQ brokers, this value can contain only alphanumeric
--   characters, dashes, periods, underscores (- . _). This value must not
--   contain a tilde (~) character. Amazon MQ prohibts using guest as a
--   valid usename. This value must be 2-100 characters long.
user_username :: Lens' User Text

-- | Required. The password of the user. This value must be at least 12
--   characters long, must contain at least 4 unique characters, and must
--   not contain commas, colons, or equal signs (,:=).
user_password :: Lens' User Text

-- | The list of groups (20 maximum) to which the ActiveMQ user belongs.
--   This value can contain only alphanumeric characters, dashes, periods,
--   underscores, and tildes (- . _ ~). This value must be 2-100 characters
--   long.
userPendingChanges_groups :: Lens' UserPendingChanges (Maybe [Text])

-- | Enables access to the the ActiveMQ Web Console for the ActiveMQ user.
userPendingChanges_consoleAccess :: Lens' UserPendingChanges (Maybe Bool)

-- | Required. The type of change pending for the ActiveMQ user.
userPendingChanges_pendingChange :: Lens' UserPendingChanges ChangeType

-- | The type of change pending for the broker user.
userSummary_pendingChange :: Lens' UserSummary (Maybe ChangeType)

-- | Required. The username of the broker user. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 2-100 characters long.
userSummary_username :: Lens' UserSummary Text

-- | The time zone, UTC by default, in either the Country/City format, or
--   the UTC offset format.
weeklyStartTime_timeZone :: Lens' WeeklyStartTime (Maybe Text)

-- | Required. The time, in 24-hour format.
weeklyStartTime_timeOfDay :: Lens' WeeklyStartTime Text

-- | Required. The day of the week.
weeklyStartTime_dayOfWeek :: Lens' WeeklyStartTime DayOfWeek


module Amazonka.MQ.Waiters


-- | Derived from API version <tt>2017-11-27</tt> of the AWS service
--   descriptions, licensed under Apache 2.0.
--   
--   Amazon MQ is a managed message broker service for Apache ActiveMQ and
--   RabbitMQ that makes it easy to set up and operate message brokers in
--   the cloud. A message broker allows software applications and
--   components to communicate using various programming languages,
--   operating systems, and formal messaging protocols.
module Amazonka.MQ

-- | API version <tt>2017-11-27</tt> of the Amazon MQ SDK configuration.
defaultService :: Service

-- | Returns information about an error.
_ConflictException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Returns information about an error.
_ForbiddenException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Returns information about an error.
_NotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Returns information about an error.
_InternalServerErrorException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Returns information about an error.
_UnauthorizedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Returns information about an error.
_BadRequestException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Creates a new configuration for the specified configuration name.
--   Amazon MQ uses the default configuration (the engine type and
--   version).
--   
--   <i>See:</i> <a>newCreateConfiguration</a> smart constructor.
data CreateConfiguration
CreateConfiguration' :: Maybe AuthenticationStrategy -> Maybe (HashMap Text Text) -> Text -> EngineType -> Text -> CreateConfiguration

-- | Create a value of <a>CreateConfiguration</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:authenticationStrategy:CreateConfiguration'</a>,
--   <a>createConfiguration_authenticationStrategy</a> - Optional. The
--   authentication strategy associated with the configuration. The default
--   is SIMPLE.
--   
--   <a>$sel:tags:CreateConfiguration'</a>, <a>createConfiguration_tags</a>
--   - Create tags when creating the configuration.
--   
--   <a>$sel:engineVersion:CreateConfiguration'</a>,
--   <a>createConfiguration_engineVersion</a> - Required. The broker
--   engine's version. For a list of supported engine versions, see
--   <a>Supported engines</a>.
--   
--   <a>$sel:engineType:CreateConfiguration'</a>,
--   <a>createConfiguration_engineType</a> - Required. The type of broker
--   engine. Currently, Amazon MQ supports ACTIVEMQ and RABBITMQ.
--   
--   <a>$sel:name:CreateConfiguration'</a>, <a>createConfiguration_name</a>
--   - Required. The name of the configuration. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 1-150 characters long.
newCreateConfiguration :: Text -> EngineType -> Text -> CreateConfiguration

-- | <i>See:</i> <a>newCreateConfigurationResponse</a> smart constructor.
data CreateConfigurationResponse
CreateConfigurationResponse' :: Maybe Text -> Maybe ConfigurationRevision -> Maybe POSIX -> Maybe AuthenticationStrategy -> Maybe Text -> Maybe Text -> Int -> CreateConfigurationResponse

-- | Create a value of <a>CreateConfigurationResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:arn:CreateConfigurationResponse'</a>,
--   <a>createConfigurationResponse_arn</a> - Required. The Amazon Resource
--   Name (ARN) of the configuration.
--   
--   <a>$sel:latestRevision:CreateConfigurationResponse'</a>,
--   <a>createConfigurationResponse_latestRevision</a> - The latest
--   revision of the configuration.
--   
--   <a>$sel:created:CreateConfigurationResponse'</a>,
--   <a>createConfigurationResponse_created</a> - Required. The date and
--   time of the configuration.
--   
--   <a>$sel:authenticationStrategy:CreateConfiguration'</a>,
--   <a>createConfigurationResponse_authenticationStrategy</a> - Optional.
--   The authentication strategy associated with the configuration. The
--   default is SIMPLE.
--   
--   <a>$sel:name:CreateConfiguration'</a>,
--   <a>createConfigurationResponse_name</a> - Required. The name of the
--   configuration. This value can contain only alphanumeric characters,
--   dashes, periods, underscores, and tildes (- . _ ~). This value must be
--   1-150 characters long.
--   
--   <a>$sel:id:CreateConfigurationResponse'</a>,
--   <a>createConfigurationResponse_id</a> - Required. The unique ID that
--   Amazon MQ generates for the configuration.
--   
--   <a>$sel:httpStatus:CreateConfigurationResponse'</a>,
--   <a>createConfigurationResponse_httpStatus</a> - The response's http
--   status code.
newCreateConfigurationResponse :: Int -> CreateConfigurationResponse

-- | Creates a broker using the specified properties.
--   
--   <i>See:</i> <a>newCreateBroker</a> smart constructor.
data CreateBroker
CreateBroker' :: Maybe [Text] -> Maybe [Text] -> Maybe Text -> Maybe AuthenticationStrategy -> Maybe LdapServerMetadataInput -> Maybe WeeklyStartTime -> Maybe Logs -> Maybe EncryptionOptions -> Maybe ConfigurationId -> Maybe (HashMap Text Text) -> Maybe BrokerStorageType -> Text -> Text -> Bool -> [User] -> Text -> DeploymentMode -> EngineType -> Bool -> CreateBroker

-- | Create a value of <a>CreateBroker</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:securityGroups:CreateBroker'</a>,
--   <a>createBroker_securityGroups</a> - The list of rules (1 minimum, 125
--   maximum) that authorize connections to brokers.
--   
--   <a>$sel:subnetIds:CreateBroker'</a>, <a>createBroker_subnetIds</a> -
--   The list of groups that define which subnets and IP ranges the broker
--   can use from different Availability Zones. If you specify more than
--   one subnet, the subnets must be in different Availability Zones.
--   Amazon MQ will not be able to create VPC endpoints for your broker
--   with multiple subnets in the same Availability Zone. A SINGLE_INSTANCE
--   deployment requires one subnet (for example, the default subnet). An
--   ACTIVE_STANDBY_MULTI_AZ Amazon MQ for ActiveMQ deployment requires two
--   subnets. A CLUSTER_MULTI_AZ Amazon MQ for RabbitMQ deployment has no
--   subnet requirements when deployed with public accessibility.
--   Deployment without public accessibility requires at least one subnet.
--   
--   If you specify subnets in a <a>shared VPC</a> for a RabbitMQ broker,
--   the associated VPC to which the specified subnets belong must be owned
--   by your AWS account. Amazon MQ will not be able to create VPC
--   endpoints in VPCs that are not owned by your AWS account.
--   
--   <a>$sel:creatorRequestId:CreateBroker'</a>,
--   <a>createBroker_creatorRequestId</a> - The unique ID that the
--   requester receives for the created broker. Amazon MQ passes your ID
--   with the API action. Note: We recommend using a Universally Unique
--   Identifier (UUID) for the creatorRequestId. You may omit the
--   creatorRequestId if your application doesn't require idempotency.
--   
--   <a>$sel:authenticationStrategy:CreateBroker'</a>,
--   <a>createBroker_authenticationStrategy</a> - Optional. The
--   authentication strategy used to secure the broker. The default is
--   SIMPLE.
--   
--   <a>$sel:ldapServerMetadata:CreateBroker'</a>,
--   <a>createBroker_ldapServerMetadata</a> - Optional. The metadata of the
--   LDAP server used to authenticate and authorize connections to the
--   broker. Does not apply to RabbitMQ brokers.
--   
--   <a>$sel:maintenanceWindowStartTime:CreateBroker'</a>,
--   <a>createBroker_maintenanceWindowStartTime</a> - The parameters that
--   determine the WeeklyStartTime.
--   
--   <a>$sel:logs:CreateBroker'</a>, <a>createBroker_logs</a> - Enables
--   Amazon CloudWatch logging for brokers.
--   
--   <a>$sel:encryptionOptions:CreateBroker'</a>,
--   <a>createBroker_encryptionOptions</a> - Encryption options for the
--   broker. Does not apply to RabbitMQ brokers.
--   
--   <a>$sel:configuration:CreateBroker'</a>,
--   <a>createBroker_configuration</a> - A list of information about the
--   configuration.
--   
--   <a>$sel:tags:CreateBroker'</a>, <a>createBroker_tags</a> - Create tags
--   when creating the broker.
--   
--   <a>$sel:storageType:CreateBroker'</a>, <a>createBroker_storageType</a>
--   - The broker's storage type.
--   
--   <a>$sel:engineVersion:CreateBroker'</a>,
--   <a>createBroker_engineVersion</a> - Required. The broker engine's
--   version. For a list of supported engine versions, see <a>Supported
--   engines</a>.
--   
--   <a>$sel:hostInstanceType:CreateBroker'</a>,
--   <a>createBroker_hostInstanceType</a> - Required. The broker's instance
--   type.
--   
--   <a>$sel:autoMinorVersionUpgrade:CreateBroker'</a>,
--   <a>createBroker_autoMinorVersionUpgrade</a> - Enables automatic
--   upgrades to new minor versions for brokers, as new versions are
--   released and supported by Amazon MQ. Automatic upgrades occur during
--   the scheduled maintenance window of the broker or after a manual
--   broker reboot. Set to true by default, if no value is specified.
--   
--   <a>$sel:users:CreateBroker'</a>, <a>createBroker_users</a> - Required.
--   The list of broker users (persons or applications) who can access
--   queues and topics. This value can contain only alphanumeric
--   characters, dashes, periods, underscores, and tildes (- . _ ~). This
--   value must be 2-100 characters long.
--   
--   Amazon MQ for RabbitMQ
--   
--   When you create an Amazon MQ for RabbitMQ broker, one and only one
--   administrative user is accepted and created when a broker is first
--   provisioned. All subsequent broker users are created by making
--   RabbitMQ API calls directly to brokers or via the RabbitMQ web
--   console.
--   
--   <a>$sel:brokerName:CreateBroker'</a>, <a>createBroker_brokerName</a> -
--   Required. The broker's name. This value must be unique in your AWS
--   account, 1-50 characters long, must contain only letters, numbers,
--   dashes, and underscores, and must not contain white spaces, brackets,
--   wildcard characters, or special characters.
--   
--   <a>$sel:deploymentMode:CreateBroker'</a>,
--   <a>createBroker_deploymentMode</a> - Required. The broker's deployment
--   mode.
--   
--   <a>$sel:engineType:CreateBroker'</a>, <a>createBroker_engineType</a> -
--   Required. The type of broker engine. Currently, Amazon MQ supports
--   ACTIVEMQ and RABBITMQ.
--   
--   <a>$sel:publiclyAccessible:CreateBroker'</a>,
--   <a>createBroker_publiclyAccessible</a> - Enables connections from
--   applications outside of the VPC that hosts the broker's subnets. Set
--   to false by default, if no value is provided.
newCreateBroker :: Text -> Text -> Bool -> Text -> DeploymentMode -> EngineType -> Bool -> CreateBroker

-- | <i>See:</i> <a>newCreateBrokerResponse</a> smart constructor.
data CreateBrokerResponse
CreateBrokerResponse' :: Maybe Text -> Maybe Text -> Int -> CreateBrokerResponse

-- | Create a value of <a>CreateBrokerResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:brokerId:CreateBrokerResponse'</a>,
--   <a>createBrokerResponse_brokerId</a> - The unique ID that Amazon MQ
--   generates for the broker.
--   
--   <a>$sel:brokerArn:CreateBrokerResponse'</a>,
--   <a>createBrokerResponse_brokerArn</a> - The broker's Amazon Resource
--   Name (ARN).
--   
--   <a>$sel:httpStatus:CreateBrokerResponse'</a>,
--   <a>createBrokerResponse_httpStatus</a> - The response's http status
--   code.
newCreateBrokerResponse :: Int -> CreateBrokerResponse

-- | <i>See:</i> <a>newDeleteBroker</a> smart constructor.
data DeleteBroker
DeleteBroker' :: Text -> DeleteBroker

-- | Create a value of <a>DeleteBroker</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:brokerId:DeleteBroker'</a>, <a>deleteBroker_brokerId</a> - The
--   unique ID that Amazon MQ generates for the broker.
newDeleteBroker :: Text -> DeleteBroker

-- | <i>See:</i> <a>newDeleteBrokerResponse</a> smart constructor.
data DeleteBrokerResponse
DeleteBrokerResponse' :: Maybe Text -> Int -> DeleteBrokerResponse

-- | Create a value of <a>DeleteBrokerResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:brokerId:DeleteBroker'</a>,
--   <a>deleteBrokerResponse_brokerId</a> - The unique ID that Amazon MQ
--   generates for the broker.
--   
--   <a>$sel:httpStatus:DeleteBrokerResponse'</a>,
--   <a>deleteBrokerResponse_httpStatus</a> - The response's http status
--   code.
newDeleteBrokerResponse :: Int -> DeleteBrokerResponse

-- | Updates the broker using the specified properties.
--   
--   <i>See:</i> <a>newUpdateBroker</a> smart constructor.
data UpdateBroker
UpdateBroker' :: Maybe Text -> Maybe Bool -> Maybe [Text] -> Maybe AuthenticationStrategy -> Maybe LdapServerMetadataInput -> Maybe WeeklyStartTime -> Maybe Logs -> Maybe ConfigurationId -> Maybe Text -> Text -> UpdateBroker

-- | Create a value of <a>UpdateBroker</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:engineVersion:UpdateBroker'</a>,
--   <a>updateBroker_engineVersion</a> - The broker engine version. For a
--   list of supported engine versions, see <a>Supported engines</a>.
--   
--   <a>$sel:autoMinorVersionUpgrade:UpdateBroker'</a>,
--   <a>updateBroker_autoMinorVersionUpgrade</a> - Enables automatic
--   upgrades to new minor versions for brokers, as new versions are
--   released and supported by Amazon MQ. Automatic upgrades occur during
--   the scheduled maintenance window of the broker or after a manual
--   broker reboot.
--   
--   <a>$sel:securityGroups:UpdateBroker'</a>,
--   <a>updateBroker_securityGroups</a> - The list of security groups (1
--   minimum, 5 maximum) that authorizes connections to brokers.
--   
--   <a>$sel:authenticationStrategy:UpdateBroker'</a>,
--   <a>updateBroker_authenticationStrategy</a> - Optional. The
--   authentication strategy used to secure the broker. The default is
--   SIMPLE.
--   
--   <a>$sel:ldapServerMetadata:UpdateBroker'</a>,
--   <a>updateBroker_ldapServerMetadata</a> - Optional. The metadata of the
--   LDAP server used to authenticate and authorize connections to the
--   broker. Does not apply to RabbitMQ brokers.
--   
--   <a>$sel:maintenanceWindowStartTime:UpdateBroker'</a>,
--   <a>updateBroker_maintenanceWindowStartTime</a> - The parameters that
--   determine the WeeklyStartTime.
--   
--   <a>$sel:logs:UpdateBroker'</a>, <a>updateBroker_logs</a> - Enables
--   Amazon CloudWatch logging for brokers.
--   
--   <a>$sel:configuration:UpdateBroker'</a>,
--   <a>updateBroker_configuration</a> - A list of information about the
--   configuration.
--   
--   <a>$sel:hostInstanceType:UpdateBroker'</a>,
--   <a>updateBroker_hostInstanceType</a> - The broker's host instance type
--   to upgrade to. For a list of supported instance types, see <a>Broker
--   instance types</a>.
--   
--   <a>$sel:brokerId:UpdateBroker'</a>, <a>updateBroker_brokerId</a> - The
--   unique ID that Amazon MQ generates for the broker.
newUpdateBroker :: Text -> UpdateBroker

-- | <i>See:</i> <a>newUpdateBrokerResponse</a> smart constructor.
data UpdateBrokerResponse
UpdateBrokerResponse' :: Maybe Text -> Maybe Bool -> Maybe [Text] -> Maybe AuthenticationStrategy -> Maybe LdapServerMetadataOutput -> Maybe WeeklyStartTime -> Maybe Logs -> Maybe ConfigurationId -> Maybe Text -> Maybe Text -> Int -> UpdateBrokerResponse

-- | Create a value of <a>UpdateBrokerResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:engineVersion:UpdateBroker'</a>,
--   <a>updateBrokerResponse_engineVersion</a> - The broker engine version
--   to upgrade to. For a list of supported engine versions, see
--   <a>Supported engines</a>.
--   
--   <a>$sel:autoMinorVersionUpgrade:UpdateBroker'</a>,
--   <a>updateBrokerResponse_autoMinorVersionUpgrade</a> - The new boolean
--   value that specifies whether broker engines automatically upgrade to
--   new minor versions as new versions are released and supported by
--   Amazon MQ.
--   
--   <a>$sel:securityGroups:UpdateBroker'</a>,
--   <a>updateBrokerResponse_securityGroups</a> - The list of security
--   groups (1 minimum, 5 maximum) that authorizes connections to brokers.
--   
--   <a>$sel:authenticationStrategy:UpdateBroker'</a>,
--   <a>updateBrokerResponse_authenticationStrategy</a> - Optional. The
--   authentication strategy used to secure the broker. The default is
--   SIMPLE.
--   
--   <a>$sel:ldapServerMetadata:UpdateBroker'</a>,
--   <a>updateBrokerResponse_ldapServerMetadata</a> - Optional. The
--   metadata of the LDAP server used to authenticate and authorize
--   connections to the broker. Does not apply to RabbitMQ brokers.
--   
--   <a>$sel:maintenanceWindowStartTime:UpdateBroker'</a>,
--   <a>updateBrokerResponse_maintenanceWindowStartTime</a> - The
--   parameters that determine the WeeklyStartTime.
--   
--   <a>$sel:logs:UpdateBroker'</a>, <a>updateBrokerResponse_logs</a> - The
--   list of information about logs to be enabled for the specified broker.
--   
--   <a>$sel:configuration:UpdateBroker'</a>,
--   <a>updateBrokerResponse_configuration</a> - The ID of the updated
--   configuration.
--   
--   <a>$sel:brokerId:UpdateBroker'</a>,
--   <a>updateBrokerResponse_brokerId</a> - Required. The unique ID that
--   Amazon MQ generates for the broker.
--   
--   <a>$sel:hostInstanceType:UpdateBroker'</a>,
--   <a>updateBrokerResponse_hostInstanceType</a> - The broker's host
--   instance type to upgrade to. For a list of supported instance types,
--   see <a>Broker instance types</a>.
--   
--   <a>$sel:httpStatus:UpdateBrokerResponse'</a>,
--   <a>updateBrokerResponse_httpStatus</a> - The response's http status
--   code.
newUpdateBrokerResponse :: Int -> UpdateBrokerResponse

-- | <i>See:</i> <a>newRebootBroker</a> smart constructor.
data RebootBroker
RebootBroker' :: Text -> RebootBroker

-- | Create a value of <a>RebootBroker</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:brokerId:RebootBroker'</a>, <a>rebootBroker_brokerId</a> - The
--   unique ID that Amazon MQ generates for the broker.
newRebootBroker :: Text -> RebootBroker

-- | <i>See:</i> <a>newRebootBrokerResponse</a> smart constructor.
data RebootBrokerResponse
RebootBrokerResponse' :: Int -> RebootBrokerResponse

-- | Create a value of <a>RebootBrokerResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:RebootBrokerResponse'</a>,
--   <a>rebootBrokerResponse_httpStatus</a> - The response's http status
--   code.
newRebootBrokerResponse :: Int -> RebootBrokerResponse

-- | <i>See:</i> <a>newListConfigurationRevisions</a> smart constructor.
data ListConfigurationRevisions
ListConfigurationRevisions' :: Maybe Text -> Maybe Natural -> Text -> ListConfigurationRevisions

-- | Create a value of <a>ListConfigurationRevisions</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListConfigurationRevisions'</a>,
--   <a>listConfigurationRevisions_nextToken</a> - The token that specifies
--   the next page of results Amazon MQ should return. To request the first
--   page, leave nextToken empty.
--   
--   <a>$sel:maxResults:ListConfigurationRevisions'</a>,
--   <a>listConfigurationRevisions_maxResults</a> - The maximum number of
--   brokers that Amazon MQ can return per page (20 by default). This value
--   must be an integer from 5 to 100.
--   
--   <a>$sel:configurationId:ListConfigurationRevisions'</a>,
--   <a>listConfigurationRevisions_configurationId</a> - The unique ID that
--   Amazon MQ generates for the configuration.
newListConfigurationRevisions :: Text -> ListConfigurationRevisions

-- | <i>See:</i> <a>newListConfigurationRevisionsResponse</a> smart
--   constructor.
data ListConfigurationRevisionsResponse
ListConfigurationRevisionsResponse' :: Maybe Text -> Maybe Text -> Maybe [ConfigurationRevision] -> Maybe Int -> Int -> ListConfigurationRevisionsResponse

-- | Create a value of <a>ListConfigurationRevisionsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:configurationId:ListConfigurationRevisions'</a>,
--   <a>listConfigurationRevisionsResponse_configurationId</a> - The unique
--   ID that Amazon MQ generates for the configuration.
--   
--   <a>$sel:nextToken:ListConfigurationRevisions'</a>,
--   <a>listConfigurationRevisionsResponse_nextToken</a> - The token that
--   specifies the next page of results Amazon MQ should return. To request
--   the first page, leave nextToken empty.
--   
--   <a>$sel:revisions:ListConfigurationRevisionsResponse'</a>,
--   <a>listConfigurationRevisionsResponse_revisions</a> - The list of all
--   revisions for the specified configuration.
--   
--   <a>$sel:maxResults:ListConfigurationRevisions'</a>,
--   <a>listConfigurationRevisionsResponse_maxResults</a> - The maximum
--   number of configuration revisions that can be returned per page (20 by
--   default). This value must be an integer from 5 to 100.
--   
--   <a>$sel:httpStatus:ListConfigurationRevisionsResponse'</a>,
--   <a>listConfigurationRevisionsResponse_httpStatus</a> - The response's
--   http status code.
newListConfigurationRevisionsResponse :: Int -> ListConfigurationRevisionsResponse

-- | A map of the key-value pairs for the resource tag.
--   
--   <i>See:</i> <a>newCreateTags</a> smart constructor.
data CreateTags
CreateTags' :: Maybe (HashMap Text Text) -> Text -> CreateTags

-- | Create a value of <a>CreateTags</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tags:CreateTags'</a>, <a>createTags_tags</a> - The key-value
--   pair for the resource tag.
--   
--   <a>$sel:resourceArn:CreateTags'</a>, <a>createTags_resourceArn</a> -
--   The Amazon Resource Name (ARN) of the resource tag.
newCreateTags :: Text -> CreateTags

-- | <i>See:</i> <a>newCreateTagsResponse</a> smart constructor.
data CreateTagsResponse
CreateTagsResponse' :: CreateTagsResponse

-- | Create a value of <a>CreateTagsResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newCreateTagsResponse :: CreateTagsResponse

-- | <i>See:</i> <a>newListUsers</a> smart constructor.
data ListUsers
ListUsers' :: Maybe Text -> Maybe Natural -> Text -> ListUsers

-- | Create a value of <a>ListUsers</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListUsers'</a>, <a>listUsers_nextToken</a> - The
--   token that specifies the next page of results Amazon MQ should return.
--   To request the first page, leave nextToken empty.
--   
--   <a>$sel:maxResults:ListUsers'</a>, <a>listUsers_maxResults</a> - The
--   maximum number of brokers that Amazon MQ can return per page (20 by
--   default). This value must be an integer from 5 to 100.
--   
--   <a>$sel:brokerId:ListUsers'</a>, <a>listUsers_brokerId</a> - The
--   unique ID that Amazon MQ generates for the broker.
newListUsers :: Text -> ListUsers

-- | <i>See:</i> <a>newListUsersResponse</a> smart constructor.
data ListUsersResponse
ListUsersResponse' :: Maybe [UserSummary] -> Maybe Text -> Maybe Text -> Maybe Natural -> Int -> ListUsersResponse

-- | Create a value of <a>ListUsersResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:users:ListUsersResponse'</a>, <a>listUsersResponse_users</a> -
--   Required. The list of all ActiveMQ usernames for the specified broker.
--   Does not apply to RabbitMQ brokers.
--   
--   <a>$sel:nextToken:ListUsers'</a>, <a>listUsersResponse_nextToken</a> -
--   The token that specifies the next page of results Amazon MQ should
--   return. To request the first page, leave nextToken empty.
--   
--   <a>$sel:brokerId:ListUsers'</a>, <a>listUsersResponse_brokerId</a> -
--   Required. The unique ID that Amazon MQ generates for the broker.
--   
--   <a>$sel:maxResults:ListUsers'</a>, <a>listUsersResponse_maxResults</a>
--   - Required. The maximum number of ActiveMQ users that can be returned
--   per page (20 by default). This value must be an integer from 5 to 100.
--   
--   <a>$sel:httpStatus:ListUsersResponse'</a>,
--   <a>listUsersResponse_httpStatus</a> - The response's http status code.
newListUsersResponse :: Int -> ListUsersResponse

-- | <i>See:</i> <a>newDeleteTags</a> smart constructor.
data DeleteTags
DeleteTags' :: [Text] -> Text -> DeleteTags

-- | Create a value of <a>DeleteTags</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tagKeys:DeleteTags'</a>, <a>deleteTags_tagKeys</a> - An array
--   of tag keys to delete
--   
--   <a>$sel:resourceArn:DeleteTags'</a>, <a>deleteTags_resourceArn</a> -
--   The Amazon Resource Name (ARN) of the resource tag.
newDeleteTags :: Text -> DeleteTags

-- | <i>See:</i> <a>newDeleteTagsResponse</a> smart constructor.
data DeleteTagsResponse
DeleteTagsResponse' :: DeleteTagsResponse

-- | Create a value of <a>DeleteTagsResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newDeleteTagsResponse :: DeleteTagsResponse

-- | <i>See:</i> <a>newListConfigurations</a> smart constructor.
data ListConfigurations
ListConfigurations' :: Maybe Text -> Maybe Natural -> ListConfigurations

-- | Create a value of <a>ListConfigurations</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListConfigurations'</a>,
--   <a>listConfigurations_nextToken</a> - The token that specifies the
--   next page of results Amazon MQ should return. To request the first
--   page, leave nextToken empty.
--   
--   <a>$sel:maxResults:ListConfigurations'</a>,
--   <a>listConfigurations_maxResults</a> - The maximum number of brokers
--   that Amazon MQ can return per page (20 by default). This value must be
--   an integer from 5 to 100.
newListConfigurations :: ListConfigurations

-- | <i>See:</i> <a>newListConfigurationsResponse</a> smart constructor.
data ListConfigurationsResponse
ListConfigurationsResponse' :: Maybe [Configuration] -> Maybe Text -> Maybe Int -> Int -> ListConfigurationsResponse

-- | Create a value of <a>ListConfigurationsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:configurations:ListConfigurationsResponse'</a>,
--   <a>listConfigurationsResponse_configurations</a> - The list of all
--   revisions for the specified configuration.
--   
--   <a>$sel:nextToken:ListConfigurations'</a>,
--   <a>listConfigurationsResponse_nextToken</a> - The token that specifies
--   the next page of results Amazon MQ should return. To request the first
--   page, leave nextToken empty.
--   
--   <a>$sel:maxResults:ListConfigurations'</a>,
--   <a>listConfigurationsResponse_maxResults</a> - The maximum number of
--   configurations that Amazon MQ can return per page (20 by default).
--   This value must be an integer from 5 to 100.
--   
--   <a>$sel:httpStatus:ListConfigurationsResponse'</a>,
--   <a>listConfigurationsResponse_httpStatus</a> - The response's http
--   status code.
newListConfigurationsResponse :: Int -> ListConfigurationsResponse

-- | <i>See:</i> <a>newDescribeUser</a> smart constructor.
data DescribeUser
DescribeUser' :: Text -> Text -> DescribeUser

-- | Create a value of <a>DescribeUser</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:username:DescribeUser'</a>, <a>describeUser_username</a> - The
--   username of the ActiveMQ user. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 2-100 characters long.
--   
--   <a>$sel:brokerId:DescribeUser'</a>, <a>describeUser_brokerId</a> - The
--   unique ID that Amazon MQ generates for the broker.
newDescribeUser :: Text -> Text -> DescribeUser

-- | <i>See:</i> <a>newDescribeUserResponse</a> smart constructor.
data DescribeUserResponse
DescribeUserResponse' :: Maybe [Text] -> Maybe UserPendingChanges -> Maybe Bool -> Maybe Text -> Maybe Text -> Int -> DescribeUserResponse

-- | Create a value of <a>DescribeUserResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:groups:DescribeUserResponse'</a>,
--   <a>describeUserResponse_groups</a> - The list of groups (20 maximum)
--   to which the ActiveMQ user belongs. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 2-100 characters long.
--   
--   <a>$sel:pending:DescribeUserResponse'</a>,
--   <a>describeUserResponse_pending</a> - The status of the changes
--   pending for the ActiveMQ user.
--   
--   <a>$sel:consoleAccess:DescribeUserResponse'</a>,
--   <a>describeUserResponse_consoleAccess</a> - Enables access to the the
--   ActiveMQ Web Console for the ActiveMQ user.
--   
--   <a>$sel:username:DescribeUser'</a>,
--   <a>describeUserResponse_username</a> - Required. The username of the
--   ActiveMQ user. This value can contain only alphanumeric characters,
--   dashes, periods, underscores, and tildes (- . _ ~). This value must be
--   2-100 characters long.
--   
--   <a>$sel:brokerId:DescribeUser'</a>,
--   <a>describeUserResponse_brokerId</a> - Required. The unique ID that
--   Amazon MQ generates for the broker.
--   
--   <a>$sel:httpStatus:DescribeUserResponse'</a>,
--   <a>describeUserResponse_httpStatus</a> - The response's http status
--   code.
newDescribeUserResponse :: Int -> DescribeUserResponse

-- | <i>See:</i> <a>newDescribeBrokerInstanceOptions</a> smart constructor.
data DescribeBrokerInstanceOptions
DescribeBrokerInstanceOptions' :: Maybe Text -> Maybe Text -> Maybe Natural -> Maybe Text -> Maybe Text -> DescribeBrokerInstanceOptions

-- | Create a value of <a>DescribeBrokerInstanceOptions</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:DescribeBrokerInstanceOptions'</a>,
--   <a>describeBrokerInstanceOptions_nextToken</a> - The token that
--   specifies the next page of results Amazon MQ should return. To request
--   the first page, leave nextToken empty.
--   
--   <a>$sel:engineType:DescribeBrokerInstanceOptions'</a>,
--   <a>describeBrokerInstanceOptions_engineType</a> - Filter response by
--   engine type.
--   
--   <a>$sel:maxResults:DescribeBrokerInstanceOptions'</a>,
--   <a>describeBrokerInstanceOptions_maxResults</a> - The maximum number
--   of brokers that Amazon MQ can return per page (20 by default). This
--   value must be an integer from 5 to 100.
--   
--   <a>$sel:hostInstanceType:DescribeBrokerInstanceOptions'</a>,
--   <a>describeBrokerInstanceOptions_hostInstanceType</a> - Filter
--   response by host instance type.
--   
--   <a>$sel:storageType:DescribeBrokerInstanceOptions'</a>,
--   <a>describeBrokerInstanceOptions_storageType</a> - Filter response by
--   storage type.
newDescribeBrokerInstanceOptions :: DescribeBrokerInstanceOptions

-- | <i>See:</i> <a>newDescribeBrokerInstanceOptionsResponse</a> smart
--   constructor.
data DescribeBrokerInstanceOptionsResponse
DescribeBrokerInstanceOptionsResponse' :: Maybe Text -> Maybe [BrokerInstanceOption] -> Maybe Natural -> Int -> DescribeBrokerInstanceOptionsResponse

-- | Create a value of <a>DescribeBrokerInstanceOptionsResponse</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:DescribeBrokerInstanceOptions'</a>,
--   <a>describeBrokerInstanceOptionsResponse_nextToken</a> - The token
--   that specifies the next page of results Amazon MQ should return. To
--   request the first page, leave nextToken empty.
--   
--   
--   <a>$sel:brokerInstanceOptions:DescribeBrokerInstanceOptionsResponse'</a>,
--   <a>describeBrokerInstanceOptionsResponse_brokerInstanceOptions</a> -
--   List of available broker instance options.
--   
--   <a>$sel:maxResults:DescribeBrokerInstanceOptions'</a>,
--   <a>describeBrokerInstanceOptionsResponse_maxResults</a> - Required.
--   The maximum number of instance options that can be returned per page
--   (20 by default). This value must be an integer from 5 to 100.
--   
--   <a>$sel:httpStatus:DescribeBrokerInstanceOptionsResponse'</a>,
--   <a>describeBrokerInstanceOptionsResponse_httpStatus</a> - The
--   response's http status code.
newDescribeBrokerInstanceOptionsResponse :: Int -> DescribeBrokerInstanceOptionsResponse

-- | <i>See:</i> <a>newListBrokers</a> smart constructor.
data ListBrokers
ListBrokers' :: Maybe Text -> Maybe Natural -> ListBrokers

-- | Create a value of <a>ListBrokers</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListBrokers'</a>, <a>listBrokers_nextToken</a> - The
--   token that specifies the next page of results Amazon MQ should return.
--   To request the first page, leave nextToken empty.
--   
--   <a>$sel:maxResults:ListBrokers'</a>, <a>listBrokers_maxResults</a> -
--   The maximum number of brokers that Amazon MQ can return per page (20
--   by default). This value must be an integer from 5 to 100.
newListBrokers :: ListBrokers

-- | <i>See:</i> <a>newListBrokersResponse</a> smart constructor.
data ListBrokersResponse
ListBrokersResponse' :: Maybe Text -> Maybe [BrokerSummary] -> Int -> ListBrokersResponse

-- | Create a value of <a>ListBrokersResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListBrokers'</a>,
--   <a>listBrokersResponse_nextToken</a> - The token that specifies the
--   next page of results Amazon MQ should return. To request the first
--   page, leave nextToken empty.
--   
--   <a>$sel:brokerSummaries:ListBrokersResponse'</a>,
--   <a>listBrokersResponse_brokerSummaries</a> - A list of information
--   about all brokers.
--   
--   <a>$sel:httpStatus:ListBrokersResponse'</a>,
--   <a>listBrokersResponse_httpStatus</a> - The response's http status
--   code.
newListBrokersResponse :: Int -> ListBrokersResponse

-- | Creates a new ActiveMQ user.
--   
--   <i>See:</i> <a>newCreateUser</a> smart constructor.
data CreateUser
CreateUser' :: Maybe [Text] -> Maybe Bool -> Text -> Text -> Text -> CreateUser

-- | Create a value of <a>CreateUser</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:groups:CreateUser'</a>, <a>createUser_groups</a> - The list of
--   groups (20 maximum) to which the ActiveMQ user belongs. This value can
--   contain only alphanumeric characters, dashes, periods, underscores,
--   and tildes (- . _ ~). This value must be 2-100 characters long.
--   
--   <a>$sel:consoleAccess:CreateUser'</a>, <a>createUser_consoleAccess</a>
--   - Enables access to the ActiveMQ Web Console for the ActiveMQ user.
--   
--   <a>$sel:username:CreateUser'</a>, <a>createUser_username</a> - The
--   username of the ActiveMQ user. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 2-100 characters long.
--   
--   <a>$sel:brokerId:CreateUser'</a>, <a>createUser_brokerId</a> - The
--   unique ID that Amazon MQ generates for the broker.
--   
--   <a>$sel:password:CreateUser'</a>, <a>createUser_password</a> -
--   Required. The password of the user. This value must be at least 12
--   characters long, must contain at least 4 unique characters, and must
--   not contain commas, colons, or equal signs (,:=).
newCreateUser :: Text -> Text -> Text -> CreateUser

-- | <i>See:</i> <a>newCreateUserResponse</a> smart constructor.
data CreateUserResponse
CreateUserResponse' :: Int -> CreateUserResponse

-- | Create a value of <a>CreateUserResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:CreateUserResponse'</a>,
--   <a>createUserResponse_httpStatus</a> - The response's http status
--   code.
newCreateUserResponse :: Int -> CreateUserResponse

-- | <i>See:</i> <a>newDescribeConfiguration</a> smart constructor.
data DescribeConfiguration
DescribeConfiguration' :: Text -> DescribeConfiguration

-- | Create a value of <a>DescribeConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:configurationId:DescribeConfiguration'</a>,
--   <a>describeConfiguration_configurationId</a> - The unique ID that
--   Amazon MQ generates for the configuration.
newDescribeConfiguration :: Text -> DescribeConfiguration

-- | <i>See:</i> <a>newDescribeConfigurationResponse</a> smart constructor.
data DescribeConfigurationResponse
DescribeConfigurationResponse' :: Maybe Text -> Maybe Text -> Maybe ConfigurationRevision -> Maybe POSIX -> Maybe AuthenticationStrategy -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe EngineType -> Maybe (HashMap Text Text) -> Int -> DescribeConfigurationResponse

-- | Create a value of <a>DescribeConfigurationResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:engineVersion:DescribeConfigurationResponse'</a>,
--   <a>describeConfigurationResponse_engineVersion</a> - Required. The
--   broker engine's version. For a list of supported engine versions, see,
--   <a>Supported engines</a>.
--   
--   <a>$sel:arn:DescribeConfigurationResponse'</a>,
--   <a>describeConfigurationResponse_arn</a> - Required. The ARN of the
--   configuration.
--   
--   <a>$sel:latestRevision:DescribeConfigurationResponse'</a>,
--   <a>describeConfigurationResponse_latestRevision</a> - Required. The
--   latest revision of the configuration.
--   
--   <a>$sel:created:DescribeConfigurationResponse'</a>,
--   <a>describeConfigurationResponse_created</a> - Required. The date and
--   time of the configuration revision.
--   
--   <a>$sel:authenticationStrategy:DescribeConfigurationResponse'</a>,
--   <a>describeConfigurationResponse_authenticationStrategy</a> -
--   Optional. The authentication strategy associated with the
--   configuration. The default is SIMPLE.
--   
--   <a>$sel:name:DescribeConfigurationResponse'</a>,
--   <a>describeConfigurationResponse_name</a> - Required. The name of the
--   configuration. This value can contain only alphanumeric characters,
--   dashes, periods, underscores, and tildes (- . _ ~). This value must be
--   1-150 characters long.
--   
--   <a>$sel:id:DescribeConfigurationResponse'</a>,
--   <a>describeConfigurationResponse_id</a> - Required. The unique ID that
--   Amazon MQ generates for the configuration.
--   
--   <a>$sel:description:DescribeConfigurationResponse'</a>,
--   <a>describeConfigurationResponse_description</a> - Required. The
--   description of the configuration.
--   
--   <a>$sel:engineType:DescribeConfigurationResponse'</a>,
--   <a>describeConfigurationResponse_engineType</a> - Required. The type
--   of broker engine. Currently, Amazon MQ supports ACTIVEMQ and RABBITMQ.
--   
--   <a>$sel:tags:DescribeConfigurationResponse'</a>,
--   <a>describeConfigurationResponse_tags</a> - The list of all tags
--   associated with this configuration.
--   
--   <a>$sel:httpStatus:DescribeConfigurationResponse'</a>,
--   <a>describeConfigurationResponse_httpStatus</a> - The response's http
--   status code.
newDescribeConfigurationResponse :: Int -> DescribeConfigurationResponse

-- | Updates the information for an ActiveMQ user.
--   
--   <i>See:</i> <a>newUpdateUser</a> smart constructor.
data UpdateUser
UpdateUser' :: Maybe [Text] -> Maybe Bool -> Maybe Text -> Text -> Text -> UpdateUser

-- | Create a value of <a>UpdateUser</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:groups:UpdateUser'</a>, <a>updateUser_groups</a> - The list of
--   groups (20 maximum) to which the ActiveMQ user belongs. This value can
--   contain only alphanumeric characters, dashes, periods, underscores,
--   and tildes (- . _ ~). This value must be 2-100 characters long.
--   
--   <a>$sel:consoleAccess:UpdateUser'</a>, <a>updateUser_consoleAccess</a>
--   - Enables access to the the ActiveMQ Web Console for the ActiveMQ
--   user.
--   
--   <a>$sel:password:UpdateUser'</a>, <a>updateUser_password</a> - The
--   password of the user. This value must be at least 12 characters long,
--   must contain at least 4 unique characters, and must not contain
--   commas, colons, or equal signs (,:=).
--   
--   <a>$sel:username:UpdateUser'</a>, <a>updateUser_username</a> - The
--   username of the ActiveMQ user. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 2-100 characters long.
--   
--   <a>$sel:brokerId:UpdateUser'</a>, <a>updateUser_brokerId</a> - The
--   unique ID that Amazon MQ generates for the broker.
newUpdateUser :: Text -> Text -> UpdateUser

-- | <i>See:</i> <a>newUpdateUserResponse</a> smart constructor.
data UpdateUserResponse
UpdateUserResponse' :: Int -> UpdateUserResponse

-- | Create a value of <a>UpdateUserResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UpdateUserResponse'</a>,
--   <a>updateUserResponse_httpStatus</a> - The response's http status
--   code.
newUpdateUserResponse :: Int -> UpdateUserResponse

-- | <i>See:</i> <a>newDeleteUser</a> smart constructor.
data DeleteUser
DeleteUser' :: Text -> Text -> DeleteUser

-- | Create a value of <a>DeleteUser</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:username:DeleteUser'</a>, <a>deleteUser_username</a> - The
--   username of the ActiveMQ user. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 2-100 characters long.
--   
--   <a>$sel:brokerId:DeleteUser'</a>, <a>deleteUser_brokerId</a> - The
--   unique ID that Amazon MQ generates for the broker.
newDeleteUser :: Text -> Text -> DeleteUser

-- | <i>See:</i> <a>newDeleteUserResponse</a> smart constructor.
data DeleteUserResponse
DeleteUserResponse' :: Int -> DeleteUserResponse

-- | Create a value of <a>DeleteUserResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteUserResponse'</a>,
--   <a>deleteUserResponse_httpStatus</a> - The response's http status
--   code.
newDeleteUserResponse :: Int -> DeleteUserResponse

-- | <i>See:</i> <a>newListTags</a> smart constructor.
data ListTags
ListTags' :: Text -> ListTags

-- | Create a value of <a>ListTags</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:ListTags'</a>, <a>listTags_resourceArn</a> - The
--   Amazon Resource Name (ARN) of the resource tag.
newListTags :: Text -> ListTags

-- | <i>See:</i> <a>newListTagsResponse</a> smart constructor.
data ListTagsResponse
ListTagsResponse' :: Maybe (HashMap Text Text) -> Int -> ListTagsResponse

-- | Create a value of <a>ListTagsResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tags:ListTagsResponse'</a>, <a>listTagsResponse_tags</a> - The
--   key-value pair for the resource tag.
--   
--   <a>$sel:httpStatus:ListTagsResponse'</a>,
--   <a>listTagsResponse_httpStatus</a> - The response's http status code.
newListTagsResponse :: Int -> ListTagsResponse

-- | <i>See:</i> <a>newDescribeBrokerEngineTypes</a> smart constructor.
data DescribeBrokerEngineTypes
DescribeBrokerEngineTypes' :: Maybe Text -> Maybe Text -> Maybe Natural -> DescribeBrokerEngineTypes

-- | Create a value of <a>DescribeBrokerEngineTypes</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:DescribeBrokerEngineTypes'</a>,
--   <a>describeBrokerEngineTypes_nextToken</a> - The token that specifies
--   the next page of results Amazon MQ should return. To request the first
--   page, leave nextToken empty.
--   
--   <a>$sel:engineType:DescribeBrokerEngineTypes'</a>,
--   <a>describeBrokerEngineTypes_engineType</a> - Filter response by
--   engine type.
--   
--   <a>$sel:maxResults:DescribeBrokerEngineTypes'</a>,
--   <a>describeBrokerEngineTypes_maxResults</a> - The maximum number of
--   brokers that Amazon MQ can return per page (20 by default). This value
--   must be an integer from 5 to 100.
newDescribeBrokerEngineTypes :: DescribeBrokerEngineTypes

-- | <i>See:</i> <a>newDescribeBrokerEngineTypesResponse</a> smart
--   constructor.
data DescribeBrokerEngineTypesResponse
DescribeBrokerEngineTypesResponse' :: Maybe [BrokerEngineType] -> Maybe Text -> Maybe Natural -> Int -> DescribeBrokerEngineTypesResponse

-- | Create a value of <a>DescribeBrokerEngineTypesResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:brokerEngineTypes:DescribeBrokerEngineTypesResponse'</a>,
--   <a>describeBrokerEngineTypesResponse_brokerEngineTypes</a> - List of
--   available engine types and versions.
--   
--   <a>$sel:nextToken:DescribeBrokerEngineTypes'</a>,
--   <a>describeBrokerEngineTypesResponse_nextToken</a> - The token that
--   specifies the next page of results Amazon MQ should return. To request
--   the first page, leave nextToken empty.
--   
--   <a>$sel:maxResults:DescribeBrokerEngineTypes'</a>,
--   <a>describeBrokerEngineTypesResponse_maxResults</a> - Required. The
--   maximum number of engine types that can be returned per page (20 by
--   default). This value must be an integer from 5 to 100.
--   
--   <a>$sel:httpStatus:DescribeBrokerEngineTypesResponse'</a>,
--   <a>describeBrokerEngineTypesResponse_httpStatus</a> - The response's
--   http status code.
newDescribeBrokerEngineTypesResponse :: Int -> DescribeBrokerEngineTypesResponse

-- | <i>See:</i> <a>newDescribeConfigurationRevision</a> smart constructor.
data DescribeConfigurationRevision
DescribeConfigurationRevision' :: Text -> Text -> DescribeConfigurationRevision

-- | Create a value of <a>DescribeConfigurationRevision</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:configurationRevision:DescribeConfigurationRevision'</a>,
--   <a>describeConfigurationRevision_configurationRevision</a> - The
--   revision of the configuration.
--   
--   <a>$sel:configurationId:DescribeConfigurationRevision'</a>,
--   <a>describeConfigurationRevision_configurationId</a> - The unique ID
--   that Amazon MQ generates for the configuration.
newDescribeConfigurationRevision :: Text -> Text -> DescribeConfigurationRevision

-- | <i>See:</i> <a>newDescribeConfigurationRevisionResponse</a> smart
--   constructor.
data DescribeConfigurationRevisionResponse
DescribeConfigurationRevisionResponse' :: Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe Text -> Int -> DescribeConfigurationRevisionResponse

-- | Create a value of <a>DescribeConfigurationRevisionResponse</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:configurationId:DescribeConfigurationRevision'</a>,
--   <a>describeConfigurationRevisionResponse_configurationId</a> -
--   Required. The unique ID that Amazon MQ generates for the
--   configuration.
--   
--   <a>$sel:data':DescribeConfigurationRevisionResponse'</a>,
--   <a>describeConfigurationRevisionResponse_data</a> - Required. The
--   base64-encoded XML configuration.
--   
--   <a>$sel:created:DescribeConfigurationRevisionResponse'</a>,
--   <a>describeConfigurationRevisionResponse_created</a> - Required. The
--   date and time of the configuration.
--   
--   <a>$sel:description:DescribeConfigurationRevisionResponse'</a>,
--   <a>describeConfigurationRevisionResponse_description</a> - The
--   description of the configuration.
--   
--   <a>$sel:httpStatus:DescribeConfigurationRevisionResponse'</a>,
--   <a>describeConfigurationRevisionResponse_httpStatus</a> - The
--   response's http status code.
newDescribeConfigurationRevisionResponse :: Int -> DescribeConfigurationRevisionResponse

-- | <i>See:</i> <a>newDescribeBroker</a> smart constructor.
data DescribeBroker
DescribeBroker' :: Text -> DescribeBroker

-- | Create a value of <a>DescribeBroker</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:brokerId:DescribeBroker'</a>, <a>describeBroker_brokerId</a> -
--   The unique ID that Amazon MQ generates for the broker.
newDescribeBroker :: Text -> DescribeBroker

-- | <i>See:</i> <a>newDescribeBrokerResponse</a> smart constructor.
data DescribeBrokerResponse
DescribeBrokerResponse' :: Maybe Text -> Maybe Text -> Maybe AuthenticationStrategy -> Maybe BrokerState -> Maybe Bool -> Maybe Bool -> Maybe [Text] -> Maybe [UserSummary] -> Maybe [Text] -> Maybe [Text] -> Maybe POSIX -> Maybe Configurations -> Maybe AuthenticationStrategy -> Maybe Text -> Maybe LdapServerMetadataOutput -> Maybe WeeklyStartTime -> Maybe LogsSummary -> Maybe EncryptionOptions -> Maybe DeploymentMode -> Maybe Text -> Maybe Text -> Maybe LdapServerMetadataOutput -> Maybe EngineType -> Maybe Text -> Maybe (HashMap Text Text) -> Maybe [BrokerInstance] -> Maybe Text -> Maybe BrokerStorageType -> Int -> DescribeBrokerResponse

-- | Create a value of <a>DescribeBrokerResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:brokerName:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_brokerName</a> - The broker's name. This
--   value must be unique in your AWS account, 1-50 characters long, must
--   contain only letters, numbers, dashes, and underscores, and must not
--   contain white spaces, brackets, wildcard characters, or special
--   characters.
--   
--   <a>$sel:engineVersion:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_engineVersion</a> - The broker engine's
--   version. For a list of supported engine versions, see <a>Supported
--   engines</a>.
--   
--   <a>$sel:pendingAuthenticationStrategy:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_pendingAuthenticationStrategy</a> - The
--   authentication strategy that will be applied when the broker is
--   rebooted. The default is SIMPLE.
--   
--   <a>$sel:brokerState:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_brokerState</a> - The broker's status.
--   
--   <a>$sel:publiclyAccessible:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_publiclyAccessible</a> - Enables connections
--   from applications outside of the VPC that hosts the broker's subnets.
--   
--   <a>$sel:autoMinorVersionUpgrade:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_autoMinorVersionUpgrade</a> - Enables
--   automatic upgrades to new minor versions for brokers, as new versions
--   are released and supported by Amazon MQ. Automatic upgrades occur
--   during the scheduled maintenance window of the broker or after a
--   manual broker reboot.
--   
--   <a>$sel:securityGroups:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_securityGroups</a> - The list of rules (1
--   minimum, 125 maximum) that authorize connections to brokers.
--   
--   <a>$sel:users:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_users</a> - The list of all broker usernames
--   for the specified broker.
--   
--   <a>$sel:pendingSecurityGroups:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_pendingSecurityGroups</a> - The list of
--   pending security groups to authorize connections to brokers.
--   
--   <a>$sel:subnetIds:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_subnetIds</a> - The list of groups that
--   define which subnets and IP ranges the broker can use from different
--   Availability Zones.
--   
--   <a>$sel:created:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_created</a> - The time when the broker was
--   created.
--   
--   <a>$sel:configurations:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_configurations</a> - The list of all
--   revisions for the specified configuration.
--   
--   <a>$sel:authenticationStrategy:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_authenticationStrategy</a> - The
--   authentication strategy used to secure the broker. The default is
--   SIMPLE.
--   
--   <a>$sel:pendingHostInstanceType:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_pendingHostInstanceType</a> - The broker's
--   host instance type to upgrade to. For a list of supported instance
--   types, see <a>Broker instance types</a>.
--   
--   <a>$sel:ldapServerMetadata:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_ldapServerMetadata</a> - The metadata of the
--   LDAP server used to authenticate and authorize connections to the
--   broker.
--   
--   <a>$sel:maintenanceWindowStartTime:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_maintenanceWindowStartTime</a> - The
--   parameters that determine the WeeklyStartTime.
--   
--   <a>$sel:logs:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_logs</a> - The list of information about
--   logs currently enabled and pending to be deployed for the specified
--   broker.
--   
--   <a>$sel:encryptionOptions:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_encryptionOptions</a> - Encryption options
--   for the broker. Does not apply to RabbitMQ brokers.
--   
--   <a>$sel:deploymentMode:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_deploymentMode</a> - The broker's deployment
--   mode.
--   
--   <a>$sel:pendingEngineVersion:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_pendingEngineVersion</a> - The broker engine
--   version to upgrade to. For a list of supported engine versions, see
--   <a>Supported engines</a>.
--   
--   <a>$sel:brokerId:DescribeBroker'</a>,
--   <a>describeBrokerResponse_brokerId</a> - The unique ID that Amazon MQ
--   generates for the broker.
--   
--   <a>$sel:pendingLdapServerMetadata:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_pendingLdapServerMetadata</a> - The metadata
--   of the LDAP server that will be used to authenticate and authorize
--   connections to the broker after it is rebooted.
--   
--   <a>$sel:engineType:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_engineType</a> - The type of broker engine.
--   Currently, Amazon MQ supports ACTIVEMQ and RABBITMQ.
--   
--   <a>$sel:brokerArn:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_brokerArn</a> - The broker's Amazon Resource
--   Name (ARN).
--   
--   <a>$sel:tags:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_tags</a> - The list of all tags associated
--   with this broker.
--   
--   <a>$sel:brokerInstances:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_brokerInstances</a> - A list of information
--   about allocated brokers.
--   
--   <a>$sel:hostInstanceType:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_hostInstanceType</a> - The broker's instance
--   type.
--   
--   <a>$sel:storageType:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_storageType</a> - The broker's storage type.
--   
--   <a>$sel:httpStatus:DescribeBrokerResponse'</a>,
--   <a>describeBrokerResponse_httpStatus</a> - The response's http status
--   code.
newDescribeBrokerResponse :: Int -> DescribeBrokerResponse

-- | Updates the specified configuration.
--   
--   <i>See:</i> <a>newUpdateConfiguration</a> smart constructor.
data UpdateConfiguration
UpdateConfiguration' :: Maybe Text -> Text -> Text -> UpdateConfiguration

-- | Create a value of <a>UpdateConfiguration</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:description:UpdateConfiguration'</a>,
--   <a>updateConfiguration_description</a> - The description of the
--   configuration.
--   
--   <a>$sel:configurationId:UpdateConfiguration'</a>,
--   <a>updateConfiguration_configurationId</a> - The unique ID that Amazon
--   MQ generates for the configuration.
--   
--   <a>$sel:data':UpdateConfiguration'</a>,
--   <a>updateConfiguration_data</a> - Required. The base64-encoded XML
--   configuration.
newUpdateConfiguration :: Text -> Text -> UpdateConfiguration

-- | <i>See:</i> <a>newUpdateConfigurationResponse</a> smart constructor.
data UpdateConfigurationResponse
UpdateConfigurationResponse' :: Maybe Text -> Maybe ConfigurationRevision -> Maybe POSIX -> Maybe [SanitizationWarning] -> Maybe Text -> Maybe Text -> Int -> UpdateConfigurationResponse

-- | Create a value of <a>UpdateConfigurationResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:arn:UpdateConfigurationResponse'</a>,
--   <a>updateConfigurationResponse_arn</a> - Required. The Amazon Resource
--   Name (ARN) of the configuration.
--   
--   <a>$sel:latestRevision:UpdateConfigurationResponse'</a>,
--   <a>updateConfigurationResponse_latestRevision</a> - The latest
--   revision of the configuration.
--   
--   <a>$sel:created:UpdateConfigurationResponse'</a>,
--   <a>updateConfigurationResponse_created</a> - Required. The date and
--   time of the configuration.
--   
--   <a>$sel:warnings:UpdateConfigurationResponse'</a>,
--   <a>updateConfigurationResponse_warnings</a> - The list of the first 20
--   warnings about the configuration XML elements or attributes that were
--   sanitized.
--   
--   <a>$sel:name:UpdateConfigurationResponse'</a>,
--   <a>updateConfigurationResponse_name</a> - Required. The name of the
--   configuration. This value can contain only alphanumeric characters,
--   dashes, periods, underscores, and tildes (- . _ ~). This value must be
--   1-150 characters long.
--   
--   <a>$sel:id:UpdateConfigurationResponse'</a>,
--   <a>updateConfigurationResponse_id</a> - Required. The unique ID that
--   Amazon MQ generates for the configuration.
--   
--   <a>$sel:httpStatus:UpdateConfigurationResponse'</a>,
--   <a>updateConfigurationResponse_httpStatus</a> - The response's http
--   status code.
newUpdateConfigurationResponse :: Int -> UpdateConfigurationResponse

-- | Optional. The authentication strategy used to secure the broker. The
--   default is SIMPLE.
newtype AuthenticationStrategy
AuthenticationStrategy' :: Text -> AuthenticationStrategy
[fromAuthenticationStrategy] :: AuthenticationStrategy -> Text
pattern AuthenticationStrategy_LDAP :: AuthenticationStrategy
pattern AuthenticationStrategy_SIMPLE :: AuthenticationStrategy

-- | The broker's status.
newtype BrokerState
BrokerState' :: Text -> BrokerState
[fromBrokerState] :: BrokerState -> Text
pattern BrokerState_CREATION_FAILED :: BrokerState
pattern BrokerState_CREATION_IN_PROGRESS :: BrokerState
pattern BrokerState_DELETION_IN_PROGRESS :: BrokerState
pattern BrokerState_REBOOT_IN_PROGRESS :: BrokerState
pattern BrokerState_RUNNING :: BrokerState

-- | The broker's storage type.
--   
--   EFS is not supported for RabbitMQ engine type.
newtype BrokerStorageType
BrokerStorageType' :: Text -> BrokerStorageType
[fromBrokerStorageType] :: BrokerStorageType -> Text
pattern BrokerStorageType_EBS :: BrokerStorageType
pattern BrokerStorageType_EFS :: BrokerStorageType

-- | The type of change pending for the ActiveMQ user.
newtype ChangeType
ChangeType' :: Text -> ChangeType
[fromChangeType] :: ChangeType -> Text
pattern ChangeType_CREATE :: ChangeType
pattern ChangeType_DELETE :: ChangeType
pattern ChangeType_UPDATE :: ChangeType
newtype DayOfWeek
DayOfWeek' :: Text -> DayOfWeek
[fromDayOfWeek] :: DayOfWeek -> Text
pattern DayOfWeek_FRIDAY :: DayOfWeek
pattern DayOfWeek_MONDAY :: DayOfWeek
pattern DayOfWeek_SATURDAY :: DayOfWeek
pattern DayOfWeek_SUNDAY :: DayOfWeek
pattern DayOfWeek_THURSDAY :: DayOfWeek
pattern DayOfWeek_TUESDAY :: DayOfWeek
pattern DayOfWeek_WEDNESDAY :: DayOfWeek

-- | The broker's deployment mode.
newtype DeploymentMode
DeploymentMode' :: Text -> DeploymentMode
[fromDeploymentMode] :: DeploymentMode -> Text
pattern DeploymentMode_ACTIVE_STANDBY_MULTI_AZ :: DeploymentMode
pattern DeploymentMode_CLUSTER_MULTI_AZ :: DeploymentMode
pattern DeploymentMode_SINGLE_INSTANCE :: DeploymentMode

-- | The type of broker engine. Amazon MQ supports ActiveMQ and RabbitMQ.
newtype EngineType
EngineType' :: Text -> EngineType
[fromEngineType] :: EngineType -> Text
pattern EngineType_ACTIVEMQ :: EngineType
pattern EngineType_RABBITMQ :: EngineType

-- | The reason for which the XML elements or attributes were sanitized.
newtype SanitizationWarningReason
SanitizationWarningReason' :: Text -> SanitizationWarningReason
[fromSanitizationWarningReason] :: SanitizationWarningReason -> Text
pattern SanitizationWarningReason_DISALLOWED_ATTRIBUTE_REMOVED :: SanitizationWarningReason
pattern SanitizationWarningReason_DISALLOWED_ELEMENT_REMOVED :: SanitizationWarningReason
pattern SanitizationWarningReason_INVALID_ATTRIBUTE_VALUE_REMOVED :: SanitizationWarningReason

-- | Name of the availability zone.
--   
--   <i>See:</i> <a>newAvailabilityZone</a> smart constructor.
data AvailabilityZone
AvailabilityZone' :: Maybe Text -> AvailabilityZone

-- | Create a value of <a>AvailabilityZone</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:name:AvailabilityZone'</a>, <a>availabilityZone_name</a> - Id
--   for the availability zone.
newAvailabilityZone :: AvailabilityZone

-- | Types of broker engines.
--   
--   <i>See:</i> <a>newBrokerEngineType</a> smart constructor.
data BrokerEngineType
BrokerEngineType' :: Maybe [EngineVersion] -> Maybe EngineType -> BrokerEngineType

-- | Create a value of <a>BrokerEngineType</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:engineVersions:BrokerEngineType'</a>,
--   <a>brokerEngineType_engineVersions</a> - The list of engine versions.
--   
--   <a>$sel:engineType:BrokerEngineType'</a>,
--   <a>brokerEngineType_engineType</a> - The broker's engine type.
newBrokerEngineType :: BrokerEngineType

-- | Returns information about all brokers.
--   
--   <i>See:</i> <a>newBrokerInstance</a> smart constructor.
data BrokerInstance
BrokerInstance' :: Maybe Text -> Maybe Text -> Maybe [Text] -> BrokerInstance

-- | Create a value of <a>BrokerInstance</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:ipAddress:BrokerInstance'</a>, <a>brokerInstance_ipAddress</a>
--   - The IP address of the Elastic Network Interface (ENI) attached to
--   the broker. Does not apply to RabbitMQ brokers.
--   
--   <a>$sel:consoleURL:BrokerInstance'</a>,
--   <a>brokerInstance_consoleURL</a> - The brokers web console URL.
--   
--   <a>$sel:endpoints:BrokerInstance'</a>, <a>brokerInstance_endpoints</a>
--   - The broker's wire-level protocol endpoints.
newBrokerInstance :: BrokerInstance

-- | Option for host instance type.
--   
--   <i>See:</i> <a>newBrokerInstanceOption</a> smart constructor.
data BrokerInstanceOption
BrokerInstanceOption' :: Maybe [Text] -> Maybe [AvailabilityZone] -> Maybe [DeploymentMode] -> Maybe EngineType -> Maybe Text -> Maybe BrokerStorageType -> BrokerInstanceOption

-- | Create a value of <a>BrokerInstanceOption</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:supportedEngineVersions:BrokerInstanceOption'</a>,
--   <a>brokerInstanceOption_supportedEngineVersions</a> - The list of
--   supported engine versions.
--   
--   <a>$sel:availabilityZones:BrokerInstanceOption'</a>,
--   <a>brokerInstanceOption_availabilityZones</a> - The list of available
--   az.
--   
--   <a>$sel:supportedDeploymentModes:BrokerInstanceOption'</a>,
--   <a>brokerInstanceOption_supportedDeploymentModes</a> - The list of
--   supported deployment modes.
--   
--   <a>$sel:engineType:BrokerInstanceOption'</a>,
--   <a>brokerInstanceOption_engineType</a> - The broker's engine type.
--   
--   <a>$sel:hostInstanceType:BrokerInstanceOption'</a>,
--   <a>brokerInstanceOption_hostInstanceType</a> - The broker's instance
--   type.
--   
--   <a>$sel:storageType:BrokerInstanceOption'</a>,
--   <a>brokerInstanceOption_storageType</a> - The broker's storage type.
newBrokerInstanceOption :: BrokerInstanceOption

-- | Returns information about all brokers.
--   
--   <i>See:</i> <a>newBrokerSummary</a> smart constructor.
data BrokerSummary
BrokerSummary' :: Maybe Text -> Maybe BrokerState -> Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe Text -> DeploymentMode -> EngineType -> BrokerSummary

-- | Create a value of <a>BrokerSummary</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:brokerName:BrokerSummary'</a>, <a>brokerSummary_brokerName</a>
--   - The broker's name. This value is unique in your AWS account, 1-50
--   characters long, and containing only letters, numbers, dashes, and
--   underscores, and must not contain white spaces, brackets, wildcard
--   characters, or special characters.
--   
--   <a>$sel:brokerState:BrokerSummary'</a>,
--   <a>brokerSummary_brokerState</a> - The broker's status.
--   
--   <a>$sel:created:BrokerSummary'</a>, <a>brokerSummary_created</a> - The
--   time when the broker was created.
--   
--   <a>$sel:brokerId:BrokerSummary'</a>, <a>brokerSummary_brokerId</a> -
--   The unique ID that Amazon MQ generates for the broker.
--   
--   <a>$sel:brokerArn:BrokerSummary'</a>, <a>brokerSummary_brokerArn</a> -
--   The broker's Amazon Resource Name (ARN).
--   
--   <a>$sel:hostInstanceType:BrokerSummary'</a>,
--   <a>brokerSummary_hostInstanceType</a> - The broker's instance type.
--   
--   <a>$sel:deploymentMode:BrokerSummary'</a>,
--   <a>brokerSummary_deploymentMode</a> - The broker's deployment mode.
--   
--   <a>$sel:engineType:BrokerSummary'</a>, <a>brokerSummary_engineType</a>
--   - The type of broker engine.
newBrokerSummary :: DeploymentMode -> EngineType -> BrokerSummary

-- | Returns information about all configurations.
--   
--   <i>See:</i> <a>newConfiguration</a> smart constructor.
data Configuration
Configuration' :: Maybe (HashMap Text Text) -> Text -> Text -> ConfigurationRevision -> AuthenticationStrategy -> EngineType -> Text -> Text -> Text -> POSIX -> Configuration

-- | Create a value of <a>Configuration</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tags:Configuration'</a>, <a>configuration_tags</a> - The list
--   of all tags associated with this configuration.
--   
--   <a>$sel:description:Configuration'</a>,
--   <a>configuration_description</a> - Required. The description of the
--   configuration.
--   
--   <a>$sel:engineVersion:Configuration'</a>,
--   <a>configuration_engineVersion</a> - Required. The broker engine's
--   version. For a list of supported engine versions, see, <a>Supported
--   engines</a>.
--   
--   <a>$sel:latestRevision:Configuration'</a>,
--   <a>configuration_latestRevision</a> - Required. The latest revision of
--   the configuration.
--   
--   <a>$sel:authenticationStrategy:Configuration'</a>,
--   <a>configuration_authenticationStrategy</a> - Optional. The
--   authentication strategy associated with the configuration. The default
--   is SIMPLE.
--   
--   <a>$sel:engineType:Configuration'</a>, <a>configuration_engineType</a>
--   - Required. The type of broker engine. Currently, Amazon MQ supports
--   ACTIVEMQ and RABBITMQ.
--   
--   <a>$sel:id:Configuration'</a>, <a>configuration_id</a> - Required. The
--   unique ID that Amazon MQ generates for the configuration.
--   
--   <a>$sel:arn:Configuration'</a>, <a>configuration_arn</a> - Required.
--   The ARN of the configuration.
--   
--   <a>$sel:name:Configuration'</a>, <a>configuration_name</a> - Required.
--   The name of the configuration. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 1-150 characters long.
--   
--   <a>$sel:created:Configuration'</a>, <a>configuration_created</a> -
--   Required. The date and time of the configuration revision.
newConfiguration :: Text -> Text -> ConfigurationRevision -> AuthenticationStrategy -> EngineType -> Text -> Text -> Text -> UTCTime -> Configuration

-- | A list of information about the configuration.
--   
--   Does not apply to RabbitMQ brokers.
--   
--   <i>See:</i> <a>newConfigurationId</a> smart constructor.
data ConfigurationId
ConfigurationId' :: Maybe Int -> Text -> ConfigurationId

-- | Create a value of <a>ConfigurationId</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:revision:ConfigurationId'</a>, <a>configurationId_revision</a>
--   - The revision number of the configuration.
--   
--   <a>$sel:id:ConfigurationId'</a>, <a>configurationId_id</a> - Required.
--   The unique ID that Amazon MQ generates for the configuration.
newConfigurationId :: Text -> ConfigurationId

-- | Returns information about the specified configuration revision.
--   
--   <i>See:</i> <a>newConfigurationRevision</a> smart constructor.
data ConfigurationRevision
ConfigurationRevision' :: Maybe Text -> Int -> POSIX -> ConfigurationRevision

-- | Create a value of <a>ConfigurationRevision</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:description:ConfigurationRevision'</a>,
--   <a>configurationRevision_description</a> - The description of the
--   configuration revision.
--   
--   <a>$sel:revision:ConfigurationRevision'</a>,
--   <a>configurationRevision_revision</a> - Required. The revision number
--   of the configuration.
--   
--   <a>$sel:created:ConfigurationRevision'</a>,
--   <a>configurationRevision_created</a> - Required. The date and time of
--   the configuration revision.
newConfigurationRevision :: Int -> UTCTime -> ConfigurationRevision

-- | Broker configuration information
--   
--   <i>See:</i> <a>newConfigurations</a> smart constructor.
data Configurations
Configurations' :: Maybe ConfigurationId -> Maybe [ConfigurationId] -> Maybe ConfigurationId -> Configurations

-- | Create a value of <a>Configurations</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:pending:Configurations'</a>, <a>configurations_pending</a> -
--   The broker's pending configuration.
--   
--   <a>$sel:history:Configurations'</a>, <a>configurations_history</a> -
--   The history of configurations applied to the broker.
--   
--   <a>$sel:current:Configurations'</a>, <a>configurations_current</a> -
--   The broker's current configuration.
newConfigurations :: Configurations

-- | Does not apply to RabbitMQ brokers.
--   
--   Encryption options for the broker.
--   
--   <i>See:</i> <a>newEncryptionOptions</a> smart constructor.
data EncryptionOptions
EncryptionOptions' :: Maybe Text -> Bool -> EncryptionOptions

-- | Create a value of <a>EncryptionOptions</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:kmsKeyId:EncryptionOptions'</a>,
--   <a>encryptionOptions_kmsKeyId</a> - The customer master key (CMK) to
--   use for the AWS Key Management Service (KMS). This key is used to
--   encrypt your data at rest. If not provided, Amazon MQ will use a
--   default CMK to encrypt your data.
--   
--   <a>$sel:useAwsOwnedKey:EncryptionOptions'</a>,
--   <a>encryptionOptions_useAwsOwnedKey</a> - Enables the use of an AWS
--   owned CMK using AWS Key Management Service (KMS). Set to true by
--   default, if no value is provided, for example, for RabbitMQ brokers.
newEncryptionOptions :: Bool -> EncryptionOptions

-- | Id of the engine version.
--   
--   <i>See:</i> <a>newEngineVersion</a> smart constructor.
data EngineVersion
EngineVersion' :: Maybe Text -> EngineVersion

-- | Create a value of <a>EngineVersion</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:name:EngineVersion'</a>, <a>engineVersion_name</a> - Id for
--   the version.
newEngineVersion :: EngineVersion

-- | Optional. The metadata of the LDAP server used to authenticate and
--   authorize connections to the broker.
--   
--   Does not apply to RabbitMQ brokers.
--   
--   <i>See:</i> <a>newLdapServerMetadataInput</a> smart constructor.
data LdapServerMetadataInput
LdapServerMetadataInput' :: Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe Text -> [Text] -> Text -> Text -> Text -> Text -> Text -> Text -> LdapServerMetadataInput

-- | Create a value of <a>LdapServerMetadataInput</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:userRoleName:LdapServerMetadataInput'</a>,
--   <a>ldapServerMetadataInput_userRoleName</a> - Specifies the name of
--   the LDAP attribute for the user group membership.
--   
--   <a>$sel:userSearchSubtree:LdapServerMetadataInput'</a>,
--   <a>ldapServerMetadataInput_userSearchSubtree</a> - The directory
--   search scope for the user. If set to true, scope is to search the
--   entire subtree.
--   
--   <a>$sel:roleSearchSubtree:LdapServerMetadataInput'</a>,
--   <a>ldapServerMetadataInput_roleSearchSubtree</a> - The directory
--   search scope for the role. If set to true, scope is to search the
--   entire subtree.
--   
--   <a>$sel:roleName:LdapServerMetadataInput'</a>,
--   <a>ldapServerMetadataInput_roleName</a> - Specifies the LDAP attribute
--   that identifies the group name attribute in the object returned from
--   the group membership query.
--   
--   <a>$sel:hosts:LdapServerMetadataInput'</a>,
--   <a>ldapServerMetadataInput_hosts</a> - Specifies the location of the
--   LDAP server such as AWS Directory Service for Microsoft Active
--   Directory . Optional failover server.
--   
--   <a>$sel:userSearchMatching:LdapServerMetadataInput'</a>,
--   <a>ldapServerMetadataInput_userSearchMatching</a> - The LDAP search
--   filter used to find users within the userBase. The client's username
--   is substituted into the {0} placeholder in the search filter. For
--   example, if this option is set to (uid={0}) and the received username
--   is janedoe, the search filter becomes (uid=janedoe) after string
--   substitution. It will result in matching an entry like uid=janedoe,
--   ou=Users,ou=corp, dc=corp, dc=example, dc=com.
--   
--   <a>$sel:userBase:LdapServerMetadataInput'</a>,
--   <a>ldapServerMetadataInput_userBase</a> - Select a particular subtree
--   of the directory information tree (DIT) to search for user entries.
--   The subtree is specified by a DN, which specifies the base node of the
--   subtree. For example, by setting this option to ou=Users,ou=corp,
--   dc=corp, dc=example, dc=com, the search for user entries is restricted
--   to the subtree beneath ou=Users, ou=corp, dc=corp, dc=example, dc=com.
--   
--   <a>$sel:roleSearchMatching:LdapServerMetadataInput'</a>,
--   <a>ldapServerMetadataInput_roleSearchMatching</a> - The LDAP search
--   filter used to find roles within the roleBase. The distinguished name
--   of the user matched by userSearchMatching is substituted into the {0}
--   placeholder in the search filter. The client's username is substituted
--   into the {1} placeholder. For example, if you set this option to
--   (member=uid={1})for the user janedoe, the search filter becomes
--   (member=uid=janedoe) after string substitution. It matches all role
--   entries that have a member attribute equal to uid=janedoe under the
--   subtree selected by the roleBase.
--   
--   <a>$sel:serviceAccountUsername:LdapServerMetadataInput'</a>,
--   <a>ldapServerMetadataInput_serviceAccountUsername</a> - Service
--   account username. A service account is an account in your LDAP server
--   that has access to initiate a connection. For example,
--   cn=admin,dc=corp, dc=example, dc=com.
--   
--   <a>$sel:roleBase:LdapServerMetadataInput'</a>,
--   <a>ldapServerMetadataInput_roleBase</a> - The distinguished name of
--   the node in the directory information tree (DIT) to search for roles
--   or groups. For example, ou=group, ou=corp, dc=corp, dc=example,
--   dc=com.
--   
--   <a>$sel:serviceAccountPassword:LdapServerMetadataInput'</a>,
--   <a>ldapServerMetadataInput_serviceAccountPassword</a> - Service
--   account password. A service account is an account in your LDAP server
--   that has access to initiate a connection. For example,
--   cn=admin,dc=corp, dc=example, dc=com.
newLdapServerMetadataInput :: Text -> Text -> Text -> Text -> Text -> Text -> LdapServerMetadataInput

-- | Optional. The metadata of the LDAP server used to authenticate and
--   authorize connections to the broker.
--   
--   <i>See:</i> <a>newLdapServerMetadataOutput</a> smart constructor.
data LdapServerMetadataOutput
LdapServerMetadataOutput' :: Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe Text -> [Text] -> Text -> Text -> Text -> Text -> Text -> LdapServerMetadataOutput

-- | Create a value of <a>LdapServerMetadataOutput</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:userRoleName:LdapServerMetadataOutput'</a>,
--   <a>ldapServerMetadataOutput_userRoleName</a> - Specifies the name of
--   the LDAP attribute for the user group membership.
--   
--   <a>$sel:userSearchSubtree:LdapServerMetadataOutput'</a>,
--   <a>ldapServerMetadataOutput_userSearchSubtree</a> - The directory
--   search scope for the user. If set to true, scope is to search the
--   entire subtree.
--   
--   <a>$sel:roleSearchSubtree:LdapServerMetadataOutput'</a>,
--   <a>ldapServerMetadataOutput_roleSearchSubtree</a> - The directory
--   search scope for the role. If set to true, scope is to search the
--   entire subtree.
--   
--   <a>$sel:roleName:LdapServerMetadataOutput'</a>,
--   <a>ldapServerMetadataOutput_roleName</a> - Specifies the LDAP
--   attribute that identifies the group name attribute in the object
--   returned from the group membership query.
--   
--   <a>$sel:hosts:LdapServerMetadataOutput'</a>,
--   <a>ldapServerMetadataOutput_hosts</a> - Specifies the location of the
--   LDAP server such as AWS Directory Service for Microsoft Active
--   Directory . Optional failover server.
--   
--   <a>$sel:userSearchMatching:LdapServerMetadataOutput'</a>,
--   <a>ldapServerMetadataOutput_userSearchMatching</a> - The LDAP search
--   filter used to find users within the userBase. The client's username
--   is substituted into the {0} placeholder in the search filter. For
--   example, if this option is set to (uid={0}) and the received username
--   is janedoe, the search filter becomes (uid=janedoe) after string
--   substitution. It will result in matching an entry like uid=janedoe,
--   ou=Users,ou=corp, dc=corp, dc=example, dc=com.
--   
--   <a>$sel:userBase:LdapServerMetadataOutput'</a>,
--   <a>ldapServerMetadataOutput_userBase</a> - Select a particular subtree
--   of the directory information tree (DIT) to search for user entries.
--   The subtree is specified by a DN, which specifies the base node of the
--   subtree. For example, by setting this option to ou=Users,ou=corp,
--   dc=corp, dc=example, dc=com, the search for user entries is restricted
--   to the subtree beneath ou=Users, ou=corp, dc=corp, dc=example, dc=com.
--   
--   <a>$sel:roleSearchMatching:LdapServerMetadataOutput'</a>,
--   <a>ldapServerMetadataOutput_roleSearchMatching</a> - The LDAP search
--   filter used to find roles within the roleBase. The distinguished name
--   of the user matched by userSearchMatching is substituted into the {0}
--   placeholder in the search filter. The client's username is substituted
--   into the {1} placeholder. For example, if you set this option to
--   (member=uid={1})for the user janedoe, the search filter becomes
--   (member=uid=janedoe) after string substitution. It matches all role
--   entries that have a member attribute equal to uid=janedoe under the
--   subtree selected by the roleBase.
--   
--   <a>$sel:serviceAccountUsername:LdapServerMetadataOutput'</a>,
--   <a>ldapServerMetadataOutput_serviceAccountUsername</a> - Service
--   account username. A service account is an account in your LDAP server
--   that has access to initiate a connection. For example,
--   cn=admin,dc=corp, dc=example, dc=com.
--   
--   <a>$sel:roleBase:LdapServerMetadataOutput'</a>,
--   <a>ldapServerMetadataOutput_roleBase</a> - The distinguished name of
--   the node in the directory information tree (DIT) to search for roles
--   or groups. For example, ou=group, ou=corp, dc=corp, dc=example,
--   dc=com.
newLdapServerMetadataOutput :: Text -> Text -> Text -> Text -> Text -> LdapServerMetadataOutput

-- | The list of information about logs to be enabled for the specified
--   broker.
--   
--   <i>See:</i> <a>newLogs</a> smart constructor.
data Logs
Logs' :: Maybe Bool -> Maybe Bool -> Logs

-- | Create a value of <a>Logs</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:audit:Logs'</a>, <a>logs_audit</a> - Enables audit logging.
--   Every user management action made using JMX or the ActiveMQ Web
--   Console is logged. Does not apply to RabbitMQ brokers.
--   
--   <a>$sel:general:Logs'</a>, <a>logs_general</a> - Enables general
--   logging.
newLogs :: Logs

-- | The list of information about logs currently enabled and pending to be
--   deployed for the specified broker.
--   
--   <i>See:</i> <a>newLogsSummary</a> smart constructor.
data LogsSummary
LogsSummary' :: Maybe PendingLogs -> Maybe Bool -> Maybe Text -> Text -> Bool -> LogsSummary

-- | Create a value of <a>LogsSummary</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:pending:LogsSummary'</a>, <a>logsSummary_pending</a> - The
--   list of information about logs pending to be deployed for the
--   specified broker.
--   
--   <a>$sel:audit:LogsSummary'</a>, <a>logsSummary_audit</a> - Enables
--   audit logging. Every user management action made using JMX or the
--   ActiveMQ Web Console is logged.
--   
--   <a>$sel:auditLogGroup:LogsSummary'</a>,
--   <a>logsSummary_auditLogGroup</a> - The location of the CloudWatch Logs
--   log group where audit logs are sent.
--   
--   <a>$sel:generalLogGroup:LogsSummary'</a>,
--   <a>logsSummary_generalLogGroup</a> - The location of the CloudWatch
--   Logs log group where general logs are sent.
--   
--   <a>$sel:general:LogsSummary'</a>, <a>logsSummary_general</a> - Enables
--   general logging.
newLogsSummary :: Text -> Bool -> LogsSummary

-- | The list of information about logs to be enabled for the specified
--   broker.
--   
--   <i>See:</i> <a>newPendingLogs</a> smart constructor.
data PendingLogs
PendingLogs' :: Maybe Bool -> Maybe Bool -> PendingLogs

-- | Create a value of <a>PendingLogs</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:audit:PendingLogs'</a>, <a>pendingLogs_audit</a> - Enables
--   audit logging. Every user management action made using JMX or the
--   ActiveMQ Web Console is logged.
--   
--   <a>$sel:general:PendingLogs'</a>, <a>pendingLogs_general</a> - Enables
--   general logging.
newPendingLogs :: PendingLogs

-- | Returns information about the XML element or attribute that was
--   sanitized in the configuration.
--   
--   <i>See:</i> <a>newSanitizationWarning</a> smart constructor.
data SanitizationWarning
SanitizationWarning' :: Maybe Text -> Maybe Text -> SanitizationWarningReason -> SanitizationWarning

-- | Create a value of <a>SanitizationWarning</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:attributeName:SanitizationWarning'</a>,
--   <a>sanitizationWarning_attributeName</a> - The name of the XML
--   attribute that has been sanitized.
--   
--   <a>$sel:elementName:SanitizationWarning'</a>,
--   <a>sanitizationWarning_elementName</a> - The name of the XML element
--   that has been sanitized.
--   
--   <a>$sel:reason:SanitizationWarning'</a>,
--   <a>sanitizationWarning_reason</a> - Required. The reason for which the
--   XML elements or attributes were sanitized.
newSanitizationWarning :: SanitizationWarningReason -> SanitizationWarning

-- | A user associated with the broker. For RabbitMQ brokers, one and only
--   one administrative user is accepted and created when a broker is first
--   provisioned. All subsequent broker users are created by making
--   RabbitMQ API calls directly to brokers or via the RabbitMQ web
--   console.
--   
--   <i>See:</i> <a>newUser</a> smart constructor.
data User
User' :: Maybe [Text] -> Maybe Bool -> Text -> Text -> User

-- | Create a value of <a>User</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:groups:User'</a>, <a>user_groups</a> - The list of groups (20
--   maximum) to which the ActiveMQ user belongs. This value can contain
--   only alphanumeric characters, dashes, periods, underscores, and tildes
--   (- . _ ~). This value must be 2-100 characters long. Does not apply to
--   RabbitMQ brokers.
--   
--   <a>$sel:consoleAccess:User'</a>, <a>user_consoleAccess</a> - Enables
--   access to the ActiveMQ Web Console for the ActiveMQ user. Does not
--   apply to RabbitMQ brokers.
--   
--   <a>$sel:username:User'</a>, <a>user_username</a> - important&gt;
--   
--   Amazon MQ for ActiveMQ
--   
--   For ActiveMQ brokers, this value can contain only alphanumeric
--   characters, dashes, periods, underscores, and tildes (- . _ ~). This
--   value must be 2-100 characters long.
--   
--   /important&gt;
--   
--   Amazon MQ for RabbitMQ
--   
--   For RabbitMQ brokers, this value can contain only alphanumeric
--   characters, dashes, periods, underscores (- . _). This value must not
--   contain a tilde (~) character. Amazon MQ prohibts using guest as a
--   valid usename. This value must be 2-100 characters long.
--   
--   <a>$sel:password:User'</a>, <a>user_password</a> - Required. The
--   password of the user. This value must be at least 12 characters long,
--   must contain at least 4 unique characters, and must not contain
--   commas, colons, or equal signs (,:=).
newUser :: Text -> Text -> User

-- | Returns information about the status of the changes pending for the
--   ActiveMQ user.
--   
--   <i>See:</i> <a>newUserPendingChanges</a> smart constructor.
data UserPendingChanges
UserPendingChanges' :: Maybe [Text] -> Maybe Bool -> ChangeType -> UserPendingChanges

-- | Create a value of <a>UserPendingChanges</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:groups:UserPendingChanges'</a>,
--   <a>userPendingChanges_groups</a> - The list of groups (20 maximum) to
--   which the ActiveMQ user belongs. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 2-100 characters long.
--   
--   <a>$sel:consoleAccess:UserPendingChanges'</a>,
--   <a>userPendingChanges_consoleAccess</a> - Enables access to the the
--   ActiveMQ Web Console for the ActiveMQ user.
--   
--   <a>$sel:pendingChange:UserPendingChanges'</a>,
--   <a>userPendingChanges_pendingChange</a> - Required. The type of change
--   pending for the ActiveMQ user.
newUserPendingChanges :: ChangeType -> UserPendingChanges

-- | Returns a list of all broker users. Does not apply to RabbitMQ
--   brokers.
--   
--   <i>See:</i> <a>newUserSummary</a> smart constructor.
data UserSummary
UserSummary' :: Maybe ChangeType -> Text -> UserSummary

-- | Create a value of <a>UserSummary</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:pendingChange:UserSummary'</a>,
--   <a>userSummary_pendingChange</a> - The type of change pending for the
--   broker user.
--   
--   <a>$sel:username:UserSummary'</a>, <a>userSummary_username</a> -
--   Required. The username of the broker user. This value can contain only
--   alphanumeric characters, dashes, periods, underscores, and tildes (- .
--   _ ~). This value must be 2-100 characters long.
newUserSummary :: Text -> UserSummary

-- | The scheduled time period relative to UTC during which Amazon MQ
--   begins to apply pending updates or patches to the broker.
--   
--   <i>See:</i> <a>newWeeklyStartTime</a> smart constructor.
data WeeklyStartTime
WeeklyStartTime' :: Maybe Text -> Text -> DayOfWeek -> WeeklyStartTime

-- | Create a value of <a>WeeklyStartTime</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:timeZone:WeeklyStartTime'</a>, <a>weeklyStartTime_timeZone</a>
--   - The time zone, UTC by default, in either the Country/City format, or
--   the UTC offset format.
--   
--   <a>$sel:timeOfDay:WeeklyStartTime'</a>,
--   <a>weeklyStartTime_timeOfDay</a> - Required. The time, in 24-hour
--   format.
--   
--   <a>$sel:dayOfWeek:WeeklyStartTime'</a>,
--   <a>weeklyStartTime_dayOfWeek</a> - Required. The day of the week.
newWeeklyStartTime :: Text -> DayOfWeek -> WeeklyStartTime
