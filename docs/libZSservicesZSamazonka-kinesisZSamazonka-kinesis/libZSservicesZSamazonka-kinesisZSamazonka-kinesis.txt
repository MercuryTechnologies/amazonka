-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/

@package libZSservicesZSamazonka-kinesisZSamazonka-kinesis
@version 2.0


module Amazonka.Kinesis.Types.ConsumerStatus
newtype ConsumerStatus
ConsumerStatus' :: Text -> ConsumerStatus
[fromConsumerStatus] :: ConsumerStatus -> Text
pattern ConsumerStatus_ACTIVE :: ConsumerStatus
pattern ConsumerStatus_CREATING :: ConsumerStatus
pattern ConsumerStatus_DELETING :: ConsumerStatus
instance Amazonka.Data.XML.ToXML Amazonka.Kinesis.Types.ConsumerStatus.ConsumerStatus
instance Amazonka.Data.XML.FromXML Amazonka.Kinesis.Types.ConsumerStatus.ConsumerStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.Kinesis.Types.ConsumerStatus.ConsumerStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.Kinesis.Types.ConsumerStatus.ConsumerStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.Kinesis.Types.ConsumerStatus.ConsumerStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.Kinesis.Types.ConsumerStatus.ConsumerStatus
instance Amazonka.Data.Query.ToQuery Amazonka.Kinesis.Types.ConsumerStatus.ConsumerStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.Kinesis.Types.ConsumerStatus.ConsumerStatus
instance Amazonka.Data.Log.ToLog Amazonka.Kinesis.Types.ConsumerStatus.ConsumerStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.Kinesis.Types.ConsumerStatus.ConsumerStatus
instance Amazonka.Data.Text.ToText Amazonka.Kinesis.Types.ConsumerStatus.ConsumerStatus
instance Amazonka.Data.Text.FromText Amazonka.Kinesis.Types.ConsumerStatus.ConsumerStatus
instance Control.DeepSeq.NFData Amazonka.Kinesis.Types.ConsumerStatus.ConsumerStatus
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.Types.ConsumerStatus.ConsumerStatus
instance GHC.Generics.Generic Amazonka.Kinesis.Types.ConsumerStatus.ConsumerStatus
instance GHC.Classes.Ord Amazonka.Kinesis.Types.ConsumerStatus.ConsumerStatus
instance GHC.Classes.Eq Amazonka.Kinesis.Types.ConsumerStatus.ConsumerStatus
instance GHC.Read.Read Amazonka.Kinesis.Types.ConsumerStatus.ConsumerStatus
instance GHC.Show.Show Amazonka.Kinesis.Types.ConsumerStatus.ConsumerStatus


module Amazonka.Kinesis.Types.ConsumerDescription

-- | An object that represents the details of a registered consumer. This
--   type of object is returned by DescribeStreamConsumer.
--   
--   <i>See:</i> <a>newConsumerDescription</a> smart constructor.
data ConsumerDescription
ConsumerDescription' :: Text -> Text -> ConsumerStatus -> POSIX -> Text -> ConsumerDescription

-- | The name of the consumer is something you choose when you register the
--   consumer.
[$sel:consumerName:ConsumerDescription'] :: ConsumerDescription -> Text

-- | When you register a consumer, Kinesis Data Streams generates an ARN
--   for it. You need this ARN to be able to call SubscribeToShard.
--   
--   If you delete a consumer and then create a new one with the same name,
--   it won't have the same ARN. That's because consumer ARNs contain the
--   creation timestamp. This is important to keep in mind if you have IAM
--   policies that reference consumer ARNs.
[$sel:consumerARN:ConsumerDescription'] :: ConsumerDescription -> Text

-- | A consumer can't read data while in the <tt>CREATING</tt> or
--   <tt>DELETING</tt> states.
[$sel:consumerStatus:ConsumerDescription'] :: ConsumerDescription -> ConsumerStatus
[$sel:consumerCreationTimestamp:ConsumerDescription'] :: ConsumerDescription -> POSIX

-- | The ARN of the stream with which you registered the consumer.
[$sel:streamARN:ConsumerDescription'] :: ConsumerDescription -> Text

-- | Create a value of <a>ConsumerDescription</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:consumerName:ConsumerDescription'</a>,
--   <a>consumerDescription_consumerName</a> - The name of the consumer is
--   something you choose when you register the consumer.
--   
--   <a>$sel:consumerARN:ConsumerDescription'</a>,
--   <a>consumerDescription_consumerARN</a> - When you register a consumer,
--   Kinesis Data Streams generates an ARN for it. You need this ARN to be
--   able to call SubscribeToShard.
--   
--   If you delete a consumer and then create a new one with the same name,
--   it won't have the same ARN. That's because consumer ARNs contain the
--   creation timestamp. This is important to keep in mind if you have IAM
--   policies that reference consumer ARNs.
--   
--   <a>$sel:consumerStatus:ConsumerDescription'</a>,
--   <a>consumerDescription_consumerStatus</a> - A consumer can't read data
--   while in the <tt>CREATING</tt> or <tt>DELETING</tt> states.
--   
--   <a>$sel:consumerCreationTimestamp:ConsumerDescription'</a>,
--   <a>consumerDescription_consumerCreationTimestamp</a> -
--   
--   <a>$sel:streamARN:ConsumerDescription'</a>,
--   <a>consumerDescription_streamARN</a> - The ARN of the stream with
--   which you registered the consumer.
newConsumerDescription :: Text -> Text -> ConsumerStatus -> UTCTime -> Text -> ConsumerDescription

-- | The name of the consumer is something you choose when you register the
--   consumer.
consumerDescription_consumerName :: Lens' ConsumerDescription Text

-- | When you register a consumer, Kinesis Data Streams generates an ARN
--   for it. You need this ARN to be able to call SubscribeToShard.
--   
--   If you delete a consumer and then create a new one with the same name,
--   it won't have the same ARN. That's because consumer ARNs contain the
--   creation timestamp. This is important to keep in mind if you have IAM
--   policies that reference consumer ARNs.
consumerDescription_consumerARN :: Lens' ConsumerDescription Text

-- | A consumer can't read data while in the <tt>CREATING</tt> or
--   <tt>DELETING</tt> states.
consumerDescription_consumerStatus :: Lens' ConsumerDescription ConsumerStatus

consumerDescription_consumerCreationTimestamp :: Lens' ConsumerDescription UTCTime

-- | The ARN of the stream with which you registered the consumer.
consumerDescription_streamARN :: Lens' ConsumerDescription Text
instance GHC.Generics.Generic Amazonka.Kinesis.Types.ConsumerDescription.ConsumerDescription
instance GHC.Show.Show Amazonka.Kinesis.Types.ConsumerDescription.ConsumerDescription
instance GHC.Read.Read Amazonka.Kinesis.Types.ConsumerDescription.ConsumerDescription
instance GHC.Classes.Eq Amazonka.Kinesis.Types.ConsumerDescription.ConsumerDescription
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.Kinesis.Types.ConsumerDescription.ConsumerDescription
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.Types.ConsumerDescription.ConsumerDescription
instance Control.DeepSeq.NFData Amazonka.Kinesis.Types.ConsumerDescription.ConsumerDescription


module Amazonka.Kinesis.Types.Consumer

-- | An object that represents the details of the consumer you registered.
--   This type of object is returned by RegisterStreamConsumer.
--   
--   <i>See:</i> <a>newConsumer</a> smart constructor.
data Consumer
Consumer' :: Text -> Text -> ConsumerStatus -> POSIX -> Consumer

-- | The name of the consumer is something you choose when you register the
--   consumer.
[$sel:consumerName:Consumer'] :: Consumer -> Text

-- | When you register a consumer, Kinesis Data Streams generates an ARN
--   for it. You need this ARN to be able to call SubscribeToShard.
--   
--   If you delete a consumer and then create a new one with the same name,
--   it won't have the same ARN. That's because consumer ARNs contain the
--   creation timestamp. This is important to keep in mind if you have IAM
--   policies that reference consumer ARNs.
[$sel:consumerARN:Consumer'] :: Consumer -> Text

-- | A consumer can't read data while in the <tt>CREATING</tt> or
--   <tt>DELETING</tt> states.
[$sel:consumerStatus:Consumer'] :: Consumer -> ConsumerStatus
[$sel:consumerCreationTimestamp:Consumer'] :: Consumer -> POSIX

-- | Create a value of <a>Consumer</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:consumerName:Consumer'</a>, <a>consumer_consumerName</a> - The
--   name of the consumer is something you choose when you register the
--   consumer.
--   
--   <a>$sel:consumerARN:Consumer'</a>, <a>consumer_consumerARN</a> - When
--   you register a consumer, Kinesis Data Streams generates an ARN for it.
--   You need this ARN to be able to call SubscribeToShard.
--   
--   If you delete a consumer and then create a new one with the same name,
--   it won't have the same ARN. That's because consumer ARNs contain the
--   creation timestamp. This is important to keep in mind if you have IAM
--   policies that reference consumer ARNs.
--   
--   <a>$sel:consumerStatus:Consumer'</a>, <a>consumer_consumerStatus</a> -
--   A consumer can't read data while in the <tt>CREATING</tt> or
--   <tt>DELETING</tt> states.
--   
--   <a>$sel:consumerCreationTimestamp:Consumer'</a>,
--   <a>consumer_consumerCreationTimestamp</a> -
newConsumer :: Text -> Text -> ConsumerStatus -> UTCTime -> Consumer

-- | The name of the consumer is something you choose when you register the
--   consumer.
consumer_consumerName :: Lens' Consumer Text

-- | When you register a consumer, Kinesis Data Streams generates an ARN
--   for it. You need this ARN to be able to call SubscribeToShard.
--   
--   If you delete a consumer and then create a new one with the same name,
--   it won't have the same ARN. That's because consumer ARNs contain the
--   creation timestamp. This is important to keep in mind if you have IAM
--   policies that reference consumer ARNs.
consumer_consumerARN :: Lens' Consumer Text

-- | A consumer can't read data while in the <tt>CREATING</tt> or
--   <tt>DELETING</tt> states.
consumer_consumerStatus :: Lens' Consumer ConsumerStatus

consumer_consumerCreationTimestamp :: Lens' Consumer UTCTime
instance GHC.Generics.Generic Amazonka.Kinesis.Types.Consumer.Consumer
instance GHC.Show.Show Amazonka.Kinesis.Types.Consumer.Consumer
instance GHC.Read.Read Amazonka.Kinesis.Types.Consumer.Consumer
instance GHC.Classes.Eq Amazonka.Kinesis.Types.Consumer.Consumer
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.Kinesis.Types.Consumer.Consumer
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.Types.Consumer.Consumer
instance Control.DeepSeq.NFData Amazonka.Kinesis.Types.Consumer.Consumer


module Amazonka.Kinesis.Types.EncryptionType
newtype EncryptionType
EncryptionType' :: Text -> EncryptionType
[fromEncryptionType] :: EncryptionType -> Text
pattern EncryptionType_KMS :: EncryptionType
pattern EncryptionType_NONE :: EncryptionType
instance Amazonka.Data.XML.ToXML Amazonka.Kinesis.Types.EncryptionType.EncryptionType
instance Amazonka.Data.XML.FromXML Amazonka.Kinesis.Types.EncryptionType.EncryptionType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.Kinesis.Types.EncryptionType.EncryptionType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.Kinesis.Types.EncryptionType.EncryptionType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.Kinesis.Types.EncryptionType.EncryptionType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.Kinesis.Types.EncryptionType.EncryptionType
instance Amazonka.Data.Query.ToQuery Amazonka.Kinesis.Types.EncryptionType.EncryptionType
instance Amazonka.Data.Headers.ToHeader Amazonka.Kinesis.Types.EncryptionType.EncryptionType
instance Amazonka.Data.Log.ToLog Amazonka.Kinesis.Types.EncryptionType.EncryptionType
instance Amazonka.Data.ByteString.ToByteString Amazonka.Kinesis.Types.EncryptionType.EncryptionType
instance Amazonka.Data.Text.ToText Amazonka.Kinesis.Types.EncryptionType.EncryptionType
instance Amazonka.Data.Text.FromText Amazonka.Kinesis.Types.EncryptionType.EncryptionType
instance Control.DeepSeq.NFData Amazonka.Kinesis.Types.EncryptionType.EncryptionType
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.Types.EncryptionType.EncryptionType
instance GHC.Generics.Generic Amazonka.Kinesis.Types.EncryptionType.EncryptionType
instance GHC.Classes.Ord Amazonka.Kinesis.Types.EncryptionType.EncryptionType
instance GHC.Classes.Eq Amazonka.Kinesis.Types.EncryptionType.EncryptionType
instance GHC.Read.Read Amazonka.Kinesis.Types.EncryptionType.EncryptionType
instance GHC.Show.Show Amazonka.Kinesis.Types.EncryptionType.EncryptionType


module Amazonka.Kinesis.Types.HashKeyRange

-- | The range of possible hash key values for the shard, which is a set of
--   ordered contiguous positive integers.
--   
--   <i>See:</i> <a>newHashKeyRange</a> smart constructor.
data HashKeyRange
HashKeyRange' :: Text -> Text -> HashKeyRange

-- | The starting hash key of the hash key range.
[$sel:startingHashKey:HashKeyRange'] :: HashKeyRange -> Text

-- | The ending hash key of the hash key range.
[$sel:endingHashKey:HashKeyRange'] :: HashKeyRange -> Text

-- | Create a value of <a>HashKeyRange</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:startingHashKey:HashKeyRange'</a>,
--   <a>hashKeyRange_startingHashKey</a> - The starting hash key of the
--   hash key range.
--   
--   <a>$sel:endingHashKey:HashKeyRange'</a>,
--   <a>hashKeyRange_endingHashKey</a> - The ending hash key of the hash
--   key range.
newHashKeyRange :: Text -> Text -> HashKeyRange

-- | The starting hash key of the hash key range.
hashKeyRange_startingHashKey :: Lens' HashKeyRange Text

-- | The ending hash key of the hash key range.
hashKeyRange_endingHashKey :: Lens' HashKeyRange Text
instance GHC.Generics.Generic Amazonka.Kinesis.Types.HashKeyRange.HashKeyRange
instance GHC.Show.Show Amazonka.Kinesis.Types.HashKeyRange.HashKeyRange
instance GHC.Read.Read Amazonka.Kinesis.Types.HashKeyRange.HashKeyRange
instance GHC.Classes.Eq Amazonka.Kinesis.Types.HashKeyRange.HashKeyRange
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.Kinesis.Types.HashKeyRange.HashKeyRange
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.Types.HashKeyRange.HashKeyRange
instance Control.DeepSeq.NFData Amazonka.Kinesis.Types.HashKeyRange.HashKeyRange


module Amazonka.Kinesis.Types.ChildShard

-- | <i>See:</i> <a>newChildShard</a> smart constructor.
data ChildShard
ChildShard' :: Text -> [Text] -> HashKeyRange -> ChildShard
[$sel:shardId:ChildShard'] :: ChildShard -> Text
[$sel:parentShards:ChildShard'] :: ChildShard -> [Text]
[$sel:hashKeyRange:ChildShard'] :: ChildShard -> HashKeyRange

-- | Create a value of <a>ChildShard</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:shardId:ChildShard'</a>, <a>childShard_shardId</a> -
--   Undocumented member.
--   
--   <a>$sel:parentShards:ChildShard'</a>, <a>childShard_parentShards</a> -
--   Undocumented member.
--   
--   <a>$sel:hashKeyRange:ChildShard'</a>, <a>childShard_hashKeyRange</a> -
--   Undocumented member.
newChildShard :: Text -> HashKeyRange -> ChildShard

-- | Undocumented member.
childShard_shardId :: Lens' ChildShard Text

-- | Undocumented member.
childShard_parentShards :: Lens' ChildShard [Text]

-- | Undocumented member.
childShard_hashKeyRange :: Lens' ChildShard HashKeyRange
instance GHC.Generics.Generic Amazonka.Kinesis.Types.ChildShard.ChildShard
instance GHC.Show.Show Amazonka.Kinesis.Types.ChildShard.ChildShard
instance GHC.Read.Read Amazonka.Kinesis.Types.ChildShard.ChildShard
instance GHC.Classes.Eq Amazonka.Kinesis.Types.ChildShard.ChildShard
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.Kinesis.Types.ChildShard.ChildShard
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.Types.ChildShard.ChildShard
instance Control.DeepSeq.NFData Amazonka.Kinesis.Types.ChildShard.ChildShard


module Amazonka.Kinesis.Types.MetricsName
newtype MetricsName
MetricsName' :: Text -> MetricsName
[fromMetricsName] :: MetricsName -> Text
pattern MetricsName_ALL :: MetricsName
pattern MetricsName_IncomingBytes :: MetricsName
pattern MetricsName_IncomingRecords :: MetricsName
pattern MetricsName_IteratorAgeMilliseconds :: MetricsName
pattern MetricsName_OutgoingBytes :: MetricsName
pattern MetricsName_OutgoingRecords :: MetricsName
pattern MetricsName_ReadProvisionedThroughputExceeded :: MetricsName
pattern MetricsName_WriteProvisionedThroughputExceeded :: MetricsName
instance Amazonka.Data.XML.ToXML Amazonka.Kinesis.Types.MetricsName.MetricsName
instance Amazonka.Data.XML.FromXML Amazonka.Kinesis.Types.MetricsName.MetricsName
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.Kinesis.Types.MetricsName.MetricsName
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.Kinesis.Types.MetricsName.MetricsName
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.Kinesis.Types.MetricsName.MetricsName
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.Kinesis.Types.MetricsName.MetricsName
instance Amazonka.Data.Query.ToQuery Amazonka.Kinesis.Types.MetricsName.MetricsName
instance Amazonka.Data.Headers.ToHeader Amazonka.Kinesis.Types.MetricsName.MetricsName
instance Amazonka.Data.Log.ToLog Amazonka.Kinesis.Types.MetricsName.MetricsName
instance Amazonka.Data.ByteString.ToByteString Amazonka.Kinesis.Types.MetricsName.MetricsName
instance Amazonka.Data.Text.ToText Amazonka.Kinesis.Types.MetricsName.MetricsName
instance Amazonka.Data.Text.FromText Amazonka.Kinesis.Types.MetricsName.MetricsName
instance Control.DeepSeq.NFData Amazonka.Kinesis.Types.MetricsName.MetricsName
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.Types.MetricsName.MetricsName
instance GHC.Generics.Generic Amazonka.Kinesis.Types.MetricsName.MetricsName
instance GHC.Classes.Ord Amazonka.Kinesis.Types.MetricsName.MetricsName
instance GHC.Classes.Eq Amazonka.Kinesis.Types.MetricsName.MetricsName
instance GHC.Read.Read Amazonka.Kinesis.Types.MetricsName.MetricsName
instance GHC.Show.Show Amazonka.Kinesis.Types.MetricsName.MetricsName


module Amazonka.Kinesis.Types.EnhancedMonitoringOutput

-- | Represents the output for EnableEnhancedMonitoring and
--   DisableEnhancedMonitoring.
--   
--   <i>See:</i> <a>newEnhancedMonitoringOutput</a> smart constructor.
data EnhancedMonitoringOutput
EnhancedMonitoringOutput' :: Maybe [MetricsName] -> Maybe [MetricsName] -> Maybe Text -> EnhancedMonitoringOutput

-- | Represents the list of all the metrics that would be in the enhanced
--   state after the operation.
[$sel:desiredShardLevelMetrics:EnhancedMonitoringOutput'] :: EnhancedMonitoringOutput -> Maybe [MetricsName]

-- | Represents the current state of the metrics that are in the enhanced
--   state before the operation.
[$sel:currentShardLevelMetrics:EnhancedMonitoringOutput'] :: EnhancedMonitoringOutput -> Maybe [MetricsName]

-- | The name of the Kinesis data stream.
[$sel:streamName:EnhancedMonitoringOutput'] :: EnhancedMonitoringOutput -> Maybe Text

-- | Create a value of <a>EnhancedMonitoringOutput</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:desiredShardLevelMetrics:EnhancedMonitoringOutput'</a>,
--   <a>enhancedMonitoringOutput_desiredShardLevelMetrics</a> - Represents
--   the list of all the metrics that would be in the enhanced state after
--   the operation.
--   
--   <a>$sel:currentShardLevelMetrics:EnhancedMonitoringOutput'</a>,
--   <a>enhancedMonitoringOutput_currentShardLevelMetrics</a> - Represents
--   the current state of the metrics that are in the enhanced state before
--   the operation.
--   
--   <a>$sel:streamName:EnhancedMonitoringOutput'</a>,
--   <a>enhancedMonitoringOutput_streamName</a> - The name of the Kinesis
--   data stream.
newEnhancedMonitoringOutput :: EnhancedMonitoringOutput

-- | Represents the list of all the metrics that would be in the enhanced
--   state after the operation.
enhancedMonitoringOutput_desiredShardLevelMetrics :: Lens' EnhancedMonitoringOutput (Maybe [MetricsName])

-- | Represents the current state of the metrics that are in the enhanced
--   state before the operation.
enhancedMonitoringOutput_currentShardLevelMetrics :: Lens' EnhancedMonitoringOutput (Maybe [MetricsName])

-- | The name of the Kinesis data stream.
enhancedMonitoringOutput_streamName :: Lens' EnhancedMonitoringOutput (Maybe Text)
instance GHC.Generics.Generic Amazonka.Kinesis.Types.EnhancedMonitoringOutput.EnhancedMonitoringOutput
instance GHC.Show.Show Amazonka.Kinesis.Types.EnhancedMonitoringOutput.EnhancedMonitoringOutput
instance GHC.Read.Read Amazonka.Kinesis.Types.EnhancedMonitoringOutput.EnhancedMonitoringOutput
instance GHC.Classes.Eq Amazonka.Kinesis.Types.EnhancedMonitoringOutput.EnhancedMonitoringOutput
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.Kinesis.Types.EnhancedMonitoringOutput.EnhancedMonitoringOutput
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.Types.EnhancedMonitoringOutput.EnhancedMonitoringOutput
instance Control.DeepSeq.NFData Amazonka.Kinesis.Types.EnhancedMonitoringOutput.EnhancedMonitoringOutput


module Amazonka.Kinesis.Types.EnhancedMetrics

-- | Represents enhanced metrics types.
--   
--   <i>See:</i> <a>newEnhancedMetrics</a> smart constructor.
data EnhancedMetrics
EnhancedMetrics' :: Maybe [MetricsName] -> EnhancedMetrics

-- | List of shard-level metrics.
--   
--   The following are the valid shard-level metrics. The value
--   "<tt>ALL</tt>" enhances every metric.
--   
--   <ul>
--   <li><pre>IncomingBytes</pre></li>
--   <li><pre>IncomingRecords</pre></li>
--   <li><pre>OutgoingBytes</pre></li>
--   <li><pre>OutgoingRecords</pre></li>
--   <li><pre>WriteProvisionedThroughputExceeded</pre></li>
--   <li><pre>ReadProvisionedThroughputExceeded</pre></li>
--   <li><pre>IteratorAgeMilliseconds</pre></li>
--   <li><pre>ALL</pre></li>
--   </ul>
--   
--   For more information, see <a>Monitoring the Amazon Kinesis Data
--   Streams Service with Amazon CloudWatch</a> in the <i>Amazon Kinesis
--   Data Streams Developer Guide</i>.
[$sel:shardLevelMetrics:EnhancedMetrics'] :: EnhancedMetrics -> Maybe [MetricsName]

-- | Create a value of <a>EnhancedMetrics</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:shardLevelMetrics:EnhancedMetrics'</a>,
--   <a>enhancedMetrics_shardLevelMetrics</a> - List of shard-level
--   metrics.
--   
--   The following are the valid shard-level metrics. The value
--   "<tt>ALL</tt>" enhances every metric.
--   
--   <ul>
--   <li><pre>IncomingBytes</pre></li>
--   <li><pre>IncomingRecords</pre></li>
--   <li><pre>OutgoingBytes</pre></li>
--   <li><pre>OutgoingRecords</pre></li>
--   <li><pre>WriteProvisionedThroughputExceeded</pre></li>
--   <li><pre>ReadProvisionedThroughputExceeded</pre></li>
--   <li><pre>IteratorAgeMilliseconds</pre></li>
--   <li><pre>ALL</pre></li>
--   </ul>
--   
--   For more information, see <a>Monitoring the Amazon Kinesis Data
--   Streams Service with Amazon CloudWatch</a> in the <i>Amazon Kinesis
--   Data Streams Developer Guide</i>.
newEnhancedMetrics :: EnhancedMetrics

-- | List of shard-level metrics.
--   
--   The following are the valid shard-level metrics. The value
--   "<tt>ALL</tt>" enhances every metric.
--   
--   <ul>
--   <li><pre>IncomingBytes</pre></li>
--   <li><pre>IncomingRecords</pre></li>
--   <li><pre>OutgoingBytes</pre></li>
--   <li><pre>OutgoingRecords</pre></li>
--   <li><pre>WriteProvisionedThroughputExceeded</pre></li>
--   <li><pre>ReadProvisionedThroughputExceeded</pre></li>
--   <li><pre>IteratorAgeMilliseconds</pre></li>
--   <li><pre>ALL</pre></li>
--   </ul>
--   
--   For more information, see <a>Monitoring the Amazon Kinesis Data
--   Streams Service with Amazon CloudWatch</a> in the <i>Amazon Kinesis
--   Data Streams Developer Guide</i>.
enhancedMetrics_shardLevelMetrics :: Lens' EnhancedMetrics (Maybe [MetricsName])
instance GHC.Generics.Generic Amazonka.Kinesis.Types.EnhancedMetrics.EnhancedMetrics
instance GHC.Show.Show Amazonka.Kinesis.Types.EnhancedMetrics.EnhancedMetrics
instance GHC.Read.Read Amazonka.Kinesis.Types.EnhancedMetrics.EnhancedMetrics
instance GHC.Classes.Eq Amazonka.Kinesis.Types.EnhancedMetrics.EnhancedMetrics
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.Kinesis.Types.EnhancedMetrics.EnhancedMetrics
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.Types.EnhancedMetrics.EnhancedMetrics
instance Control.DeepSeq.NFData Amazonka.Kinesis.Types.EnhancedMetrics.EnhancedMetrics


module Amazonka.Kinesis.Types.PutRecordsRequestEntry

-- | Represents the output for <tt>PutRecords</tt>.
--   
--   <i>See:</i> <a>newPutRecordsRequestEntry</a> smart constructor.
data PutRecordsRequestEntry
PutRecordsRequestEntry' :: Maybe Text -> Base64 -> Text -> PutRecordsRequestEntry

-- | The hash value used to determine explicitly the shard that the data
--   record is assigned to by overriding the partition key hash.
[$sel:explicitHashKey:PutRecordsRequestEntry'] :: PutRecordsRequestEntry -> Maybe Text

-- | The data blob to put into the record, which is base64-encoded when the
--   blob is serialized. When the data blob (the payload before
--   base64-encoding) is added to the partition key size, the total size
--   must not exceed the maximum record size (1 MiB).
[$sel:data':PutRecordsRequestEntry'] :: PutRecordsRequestEntry -> Base64

-- | Determines which shard in the stream the data record is assigned to.
--   Partition keys are Unicode strings with a maximum length limit of 256
--   characters for each key. Amazon Kinesis Data Streams uses the
--   partition key as input to a hash function that maps the partition key
--   and associated data to a specific shard. Specifically, an MD5 hash
--   function is used to map partition keys to 128-bit integer values and
--   to map associated data records to shards. As a result of this hashing
--   mechanism, all data records with the same partition key map to the
--   same shard within the stream.
[$sel:partitionKey:PutRecordsRequestEntry'] :: PutRecordsRequestEntry -> Text

-- | Create a value of <a>PutRecordsRequestEntry</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:explicitHashKey:PutRecordsRequestEntry'</a>,
--   <a>putRecordsRequestEntry_explicitHashKey</a> - The hash value used to
--   determine explicitly the shard that the data record is assigned to by
--   overriding the partition key hash.
--   
--   <a>$sel:data':PutRecordsRequestEntry'</a>,
--   <a>putRecordsRequestEntry_data</a> - The data blob to put into the
--   record, which is base64-encoded when the blob is serialized. When the
--   data blob (the payload before base64-encoding) is added to the
--   partition key size, the total size must not exceed the maximum record
--   size (1 MiB).-- -- <i>Note:</i> This <tt>Lens</tt> automatically
--   encodes and decodes Base64 data. -- The underlying isomorphism will
--   encode to Base64 representation during -- serialisation, and decode
--   from Base64 representation during deserialisation. -- This
--   <tt>Lens</tt> accepts and returns only raw unencoded data.
--   
--   <a>$sel:partitionKey:PutRecordsRequestEntry'</a>,
--   <a>putRecordsRequestEntry_partitionKey</a> - Determines which shard in
--   the stream the data record is assigned to. Partition keys are Unicode
--   strings with a maximum length limit of 256 characters for each key.
--   Amazon Kinesis Data Streams uses the partition key as input to a hash
--   function that maps the partition key and associated data to a specific
--   shard. Specifically, an MD5 hash function is used to map partition
--   keys to 128-bit integer values and to map associated data records to
--   shards. As a result of this hashing mechanism, all data records with
--   the same partition key map to the same shard within the stream.
newPutRecordsRequestEntry :: ByteString -> Text -> PutRecordsRequestEntry

-- | The hash value used to determine explicitly the shard that the data
--   record is assigned to by overriding the partition key hash.
putRecordsRequestEntry_explicitHashKey :: Lens' PutRecordsRequestEntry (Maybe Text)

-- | The data blob to put into the record, which is base64-encoded when the
--   blob is serialized. When the data blob (the payload before
--   base64-encoding) is added to the partition key size, the total size
--   must not exceed the maximum record size (1 MiB).-- -- <i>Note:</i>
--   This <tt>Lens</tt> automatically encodes and decodes Base64 data. --
--   The underlying isomorphism will encode to Base64 representation during
--   -- serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
putRecordsRequestEntry_data :: Lens' PutRecordsRequestEntry ByteString

-- | Determines which shard in the stream the data record is assigned to.
--   Partition keys are Unicode strings with a maximum length limit of 256
--   characters for each key. Amazon Kinesis Data Streams uses the
--   partition key as input to a hash function that maps the partition key
--   and associated data to a specific shard. Specifically, an MD5 hash
--   function is used to map partition keys to 128-bit integer values and
--   to map associated data records to shards. As a result of this hashing
--   mechanism, all data records with the same partition key map to the
--   same shard within the stream.
putRecordsRequestEntry_partitionKey :: Lens' PutRecordsRequestEntry Text
instance GHC.Generics.Generic Amazonka.Kinesis.Types.PutRecordsRequestEntry.PutRecordsRequestEntry
instance GHC.Show.Show Amazonka.Kinesis.Types.PutRecordsRequestEntry.PutRecordsRequestEntry
instance GHC.Read.Read Amazonka.Kinesis.Types.PutRecordsRequestEntry.PutRecordsRequestEntry
instance GHC.Classes.Eq Amazonka.Kinesis.Types.PutRecordsRequestEntry.PutRecordsRequestEntry
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.Types.PutRecordsRequestEntry.PutRecordsRequestEntry
instance Control.DeepSeq.NFData Amazonka.Kinesis.Types.PutRecordsRequestEntry.PutRecordsRequestEntry
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.Kinesis.Types.PutRecordsRequestEntry.PutRecordsRequestEntry


module Amazonka.Kinesis.Types.PutRecordsResultEntry

-- | Represents the result of an individual record from a
--   <tt>PutRecords</tt> request. A record that is successfully added to a
--   stream includes <tt>SequenceNumber</tt> and <tt>ShardId</tt> in the
--   result. A record that fails to be added to the stream includes
--   <tt>ErrorCode</tt> and <tt>ErrorMessage</tt> in the result.
--   
--   <i>See:</i> <a>newPutRecordsResultEntry</a> smart constructor.
data PutRecordsResultEntry
PutRecordsResultEntry' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> PutRecordsResultEntry

-- | The sequence number for an individual record result.
[$sel:sequenceNumber:PutRecordsResultEntry'] :: PutRecordsResultEntry -> Maybe Text

-- | The error code for an individual record result. <tt>ErrorCodes</tt>
--   can be either <tt>ProvisionedThroughputExceededException</tt> or
--   <tt>InternalFailure</tt>.
[$sel:errorCode:PutRecordsResultEntry'] :: PutRecordsResultEntry -> Maybe Text

-- | The error message for an individual record result. An
--   <tt>ErrorCode</tt> value of
--   <tt>ProvisionedThroughputExceededException</tt> has an error message
--   that includes the account ID, stream name, and shard ID. An
--   <tt>ErrorCode</tt> value of <tt>InternalFailure</tt> has the error
--   message <tt>"Internal Service Failure"</tt>.
[$sel:errorMessage:PutRecordsResultEntry'] :: PutRecordsResultEntry -> Maybe Text

-- | The shard ID for an individual record result.
[$sel:shardId:PutRecordsResultEntry'] :: PutRecordsResultEntry -> Maybe Text

-- | Create a value of <a>PutRecordsResultEntry</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:sequenceNumber:PutRecordsResultEntry'</a>,
--   <a>putRecordsResultEntry_sequenceNumber</a> - The sequence number for
--   an individual record result.
--   
--   <a>$sel:errorCode:PutRecordsResultEntry'</a>,
--   <a>putRecordsResultEntry_errorCode</a> - The error code for an
--   individual record result. <tt>ErrorCodes</tt> can be either
--   <tt>ProvisionedThroughputExceededException</tt> or
--   <tt>InternalFailure</tt>.
--   
--   <a>$sel:errorMessage:PutRecordsResultEntry'</a>,
--   <a>putRecordsResultEntry_errorMessage</a> - The error message for an
--   individual record result. An <tt>ErrorCode</tt> value of
--   <tt>ProvisionedThroughputExceededException</tt> has an error message
--   that includes the account ID, stream name, and shard ID. An
--   <tt>ErrorCode</tt> value of <tt>InternalFailure</tt> has the error
--   message <tt>"Internal Service Failure"</tt>.
--   
--   <a>$sel:shardId:PutRecordsResultEntry'</a>,
--   <a>putRecordsResultEntry_shardId</a> - The shard ID for an individual
--   record result.
newPutRecordsResultEntry :: PutRecordsResultEntry

-- | The sequence number for an individual record result.
putRecordsResultEntry_sequenceNumber :: Lens' PutRecordsResultEntry (Maybe Text)

-- | The error code for an individual record result. <tt>ErrorCodes</tt>
--   can be either <tt>ProvisionedThroughputExceededException</tt> or
--   <tt>InternalFailure</tt>.
putRecordsResultEntry_errorCode :: Lens' PutRecordsResultEntry (Maybe Text)

-- | The error message for an individual record result. An
--   <tt>ErrorCode</tt> value of
--   <tt>ProvisionedThroughputExceededException</tt> has an error message
--   that includes the account ID, stream name, and shard ID. An
--   <tt>ErrorCode</tt> value of <tt>InternalFailure</tt> has the error
--   message <tt>"Internal Service Failure"</tt>.
putRecordsResultEntry_errorMessage :: Lens' PutRecordsResultEntry (Maybe Text)

-- | The shard ID for an individual record result.
putRecordsResultEntry_shardId :: Lens' PutRecordsResultEntry (Maybe Text)
instance GHC.Generics.Generic Amazonka.Kinesis.Types.PutRecordsResultEntry.PutRecordsResultEntry
instance GHC.Show.Show Amazonka.Kinesis.Types.PutRecordsResultEntry.PutRecordsResultEntry
instance GHC.Read.Read Amazonka.Kinesis.Types.PutRecordsResultEntry.PutRecordsResultEntry
instance GHC.Classes.Eq Amazonka.Kinesis.Types.PutRecordsResultEntry.PutRecordsResultEntry
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.Kinesis.Types.PutRecordsResultEntry.PutRecordsResultEntry
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.Types.PutRecordsResultEntry.PutRecordsResultEntry
instance Control.DeepSeq.NFData Amazonka.Kinesis.Types.PutRecordsResultEntry.PutRecordsResultEntry


module Amazonka.Kinesis.Types.Record

-- | The unit of data of the Kinesis data stream, which is composed of a
--   sequence number, a partition key, and a data blob.
--   
--   <i>See:</i> <a>newRecord</a> smart constructor.
data Record
Record' :: Maybe EncryptionType -> Maybe POSIX -> Text -> Base64 -> Text -> Record

-- | The encryption type used on the record. This parameter can be one of
--   the following values:
--   
--   <ul>
--   <li><tt>NONE</tt>: Do not encrypt the records in the stream.</li>
--   <li><tt>KMS</tt>: Use server-side encryption on the records in the
--   stream using a customer-managed AWS KMS key.</li>
--   </ul>
[$sel:encryptionType:Record'] :: Record -> Maybe EncryptionType

-- | The approximate time that the record was inserted into the stream.
[$sel:approximateArrivalTimestamp:Record'] :: Record -> Maybe POSIX

-- | The unique identifier of the record within its shard.
[$sel:sequenceNumber:Record'] :: Record -> Text

-- | The data blob. The data in the blob is both opaque and immutable to
--   Kinesis Data Streams, which does not inspect, interpret, or change the
--   data in the blob in any way. When the data blob (the payload before
--   base64-encoding) is added to the partition key size, the total size
--   must not exceed the maximum record size (1 MiB).
[$sel:data':Record'] :: Record -> Base64

-- | Identifies which shard in the stream the data record is assigned to.
[$sel:partitionKey:Record'] :: Record -> Text

-- | Create a value of <a>Record</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:encryptionType:Record'</a>, <a>record_encryptionType</a> - The
--   encryption type used on the record. This parameter can be one of the
--   following values:
--   
--   <ul>
--   <li><tt>NONE</tt>: Do not encrypt the records in the stream.</li>
--   <li><tt>KMS</tt>: Use server-side encryption on the records in the
--   stream using a customer-managed AWS KMS key.</li>
--   </ul>
--   
--   <a>$sel:approximateArrivalTimestamp:Record'</a>,
--   <a>record_approximateArrivalTimestamp</a> - The approximate time that
--   the record was inserted into the stream.
--   
--   <a>$sel:sequenceNumber:Record'</a>, <a>record_sequenceNumber</a> - The
--   unique identifier of the record within its shard.
--   
--   <a>$sel:data':Record'</a>, <a>record_data</a> - The data blob. The
--   data in the blob is both opaque and immutable to Kinesis Data Streams,
--   which does not inspect, interpret, or change the data in the blob in
--   any way. When the data blob (the payload before base64-encoding) is
--   added to the partition key size, the total size must not exceed the
--   maximum record size (1 MiB).-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
--   
--   <a>$sel:partitionKey:Record'</a>, <a>record_partitionKey</a> -
--   Identifies which shard in the stream the data record is assigned to.
newRecord :: Text -> ByteString -> Text -> Record

-- | The encryption type used on the record. This parameter can be one of
--   the following values:
--   
--   <ul>
--   <li><tt>NONE</tt>: Do not encrypt the records in the stream.</li>
--   <li><tt>KMS</tt>: Use server-side encryption on the records in the
--   stream using a customer-managed AWS KMS key.</li>
--   </ul>
record_encryptionType :: Lens' Record (Maybe EncryptionType)

-- | The approximate time that the record was inserted into the stream.
record_approximateArrivalTimestamp :: Lens' Record (Maybe UTCTime)

-- | The unique identifier of the record within its shard.
record_sequenceNumber :: Lens' Record Text

-- | The data blob. The data in the blob is both opaque and immutable to
--   Kinesis Data Streams, which does not inspect, interpret, or change the
--   data in the blob in any way. When the data blob (the payload before
--   base64-encoding) is added to the partition key size, the total size
--   must not exceed the maximum record size (1 MiB).-- -- <i>Note:</i>
--   This <tt>Lens</tt> automatically encodes and decodes Base64 data. --
--   The underlying isomorphism will encode to Base64 representation during
--   -- serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
record_data :: Lens' Record ByteString

-- | Identifies which shard in the stream the data record is assigned to.
record_partitionKey :: Lens' Record Text
instance GHC.Generics.Generic Amazonka.Kinesis.Types.Record.Record
instance GHC.Show.Show Amazonka.Kinesis.Types.Record.Record
instance GHC.Read.Read Amazonka.Kinesis.Types.Record.Record
instance GHC.Classes.Eq Amazonka.Kinesis.Types.Record.Record
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.Kinesis.Types.Record.Record
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.Types.Record.Record
instance Control.DeepSeq.NFData Amazonka.Kinesis.Types.Record.Record


module Amazonka.Kinesis.Types.ScalingType
newtype ScalingType
ScalingType' :: Text -> ScalingType
[fromScalingType] :: ScalingType -> Text
pattern ScalingType_UNIFORM_SCALING :: ScalingType
instance Amazonka.Data.XML.ToXML Amazonka.Kinesis.Types.ScalingType.ScalingType
instance Amazonka.Data.XML.FromXML Amazonka.Kinesis.Types.ScalingType.ScalingType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.Kinesis.Types.ScalingType.ScalingType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.Kinesis.Types.ScalingType.ScalingType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.Kinesis.Types.ScalingType.ScalingType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.Kinesis.Types.ScalingType.ScalingType
instance Amazonka.Data.Query.ToQuery Amazonka.Kinesis.Types.ScalingType.ScalingType
instance Amazonka.Data.Headers.ToHeader Amazonka.Kinesis.Types.ScalingType.ScalingType
instance Amazonka.Data.Log.ToLog Amazonka.Kinesis.Types.ScalingType.ScalingType
instance Amazonka.Data.ByteString.ToByteString Amazonka.Kinesis.Types.ScalingType.ScalingType
instance Amazonka.Data.Text.ToText Amazonka.Kinesis.Types.ScalingType.ScalingType
instance Amazonka.Data.Text.FromText Amazonka.Kinesis.Types.ScalingType.ScalingType
instance Control.DeepSeq.NFData Amazonka.Kinesis.Types.ScalingType.ScalingType
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.Types.ScalingType.ScalingType
instance GHC.Generics.Generic Amazonka.Kinesis.Types.ScalingType.ScalingType
instance GHC.Classes.Ord Amazonka.Kinesis.Types.ScalingType.ScalingType
instance GHC.Classes.Eq Amazonka.Kinesis.Types.ScalingType.ScalingType
instance GHC.Read.Read Amazonka.Kinesis.Types.ScalingType.ScalingType
instance GHC.Show.Show Amazonka.Kinesis.Types.ScalingType.ScalingType


module Amazonka.Kinesis.Types.SequenceNumberRange

-- | The range of possible sequence numbers for the shard.
--   
--   <i>See:</i> <a>newSequenceNumberRange</a> smart constructor.
data SequenceNumberRange
SequenceNumberRange' :: Maybe Text -> Text -> SequenceNumberRange

-- | The ending sequence number for the range. Shards that are in the OPEN
--   state have an ending sequence number of <tt>null</tt>.
[$sel:endingSequenceNumber:SequenceNumberRange'] :: SequenceNumberRange -> Maybe Text

-- | The starting sequence number for the range.
[$sel:startingSequenceNumber:SequenceNumberRange'] :: SequenceNumberRange -> Text

-- | Create a value of <a>SequenceNumberRange</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:endingSequenceNumber:SequenceNumberRange'</a>,
--   <a>sequenceNumberRange_endingSequenceNumber</a> - The ending sequence
--   number for the range. Shards that are in the OPEN state have an ending
--   sequence number of <tt>null</tt>.
--   
--   <a>$sel:startingSequenceNumber:SequenceNumberRange'</a>,
--   <a>sequenceNumberRange_startingSequenceNumber</a> - The starting
--   sequence number for the range.
newSequenceNumberRange :: Text -> SequenceNumberRange

-- | The ending sequence number for the range. Shards that are in the OPEN
--   state have an ending sequence number of <tt>null</tt>.
sequenceNumberRange_endingSequenceNumber :: Lens' SequenceNumberRange (Maybe Text)

-- | The starting sequence number for the range.
sequenceNumberRange_startingSequenceNumber :: Lens' SequenceNumberRange Text
instance GHC.Generics.Generic Amazonka.Kinesis.Types.SequenceNumberRange.SequenceNumberRange
instance GHC.Show.Show Amazonka.Kinesis.Types.SequenceNumberRange.SequenceNumberRange
instance GHC.Read.Read Amazonka.Kinesis.Types.SequenceNumberRange.SequenceNumberRange
instance GHC.Classes.Eq Amazonka.Kinesis.Types.SequenceNumberRange.SequenceNumberRange
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.Kinesis.Types.SequenceNumberRange.SequenceNumberRange
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.Types.SequenceNumberRange.SequenceNumberRange
instance Control.DeepSeq.NFData Amazonka.Kinesis.Types.SequenceNumberRange.SequenceNumberRange


module Amazonka.Kinesis.Types.Shard

-- | A uniquely identified group of data records in a Kinesis data stream.
--   
--   <i>See:</i> <a>newShard</a> smart constructor.
data Shard
Shard' :: Maybe Text -> Maybe Text -> Text -> HashKeyRange -> SequenceNumberRange -> Shard

-- | The shard ID of the shard adjacent to the shard's parent.
[$sel:adjacentParentShardId:Shard'] :: Shard -> Maybe Text

-- | The shard ID of the shard's parent.
[$sel:parentShardId:Shard'] :: Shard -> Maybe Text

-- | The unique identifier of the shard within the stream.
[$sel:shardId:Shard'] :: Shard -> Text

-- | The range of possible hash key values for the shard, which is a set of
--   ordered contiguous positive integers.
[$sel:hashKeyRange:Shard'] :: Shard -> HashKeyRange

-- | The range of possible sequence numbers for the shard.
[$sel:sequenceNumberRange:Shard'] :: Shard -> SequenceNumberRange

-- | Create a value of <a>Shard</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:adjacentParentShardId:Shard'</a>,
--   <a>shard_adjacentParentShardId</a> - The shard ID of the shard
--   adjacent to the shard's parent.
--   
--   <a>$sel:parentShardId:Shard'</a>, <a>shard_parentShardId</a> - The
--   shard ID of the shard's parent.
--   
--   <a>$sel:shardId:Shard'</a>, <a>shard_shardId</a> - The unique
--   identifier of the shard within the stream.
--   
--   <a>$sel:hashKeyRange:Shard'</a>, <a>shard_hashKeyRange</a> - The range
--   of possible hash key values for the shard, which is a set of ordered
--   contiguous positive integers.
--   
--   <a>$sel:sequenceNumberRange:Shard'</a>,
--   <a>shard_sequenceNumberRange</a> - The range of possible sequence
--   numbers for the shard.
newShard :: Text -> HashKeyRange -> SequenceNumberRange -> Shard

-- | The shard ID of the shard adjacent to the shard's parent.
shard_adjacentParentShardId :: Lens' Shard (Maybe Text)

-- | The shard ID of the shard's parent.
shard_parentShardId :: Lens' Shard (Maybe Text)

-- | The unique identifier of the shard within the stream.
shard_shardId :: Lens' Shard Text

-- | The range of possible hash key values for the shard, which is a set of
--   ordered contiguous positive integers.
shard_hashKeyRange :: Lens' Shard HashKeyRange

-- | The range of possible sequence numbers for the shard.
shard_sequenceNumberRange :: Lens' Shard SequenceNumberRange
instance GHC.Generics.Generic Amazonka.Kinesis.Types.Shard.Shard
instance GHC.Show.Show Amazonka.Kinesis.Types.Shard.Shard
instance GHC.Read.Read Amazonka.Kinesis.Types.Shard.Shard
instance GHC.Classes.Eq Amazonka.Kinesis.Types.Shard.Shard
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.Kinesis.Types.Shard.Shard
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.Types.Shard.Shard
instance Control.DeepSeq.NFData Amazonka.Kinesis.Types.Shard.Shard


module Amazonka.Kinesis.Types.ShardFilterType
newtype ShardFilterType
ShardFilterType' :: Text -> ShardFilterType
[fromShardFilterType] :: ShardFilterType -> Text
pattern ShardFilterType_AFTER_SHARD_ID :: ShardFilterType
pattern ShardFilterType_AT_LATEST :: ShardFilterType
pattern ShardFilterType_AT_TIMESTAMP :: ShardFilterType
pattern ShardFilterType_AT_TRIM_HORIZON :: ShardFilterType
pattern ShardFilterType_FROM_TIMESTAMP :: ShardFilterType
pattern ShardFilterType_FROM_TRIM_HORIZON :: ShardFilterType
instance Amazonka.Data.XML.ToXML Amazonka.Kinesis.Types.ShardFilterType.ShardFilterType
instance Amazonka.Data.XML.FromXML Amazonka.Kinesis.Types.ShardFilterType.ShardFilterType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.Kinesis.Types.ShardFilterType.ShardFilterType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.Kinesis.Types.ShardFilterType.ShardFilterType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.Kinesis.Types.ShardFilterType.ShardFilterType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.Kinesis.Types.ShardFilterType.ShardFilterType
instance Amazonka.Data.Query.ToQuery Amazonka.Kinesis.Types.ShardFilterType.ShardFilterType
instance Amazonka.Data.Headers.ToHeader Amazonka.Kinesis.Types.ShardFilterType.ShardFilterType
instance Amazonka.Data.Log.ToLog Amazonka.Kinesis.Types.ShardFilterType.ShardFilterType
instance Amazonka.Data.ByteString.ToByteString Amazonka.Kinesis.Types.ShardFilterType.ShardFilterType
instance Amazonka.Data.Text.ToText Amazonka.Kinesis.Types.ShardFilterType.ShardFilterType
instance Amazonka.Data.Text.FromText Amazonka.Kinesis.Types.ShardFilterType.ShardFilterType
instance Control.DeepSeq.NFData Amazonka.Kinesis.Types.ShardFilterType.ShardFilterType
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.Types.ShardFilterType.ShardFilterType
instance GHC.Generics.Generic Amazonka.Kinesis.Types.ShardFilterType.ShardFilterType
instance GHC.Classes.Ord Amazonka.Kinesis.Types.ShardFilterType.ShardFilterType
instance GHC.Classes.Eq Amazonka.Kinesis.Types.ShardFilterType.ShardFilterType
instance GHC.Read.Read Amazonka.Kinesis.Types.ShardFilterType.ShardFilterType
instance GHC.Show.Show Amazonka.Kinesis.Types.ShardFilterType.ShardFilterType


module Amazonka.Kinesis.Types.ShardFilter

-- | <i>See:</i> <a>newShardFilter</a> smart constructor.
data ShardFilter
ShardFilter' :: Maybe POSIX -> Maybe Text -> ShardFilterType -> ShardFilter
[$sel:timestamp:ShardFilter'] :: ShardFilter -> Maybe POSIX
[$sel:shardId:ShardFilter'] :: ShardFilter -> Maybe Text
[$sel:type':ShardFilter'] :: ShardFilter -> ShardFilterType

-- | Create a value of <a>ShardFilter</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:timestamp:ShardFilter'</a>, <a>shardFilter_timestamp</a> -
--   Undocumented member.
--   
--   <a>$sel:shardId:ShardFilter'</a>, <a>shardFilter_shardId</a> -
--   Undocumented member.
--   
--   <a>$sel:type':ShardFilter'</a>, <a>shardFilter_type</a> - Undocumented
--   member.
newShardFilter :: ShardFilterType -> ShardFilter

-- | Undocumented member.
shardFilter_timestamp :: Lens' ShardFilter (Maybe UTCTime)

-- | Undocumented member.
shardFilter_shardId :: Lens' ShardFilter (Maybe Text)

-- | Undocumented member.
shardFilter_type :: Lens' ShardFilter ShardFilterType
instance GHC.Generics.Generic Amazonka.Kinesis.Types.ShardFilter.ShardFilter
instance GHC.Show.Show Amazonka.Kinesis.Types.ShardFilter.ShardFilter
instance GHC.Read.Read Amazonka.Kinesis.Types.ShardFilter.ShardFilter
instance GHC.Classes.Eq Amazonka.Kinesis.Types.ShardFilter.ShardFilter
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.Types.ShardFilter.ShardFilter
instance Control.DeepSeq.NFData Amazonka.Kinesis.Types.ShardFilter.ShardFilter
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.Kinesis.Types.ShardFilter.ShardFilter


module Amazonka.Kinesis.Types.ShardIteratorType
newtype ShardIteratorType
ShardIteratorType' :: Text -> ShardIteratorType
[fromShardIteratorType] :: ShardIteratorType -> Text
pattern ShardIteratorType_AFTER_SEQUENCE_NUMBER :: ShardIteratorType
pattern ShardIteratorType_AT_SEQUENCE_NUMBER :: ShardIteratorType
pattern ShardIteratorType_AT_TIMESTAMP :: ShardIteratorType
pattern ShardIteratorType_LATEST :: ShardIteratorType
pattern ShardIteratorType_TRIM_HORIZON :: ShardIteratorType
instance Amazonka.Data.XML.ToXML Amazonka.Kinesis.Types.ShardIteratorType.ShardIteratorType
instance Amazonka.Data.XML.FromXML Amazonka.Kinesis.Types.ShardIteratorType.ShardIteratorType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.Kinesis.Types.ShardIteratorType.ShardIteratorType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.Kinesis.Types.ShardIteratorType.ShardIteratorType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.Kinesis.Types.ShardIteratorType.ShardIteratorType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.Kinesis.Types.ShardIteratorType.ShardIteratorType
instance Amazonka.Data.Query.ToQuery Amazonka.Kinesis.Types.ShardIteratorType.ShardIteratorType
instance Amazonka.Data.Headers.ToHeader Amazonka.Kinesis.Types.ShardIteratorType.ShardIteratorType
instance Amazonka.Data.Log.ToLog Amazonka.Kinesis.Types.ShardIteratorType.ShardIteratorType
instance Amazonka.Data.ByteString.ToByteString Amazonka.Kinesis.Types.ShardIteratorType.ShardIteratorType
instance Amazonka.Data.Text.ToText Amazonka.Kinesis.Types.ShardIteratorType.ShardIteratorType
instance Amazonka.Data.Text.FromText Amazonka.Kinesis.Types.ShardIteratorType.ShardIteratorType
instance Control.DeepSeq.NFData Amazonka.Kinesis.Types.ShardIteratorType.ShardIteratorType
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.Types.ShardIteratorType.ShardIteratorType
instance GHC.Generics.Generic Amazonka.Kinesis.Types.ShardIteratorType.ShardIteratorType
instance GHC.Classes.Ord Amazonka.Kinesis.Types.ShardIteratorType.ShardIteratorType
instance GHC.Classes.Eq Amazonka.Kinesis.Types.ShardIteratorType.ShardIteratorType
instance GHC.Read.Read Amazonka.Kinesis.Types.ShardIteratorType.ShardIteratorType
instance GHC.Show.Show Amazonka.Kinesis.Types.ShardIteratorType.ShardIteratorType


module Amazonka.Kinesis.Types.StartingPosition

-- | <i>See:</i> <a>newStartingPosition</a> smart constructor.
data StartingPosition
StartingPosition' :: Maybe Text -> Maybe POSIX -> ShardIteratorType -> StartingPosition

-- | The sequence number of the data record in the shard from which to
--   start streaming. To specify a sequence number, set
--   <tt>StartingPosition</tt> to <tt>AT_SEQUENCE_NUMBER</tt> or
--   <tt>AFTER_SEQUENCE_NUMBER</tt>.
[$sel:sequenceNumber:StartingPosition'] :: StartingPosition -> Maybe Text

-- | The time stamp of the data record from which to start reading. To
--   specify a time stamp, set <tt>StartingPosition</tt> to <tt>Type
--   AT_TIMESTAMP</tt>. A time stamp is the Unix epoch date with precision
--   in milliseconds. For example, <tt>2016-04-04T19:58:46.480-00:00</tt>
--   or <tt>1459799926.480</tt>. If a record with this exact time stamp
--   does not exist, records will be streamed from the next (later) record.
--   If the time stamp is older than the current trim horizon, records will
--   be streamed from the oldest untrimmed data record
--   (<tt>TRIM_HORIZON</tt>).
[$sel:timestamp:StartingPosition'] :: StartingPosition -> Maybe POSIX

-- | You can set the starting position to one of the following values:
--   
--   <tt>AT_SEQUENCE_NUMBER</tt>: Start streaming from the position denoted
--   by the sequence number specified in the <tt>SequenceNumber</tt> field.
--   
--   <tt>AFTER_SEQUENCE_NUMBER</tt>: Start streaming right after the
--   position denoted by the sequence number specified in the
--   <tt>SequenceNumber</tt> field.
--   
--   <tt>AT_TIMESTAMP</tt>: Start streaming from the position denoted by
--   the time stamp specified in the <tt>Timestamp</tt> field.
--   
--   <tt>TRIM_HORIZON</tt>: Start streaming at the last untrimmed record in
--   the shard, which is the oldest data record in the shard.
--   
--   <tt>LATEST</tt>: Start streaming just after the most recent record in
--   the shard, so that you always read the most recent data in the shard.
[$sel:type':StartingPosition'] :: StartingPosition -> ShardIteratorType

-- | Create a value of <a>StartingPosition</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:sequenceNumber:StartingPosition'</a>,
--   <a>startingPosition_sequenceNumber</a> - The sequence number of the
--   data record in the shard from which to start streaming. To specify a
--   sequence number, set <tt>StartingPosition</tt> to
--   <tt>AT_SEQUENCE_NUMBER</tt> or <tt>AFTER_SEQUENCE_NUMBER</tt>.
--   
--   <a>$sel:timestamp:StartingPosition'</a>,
--   <a>startingPosition_timestamp</a> - The time stamp of the data record
--   from which to start reading. To specify a time stamp, set
--   <tt>StartingPosition</tt> to <tt>Type AT_TIMESTAMP</tt>. A time stamp
--   is the Unix epoch date with precision in milliseconds. For example,
--   <tt>2016-04-04T19:58:46.480-00:00</tt> or <tt>1459799926.480</tt>. If
--   a record with this exact time stamp does not exist, records will be
--   streamed from the next (later) record. If the time stamp is older than
--   the current trim horizon, records will be streamed from the oldest
--   untrimmed data record (<tt>TRIM_HORIZON</tt>).
--   
--   <a>$sel:type':StartingPosition'</a>, <a>startingPosition_type</a> -
--   You can set the starting position to one of the following values:
--   
--   <tt>AT_SEQUENCE_NUMBER</tt>: Start streaming from the position denoted
--   by the sequence number specified in the <tt>SequenceNumber</tt> field.
--   
--   <tt>AFTER_SEQUENCE_NUMBER</tt>: Start streaming right after the
--   position denoted by the sequence number specified in the
--   <tt>SequenceNumber</tt> field.
--   
--   <tt>AT_TIMESTAMP</tt>: Start streaming from the position denoted by
--   the time stamp specified in the <tt>Timestamp</tt> field.
--   
--   <tt>TRIM_HORIZON</tt>: Start streaming at the last untrimmed record in
--   the shard, which is the oldest data record in the shard.
--   
--   <tt>LATEST</tt>: Start streaming just after the most recent record in
--   the shard, so that you always read the most recent data in the shard.
newStartingPosition :: ShardIteratorType -> StartingPosition

-- | The sequence number of the data record in the shard from which to
--   start streaming. To specify a sequence number, set
--   <tt>StartingPosition</tt> to <tt>AT_SEQUENCE_NUMBER</tt> or
--   <tt>AFTER_SEQUENCE_NUMBER</tt>.
startingPosition_sequenceNumber :: Lens' StartingPosition (Maybe Text)

-- | The time stamp of the data record from which to start reading. To
--   specify a time stamp, set <tt>StartingPosition</tt> to <tt>Type
--   AT_TIMESTAMP</tt>. A time stamp is the Unix epoch date with precision
--   in milliseconds. For example, <tt>2016-04-04T19:58:46.480-00:00</tt>
--   or <tt>1459799926.480</tt>. If a record with this exact time stamp
--   does not exist, records will be streamed from the next (later) record.
--   If the time stamp is older than the current trim horizon, records will
--   be streamed from the oldest untrimmed data record
--   (<tt>TRIM_HORIZON</tt>).
startingPosition_timestamp :: Lens' StartingPosition (Maybe UTCTime)

-- | You can set the starting position to one of the following values:
--   
--   <tt>AT_SEQUENCE_NUMBER</tt>: Start streaming from the position denoted
--   by the sequence number specified in the <tt>SequenceNumber</tt> field.
--   
--   <tt>AFTER_SEQUENCE_NUMBER</tt>: Start streaming right after the
--   position denoted by the sequence number specified in the
--   <tt>SequenceNumber</tt> field.
--   
--   <tt>AT_TIMESTAMP</tt>: Start streaming from the position denoted by
--   the time stamp specified in the <tt>Timestamp</tt> field.
--   
--   <tt>TRIM_HORIZON</tt>: Start streaming at the last untrimmed record in
--   the shard, which is the oldest data record in the shard.
--   
--   <tt>LATEST</tt>: Start streaming just after the most recent record in
--   the shard, so that you always read the most recent data in the shard.
startingPosition_type :: Lens' StartingPosition ShardIteratorType
instance GHC.Generics.Generic Amazonka.Kinesis.Types.StartingPosition.StartingPosition
instance GHC.Show.Show Amazonka.Kinesis.Types.StartingPosition.StartingPosition
instance GHC.Read.Read Amazonka.Kinesis.Types.StartingPosition.StartingPosition
instance GHC.Classes.Eq Amazonka.Kinesis.Types.StartingPosition.StartingPosition
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.Types.StartingPosition.StartingPosition
instance Control.DeepSeq.NFData Amazonka.Kinesis.Types.StartingPosition.StartingPosition
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.Kinesis.Types.StartingPosition.StartingPosition


module Amazonka.Kinesis.Types.StreamStatus
newtype StreamStatus
StreamStatus' :: Text -> StreamStatus
[fromStreamStatus] :: StreamStatus -> Text
pattern StreamStatus_ACTIVE :: StreamStatus
pattern StreamStatus_CREATING :: StreamStatus
pattern StreamStatus_DELETING :: StreamStatus
pattern StreamStatus_UPDATING :: StreamStatus
instance Amazonka.Data.XML.ToXML Amazonka.Kinesis.Types.StreamStatus.StreamStatus
instance Amazonka.Data.XML.FromXML Amazonka.Kinesis.Types.StreamStatus.StreamStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.Kinesis.Types.StreamStatus.StreamStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.Kinesis.Types.StreamStatus.StreamStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.Kinesis.Types.StreamStatus.StreamStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.Kinesis.Types.StreamStatus.StreamStatus
instance Amazonka.Data.Query.ToQuery Amazonka.Kinesis.Types.StreamStatus.StreamStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.Kinesis.Types.StreamStatus.StreamStatus
instance Amazonka.Data.Log.ToLog Amazonka.Kinesis.Types.StreamStatus.StreamStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.Kinesis.Types.StreamStatus.StreamStatus
instance Amazonka.Data.Text.ToText Amazonka.Kinesis.Types.StreamStatus.StreamStatus
instance Amazonka.Data.Text.FromText Amazonka.Kinesis.Types.StreamStatus.StreamStatus
instance Control.DeepSeq.NFData Amazonka.Kinesis.Types.StreamStatus.StreamStatus
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.Types.StreamStatus.StreamStatus
instance GHC.Generics.Generic Amazonka.Kinesis.Types.StreamStatus.StreamStatus
instance GHC.Classes.Ord Amazonka.Kinesis.Types.StreamStatus.StreamStatus
instance GHC.Classes.Eq Amazonka.Kinesis.Types.StreamStatus.StreamStatus
instance GHC.Read.Read Amazonka.Kinesis.Types.StreamStatus.StreamStatus
instance GHC.Show.Show Amazonka.Kinesis.Types.StreamStatus.StreamStatus


module Amazonka.Kinesis.Types.StreamDescriptionSummary

-- | Represents the output for DescribeStreamSummary
--   
--   <i>See:</i> <a>newStreamDescriptionSummary</a> smart constructor.
data StreamDescriptionSummary
StreamDescriptionSummary' :: Maybe EncryptionType -> Maybe Text -> Maybe Natural -> Text -> Text -> StreamStatus -> Int -> POSIX -> [EnhancedMetrics] -> Natural -> StreamDescriptionSummary

-- | The encryption type used. This value is one of the following:
--   
--   <ul>
--   <li><pre>KMS</pre></li>
--   <li><pre>NONE</pre></li>
--   </ul>
[$sel:encryptionType:StreamDescriptionSummary'] :: StreamDescriptionSummary -> Maybe EncryptionType

-- | The GUID for the customer-managed AWS KMS key to use for encryption.
--   This value can be a globally unique identifier, a fully specified ARN
--   to either an alias or a key, or an alias name prefixed by "alias/".You
--   can also use a master key owned by Kinesis Data Streams by specifying
--   the alias <tt>aws/kinesis</tt>.
--   
--   <ul>
--   <li>Key ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias ARN example: <tt>
--   arn:aws:kms:us-east-1:123456789012:alias/MyAliasName</tt></li>
--   <li>Globally unique key ID example:
--   <tt>12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias name example: <tt>alias/MyAliasName</tt></li>
--   <li>Master key owned by Kinesis Data Streams:
--   <tt>alias/aws/kinesis</tt></li>
--   </ul>
[$sel:keyId:StreamDescriptionSummary'] :: StreamDescriptionSummary -> Maybe Text

-- | The number of enhanced fan-out consumers registered with the stream.
[$sel:consumerCount:StreamDescriptionSummary'] :: StreamDescriptionSummary -> Maybe Natural

-- | The name of the stream being described.
[$sel:streamName:StreamDescriptionSummary'] :: StreamDescriptionSummary -> Text

-- | The Amazon Resource Name (ARN) for the stream being described.
[$sel:streamARN:StreamDescriptionSummary'] :: StreamDescriptionSummary -> Text

-- | The current status of the stream being described. The stream status is
--   one of the following states:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The stream is being created. Kinesis Data
--   Streams immediately returns and sets <tt>StreamStatus</tt> to
--   <tt>CREATING</tt>.</li>
--   <li><tt>DELETING</tt> - The stream is being deleted. The specified
--   stream is in the <tt>DELETING</tt> state until Kinesis Data Streams
--   completes the deletion.</li>
--   <li><tt>ACTIVE</tt> - The stream exists and is ready for read and
--   write operations or deletion. You should perform read and write
--   operations only on an <tt>ACTIVE</tt> stream.</li>
--   <li><tt>UPDATING</tt> - Shards in the stream are being merged or
--   split. Read and write operations continue to work while the stream is
--   in the <tt>UPDATING</tt> state.</li>
--   </ul>
[$sel:streamStatus:StreamDescriptionSummary'] :: StreamDescriptionSummary -> StreamStatus

-- | The current retention period, in hours.
[$sel:retentionPeriodHours:StreamDescriptionSummary'] :: StreamDescriptionSummary -> Int

-- | The approximate time that the stream was created.
[$sel:streamCreationTimestamp:StreamDescriptionSummary'] :: StreamDescriptionSummary -> POSIX

-- | Represents the current enhanced monitoring settings of the stream.
[$sel:enhancedMonitoring:StreamDescriptionSummary'] :: StreamDescriptionSummary -> [EnhancedMetrics]

-- | The number of open shards in the stream.
[$sel:openShardCount:StreamDescriptionSummary'] :: StreamDescriptionSummary -> Natural

-- | Create a value of <a>StreamDescriptionSummary</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:encryptionType:StreamDescriptionSummary'</a>,
--   <a>streamDescriptionSummary_encryptionType</a> - The encryption type
--   used. This value is one of the following:
--   
--   <ul>
--   <li><pre>KMS</pre></li>
--   <li><pre>NONE</pre></li>
--   </ul>
--   
--   <a>$sel:keyId:StreamDescriptionSummary'</a>,
--   <a>streamDescriptionSummary_keyId</a> - The GUID for the
--   customer-managed AWS KMS key to use for encryption. This value can be
--   a globally unique identifier, a fully specified ARN to either an alias
--   or a key, or an alias name prefixed by "alias/".You can also use a
--   master key owned by Kinesis Data Streams by specifying the alias
--   <tt>aws/kinesis</tt>.
--   
--   <ul>
--   <li>Key ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias ARN example: <tt>
--   arn:aws:kms:us-east-1:123456789012:alias/MyAliasName</tt></li>
--   <li>Globally unique key ID example:
--   <tt>12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias name example: <tt>alias/MyAliasName</tt></li>
--   <li>Master key owned by Kinesis Data Streams:
--   <tt>alias/aws/kinesis</tt></li>
--   </ul>
--   
--   <a>$sel:consumerCount:StreamDescriptionSummary'</a>,
--   <a>streamDescriptionSummary_consumerCount</a> - The number of enhanced
--   fan-out consumers registered with the stream.
--   
--   <a>$sel:streamName:StreamDescriptionSummary'</a>,
--   <a>streamDescriptionSummary_streamName</a> - The name of the stream
--   being described.
--   
--   <a>$sel:streamARN:StreamDescriptionSummary'</a>,
--   <a>streamDescriptionSummary_streamARN</a> - The Amazon Resource Name
--   (ARN) for the stream being described.
--   
--   <a>$sel:streamStatus:StreamDescriptionSummary'</a>,
--   <a>streamDescriptionSummary_streamStatus</a> - The current status of
--   the stream being described. The stream status is one of the following
--   states:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The stream is being created. Kinesis Data
--   Streams immediately returns and sets <tt>StreamStatus</tt> to
--   <tt>CREATING</tt>.</li>
--   <li><tt>DELETING</tt> - The stream is being deleted. The specified
--   stream is in the <tt>DELETING</tt> state until Kinesis Data Streams
--   completes the deletion.</li>
--   <li><tt>ACTIVE</tt> - The stream exists and is ready for read and
--   write operations or deletion. You should perform read and write
--   operations only on an <tt>ACTIVE</tt> stream.</li>
--   <li><tt>UPDATING</tt> - Shards in the stream are being merged or
--   split. Read and write operations continue to work while the stream is
--   in the <tt>UPDATING</tt> state.</li>
--   </ul>
--   
--   <a>$sel:retentionPeriodHours:StreamDescriptionSummary'</a>,
--   <a>streamDescriptionSummary_retentionPeriodHours</a> - The current
--   retention period, in hours.
--   
--   <a>$sel:streamCreationTimestamp:StreamDescriptionSummary'</a>,
--   <a>streamDescriptionSummary_streamCreationTimestamp</a> - The
--   approximate time that the stream was created.
--   
--   <a>$sel:enhancedMonitoring:StreamDescriptionSummary'</a>,
--   <a>streamDescriptionSummary_enhancedMonitoring</a> - Represents the
--   current enhanced monitoring settings of the stream.
--   
--   <a>$sel:openShardCount:StreamDescriptionSummary'</a>,
--   <a>streamDescriptionSummary_openShardCount</a> - The number of open
--   shards in the stream.
newStreamDescriptionSummary :: Text -> Text -> StreamStatus -> Int -> UTCTime -> Natural -> StreamDescriptionSummary

-- | The encryption type used. This value is one of the following:
--   
--   <ul>
--   <li><pre>KMS</pre></li>
--   <li><pre>NONE</pre></li>
--   </ul>
streamDescriptionSummary_encryptionType :: Lens' StreamDescriptionSummary (Maybe EncryptionType)

-- | The GUID for the customer-managed AWS KMS key to use for encryption.
--   This value can be a globally unique identifier, a fully specified ARN
--   to either an alias or a key, or an alias name prefixed by "alias/".You
--   can also use a master key owned by Kinesis Data Streams by specifying
--   the alias <tt>aws/kinesis</tt>.
--   
--   <ul>
--   <li>Key ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias ARN example: <tt>
--   arn:aws:kms:us-east-1:123456789012:alias/MyAliasName</tt></li>
--   <li>Globally unique key ID example:
--   <tt>12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias name example: <tt>alias/MyAliasName</tt></li>
--   <li>Master key owned by Kinesis Data Streams:
--   <tt>alias/aws/kinesis</tt></li>
--   </ul>
streamDescriptionSummary_keyId :: Lens' StreamDescriptionSummary (Maybe Text)

-- | The number of enhanced fan-out consumers registered with the stream.
streamDescriptionSummary_consumerCount :: Lens' StreamDescriptionSummary (Maybe Natural)

-- | The name of the stream being described.
streamDescriptionSummary_streamName :: Lens' StreamDescriptionSummary Text

-- | The Amazon Resource Name (ARN) for the stream being described.
streamDescriptionSummary_streamARN :: Lens' StreamDescriptionSummary Text

-- | The current status of the stream being described. The stream status is
--   one of the following states:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The stream is being created. Kinesis Data
--   Streams immediately returns and sets <tt>StreamStatus</tt> to
--   <tt>CREATING</tt>.</li>
--   <li><tt>DELETING</tt> - The stream is being deleted. The specified
--   stream is in the <tt>DELETING</tt> state until Kinesis Data Streams
--   completes the deletion.</li>
--   <li><tt>ACTIVE</tt> - The stream exists and is ready for read and
--   write operations or deletion. You should perform read and write
--   operations only on an <tt>ACTIVE</tt> stream.</li>
--   <li><tt>UPDATING</tt> - Shards in the stream are being merged or
--   split. Read and write operations continue to work while the stream is
--   in the <tt>UPDATING</tt> state.</li>
--   </ul>
streamDescriptionSummary_streamStatus :: Lens' StreamDescriptionSummary StreamStatus

-- | The current retention period, in hours.
streamDescriptionSummary_retentionPeriodHours :: Lens' StreamDescriptionSummary Int

-- | The approximate time that the stream was created.
streamDescriptionSummary_streamCreationTimestamp :: Lens' StreamDescriptionSummary UTCTime

-- | Represents the current enhanced monitoring settings of the stream.
streamDescriptionSummary_enhancedMonitoring :: Lens' StreamDescriptionSummary [EnhancedMetrics]

-- | The number of open shards in the stream.
streamDescriptionSummary_openShardCount :: Lens' StreamDescriptionSummary Natural
instance GHC.Generics.Generic Amazonka.Kinesis.Types.StreamDescriptionSummary.StreamDescriptionSummary
instance GHC.Show.Show Amazonka.Kinesis.Types.StreamDescriptionSummary.StreamDescriptionSummary
instance GHC.Read.Read Amazonka.Kinesis.Types.StreamDescriptionSummary.StreamDescriptionSummary
instance GHC.Classes.Eq Amazonka.Kinesis.Types.StreamDescriptionSummary.StreamDescriptionSummary
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.Kinesis.Types.StreamDescriptionSummary.StreamDescriptionSummary
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.Types.StreamDescriptionSummary.StreamDescriptionSummary
instance Control.DeepSeq.NFData Amazonka.Kinesis.Types.StreamDescriptionSummary.StreamDescriptionSummary


module Amazonka.Kinesis.Types.StreamDescription

-- | Represents the output for DescribeStream.
--   
--   <i>See:</i> <a>newStreamDescription</a> smart constructor.
data StreamDescription
StreamDescription' :: Maybe EncryptionType -> Maybe Text -> Text -> Text -> StreamStatus -> [Shard] -> Bool -> Int -> POSIX -> [EnhancedMetrics] -> StreamDescription

-- | The server-side encryption type used on the stream. This parameter can
--   be one of the following values:
--   
--   <ul>
--   <li><tt>NONE</tt>: Do not encrypt the records in the stream.</li>
--   <li><tt>KMS</tt>: Use server-side encryption on the records in the
--   stream using a customer-managed AWS KMS key.</li>
--   </ul>
[$sel:encryptionType:StreamDescription'] :: StreamDescription -> Maybe EncryptionType

-- | The GUID for the customer-managed AWS KMS key to use for encryption.
--   This value can be a globally unique identifier, a fully specified ARN
--   to either an alias or a key, or an alias name prefixed by "alias/".You
--   can also use a master key owned by Kinesis Data Streams by specifying
--   the alias <tt>aws/kinesis</tt>.
--   
--   <ul>
--   <li>Key ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:alias/MyAliasName</tt></li>
--   <li>Globally unique key ID example:
--   <tt>12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias name example: <tt>alias/MyAliasName</tt></li>
--   <li>Master key owned by Kinesis Data Streams:
--   <tt>alias/aws/kinesis</tt></li>
--   </ul>
[$sel:keyId:StreamDescription'] :: StreamDescription -> Maybe Text

-- | The name of the stream being described.
[$sel:streamName:StreamDescription'] :: StreamDescription -> Text

-- | The Amazon Resource Name (ARN) for the stream being described.
[$sel:streamARN:StreamDescription'] :: StreamDescription -> Text

-- | The current status of the stream being described. The stream status is
--   one of the following states:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The stream is being created. Kinesis Data
--   Streams immediately returns and sets <tt>StreamStatus</tt> to
--   <tt>CREATING</tt>.</li>
--   <li><tt>DELETING</tt> - The stream is being deleted. The specified
--   stream is in the <tt>DELETING</tt> state until Kinesis Data Streams
--   completes the deletion.</li>
--   <li><tt>ACTIVE</tt> - The stream exists and is ready for read and
--   write operations or deletion. You should perform read and write
--   operations only on an <tt>ACTIVE</tt> stream.</li>
--   <li><tt>UPDATING</tt> - Shards in the stream are being merged or
--   split. Read and write operations continue to work while the stream is
--   in the <tt>UPDATING</tt> state.</li>
--   </ul>
[$sel:streamStatus:StreamDescription'] :: StreamDescription -> StreamStatus

-- | The shards that comprise the stream.
[$sel:shards:StreamDescription'] :: StreamDescription -> [Shard]

-- | If set to <tt>true</tt>, more shards in the stream are available to
--   describe.
[$sel:hasMoreShards:StreamDescription'] :: StreamDescription -> Bool

-- | The current retention period, in hours. Minimum value of 24. Maximum
--   value of 168.
[$sel:retentionPeriodHours:StreamDescription'] :: StreamDescription -> Int

-- | The approximate time that the stream was created.
[$sel:streamCreationTimestamp:StreamDescription'] :: StreamDescription -> POSIX

-- | Represents the current enhanced monitoring settings of the stream.
[$sel:enhancedMonitoring:StreamDescription'] :: StreamDescription -> [EnhancedMetrics]

-- | Create a value of <a>StreamDescription</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:encryptionType:StreamDescription'</a>,
--   <a>streamDescription_encryptionType</a> - The server-side encryption
--   type used on the stream. This parameter can be one of the following
--   values:
--   
--   <ul>
--   <li><tt>NONE</tt>: Do not encrypt the records in the stream.</li>
--   <li><tt>KMS</tt>: Use server-side encryption on the records in the
--   stream using a customer-managed AWS KMS key.</li>
--   </ul>
--   
--   <a>$sel:keyId:StreamDescription'</a>, <a>streamDescription_keyId</a> -
--   The GUID for the customer-managed AWS KMS key to use for encryption.
--   This value can be a globally unique identifier, a fully specified ARN
--   to either an alias or a key, or an alias name prefixed by "alias/".You
--   can also use a master key owned by Kinesis Data Streams by specifying
--   the alias <tt>aws/kinesis</tt>.
--   
--   <ul>
--   <li>Key ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:alias/MyAliasName</tt></li>
--   <li>Globally unique key ID example:
--   <tt>12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias name example: <tt>alias/MyAliasName</tt></li>
--   <li>Master key owned by Kinesis Data Streams:
--   <tt>alias/aws/kinesis</tt></li>
--   </ul>
--   
--   <a>$sel:streamName:StreamDescription'</a>,
--   <a>streamDescription_streamName</a> - The name of the stream being
--   described.
--   
--   <a>$sel:streamARN:StreamDescription'</a>,
--   <a>streamDescription_streamARN</a> - The Amazon Resource Name (ARN)
--   for the stream being described.
--   
--   <a>$sel:streamStatus:StreamDescription'</a>,
--   <a>streamDescription_streamStatus</a> - The current status of the
--   stream being described. The stream status is one of the following
--   states:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The stream is being created. Kinesis Data
--   Streams immediately returns and sets <tt>StreamStatus</tt> to
--   <tt>CREATING</tt>.</li>
--   <li><tt>DELETING</tt> - The stream is being deleted. The specified
--   stream is in the <tt>DELETING</tt> state until Kinesis Data Streams
--   completes the deletion.</li>
--   <li><tt>ACTIVE</tt> - The stream exists and is ready for read and
--   write operations or deletion. You should perform read and write
--   operations only on an <tt>ACTIVE</tt> stream.</li>
--   <li><tt>UPDATING</tt> - Shards in the stream are being merged or
--   split. Read and write operations continue to work while the stream is
--   in the <tt>UPDATING</tt> state.</li>
--   </ul>
--   
--   <a>$sel:shards:StreamDescription'</a>, <a>streamDescription_shards</a>
--   - The shards that comprise the stream.
--   
--   <a>$sel:hasMoreShards:StreamDescription'</a>,
--   <a>streamDescription_hasMoreShards</a> - If set to <tt>true</tt>, more
--   shards in the stream are available to describe.
--   
--   <a>$sel:retentionPeriodHours:StreamDescription'</a>,
--   <a>streamDescription_retentionPeriodHours</a> - The current retention
--   period, in hours. Minimum value of 24. Maximum value of 168.
--   
--   <a>$sel:streamCreationTimestamp:StreamDescription'</a>,
--   <a>streamDescription_streamCreationTimestamp</a> - The approximate
--   time that the stream was created.
--   
--   <a>$sel:enhancedMonitoring:StreamDescription'</a>,
--   <a>streamDescription_enhancedMonitoring</a> - Represents the current
--   enhanced monitoring settings of the stream.
newStreamDescription :: Text -> Text -> StreamStatus -> Bool -> Int -> UTCTime -> StreamDescription

-- | The server-side encryption type used on the stream. This parameter can
--   be one of the following values:
--   
--   <ul>
--   <li><tt>NONE</tt>: Do not encrypt the records in the stream.</li>
--   <li><tt>KMS</tt>: Use server-side encryption on the records in the
--   stream using a customer-managed AWS KMS key.</li>
--   </ul>
streamDescription_encryptionType :: Lens' StreamDescription (Maybe EncryptionType)

-- | The GUID for the customer-managed AWS KMS key to use for encryption.
--   This value can be a globally unique identifier, a fully specified ARN
--   to either an alias or a key, or an alias name prefixed by "alias/".You
--   can also use a master key owned by Kinesis Data Streams by specifying
--   the alias <tt>aws/kinesis</tt>.
--   
--   <ul>
--   <li>Key ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:alias/MyAliasName</tt></li>
--   <li>Globally unique key ID example:
--   <tt>12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias name example: <tt>alias/MyAliasName</tt></li>
--   <li>Master key owned by Kinesis Data Streams:
--   <tt>alias/aws/kinesis</tt></li>
--   </ul>
streamDescription_keyId :: Lens' StreamDescription (Maybe Text)

-- | The name of the stream being described.
streamDescription_streamName :: Lens' StreamDescription Text

-- | The Amazon Resource Name (ARN) for the stream being described.
streamDescription_streamARN :: Lens' StreamDescription Text

-- | The current status of the stream being described. The stream status is
--   one of the following states:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The stream is being created. Kinesis Data
--   Streams immediately returns and sets <tt>StreamStatus</tt> to
--   <tt>CREATING</tt>.</li>
--   <li><tt>DELETING</tt> - The stream is being deleted. The specified
--   stream is in the <tt>DELETING</tt> state until Kinesis Data Streams
--   completes the deletion.</li>
--   <li><tt>ACTIVE</tt> - The stream exists and is ready for read and
--   write operations or deletion. You should perform read and write
--   operations only on an <tt>ACTIVE</tt> stream.</li>
--   <li><tt>UPDATING</tt> - Shards in the stream are being merged or
--   split. Read and write operations continue to work while the stream is
--   in the <tt>UPDATING</tt> state.</li>
--   </ul>
streamDescription_streamStatus :: Lens' StreamDescription StreamStatus

-- | The shards that comprise the stream.
streamDescription_shards :: Lens' StreamDescription [Shard]

-- | If set to <tt>true</tt>, more shards in the stream are available to
--   describe.
streamDescription_hasMoreShards :: Lens' StreamDescription Bool

-- | The current retention period, in hours. Minimum value of 24. Maximum
--   value of 168.
streamDescription_retentionPeriodHours :: Lens' StreamDescription Int

-- | The approximate time that the stream was created.
streamDescription_streamCreationTimestamp :: Lens' StreamDescription UTCTime

-- | Represents the current enhanced monitoring settings of the stream.
streamDescription_enhancedMonitoring :: Lens' StreamDescription [EnhancedMetrics]
instance GHC.Generics.Generic Amazonka.Kinesis.Types.StreamDescription.StreamDescription
instance GHC.Show.Show Amazonka.Kinesis.Types.StreamDescription.StreamDescription
instance GHC.Read.Read Amazonka.Kinesis.Types.StreamDescription.StreamDescription
instance GHC.Classes.Eq Amazonka.Kinesis.Types.StreamDescription.StreamDescription
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.Kinesis.Types.StreamDescription.StreamDescription
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.Types.StreamDescription.StreamDescription
instance Control.DeepSeq.NFData Amazonka.Kinesis.Types.StreamDescription.StreamDescription


module Amazonka.Kinesis.Types.SubscribeToShardEvent

-- | After you call SubscribeToShard, Kinesis Data Streams sends events of
--   this type over an HTTP/2 connection to your consumer.
--   
--   <i>See:</i> <a>newSubscribeToShardEvent</a> smart constructor.
data SubscribeToShardEvent
SubscribeToShardEvent' :: Maybe [ChildShard] -> [Record] -> Text -> Natural -> SubscribeToShardEvent
[$sel:childShards:SubscribeToShardEvent'] :: SubscribeToShardEvent -> Maybe [ChildShard]
[$sel:records:SubscribeToShardEvent'] :: SubscribeToShardEvent -> [Record]

-- | Use this as <tt>SequenceNumber</tt> in the next call to
--   SubscribeToShard, with <tt>StartingPosition</tt> set to
--   <tt>AT_SEQUENCE_NUMBER</tt> or <tt>AFTER_SEQUENCE_NUMBER</tt>. Use
--   <tt>ContinuationSequenceNumber</tt> for checkpointing because it
--   captures your shard progress even when no data is written to the
--   shard.
[$sel:continuationSequenceNumber:SubscribeToShardEvent'] :: SubscribeToShardEvent -> Text

-- | The number of milliseconds the read records are from the tip of the
--   stream, indicating how far behind current time the consumer is. A
--   value of zero indicates that record processing is caught up, and there
--   are no new records to process at this moment.
[$sel:millisBehindLatest:SubscribeToShardEvent'] :: SubscribeToShardEvent -> Natural

-- | Create a value of <a>SubscribeToShardEvent</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:childShards:SubscribeToShardEvent'</a>,
--   <a>subscribeToShardEvent_childShards</a> - Undocumented member.
--   
--   <a>$sel:records:SubscribeToShardEvent'</a>,
--   <a>subscribeToShardEvent_records</a> -
--   
--   <a>$sel:continuationSequenceNumber:SubscribeToShardEvent'</a>,
--   <a>subscribeToShardEvent_continuationSequenceNumber</a> - Use this as
--   <tt>SequenceNumber</tt> in the next call to SubscribeToShard, with
--   <tt>StartingPosition</tt> set to <tt>AT_SEQUENCE_NUMBER</tt> or
--   <tt>AFTER_SEQUENCE_NUMBER</tt>. Use
--   <tt>ContinuationSequenceNumber</tt> for checkpointing because it
--   captures your shard progress even when no data is written to the
--   shard.
--   
--   <a>$sel:millisBehindLatest:SubscribeToShardEvent'</a>,
--   <a>subscribeToShardEvent_millisBehindLatest</a> - The number of
--   milliseconds the read records are from the tip of the stream,
--   indicating how far behind current time the consumer is. A value of
--   zero indicates that record processing is caught up, and there are no
--   new records to process at this moment.
newSubscribeToShardEvent :: Text -> Natural -> SubscribeToShardEvent

-- | Undocumented member.
subscribeToShardEvent_childShards :: Lens' SubscribeToShardEvent (Maybe [ChildShard])

subscribeToShardEvent_records :: Lens' SubscribeToShardEvent [Record]

-- | Use this as <tt>SequenceNumber</tt> in the next call to
--   SubscribeToShard, with <tt>StartingPosition</tt> set to
--   <tt>AT_SEQUENCE_NUMBER</tt> or <tt>AFTER_SEQUENCE_NUMBER</tt>. Use
--   <tt>ContinuationSequenceNumber</tt> for checkpointing because it
--   captures your shard progress even when no data is written to the
--   shard.
subscribeToShardEvent_continuationSequenceNumber :: Lens' SubscribeToShardEvent Text

-- | The number of milliseconds the read records are from the tip of the
--   stream, indicating how far behind current time the consumer is. A
--   value of zero indicates that record processing is caught up, and there
--   are no new records to process at this moment.
subscribeToShardEvent_millisBehindLatest :: Lens' SubscribeToShardEvent Natural
instance GHC.Generics.Generic Amazonka.Kinesis.Types.SubscribeToShardEvent.SubscribeToShardEvent
instance GHC.Show.Show Amazonka.Kinesis.Types.SubscribeToShardEvent.SubscribeToShardEvent
instance GHC.Read.Read Amazonka.Kinesis.Types.SubscribeToShardEvent.SubscribeToShardEvent
instance GHC.Classes.Eq Amazonka.Kinesis.Types.SubscribeToShardEvent.SubscribeToShardEvent
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.Kinesis.Types.SubscribeToShardEvent.SubscribeToShardEvent
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.Types.SubscribeToShardEvent.SubscribeToShardEvent
instance Control.DeepSeq.NFData Amazonka.Kinesis.Types.SubscribeToShardEvent.SubscribeToShardEvent


module Amazonka.Kinesis.Types.Tag

-- | Metadata assigned to the stream, consisting of a key-value pair.
--   
--   <i>See:</i> <a>newTag</a> smart constructor.
data Tag
Tag' :: Maybe Text -> Text -> Tag

-- | An optional string, typically used to describe or define the tag.
--   Maximum length: 256 characters. Valid characters: Unicode letters,
--   digits, white space, _ . / = + - % @
[$sel:value:Tag'] :: Tag -> Maybe Text

-- | A unique identifier for the tag. Maximum length: 128 characters. Valid
--   characters: Unicode letters, digits, white space, _ . / = + - % @
[$sel:key:Tag'] :: Tag -> Text

-- | Create a value of <a>Tag</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:Tag'</a>, <a>tag_value</a> - An optional string,
--   typically used to describe or define the tag. Maximum length: 256
--   characters. Valid characters: Unicode letters, digits, white space, _
--   . / = + - % @
--   
--   <a>$sel:key:Tag'</a>, <a>tag_key</a> - A unique identifier for the
--   tag. Maximum length: 128 characters. Valid characters: Unicode
--   letters, digits, white space, _ . / = + - % @
newTag :: Text -> Tag

-- | An optional string, typically used to describe or define the tag.
--   Maximum length: 256 characters. Valid characters: Unicode letters,
--   digits, white space, _ . / = + - % @
tag_value :: Lens' Tag (Maybe Text)

-- | A unique identifier for the tag. Maximum length: 128 characters. Valid
--   characters: Unicode letters, digits, white space, _ . / = + - % @
tag_key :: Lens' Tag Text
instance GHC.Generics.Generic Amazonka.Kinesis.Types.Tag.Tag
instance GHC.Show.Show Amazonka.Kinesis.Types.Tag.Tag
instance GHC.Read.Read Amazonka.Kinesis.Types.Tag.Tag
instance GHC.Classes.Eq Amazonka.Kinesis.Types.Tag.Tag
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.Kinesis.Types.Tag.Tag
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.Types.Tag.Tag
instance Control.DeepSeq.NFData Amazonka.Kinesis.Types.Tag.Tag


module Amazonka.Kinesis.Types

-- | API version <tt>2013-12-02</tt> of the Amazon Kinesis SDK
--   configuration.
defaultService :: Service

-- | The request was rejected because the state of the specified resource
--   isn't valid for this request. For more information, see <a>How Key
--   State Affects Use of a Customer Master Key</a> in the <i>AWS Key
--   Management Service Developer Guide</i>.
_KMSInvalidStateException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was denied due to request throttling. For more information
--   about throttling, see <a>Limits</a> in the <i>AWS Key Management
--   Service Developer Guide</i>.
_KMSThrottlingException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The provided iterator exceeds the maximum age allowed.
_ExpiredIteratorException :: AsError a => Getting (First ServiceError) a ServiceError

-- | A specified parameter exceeds its restrictions, is not supported, or
--   can't be used. For more information, see the returned message.
_InvalidArgumentException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The AWS access key ID needs a subscription for the service.
_KMSOptInRequired :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request rate for the stream is too high, or the requested data is
--   too large for the available throughput. Reduce the frequency or size
--   of your requests. For more information, see <a>Streams Limits</a> in
--   the <i>Amazon Kinesis Data Streams Developer Guide</i>, and <a>Error
--   Retries and Exponential Backoff in AWS</a> in the <i>AWS General
--   Reference</i>.
_ProvisionedThroughputExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the specified entity or resource
--   can't be found.
_KMSNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The pagination token passed to the operation is expired.
_ExpiredNextTokenException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the specified customer master key
--   (CMK) isn't enabled.
_KMSDisabledException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The processing of the request failed because of an unknown error,
--   exception, or failure.
_InternalFailureException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The requested resource could not be found. The stream might not be
--   specified correctly.
_ResourceNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The ciphertext references a key that doesn't exist or that you don't
--   have access to.
_KMSAccessDeniedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The requested resource exceeds the maximum number allowed, or the
--   number of concurrent stream requests exceeds the maximum number
--   allowed.
_LimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The resource is not available for this operation. For successful
--   operation, the resource must be in the <tt>ACTIVE</tt> state.
_ResourceInUseException :: AsError a => Getting (First ServiceError) a ServiceError
newtype ConsumerStatus
ConsumerStatus' :: Text -> ConsumerStatus
[fromConsumerStatus] :: ConsumerStatus -> Text
pattern ConsumerStatus_ACTIVE :: ConsumerStatus
pattern ConsumerStatus_CREATING :: ConsumerStatus
pattern ConsumerStatus_DELETING :: ConsumerStatus
newtype EncryptionType
EncryptionType' :: Text -> EncryptionType
[fromEncryptionType] :: EncryptionType -> Text
pattern EncryptionType_KMS :: EncryptionType
pattern EncryptionType_NONE :: EncryptionType
newtype MetricsName
MetricsName' :: Text -> MetricsName
[fromMetricsName] :: MetricsName -> Text
pattern MetricsName_ALL :: MetricsName
pattern MetricsName_IncomingBytes :: MetricsName
pattern MetricsName_IncomingRecords :: MetricsName
pattern MetricsName_IteratorAgeMilliseconds :: MetricsName
pattern MetricsName_OutgoingBytes :: MetricsName
pattern MetricsName_OutgoingRecords :: MetricsName
pattern MetricsName_ReadProvisionedThroughputExceeded :: MetricsName
pattern MetricsName_WriteProvisionedThroughputExceeded :: MetricsName
newtype ScalingType
ScalingType' :: Text -> ScalingType
[fromScalingType] :: ScalingType -> Text
pattern ScalingType_UNIFORM_SCALING :: ScalingType
newtype ShardFilterType
ShardFilterType' :: Text -> ShardFilterType
[fromShardFilterType] :: ShardFilterType -> Text
pattern ShardFilterType_AFTER_SHARD_ID :: ShardFilterType
pattern ShardFilterType_AT_LATEST :: ShardFilterType
pattern ShardFilterType_AT_TIMESTAMP :: ShardFilterType
pattern ShardFilterType_AT_TRIM_HORIZON :: ShardFilterType
pattern ShardFilterType_FROM_TIMESTAMP :: ShardFilterType
pattern ShardFilterType_FROM_TRIM_HORIZON :: ShardFilterType
newtype ShardIteratorType
ShardIteratorType' :: Text -> ShardIteratorType
[fromShardIteratorType] :: ShardIteratorType -> Text
pattern ShardIteratorType_AFTER_SEQUENCE_NUMBER :: ShardIteratorType
pattern ShardIteratorType_AT_SEQUENCE_NUMBER :: ShardIteratorType
pattern ShardIteratorType_AT_TIMESTAMP :: ShardIteratorType
pattern ShardIteratorType_LATEST :: ShardIteratorType
pattern ShardIteratorType_TRIM_HORIZON :: ShardIteratorType
newtype StreamStatus
StreamStatus' :: Text -> StreamStatus
[fromStreamStatus] :: StreamStatus -> Text
pattern StreamStatus_ACTIVE :: StreamStatus
pattern StreamStatus_CREATING :: StreamStatus
pattern StreamStatus_DELETING :: StreamStatus
pattern StreamStatus_UPDATING :: StreamStatus

-- | <i>See:</i> <a>newChildShard</a> smart constructor.
data ChildShard
ChildShard' :: Text -> [Text] -> HashKeyRange -> ChildShard
[$sel:shardId:ChildShard'] :: ChildShard -> Text
[$sel:parentShards:ChildShard'] :: ChildShard -> [Text]
[$sel:hashKeyRange:ChildShard'] :: ChildShard -> HashKeyRange

-- | Create a value of <a>ChildShard</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:shardId:ChildShard'</a>, <a>childShard_shardId</a> -
--   Undocumented member.
--   
--   <a>$sel:parentShards:ChildShard'</a>, <a>childShard_parentShards</a> -
--   Undocumented member.
--   
--   <a>$sel:hashKeyRange:ChildShard'</a>, <a>childShard_hashKeyRange</a> -
--   Undocumented member.
newChildShard :: Text -> HashKeyRange -> ChildShard

-- | Undocumented member.
childShard_shardId :: Lens' ChildShard Text

-- | Undocumented member.
childShard_parentShards :: Lens' ChildShard [Text]

-- | Undocumented member.
childShard_hashKeyRange :: Lens' ChildShard HashKeyRange

-- | An object that represents the details of the consumer you registered.
--   This type of object is returned by RegisterStreamConsumer.
--   
--   <i>See:</i> <a>newConsumer</a> smart constructor.
data Consumer
Consumer' :: Text -> Text -> ConsumerStatus -> POSIX -> Consumer

-- | The name of the consumer is something you choose when you register the
--   consumer.
[$sel:consumerName:Consumer'] :: Consumer -> Text

-- | When you register a consumer, Kinesis Data Streams generates an ARN
--   for it. You need this ARN to be able to call SubscribeToShard.
--   
--   If you delete a consumer and then create a new one with the same name,
--   it won't have the same ARN. That's because consumer ARNs contain the
--   creation timestamp. This is important to keep in mind if you have IAM
--   policies that reference consumer ARNs.
[$sel:consumerARN:Consumer'] :: Consumer -> Text

-- | A consumer can't read data while in the <tt>CREATING</tt> or
--   <tt>DELETING</tt> states.
[$sel:consumerStatus:Consumer'] :: Consumer -> ConsumerStatus
[$sel:consumerCreationTimestamp:Consumer'] :: Consumer -> POSIX

-- | Create a value of <a>Consumer</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:consumerName:Consumer'</a>, <a>consumer_consumerName</a> - The
--   name of the consumer is something you choose when you register the
--   consumer.
--   
--   <a>$sel:consumerARN:Consumer'</a>, <a>consumer_consumerARN</a> - When
--   you register a consumer, Kinesis Data Streams generates an ARN for it.
--   You need this ARN to be able to call SubscribeToShard.
--   
--   If you delete a consumer and then create a new one with the same name,
--   it won't have the same ARN. That's because consumer ARNs contain the
--   creation timestamp. This is important to keep in mind if you have IAM
--   policies that reference consumer ARNs.
--   
--   <a>$sel:consumerStatus:Consumer'</a>, <a>consumer_consumerStatus</a> -
--   A consumer can't read data while in the <tt>CREATING</tt> or
--   <tt>DELETING</tt> states.
--   
--   <a>$sel:consumerCreationTimestamp:Consumer'</a>,
--   <a>consumer_consumerCreationTimestamp</a> -
newConsumer :: Text -> Text -> ConsumerStatus -> UTCTime -> Consumer

-- | The name of the consumer is something you choose when you register the
--   consumer.
consumer_consumerName :: Lens' Consumer Text

-- | When you register a consumer, Kinesis Data Streams generates an ARN
--   for it. You need this ARN to be able to call SubscribeToShard.
--   
--   If you delete a consumer and then create a new one with the same name,
--   it won't have the same ARN. That's because consumer ARNs contain the
--   creation timestamp. This is important to keep in mind if you have IAM
--   policies that reference consumer ARNs.
consumer_consumerARN :: Lens' Consumer Text

-- | A consumer can't read data while in the <tt>CREATING</tt> or
--   <tt>DELETING</tt> states.
consumer_consumerStatus :: Lens' Consumer ConsumerStatus

consumer_consumerCreationTimestamp :: Lens' Consumer UTCTime

-- | An object that represents the details of a registered consumer. This
--   type of object is returned by DescribeStreamConsumer.
--   
--   <i>See:</i> <a>newConsumerDescription</a> smart constructor.
data ConsumerDescription
ConsumerDescription' :: Text -> Text -> ConsumerStatus -> POSIX -> Text -> ConsumerDescription

-- | The name of the consumer is something you choose when you register the
--   consumer.
[$sel:consumerName:ConsumerDescription'] :: ConsumerDescription -> Text

-- | When you register a consumer, Kinesis Data Streams generates an ARN
--   for it. You need this ARN to be able to call SubscribeToShard.
--   
--   If you delete a consumer and then create a new one with the same name,
--   it won't have the same ARN. That's because consumer ARNs contain the
--   creation timestamp. This is important to keep in mind if you have IAM
--   policies that reference consumer ARNs.
[$sel:consumerARN:ConsumerDescription'] :: ConsumerDescription -> Text

-- | A consumer can't read data while in the <tt>CREATING</tt> or
--   <tt>DELETING</tt> states.
[$sel:consumerStatus:ConsumerDescription'] :: ConsumerDescription -> ConsumerStatus
[$sel:consumerCreationTimestamp:ConsumerDescription'] :: ConsumerDescription -> POSIX

-- | The ARN of the stream with which you registered the consumer.
[$sel:streamARN:ConsumerDescription'] :: ConsumerDescription -> Text

-- | Create a value of <a>ConsumerDescription</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:consumerName:ConsumerDescription'</a>,
--   <a>consumerDescription_consumerName</a> - The name of the consumer is
--   something you choose when you register the consumer.
--   
--   <a>$sel:consumerARN:ConsumerDescription'</a>,
--   <a>consumerDescription_consumerARN</a> - When you register a consumer,
--   Kinesis Data Streams generates an ARN for it. You need this ARN to be
--   able to call SubscribeToShard.
--   
--   If you delete a consumer and then create a new one with the same name,
--   it won't have the same ARN. That's because consumer ARNs contain the
--   creation timestamp. This is important to keep in mind if you have IAM
--   policies that reference consumer ARNs.
--   
--   <a>$sel:consumerStatus:ConsumerDescription'</a>,
--   <a>consumerDescription_consumerStatus</a> - A consumer can't read data
--   while in the <tt>CREATING</tt> or <tt>DELETING</tt> states.
--   
--   <a>$sel:consumerCreationTimestamp:ConsumerDescription'</a>,
--   <a>consumerDescription_consumerCreationTimestamp</a> -
--   
--   <a>$sel:streamARN:ConsumerDescription'</a>,
--   <a>consumerDescription_streamARN</a> - The ARN of the stream with
--   which you registered the consumer.
newConsumerDescription :: Text -> Text -> ConsumerStatus -> UTCTime -> Text -> ConsumerDescription

-- | The name of the consumer is something you choose when you register the
--   consumer.
consumerDescription_consumerName :: Lens' ConsumerDescription Text

-- | When you register a consumer, Kinesis Data Streams generates an ARN
--   for it. You need this ARN to be able to call SubscribeToShard.
--   
--   If you delete a consumer and then create a new one with the same name,
--   it won't have the same ARN. That's because consumer ARNs contain the
--   creation timestamp. This is important to keep in mind if you have IAM
--   policies that reference consumer ARNs.
consumerDescription_consumerARN :: Lens' ConsumerDescription Text

-- | A consumer can't read data while in the <tt>CREATING</tt> or
--   <tt>DELETING</tt> states.
consumerDescription_consumerStatus :: Lens' ConsumerDescription ConsumerStatus

consumerDescription_consumerCreationTimestamp :: Lens' ConsumerDescription UTCTime

-- | The ARN of the stream with which you registered the consumer.
consumerDescription_streamARN :: Lens' ConsumerDescription Text

-- | Represents enhanced metrics types.
--   
--   <i>See:</i> <a>newEnhancedMetrics</a> smart constructor.
data EnhancedMetrics
EnhancedMetrics' :: Maybe [MetricsName] -> EnhancedMetrics

-- | List of shard-level metrics.
--   
--   The following are the valid shard-level metrics. The value
--   "<tt>ALL</tt>" enhances every metric.
--   
--   <ul>
--   <li><pre>IncomingBytes</pre></li>
--   <li><pre>IncomingRecords</pre></li>
--   <li><pre>OutgoingBytes</pre></li>
--   <li><pre>OutgoingRecords</pre></li>
--   <li><pre>WriteProvisionedThroughputExceeded</pre></li>
--   <li><pre>ReadProvisionedThroughputExceeded</pre></li>
--   <li><pre>IteratorAgeMilliseconds</pre></li>
--   <li><pre>ALL</pre></li>
--   </ul>
--   
--   For more information, see <a>Monitoring the Amazon Kinesis Data
--   Streams Service with Amazon CloudWatch</a> in the <i>Amazon Kinesis
--   Data Streams Developer Guide</i>.
[$sel:shardLevelMetrics:EnhancedMetrics'] :: EnhancedMetrics -> Maybe [MetricsName]

-- | Create a value of <a>EnhancedMetrics</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:shardLevelMetrics:EnhancedMetrics'</a>,
--   <a>enhancedMetrics_shardLevelMetrics</a> - List of shard-level
--   metrics.
--   
--   The following are the valid shard-level metrics. The value
--   "<tt>ALL</tt>" enhances every metric.
--   
--   <ul>
--   <li><pre>IncomingBytes</pre></li>
--   <li><pre>IncomingRecords</pre></li>
--   <li><pre>OutgoingBytes</pre></li>
--   <li><pre>OutgoingRecords</pre></li>
--   <li><pre>WriteProvisionedThroughputExceeded</pre></li>
--   <li><pre>ReadProvisionedThroughputExceeded</pre></li>
--   <li><pre>IteratorAgeMilliseconds</pre></li>
--   <li><pre>ALL</pre></li>
--   </ul>
--   
--   For more information, see <a>Monitoring the Amazon Kinesis Data
--   Streams Service with Amazon CloudWatch</a> in the <i>Amazon Kinesis
--   Data Streams Developer Guide</i>.
newEnhancedMetrics :: EnhancedMetrics

-- | List of shard-level metrics.
--   
--   The following are the valid shard-level metrics. The value
--   "<tt>ALL</tt>" enhances every metric.
--   
--   <ul>
--   <li><pre>IncomingBytes</pre></li>
--   <li><pre>IncomingRecords</pre></li>
--   <li><pre>OutgoingBytes</pre></li>
--   <li><pre>OutgoingRecords</pre></li>
--   <li><pre>WriteProvisionedThroughputExceeded</pre></li>
--   <li><pre>ReadProvisionedThroughputExceeded</pre></li>
--   <li><pre>IteratorAgeMilliseconds</pre></li>
--   <li><pre>ALL</pre></li>
--   </ul>
--   
--   For more information, see <a>Monitoring the Amazon Kinesis Data
--   Streams Service with Amazon CloudWatch</a> in the <i>Amazon Kinesis
--   Data Streams Developer Guide</i>.
enhancedMetrics_shardLevelMetrics :: Lens' EnhancedMetrics (Maybe [MetricsName])

-- | Represents the output for EnableEnhancedMonitoring and
--   DisableEnhancedMonitoring.
--   
--   <i>See:</i> <a>newEnhancedMonitoringOutput</a> smart constructor.
data EnhancedMonitoringOutput
EnhancedMonitoringOutput' :: Maybe [MetricsName] -> Maybe [MetricsName] -> Maybe Text -> EnhancedMonitoringOutput

-- | Represents the list of all the metrics that would be in the enhanced
--   state after the operation.
[$sel:desiredShardLevelMetrics:EnhancedMonitoringOutput'] :: EnhancedMonitoringOutput -> Maybe [MetricsName]

-- | Represents the current state of the metrics that are in the enhanced
--   state before the operation.
[$sel:currentShardLevelMetrics:EnhancedMonitoringOutput'] :: EnhancedMonitoringOutput -> Maybe [MetricsName]

-- | The name of the Kinesis data stream.
[$sel:streamName:EnhancedMonitoringOutput'] :: EnhancedMonitoringOutput -> Maybe Text

-- | Create a value of <a>EnhancedMonitoringOutput</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:desiredShardLevelMetrics:EnhancedMonitoringOutput'</a>,
--   <a>enhancedMonitoringOutput_desiredShardLevelMetrics</a> - Represents
--   the list of all the metrics that would be in the enhanced state after
--   the operation.
--   
--   <a>$sel:currentShardLevelMetrics:EnhancedMonitoringOutput'</a>,
--   <a>enhancedMonitoringOutput_currentShardLevelMetrics</a> - Represents
--   the current state of the metrics that are in the enhanced state before
--   the operation.
--   
--   <a>$sel:streamName:EnhancedMonitoringOutput'</a>,
--   <a>enhancedMonitoringOutput_streamName</a> - The name of the Kinesis
--   data stream.
newEnhancedMonitoringOutput :: EnhancedMonitoringOutput

-- | Represents the list of all the metrics that would be in the enhanced
--   state after the operation.
enhancedMonitoringOutput_desiredShardLevelMetrics :: Lens' EnhancedMonitoringOutput (Maybe [MetricsName])

-- | Represents the current state of the metrics that are in the enhanced
--   state before the operation.
enhancedMonitoringOutput_currentShardLevelMetrics :: Lens' EnhancedMonitoringOutput (Maybe [MetricsName])

-- | The name of the Kinesis data stream.
enhancedMonitoringOutput_streamName :: Lens' EnhancedMonitoringOutput (Maybe Text)

-- | The range of possible hash key values for the shard, which is a set of
--   ordered contiguous positive integers.
--   
--   <i>See:</i> <a>newHashKeyRange</a> smart constructor.
data HashKeyRange
HashKeyRange' :: Text -> Text -> HashKeyRange

-- | The starting hash key of the hash key range.
[$sel:startingHashKey:HashKeyRange'] :: HashKeyRange -> Text

-- | The ending hash key of the hash key range.
[$sel:endingHashKey:HashKeyRange'] :: HashKeyRange -> Text

-- | Create a value of <a>HashKeyRange</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:startingHashKey:HashKeyRange'</a>,
--   <a>hashKeyRange_startingHashKey</a> - The starting hash key of the
--   hash key range.
--   
--   <a>$sel:endingHashKey:HashKeyRange'</a>,
--   <a>hashKeyRange_endingHashKey</a> - The ending hash key of the hash
--   key range.
newHashKeyRange :: Text -> Text -> HashKeyRange

-- | The starting hash key of the hash key range.
hashKeyRange_startingHashKey :: Lens' HashKeyRange Text

-- | The ending hash key of the hash key range.
hashKeyRange_endingHashKey :: Lens' HashKeyRange Text

-- | Represents the output for <tt>PutRecords</tt>.
--   
--   <i>See:</i> <a>newPutRecordsRequestEntry</a> smart constructor.
data PutRecordsRequestEntry
PutRecordsRequestEntry' :: Maybe Text -> Base64 -> Text -> PutRecordsRequestEntry

-- | The hash value used to determine explicitly the shard that the data
--   record is assigned to by overriding the partition key hash.
[$sel:explicitHashKey:PutRecordsRequestEntry'] :: PutRecordsRequestEntry -> Maybe Text

-- | The data blob to put into the record, which is base64-encoded when the
--   blob is serialized. When the data blob (the payload before
--   base64-encoding) is added to the partition key size, the total size
--   must not exceed the maximum record size (1 MiB).
[$sel:data':PutRecordsRequestEntry'] :: PutRecordsRequestEntry -> Base64

-- | Determines which shard in the stream the data record is assigned to.
--   Partition keys are Unicode strings with a maximum length limit of 256
--   characters for each key. Amazon Kinesis Data Streams uses the
--   partition key as input to a hash function that maps the partition key
--   and associated data to a specific shard. Specifically, an MD5 hash
--   function is used to map partition keys to 128-bit integer values and
--   to map associated data records to shards. As a result of this hashing
--   mechanism, all data records with the same partition key map to the
--   same shard within the stream.
[$sel:partitionKey:PutRecordsRequestEntry'] :: PutRecordsRequestEntry -> Text

-- | Create a value of <a>PutRecordsRequestEntry</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:explicitHashKey:PutRecordsRequestEntry'</a>,
--   <a>putRecordsRequestEntry_explicitHashKey</a> - The hash value used to
--   determine explicitly the shard that the data record is assigned to by
--   overriding the partition key hash.
--   
--   <a>$sel:data':PutRecordsRequestEntry'</a>,
--   <a>putRecordsRequestEntry_data</a> - The data blob to put into the
--   record, which is base64-encoded when the blob is serialized. When the
--   data blob (the payload before base64-encoding) is added to the
--   partition key size, the total size must not exceed the maximum record
--   size (1 MiB).-- -- <i>Note:</i> This <tt>Lens</tt> automatically
--   encodes and decodes Base64 data. -- The underlying isomorphism will
--   encode to Base64 representation during -- serialisation, and decode
--   from Base64 representation during deserialisation. -- This
--   <tt>Lens</tt> accepts and returns only raw unencoded data.
--   
--   <a>$sel:partitionKey:PutRecordsRequestEntry'</a>,
--   <a>putRecordsRequestEntry_partitionKey</a> - Determines which shard in
--   the stream the data record is assigned to. Partition keys are Unicode
--   strings with a maximum length limit of 256 characters for each key.
--   Amazon Kinesis Data Streams uses the partition key as input to a hash
--   function that maps the partition key and associated data to a specific
--   shard. Specifically, an MD5 hash function is used to map partition
--   keys to 128-bit integer values and to map associated data records to
--   shards. As a result of this hashing mechanism, all data records with
--   the same partition key map to the same shard within the stream.
newPutRecordsRequestEntry :: ByteString -> Text -> PutRecordsRequestEntry

-- | The hash value used to determine explicitly the shard that the data
--   record is assigned to by overriding the partition key hash.
putRecordsRequestEntry_explicitHashKey :: Lens' PutRecordsRequestEntry (Maybe Text)

-- | The data blob to put into the record, which is base64-encoded when the
--   blob is serialized. When the data blob (the payload before
--   base64-encoding) is added to the partition key size, the total size
--   must not exceed the maximum record size (1 MiB).-- -- <i>Note:</i>
--   This <tt>Lens</tt> automatically encodes and decodes Base64 data. --
--   The underlying isomorphism will encode to Base64 representation during
--   -- serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
putRecordsRequestEntry_data :: Lens' PutRecordsRequestEntry ByteString

-- | Determines which shard in the stream the data record is assigned to.
--   Partition keys are Unicode strings with a maximum length limit of 256
--   characters for each key. Amazon Kinesis Data Streams uses the
--   partition key as input to a hash function that maps the partition key
--   and associated data to a specific shard. Specifically, an MD5 hash
--   function is used to map partition keys to 128-bit integer values and
--   to map associated data records to shards. As a result of this hashing
--   mechanism, all data records with the same partition key map to the
--   same shard within the stream.
putRecordsRequestEntry_partitionKey :: Lens' PutRecordsRequestEntry Text

-- | Represents the result of an individual record from a
--   <tt>PutRecords</tt> request. A record that is successfully added to a
--   stream includes <tt>SequenceNumber</tt> and <tt>ShardId</tt> in the
--   result. A record that fails to be added to the stream includes
--   <tt>ErrorCode</tt> and <tt>ErrorMessage</tt> in the result.
--   
--   <i>See:</i> <a>newPutRecordsResultEntry</a> smart constructor.
data PutRecordsResultEntry
PutRecordsResultEntry' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> PutRecordsResultEntry

-- | The sequence number for an individual record result.
[$sel:sequenceNumber:PutRecordsResultEntry'] :: PutRecordsResultEntry -> Maybe Text

-- | The error code for an individual record result. <tt>ErrorCodes</tt>
--   can be either <tt>ProvisionedThroughputExceededException</tt> or
--   <tt>InternalFailure</tt>.
[$sel:errorCode:PutRecordsResultEntry'] :: PutRecordsResultEntry -> Maybe Text

-- | The error message for an individual record result. An
--   <tt>ErrorCode</tt> value of
--   <tt>ProvisionedThroughputExceededException</tt> has an error message
--   that includes the account ID, stream name, and shard ID. An
--   <tt>ErrorCode</tt> value of <tt>InternalFailure</tt> has the error
--   message <tt>"Internal Service Failure"</tt>.
[$sel:errorMessage:PutRecordsResultEntry'] :: PutRecordsResultEntry -> Maybe Text

-- | The shard ID for an individual record result.
[$sel:shardId:PutRecordsResultEntry'] :: PutRecordsResultEntry -> Maybe Text

-- | Create a value of <a>PutRecordsResultEntry</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:sequenceNumber:PutRecordsResultEntry'</a>,
--   <a>putRecordsResultEntry_sequenceNumber</a> - The sequence number for
--   an individual record result.
--   
--   <a>$sel:errorCode:PutRecordsResultEntry'</a>,
--   <a>putRecordsResultEntry_errorCode</a> - The error code for an
--   individual record result. <tt>ErrorCodes</tt> can be either
--   <tt>ProvisionedThroughputExceededException</tt> or
--   <tt>InternalFailure</tt>.
--   
--   <a>$sel:errorMessage:PutRecordsResultEntry'</a>,
--   <a>putRecordsResultEntry_errorMessage</a> - The error message for an
--   individual record result. An <tt>ErrorCode</tt> value of
--   <tt>ProvisionedThroughputExceededException</tt> has an error message
--   that includes the account ID, stream name, and shard ID. An
--   <tt>ErrorCode</tt> value of <tt>InternalFailure</tt> has the error
--   message <tt>"Internal Service Failure"</tt>.
--   
--   <a>$sel:shardId:PutRecordsResultEntry'</a>,
--   <a>putRecordsResultEntry_shardId</a> - The shard ID for an individual
--   record result.
newPutRecordsResultEntry :: PutRecordsResultEntry

-- | The sequence number for an individual record result.
putRecordsResultEntry_sequenceNumber :: Lens' PutRecordsResultEntry (Maybe Text)

-- | The error code for an individual record result. <tt>ErrorCodes</tt>
--   can be either <tt>ProvisionedThroughputExceededException</tt> or
--   <tt>InternalFailure</tt>.
putRecordsResultEntry_errorCode :: Lens' PutRecordsResultEntry (Maybe Text)

-- | The error message for an individual record result. An
--   <tt>ErrorCode</tt> value of
--   <tt>ProvisionedThroughputExceededException</tt> has an error message
--   that includes the account ID, stream name, and shard ID. An
--   <tt>ErrorCode</tt> value of <tt>InternalFailure</tt> has the error
--   message <tt>"Internal Service Failure"</tt>.
putRecordsResultEntry_errorMessage :: Lens' PutRecordsResultEntry (Maybe Text)

-- | The shard ID for an individual record result.
putRecordsResultEntry_shardId :: Lens' PutRecordsResultEntry (Maybe Text)

-- | The unit of data of the Kinesis data stream, which is composed of a
--   sequence number, a partition key, and a data blob.
--   
--   <i>See:</i> <a>newRecord</a> smart constructor.
data Record
Record' :: Maybe EncryptionType -> Maybe POSIX -> Text -> Base64 -> Text -> Record

-- | The encryption type used on the record. This parameter can be one of
--   the following values:
--   
--   <ul>
--   <li><tt>NONE</tt>: Do not encrypt the records in the stream.</li>
--   <li><tt>KMS</tt>: Use server-side encryption on the records in the
--   stream using a customer-managed AWS KMS key.</li>
--   </ul>
[$sel:encryptionType:Record'] :: Record -> Maybe EncryptionType

-- | The approximate time that the record was inserted into the stream.
[$sel:approximateArrivalTimestamp:Record'] :: Record -> Maybe POSIX

-- | The unique identifier of the record within its shard.
[$sel:sequenceNumber:Record'] :: Record -> Text

-- | The data blob. The data in the blob is both opaque and immutable to
--   Kinesis Data Streams, which does not inspect, interpret, or change the
--   data in the blob in any way. When the data blob (the payload before
--   base64-encoding) is added to the partition key size, the total size
--   must not exceed the maximum record size (1 MiB).
[$sel:data':Record'] :: Record -> Base64

-- | Identifies which shard in the stream the data record is assigned to.
[$sel:partitionKey:Record'] :: Record -> Text

-- | Create a value of <a>Record</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:encryptionType:Record'</a>, <a>record_encryptionType</a> - The
--   encryption type used on the record. This parameter can be one of the
--   following values:
--   
--   <ul>
--   <li><tt>NONE</tt>: Do not encrypt the records in the stream.</li>
--   <li><tt>KMS</tt>: Use server-side encryption on the records in the
--   stream using a customer-managed AWS KMS key.</li>
--   </ul>
--   
--   <a>$sel:approximateArrivalTimestamp:Record'</a>,
--   <a>record_approximateArrivalTimestamp</a> - The approximate time that
--   the record was inserted into the stream.
--   
--   <a>$sel:sequenceNumber:Record'</a>, <a>record_sequenceNumber</a> - The
--   unique identifier of the record within its shard.
--   
--   <a>$sel:data':Record'</a>, <a>record_data</a> - The data blob. The
--   data in the blob is both opaque and immutable to Kinesis Data Streams,
--   which does not inspect, interpret, or change the data in the blob in
--   any way. When the data blob (the payload before base64-encoding) is
--   added to the partition key size, the total size must not exceed the
--   maximum record size (1 MiB).-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
--   
--   <a>$sel:partitionKey:Record'</a>, <a>record_partitionKey</a> -
--   Identifies which shard in the stream the data record is assigned to.
newRecord :: Text -> ByteString -> Text -> Record

-- | The encryption type used on the record. This parameter can be one of
--   the following values:
--   
--   <ul>
--   <li><tt>NONE</tt>: Do not encrypt the records in the stream.</li>
--   <li><tt>KMS</tt>: Use server-side encryption on the records in the
--   stream using a customer-managed AWS KMS key.</li>
--   </ul>
record_encryptionType :: Lens' Record (Maybe EncryptionType)

-- | The approximate time that the record was inserted into the stream.
record_approximateArrivalTimestamp :: Lens' Record (Maybe UTCTime)

-- | The unique identifier of the record within its shard.
record_sequenceNumber :: Lens' Record Text

-- | The data blob. The data in the blob is both opaque and immutable to
--   Kinesis Data Streams, which does not inspect, interpret, or change the
--   data in the blob in any way. When the data blob (the payload before
--   base64-encoding) is added to the partition key size, the total size
--   must not exceed the maximum record size (1 MiB).-- -- <i>Note:</i>
--   This <tt>Lens</tt> automatically encodes and decodes Base64 data. --
--   The underlying isomorphism will encode to Base64 representation during
--   -- serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
record_data :: Lens' Record ByteString

-- | Identifies which shard in the stream the data record is assigned to.
record_partitionKey :: Lens' Record Text

-- | The range of possible sequence numbers for the shard.
--   
--   <i>See:</i> <a>newSequenceNumberRange</a> smart constructor.
data SequenceNumberRange
SequenceNumberRange' :: Maybe Text -> Text -> SequenceNumberRange

-- | The ending sequence number for the range. Shards that are in the OPEN
--   state have an ending sequence number of <tt>null</tt>.
[$sel:endingSequenceNumber:SequenceNumberRange'] :: SequenceNumberRange -> Maybe Text

-- | The starting sequence number for the range.
[$sel:startingSequenceNumber:SequenceNumberRange'] :: SequenceNumberRange -> Text

-- | Create a value of <a>SequenceNumberRange</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:endingSequenceNumber:SequenceNumberRange'</a>,
--   <a>sequenceNumberRange_endingSequenceNumber</a> - The ending sequence
--   number for the range. Shards that are in the OPEN state have an ending
--   sequence number of <tt>null</tt>.
--   
--   <a>$sel:startingSequenceNumber:SequenceNumberRange'</a>,
--   <a>sequenceNumberRange_startingSequenceNumber</a> - The starting
--   sequence number for the range.
newSequenceNumberRange :: Text -> SequenceNumberRange

-- | The ending sequence number for the range. Shards that are in the OPEN
--   state have an ending sequence number of <tt>null</tt>.
sequenceNumberRange_endingSequenceNumber :: Lens' SequenceNumberRange (Maybe Text)

-- | The starting sequence number for the range.
sequenceNumberRange_startingSequenceNumber :: Lens' SequenceNumberRange Text

-- | A uniquely identified group of data records in a Kinesis data stream.
--   
--   <i>See:</i> <a>newShard</a> smart constructor.
data Shard
Shard' :: Maybe Text -> Maybe Text -> Text -> HashKeyRange -> SequenceNumberRange -> Shard

-- | The shard ID of the shard adjacent to the shard's parent.
[$sel:adjacentParentShardId:Shard'] :: Shard -> Maybe Text

-- | The shard ID of the shard's parent.
[$sel:parentShardId:Shard'] :: Shard -> Maybe Text

-- | The unique identifier of the shard within the stream.
[$sel:shardId:Shard'] :: Shard -> Text

-- | The range of possible hash key values for the shard, which is a set of
--   ordered contiguous positive integers.
[$sel:hashKeyRange:Shard'] :: Shard -> HashKeyRange

-- | The range of possible sequence numbers for the shard.
[$sel:sequenceNumberRange:Shard'] :: Shard -> SequenceNumberRange

-- | Create a value of <a>Shard</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:adjacentParentShardId:Shard'</a>,
--   <a>shard_adjacentParentShardId</a> - The shard ID of the shard
--   adjacent to the shard's parent.
--   
--   <a>$sel:parentShardId:Shard'</a>, <a>shard_parentShardId</a> - The
--   shard ID of the shard's parent.
--   
--   <a>$sel:shardId:Shard'</a>, <a>shard_shardId</a> - The unique
--   identifier of the shard within the stream.
--   
--   <a>$sel:hashKeyRange:Shard'</a>, <a>shard_hashKeyRange</a> - The range
--   of possible hash key values for the shard, which is a set of ordered
--   contiguous positive integers.
--   
--   <a>$sel:sequenceNumberRange:Shard'</a>,
--   <a>shard_sequenceNumberRange</a> - The range of possible sequence
--   numbers for the shard.
newShard :: Text -> HashKeyRange -> SequenceNumberRange -> Shard

-- | The shard ID of the shard adjacent to the shard's parent.
shard_adjacentParentShardId :: Lens' Shard (Maybe Text)

-- | The shard ID of the shard's parent.
shard_parentShardId :: Lens' Shard (Maybe Text)

-- | The unique identifier of the shard within the stream.
shard_shardId :: Lens' Shard Text

-- | The range of possible hash key values for the shard, which is a set of
--   ordered contiguous positive integers.
shard_hashKeyRange :: Lens' Shard HashKeyRange

-- | The range of possible sequence numbers for the shard.
shard_sequenceNumberRange :: Lens' Shard SequenceNumberRange

-- | <i>See:</i> <a>newShardFilter</a> smart constructor.
data ShardFilter
ShardFilter' :: Maybe POSIX -> Maybe Text -> ShardFilterType -> ShardFilter
[$sel:timestamp:ShardFilter'] :: ShardFilter -> Maybe POSIX
[$sel:shardId:ShardFilter'] :: ShardFilter -> Maybe Text
[$sel:type':ShardFilter'] :: ShardFilter -> ShardFilterType

-- | Create a value of <a>ShardFilter</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:timestamp:ShardFilter'</a>, <a>shardFilter_timestamp</a> -
--   Undocumented member.
--   
--   <a>$sel:shardId:ShardFilter'</a>, <a>shardFilter_shardId</a> -
--   Undocumented member.
--   
--   <a>$sel:type':ShardFilter'</a>, <a>shardFilter_type</a> - Undocumented
--   member.
newShardFilter :: ShardFilterType -> ShardFilter

-- | Undocumented member.
shardFilter_timestamp :: Lens' ShardFilter (Maybe UTCTime)

-- | Undocumented member.
shardFilter_shardId :: Lens' ShardFilter (Maybe Text)

-- | Undocumented member.
shardFilter_type :: Lens' ShardFilter ShardFilterType

-- | <i>See:</i> <a>newStartingPosition</a> smart constructor.
data StartingPosition
StartingPosition' :: Maybe Text -> Maybe POSIX -> ShardIteratorType -> StartingPosition

-- | The sequence number of the data record in the shard from which to
--   start streaming. To specify a sequence number, set
--   <tt>StartingPosition</tt> to <tt>AT_SEQUENCE_NUMBER</tt> or
--   <tt>AFTER_SEQUENCE_NUMBER</tt>.
[$sel:sequenceNumber:StartingPosition'] :: StartingPosition -> Maybe Text

-- | The time stamp of the data record from which to start reading. To
--   specify a time stamp, set <tt>StartingPosition</tt> to <tt>Type
--   AT_TIMESTAMP</tt>. A time stamp is the Unix epoch date with precision
--   in milliseconds. For example, <tt>2016-04-04T19:58:46.480-00:00</tt>
--   or <tt>1459799926.480</tt>. If a record with this exact time stamp
--   does not exist, records will be streamed from the next (later) record.
--   If the time stamp is older than the current trim horizon, records will
--   be streamed from the oldest untrimmed data record
--   (<tt>TRIM_HORIZON</tt>).
[$sel:timestamp:StartingPosition'] :: StartingPosition -> Maybe POSIX

-- | You can set the starting position to one of the following values:
--   
--   <tt>AT_SEQUENCE_NUMBER</tt>: Start streaming from the position denoted
--   by the sequence number specified in the <tt>SequenceNumber</tt> field.
--   
--   <tt>AFTER_SEQUENCE_NUMBER</tt>: Start streaming right after the
--   position denoted by the sequence number specified in the
--   <tt>SequenceNumber</tt> field.
--   
--   <tt>AT_TIMESTAMP</tt>: Start streaming from the position denoted by
--   the time stamp specified in the <tt>Timestamp</tt> field.
--   
--   <tt>TRIM_HORIZON</tt>: Start streaming at the last untrimmed record in
--   the shard, which is the oldest data record in the shard.
--   
--   <tt>LATEST</tt>: Start streaming just after the most recent record in
--   the shard, so that you always read the most recent data in the shard.
[$sel:type':StartingPosition'] :: StartingPosition -> ShardIteratorType

-- | Create a value of <a>StartingPosition</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:sequenceNumber:StartingPosition'</a>,
--   <a>startingPosition_sequenceNumber</a> - The sequence number of the
--   data record in the shard from which to start streaming. To specify a
--   sequence number, set <tt>StartingPosition</tt> to
--   <tt>AT_SEQUENCE_NUMBER</tt> or <tt>AFTER_SEQUENCE_NUMBER</tt>.
--   
--   <a>$sel:timestamp:StartingPosition'</a>,
--   <a>startingPosition_timestamp</a> - The time stamp of the data record
--   from which to start reading. To specify a time stamp, set
--   <tt>StartingPosition</tt> to <tt>Type AT_TIMESTAMP</tt>. A time stamp
--   is the Unix epoch date with precision in milliseconds. For example,
--   <tt>2016-04-04T19:58:46.480-00:00</tt> or <tt>1459799926.480</tt>. If
--   a record with this exact time stamp does not exist, records will be
--   streamed from the next (later) record. If the time stamp is older than
--   the current trim horizon, records will be streamed from the oldest
--   untrimmed data record (<tt>TRIM_HORIZON</tt>).
--   
--   <a>$sel:type':StartingPosition'</a>, <a>startingPosition_type</a> -
--   You can set the starting position to one of the following values:
--   
--   <tt>AT_SEQUENCE_NUMBER</tt>: Start streaming from the position denoted
--   by the sequence number specified in the <tt>SequenceNumber</tt> field.
--   
--   <tt>AFTER_SEQUENCE_NUMBER</tt>: Start streaming right after the
--   position denoted by the sequence number specified in the
--   <tt>SequenceNumber</tt> field.
--   
--   <tt>AT_TIMESTAMP</tt>: Start streaming from the position denoted by
--   the time stamp specified in the <tt>Timestamp</tt> field.
--   
--   <tt>TRIM_HORIZON</tt>: Start streaming at the last untrimmed record in
--   the shard, which is the oldest data record in the shard.
--   
--   <tt>LATEST</tt>: Start streaming just after the most recent record in
--   the shard, so that you always read the most recent data in the shard.
newStartingPosition :: ShardIteratorType -> StartingPosition

-- | The sequence number of the data record in the shard from which to
--   start streaming. To specify a sequence number, set
--   <tt>StartingPosition</tt> to <tt>AT_SEQUENCE_NUMBER</tt> or
--   <tt>AFTER_SEQUENCE_NUMBER</tt>.
startingPosition_sequenceNumber :: Lens' StartingPosition (Maybe Text)

-- | The time stamp of the data record from which to start reading. To
--   specify a time stamp, set <tt>StartingPosition</tt> to <tt>Type
--   AT_TIMESTAMP</tt>. A time stamp is the Unix epoch date with precision
--   in milliseconds. For example, <tt>2016-04-04T19:58:46.480-00:00</tt>
--   or <tt>1459799926.480</tt>. If a record with this exact time stamp
--   does not exist, records will be streamed from the next (later) record.
--   If the time stamp is older than the current trim horizon, records will
--   be streamed from the oldest untrimmed data record
--   (<tt>TRIM_HORIZON</tt>).
startingPosition_timestamp :: Lens' StartingPosition (Maybe UTCTime)

-- | You can set the starting position to one of the following values:
--   
--   <tt>AT_SEQUENCE_NUMBER</tt>: Start streaming from the position denoted
--   by the sequence number specified in the <tt>SequenceNumber</tt> field.
--   
--   <tt>AFTER_SEQUENCE_NUMBER</tt>: Start streaming right after the
--   position denoted by the sequence number specified in the
--   <tt>SequenceNumber</tt> field.
--   
--   <tt>AT_TIMESTAMP</tt>: Start streaming from the position denoted by
--   the time stamp specified in the <tt>Timestamp</tt> field.
--   
--   <tt>TRIM_HORIZON</tt>: Start streaming at the last untrimmed record in
--   the shard, which is the oldest data record in the shard.
--   
--   <tt>LATEST</tt>: Start streaming just after the most recent record in
--   the shard, so that you always read the most recent data in the shard.
startingPosition_type :: Lens' StartingPosition ShardIteratorType

-- | Represents the output for DescribeStream.
--   
--   <i>See:</i> <a>newStreamDescription</a> smart constructor.
data StreamDescription
StreamDescription' :: Maybe EncryptionType -> Maybe Text -> Text -> Text -> StreamStatus -> [Shard] -> Bool -> Int -> POSIX -> [EnhancedMetrics] -> StreamDescription

-- | The server-side encryption type used on the stream. This parameter can
--   be one of the following values:
--   
--   <ul>
--   <li><tt>NONE</tt>: Do not encrypt the records in the stream.</li>
--   <li><tt>KMS</tt>: Use server-side encryption on the records in the
--   stream using a customer-managed AWS KMS key.</li>
--   </ul>
[$sel:encryptionType:StreamDescription'] :: StreamDescription -> Maybe EncryptionType

-- | The GUID for the customer-managed AWS KMS key to use for encryption.
--   This value can be a globally unique identifier, a fully specified ARN
--   to either an alias or a key, or an alias name prefixed by "alias/".You
--   can also use a master key owned by Kinesis Data Streams by specifying
--   the alias <tt>aws/kinesis</tt>.
--   
--   <ul>
--   <li>Key ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:alias/MyAliasName</tt></li>
--   <li>Globally unique key ID example:
--   <tt>12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias name example: <tt>alias/MyAliasName</tt></li>
--   <li>Master key owned by Kinesis Data Streams:
--   <tt>alias/aws/kinesis</tt></li>
--   </ul>
[$sel:keyId:StreamDescription'] :: StreamDescription -> Maybe Text

-- | The name of the stream being described.
[$sel:streamName:StreamDescription'] :: StreamDescription -> Text

-- | The Amazon Resource Name (ARN) for the stream being described.
[$sel:streamARN:StreamDescription'] :: StreamDescription -> Text

-- | The current status of the stream being described. The stream status is
--   one of the following states:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The stream is being created. Kinesis Data
--   Streams immediately returns and sets <tt>StreamStatus</tt> to
--   <tt>CREATING</tt>.</li>
--   <li><tt>DELETING</tt> - The stream is being deleted. The specified
--   stream is in the <tt>DELETING</tt> state until Kinesis Data Streams
--   completes the deletion.</li>
--   <li><tt>ACTIVE</tt> - The stream exists and is ready for read and
--   write operations or deletion. You should perform read and write
--   operations only on an <tt>ACTIVE</tt> stream.</li>
--   <li><tt>UPDATING</tt> - Shards in the stream are being merged or
--   split. Read and write operations continue to work while the stream is
--   in the <tt>UPDATING</tt> state.</li>
--   </ul>
[$sel:streamStatus:StreamDescription'] :: StreamDescription -> StreamStatus

-- | The shards that comprise the stream.
[$sel:shards:StreamDescription'] :: StreamDescription -> [Shard]

-- | If set to <tt>true</tt>, more shards in the stream are available to
--   describe.
[$sel:hasMoreShards:StreamDescription'] :: StreamDescription -> Bool

-- | The current retention period, in hours. Minimum value of 24. Maximum
--   value of 168.
[$sel:retentionPeriodHours:StreamDescription'] :: StreamDescription -> Int

-- | The approximate time that the stream was created.
[$sel:streamCreationTimestamp:StreamDescription'] :: StreamDescription -> POSIX

-- | Represents the current enhanced monitoring settings of the stream.
[$sel:enhancedMonitoring:StreamDescription'] :: StreamDescription -> [EnhancedMetrics]

-- | Create a value of <a>StreamDescription</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:encryptionType:StreamDescription'</a>,
--   <a>streamDescription_encryptionType</a> - The server-side encryption
--   type used on the stream. This parameter can be one of the following
--   values:
--   
--   <ul>
--   <li><tt>NONE</tt>: Do not encrypt the records in the stream.</li>
--   <li><tt>KMS</tt>: Use server-side encryption on the records in the
--   stream using a customer-managed AWS KMS key.</li>
--   </ul>
--   
--   <a>$sel:keyId:StreamDescription'</a>, <a>streamDescription_keyId</a> -
--   The GUID for the customer-managed AWS KMS key to use for encryption.
--   This value can be a globally unique identifier, a fully specified ARN
--   to either an alias or a key, or an alias name prefixed by "alias/".You
--   can also use a master key owned by Kinesis Data Streams by specifying
--   the alias <tt>aws/kinesis</tt>.
--   
--   <ul>
--   <li>Key ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:alias/MyAliasName</tt></li>
--   <li>Globally unique key ID example:
--   <tt>12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias name example: <tt>alias/MyAliasName</tt></li>
--   <li>Master key owned by Kinesis Data Streams:
--   <tt>alias/aws/kinesis</tt></li>
--   </ul>
--   
--   <a>$sel:streamName:StreamDescription'</a>,
--   <a>streamDescription_streamName</a> - The name of the stream being
--   described.
--   
--   <a>$sel:streamARN:StreamDescription'</a>,
--   <a>streamDescription_streamARN</a> - The Amazon Resource Name (ARN)
--   for the stream being described.
--   
--   <a>$sel:streamStatus:StreamDescription'</a>,
--   <a>streamDescription_streamStatus</a> - The current status of the
--   stream being described. The stream status is one of the following
--   states:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The stream is being created. Kinesis Data
--   Streams immediately returns and sets <tt>StreamStatus</tt> to
--   <tt>CREATING</tt>.</li>
--   <li><tt>DELETING</tt> - The stream is being deleted. The specified
--   stream is in the <tt>DELETING</tt> state until Kinesis Data Streams
--   completes the deletion.</li>
--   <li><tt>ACTIVE</tt> - The stream exists and is ready for read and
--   write operations or deletion. You should perform read and write
--   operations only on an <tt>ACTIVE</tt> stream.</li>
--   <li><tt>UPDATING</tt> - Shards in the stream are being merged or
--   split. Read and write operations continue to work while the stream is
--   in the <tt>UPDATING</tt> state.</li>
--   </ul>
--   
--   <a>$sel:shards:StreamDescription'</a>, <a>streamDescription_shards</a>
--   - The shards that comprise the stream.
--   
--   <a>$sel:hasMoreShards:StreamDescription'</a>,
--   <a>streamDescription_hasMoreShards</a> - If set to <tt>true</tt>, more
--   shards in the stream are available to describe.
--   
--   <a>$sel:retentionPeriodHours:StreamDescription'</a>,
--   <a>streamDescription_retentionPeriodHours</a> - The current retention
--   period, in hours. Minimum value of 24. Maximum value of 168.
--   
--   <a>$sel:streamCreationTimestamp:StreamDescription'</a>,
--   <a>streamDescription_streamCreationTimestamp</a> - The approximate
--   time that the stream was created.
--   
--   <a>$sel:enhancedMonitoring:StreamDescription'</a>,
--   <a>streamDescription_enhancedMonitoring</a> - Represents the current
--   enhanced monitoring settings of the stream.
newStreamDescription :: Text -> Text -> StreamStatus -> Bool -> Int -> UTCTime -> StreamDescription

-- | The server-side encryption type used on the stream. This parameter can
--   be one of the following values:
--   
--   <ul>
--   <li><tt>NONE</tt>: Do not encrypt the records in the stream.</li>
--   <li><tt>KMS</tt>: Use server-side encryption on the records in the
--   stream using a customer-managed AWS KMS key.</li>
--   </ul>
streamDescription_encryptionType :: Lens' StreamDescription (Maybe EncryptionType)

-- | The GUID for the customer-managed AWS KMS key to use for encryption.
--   This value can be a globally unique identifier, a fully specified ARN
--   to either an alias or a key, or an alias name prefixed by "alias/".You
--   can also use a master key owned by Kinesis Data Streams by specifying
--   the alias <tt>aws/kinesis</tt>.
--   
--   <ul>
--   <li>Key ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:alias/MyAliasName</tt></li>
--   <li>Globally unique key ID example:
--   <tt>12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias name example: <tt>alias/MyAliasName</tt></li>
--   <li>Master key owned by Kinesis Data Streams:
--   <tt>alias/aws/kinesis</tt></li>
--   </ul>
streamDescription_keyId :: Lens' StreamDescription (Maybe Text)

-- | The name of the stream being described.
streamDescription_streamName :: Lens' StreamDescription Text

-- | The Amazon Resource Name (ARN) for the stream being described.
streamDescription_streamARN :: Lens' StreamDescription Text

-- | The current status of the stream being described. The stream status is
--   one of the following states:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The stream is being created. Kinesis Data
--   Streams immediately returns and sets <tt>StreamStatus</tt> to
--   <tt>CREATING</tt>.</li>
--   <li><tt>DELETING</tt> - The stream is being deleted. The specified
--   stream is in the <tt>DELETING</tt> state until Kinesis Data Streams
--   completes the deletion.</li>
--   <li><tt>ACTIVE</tt> - The stream exists and is ready for read and
--   write operations or deletion. You should perform read and write
--   operations only on an <tt>ACTIVE</tt> stream.</li>
--   <li><tt>UPDATING</tt> - Shards in the stream are being merged or
--   split. Read and write operations continue to work while the stream is
--   in the <tt>UPDATING</tt> state.</li>
--   </ul>
streamDescription_streamStatus :: Lens' StreamDescription StreamStatus

-- | The shards that comprise the stream.
streamDescription_shards :: Lens' StreamDescription [Shard]

-- | If set to <tt>true</tt>, more shards in the stream are available to
--   describe.
streamDescription_hasMoreShards :: Lens' StreamDescription Bool

-- | The current retention period, in hours. Minimum value of 24. Maximum
--   value of 168.
streamDescription_retentionPeriodHours :: Lens' StreamDescription Int

-- | The approximate time that the stream was created.
streamDescription_streamCreationTimestamp :: Lens' StreamDescription UTCTime

-- | Represents the current enhanced monitoring settings of the stream.
streamDescription_enhancedMonitoring :: Lens' StreamDescription [EnhancedMetrics]

-- | Represents the output for DescribeStreamSummary
--   
--   <i>See:</i> <a>newStreamDescriptionSummary</a> smart constructor.
data StreamDescriptionSummary
StreamDescriptionSummary' :: Maybe EncryptionType -> Maybe Text -> Maybe Natural -> Text -> Text -> StreamStatus -> Int -> POSIX -> [EnhancedMetrics] -> Natural -> StreamDescriptionSummary

-- | The encryption type used. This value is one of the following:
--   
--   <ul>
--   <li><pre>KMS</pre></li>
--   <li><pre>NONE</pre></li>
--   </ul>
[$sel:encryptionType:StreamDescriptionSummary'] :: StreamDescriptionSummary -> Maybe EncryptionType

-- | The GUID for the customer-managed AWS KMS key to use for encryption.
--   This value can be a globally unique identifier, a fully specified ARN
--   to either an alias or a key, or an alias name prefixed by "alias/".You
--   can also use a master key owned by Kinesis Data Streams by specifying
--   the alias <tt>aws/kinesis</tt>.
--   
--   <ul>
--   <li>Key ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias ARN example: <tt>
--   arn:aws:kms:us-east-1:123456789012:alias/MyAliasName</tt></li>
--   <li>Globally unique key ID example:
--   <tt>12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias name example: <tt>alias/MyAliasName</tt></li>
--   <li>Master key owned by Kinesis Data Streams:
--   <tt>alias/aws/kinesis</tt></li>
--   </ul>
[$sel:keyId:StreamDescriptionSummary'] :: StreamDescriptionSummary -> Maybe Text

-- | The number of enhanced fan-out consumers registered with the stream.
[$sel:consumerCount:StreamDescriptionSummary'] :: StreamDescriptionSummary -> Maybe Natural

-- | The name of the stream being described.
[$sel:streamName:StreamDescriptionSummary'] :: StreamDescriptionSummary -> Text

-- | The Amazon Resource Name (ARN) for the stream being described.
[$sel:streamARN:StreamDescriptionSummary'] :: StreamDescriptionSummary -> Text

-- | The current status of the stream being described. The stream status is
--   one of the following states:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The stream is being created. Kinesis Data
--   Streams immediately returns and sets <tt>StreamStatus</tt> to
--   <tt>CREATING</tt>.</li>
--   <li><tt>DELETING</tt> - The stream is being deleted. The specified
--   stream is in the <tt>DELETING</tt> state until Kinesis Data Streams
--   completes the deletion.</li>
--   <li><tt>ACTIVE</tt> - The stream exists and is ready for read and
--   write operations or deletion. You should perform read and write
--   operations only on an <tt>ACTIVE</tt> stream.</li>
--   <li><tt>UPDATING</tt> - Shards in the stream are being merged or
--   split. Read and write operations continue to work while the stream is
--   in the <tt>UPDATING</tt> state.</li>
--   </ul>
[$sel:streamStatus:StreamDescriptionSummary'] :: StreamDescriptionSummary -> StreamStatus

-- | The current retention period, in hours.
[$sel:retentionPeriodHours:StreamDescriptionSummary'] :: StreamDescriptionSummary -> Int

-- | The approximate time that the stream was created.
[$sel:streamCreationTimestamp:StreamDescriptionSummary'] :: StreamDescriptionSummary -> POSIX

-- | Represents the current enhanced monitoring settings of the stream.
[$sel:enhancedMonitoring:StreamDescriptionSummary'] :: StreamDescriptionSummary -> [EnhancedMetrics]

-- | The number of open shards in the stream.
[$sel:openShardCount:StreamDescriptionSummary'] :: StreamDescriptionSummary -> Natural

-- | Create a value of <a>StreamDescriptionSummary</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:encryptionType:StreamDescriptionSummary'</a>,
--   <a>streamDescriptionSummary_encryptionType</a> - The encryption type
--   used. This value is one of the following:
--   
--   <ul>
--   <li><pre>KMS</pre></li>
--   <li><pre>NONE</pre></li>
--   </ul>
--   
--   <a>$sel:keyId:StreamDescriptionSummary'</a>,
--   <a>streamDescriptionSummary_keyId</a> - The GUID for the
--   customer-managed AWS KMS key to use for encryption. This value can be
--   a globally unique identifier, a fully specified ARN to either an alias
--   or a key, or an alias name prefixed by "alias/".You can also use a
--   master key owned by Kinesis Data Streams by specifying the alias
--   <tt>aws/kinesis</tt>.
--   
--   <ul>
--   <li>Key ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias ARN example: <tt>
--   arn:aws:kms:us-east-1:123456789012:alias/MyAliasName</tt></li>
--   <li>Globally unique key ID example:
--   <tt>12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias name example: <tt>alias/MyAliasName</tt></li>
--   <li>Master key owned by Kinesis Data Streams:
--   <tt>alias/aws/kinesis</tt></li>
--   </ul>
--   
--   <a>$sel:consumerCount:StreamDescriptionSummary'</a>,
--   <a>streamDescriptionSummary_consumerCount</a> - The number of enhanced
--   fan-out consumers registered with the stream.
--   
--   <a>$sel:streamName:StreamDescriptionSummary'</a>,
--   <a>streamDescriptionSummary_streamName</a> - The name of the stream
--   being described.
--   
--   <a>$sel:streamARN:StreamDescriptionSummary'</a>,
--   <a>streamDescriptionSummary_streamARN</a> - The Amazon Resource Name
--   (ARN) for the stream being described.
--   
--   <a>$sel:streamStatus:StreamDescriptionSummary'</a>,
--   <a>streamDescriptionSummary_streamStatus</a> - The current status of
--   the stream being described. The stream status is one of the following
--   states:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The stream is being created. Kinesis Data
--   Streams immediately returns and sets <tt>StreamStatus</tt> to
--   <tt>CREATING</tt>.</li>
--   <li><tt>DELETING</tt> - The stream is being deleted. The specified
--   stream is in the <tt>DELETING</tt> state until Kinesis Data Streams
--   completes the deletion.</li>
--   <li><tt>ACTIVE</tt> - The stream exists and is ready for read and
--   write operations or deletion. You should perform read and write
--   operations only on an <tt>ACTIVE</tt> stream.</li>
--   <li><tt>UPDATING</tt> - Shards in the stream are being merged or
--   split. Read and write operations continue to work while the stream is
--   in the <tt>UPDATING</tt> state.</li>
--   </ul>
--   
--   <a>$sel:retentionPeriodHours:StreamDescriptionSummary'</a>,
--   <a>streamDescriptionSummary_retentionPeriodHours</a> - The current
--   retention period, in hours.
--   
--   <a>$sel:streamCreationTimestamp:StreamDescriptionSummary'</a>,
--   <a>streamDescriptionSummary_streamCreationTimestamp</a> - The
--   approximate time that the stream was created.
--   
--   <a>$sel:enhancedMonitoring:StreamDescriptionSummary'</a>,
--   <a>streamDescriptionSummary_enhancedMonitoring</a> - Represents the
--   current enhanced monitoring settings of the stream.
--   
--   <a>$sel:openShardCount:StreamDescriptionSummary'</a>,
--   <a>streamDescriptionSummary_openShardCount</a> - The number of open
--   shards in the stream.
newStreamDescriptionSummary :: Text -> Text -> StreamStatus -> Int -> UTCTime -> Natural -> StreamDescriptionSummary

-- | The encryption type used. This value is one of the following:
--   
--   <ul>
--   <li><pre>KMS</pre></li>
--   <li><pre>NONE</pre></li>
--   </ul>
streamDescriptionSummary_encryptionType :: Lens' StreamDescriptionSummary (Maybe EncryptionType)

-- | The GUID for the customer-managed AWS KMS key to use for encryption.
--   This value can be a globally unique identifier, a fully specified ARN
--   to either an alias or a key, or an alias name prefixed by "alias/".You
--   can also use a master key owned by Kinesis Data Streams by specifying
--   the alias <tt>aws/kinesis</tt>.
--   
--   <ul>
--   <li>Key ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias ARN example: <tt>
--   arn:aws:kms:us-east-1:123456789012:alias/MyAliasName</tt></li>
--   <li>Globally unique key ID example:
--   <tt>12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias name example: <tt>alias/MyAliasName</tt></li>
--   <li>Master key owned by Kinesis Data Streams:
--   <tt>alias/aws/kinesis</tt></li>
--   </ul>
streamDescriptionSummary_keyId :: Lens' StreamDescriptionSummary (Maybe Text)

-- | The number of enhanced fan-out consumers registered with the stream.
streamDescriptionSummary_consumerCount :: Lens' StreamDescriptionSummary (Maybe Natural)

-- | The name of the stream being described.
streamDescriptionSummary_streamName :: Lens' StreamDescriptionSummary Text

-- | The Amazon Resource Name (ARN) for the stream being described.
streamDescriptionSummary_streamARN :: Lens' StreamDescriptionSummary Text

-- | The current status of the stream being described. The stream status is
--   one of the following states:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The stream is being created. Kinesis Data
--   Streams immediately returns and sets <tt>StreamStatus</tt> to
--   <tt>CREATING</tt>.</li>
--   <li><tt>DELETING</tt> - The stream is being deleted. The specified
--   stream is in the <tt>DELETING</tt> state until Kinesis Data Streams
--   completes the deletion.</li>
--   <li><tt>ACTIVE</tt> - The stream exists and is ready for read and
--   write operations or deletion. You should perform read and write
--   operations only on an <tt>ACTIVE</tt> stream.</li>
--   <li><tt>UPDATING</tt> - Shards in the stream are being merged or
--   split. Read and write operations continue to work while the stream is
--   in the <tt>UPDATING</tt> state.</li>
--   </ul>
streamDescriptionSummary_streamStatus :: Lens' StreamDescriptionSummary StreamStatus

-- | The current retention period, in hours.
streamDescriptionSummary_retentionPeriodHours :: Lens' StreamDescriptionSummary Int

-- | The approximate time that the stream was created.
streamDescriptionSummary_streamCreationTimestamp :: Lens' StreamDescriptionSummary UTCTime

-- | Represents the current enhanced monitoring settings of the stream.
streamDescriptionSummary_enhancedMonitoring :: Lens' StreamDescriptionSummary [EnhancedMetrics]

-- | The number of open shards in the stream.
streamDescriptionSummary_openShardCount :: Lens' StreamDescriptionSummary Natural

-- | After you call SubscribeToShard, Kinesis Data Streams sends events of
--   this type over an HTTP/2 connection to your consumer.
--   
--   <i>See:</i> <a>newSubscribeToShardEvent</a> smart constructor.
data SubscribeToShardEvent
SubscribeToShardEvent' :: Maybe [ChildShard] -> [Record] -> Text -> Natural -> SubscribeToShardEvent
[$sel:childShards:SubscribeToShardEvent'] :: SubscribeToShardEvent -> Maybe [ChildShard]
[$sel:records:SubscribeToShardEvent'] :: SubscribeToShardEvent -> [Record]

-- | Use this as <tt>SequenceNumber</tt> in the next call to
--   SubscribeToShard, with <tt>StartingPosition</tt> set to
--   <tt>AT_SEQUENCE_NUMBER</tt> or <tt>AFTER_SEQUENCE_NUMBER</tt>. Use
--   <tt>ContinuationSequenceNumber</tt> for checkpointing because it
--   captures your shard progress even when no data is written to the
--   shard.
[$sel:continuationSequenceNumber:SubscribeToShardEvent'] :: SubscribeToShardEvent -> Text

-- | The number of milliseconds the read records are from the tip of the
--   stream, indicating how far behind current time the consumer is. A
--   value of zero indicates that record processing is caught up, and there
--   are no new records to process at this moment.
[$sel:millisBehindLatest:SubscribeToShardEvent'] :: SubscribeToShardEvent -> Natural

-- | Create a value of <a>SubscribeToShardEvent</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:childShards:SubscribeToShardEvent'</a>,
--   <a>subscribeToShardEvent_childShards</a> - Undocumented member.
--   
--   <a>$sel:records:SubscribeToShardEvent'</a>,
--   <a>subscribeToShardEvent_records</a> -
--   
--   <a>$sel:continuationSequenceNumber:SubscribeToShardEvent'</a>,
--   <a>subscribeToShardEvent_continuationSequenceNumber</a> - Use this as
--   <tt>SequenceNumber</tt> in the next call to SubscribeToShard, with
--   <tt>StartingPosition</tt> set to <tt>AT_SEQUENCE_NUMBER</tt> or
--   <tt>AFTER_SEQUENCE_NUMBER</tt>. Use
--   <tt>ContinuationSequenceNumber</tt> for checkpointing because it
--   captures your shard progress even when no data is written to the
--   shard.
--   
--   <a>$sel:millisBehindLatest:SubscribeToShardEvent'</a>,
--   <a>subscribeToShardEvent_millisBehindLatest</a> - The number of
--   milliseconds the read records are from the tip of the stream,
--   indicating how far behind current time the consumer is. A value of
--   zero indicates that record processing is caught up, and there are no
--   new records to process at this moment.
newSubscribeToShardEvent :: Text -> Natural -> SubscribeToShardEvent

-- | Undocumented member.
subscribeToShardEvent_childShards :: Lens' SubscribeToShardEvent (Maybe [ChildShard])

subscribeToShardEvent_records :: Lens' SubscribeToShardEvent [Record]

-- | Use this as <tt>SequenceNumber</tt> in the next call to
--   SubscribeToShard, with <tt>StartingPosition</tt> set to
--   <tt>AT_SEQUENCE_NUMBER</tt> or <tt>AFTER_SEQUENCE_NUMBER</tt>. Use
--   <tt>ContinuationSequenceNumber</tt> for checkpointing because it
--   captures your shard progress even when no data is written to the
--   shard.
subscribeToShardEvent_continuationSequenceNumber :: Lens' SubscribeToShardEvent Text

-- | The number of milliseconds the read records are from the tip of the
--   stream, indicating how far behind current time the consumer is. A
--   value of zero indicates that record processing is caught up, and there
--   are no new records to process at this moment.
subscribeToShardEvent_millisBehindLatest :: Lens' SubscribeToShardEvent Natural

-- | Metadata assigned to the stream, consisting of a key-value pair.
--   
--   <i>See:</i> <a>newTag</a> smart constructor.
data Tag
Tag' :: Maybe Text -> Text -> Tag

-- | An optional string, typically used to describe or define the tag.
--   Maximum length: 256 characters. Valid characters: Unicode letters,
--   digits, white space, _ . / = + - % @
[$sel:value:Tag'] :: Tag -> Maybe Text

-- | A unique identifier for the tag. Maximum length: 128 characters. Valid
--   characters: Unicode letters, digits, white space, _ . / = + - % @
[$sel:key:Tag'] :: Tag -> Text

-- | Create a value of <a>Tag</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:Tag'</a>, <a>tag_value</a> - An optional string,
--   typically used to describe or define the tag. Maximum length: 256
--   characters. Valid characters: Unicode letters, digits, white space, _
--   . / = + - % @
--   
--   <a>$sel:key:Tag'</a>, <a>tag_key</a> - A unique identifier for the
--   tag. Maximum length: 128 characters. Valid characters: Unicode
--   letters, digits, white space, _ . / = + - % @
newTag :: Text -> Tag

-- | An optional string, typically used to describe or define the tag.
--   Maximum length: 256 characters. Valid characters: Unicode letters,
--   digits, white space, _ . / = + - % @
tag_value :: Lens' Tag (Maybe Text)

-- | A unique identifier for the tag. Maximum length: 128 characters. Valid
--   characters: Unicode letters, digits, white space, _ . / = + - % @
tag_key :: Lens' Tag Text


-- | This operation establishes an HTTP/2 connection between the consumer
--   you specify in the <tt>ConsumerARN</tt> parameter and the shard you
--   specify in the <tt>ShardId</tt> parameter. After the connection is
--   successfully established, Kinesis Data Streams pushes records from the
--   shard to the consumer over this connection. Before you call this
--   operation, call RegisterStreamConsumer to register the consumer with
--   Kinesis Data Streams.
--   
--   When the <tt>SubscribeToShard</tt> call succeeds, your consumer starts
--   receiving events of type SubscribeToShardEvent over the HTTP/2
--   connection for up to 5 minutes, after which time you need to call
--   <tt>SubscribeToShard</tt> again to renew the subscription if you want
--   to continue to receive records.
--   
--   You can make one call to <tt>SubscribeToShard</tt> per second per
--   registered consumer per shard. For example, if you have a 4000 shard
--   stream and two registered stream consumers, you can make one
--   <tt>SubscribeToShard</tt> request per second for each combination of
--   shard and registered consumer, allowing you to subscribe both
--   consumers to all 4000 shards in one second.
--   
--   If you call <tt>SubscribeToShard</tt> again with the same
--   <tt>ConsumerARN</tt> and <tt>ShardId</tt> within 5 seconds of a
--   successful call, you'll get a <tt>ResourceInUseException</tt>. If you
--   call <tt>SubscribeToShard</tt> 5 seconds or more after a successful
--   call, the first connection will expire and the second call will take
--   over the subscription.
--   
--   For an example of how to use this operations, see <a>Enhanced Fan-Out
--   Using the Kinesis Data Streams API</a>.
module Amazonka.Kinesis.SubscribeToShard

-- | <i>See:</i> <a>newSubscribeToShard</a> smart constructor.
data SubscribeToShard
SubscribeToShard' :: Text -> Text -> StartingPosition -> SubscribeToShard

-- | For this parameter, use the value you obtained when you called
--   RegisterStreamConsumer.
[$sel:consumerARN:SubscribeToShard'] :: SubscribeToShard -> Text

-- | The ID of the shard you want to subscribe to. To see a list of all the
--   shards for a given stream, use ListShards.
[$sel:shardId:SubscribeToShard'] :: SubscribeToShard -> Text
[$sel:startingPosition:SubscribeToShard'] :: SubscribeToShard -> StartingPosition

-- | Create a value of <a>SubscribeToShard</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:consumerARN:SubscribeToShard'</a>,
--   <a>subscribeToShard_consumerARN</a> - For this parameter, use the
--   value you obtained when you called RegisterStreamConsumer.
--   
--   <a>$sel:shardId:SubscribeToShard'</a>, <a>subscribeToShard_shardId</a>
--   - The ID of the shard you want to subscribe to. To see a list of all
--   the shards for a given stream, use ListShards.
--   
--   <a>$sel:startingPosition:SubscribeToShard'</a>,
--   <a>subscribeToShard_startingPosition</a> -
newSubscribeToShard :: Text -> Text -> StartingPosition -> SubscribeToShard

-- | For this parameter, use the value you obtained when you called
--   RegisterStreamConsumer.
subscribeToShard_consumerARN :: Lens' SubscribeToShard Text

-- | The ID of the shard you want to subscribe to. To see a list of all the
--   shards for a given stream, use ListShards.
subscribeToShard_shardId :: Lens' SubscribeToShard Text

subscribeToShard_startingPosition :: Lens' SubscribeToShard StartingPosition

-- | <i>See:</i> <a>newSubscribeToShardResponse</a> smart constructor.
data SubscribeToShardResponse
SubscribeToShardResponse' :: Int -> Value -> SubscribeToShardResponse

-- | The response's http status code.
[$sel:httpStatus:SubscribeToShardResponse'] :: SubscribeToShardResponse -> Int

-- | The event stream that your consumer can use to read records from the
--   shard.
[$sel:eventStream:SubscribeToShardResponse'] :: SubscribeToShardResponse -> Value

-- | Create a value of <a>SubscribeToShardResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:SubscribeToShardResponse'</a>,
--   <a>subscribeToShardResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:eventStream:SubscribeToShardResponse'</a>,
--   <a>subscribeToShardResponse_eventStream</a> - The event stream that
--   your consumer can use to read records from the shard.
newSubscribeToShardResponse :: Int -> Value -> SubscribeToShardResponse

-- | The response's http status code.
subscribeToShardResponse_httpStatus :: Lens' SubscribeToShardResponse Int

-- | The event stream that your consumer can use to read records from the
--   shard.
subscribeToShardResponse_eventStream :: Lens' SubscribeToShardResponse Value
instance GHC.Generics.Generic Amazonka.Kinesis.SubscribeToShard.SubscribeToShard
instance GHC.Show.Show Amazonka.Kinesis.SubscribeToShard.SubscribeToShard
instance GHC.Read.Read Amazonka.Kinesis.SubscribeToShard.SubscribeToShard
instance GHC.Classes.Eq Amazonka.Kinesis.SubscribeToShard.SubscribeToShard
instance GHC.Generics.Generic Amazonka.Kinesis.SubscribeToShard.SubscribeToShardResponse
instance Amazonka.Types.AWSRequest Amazonka.Kinesis.SubscribeToShard.SubscribeToShard
instance Control.DeepSeq.NFData Amazonka.Kinesis.SubscribeToShard.SubscribeToShardResponse
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.SubscribeToShard.SubscribeToShard
instance Control.DeepSeq.NFData Amazonka.Kinesis.SubscribeToShard.SubscribeToShard
instance Amazonka.Data.Headers.ToHeaders Amazonka.Kinesis.SubscribeToShard.SubscribeToShard
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.Kinesis.SubscribeToShard.SubscribeToShard
instance Amazonka.Data.Path.ToPath Amazonka.Kinesis.SubscribeToShard.SubscribeToShard
instance Amazonka.Data.Query.ToQuery Amazonka.Kinesis.SubscribeToShard.SubscribeToShard


-- | Disables server-side encryption for a specified stream.
--   
--   Stopping encryption is an asynchronous operation. Upon receiving the
--   request, Kinesis Data Streams returns immediately and sets the status
--   of the stream to <tt>UPDATING</tt>. After the update is complete,
--   Kinesis Data Streams sets the status of the stream back to
--   <tt>ACTIVE</tt>. Stopping encryption normally takes a few seconds to
--   complete, but it can take minutes. You can continue to read and write
--   data to your stream while its status is <tt>UPDATING</tt>. Once the
--   status of the stream is <tt>ACTIVE</tt>, records written to the stream
--   are no longer encrypted by Kinesis Data Streams.
--   
--   API Limits: You can successfully disable server-side encryption 25
--   times in a rolling 24-hour period.
--   
--   Note: It can take up to 5 seconds after the stream is in an
--   <tt>ACTIVE</tt> status before all records written to the stream are no
--   longer subject to encryption. After you disabled encryption, you can
--   verify that encryption is not applied by inspecting the API response
--   from <tt>PutRecord</tt> or <tt>PutRecords</tt>.
module Amazonka.Kinesis.StopStreamEncryption

-- | <i>See:</i> <a>newStopStreamEncryption</a> smart constructor.
data StopStreamEncryption
StopStreamEncryption' :: Text -> EncryptionType -> Text -> StopStreamEncryption

-- | The name of the stream on which to stop encrypting records.
[$sel:streamName:StopStreamEncryption'] :: StopStreamEncryption -> Text

-- | The encryption type. The only valid value is <tt>KMS</tt>.
[$sel:encryptionType:StopStreamEncryption'] :: StopStreamEncryption -> EncryptionType

-- | The GUID for the customer-managed AWS KMS key to use for encryption.
--   This value can be a globally unique identifier, a fully specified
--   Amazon Resource Name (ARN) to either an alias or a key, or an alias
--   name prefixed by "alias/".You can also use a master key owned by
--   Kinesis Data Streams by specifying the alias <tt>aws/kinesis</tt>.
--   
--   <ul>
--   <li>Key ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:alias/MyAliasName</tt></li>
--   <li>Globally unique key ID example:
--   <tt>12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias name example: <tt>alias/MyAliasName</tt></li>
--   <li>Master key owned by Kinesis Data Streams:
--   <tt>alias/aws/kinesis</tt></li>
--   </ul>
[$sel:keyId:StopStreamEncryption'] :: StopStreamEncryption -> Text

-- | Create a value of <a>StopStreamEncryption</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamName:StopStreamEncryption'</a>,
--   <a>stopStreamEncryption_streamName</a> - The name of the stream on
--   which to stop encrypting records.
--   
--   <a>$sel:encryptionType:StopStreamEncryption'</a>,
--   <a>stopStreamEncryption_encryptionType</a> - The encryption type. The
--   only valid value is <tt>KMS</tt>.
--   
--   <a>$sel:keyId:StopStreamEncryption'</a>,
--   <a>stopStreamEncryption_keyId</a> - The GUID for the customer-managed
--   AWS KMS key to use for encryption. This value can be a globally unique
--   identifier, a fully specified Amazon Resource Name (ARN) to either an
--   alias or a key, or an alias name prefixed by "alias/".You can also use
--   a master key owned by Kinesis Data Streams by specifying the alias
--   <tt>aws/kinesis</tt>.
--   
--   <ul>
--   <li>Key ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:alias/MyAliasName</tt></li>
--   <li>Globally unique key ID example:
--   <tt>12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias name example: <tt>alias/MyAliasName</tt></li>
--   <li>Master key owned by Kinesis Data Streams:
--   <tt>alias/aws/kinesis</tt></li>
--   </ul>
newStopStreamEncryption :: Text -> EncryptionType -> Text -> StopStreamEncryption

-- | The name of the stream on which to stop encrypting records.
stopStreamEncryption_streamName :: Lens' StopStreamEncryption Text

-- | The encryption type. The only valid value is <tt>KMS</tt>.
stopStreamEncryption_encryptionType :: Lens' StopStreamEncryption EncryptionType

-- | The GUID for the customer-managed AWS KMS key to use for encryption.
--   This value can be a globally unique identifier, a fully specified
--   Amazon Resource Name (ARN) to either an alias or a key, or an alias
--   name prefixed by "alias/".You can also use a master key owned by
--   Kinesis Data Streams by specifying the alias <tt>aws/kinesis</tt>.
--   
--   <ul>
--   <li>Key ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:alias/MyAliasName</tt></li>
--   <li>Globally unique key ID example:
--   <tt>12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias name example: <tt>alias/MyAliasName</tt></li>
--   <li>Master key owned by Kinesis Data Streams:
--   <tt>alias/aws/kinesis</tt></li>
--   </ul>
stopStreamEncryption_keyId :: Lens' StopStreamEncryption Text

-- | <i>See:</i> <a>newStopStreamEncryptionResponse</a> smart constructor.
data StopStreamEncryptionResponse
StopStreamEncryptionResponse' :: StopStreamEncryptionResponse

-- | Create a value of <a>StopStreamEncryptionResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newStopStreamEncryptionResponse :: StopStreamEncryptionResponse
instance GHC.Generics.Generic Amazonka.Kinesis.StopStreamEncryption.StopStreamEncryption
instance GHC.Show.Show Amazonka.Kinesis.StopStreamEncryption.StopStreamEncryption
instance GHC.Read.Read Amazonka.Kinesis.StopStreamEncryption.StopStreamEncryption
instance GHC.Classes.Eq Amazonka.Kinesis.StopStreamEncryption.StopStreamEncryption
instance GHC.Generics.Generic Amazonka.Kinesis.StopStreamEncryption.StopStreamEncryptionResponse
instance GHC.Show.Show Amazonka.Kinesis.StopStreamEncryption.StopStreamEncryptionResponse
instance GHC.Read.Read Amazonka.Kinesis.StopStreamEncryption.StopStreamEncryptionResponse
instance GHC.Classes.Eq Amazonka.Kinesis.StopStreamEncryption.StopStreamEncryptionResponse
instance Amazonka.Types.AWSRequest Amazonka.Kinesis.StopStreamEncryption.StopStreamEncryption
instance Control.DeepSeq.NFData Amazonka.Kinesis.StopStreamEncryption.StopStreamEncryptionResponse
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.StopStreamEncryption.StopStreamEncryption
instance Control.DeepSeq.NFData Amazonka.Kinesis.StopStreamEncryption.StopStreamEncryption
instance Amazonka.Data.Headers.ToHeaders Amazonka.Kinesis.StopStreamEncryption.StopStreamEncryption
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.Kinesis.StopStreamEncryption.StopStreamEncryption
instance Amazonka.Data.Path.ToPath Amazonka.Kinesis.StopStreamEncryption.StopStreamEncryption
instance Amazonka.Data.Query.ToQuery Amazonka.Kinesis.StopStreamEncryption.StopStreamEncryption


-- | Enables or updates server-side encryption using an AWS KMS key for a
--   specified stream.
--   
--   Starting encryption is an asynchronous operation. Upon receiving the
--   request, Kinesis Data Streams returns immediately and sets the status
--   of the stream to <tt>UPDATING</tt>. After the update is complete,
--   Kinesis Data Streams sets the status of the stream back to
--   <tt>ACTIVE</tt>. Updating or applying encryption normally takes a few
--   seconds to complete, but it can take minutes. You can continue to read
--   and write data to your stream while its status is <tt>UPDATING</tt>.
--   Once the status of the stream is <tt>ACTIVE</tt>, encryption begins
--   for records written to the stream.
--   
--   API Limits: You can successfully apply a new AWS KMS key for
--   server-side encryption 25 times in a rolling 24-hour period.
--   
--   Note: It can take up to 5 seconds after the stream is in an
--   <tt>ACTIVE</tt> status before all records written to the stream are
--   encrypted. After you enable encryption, you can verify that encryption
--   is applied by inspecting the API response from <tt>PutRecord</tt> or
--   <tt>PutRecords</tt>.
module Amazonka.Kinesis.StartStreamEncryption

-- | <i>See:</i> <a>newStartStreamEncryption</a> smart constructor.
data StartStreamEncryption
StartStreamEncryption' :: Text -> EncryptionType -> Text -> StartStreamEncryption

-- | The name of the stream for which to start encrypting records.
[$sel:streamName:StartStreamEncryption'] :: StartStreamEncryption -> Text

-- | The encryption type to use. The only valid value is <tt>KMS</tt>.
[$sel:encryptionType:StartStreamEncryption'] :: StartStreamEncryption -> EncryptionType

-- | The GUID for the customer-managed AWS KMS key to use for encryption.
--   This value can be a globally unique identifier, a fully specified
--   Amazon Resource Name (ARN) to either an alias or a key, or an alias
--   name prefixed by "alias/".You can also use a master key owned by
--   Kinesis Data Streams by specifying the alias <tt>aws/kinesis</tt>.
--   
--   <ul>
--   <li>Key ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:alias/MyAliasName</tt></li>
--   <li>Globally unique key ID example:
--   <tt>12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias name example: <tt>alias/MyAliasName</tt></li>
--   <li>Master key owned by Kinesis Data Streams:
--   <tt>alias/aws/kinesis</tt></li>
--   </ul>
[$sel:keyId:StartStreamEncryption'] :: StartStreamEncryption -> Text

-- | Create a value of <a>StartStreamEncryption</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamName:StartStreamEncryption'</a>,
--   <a>startStreamEncryption_streamName</a> - The name of the stream for
--   which to start encrypting records.
--   
--   <a>$sel:encryptionType:StartStreamEncryption'</a>,
--   <a>startStreamEncryption_encryptionType</a> - The encryption type to
--   use. The only valid value is <tt>KMS</tt>.
--   
--   <a>$sel:keyId:StartStreamEncryption'</a>,
--   <a>startStreamEncryption_keyId</a> - The GUID for the customer-managed
--   AWS KMS key to use for encryption. This value can be a globally unique
--   identifier, a fully specified Amazon Resource Name (ARN) to either an
--   alias or a key, or an alias name prefixed by "alias/".You can also use
--   a master key owned by Kinesis Data Streams by specifying the alias
--   <tt>aws/kinesis</tt>.
--   
--   <ul>
--   <li>Key ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:alias/MyAliasName</tt></li>
--   <li>Globally unique key ID example:
--   <tt>12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias name example: <tt>alias/MyAliasName</tt></li>
--   <li>Master key owned by Kinesis Data Streams:
--   <tt>alias/aws/kinesis</tt></li>
--   </ul>
newStartStreamEncryption :: Text -> EncryptionType -> Text -> StartStreamEncryption

-- | The name of the stream for which to start encrypting records.
startStreamEncryption_streamName :: Lens' StartStreamEncryption Text

-- | The encryption type to use. The only valid value is <tt>KMS</tt>.
startStreamEncryption_encryptionType :: Lens' StartStreamEncryption EncryptionType

-- | The GUID for the customer-managed AWS KMS key to use for encryption.
--   This value can be a globally unique identifier, a fully specified
--   Amazon Resource Name (ARN) to either an alias or a key, or an alias
--   name prefixed by "alias/".You can also use a master key owned by
--   Kinesis Data Streams by specifying the alias <tt>aws/kinesis</tt>.
--   
--   <ul>
--   <li>Key ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:alias/MyAliasName</tt></li>
--   <li>Globally unique key ID example:
--   <tt>12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias name example: <tt>alias/MyAliasName</tt></li>
--   <li>Master key owned by Kinesis Data Streams:
--   <tt>alias/aws/kinesis</tt></li>
--   </ul>
startStreamEncryption_keyId :: Lens' StartStreamEncryption Text

-- | <i>See:</i> <a>newStartStreamEncryptionResponse</a> smart constructor.
data StartStreamEncryptionResponse
StartStreamEncryptionResponse' :: StartStreamEncryptionResponse

-- | Create a value of <a>StartStreamEncryptionResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newStartStreamEncryptionResponse :: StartStreamEncryptionResponse
instance GHC.Generics.Generic Amazonka.Kinesis.StartStreamEncryption.StartStreamEncryption
instance GHC.Show.Show Amazonka.Kinesis.StartStreamEncryption.StartStreamEncryption
instance GHC.Read.Read Amazonka.Kinesis.StartStreamEncryption.StartStreamEncryption
instance GHC.Classes.Eq Amazonka.Kinesis.StartStreamEncryption.StartStreamEncryption
instance GHC.Generics.Generic Amazonka.Kinesis.StartStreamEncryption.StartStreamEncryptionResponse
instance GHC.Show.Show Amazonka.Kinesis.StartStreamEncryption.StartStreamEncryptionResponse
instance GHC.Read.Read Amazonka.Kinesis.StartStreamEncryption.StartStreamEncryptionResponse
instance GHC.Classes.Eq Amazonka.Kinesis.StartStreamEncryption.StartStreamEncryptionResponse
instance Amazonka.Types.AWSRequest Amazonka.Kinesis.StartStreamEncryption.StartStreamEncryption
instance Control.DeepSeq.NFData Amazonka.Kinesis.StartStreamEncryption.StartStreamEncryptionResponse
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.StartStreamEncryption.StartStreamEncryption
instance Control.DeepSeq.NFData Amazonka.Kinesis.StartStreamEncryption.StartStreamEncryption
instance Amazonka.Data.Headers.ToHeaders Amazonka.Kinesis.StartStreamEncryption.StartStreamEncryption
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.Kinesis.StartStreamEncryption.StartStreamEncryption
instance Amazonka.Data.Path.ToPath Amazonka.Kinesis.StartStreamEncryption.StartStreamEncryption
instance Amazonka.Data.Query.ToQuery Amazonka.Kinesis.StartStreamEncryption.StartStreamEncryption


-- | Splits a shard into two new shards in the Kinesis data stream, to
--   increase the stream's capacity to ingest and transport data.
--   <tt>SplitShard</tt> is called when there is a need to increase the
--   overall capacity of a stream because of an expected increase in the
--   volume of data records being ingested.
--   
--   You can also use <tt>SplitShard</tt> when a shard appears to be
--   approaching its maximum utilization; for example, the producers
--   sending data into the specific shard are suddenly sending more than
--   previously anticipated. You can also call <tt>SplitShard</tt> to
--   increase stream capacity, so that more Kinesis Data Streams
--   applications can simultaneously read data from the stream for
--   real-time processing.
--   
--   You must specify the shard to be split and the new hash key, which is
--   the position in the shard where the shard gets split in two. In many
--   cases, the new hash key might be the average of the beginning and
--   ending hash key, but it can be any hash key value in the range being
--   mapped into the shard. For more information, see <a>Split a Shard</a>
--   in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
--   
--   You can use DescribeStream to determine the shard ID and hash key
--   values for the <tt>ShardToSplit</tt> and <tt>NewStartingHashKey</tt>
--   parameters that are specified in the <tt>SplitShard</tt> request.
--   
--   <tt>SplitShard</tt> is an asynchronous operation. Upon receiving a
--   <tt>SplitShard</tt> request, Kinesis Data Streams immediately returns
--   a response and sets the stream status to <tt>UPDATING</tt>. After the
--   operation is completed, Kinesis Data Streams sets the stream status to
--   <tt>ACTIVE</tt>. Read and write operations continue to work while the
--   stream is in the <tt>UPDATING</tt> state.
--   
--   You can use <tt>DescribeStream</tt> to check the status of the stream,
--   which is returned in <tt>StreamStatus</tt>. If the stream is in the
--   <tt>ACTIVE</tt> state, you can call <tt>SplitShard</tt>. If a stream
--   is in <tt>CREATING</tt> or <tt>UPDATING</tt> or <tt>DELETING</tt>
--   states, <tt>DescribeStream</tt> returns a
--   <tt>ResourceInUseException</tt>.
--   
--   If the specified stream does not exist, <tt>DescribeStream</tt>
--   returns a <tt>ResourceNotFoundException</tt>. If you try to create
--   more shards than are authorized for your account, you receive a
--   <tt>LimitExceededException</tt>.
--   
--   For the default shard limit for an AWS account, see <a>Kinesis Data
--   Streams Limits</a> in the <i>Amazon Kinesis Data Streams Developer
--   Guide</i>. To increase this limit, <a>contact AWS Support</a>.
--   
--   If you try to operate on too many streams simultaneously using
--   CreateStream, DeleteStream, MergeShards, and/or SplitShard, you
--   receive a <tt>LimitExceededException</tt>.
--   
--   <tt>SplitShard</tt> has a limit of five transactions per second per
--   account.
module Amazonka.Kinesis.SplitShard

-- | Represents the input for <tt>SplitShard</tt>.
--   
--   <i>See:</i> <a>newSplitShard</a> smart constructor.
data SplitShard
SplitShard' :: Text -> Text -> Text -> SplitShard

-- | The name of the stream for the shard split.
[$sel:streamName:SplitShard'] :: SplitShard -> Text

-- | The shard ID of the shard to split.
[$sel:shardToSplit:SplitShard'] :: SplitShard -> Text

-- | A hash key value for the starting hash key of one of the child shards
--   created by the split. The hash key range for a given shard constitutes
--   a set of ordered contiguous positive integers. The value for
--   <tt>NewStartingHashKey</tt> must be in the range of hash keys being
--   mapped into the shard. The <tt>NewStartingHashKey</tt> hash key value
--   and all higher hash key values in hash key range are distributed to
--   one of the child shards. All the lower hash key values in the range
--   are distributed to the other child shard.
[$sel:newStartingHashKey':SplitShard'] :: SplitShard -> Text

-- | Create a value of <a>SplitShard</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamName:SplitShard'</a>, <a>splitShard_streamName</a> - The
--   name of the stream for the shard split.
--   
--   <a>$sel:shardToSplit:SplitShard'</a>, <a>splitShard_shardToSplit</a> -
--   The shard ID of the shard to split.
--   
--   <a>$sel:newStartingHashKey':SplitShard'</a>,
--   <a>splitShard_newStartingHashKey</a> - A hash key value for the
--   starting hash key of one of the child shards created by the split. The
--   hash key range for a given shard constitutes a set of ordered
--   contiguous positive integers. The value for
--   <tt>NewStartingHashKey</tt> must be in the range of hash keys being
--   mapped into the shard. The <tt>NewStartingHashKey</tt> hash key value
--   and all higher hash key values in hash key range are distributed to
--   one of the child shards. All the lower hash key values in the range
--   are distributed to the other child shard.
newSplitShard :: Text -> Text -> Text -> SplitShard

-- | The name of the stream for the shard split.
splitShard_streamName :: Lens' SplitShard Text

-- | The shard ID of the shard to split.
splitShard_shardToSplit :: Lens' SplitShard Text

-- | A hash key value for the starting hash key of one of the child shards
--   created by the split. The hash key range for a given shard constitutes
--   a set of ordered contiguous positive integers. The value for
--   <tt>NewStartingHashKey</tt> must be in the range of hash keys being
--   mapped into the shard. The <tt>NewStartingHashKey</tt> hash key value
--   and all higher hash key values in hash key range are distributed to
--   one of the child shards. All the lower hash key values in the range
--   are distributed to the other child shard.
splitShard_newStartingHashKey :: Lens' SplitShard Text

-- | <i>See:</i> <a>newSplitShardResponse</a> smart constructor.
data SplitShardResponse
SplitShardResponse' :: SplitShardResponse

-- | Create a value of <a>SplitShardResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newSplitShardResponse :: SplitShardResponse
instance GHC.Generics.Generic Amazonka.Kinesis.SplitShard.SplitShard
instance GHC.Show.Show Amazonka.Kinesis.SplitShard.SplitShard
instance GHC.Read.Read Amazonka.Kinesis.SplitShard.SplitShard
instance GHC.Classes.Eq Amazonka.Kinesis.SplitShard.SplitShard
instance GHC.Generics.Generic Amazonka.Kinesis.SplitShard.SplitShardResponse
instance GHC.Show.Show Amazonka.Kinesis.SplitShard.SplitShardResponse
instance GHC.Read.Read Amazonka.Kinesis.SplitShard.SplitShardResponse
instance GHC.Classes.Eq Amazonka.Kinesis.SplitShard.SplitShardResponse
instance Amazonka.Types.AWSRequest Amazonka.Kinesis.SplitShard.SplitShard
instance Control.DeepSeq.NFData Amazonka.Kinesis.SplitShard.SplitShardResponse
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.SplitShard.SplitShard
instance Control.DeepSeq.NFData Amazonka.Kinesis.SplitShard.SplitShard
instance Amazonka.Data.Headers.ToHeaders Amazonka.Kinesis.SplitShard.SplitShard
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.Kinesis.SplitShard.SplitShard
instance Amazonka.Data.Path.ToPath Amazonka.Kinesis.SplitShard.SplitShard
instance Amazonka.Data.Query.ToQuery Amazonka.Kinesis.SplitShard.SplitShard


-- | Removes tags from the specified Kinesis data stream. Removed tags are
--   deleted and cannot be recovered after this operation successfully
--   completes.
--   
--   If you specify a tag that does not exist, it is ignored.
--   
--   RemoveTagsFromStream has a limit of five transactions per second per
--   account.
module Amazonka.Kinesis.RemoveTagsFromStream

-- | Represents the input for <tt>RemoveTagsFromStream</tt>.
--   
--   <i>See:</i> <a>newRemoveTagsFromStream</a> smart constructor.
data RemoveTagsFromStream
RemoveTagsFromStream' :: Text -> NonEmpty Text -> RemoveTagsFromStream

-- | The name of the stream.
[$sel:streamName:RemoveTagsFromStream'] :: RemoveTagsFromStream -> Text

-- | A list of tag keys. Each corresponding tag is removed from the stream.
[$sel:tagKeys:RemoveTagsFromStream'] :: RemoveTagsFromStream -> NonEmpty Text

-- | Create a value of <a>RemoveTagsFromStream</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamName:RemoveTagsFromStream'</a>,
--   <a>removeTagsFromStream_streamName</a> - The name of the stream.
--   
--   <a>$sel:tagKeys:RemoveTagsFromStream'</a>,
--   <a>removeTagsFromStream_tagKeys</a> - A list of tag keys. Each
--   corresponding tag is removed from the stream.
newRemoveTagsFromStream :: Text -> NonEmpty Text -> RemoveTagsFromStream

-- | The name of the stream.
removeTagsFromStream_streamName :: Lens' RemoveTagsFromStream Text

-- | A list of tag keys. Each corresponding tag is removed from the stream.
removeTagsFromStream_tagKeys :: Lens' RemoveTagsFromStream (NonEmpty Text)

-- | <i>See:</i> <a>newRemoveTagsFromStreamResponse</a> smart constructor.
data RemoveTagsFromStreamResponse
RemoveTagsFromStreamResponse' :: RemoveTagsFromStreamResponse

-- | Create a value of <a>RemoveTagsFromStreamResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newRemoveTagsFromStreamResponse :: RemoveTagsFromStreamResponse
instance GHC.Generics.Generic Amazonka.Kinesis.RemoveTagsFromStream.RemoveTagsFromStream
instance GHC.Show.Show Amazonka.Kinesis.RemoveTagsFromStream.RemoveTagsFromStream
instance GHC.Read.Read Amazonka.Kinesis.RemoveTagsFromStream.RemoveTagsFromStream
instance GHC.Classes.Eq Amazonka.Kinesis.RemoveTagsFromStream.RemoveTagsFromStream
instance GHC.Generics.Generic Amazonka.Kinesis.RemoveTagsFromStream.RemoveTagsFromStreamResponse
instance GHC.Show.Show Amazonka.Kinesis.RemoveTagsFromStream.RemoveTagsFromStreamResponse
instance GHC.Read.Read Amazonka.Kinesis.RemoveTagsFromStream.RemoveTagsFromStreamResponse
instance GHC.Classes.Eq Amazonka.Kinesis.RemoveTagsFromStream.RemoveTagsFromStreamResponse
instance Amazonka.Types.AWSRequest Amazonka.Kinesis.RemoveTagsFromStream.RemoveTagsFromStream
instance Control.DeepSeq.NFData Amazonka.Kinesis.RemoveTagsFromStream.RemoveTagsFromStreamResponse
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.RemoveTagsFromStream.RemoveTagsFromStream
instance Control.DeepSeq.NFData Amazonka.Kinesis.RemoveTagsFromStream.RemoveTagsFromStream
instance Amazonka.Data.Headers.ToHeaders Amazonka.Kinesis.RemoveTagsFromStream.RemoveTagsFromStream
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.Kinesis.RemoveTagsFromStream.RemoveTagsFromStream
instance Amazonka.Data.Path.ToPath Amazonka.Kinesis.RemoveTagsFromStream.RemoveTagsFromStream
instance Amazonka.Data.Query.ToQuery Amazonka.Kinesis.RemoveTagsFromStream.RemoveTagsFromStream


-- | Registers a consumer with a Kinesis data stream. When you use this
--   operation, the consumer you register can then call SubscribeToShard to
--   receive data from the stream using enhanced fan-out, at a rate of up
--   to 2 MiB per second for every shard you subscribe to. This rate is
--   unaffected by the total number of consumers that read from the same
--   stream.
--   
--   You can register up to 20 consumers per stream. A given consumer can
--   only be registered with one stream at a time.
--   
--   For an example of how to use this operations, see <a>Enhanced Fan-Out
--   Using the Kinesis Data Streams API</a>.
--   
--   The use of this operation has a limit of five transactions per second
--   per account. Also, only 5 consumers can be created simultaneously. In
--   other words, you cannot have more than 5 consumers in a
--   <tt>CREATING</tt> status at the same time. Registering a 6th consumer
--   while there are 5 in a <tt>CREATING</tt> status results in a
--   <tt>LimitExceededException</tt>.
module Amazonka.Kinesis.RegisterStreamConsumer

-- | <i>See:</i> <a>newRegisterStreamConsumer</a> smart constructor.
data RegisterStreamConsumer
RegisterStreamConsumer' :: Text -> Text -> RegisterStreamConsumer

-- | The ARN of the Kinesis data stream that you want to register the
--   consumer with. For more info, see <a>Amazon Resource Names (ARNs) and
--   AWS Service Namespaces</a>.
[$sel:streamARN:RegisterStreamConsumer'] :: RegisterStreamConsumer -> Text

-- | For a given Kinesis data stream, each consumer must have a unique
--   name. However, consumer names don't have to be unique across data
--   streams.
[$sel:consumerName:RegisterStreamConsumer'] :: RegisterStreamConsumer -> Text

-- | Create a value of <a>RegisterStreamConsumer</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamARN:RegisterStreamConsumer'</a>,
--   <a>registerStreamConsumer_streamARN</a> - The ARN of the Kinesis data
--   stream that you want to register the consumer with. For more info, see
--   <a>Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.
--   
--   <a>$sel:consumerName:RegisterStreamConsumer'</a>,
--   <a>registerStreamConsumer_consumerName</a> - For a given Kinesis data
--   stream, each consumer must have a unique name. However, consumer names
--   don't have to be unique across data streams.
newRegisterStreamConsumer :: Text -> Text -> RegisterStreamConsumer

-- | The ARN of the Kinesis data stream that you want to register the
--   consumer with. For more info, see <a>Amazon Resource Names (ARNs) and
--   AWS Service Namespaces</a>.
registerStreamConsumer_streamARN :: Lens' RegisterStreamConsumer Text

-- | For a given Kinesis data stream, each consumer must have a unique
--   name. However, consumer names don't have to be unique across data
--   streams.
registerStreamConsumer_consumerName :: Lens' RegisterStreamConsumer Text

-- | <i>See:</i> <a>newRegisterStreamConsumerResponse</a> smart
--   constructor.
data RegisterStreamConsumerResponse
RegisterStreamConsumerResponse' :: Int -> Consumer -> RegisterStreamConsumerResponse

-- | The response's http status code.
[$sel:httpStatus:RegisterStreamConsumerResponse'] :: RegisterStreamConsumerResponse -> Int

-- | An object that represents the details of the consumer you registered.
--   When you register a consumer, it gets an ARN that is generated by
--   Kinesis Data Streams.
[$sel:consumer:RegisterStreamConsumerResponse'] :: RegisterStreamConsumerResponse -> Consumer

-- | Create a value of <a>RegisterStreamConsumerResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:RegisterStreamConsumerResponse'</a>,
--   <a>registerStreamConsumerResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:consumer:RegisterStreamConsumerResponse'</a>,
--   <a>registerStreamConsumerResponse_consumer</a> - An object that
--   represents the details of the consumer you registered. When you
--   register a consumer, it gets an ARN that is generated by Kinesis Data
--   Streams.
newRegisterStreamConsumerResponse :: Int -> Consumer -> RegisterStreamConsumerResponse

-- | The response's http status code.
registerStreamConsumerResponse_httpStatus :: Lens' RegisterStreamConsumerResponse Int

-- | An object that represents the details of the consumer you registered.
--   When you register a consumer, it gets an ARN that is generated by
--   Kinesis Data Streams.
registerStreamConsumerResponse_consumer :: Lens' RegisterStreamConsumerResponse Consumer
instance GHC.Generics.Generic Amazonka.Kinesis.RegisterStreamConsumer.RegisterStreamConsumer
instance GHC.Show.Show Amazonka.Kinesis.RegisterStreamConsumer.RegisterStreamConsumer
instance GHC.Read.Read Amazonka.Kinesis.RegisterStreamConsumer.RegisterStreamConsumer
instance GHC.Classes.Eq Amazonka.Kinesis.RegisterStreamConsumer.RegisterStreamConsumer
instance GHC.Generics.Generic Amazonka.Kinesis.RegisterStreamConsumer.RegisterStreamConsumerResponse
instance GHC.Show.Show Amazonka.Kinesis.RegisterStreamConsumer.RegisterStreamConsumerResponse
instance GHC.Read.Read Amazonka.Kinesis.RegisterStreamConsumer.RegisterStreamConsumerResponse
instance GHC.Classes.Eq Amazonka.Kinesis.RegisterStreamConsumer.RegisterStreamConsumerResponse
instance Amazonka.Types.AWSRequest Amazonka.Kinesis.RegisterStreamConsumer.RegisterStreamConsumer
instance Control.DeepSeq.NFData Amazonka.Kinesis.RegisterStreamConsumer.RegisterStreamConsumerResponse
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.RegisterStreamConsumer.RegisterStreamConsumer
instance Control.DeepSeq.NFData Amazonka.Kinesis.RegisterStreamConsumer.RegisterStreamConsumer
instance Amazonka.Data.Headers.ToHeaders Amazonka.Kinesis.RegisterStreamConsumer.RegisterStreamConsumer
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.Kinesis.RegisterStreamConsumer.RegisterStreamConsumer
instance Amazonka.Data.Path.ToPath Amazonka.Kinesis.RegisterStreamConsumer.RegisterStreamConsumer
instance Amazonka.Data.Query.ToQuery Amazonka.Kinesis.RegisterStreamConsumer.RegisterStreamConsumer


-- | Writes multiple data records into a Kinesis data stream in a single
--   call (also referred to as a <tt>PutRecords</tt> request). Use this
--   operation to send data into the stream for data ingestion and
--   processing.
--   
--   Each <tt>PutRecords</tt> request can support up to 500 records. Each
--   record in the request can be as large as 1 MiB, up to a limit of 5 MiB
--   for the entire request, including partition keys. Each shard can
--   support writes up to 1,000 records per second, up to a maximum data
--   write total of 1 MiB per second.
--   
--   You must specify the name of the stream that captures, stores, and
--   transports the data; and an array of request <tt>Records</tt>, with
--   each record in the array requiring a partition key and data blob. The
--   record size limit applies to the total size of the partition key and
--   data blob.
--   
--   The data blob can be any type of data; for example, a segment from a
--   log file, geographic/location data, website clickstream data, and so
--   on.
--   
--   The partition key is used by Kinesis Data Streams as input to a hash
--   function that maps the partition key and associated data to a specific
--   shard. An MD5 hash function is used to map partition keys to 128-bit
--   integer values and to map associated data records to shards. As a
--   result of this hashing mechanism, all data records with the same
--   partition key map to the same shard within the stream. For more
--   information, see <a>Adding Data to a Stream</a> in the <i>Amazon
--   Kinesis Data Streams Developer Guide</i>.
--   
--   Each record in the <tt>Records</tt> array may include an optional
--   parameter, <tt>ExplicitHashKey</tt>, which overrides the partition key
--   to shard mapping. This parameter allows a data producer to determine
--   explicitly the shard where the record is stored. For more information,
--   see <a>Adding Multiple Records with PutRecords</a> in the <i>Amazon
--   Kinesis Data Streams Developer Guide</i>.
--   
--   The <tt>PutRecords</tt> response includes an array of response
--   <tt>Records</tt>. Each record in the response array directly
--   correlates with a record in the request array using natural ordering,
--   from the top to the bottom of the request and response. The response
--   <tt>Records</tt> array always includes the same number of records as
--   the request array.
--   
--   The response <tt>Records</tt> array includes both successfully and
--   unsuccessfully processed records. Kinesis Data Streams attempts to
--   process all records in each <tt>PutRecords</tt> request. A single
--   record failure does not stop the processing of subsequent records. As
--   a result, PutRecords doesn't guarantee the ordering of records. If you
--   need to read records in the same order they are written to the stream,
--   use PutRecord instead of <tt>PutRecords</tt>, and write to the same
--   shard.
--   
--   A successfully processed record includes <tt>ShardId</tt> and
--   <tt>SequenceNumber</tt> values. The <tt>ShardId</tt> parameter
--   identifies the shard in the stream where the record is stored. The
--   <tt>SequenceNumber</tt> parameter is an identifier assigned to the put
--   record, unique to all records in the stream.
--   
--   An unsuccessfully processed record includes <tt>ErrorCode</tt> and
--   <tt>ErrorMessage</tt> values. <tt>ErrorCode</tt> reflects the type of
--   error and can be one of the following values:
--   <tt>ProvisionedThroughputExceededException</tt> or
--   <tt>InternalFailure</tt>. <tt>ErrorMessage</tt> provides more detailed
--   information about the <tt>ProvisionedThroughputExceededException</tt>
--   exception including the account ID, stream name, and shard ID of the
--   record that was throttled. For more information about partially
--   successful responses, see <a>Adding Multiple Records with
--   PutRecords</a> in the <i>Amazon Kinesis Data Streams Developer
--   Guide</i>.
--   
--   After you write a record to a stream, you cannot modify that record or
--   its order within the stream.
--   
--   By default, data records are accessible for 24 hours from the time
--   that they are added to a stream. You can use
--   IncreaseStreamRetentionPeriod or DecreaseStreamRetentionPeriod to
--   modify this retention period.
module Amazonka.Kinesis.PutRecords

-- | A <tt>PutRecords</tt> request.
--   
--   <i>See:</i> <a>newPutRecords</a> smart constructor.
data PutRecords
PutRecords' :: NonEmpty PutRecordsRequestEntry -> Text -> PutRecords

-- | The records associated with the request.
[$sel:records:PutRecords'] :: PutRecords -> NonEmpty PutRecordsRequestEntry

-- | The stream name associated with the request.
[$sel:streamName:PutRecords'] :: PutRecords -> Text

-- | Create a value of <a>PutRecords</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:records:PutRecords'</a>, <a>putRecords_records</a> - The
--   records associated with the request.
--   
--   <a>$sel:streamName:PutRecords'</a>, <a>putRecords_streamName</a> - The
--   stream name associated with the request.
newPutRecords :: NonEmpty PutRecordsRequestEntry -> Text -> PutRecords

-- | The records associated with the request.
putRecords_records :: Lens' PutRecords (NonEmpty PutRecordsRequestEntry)

-- | The stream name associated with the request.
putRecords_streamName :: Lens' PutRecords Text

-- | <tt>PutRecords</tt> results.
--   
--   <i>See:</i> <a>newPutRecordsResponse</a> smart constructor.
data PutRecordsResponse
PutRecordsResponse' :: Maybe EncryptionType -> Maybe Natural -> Int -> NonEmpty PutRecordsResultEntry -> PutRecordsResponse

-- | The encryption type used on the records. This parameter can be one of
--   the following values:
--   
--   <ul>
--   <li><tt>NONE</tt>: Do not encrypt the records.</li>
--   <li><tt>KMS</tt>: Use server-side encryption on the records using a
--   customer-managed AWS KMS key.</li>
--   </ul>
[$sel:encryptionType:PutRecordsResponse'] :: PutRecordsResponse -> Maybe EncryptionType

-- | The number of unsuccessfully processed records in a
--   <tt>PutRecords</tt> request.
[$sel:failedRecordCount:PutRecordsResponse'] :: PutRecordsResponse -> Maybe Natural

-- | The response's http status code.
[$sel:httpStatus:PutRecordsResponse'] :: PutRecordsResponse -> Int

-- | An array of successfully and unsuccessfully processed record results,
--   correlated with the request by natural ordering. A record that is
--   successfully added to a stream includes <tt>SequenceNumber</tt> and
--   <tt>ShardId</tt> in the result. A record that fails to be added to a
--   stream includes <tt>ErrorCode</tt> and <tt>ErrorMessage</tt> in the
--   result.
[$sel:records:PutRecordsResponse'] :: PutRecordsResponse -> NonEmpty PutRecordsResultEntry

-- | Create a value of <a>PutRecordsResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:encryptionType:PutRecordsResponse'</a>,
--   <a>putRecordsResponse_encryptionType</a> - The encryption type used on
--   the records. This parameter can be one of the following values:
--   
--   <ul>
--   <li><tt>NONE</tt>: Do not encrypt the records.</li>
--   <li><tt>KMS</tt>: Use server-side encryption on the records using a
--   customer-managed AWS KMS key.</li>
--   </ul>
--   
--   <a>$sel:failedRecordCount:PutRecordsResponse'</a>,
--   <a>putRecordsResponse_failedRecordCount</a> - The number of
--   unsuccessfully processed records in a <tt>PutRecords</tt> request.
--   
--   <a>$sel:httpStatus:PutRecordsResponse'</a>,
--   <a>putRecordsResponse_httpStatus</a> - The response's http status
--   code.
--   
--   <a>$sel:records:PutRecords'</a>, <a>putRecordsResponse_records</a> -
--   An array of successfully and unsuccessfully processed record results,
--   correlated with the request by natural ordering. A record that is
--   successfully added to a stream includes <tt>SequenceNumber</tt> and
--   <tt>ShardId</tt> in the result. A record that fails to be added to a
--   stream includes <tt>ErrorCode</tt> and <tt>ErrorMessage</tt> in the
--   result.
newPutRecordsResponse :: Int -> NonEmpty PutRecordsResultEntry -> PutRecordsResponse

-- | The encryption type used on the records. This parameter can be one of
--   the following values:
--   
--   <ul>
--   <li><tt>NONE</tt>: Do not encrypt the records.</li>
--   <li><tt>KMS</tt>: Use server-side encryption on the records using a
--   customer-managed AWS KMS key.</li>
--   </ul>
putRecordsResponse_encryptionType :: Lens' PutRecordsResponse (Maybe EncryptionType)

-- | The number of unsuccessfully processed records in a
--   <tt>PutRecords</tt> request.
putRecordsResponse_failedRecordCount :: Lens' PutRecordsResponse (Maybe Natural)

-- | The response's http status code.
putRecordsResponse_httpStatus :: Lens' PutRecordsResponse Int

-- | An array of successfully and unsuccessfully processed record results,
--   correlated with the request by natural ordering. A record that is
--   successfully added to a stream includes <tt>SequenceNumber</tt> and
--   <tt>ShardId</tt> in the result. A record that fails to be added to a
--   stream includes <tt>ErrorCode</tt> and <tt>ErrorMessage</tt> in the
--   result.
putRecordsResponse_records :: Lens' PutRecordsResponse (NonEmpty PutRecordsResultEntry)
instance GHC.Generics.Generic Amazonka.Kinesis.PutRecords.PutRecords
instance GHC.Show.Show Amazonka.Kinesis.PutRecords.PutRecords
instance GHC.Read.Read Amazonka.Kinesis.PutRecords.PutRecords
instance GHC.Classes.Eq Amazonka.Kinesis.PutRecords.PutRecords
instance GHC.Generics.Generic Amazonka.Kinesis.PutRecords.PutRecordsResponse
instance GHC.Show.Show Amazonka.Kinesis.PutRecords.PutRecordsResponse
instance GHC.Read.Read Amazonka.Kinesis.PutRecords.PutRecordsResponse
instance GHC.Classes.Eq Amazonka.Kinesis.PutRecords.PutRecordsResponse
instance Amazonka.Types.AWSRequest Amazonka.Kinesis.PutRecords.PutRecords
instance Control.DeepSeq.NFData Amazonka.Kinesis.PutRecords.PutRecordsResponse
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.PutRecords.PutRecords
instance Control.DeepSeq.NFData Amazonka.Kinesis.PutRecords.PutRecords
instance Amazonka.Data.Headers.ToHeaders Amazonka.Kinesis.PutRecords.PutRecords
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.Kinesis.PutRecords.PutRecords
instance Amazonka.Data.Path.ToPath Amazonka.Kinesis.PutRecords.PutRecords
instance Amazonka.Data.Query.ToQuery Amazonka.Kinesis.PutRecords.PutRecords


-- | Writes a single data record into an Amazon Kinesis data stream. Call
--   <tt>PutRecord</tt> to send data into the stream for real-time
--   ingestion and subsequent processing, one record at a time. Each shard
--   can support writes up to 1,000 records per second, up to a maximum
--   data write total of 1 MiB per second.
--   
--   You must specify the name of the stream that captures, stores, and
--   transports the data; a partition key; and the data blob itself.
--   
--   The data blob can be any type of data; for example, a segment from a
--   log file, geographic/location data, website clickstream data, and so
--   on.
--   
--   The partition key is used by Kinesis Data Streams to distribute data
--   across shards. Kinesis Data Streams segregates the data records that
--   belong to a stream into multiple shards, using the partition key
--   associated with each data record to determine the shard to which a
--   given data record belongs.
--   
--   Partition keys are Unicode strings, with a maximum length limit of 256
--   characters for each key. An MD5 hash function is used to map partition
--   keys to 128-bit integer values and to map associated data records to
--   shards using the hash key ranges of the shards. You can override
--   hashing the partition key to determine the shard by explicitly
--   specifying a hash value using the <tt>ExplicitHashKey</tt> parameter.
--   For more information, see <a>Adding Data to a Stream</a> in the
--   <i>Amazon Kinesis Data Streams Developer Guide</i>.
--   
--   <tt>PutRecord</tt> returns the shard ID of where the data record was
--   placed and the sequence number that was assigned to the data record.
--   
--   Sequence numbers increase over time and are specific to a shard within
--   a stream, not across all shards within a stream. To guarantee strictly
--   increasing ordering, write serially to a shard and use the
--   <tt>SequenceNumberForOrdering</tt> parameter. For more information,
--   see <a>Adding Data to a Stream</a> in the <i>Amazon Kinesis Data
--   Streams Developer Guide</i>.
--   
--   After you write a record to a stream, you cannot modify that record or
--   its order within the stream.
--   
--   If a <tt>PutRecord</tt> request cannot be processed because of
--   insufficient provisioned throughput on the shard involved in the
--   request, <tt>PutRecord</tt> throws
--   <tt>ProvisionedThroughputExceededException</tt>.
--   
--   By default, data records are accessible for 24 hours from the time
--   that they are added to a stream. You can use
--   IncreaseStreamRetentionPeriod or DecreaseStreamRetentionPeriod to
--   modify this retention period.
module Amazonka.Kinesis.PutRecord

-- | Represents the input for <tt>PutRecord</tt>.
--   
--   <i>See:</i> <a>newPutRecord</a> smart constructor.
data PutRecord
PutRecord' :: Maybe Text -> Maybe Text -> Text -> Base64 -> Text -> PutRecord

-- | The hash value used to explicitly determine the shard the data record
--   is assigned to by overriding the partition key hash.
[$sel:explicitHashKey:PutRecord'] :: PutRecord -> Maybe Text

-- | Guarantees strictly increasing sequence numbers, for puts from the
--   same client and to the same partition key. Usage: set the
--   <tt>SequenceNumberForOrdering</tt> of record <i>n</i> to the sequence
--   number of record <i>n-1</i> (as returned in the result when putting
--   record <i>n-1</i>). If this parameter is not set, records are coarsely
--   ordered based on arrival time.
[$sel:sequenceNumberForOrdering:PutRecord'] :: PutRecord -> Maybe Text

-- | The name of the stream to put the data record into.
[$sel:streamName:PutRecord'] :: PutRecord -> Text

-- | The data blob to put into the record, which is base64-encoded when the
--   blob is serialized. When the data blob (the payload before
--   base64-encoding) is added to the partition key size, the total size
--   must not exceed the maximum record size (1 MiB).
[$sel:data':PutRecord'] :: PutRecord -> Base64

-- | Determines which shard in the stream the data record is assigned to.
--   Partition keys are Unicode strings with a maximum length limit of 256
--   characters for each key. Amazon Kinesis Data Streams uses the
--   partition key as input to a hash function that maps the partition key
--   and associated data to a specific shard. Specifically, an MD5 hash
--   function is used to map partition keys to 128-bit integer values and
--   to map associated data records to shards. As a result of this hashing
--   mechanism, all data records with the same partition key map to the
--   same shard within the stream.
[$sel:partitionKey:PutRecord'] :: PutRecord -> Text

-- | Create a value of <a>PutRecord</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:explicitHashKey:PutRecord'</a>,
--   <a>putRecord_explicitHashKey</a> - The hash value used to explicitly
--   determine the shard the data record is assigned to by overriding the
--   partition key hash.
--   
--   <a>$sel:sequenceNumberForOrdering:PutRecord'</a>,
--   <a>putRecord_sequenceNumberForOrdering</a> - Guarantees strictly
--   increasing sequence numbers, for puts from the same client and to the
--   same partition key. Usage: set the <tt>SequenceNumberForOrdering</tt>
--   of record <i>n</i> to the sequence number of record <i>n-1</i> (as
--   returned in the result when putting record <i>n-1</i>). If this
--   parameter is not set, records are coarsely ordered based on arrival
--   time.
--   
--   <a>$sel:streamName:PutRecord'</a>, <a>putRecord_streamName</a> - The
--   name of the stream to put the data record into.
--   
--   <a>$sel:data':PutRecord'</a>, <a>putRecord_data</a> - The data blob to
--   put into the record, which is base64-encoded when the blob is
--   serialized. When the data blob (the payload before base64-encoding) is
--   added to the partition key size, the total size must not exceed the
--   maximum record size (1 MiB).-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
--   
--   <a>$sel:partitionKey:PutRecord'</a>, <a>putRecord_partitionKey</a> -
--   Determines which shard in the stream the data record is assigned to.
--   Partition keys are Unicode strings with a maximum length limit of 256
--   characters for each key. Amazon Kinesis Data Streams uses the
--   partition key as input to a hash function that maps the partition key
--   and associated data to a specific shard. Specifically, an MD5 hash
--   function is used to map partition keys to 128-bit integer values and
--   to map associated data records to shards. As a result of this hashing
--   mechanism, all data records with the same partition key map to the
--   same shard within the stream.
newPutRecord :: Text -> ByteString -> Text -> PutRecord

-- | The hash value used to explicitly determine the shard the data record
--   is assigned to by overriding the partition key hash.
putRecord_explicitHashKey :: Lens' PutRecord (Maybe Text)

-- | Guarantees strictly increasing sequence numbers, for puts from the
--   same client and to the same partition key. Usage: set the
--   <tt>SequenceNumberForOrdering</tt> of record <i>n</i> to the sequence
--   number of record <i>n-1</i> (as returned in the result when putting
--   record <i>n-1</i>). If this parameter is not set, records are coarsely
--   ordered based on arrival time.
putRecord_sequenceNumberForOrdering :: Lens' PutRecord (Maybe Text)

-- | The name of the stream to put the data record into.
putRecord_streamName :: Lens' PutRecord Text

-- | The data blob to put into the record, which is base64-encoded when the
--   blob is serialized. When the data blob (the payload before
--   base64-encoding) is added to the partition key size, the total size
--   must not exceed the maximum record size (1 MiB).-- -- <i>Note:</i>
--   This <tt>Lens</tt> automatically encodes and decodes Base64 data. --
--   The underlying isomorphism will encode to Base64 representation during
--   -- serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
putRecord_data :: Lens' PutRecord ByteString

-- | Determines which shard in the stream the data record is assigned to.
--   Partition keys are Unicode strings with a maximum length limit of 256
--   characters for each key. Amazon Kinesis Data Streams uses the
--   partition key as input to a hash function that maps the partition key
--   and associated data to a specific shard. Specifically, an MD5 hash
--   function is used to map partition keys to 128-bit integer values and
--   to map associated data records to shards. As a result of this hashing
--   mechanism, all data records with the same partition key map to the
--   same shard within the stream.
putRecord_partitionKey :: Lens' PutRecord Text

-- | Represents the output for <tt>PutRecord</tt>.
--   
--   <i>See:</i> <a>newPutRecordResponse</a> smart constructor.
data PutRecordResponse
PutRecordResponse' :: Maybe EncryptionType -> Int -> Text -> Text -> PutRecordResponse

-- | The encryption type to use on the record. This parameter can be one of
--   the following values:
--   
--   <ul>
--   <li><tt>NONE</tt>: Do not encrypt the records in the stream.</li>
--   <li><tt>KMS</tt>: Use server-side encryption on the records in the
--   stream using a customer-managed AWS KMS key.</li>
--   </ul>
[$sel:encryptionType:PutRecordResponse'] :: PutRecordResponse -> Maybe EncryptionType

-- | The response's http status code.
[$sel:httpStatus:PutRecordResponse'] :: PutRecordResponse -> Int

-- | The shard ID of the shard where the data record was placed.
[$sel:shardId:PutRecordResponse'] :: PutRecordResponse -> Text

-- | The sequence number identifier that was assigned to the put data
--   record. The sequence number for the record is unique across all
--   records in the stream. A sequence number is the identifier associated
--   with every record put into the stream.
[$sel:sequenceNumber:PutRecordResponse'] :: PutRecordResponse -> Text

-- | Create a value of <a>PutRecordResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:encryptionType:PutRecordResponse'</a>,
--   <a>putRecordResponse_encryptionType</a> - The encryption type to use
--   on the record. This parameter can be one of the following values:
--   
--   <ul>
--   <li><tt>NONE</tt>: Do not encrypt the records in the stream.</li>
--   <li><tt>KMS</tt>: Use server-side encryption on the records in the
--   stream using a customer-managed AWS KMS key.</li>
--   </ul>
--   
--   <a>$sel:httpStatus:PutRecordResponse'</a>,
--   <a>putRecordResponse_httpStatus</a> - The response's http status code.
--   
--   <a>$sel:shardId:PutRecordResponse'</a>,
--   <a>putRecordResponse_shardId</a> - The shard ID of the shard where the
--   data record was placed.
--   
--   <a>$sel:sequenceNumber:PutRecordResponse'</a>,
--   <a>putRecordResponse_sequenceNumber</a> - The sequence number
--   identifier that was assigned to the put data record. The sequence
--   number for the record is unique across all records in the stream. A
--   sequence number is the identifier associated with every record put
--   into the stream.
newPutRecordResponse :: Int -> Text -> Text -> PutRecordResponse

-- | The encryption type to use on the record. This parameter can be one of
--   the following values:
--   
--   <ul>
--   <li><tt>NONE</tt>: Do not encrypt the records in the stream.</li>
--   <li><tt>KMS</tt>: Use server-side encryption on the records in the
--   stream using a customer-managed AWS KMS key.</li>
--   </ul>
putRecordResponse_encryptionType :: Lens' PutRecordResponse (Maybe EncryptionType)

-- | The response's http status code.
putRecordResponse_httpStatus :: Lens' PutRecordResponse Int

-- | The shard ID of the shard where the data record was placed.
putRecordResponse_shardId :: Lens' PutRecordResponse Text

-- | The sequence number identifier that was assigned to the put data
--   record. The sequence number for the record is unique across all
--   records in the stream. A sequence number is the identifier associated
--   with every record put into the stream.
putRecordResponse_sequenceNumber :: Lens' PutRecordResponse Text
instance GHC.Generics.Generic Amazonka.Kinesis.PutRecord.PutRecord
instance GHC.Show.Show Amazonka.Kinesis.PutRecord.PutRecord
instance GHC.Read.Read Amazonka.Kinesis.PutRecord.PutRecord
instance GHC.Classes.Eq Amazonka.Kinesis.PutRecord.PutRecord
instance GHC.Generics.Generic Amazonka.Kinesis.PutRecord.PutRecordResponse
instance GHC.Show.Show Amazonka.Kinesis.PutRecord.PutRecordResponse
instance GHC.Read.Read Amazonka.Kinesis.PutRecord.PutRecordResponse
instance GHC.Classes.Eq Amazonka.Kinesis.PutRecord.PutRecordResponse
instance Amazonka.Types.AWSRequest Amazonka.Kinesis.PutRecord.PutRecord
instance Control.DeepSeq.NFData Amazonka.Kinesis.PutRecord.PutRecordResponse
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.PutRecord.PutRecord
instance Control.DeepSeq.NFData Amazonka.Kinesis.PutRecord.PutRecord
instance Amazonka.Data.Headers.ToHeaders Amazonka.Kinesis.PutRecord.PutRecord
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.Kinesis.PutRecord.PutRecord
instance Amazonka.Data.Path.ToPath Amazonka.Kinesis.PutRecord.PutRecord
instance Amazonka.Data.Query.ToQuery Amazonka.Kinesis.PutRecord.PutRecord


-- | Merges two adjacent shards in a Kinesis data stream and combines them
--   into a single shard to reduce the stream's capacity to ingest and
--   transport data. Two shards are considered adjacent if the union of the
--   hash key ranges for the two shards form a contiguous set with no gaps.
--   For example, if you have two shards, one with a hash key range of
--   276...381 and the other with a hash key range of 382...454, then you
--   could merge these two shards into a single shard that would have a
--   hash key range of 276...454. After the merge, the single child shard
--   receives data for all hash key values covered by the two parent
--   shards.
--   
--   <tt>MergeShards</tt> is called when there is a need to reduce the
--   overall capacity of a stream because of excess capacity that is not
--   being used. You must specify the shard to be merged and the adjacent
--   shard for a stream. For more information about merging shards, see
--   <a>Merge Two Shards</a> in the <i>Amazon Kinesis Data Streams
--   Developer Guide</i>.
--   
--   If the stream is in the <tt>ACTIVE</tt> state, you can call
--   <tt>MergeShards</tt>. If a stream is in the <tt>CREATING</tt>,
--   <tt>UPDATING</tt>, or <tt>DELETING</tt> state, <tt>MergeShards</tt>
--   returns a <tt>ResourceInUseException</tt>. If the specified stream
--   does not exist, <tt>MergeShards</tt> returns a
--   <tt>ResourceNotFoundException</tt>.
--   
--   You can use DescribeStream to check the state of the stream, which is
--   returned in <tt>StreamStatus</tt>.
--   
--   <tt>MergeShards</tt> is an asynchronous operation. Upon receiving a
--   <tt>MergeShards</tt> request, Amazon Kinesis Data Streams immediately
--   returns a response and sets the <tt>StreamStatus</tt> to
--   <tt>UPDATING</tt>. After the operation is completed, Kinesis Data
--   Streams sets the <tt>StreamStatus</tt> to <tt>ACTIVE</tt>. Read and
--   write operations continue to work while the stream is in the
--   <tt>UPDATING</tt> state.
--   
--   You use DescribeStream to determine the shard IDs that are specified
--   in the <tt>MergeShards</tt> request.
--   
--   If you try to operate on too many streams in parallel using
--   CreateStream, DeleteStream, <tt>MergeShards</tt>, or SplitShard, you
--   receive a <tt>LimitExceededException</tt>.
--   
--   <tt>MergeShards</tt> has a limit of five transactions per second per
--   account.
module Amazonka.Kinesis.MergeShards

-- | Represents the input for <tt>MergeShards</tt>.
--   
--   <i>See:</i> <a>newMergeShards</a> smart constructor.
data MergeShards
MergeShards' :: Text -> Text -> Text -> MergeShards

-- | The name of the stream for the merge.
[$sel:streamName:MergeShards'] :: MergeShards -> Text

-- | The shard ID of the shard to combine with the adjacent shard for the
--   merge.
[$sel:shardToMerge:MergeShards'] :: MergeShards -> Text

-- | The shard ID of the adjacent shard for the merge.
[$sel:adjacentShardToMerge:MergeShards'] :: MergeShards -> Text

-- | Create a value of <a>MergeShards</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamName:MergeShards'</a>, <a>mergeShards_streamName</a> -
--   The name of the stream for the merge.
--   
--   <a>$sel:shardToMerge:MergeShards'</a>, <a>mergeShards_shardToMerge</a>
--   - The shard ID of the shard to combine with the adjacent shard for the
--   merge.
--   
--   <a>$sel:adjacentShardToMerge:MergeShards'</a>,
--   <a>mergeShards_adjacentShardToMerge</a> - The shard ID of the adjacent
--   shard for the merge.
newMergeShards :: Text -> Text -> Text -> MergeShards

-- | The name of the stream for the merge.
mergeShards_streamName :: Lens' MergeShards Text

-- | The shard ID of the shard to combine with the adjacent shard for the
--   merge.
mergeShards_shardToMerge :: Lens' MergeShards Text

-- | The shard ID of the adjacent shard for the merge.
mergeShards_adjacentShardToMerge :: Lens' MergeShards Text

-- | <i>See:</i> <a>newMergeShardsResponse</a> smart constructor.
data MergeShardsResponse
MergeShardsResponse' :: MergeShardsResponse

-- | Create a value of <a>MergeShardsResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newMergeShardsResponse :: MergeShardsResponse
instance GHC.Generics.Generic Amazonka.Kinesis.MergeShards.MergeShards
instance GHC.Show.Show Amazonka.Kinesis.MergeShards.MergeShards
instance GHC.Read.Read Amazonka.Kinesis.MergeShards.MergeShards
instance GHC.Classes.Eq Amazonka.Kinesis.MergeShards.MergeShards
instance GHC.Generics.Generic Amazonka.Kinesis.MergeShards.MergeShardsResponse
instance GHC.Show.Show Amazonka.Kinesis.MergeShards.MergeShardsResponse
instance GHC.Read.Read Amazonka.Kinesis.MergeShards.MergeShardsResponse
instance GHC.Classes.Eq Amazonka.Kinesis.MergeShards.MergeShardsResponse
instance Amazonka.Types.AWSRequest Amazonka.Kinesis.MergeShards.MergeShards
instance Control.DeepSeq.NFData Amazonka.Kinesis.MergeShards.MergeShardsResponse
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.MergeShards.MergeShards
instance Control.DeepSeq.NFData Amazonka.Kinesis.MergeShards.MergeShards
instance Amazonka.Data.Headers.ToHeaders Amazonka.Kinesis.MergeShards.MergeShards
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.Kinesis.MergeShards.MergeShards
instance Amazonka.Data.Path.ToPath Amazonka.Kinesis.MergeShards.MergeShards
instance Amazonka.Data.Query.ToQuery Amazonka.Kinesis.MergeShards.MergeShards


-- | Lists the tags for the specified Kinesis data stream. This operation
--   has a limit of five transactions per second per account.
module Amazonka.Kinesis.ListTagsForStream

-- | Represents the input for <tt>ListTagsForStream</tt>.
--   
--   <i>See:</i> <a>newListTagsForStream</a> smart constructor.
data ListTagsForStream
ListTagsForStream' :: Maybe Natural -> Maybe Text -> Text -> ListTagsForStream

-- | The number of tags to return. If this number is less than the total
--   number of tags associated with the stream, <tt>HasMoreTags</tt> is set
--   to <tt>true</tt>. To list additional tags, set
--   <tt>ExclusiveStartTagKey</tt> to the last key in the response.
[$sel:limit:ListTagsForStream'] :: ListTagsForStream -> Maybe Natural

-- | The key to use as the starting point for the list of tags. If this
--   parameter is set, <tt>ListTagsForStream</tt> gets all tags that occur
--   after <tt>ExclusiveStartTagKey</tt>.
[$sel:exclusiveStartTagKey:ListTagsForStream'] :: ListTagsForStream -> Maybe Text

-- | The name of the stream.
[$sel:streamName:ListTagsForStream'] :: ListTagsForStream -> Text

-- | Create a value of <a>ListTagsForStream</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:limit:ListTagsForStream'</a>, <a>listTagsForStream_limit</a> -
--   The number of tags to return. If this number is less than the total
--   number of tags associated with the stream, <tt>HasMoreTags</tt> is set
--   to <tt>true</tt>. To list additional tags, set
--   <tt>ExclusiveStartTagKey</tt> to the last key in the response.
--   
--   <a>$sel:exclusiveStartTagKey:ListTagsForStream'</a>,
--   <a>listTagsForStream_exclusiveStartTagKey</a> - The key to use as the
--   starting point for the list of tags. If this parameter is set,
--   <tt>ListTagsForStream</tt> gets all tags that occur after
--   <tt>ExclusiveStartTagKey</tt>.
--   
--   <a>$sel:streamName:ListTagsForStream'</a>,
--   <a>listTagsForStream_streamName</a> - The name of the stream.
newListTagsForStream :: Text -> ListTagsForStream

-- | The number of tags to return. If this number is less than the total
--   number of tags associated with the stream, <tt>HasMoreTags</tt> is set
--   to <tt>true</tt>. To list additional tags, set
--   <tt>ExclusiveStartTagKey</tt> to the last key in the response.
listTagsForStream_limit :: Lens' ListTagsForStream (Maybe Natural)

-- | The key to use as the starting point for the list of tags. If this
--   parameter is set, <tt>ListTagsForStream</tt> gets all tags that occur
--   after <tt>ExclusiveStartTagKey</tt>.
listTagsForStream_exclusiveStartTagKey :: Lens' ListTagsForStream (Maybe Text)

-- | The name of the stream.
listTagsForStream_streamName :: Lens' ListTagsForStream Text

-- | Represents the output for <tt>ListTagsForStream</tt>.
--   
--   <i>See:</i> <a>newListTagsForStreamResponse</a> smart constructor.
data ListTagsForStreamResponse
ListTagsForStreamResponse' :: Int -> [Tag] -> Bool -> ListTagsForStreamResponse

-- | The response's http status code.
[$sel:httpStatus:ListTagsForStreamResponse'] :: ListTagsForStreamResponse -> Int

-- | A list of tags associated with <tt>StreamName</tt>, starting with the
--   first tag after <tt>ExclusiveStartTagKey</tt> and up to the specified
--   <tt>Limit</tt>.
[$sel:tags:ListTagsForStreamResponse'] :: ListTagsForStreamResponse -> [Tag]

-- | If set to <tt>true</tt>, more tags are available. To request
--   additional tags, set <tt>ExclusiveStartTagKey</tt> to the key of the
--   last tag returned.
[$sel:hasMoreTags:ListTagsForStreamResponse'] :: ListTagsForStreamResponse -> Bool

-- | Create a value of <a>ListTagsForStreamResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:ListTagsForStreamResponse'</a>,
--   <a>listTagsForStreamResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:tags:ListTagsForStreamResponse'</a>,
--   <a>listTagsForStreamResponse_tags</a> - A list of tags associated with
--   <tt>StreamName</tt>, starting with the first tag after
--   <tt>ExclusiveStartTagKey</tt> and up to the specified <tt>Limit</tt>.
--   
--   <a>$sel:hasMoreTags:ListTagsForStreamResponse'</a>,
--   <a>listTagsForStreamResponse_hasMoreTags</a> - If set to
--   <tt>true</tt>, more tags are available. To request additional tags,
--   set <tt>ExclusiveStartTagKey</tt> to the key of the last tag returned.
newListTagsForStreamResponse :: Int -> Bool -> ListTagsForStreamResponse

-- | The response's http status code.
listTagsForStreamResponse_httpStatus :: Lens' ListTagsForStreamResponse Int

-- | A list of tags associated with <tt>StreamName</tt>, starting with the
--   first tag after <tt>ExclusiveStartTagKey</tt> and up to the specified
--   <tt>Limit</tt>.
listTagsForStreamResponse_tags :: Lens' ListTagsForStreamResponse [Tag]

-- | If set to <tt>true</tt>, more tags are available. To request
--   additional tags, set <tt>ExclusiveStartTagKey</tt> to the key of the
--   last tag returned.
listTagsForStreamResponse_hasMoreTags :: Lens' ListTagsForStreamResponse Bool
instance GHC.Generics.Generic Amazonka.Kinesis.ListTagsForStream.ListTagsForStream
instance GHC.Show.Show Amazonka.Kinesis.ListTagsForStream.ListTagsForStream
instance GHC.Read.Read Amazonka.Kinesis.ListTagsForStream.ListTagsForStream
instance GHC.Classes.Eq Amazonka.Kinesis.ListTagsForStream.ListTagsForStream
instance GHC.Generics.Generic Amazonka.Kinesis.ListTagsForStream.ListTagsForStreamResponse
instance GHC.Show.Show Amazonka.Kinesis.ListTagsForStream.ListTagsForStreamResponse
instance GHC.Read.Read Amazonka.Kinesis.ListTagsForStream.ListTagsForStreamResponse
instance GHC.Classes.Eq Amazonka.Kinesis.ListTagsForStream.ListTagsForStreamResponse
instance Amazonka.Types.AWSRequest Amazonka.Kinesis.ListTagsForStream.ListTagsForStream
instance Control.DeepSeq.NFData Amazonka.Kinesis.ListTagsForStream.ListTagsForStreamResponse
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.ListTagsForStream.ListTagsForStream
instance Control.DeepSeq.NFData Amazonka.Kinesis.ListTagsForStream.ListTagsForStream
instance Amazonka.Data.Headers.ToHeaders Amazonka.Kinesis.ListTagsForStream.ListTagsForStream
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.Kinesis.ListTagsForStream.ListTagsForStream
instance Amazonka.Data.Path.ToPath Amazonka.Kinesis.ListTagsForStream.ListTagsForStream
instance Amazonka.Data.Query.ToQuery Amazonka.Kinesis.ListTagsForStream.ListTagsForStream


-- | Lists your Kinesis data streams.
--   
--   The number of streams may be too large to return from a single call to
--   <tt>ListStreams</tt>. You can limit the number of returned streams
--   using the <tt>Limit</tt> parameter. If you do not specify a value for
--   the <tt>Limit</tt> parameter, Kinesis Data Streams uses the default
--   limit, which is currently 10.
--   
--   You can detect if there are more streams available to list by using
--   the <tt>HasMoreStreams</tt> flag from the returned output. If there
--   are more streams available, you can request more streams by using the
--   name of the last stream returned by the <tt>ListStreams</tt> request
--   in the <tt>ExclusiveStartStreamName</tt> parameter in a subsequent
--   request to <tt>ListStreams</tt>. The group of stream names returned by
--   the subsequent request is then added to the list. You can continue
--   this process until all the stream names have been collected in the
--   list.
--   
--   ListStreams has a limit of five transactions per second per account.
--   
--   This operation returns paginated results.
module Amazonka.Kinesis.ListStreams

-- | Represents the input for <tt>ListStreams</tt>.
--   
--   <i>See:</i> <a>newListStreams</a> smart constructor.
data ListStreams
ListStreams' :: Maybe Natural -> Maybe Text -> ListStreams

-- | The maximum number of streams to list.
[$sel:limit:ListStreams'] :: ListStreams -> Maybe Natural

-- | The name of the stream to start the list with.
[$sel:exclusiveStartStreamName:ListStreams'] :: ListStreams -> Maybe Text

-- | Create a value of <a>ListStreams</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:limit:ListStreams'</a>, <a>listStreams_limit</a> - The maximum
--   number of streams to list.
--   
--   <a>$sel:exclusiveStartStreamName:ListStreams'</a>,
--   <a>listStreams_exclusiveStartStreamName</a> - The name of the stream
--   to start the list with.
newListStreams :: ListStreams

-- | The maximum number of streams to list.
listStreams_limit :: Lens' ListStreams (Maybe Natural)

-- | The name of the stream to start the list with.
listStreams_exclusiveStartStreamName :: Lens' ListStreams (Maybe Text)

-- | Represents the output for <tt>ListStreams</tt>.
--   
--   <i>See:</i> <a>newListStreamsResponse</a> smart constructor.
data ListStreamsResponse
ListStreamsResponse' :: Int -> [Text] -> Bool -> ListStreamsResponse

-- | The response's http status code.
[$sel:httpStatus:ListStreamsResponse'] :: ListStreamsResponse -> Int

-- | The names of the streams that are associated with the AWS account
--   making the <tt>ListStreams</tt> request.
[$sel:streamNames:ListStreamsResponse'] :: ListStreamsResponse -> [Text]

-- | If set to <tt>true</tt>, there are more streams available to list.
[$sel:hasMoreStreams:ListStreamsResponse'] :: ListStreamsResponse -> Bool

-- | Create a value of <a>ListStreamsResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:ListStreamsResponse'</a>,
--   <a>listStreamsResponse_httpStatus</a> - The response's http status
--   code.
--   
--   <a>$sel:streamNames:ListStreamsResponse'</a>,
--   <a>listStreamsResponse_streamNames</a> - The names of the streams that
--   are associated with the AWS account making the <tt>ListStreams</tt>
--   request.
--   
--   <a>$sel:hasMoreStreams:ListStreamsResponse'</a>,
--   <a>listStreamsResponse_hasMoreStreams</a> - If set to <tt>true</tt>,
--   there are more streams available to list.
newListStreamsResponse :: Int -> Bool -> ListStreamsResponse

-- | The response's http status code.
listStreamsResponse_httpStatus :: Lens' ListStreamsResponse Int

-- | The names of the streams that are associated with the AWS account
--   making the <tt>ListStreams</tt> request.
listStreamsResponse_streamNames :: Lens' ListStreamsResponse [Text]

-- | If set to <tt>true</tt>, there are more streams available to list.
listStreamsResponse_hasMoreStreams :: Lens' ListStreamsResponse Bool
instance GHC.Generics.Generic Amazonka.Kinesis.ListStreams.ListStreams
instance GHC.Show.Show Amazonka.Kinesis.ListStreams.ListStreams
instance GHC.Read.Read Amazonka.Kinesis.ListStreams.ListStreams
instance GHC.Classes.Eq Amazonka.Kinesis.ListStreams.ListStreams
instance GHC.Generics.Generic Amazonka.Kinesis.ListStreams.ListStreamsResponse
instance GHC.Show.Show Amazonka.Kinesis.ListStreams.ListStreamsResponse
instance GHC.Read.Read Amazonka.Kinesis.ListStreams.ListStreamsResponse
instance GHC.Classes.Eq Amazonka.Kinesis.ListStreams.ListStreamsResponse
instance Amazonka.Types.AWSRequest Amazonka.Kinesis.ListStreams.ListStreams
instance Control.DeepSeq.NFData Amazonka.Kinesis.ListStreams.ListStreamsResponse
instance Amazonka.Pager.AWSPager Amazonka.Kinesis.ListStreams.ListStreams
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.ListStreams.ListStreams
instance Control.DeepSeq.NFData Amazonka.Kinesis.ListStreams.ListStreams
instance Amazonka.Data.Headers.ToHeaders Amazonka.Kinesis.ListStreams.ListStreams
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.Kinesis.ListStreams.ListStreams
instance Amazonka.Data.Path.ToPath Amazonka.Kinesis.ListStreams.ListStreams
instance Amazonka.Data.Query.ToQuery Amazonka.Kinesis.ListStreams.ListStreams


-- | Lists the consumers registered to receive data from a stream using
--   enhanced fan-out, and provides information about each consumer.
--   
--   This operation has a limit of 5 transactions per second per stream.
--   
--   This operation returns paginated results.
module Amazonka.Kinesis.ListStreamConsumers

-- | <i>See:</i> <a>newListStreamConsumers</a> smart constructor.
data ListStreamConsumers
ListStreamConsumers' :: Maybe Text -> Maybe POSIX -> Maybe Natural -> Text -> ListStreamConsumers

-- | When the number of consumers that are registered with the data stream
--   is greater than the default value for the <tt>MaxResults</tt>
--   parameter, or if you explicitly specify a value for
--   <tt>MaxResults</tt> that is less than the number of consumers that are
--   registered with the data stream, the response includes a pagination
--   token named <tt>NextToken</tt>. You can specify this
--   <tt>NextToken</tt> value in a subsequent call to
--   <tt>ListStreamConsumers</tt> to list the next set of registered
--   consumers.
--   
--   Don't specify <tt>StreamName</tt> or <tt>StreamCreationTimestamp</tt>
--   if you specify <tt>NextToken</tt> because the latter unambiguously
--   identifies the stream.
--   
--   You can optionally specify a value for the <tt>MaxResults</tt>
--   parameter when you specify <tt>NextToken</tt>. If you specify a
--   <tt>MaxResults</tt> value that is less than the number of consumers
--   that the operation returns if you don't specify <tt>MaxResults</tt>,
--   the response will contain a new <tt>NextToken</tt> value. You can use
--   the new <tt>NextToken</tt> value in a subsequent call to the
--   <tt>ListStreamConsumers</tt> operation to list the next set of
--   consumers.
--   
--   Tokens expire after 300 seconds. When you obtain a value for
--   <tt>NextToken</tt> in the response to a call to
--   <tt>ListStreamConsumers</tt>, you have 300 seconds to use that value.
--   If you specify an expired token in a call to
--   <tt>ListStreamConsumers</tt>, you get
--   <tt>ExpiredNextTokenException</tt>.
[$sel:nextToken:ListStreamConsumers'] :: ListStreamConsumers -> Maybe Text

-- | Specify this input parameter to distinguish data streams that have the
--   same name. For example, if you create a data stream and then delete
--   it, and you later create another data stream with the same name, you
--   can use this input parameter to specify which of the two streams you
--   want to list the consumers for.
--   
--   You can't specify this parameter if you specify the NextToken
--   parameter.
[$sel:streamCreationTimestamp:ListStreamConsumers'] :: ListStreamConsumers -> Maybe POSIX

-- | The maximum number of consumers that you want a single call of
--   <tt>ListStreamConsumers</tt> to return.
[$sel:maxResults:ListStreamConsumers'] :: ListStreamConsumers -> Maybe Natural

-- | The ARN of the Kinesis data stream for which you want to list the
--   registered consumers. For more information, see <a>Amazon Resource
--   Names (ARNs) and AWS Service Namespaces</a>.
[$sel:streamARN:ListStreamConsumers'] :: ListStreamConsumers -> Text

-- | Create a value of <a>ListStreamConsumers</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListStreamConsumers'</a>,
--   <a>listStreamConsumers_nextToken</a> - When the number of consumers
--   that are registered with the data stream is greater than the default
--   value for the <tt>MaxResults</tt> parameter, or if you explicitly
--   specify a value for <tt>MaxResults</tt> that is less than the number
--   of consumers that are registered with the data stream, the response
--   includes a pagination token named <tt>NextToken</tt>. You can specify
--   this <tt>NextToken</tt> value in a subsequent call to
--   <tt>ListStreamConsumers</tt> to list the next set of registered
--   consumers.
--   
--   Don't specify <tt>StreamName</tt> or <tt>StreamCreationTimestamp</tt>
--   if you specify <tt>NextToken</tt> because the latter unambiguously
--   identifies the stream.
--   
--   You can optionally specify a value for the <tt>MaxResults</tt>
--   parameter when you specify <tt>NextToken</tt>. If you specify a
--   <tt>MaxResults</tt> value that is less than the number of consumers
--   that the operation returns if you don't specify <tt>MaxResults</tt>,
--   the response will contain a new <tt>NextToken</tt> value. You can use
--   the new <tt>NextToken</tt> value in a subsequent call to the
--   <tt>ListStreamConsumers</tt> operation to list the next set of
--   consumers.
--   
--   Tokens expire after 300 seconds. When you obtain a value for
--   <tt>NextToken</tt> in the response to a call to
--   <tt>ListStreamConsumers</tt>, you have 300 seconds to use that value.
--   If you specify an expired token in a call to
--   <tt>ListStreamConsumers</tt>, you get
--   <tt>ExpiredNextTokenException</tt>.
--   
--   <a>$sel:streamCreationTimestamp:ListStreamConsumers'</a>,
--   <a>listStreamConsumers_streamCreationTimestamp</a> - Specify this
--   input parameter to distinguish data streams that have the same name.
--   For example, if you create a data stream and then delete it, and you
--   later create another data stream with the same name, you can use this
--   input parameter to specify which of the two streams you want to list
--   the consumers for.
--   
--   You can't specify this parameter if you specify the NextToken
--   parameter.
--   
--   <a>$sel:maxResults:ListStreamConsumers'</a>,
--   <a>listStreamConsumers_maxResults</a> - The maximum number of
--   consumers that you want a single call of <tt>ListStreamConsumers</tt>
--   to return.
--   
--   <a>$sel:streamARN:ListStreamConsumers'</a>,
--   <a>listStreamConsumers_streamARN</a> - The ARN of the Kinesis data
--   stream for which you want to list the registered consumers. For more
--   information, see <a>Amazon Resource Names (ARNs) and AWS Service
--   Namespaces</a>.
newListStreamConsumers :: Text -> ListStreamConsumers

-- | When the number of consumers that are registered with the data stream
--   is greater than the default value for the <tt>MaxResults</tt>
--   parameter, or if you explicitly specify a value for
--   <tt>MaxResults</tt> that is less than the number of consumers that are
--   registered with the data stream, the response includes a pagination
--   token named <tt>NextToken</tt>. You can specify this
--   <tt>NextToken</tt> value in a subsequent call to
--   <tt>ListStreamConsumers</tt> to list the next set of registered
--   consumers.
--   
--   Don't specify <tt>StreamName</tt> or <tt>StreamCreationTimestamp</tt>
--   if you specify <tt>NextToken</tt> because the latter unambiguously
--   identifies the stream.
--   
--   You can optionally specify a value for the <tt>MaxResults</tt>
--   parameter when you specify <tt>NextToken</tt>. If you specify a
--   <tt>MaxResults</tt> value that is less than the number of consumers
--   that the operation returns if you don't specify <tt>MaxResults</tt>,
--   the response will contain a new <tt>NextToken</tt> value. You can use
--   the new <tt>NextToken</tt> value in a subsequent call to the
--   <tt>ListStreamConsumers</tt> operation to list the next set of
--   consumers.
--   
--   Tokens expire after 300 seconds. When you obtain a value for
--   <tt>NextToken</tt> in the response to a call to
--   <tt>ListStreamConsumers</tt>, you have 300 seconds to use that value.
--   If you specify an expired token in a call to
--   <tt>ListStreamConsumers</tt>, you get
--   <tt>ExpiredNextTokenException</tt>.
listStreamConsumers_nextToken :: Lens' ListStreamConsumers (Maybe Text)

-- | Specify this input parameter to distinguish data streams that have the
--   same name. For example, if you create a data stream and then delete
--   it, and you later create another data stream with the same name, you
--   can use this input parameter to specify which of the two streams you
--   want to list the consumers for.
--   
--   You can't specify this parameter if you specify the NextToken
--   parameter.
listStreamConsumers_streamCreationTimestamp :: Lens' ListStreamConsumers (Maybe UTCTime)

-- | The maximum number of consumers that you want a single call of
--   <tt>ListStreamConsumers</tt> to return.
listStreamConsumers_maxResults :: Lens' ListStreamConsumers (Maybe Natural)

-- | The ARN of the Kinesis data stream for which you want to list the
--   registered consumers. For more information, see <a>Amazon Resource
--   Names (ARNs) and AWS Service Namespaces</a>.
listStreamConsumers_streamARN :: Lens' ListStreamConsumers Text

-- | <i>See:</i> <a>newListStreamConsumersResponse</a> smart constructor.
data ListStreamConsumersResponse
ListStreamConsumersResponse' :: Maybe Text -> Maybe [Consumer] -> Int -> ListStreamConsumersResponse

-- | When the number of consumers that are registered with the data stream
--   is greater than the default value for the <tt>MaxResults</tt>
--   parameter, or if you explicitly specify a value for
--   <tt>MaxResults</tt> that is less than the number of registered
--   consumers, the response includes a pagination token named
--   <tt>NextToken</tt>. You can specify this <tt>NextToken</tt> value in a
--   subsequent call to <tt>ListStreamConsumers</tt> to list the next set
--   of registered consumers. For more information about the use of this
--   pagination token when calling the <tt>ListStreamConsumers</tt>
--   operation, see ListStreamConsumersInput$NextToken.
--   
--   Tokens expire after 300 seconds. When you obtain a value for
--   <tt>NextToken</tt> in the response to a call to
--   <tt>ListStreamConsumers</tt>, you have 300 seconds to use that value.
--   If you specify an expired token in a call to
--   <tt>ListStreamConsumers</tt>, you get
--   <tt>ExpiredNextTokenException</tt>.
[$sel:nextToken:ListStreamConsumersResponse'] :: ListStreamConsumersResponse -> Maybe Text

-- | An array of JSON objects. Each object represents one registered
--   consumer.
[$sel:consumers:ListStreamConsumersResponse'] :: ListStreamConsumersResponse -> Maybe [Consumer]

-- | The response's http status code.
[$sel:httpStatus:ListStreamConsumersResponse'] :: ListStreamConsumersResponse -> Int

-- | Create a value of <a>ListStreamConsumersResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListStreamConsumers'</a>,
--   <a>listStreamConsumersResponse_nextToken</a> - When the number of
--   consumers that are registered with the data stream is greater than the
--   default value for the <tt>MaxResults</tt> parameter, or if you
--   explicitly specify a value for <tt>MaxResults</tt> that is less than
--   the number of registered consumers, the response includes a pagination
--   token named <tt>NextToken</tt>. You can specify this
--   <tt>NextToken</tt> value in a subsequent call to
--   <tt>ListStreamConsumers</tt> to list the next set of registered
--   consumers. For more information about the use of this pagination token
--   when calling the <tt>ListStreamConsumers</tt> operation, see
--   ListStreamConsumersInput$NextToken.
--   
--   Tokens expire after 300 seconds. When you obtain a value for
--   <tt>NextToken</tt> in the response to a call to
--   <tt>ListStreamConsumers</tt>, you have 300 seconds to use that value.
--   If you specify an expired token in a call to
--   <tt>ListStreamConsumers</tt>, you get
--   <tt>ExpiredNextTokenException</tt>.
--   
--   <a>$sel:consumers:ListStreamConsumersResponse'</a>,
--   <a>listStreamConsumersResponse_consumers</a> - An array of JSON
--   objects. Each object represents one registered consumer.
--   
--   <a>$sel:httpStatus:ListStreamConsumersResponse'</a>,
--   <a>listStreamConsumersResponse_httpStatus</a> - The response's http
--   status code.
newListStreamConsumersResponse :: Int -> ListStreamConsumersResponse

-- | When the number of consumers that are registered with the data stream
--   is greater than the default value for the <tt>MaxResults</tt>
--   parameter, or if you explicitly specify a value for
--   <tt>MaxResults</tt> that is less than the number of registered
--   consumers, the response includes a pagination token named
--   <tt>NextToken</tt>. You can specify this <tt>NextToken</tt> value in a
--   subsequent call to <tt>ListStreamConsumers</tt> to list the next set
--   of registered consumers. For more information about the use of this
--   pagination token when calling the <tt>ListStreamConsumers</tt>
--   operation, see ListStreamConsumersInput$NextToken.
--   
--   Tokens expire after 300 seconds. When you obtain a value for
--   <tt>NextToken</tt> in the response to a call to
--   <tt>ListStreamConsumers</tt>, you have 300 seconds to use that value.
--   If you specify an expired token in a call to
--   <tt>ListStreamConsumers</tt>, you get
--   <tt>ExpiredNextTokenException</tt>.
listStreamConsumersResponse_nextToken :: Lens' ListStreamConsumersResponse (Maybe Text)

-- | An array of JSON objects. Each object represents one registered
--   consumer.
listStreamConsumersResponse_consumers :: Lens' ListStreamConsumersResponse (Maybe [Consumer])

-- | The response's http status code.
listStreamConsumersResponse_httpStatus :: Lens' ListStreamConsumersResponse Int
instance GHC.Generics.Generic Amazonka.Kinesis.ListStreamConsumers.ListStreamConsumers
instance GHC.Show.Show Amazonka.Kinesis.ListStreamConsumers.ListStreamConsumers
instance GHC.Read.Read Amazonka.Kinesis.ListStreamConsumers.ListStreamConsumers
instance GHC.Classes.Eq Amazonka.Kinesis.ListStreamConsumers.ListStreamConsumers
instance GHC.Generics.Generic Amazonka.Kinesis.ListStreamConsumers.ListStreamConsumersResponse
instance GHC.Show.Show Amazonka.Kinesis.ListStreamConsumers.ListStreamConsumersResponse
instance GHC.Read.Read Amazonka.Kinesis.ListStreamConsumers.ListStreamConsumersResponse
instance GHC.Classes.Eq Amazonka.Kinesis.ListStreamConsumers.ListStreamConsumersResponse
instance Amazonka.Types.AWSRequest Amazonka.Kinesis.ListStreamConsumers.ListStreamConsumers
instance Control.DeepSeq.NFData Amazonka.Kinesis.ListStreamConsumers.ListStreamConsumersResponse
instance Amazonka.Pager.AWSPager Amazonka.Kinesis.ListStreamConsumers.ListStreamConsumers
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.ListStreamConsumers.ListStreamConsumers
instance Control.DeepSeq.NFData Amazonka.Kinesis.ListStreamConsumers.ListStreamConsumers
instance Amazonka.Data.Headers.ToHeaders Amazonka.Kinesis.ListStreamConsumers.ListStreamConsumers
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.Kinesis.ListStreamConsumers.ListStreamConsumers
instance Amazonka.Data.Path.ToPath Amazonka.Kinesis.ListStreamConsumers.ListStreamConsumers
instance Amazonka.Data.Query.ToQuery Amazonka.Kinesis.ListStreamConsumers.ListStreamConsumers


-- | Lists the shards in a stream and provides information about each
--   shard. This operation has a limit of 100 transactions per second per
--   data stream.
--   
--   This API is a new operation that is used by the Amazon Kinesis Client
--   Library (KCL). If you have a fine-grained IAM policy that only allows
--   specific operations, you must update your policy to allow calls to
--   this API. For more information, see <a>Controlling Access to Amazon
--   Kinesis Data Streams Resources Using IAM</a>.
--   
--   This operation returns paginated results.
module Amazonka.Kinesis.ListShards

-- | <i>See:</i> <a>newListShards</a> smart constructor.
data ListShards
ListShards' :: Maybe ShardFilter -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe Natural -> ListShards
[$sel:shardFilter:ListShards'] :: ListShards -> Maybe ShardFilter

-- | When the number of shards in the data stream is greater than the
--   default value for the <tt>MaxResults</tt> parameter, or if you
--   explicitly specify a value for <tt>MaxResults</tt> that is less than
--   the number of shards in the data stream, the response includes a
--   pagination token named <tt>NextToken</tt>. You can specify this
--   <tt>NextToken</tt> value in a subsequent call to <tt>ListShards</tt>
--   to list the next set of shards.
--   
--   Don't specify <tt>StreamName</tt> or <tt>StreamCreationTimestamp</tt>
--   if you specify <tt>NextToken</tt> because the latter unambiguously
--   identifies the stream.
--   
--   You can optionally specify a value for the <tt>MaxResults</tt>
--   parameter when you specify <tt>NextToken</tt>. If you specify a
--   <tt>MaxResults</tt> value that is less than the number of shards that
--   the operation returns if you don't specify <tt>MaxResults</tt>, the
--   response will contain a new <tt>NextToken</tt> value. You can use the
--   new <tt>NextToken</tt> value in a subsequent call to the
--   <tt>ListShards</tt> operation.
--   
--   Tokens expire after 300 seconds. When you obtain a value for
--   <tt>NextToken</tt> in the response to a call to <tt>ListShards</tt>,
--   you have 300 seconds to use that value. If you specify an expired
--   token in a call to <tt>ListShards</tt>, you get
--   <tt>ExpiredNextTokenException</tt>.
[$sel:nextToken:ListShards'] :: ListShards -> Maybe Text

-- | Specify this parameter to indicate that you want to list the shards
--   starting with the shard whose ID immediately follows
--   <tt>ExclusiveStartShardId</tt>.
--   
--   If you don't specify this parameter, the default behavior is for
--   <tt>ListShards</tt> to list the shards starting with the first one in
--   the stream.
--   
--   You cannot specify this parameter if you specify <tt>NextToken</tt>.
[$sel:exclusiveStartShardId:ListShards'] :: ListShards -> Maybe Text

-- | Specify this input parameter to distinguish data streams that have the
--   same name. For example, if you create a data stream and then delete
--   it, and you later create another data stream with the same name, you
--   can use this input parameter to specify which of the two streams you
--   want to list the shards for.
--   
--   You cannot specify this parameter if you specify the
--   <tt>NextToken</tt> parameter.
[$sel:streamCreationTimestamp:ListShards'] :: ListShards -> Maybe POSIX

-- | The name of the data stream whose shards you want to list.
--   
--   You cannot specify this parameter if you specify the
--   <tt>NextToken</tt> parameter.
[$sel:streamName:ListShards'] :: ListShards -> Maybe Text

-- | The maximum number of shards to return in a single call to
--   <tt>ListShards</tt>. The minimum value you can specify for this
--   parameter is 1, and the maximum is 10,000, which is also the default.
--   
--   When the number of shards to be listed is greater than the value of
--   <tt>MaxResults</tt>, the response contains a <tt>NextToken</tt> value
--   that you can use in a subsequent call to <tt>ListShards</tt> to list
--   the next set of shards.
[$sel:maxResults:ListShards'] :: ListShards -> Maybe Natural

-- | Create a value of <a>ListShards</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:shardFilter:ListShards'</a>, <a>listShards_shardFilter</a> -
--   Undocumented member.
--   
--   <a>$sel:nextToken:ListShards'</a>, <a>listShards_nextToken</a> - When
--   the number of shards in the data stream is greater than the default
--   value for the <tt>MaxResults</tt> parameter, or if you explicitly
--   specify a value for <tt>MaxResults</tt> that is less than the number
--   of shards in the data stream, the response includes a pagination token
--   named <tt>NextToken</tt>. You can specify this <tt>NextToken</tt>
--   value in a subsequent call to <tt>ListShards</tt> to list the next set
--   of shards.
--   
--   Don't specify <tt>StreamName</tt> or <tt>StreamCreationTimestamp</tt>
--   if you specify <tt>NextToken</tt> because the latter unambiguously
--   identifies the stream.
--   
--   You can optionally specify a value for the <tt>MaxResults</tt>
--   parameter when you specify <tt>NextToken</tt>. If you specify a
--   <tt>MaxResults</tt> value that is less than the number of shards that
--   the operation returns if you don't specify <tt>MaxResults</tt>, the
--   response will contain a new <tt>NextToken</tt> value. You can use the
--   new <tt>NextToken</tt> value in a subsequent call to the
--   <tt>ListShards</tt> operation.
--   
--   Tokens expire after 300 seconds. When you obtain a value for
--   <tt>NextToken</tt> in the response to a call to <tt>ListShards</tt>,
--   you have 300 seconds to use that value. If you specify an expired
--   token in a call to <tt>ListShards</tt>, you get
--   <tt>ExpiredNextTokenException</tt>.
--   
--   <a>$sel:exclusiveStartShardId:ListShards'</a>,
--   <a>listShards_exclusiveStartShardId</a> - Specify this parameter to
--   indicate that you want to list the shards starting with the shard
--   whose ID immediately follows <tt>ExclusiveStartShardId</tt>.
--   
--   If you don't specify this parameter, the default behavior is for
--   <tt>ListShards</tt> to list the shards starting with the first one in
--   the stream.
--   
--   You cannot specify this parameter if you specify <tt>NextToken</tt>.
--   
--   <a>$sel:streamCreationTimestamp:ListShards'</a>,
--   <a>listShards_streamCreationTimestamp</a> - Specify this input
--   parameter to distinguish data streams that have the same name. For
--   example, if you create a data stream and then delete it, and you later
--   create another data stream with the same name, you can use this input
--   parameter to specify which of the two streams you want to list the
--   shards for.
--   
--   You cannot specify this parameter if you specify the
--   <tt>NextToken</tt> parameter.
--   
--   <a>$sel:streamName:ListShards'</a>, <a>listShards_streamName</a> - The
--   name of the data stream whose shards you want to list.
--   
--   You cannot specify this parameter if you specify the
--   <tt>NextToken</tt> parameter.
--   
--   <a>$sel:maxResults:ListShards'</a>, <a>listShards_maxResults</a> - The
--   maximum number of shards to return in a single call to
--   <tt>ListShards</tt>. The minimum value you can specify for this
--   parameter is 1, and the maximum is 10,000, which is also the default.
--   
--   When the number of shards to be listed is greater than the value of
--   <tt>MaxResults</tt>, the response contains a <tt>NextToken</tt> value
--   that you can use in a subsequent call to <tt>ListShards</tt> to list
--   the next set of shards.
newListShards :: ListShards

-- | Undocumented member.
listShards_shardFilter :: Lens' ListShards (Maybe ShardFilter)

-- | When the number of shards in the data stream is greater than the
--   default value for the <tt>MaxResults</tt> parameter, or if you
--   explicitly specify a value for <tt>MaxResults</tt> that is less than
--   the number of shards in the data stream, the response includes a
--   pagination token named <tt>NextToken</tt>. You can specify this
--   <tt>NextToken</tt> value in a subsequent call to <tt>ListShards</tt>
--   to list the next set of shards.
--   
--   Don't specify <tt>StreamName</tt> or <tt>StreamCreationTimestamp</tt>
--   if you specify <tt>NextToken</tt> because the latter unambiguously
--   identifies the stream.
--   
--   You can optionally specify a value for the <tt>MaxResults</tt>
--   parameter when you specify <tt>NextToken</tt>. If you specify a
--   <tt>MaxResults</tt> value that is less than the number of shards that
--   the operation returns if you don't specify <tt>MaxResults</tt>, the
--   response will contain a new <tt>NextToken</tt> value. You can use the
--   new <tt>NextToken</tt> value in a subsequent call to the
--   <tt>ListShards</tt> operation.
--   
--   Tokens expire after 300 seconds. When you obtain a value for
--   <tt>NextToken</tt> in the response to a call to <tt>ListShards</tt>,
--   you have 300 seconds to use that value. If you specify an expired
--   token in a call to <tt>ListShards</tt>, you get
--   <tt>ExpiredNextTokenException</tt>.
listShards_nextToken :: Lens' ListShards (Maybe Text)

-- | Specify this parameter to indicate that you want to list the shards
--   starting with the shard whose ID immediately follows
--   <tt>ExclusiveStartShardId</tt>.
--   
--   If you don't specify this parameter, the default behavior is for
--   <tt>ListShards</tt> to list the shards starting with the first one in
--   the stream.
--   
--   You cannot specify this parameter if you specify <tt>NextToken</tt>.
listShards_exclusiveStartShardId :: Lens' ListShards (Maybe Text)

-- | Specify this input parameter to distinguish data streams that have the
--   same name. For example, if you create a data stream and then delete
--   it, and you later create another data stream with the same name, you
--   can use this input parameter to specify which of the two streams you
--   want to list the shards for.
--   
--   You cannot specify this parameter if you specify the
--   <tt>NextToken</tt> parameter.
listShards_streamCreationTimestamp :: Lens' ListShards (Maybe UTCTime)

-- | The name of the data stream whose shards you want to list.
--   
--   You cannot specify this parameter if you specify the
--   <tt>NextToken</tt> parameter.
listShards_streamName :: Lens' ListShards (Maybe Text)

-- | The maximum number of shards to return in a single call to
--   <tt>ListShards</tt>. The minimum value you can specify for this
--   parameter is 1, and the maximum is 10,000, which is also the default.
--   
--   When the number of shards to be listed is greater than the value of
--   <tt>MaxResults</tt>, the response contains a <tt>NextToken</tt> value
--   that you can use in a subsequent call to <tt>ListShards</tt> to list
--   the next set of shards.
listShards_maxResults :: Lens' ListShards (Maybe Natural)

-- | <i>See:</i> <a>newListShardsResponse</a> smart constructor.
data ListShardsResponse
ListShardsResponse' :: Maybe Text -> Maybe [Shard] -> Int -> ListShardsResponse

-- | When the number of shards in the data stream is greater than the
--   default value for the <tt>MaxResults</tt> parameter, or if you
--   explicitly specify a value for <tt>MaxResults</tt> that is less than
--   the number of shards in the data stream, the response includes a
--   pagination token named <tt>NextToken</tt>. You can specify this
--   <tt>NextToken</tt> value in a subsequent call to <tt>ListShards</tt>
--   to list the next set of shards. For more information about the use of
--   this pagination token when calling the <tt>ListShards</tt> operation,
--   see ListShardsInput$NextToken.
--   
--   Tokens expire after 300 seconds. When you obtain a value for
--   <tt>NextToken</tt> in the response to a call to <tt>ListShards</tt>,
--   you have 300 seconds to use that value. If you specify an expired
--   token in a call to <tt>ListShards</tt>, you get
--   <tt>ExpiredNextTokenException</tt>.
[$sel:nextToken:ListShardsResponse'] :: ListShardsResponse -> Maybe Text

-- | An array of JSON objects. Each object represents one shard and
--   specifies the IDs of the shard, the shard's parent, and the shard
--   that's adjacent to the shard's parent. Each object also contains the
--   starting and ending hash keys and the starting and ending sequence
--   numbers for the shard.
[$sel:shards:ListShardsResponse'] :: ListShardsResponse -> Maybe [Shard]

-- | The response's http status code.
[$sel:httpStatus:ListShardsResponse'] :: ListShardsResponse -> Int

-- | Create a value of <a>ListShardsResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListShards'</a>, <a>listShardsResponse_nextToken</a>
--   - When the number of shards in the data stream is greater than the
--   default value for the <tt>MaxResults</tt> parameter, or if you
--   explicitly specify a value for <tt>MaxResults</tt> that is less than
--   the number of shards in the data stream, the response includes a
--   pagination token named <tt>NextToken</tt>. You can specify this
--   <tt>NextToken</tt> value in a subsequent call to <tt>ListShards</tt>
--   to list the next set of shards. For more information about the use of
--   this pagination token when calling the <tt>ListShards</tt> operation,
--   see ListShardsInput$NextToken.
--   
--   Tokens expire after 300 seconds. When you obtain a value for
--   <tt>NextToken</tt> in the response to a call to <tt>ListShards</tt>,
--   you have 300 seconds to use that value. If you specify an expired
--   token in a call to <tt>ListShards</tt>, you get
--   <tt>ExpiredNextTokenException</tt>.
--   
--   <a>$sel:shards:ListShardsResponse'</a>,
--   <a>listShardsResponse_shards</a> - An array of JSON objects. Each
--   object represents one shard and specifies the IDs of the shard, the
--   shard's parent, and the shard that's adjacent to the shard's parent.
--   Each object also contains the starting and ending hash keys and the
--   starting and ending sequence numbers for the shard.
--   
--   <a>$sel:httpStatus:ListShardsResponse'</a>,
--   <a>listShardsResponse_httpStatus</a> - The response's http status
--   code.
newListShardsResponse :: Int -> ListShardsResponse

-- | When the number of shards in the data stream is greater than the
--   default value for the <tt>MaxResults</tt> parameter, or if you
--   explicitly specify a value for <tt>MaxResults</tt> that is less than
--   the number of shards in the data stream, the response includes a
--   pagination token named <tt>NextToken</tt>. You can specify this
--   <tt>NextToken</tt> value in a subsequent call to <tt>ListShards</tt>
--   to list the next set of shards. For more information about the use of
--   this pagination token when calling the <tt>ListShards</tt> operation,
--   see ListShardsInput$NextToken.
--   
--   Tokens expire after 300 seconds. When you obtain a value for
--   <tt>NextToken</tt> in the response to a call to <tt>ListShards</tt>,
--   you have 300 seconds to use that value. If you specify an expired
--   token in a call to <tt>ListShards</tt>, you get
--   <tt>ExpiredNextTokenException</tt>.
listShardsResponse_nextToken :: Lens' ListShardsResponse (Maybe Text)

-- | An array of JSON objects. Each object represents one shard and
--   specifies the IDs of the shard, the shard's parent, and the shard
--   that's adjacent to the shard's parent. Each object also contains the
--   starting and ending hash keys and the starting and ending sequence
--   numbers for the shard.
listShardsResponse_shards :: Lens' ListShardsResponse (Maybe [Shard])

-- | The response's http status code.
listShardsResponse_httpStatus :: Lens' ListShardsResponse Int
instance GHC.Generics.Generic Amazonka.Kinesis.ListShards.ListShards
instance GHC.Show.Show Amazonka.Kinesis.ListShards.ListShards
instance GHC.Read.Read Amazonka.Kinesis.ListShards.ListShards
instance GHC.Classes.Eq Amazonka.Kinesis.ListShards.ListShards
instance GHC.Generics.Generic Amazonka.Kinesis.ListShards.ListShardsResponse
instance GHC.Show.Show Amazonka.Kinesis.ListShards.ListShardsResponse
instance GHC.Read.Read Amazonka.Kinesis.ListShards.ListShardsResponse
instance GHC.Classes.Eq Amazonka.Kinesis.ListShards.ListShardsResponse
instance Amazonka.Types.AWSRequest Amazonka.Kinesis.ListShards.ListShards
instance Control.DeepSeq.NFData Amazonka.Kinesis.ListShards.ListShardsResponse
instance Amazonka.Pager.AWSPager Amazonka.Kinesis.ListShards.ListShards
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.ListShards.ListShards
instance Control.DeepSeq.NFData Amazonka.Kinesis.ListShards.ListShards
instance Amazonka.Data.Headers.ToHeaders Amazonka.Kinesis.ListShards.ListShards
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.Kinesis.ListShards.ListShards
instance Amazonka.Data.Path.ToPath Amazonka.Kinesis.ListShards.ListShards
instance Amazonka.Data.Query.ToQuery Amazonka.Kinesis.ListShards.ListShards


-- | Increases the Kinesis data stream's retention period, which is the
--   length of time data records are accessible after they are added to the
--   stream. The maximum value of a stream's retention period is 168 hours
--   (7 days).
--   
--   If you choose a longer stream retention period, this operation
--   increases the time period during which records that have not yet
--   expired are accessible. However, it does not make previous, expired
--   data (older than the stream's previous retention period) accessible
--   after the operation has been called. For example, if a stream's
--   retention period is set to 24 hours and is increased to 168 hours, any
--   data that is older than 24 hours remains inaccessible to consumer
--   applications.
module Amazonka.Kinesis.IncreaseStreamRetentionPeriod

-- | Represents the input for IncreaseStreamRetentionPeriod.
--   
--   <i>See:</i> <a>newIncreaseStreamRetentionPeriod</a> smart constructor.
data IncreaseStreamRetentionPeriod
IncreaseStreamRetentionPeriod' :: Text -> Int -> IncreaseStreamRetentionPeriod

-- | The name of the stream to modify.
[$sel:streamName:IncreaseStreamRetentionPeriod'] :: IncreaseStreamRetentionPeriod -> Text

-- | The new retention period of the stream, in hours. Must be more than
--   the current retention period.
[$sel:retentionPeriodHours:IncreaseStreamRetentionPeriod'] :: IncreaseStreamRetentionPeriod -> Int

-- | Create a value of <a>IncreaseStreamRetentionPeriod</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamName:IncreaseStreamRetentionPeriod'</a>,
--   <a>increaseStreamRetentionPeriod_streamName</a> - The name of the
--   stream to modify.
--   
--   <a>$sel:retentionPeriodHours:IncreaseStreamRetentionPeriod'</a>,
--   <a>increaseStreamRetentionPeriod_retentionPeriodHours</a> - The new
--   retention period of the stream, in hours. Must be more than the
--   current retention period.
newIncreaseStreamRetentionPeriod :: Text -> Int -> IncreaseStreamRetentionPeriod

-- | The name of the stream to modify.
increaseStreamRetentionPeriod_streamName :: Lens' IncreaseStreamRetentionPeriod Text

-- | The new retention period of the stream, in hours. Must be more than
--   the current retention period.
increaseStreamRetentionPeriod_retentionPeriodHours :: Lens' IncreaseStreamRetentionPeriod Int

-- | <i>See:</i> <a>newIncreaseStreamRetentionPeriodResponse</a> smart
--   constructor.
data IncreaseStreamRetentionPeriodResponse
IncreaseStreamRetentionPeriodResponse' :: IncreaseStreamRetentionPeriodResponse

-- | Create a value of <a>IncreaseStreamRetentionPeriodResponse</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newIncreaseStreamRetentionPeriodResponse :: IncreaseStreamRetentionPeriodResponse
instance GHC.Generics.Generic Amazonka.Kinesis.IncreaseStreamRetentionPeriod.IncreaseStreamRetentionPeriod
instance GHC.Show.Show Amazonka.Kinesis.IncreaseStreamRetentionPeriod.IncreaseStreamRetentionPeriod
instance GHC.Read.Read Amazonka.Kinesis.IncreaseStreamRetentionPeriod.IncreaseStreamRetentionPeriod
instance GHC.Classes.Eq Amazonka.Kinesis.IncreaseStreamRetentionPeriod.IncreaseStreamRetentionPeriod
instance GHC.Generics.Generic Amazonka.Kinesis.IncreaseStreamRetentionPeriod.IncreaseStreamRetentionPeriodResponse
instance GHC.Show.Show Amazonka.Kinesis.IncreaseStreamRetentionPeriod.IncreaseStreamRetentionPeriodResponse
instance GHC.Read.Read Amazonka.Kinesis.IncreaseStreamRetentionPeriod.IncreaseStreamRetentionPeriodResponse
instance GHC.Classes.Eq Amazonka.Kinesis.IncreaseStreamRetentionPeriod.IncreaseStreamRetentionPeriodResponse
instance Amazonka.Types.AWSRequest Amazonka.Kinesis.IncreaseStreamRetentionPeriod.IncreaseStreamRetentionPeriod
instance Control.DeepSeq.NFData Amazonka.Kinesis.IncreaseStreamRetentionPeriod.IncreaseStreamRetentionPeriodResponse
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.IncreaseStreamRetentionPeriod.IncreaseStreamRetentionPeriod
instance Control.DeepSeq.NFData Amazonka.Kinesis.IncreaseStreamRetentionPeriod.IncreaseStreamRetentionPeriod
instance Amazonka.Data.Headers.ToHeaders Amazonka.Kinesis.IncreaseStreamRetentionPeriod.IncreaseStreamRetentionPeriod
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.Kinesis.IncreaseStreamRetentionPeriod.IncreaseStreamRetentionPeriod
instance Amazonka.Data.Path.ToPath Amazonka.Kinesis.IncreaseStreamRetentionPeriod.IncreaseStreamRetentionPeriod
instance Amazonka.Data.Query.ToQuery Amazonka.Kinesis.IncreaseStreamRetentionPeriod.IncreaseStreamRetentionPeriod


-- | Gets an Amazon Kinesis shard iterator. A shard iterator expires 5
--   minutes after it is returned to the requester.
--   
--   A shard iterator specifies the shard position from which to start
--   reading data records sequentially. The position is specified using the
--   sequence number of a data record in a shard. A sequence number is the
--   identifier associated with every record ingested in the stream, and is
--   assigned when a record is put into the stream. Each stream has one or
--   more shards.
--   
--   You must specify the shard iterator type. For example, you can set the
--   <tt>ShardIteratorType</tt> parameter to read exactly from the position
--   denoted by a specific sequence number by using the
--   <tt>AT_SEQUENCE_NUMBER</tt> shard iterator type. Alternatively, the
--   parameter can read right after the sequence number by using the
--   <tt>AFTER_SEQUENCE_NUMBER</tt> shard iterator type, using sequence
--   numbers returned by earlier calls to PutRecord, PutRecords,
--   GetRecords, or DescribeStream. In the request, you can specify the
--   shard iterator type <tt>AT_TIMESTAMP</tt> to read records from an
--   arbitrary point in time, <tt>TRIM_HORIZON</tt> to cause
--   <tt>ShardIterator</tt> to point to the last untrimmed record in the
--   shard in the system (the oldest data record in the shard), or
--   <tt>LATEST</tt> so that you always read the most recent data in the
--   shard.
--   
--   When you read repeatedly from a stream, use a GetShardIterator request
--   to get the first shard iterator for use in your first GetRecords
--   request and for subsequent reads use the shard iterator returned by
--   the GetRecords request in <tt>NextShardIterator</tt>. A new shard
--   iterator is returned by every GetRecords request in
--   <tt>NextShardIterator</tt>, which you use in the
--   <tt>ShardIterator</tt> parameter of the next GetRecords request.
--   
--   If a GetShardIterator request is made too often, you receive a
--   <tt>ProvisionedThroughputExceededException</tt>. For more information
--   about throughput limits, see GetRecords, and <a>Streams Limits</a> in
--   the <i>Amazon Kinesis Data Streams Developer Guide</i>.
--   
--   If the shard is closed, GetShardIterator returns a valid iterator for
--   the last sequence number of the shard. A shard can be closed as a
--   result of using SplitShard or MergeShards.
--   
--   GetShardIterator has a limit of five transactions per second per
--   account per open shard.
module Amazonka.Kinesis.GetShardIterator

-- | Represents the input for <tt>GetShardIterator</tt>.
--   
--   <i>See:</i> <a>newGetShardIterator</a> smart constructor.
data GetShardIterator
GetShardIterator' :: Maybe Text -> Maybe POSIX -> Text -> Text -> ShardIteratorType -> GetShardIterator

-- | The sequence number of the data record in the shard from which to
--   start reading. Used with shard iterator type AT_SEQUENCE_NUMBER and
--   AFTER_SEQUENCE_NUMBER.
[$sel:startingSequenceNumber:GetShardIterator'] :: GetShardIterator -> Maybe Text

-- | The time stamp of the data record from which to start reading. Used
--   with shard iterator type AT_TIMESTAMP. A time stamp is the Unix epoch
--   date with precision in milliseconds. For example,
--   <tt>2016-04-04T19:58:46.480-00:00</tt> or <tt>1459799926.480</tt>. If
--   a record with this exact time stamp does not exist, the iterator
--   returned is for the next (later) record. If the time stamp is older
--   than the current trim horizon, the iterator returned is for the oldest
--   untrimmed data record (TRIM_HORIZON).
[$sel:timestamp:GetShardIterator'] :: GetShardIterator -> Maybe POSIX

-- | The name of the Amazon Kinesis data stream.
[$sel:streamName:GetShardIterator'] :: GetShardIterator -> Text

-- | The shard ID of the Kinesis Data Streams shard to get the iterator
--   for.
[$sel:shardId:GetShardIterator'] :: GetShardIterator -> Text

-- | Determines how the shard iterator is used to start reading data
--   records from the shard.
--   
--   The following are the valid Amazon Kinesis shard iterator types:
--   
--   <ul>
--   <li>AT_SEQUENCE_NUMBER - Start reading from the position denoted by a
--   specific sequence number, provided in the value
--   <tt>StartingSequenceNumber</tt>.</li>
--   <li>AFTER_SEQUENCE_NUMBER - Start reading right after the position
--   denoted by a specific sequence number, provided in the value
--   <tt>StartingSequenceNumber</tt>.</li>
--   <li>AT_TIMESTAMP - Start reading from the position denoted by a
--   specific time stamp, provided in the value <tt>Timestamp</tt>.</li>
--   <li>TRIM_HORIZON - Start reading at the last untrimmed record in the
--   shard in the system, which is the oldest data record in the
--   shard.</li>
--   <li>LATEST - Start reading just after the most recent record in the
--   shard, so that you always read the most recent data in the shard.</li>
--   </ul>
[$sel:shardIteratorType:GetShardIterator'] :: GetShardIterator -> ShardIteratorType

-- | Create a value of <a>GetShardIterator</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:startingSequenceNumber:GetShardIterator'</a>,
--   <a>getShardIterator_startingSequenceNumber</a> - The sequence number
--   of the data record in the shard from which to start reading. Used with
--   shard iterator type AT_SEQUENCE_NUMBER and AFTER_SEQUENCE_NUMBER.
--   
--   <a>$sel:timestamp:GetShardIterator'</a>,
--   <a>getShardIterator_timestamp</a> - The time stamp of the data record
--   from which to start reading. Used with shard iterator type
--   AT_TIMESTAMP. A time stamp is the Unix epoch date with precision in
--   milliseconds. For example, <tt>2016-04-04T19:58:46.480-00:00</tt> or
--   <tt>1459799926.480</tt>. If a record with this exact time stamp does
--   not exist, the iterator returned is for the next (later) record. If
--   the time stamp is older than the current trim horizon, the iterator
--   returned is for the oldest untrimmed data record (TRIM_HORIZON).
--   
--   <a>$sel:streamName:GetShardIterator'</a>,
--   <a>getShardIterator_streamName</a> - The name of the Amazon Kinesis
--   data stream.
--   
--   <a>$sel:shardId:GetShardIterator'</a>, <a>getShardIterator_shardId</a>
--   - The shard ID of the Kinesis Data Streams shard to get the iterator
--   for.
--   
--   <a>$sel:shardIteratorType:GetShardIterator'</a>,
--   <a>getShardIterator_shardIteratorType</a> - Determines how the shard
--   iterator is used to start reading data records from the shard.
--   
--   The following are the valid Amazon Kinesis shard iterator types:
--   
--   <ul>
--   <li>AT_SEQUENCE_NUMBER - Start reading from the position denoted by a
--   specific sequence number, provided in the value
--   <tt>StartingSequenceNumber</tt>.</li>
--   <li>AFTER_SEQUENCE_NUMBER - Start reading right after the position
--   denoted by a specific sequence number, provided in the value
--   <tt>StartingSequenceNumber</tt>.</li>
--   <li>AT_TIMESTAMP - Start reading from the position denoted by a
--   specific time stamp, provided in the value <tt>Timestamp</tt>.</li>
--   <li>TRIM_HORIZON - Start reading at the last untrimmed record in the
--   shard in the system, which is the oldest data record in the
--   shard.</li>
--   <li>LATEST - Start reading just after the most recent record in the
--   shard, so that you always read the most recent data in the shard.</li>
--   </ul>
newGetShardIterator :: Text -> Text -> ShardIteratorType -> GetShardIterator

-- | The sequence number of the data record in the shard from which to
--   start reading. Used with shard iterator type AT_SEQUENCE_NUMBER and
--   AFTER_SEQUENCE_NUMBER.
getShardIterator_startingSequenceNumber :: Lens' GetShardIterator (Maybe Text)

-- | The time stamp of the data record from which to start reading. Used
--   with shard iterator type AT_TIMESTAMP. A time stamp is the Unix epoch
--   date with precision in milliseconds. For example,
--   <tt>2016-04-04T19:58:46.480-00:00</tt> or <tt>1459799926.480</tt>. If
--   a record with this exact time stamp does not exist, the iterator
--   returned is for the next (later) record. If the time stamp is older
--   than the current trim horizon, the iterator returned is for the oldest
--   untrimmed data record (TRIM_HORIZON).
getShardIterator_timestamp :: Lens' GetShardIterator (Maybe UTCTime)

-- | The name of the Amazon Kinesis data stream.
getShardIterator_streamName :: Lens' GetShardIterator Text

-- | The shard ID of the Kinesis Data Streams shard to get the iterator
--   for.
getShardIterator_shardId :: Lens' GetShardIterator Text

-- | Determines how the shard iterator is used to start reading data
--   records from the shard.
--   
--   The following are the valid Amazon Kinesis shard iterator types:
--   
--   <ul>
--   <li>AT_SEQUENCE_NUMBER - Start reading from the position denoted by a
--   specific sequence number, provided in the value
--   <tt>StartingSequenceNumber</tt>.</li>
--   <li>AFTER_SEQUENCE_NUMBER - Start reading right after the position
--   denoted by a specific sequence number, provided in the value
--   <tt>StartingSequenceNumber</tt>.</li>
--   <li>AT_TIMESTAMP - Start reading from the position denoted by a
--   specific time stamp, provided in the value <tt>Timestamp</tt>.</li>
--   <li>TRIM_HORIZON - Start reading at the last untrimmed record in the
--   shard in the system, which is the oldest data record in the
--   shard.</li>
--   <li>LATEST - Start reading just after the most recent record in the
--   shard, so that you always read the most recent data in the shard.</li>
--   </ul>
getShardIterator_shardIteratorType :: Lens' GetShardIterator ShardIteratorType

-- | Represents the output for <tt>GetShardIterator</tt>.
--   
--   <i>See:</i> <a>newGetShardIteratorResponse</a> smart constructor.
data GetShardIteratorResponse
GetShardIteratorResponse' :: Maybe Text -> Int -> GetShardIteratorResponse

-- | The position in the shard from which to start reading data records
--   sequentially. A shard iterator specifies this position using the
--   sequence number of a data record in a shard.
[$sel:shardIterator:GetShardIteratorResponse'] :: GetShardIteratorResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:GetShardIteratorResponse'] :: GetShardIteratorResponse -> Int

-- | Create a value of <a>GetShardIteratorResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:shardIterator:GetShardIteratorResponse'</a>,
--   <a>getShardIteratorResponse_shardIterator</a> - The position in the
--   shard from which to start reading data records sequentially. A shard
--   iterator specifies this position using the sequence number of a data
--   record in a shard.
--   
--   <a>$sel:httpStatus:GetShardIteratorResponse'</a>,
--   <a>getShardIteratorResponse_httpStatus</a> - The response's http
--   status code.
newGetShardIteratorResponse :: Int -> GetShardIteratorResponse

-- | The position in the shard from which to start reading data records
--   sequentially. A shard iterator specifies this position using the
--   sequence number of a data record in a shard.
getShardIteratorResponse_shardIterator :: Lens' GetShardIteratorResponse (Maybe Text)

-- | The response's http status code.
getShardIteratorResponse_httpStatus :: Lens' GetShardIteratorResponse Int
instance GHC.Generics.Generic Amazonka.Kinesis.GetShardIterator.GetShardIterator
instance GHC.Show.Show Amazonka.Kinesis.GetShardIterator.GetShardIterator
instance GHC.Read.Read Amazonka.Kinesis.GetShardIterator.GetShardIterator
instance GHC.Classes.Eq Amazonka.Kinesis.GetShardIterator.GetShardIterator
instance GHC.Generics.Generic Amazonka.Kinesis.GetShardIterator.GetShardIteratorResponse
instance GHC.Show.Show Amazonka.Kinesis.GetShardIterator.GetShardIteratorResponse
instance GHC.Read.Read Amazonka.Kinesis.GetShardIterator.GetShardIteratorResponse
instance GHC.Classes.Eq Amazonka.Kinesis.GetShardIterator.GetShardIteratorResponse
instance Amazonka.Types.AWSRequest Amazonka.Kinesis.GetShardIterator.GetShardIterator
instance Control.DeepSeq.NFData Amazonka.Kinesis.GetShardIterator.GetShardIteratorResponse
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.GetShardIterator.GetShardIterator
instance Control.DeepSeq.NFData Amazonka.Kinesis.GetShardIterator.GetShardIterator
instance Amazonka.Data.Headers.ToHeaders Amazonka.Kinesis.GetShardIterator.GetShardIterator
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.Kinesis.GetShardIterator.GetShardIterator
instance Amazonka.Data.Path.ToPath Amazonka.Kinesis.GetShardIterator.GetShardIterator
instance Amazonka.Data.Query.ToQuery Amazonka.Kinesis.GetShardIterator.GetShardIterator


-- | Gets data records from a Kinesis data stream's shard.
--   
--   Specify a shard iterator using the <tt>ShardIterator</tt> parameter.
--   The shard iterator specifies the position in the shard from which you
--   want to start reading data records sequentially. If there are no
--   records available in the portion of the shard that the iterator points
--   to, GetRecords returns an empty list. It might take multiple calls to
--   get to a portion of the shard that contains records.
--   
--   You can scale by provisioning multiple shards per stream while
--   considering service limits (for more information, see <a>Amazon
--   Kinesis Data Streams Limits</a> in the <i>Amazon Kinesis Data Streams
--   Developer Guide</i>). Your application should have one thread per
--   shard, each reading continuously from its stream. To read from a
--   stream continually, call GetRecords in a loop. Use GetShardIterator to
--   get the shard iterator to specify in the first GetRecords call.
--   GetRecords returns a new shard iterator in <tt>NextShardIterator</tt>.
--   Specify the shard iterator returned in <tt>NextShardIterator</tt> in
--   subsequent calls to GetRecords. If the shard has been closed, the
--   shard iterator can't return more data and GetRecords returns
--   <tt>null</tt> in <tt>NextShardIterator</tt>. You can terminate the
--   loop when the shard is closed, or when the shard iterator reaches the
--   record with the sequence number or other attribute that marks it as
--   the last record to process.
--   
--   Each data record can be up to 1 MiB in size, and each shard can read
--   up to 2 MiB per second. You can ensure that your calls don't exceed
--   the maximum supported size or throughput by using the <tt>Limit</tt>
--   parameter to specify the maximum number of records that GetRecords can
--   return. Consider your average record size when determining this limit.
--   The maximum number of records that can be returned per call is 10,000.
--   
--   The size of the data returned by GetRecords varies depending on the
--   utilization of the shard. The maximum size of data that GetRecords can
--   return is 10 MiB. If a call returns this amount of data, subsequent
--   calls made within the next 5 seconds throw
--   <tt>ProvisionedThroughputExceededException</tt>. If there is
--   insufficient provisioned throughput on the stream, subsequent calls
--   made within the next 1 second throw
--   <tt>ProvisionedThroughputExceededException</tt>. GetRecords doesn't
--   return any data when it throws an exception. For this reason, we
--   recommend that you wait 1 second between calls to GetRecords. However,
--   it's possible that the application will get exceptions for longer than
--   1 second.
--   
--   To detect whether the application is falling behind in processing, you
--   can use the <tt>MillisBehindLatest</tt> response attribute. You can
--   also monitor the stream using CloudWatch metrics and other mechanisms
--   (see <a>Monitoring</a> in the <i>Amazon Kinesis Data Streams Developer
--   Guide</i>).
--   
--   Each Amazon Kinesis record includes a value,
--   <tt>ApproximateArrivalTimestamp</tt>, that is set when a stream
--   successfully receives and stores a record. This is commonly referred
--   to as a server-side time stamp, whereas a client-side time stamp is
--   set when a data producer creates or sends the record to a stream (a
--   data producer is any data source putting data records into a stream,
--   for example with PutRecords). The time stamp has millisecond
--   precision. There are no guarantees about the time stamp accuracy, or
--   that the time stamp is always increasing. For example, records in a
--   shard or across a stream might have time stamps that are out of order.
--   
--   This operation has a limit of five transactions per second per shard.
module Amazonka.Kinesis.GetRecords

-- | Represents the input for GetRecords.
--   
--   <i>See:</i> <a>newGetRecords</a> smart constructor.
data GetRecords
GetRecords' :: Maybe Natural -> Text -> GetRecords

-- | The maximum number of records to return. Specify a value of up to
--   10,000. If you specify a value that is greater than 10,000, GetRecords
--   throws <tt>InvalidArgumentException</tt>. The default value is 10,000.
[$sel:limit:GetRecords'] :: GetRecords -> Maybe Natural

-- | The position in the shard from which you want to start sequentially
--   reading data records. A shard iterator specifies this position using
--   the sequence number of a data record in the shard.
[$sel:shardIterator:GetRecords'] :: GetRecords -> Text

-- | Create a value of <a>GetRecords</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:limit:GetRecords'</a>, <a>getRecords_limit</a> - The maximum
--   number of records to return. Specify a value of up to 10,000. If you
--   specify a value that is greater than 10,000, GetRecords throws
--   <tt>InvalidArgumentException</tt>. The default value is 10,000.
--   
--   <a>$sel:shardIterator:GetRecords'</a>, <a>getRecords_shardIterator</a>
--   - The position in the shard from which you want to start sequentially
--   reading data records. A shard iterator specifies this position using
--   the sequence number of a data record in the shard.
newGetRecords :: Text -> GetRecords

-- | The maximum number of records to return. Specify a value of up to
--   10,000. If you specify a value that is greater than 10,000, GetRecords
--   throws <tt>InvalidArgumentException</tt>. The default value is 10,000.
getRecords_limit :: Lens' GetRecords (Maybe Natural)

-- | The position in the shard from which you want to start sequentially
--   reading data records. A shard iterator specifies this position using
--   the sequence number of a data record in the shard.
getRecords_shardIterator :: Lens' GetRecords Text

-- | Represents the output for GetRecords.
--   
--   <i>See:</i> <a>newGetRecordsResponse</a> smart constructor.
data GetRecordsResponse
GetRecordsResponse' :: Maybe Text -> Maybe Natural -> Maybe [ChildShard] -> Int -> [Record] -> GetRecordsResponse

-- | The next position in the shard from which to start sequentially
--   reading data records. If set to <tt>null</tt>, the shard has been
--   closed and the requested iterator does not return any more data.
[$sel:nextShardIterator:GetRecordsResponse'] :: GetRecordsResponse -> Maybe Text

-- | The number of milliseconds the GetRecords response is from the tip of
--   the stream, indicating how far behind current time the consumer is. A
--   value of zero indicates that record processing is caught up, and there
--   are no new records to process at this moment.
[$sel:millisBehindLatest:GetRecordsResponse'] :: GetRecordsResponse -> Maybe Natural
[$sel:childShards:GetRecordsResponse'] :: GetRecordsResponse -> Maybe [ChildShard]

-- | The response's http status code.
[$sel:httpStatus:GetRecordsResponse'] :: GetRecordsResponse -> Int

-- | The data records retrieved from the shard.
[$sel:records:GetRecordsResponse'] :: GetRecordsResponse -> [Record]

-- | Create a value of <a>GetRecordsResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextShardIterator:GetRecordsResponse'</a>,
--   <a>getRecordsResponse_nextShardIterator</a> - The next position in the
--   shard from which to start sequentially reading data records. If set to
--   <tt>null</tt>, the shard has been closed and the requested iterator
--   does not return any more data.
--   
--   <a>$sel:millisBehindLatest:GetRecordsResponse'</a>,
--   <a>getRecordsResponse_millisBehindLatest</a> - The number of
--   milliseconds the GetRecords response is from the tip of the stream,
--   indicating how far behind current time the consumer is. A value of
--   zero indicates that record processing is caught up, and there are no
--   new records to process at this moment.
--   
--   <a>$sel:childShards:GetRecordsResponse'</a>,
--   <a>getRecordsResponse_childShards</a> - Undocumented member.
--   
--   <a>$sel:httpStatus:GetRecordsResponse'</a>,
--   <a>getRecordsResponse_httpStatus</a> - The response's http status
--   code.
--   
--   <a>$sel:records:GetRecordsResponse'</a>,
--   <a>getRecordsResponse_records</a> - The data records retrieved from
--   the shard.
newGetRecordsResponse :: Int -> GetRecordsResponse

-- | The next position in the shard from which to start sequentially
--   reading data records. If set to <tt>null</tt>, the shard has been
--   closed and the requested iterator does not return any more data.
getRecordsResponse_nextShardIterator :: Lens' GetRecordsResponse (Maybe Text)

-- | The number of milliseconds the GetRecords response is from the tip of
--   the stream, indicating how far behind current time the consumer is. A
--   value of zero indicates that record processing is caught up, and there
--   are no new records to process at this moment.
getRecordsResponse_millisBehindLatest :: Lens' GetRecordsResponse (Maybe Natural)

-- | Undocumented member.
getRecordsResponse_childShards :: Lens' GetRecordsResponse (Maybe [ChildShard])

-- | The response's http status code.
getRecordsResponse_httpStatus :: Lens' GetRecordsResponse Int

-- | The data records retrieved from the shard.
getRecordsResponse_records :: Lens' GetRecordsResponse [Record]
instance GHC.Generics.Generic Amazonka.Kinesis.GetRecords.GetRecords
instance GHC.Show.Show Amazonka.Kinesis.GetRecords.GetRecords
instance GHC.Read.Read Amazonka.Kinesis.GetRecords.GetRecords
instance GHC.Classes.Eq Amazonka.Kinesis.GetRecords.GetRecords
instance GHC.Generics.Generic Amazonka.Kinesis.GetRecords.GetRecordsResponse
instance GHC.Show.Show Amazonka.Kinesis.GetRecords.GetRecordsResponse
instance GHC.Read.Read Amazonka.Kinesis.GetRecords.GetRecordsResponse
instance GHC.Classes.Eq Amazonka.Kinesis.GetRecords.GetRecordsResponse
instance Amazonka.Types.AWSRequest Amazonka.Kinesis.GetRecords.GetRecords
instance Control.DeepSeq.NFData Amazonka.Kinesis.GetRecords.GetRecordsResponse
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.GetRecords.GetRecords
instance Control.DeepSeq.NFData Amazonka.Kinesis.GetRecords.GetRecords
instance Amazonka.Data.Headers.ToHeaders Amazonka.Kinesis.GetRecords.GetRecords
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.Kinesis.GetRecords.GetRecords
instance Amazonka.Data.Path.ToPath Amazonka.Kinesis.GetRecords.GetRecords
instance Amazonka.Data.Query.ToQuery Amazonka.Kinesis.GetRecords.GetRecords


-- | Enables enhanced Kinesis data stream monitoring for shard-level
--   metrics.
module Amazonka.Kinesis.EnableEnhancedMonitoring

-- | Represents the input for EnableEnhancedMonitoring.
--   
--   <i>See:</i> <a>newEnableEnhancedMonitoring</a> smart constructor.
data EnableEnhancedMonitoring
EnableEnhancedMonitoring' :: Text -> [MetricsName] -> EnableEnhancedMonitoring

-- | The name of the stream for which to enable enhanced monitoring.
[$sel:streamName:EnableEnhancedMonitoring'] :: EnableEnhancedMonitoring -> Text

-- | List of shard-level metrics to enable.
--   
--   The following are the valid shard-level metrics. The value
--   "<tt>ALL</tt>" enables every metric.
--   
--   <ul>
--   <li><pre>IncomingBytes</pre></li>
--   <li><pre>IncomingRecords</pre></li>
--   <li><pre>OutgoingBytes</pre></li>
--   <li><pre>OutgoingRecords</pre></li>
--   <li><pre>WriteProvisionedThroughputExceeded</pre></li>
--   <li><pre>ReadProvisionedThroughputExceeded</pre></li>
--   <li><pre>IteratorAgeMilliseconds</pre></li>
--   <li><pre>ALL</pre></li>
--   </ul>
--   
--   For more information, see <a>Monitoring the Amazon Kinesis Data
--   Streams Service with Amazon CloudWatch</a> in the <i>Amazon Kinesis
--   Data Streams Developer Guide</i>.
[$sel:shardLevelMetrics:EnableEnhancedMonitoring'] :: EnableEnhancedMonitoring -> [MetricsName]

-- | Create a value of <a>EnableEnhancedMonitoring</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamName:EnableEnhancedMonitoring'</a>,
--   <a>enableEnhancedMonitoring_streamName</a> - The name of the stream
--   for which to enable enhanced monitoring.
--   
--   <a>$sel:shardLevelMetrics:EnableEnhancedMonitoring'</a>,
--   <a>enableEnhancedMonitoring_shardLevelMetrics</a> - List of
--   shard-level metrics to enable.
--   
--   The following are the valid shard-level metrics. The value
--   "<tt>ALL</tt>" enables every metric.
--   
--   <ul>
--   <li><pre>IncomingBytes</pre></li>
--   <li><pre>IncomingRecords</pre></li>
--   <li><pre>OutgoingBytes</pre></li>
--   <li><pre>OutgoingRecords</pre></li>
--   <li><pre>WriteProvisionedThroughputExceeded</pre></li>
--   <li><pre>ReadProvisionedThroughputExceeded</pre></li>
--   <li><pre>IteratorAgeMilliseconds</pre></li>
--   <li><pre>ALL</pre></li>
--   </ul>
--   
--   For more information, see <a>Monitoring the Amazon Kinesis Data
--   Streams Service with Amazon CloudWatch</a> in the <i>Amazon Kinesis
--   Data Streams Developer Guide</i>.
newEnableEnhancedMonitoring :: Text -> EnableEnhancedMonitoring

-- | The name of the stream for which to enable enhanced monitoring.
enableEnhancedMonitoring_streamName :: Lens' EnableEnhancedMonitoring Text

-- | List of shard-level metrics to enable.
--   
--   The following are the valid shard-level metrics. The value
--   "<tt>ALL</tt>" enables every metric.
--   
--   <ul>
--   <li><pre>IncomingBytes</pre></li>
--   <li><pre>IncomingRecords</pre></li>
--   <li><pre>OutgoingBytes</pre></li>
--   <li><pre>OutgoingRecords</pre></li>
--   <li><pre>WriteProvisionedThroughputExceeded</pre></li>
--   <li><pre>ReadProvisionedThroughputExceeded</pre></li>
--   <li><pre>IteratorAgeMilliseconds</pre></li>
--   <li><pre>ALL</pre></li>
--   </ul>
--   
--   For more information, see <a>Monitoring the Amazon Kinesis Data
--   Streams Service with Amazon CloudWatch</a> in the <i>Amazon Kinesis
--   Data Streams Developer Guide</i>.
enableEnhancedMonitoring_shardLevelMetrics :: Lens' EnableEnhancedMonitoring [MetricsName]

-- | Represents the output for EnableEnhancedMonitoring and
--   DisableEnhancedMonitoring.
--   
--   <i>See:</i> <a>newEnhancedMonitoringOutput</a> smart constructor.
data EnhancedMonitoringOutput
EnhancedMonitoringOutput' :: Maybe [MetricsName] -> Maybe [MetricsName] -> Maybe Text -> EnhancedMonitoringOutput

-- | Represents the list of all the metrics that would be in the enhanced
--   state after the operation.
[$sel:desiredShardLevelMetrics:EnhancedMonitoringOutput'] :: EnhancedMonitoringOutput -> Maybe [MetricsName]

-- | Represents the current state of the metrics that are in the enhanced
--   state before the operation.
[$sel:currentShardLevelMetrics:EnhancedMonitoringOutput'] :: EnhancedMonitoringOutput -> Maybe [MetricsName]

-- | The name of the Kinesis data stream.
[$sel:streamName:EnhancedMonitoringOutput'] :: EnhancedMonitoringOutput -> Maybe Text

-- | Create a value of <a>EnhancedMonitoringOutput</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:desiredShardLevelMetrics:EnhancedMonitoringOutput'</a>,
--   <a>enhancedMonitoringOutput_desiredShardLevelMetrics</a> - Represents
--   the list of all the metrics that would be in the enhanced state after
--   the operation.
--   
--   <a>$sel:currentShardLevelMetrics:EnhancedMonitoringOutput'</a>,
--   <a>enhancedMonitoringOutput_currentShardLevelMetrics</a> - Represents
--   the current state of the metrics that are in the enhanced state before
--   the operation.
--   
--   <a>$sel:streamName:EnhancedMonitoringOutput'</a>,
--   <a>enhancedMonitoringOutput_streamName</a> - The name of the Kinesis
--   data stream.
newEnhancedMonitoringOutput :: EnhancedMonitoringOutput

-- | Represents the list of all the metrics that would be in the enhanced
--   state after the operation.
enhancedMonitoringOutput_desiredShardLevelMetrics :: Lens' EnhancedMonitoringOutput (Maybe [MetricsName])

-- | Represents the current state of the metrics that are in the enhanced
--   state before the operation.
enhancedMonitoringOutput_currentShardLevelMetrics :: Lens' EnhancedMonitoringOutput (Maybe [MetricsName])

-- | The name of the Kinesis data stream.
enhancedMonitoringOutput_streamName :: Lens' EnhancedMonitoringOutput (Maybe Text)
instance GHC.Generics.Generic Amazonka.Kinesis.EnableEnhancedMonitoring.EnableEnhancedMonitoring
instance GHC.Show.Show Amazonka.Kinesis.EnableEnhancedMonitoring.EnableEnhancedMonitoring
instance GHC.Read.Read Amazonka.Kinesis.EnableEnhancedMonitoring.EnableEnhancedMonitoring
instance GHC.Classes.Eq Amazonka.Kinesis.EnableEnhancedMonitoring.EnableEnhancedMonitoring
instance Amazonka.Types.AWSRequest Amazonka.Kinesis.EnableEnhancedMonitoring.EnableEnhancedMonitoring
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.EnableEnhancedMonitoring.EnableEnhancedMonitoring
instance Control.DeepSeq.NFData Amazonka.Kinesis.EnableEnhancedMonitoring.EnableEnhancedMonitoring
instance Amazonka.Data.Headers.ToHeaders Amazonka.Kinesis.EnableEnhancedMonitoring.EnableEnhancedMonitoring
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.Kinesis.EnableEnhancedMonitoring.EnableEnhancedMonitoring
instance Amazonka.Data.Path.ToPath Amazonka.Kinesis.EnableEnhancedMonitoring.EnableEnhancedMonitoring
instance Amazonka.Data.Query.ToQuery Amazonka.Kinesis.EnableEnhancedMonitoring.EnableEnhancedMonitoring


-- | Disables enhanced monitoring.
module Amazonka.Kinesis.DisableEnhancedMonitoring

-- | Represents the input for DisableEnhancedMonitoring.
--   
--   <i>See:</i> <a>newDisableEnhancedMonitoring</a> smart constructor.
data DisableEnhancedMonitoring
DisableEnhancedMonitoring' :: Text -> [MetricsName] -> DisableEnhancedMonitoring

-- | The name of the Kinesis data stream for which to disable enhanced
--   monitoring.
[$sel:streamName:DisableEnhancedMonitoring'] :: DisableEnhancedMonitoring -> Text

-- | List of shard-level metrics to disable.
--   
--   The following are the valid shard-level metrics. The value
--   "<tt>ALL</tt>" disables every metric.
--   
--   <ul>
--   <li><pre>IncomingBytes</pre></li>
--   <li><pre>IncomingRecords</pre></li>
--   <li><pre>OutgoingBytes</pre></li>
--   <li><pre>OutgoingRecords</pre></li>
--   <li><pre>WriteProvisionedThroughputExceeded</pre></li>
--   <li><pre>ReadProvisionedThroughputExceeded</pre></li>
--   <li><pre>IteratorAgeMilliseconds</pre></li>
--   <li><pre>ALL</pre></li>
--   </ul>
--   
--   For more information, see <a>Monitoring the Amazon Kinesis Data
--   Streams Service with Amazon CloudWatch</a> in the <i>Amazon Kinesis
--   Data Streams Developer Guide</i>.
[$sel:shardLevelMetrics:DisableEnhancedMonitoring'] :: DisableEnhancedMonitoring -> [MetricsName]

-- | Create a value of <a>DisableEnhancedMonitoring</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamName:DisableEnhancedMonitoring'</a>,
--   <a>disableEnhancedMonitoring_streamName</a> - The name of the Kinesis
--   data stream for which to disable enhanced monitoring.
--   
--   <a>$sel:shardLevelMetrics:DisableEnhancedMonitoring'</a>,
--   <a>disableEnhancedMonitoring_shardLevelMetrics</a> - List of
--   shard-level metrics to disable.
--   
--   The following are the valid shard-level metrics. The value
--   "<tt>ALL</tt>" disables every metric.
--   
--   <ul>
--   <li><pre>IncomingBytes</pre></li>
--   <li><pre>IncomingRecords</pre></li>
--   <li><pre>OutgoingBytes</pre></li>
--   <li><pre>OutgoingRecords</pre></li>
--   <li><pre>WriteProvisionedThroughputExceeded</pre></li>
--   <li><pre>ReadProvisionedThroughputExceeded</pre></li>
--   <li><pre>IteratorAgeMilliseconds</pre></li>
--   <li><pre>ALL</pre></li>
--   </ul>
--   
--   For more information, see <a>Monitoring the Amazon Kinesis Data
--   Streams Service with Amazon CloudWatch</a> in the <i>Amazon Kinesis
--   Data Streams Developer Guide</i>.
newDisableEnhancedMonitoring :: Text -> DisableEnhancedMonitoring

-- | The name of the Kinesis data stream for which to disable enhanced
--   monitoring.
disableEnhancedMonitoring_streamName :: Lens' DisableEnhancedMonitoring Text

-- | List of shard-level metrics to disable.
--   
--   The following are the valid shard-level metrics. The value
--   "<tt>ALL</tt>" disables every metric.
--   
--   <ul>
--   <li><pre>IncomingBytes</pre></li>
--   <li><pre>IncomingRecords</pre></li>
--   <li><pre>OutgoingBytes</pre></li>
--   <li><pre>OutgoingRecords</pre></li>
--   <li><pre>WriteProvisionedThroughputExceeded</pre></li>
--   <li><pre>ReadProvisionedThroughputExceeded</pre></li>
--   <li><pre>IteratorAgeMilliseconds</pre></li>
--   <li><pre>ALL</pre></li>
--   </ul>
--   
--   For more information, see <a>Monitoring the Amazon Kinesis Data
--   Streams Service with Amazon CloudWatch</a> in the <i>Amazon Kinesis
--   Data Streams Developer Guide</i>.
disableEnhancedMonitoring_shardLevelMetrics :: Lens' DisableEnhancedMonitoring [MetricsName]

-- | Represents the output for EnableEnhancedMonitoring and
--   DisableEnhancedMonitoring.
--   
--   <i>See:</i> <a>newEnhancedMonitoringOutput</a> smart constructor.
data EnhancedMonitoringOutput
EnhancedMonitoringOutput' :: Maybe [MetricsName] -> Maybe [MetricsName] -> Maybe Text -> EnhancedMonitoringOutput

-- | Represents the list of all the metrics that would be in the enhanced
--   state after the operation.
[$sel:desiredShardLevelMetrics:EnhancedMonitoringOutput'] :: EnhancedMonitoringOutput -> Maybe [MetricsName]

-- | Represents the current state of the metrics that are in the enhanced
--   state before the operation.
[$sel:currentShardLevelMetrics:EnhancedMonitoringOutput'] :: EnhancedMonitoringOutput -> Maybe [MetricsName]

-- | The name of the Kinesis data stream.
[$sel:streamName:EnhancedMonitoringOutput'] :: EnhancedMonitoringOutput -> Maybe Text

-- | Create a value of <a>EnhancedMonitoringOutput</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:desiredShardLevelMetrics:EnhancedMonitoringOutput'</a>,
--   <a>enhancedMonitoringOutput_desiredShardLevelMetrics</a> - Represents
--   the list of all the metrics that would be in the enhanced state after
--   the operation.
--   
--   <a>$sel:currentShardLevelMetrics:EnhancedMonitoringOutput'</a>,
--   <a>enhancedMonitoringOutput_currentShardLevelMetrics</a> - Represents
--   the current state of the metrics that are in the enhanced state before
--   the operation.
--   
--   <a>$sel:streamName:EnhancedMonitoringOutput'</a>,
--   <a>enhancedMonitoringOutput_streamName</a> - The name of the Kinesis
--   data stream.
newEnhancedMonitoringOutput :: EnhancedMonitoringOutput

-- | Represents the list of all the metrics that would be in the enhanced
--   state after the operation.
enhancedMonitoringOutput_desiredShardLevelMetrics :: Lens' EnhancedMonitoringOutput (Maybe [MetricsName])

-- | Represents the current state of the metrics that are in the enhanced
--   state before the operation.
enhancedMonitoringOutput_currentShardLevelMetrics :: Lens' EnhancedMonitoringOutput (Maybe [MetricsName])

-- | The name of the Kinesis data stream.
enhancedMonitoringOutput_streamName :: Lens' EnhancedMonitoringOutput (Maybe Text)
instance GHC.Generics.Generic Amazonka.Kinesis.DisableEnhancedMonitoring.DisableEnhancedMonitoring
instance GHC.Show.Show Amazonka.Kinesis.DisableEnhancedMonitoring.DisableEnhancedMonitoring
instance GHC.Read.Read Amazonka.Kinesis.DisableEnhancedMonitoring.DisableEnhancedMonitoring
instance GHC.Classes.Eq Amazonka.Kinesis.DisableEnhancedMonitoring.DisableEnhancedMonitoring
instance Amazonka.Types.AWSRequest Amazonka.Kinesis.DisableEnhancedMonitoring.DisableEnhancedMonitoring
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.DisableEnhancedMonitoring.DisableEnhancedMonitoring
instance Control.DeepSeq.NFData Amazonka.Kinesis.DisableEnhancedMonitoring.DisableEnhancedMonitoring
instance Amazonka.Data.Headers.ToHeaders Amazonka.Kinesis.DisableEnhancedMonitoring.DisableEnhancedMonitoring
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.Kinesis.DisableEnhancedMonitoring.DisableEnhancedMonitoring
instance Amazonka.Data.Path.ToPath Amazonka.Kinesis.DisableEnhancedMonitoring.DisableEnhancedMonitoring
instance Amazonka.Data.Query.ToQuery Amazonka.Kinesis.DisableEnhancedMonitoring.DisableEnhancedMonitoring


-- | Provides a summarized description of the specified Kinesis data stream
--   without the shard list.
--   
--   The information returned includes the stream name, Amazon Resource
--   Name (ARN), status, record retention period, approximate creation
--   time, monitoring, encryption details, and open shard count.
--   
--   DescribeStreamSummary has a limit of 20 transactions per second per
--   account.
module Amazonka.Kinesis.DescribeStreamSummary

-- | <i>See:</i> <a>newDescribeStreamSummary</a> smart constructor.
data DescribeStreamSummary
DescribeStreamSummary' :: Text -> DescribeStreamSummary

-- | The name of the stream to describe.
[$sel:streamName:DescribeStreamSummary'] :: DescribeStreamSummary -> Text

-- | Create a value of <a>DescribeStreamSummary</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamName:DescribeStreamSummary'</a>,
--   <a>describeStreamSummary_streamName</a> - The name of the stream to
--   describe.
newDescribeStreamSummary :: Text -> DescribeStreamSummary

-- | The name of the stream to describe.
describeStreamSummary_streamName :: Lens' DescribeStreamSummary Text

-- | <i>See:</i> <a>newDescribeStreamSummaryResponse</a> smart constructor.
data DescribeStreamSummaryResponse
DescribeStreamSummaryResponse' :: Int -> StreamDescriptionSummary -> DescribeStreamSummaryResponse

-- | The response's http status code.
[$sel:httpStatus:DescribeStreamSummaryResponse'] :: DescribeStreamSummaryResponse -> Int

-- | A StreamDescriptionSummary containing information about the stream.
[$sel:streamDescriptionSummary:DescribeStreamSummaryResponse'] :: DescribeStreamSummaryResponse -> StreamDescriptionSummary

-- | Create a value of <a>DescribeStreamSummaryResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DescribeStreamSummaryResponse'</a>,
--   <a>describeStreamSummaryResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:streamDescriptionSummary:DescribeStreamSummaryResponse'</a>,
--   <a>describeStreamSummaryResponse_streamDescriptionSummary</a> - A
--   StreamDescriptionSummary containing information about the stream.
newDescribeStreamSummaryResponse :: Int -> StreamDescriptionSummary -> DescribeStreamSummaryResponse

-- | The response's http status code.
describeStreamSummaryResponse_httpStatus :: Lens' DescribeStreamSummaryResponse Int

-- | A StreamDescriptionSummary containing information about the stream.
describeStreamSummaryResponse_streamDescriptionSummary :: Lens' DescribeStreamSummaryResponse StreamDescriptionSummary
instance GHC.Generics.Generic Amazonka.Kinesis.DescribeStreamSummary.DescribeStreamSummary
instance GHC.Show.Show Amazonka.Kinesis.DescribeStreamSummary.DescribeStreamSummary
instance GHC.Read.Read Amazonka.Kinesis.DescribeStreamSummary.DescribeStreamSummary
instance GHC.Classes.Eq Amazonka.Kinesis.DescribeStreamSummary.DescribeStreamSummary
instance GHC.Generics.Generic Amazonka.Kinesis.DescribeStreamSummary.DescribeStreamSummaryResponse
instance GHC.Show.Show Amazonka.Kinesis.DescribeStreamSummary.DescribeStreamSummaryResponse
instance GHC.Read.Read Amazonka.Kinesis.DescribeStreamSummary.DescribeStreamSummaryResponse
instance GHC.Classes.Eq Amazonka.Kinesis.DescribeStreamSummary.DescribeStreamSummaryResponse
instance Amazonka.Types.AWSRequest Amazonka.Kinesis.DescribeStreamSummary.DescribeStreamSummary
instance Control.DeepSeq.NFData Amazonka.Kinesis.DescribeStreamSummary.DescribeStreamSummaryResponse
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.DescribeStreamSummary.DescribeStreamSummary
instance Control.DeepSeq.NFData Amazonka.Kinesis.DescribeStreamSummary.DescribeStreamSummary
instance Amazonka.Data.Headers.ToHeaders Amazonka.Kinesis.DescribeStreamSummary.DescribeStreamSummary
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.Kinesis.DescribeStreamSummary.DescribeStreamSummary
instance Amazonka.Data.Path.ToPath Amazonka.Kinesis.DescribeStreamSummary.DescribeStreamSummary
instance Amazonka.Data.Query.ToQuery Amazonka.Kinesis.DescribeStreamSummary.DescribeStreamSummary


-- | To get the description of a registered consumer, provide the ARN of
--   the consumer. Alternatively, you can provide the ARN of the data
--   stream and the name you gave the consumer when you registered it. You
--   may also provide all three parameters, as long as they don't conflict
--   with each other. If you don't know the name or ARN of the consumer
--   that you want to describe, you can use the ListStreamConsumers
--   operation to get a list of the descriptions of all the consumers that
--   are currently registered with a given data stream.
--   
--   This operation has a limit of 20 transactions per second per stream.
module Amazonka.Kinesis.DescribeStreamConsumer

-- | <i>See:</i> <a>newDescribeStreamConsumer</a> smart constructor.
data DescribeStreamConsumer
DescribeStreamConsumer' :: Maybe Text -> Maybe Text -> Maybe Text -> DescribeStreamConsumer

-- | The ARN returned by Kinesis Data Streams when you registered the
--   consumer.
[$sel:consumerARN:DescribeStreamConsumer'] :: DescribeStreamConsumer -> Maybe Text

-- | The ARN of the Kinesis data stream that the consumer is registered
--   with. For more information, see <a>Amazon Resource Names (ARNs) and
--   AWS Service Namespaces</a>.
[$sel:streamARN:DescribeStreamConsumer'] :: DescribeStreamConsumer -> Maybe Text

-- | The name that you gave to the consumer.
[$sel:consumerName:DescribeStreamConsumer'] :: DescribeStreamConsumer -> Maybe Text

-- | Create a value of <a>DescribeStreamConsumer</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:consumerARN:DescribeStreamConsumer'</a>,
--   <a>describeStreamConsumer_consumerARN</a> - The ARN returned by
--   Kinesis Data Streams when you registered the consumer.
--   
--   <a>$sel:streamARN:DescribeStreamConsumer'</a>,
--   <a>describeStreamConsumer_streamARN</a> - The ARN of the Kinesis data
--   stream that the consumer is registered with. For more information, see
--   <a>Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.
--   
--   <a>$sel:consumerName:DescribeStreamConsumer'</a>,
--   <a>describeStreamConsumer_consumerName</a> - The name that you gave to
--   the consumer.
newDescribeStreamConsumer :: DescribeStreamConsumer

-- | The ARN returned by Kinesis Data Streams when you registered the
--   consumer.
describeStreamConsumer_consumerARN :: Lens' DescribeStreamConsumer (Maybe Text)

-- | The ARN of the Kinesis data stream that the consumer is registered
--   with. For more information, see <a>Amazon Resource Names (ARNs) and
--   AWS Service Namespaces</a>.
describeStreamConsumer_streamARN :: Lens' DescribeStreamConsumer (Maybe Text)

-- | The name that you gave to the consumer.
describeStreamConsumer_consumerName :: Lens' DescribeStreamConsumer (Maybe Text)

-- | <i>See:</i> <a>newDescribeStreamConsumerResponse</a> smart
--   constructor.
data DescribeStreamConsumerResponse
DescribeStreamConsumerResponse' :: Int -> ConsumerDescription -> DescribeStreamConsumerResponse

-- | The response's http status code.
[$sel:httpStatus:DescribeStreamConsumerResponse'] :: DescribeStreamConsumerResponse -> Int

-- | An object that represents the details of the consumer.
[$sel:consumerDescription:DescribeStreamConsumerResponse'] :: DescribeStreamConsumerResponse -> ConsumerDescription

-- | Create a value of <a>DescribeStreamConsumerResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DescribeStreamConsumerResponse'</a>,
--   <a>describeStreamConsumerResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:consumerDescription:DescribeStreamConsumerResponse'</a>,
--   <a>describeStreamConsumerResponse_consumerDescription</a> - An object
--   that represents the details of the consumer.
newDescribeStreamConsumerResponse :: Int -> ConsumerDescription -> DescribeStreamConsumerResponse

-- | The response's http status code.
describeStreamConsumerResponse_httpStatus :: Lens' DescribeStreamConsumerResponse Int

-- | An object that represents the details of the consumer.
describeStreamConsumerResponse_consumerDescription :: Lens' DescribeStreamConsumerResponse ConsumerDescription
instance GHC.Generics.Generic Amazonka.Kinesis.DescribeStreamConsumer.DescribeStreamConsumer
instance GHC.Show.Show Amazonka.Kinesis.DescribeStreamConsumer.DescribeStreamConsumer
instance GHC.Read.Read Amazonka.Kinesis.DescribeStreamConsumer.DescribeStreamConsumer
instance GHC.Classes.Eq Amazonka.Kinesis.DescribeStreamConsumer.DescribeStreamConsumer
instance GHC.Generics.Generic Amazonka.Kinesis.DescribeStreamConsumer.DescribeStreamConsumerResponse
instance GHC.Show.Show Amazonka.Kinesis.DescribeStreamConsumer.DescribeStreamConsumerResponse
instance GHC.Read.Read Amazonka.Kinesis.DescribeStreamConsumer.DescribeStreamConsumerResponse
instance GHC.Classes.Eq Amazonka.Kinesis.DescribeStreamConsumer.DescribeStreamConsumerResponse
instance Amazonka.Types.AWSRequest Amazonka.Kinesis.DescribeStreamConsumer.DescribeStreamConsumer
instance Control.DeepSeq.NFData Amazonka.Kinesis.DescribeStreamConsumer.DescribeStreamConsumerResponse
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.DescribeStreamConsumer.DescribeStreamConsumer
instance Control.DeepSeq.NFData Amazonka.Kinesis.DescribeStreamConsumer.DescribeStreamConsumer
instance Amazonka.Data.Headers.ToHeaders Amazonka.Kinesis.DescribeStreamConsumer.DescribeStreamConsumer
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.Kinesis.DescribeStreamConsumer.DescribeStreamConsumer
instance Amazonka.Data.Path.ToPath Amazonka.Kinesis.DescribeStreamConsumer.DescribeStreamConsumer
instance Amazonka.Data.Query.ToQuery Amazonka.Kinesis.DescribeStreamConsumer.DescribeStreamConsumer


-- | Describes the specified Kinesis data stream.
--   
--   The information returned includes the stream name, Amazon Resource
--   Name (ARN), creation time, enhanced metric configuration, and shard
--   map. The shard map is an array of shard objects. For each shard
--   object, there is the hash key and sequence number ranges that the
--   shard spans, and the IDs of any earlier shards that played in a role
--   in creating the shard. Every record ingested in the stream is
--   identified by a sequence number, which is assigned when the record is
--   put into the stream.
--   
--   You can limit the number of shards returned by each call. For more
--   information, see <a>Retrieving Shards from a Stream</a> in the
--   <i>Amazon Kinesis Data Streams Developer Guide</i>.
--   
--   There are no guarantees about the chronological order shards returned.
--   To process shards in chronological order, use the ID of the parent
--   shard to track the lineage to the oldest shard.
--   
--   This operation has a limit of 10 transactions per second per account.
--   
--   This operation returns paginated results.
module Amazonka.Kinesis.DescribeStream

-- | Represents the input for <tt>DescribeStream</tt>.
--   
--   <i>See:</i> <a>newDescribeStream</a> smart constructor.
data DescribeStream
DescribeStream' :: Maybe Text -> Maybe Natural -> Text -> DescribeStream

-- | The shard ID of the shard to start with.
[$sel:exclusiveStartShardId:DescribeStream'] :: DescribeStream -> Maybe Text

-- | The maximum number of shards to return in a single call. The default
--   value is 100. If you specify a value greater than 100, at most 100
--   shards are returned.
[$sel:limit:DescribeStream'] :: DescribeStream -> Maybe Natural

-- | The name of the stream to describe.
[$sel:streamName:DescribeStream'] :: DescribeStream -> Text

-- | Create a value of <a>DescribeStream</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:exclusiveStartShardId:DescribeStream'</a>,
--   <a>describeStream_exclusiveStartShardId</a> - The shard ID of the
--   shard to start with.
--   
--   <a>$sel:limit:DescribeStream'</a>, <a>describeStream_limit</a> - The
--   maximum number of shards to return in a single call. The default value
--   is 100. If you specify a value greater than 100, at most 100 shards
--   are returned.
--   
--   <a>$sel:streamName:DescribeStream'</a>,
--   <a>describeStream_streamName</a> - The name of the stream to describe.
newDescribeStream :: Text -> DescribeStream

-- | The shard ID of the shard to start with.
describeStream_exclusiveStartShardId :: Lens' DescribeStream (Maybe Text)

-- | The maximum number of shards to return in a single call. The default
--   value is 100. If you specify a value greater than 100, at most 100
--   shards are returned.
describeStream_limit :: Lens' DescribeStream (Maybe Natural)

-- | The name of the stream to describe.
describeStream_streamName :: Lens' DescribeStream Text

-- | Represents the output for <tt>DescribeStream</tt>.
--   
--   <i>See:</i> <a>newDescribeStreamResponse</a> smart constructor.
data DescribeStreamResponse
DescribeStreamResponse' :: Int -> StreamDescription -> DescribeStreamResponse

-- | The response's http status code.
[$sel:httpStatus:DescribeStreamResponse'] :: DescribeStreamResponse -> Int

-- | The current status of the stream, the stream Amazon Resource Name
--   (ARN), an array of shard objects that comprise the stream, and whether
--   there are more shards available.
[$sel:streamDescription:DescribeStreamResponse'] :: DescribeStreamResponse -> StreamDescription

-- | Create a value of <a>DescribeStreamResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DescribeStreamResponse'</a>,
--   <a>describeStreamResponse_httpStatus</a> - The response's http status
--   code.
--   
--   <a>$sel:streamDescription:DescribeStreamResponse'</a>,
--   <a>describeStreamResponse_streamDescription</a> - The current status
--   of the stream, the stream Amazon Resource Name (ARN), an array of
--   shard objects that comprise the stream, and whether there are more
--   shards available.
newDescribeStreamResponse :: Int -> StreamDescription -> DescribeStreamResponse

-- | The response's http status code.
describeStreamResponse_httpStatus :: Lens' DescribeStreamResponse Int

-- | The current status of the stream, the stream Amazon Resource Name
--   (ARN), an array of shard objects that comprise the stream, and whether
--   there are more shards available.
describeStreamResponse_streamDescription :: Lens' DescribeStreamResponse StreamDescription
instance GHC.Generics.Generic Amazonka.Kinesis.DescribeStream.DescribeStream
instance GHC.Show.Show Amazonka.Kinesis.DescribeStream.DescribeStream
instance GHC.Read.Read Amazonka.Kinesis.DescribeStream.DescribeStream
instance GHC.Classes.Eq Amazonka.Kinesis.DescribeStream.DescribeStream
instance GHC.Generics.Generic Amazonka.Kinesis.DescribeStream.DescribeStreamResponse
instance GHC.Show.Show Amazonka.Kinesis.DescribeStream.DescribeStreamResponse
instance GHC.Read.Read Amazonka.Kinesis.DescribeStream.DescribeStreamResponse
instance GHC.Classes.Eq Amazonka.Kinesis.DescribeStream.DescribeStreamResponse
instance Amazonka.Types.AWSRequest Amazonka.Kinesis.DescribeStream.DescribeStream
instance Control.DeepSeq.NFData Amazonka.Kinesis.DescribeStream.DescribeStreamResponse
instance Amazonka.Pager.AWSPager Amazonka.Kinesis.DescribeStream.DescribeStream
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.DescribeStream.DescribeStream
instance Control.DeepSeq.NFData Amazonka.Kinesis.DescribeStream.DescribeStream
instance Amazonka.Data.Headers.ToHeaders Amazonka.Kinesis.DescribeStream.DescribeStream
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.Kinesis.DescribeStream.DescribeStream
instance Amazonka.Data.Path.ToPath Amazonka.Kinesis.DescribeStream.DescribeStream
instance Amazonka.Data.Query.ToQuery Amazonka.Kinesis.DescribeStream.DescribeStream


-- | Describes the shard limits and usage for the account.
--   
--   If you update your account limits, the old limits might be returned
--   for a few minutes.
--   
--   This operation has a limit of one transaction per second per account.
module Amazonka.Kinesis.DescribeLimits

-- | <i>See:</i> <a>newDescribeLimits</a> smart constructor.
data DescribeLimits
DescribeLimits' :: DescribeLimits

-- | Create a value of <a>DescribeLimits</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newDescribeLimits :: DescribeLimits

-- | <i>See:</i> <a>newDescribeLimitsResponse</a> smart constructor.
data DescribeLimitsResponse
DescribeLimitsResponse' :: Int -> Natural -> Natural -> DescribeLimitsResponse

-- | The response's http status code.
[$sel:httpStatus:DescribeLimitsResponse'] :: DescribeLimitsResponse -> Int

-- | The maximum number of shards.
[$sel:shardLimit:DescribeLimitsResponse'] :: DescribeLimitsResponse -> Natural

-- | The number of open shards.
[$sel:openShardCount:DescribeLimitsResponse'] :: DescribeLimitsResponse -> Natural

-- | Create a value of <a>DescribeLimitsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DescribeLimitsResponse'</a>,
--   <a>describeLimitsResponse_httpStatus</a> - The response's http status
--   code.
--   
--   <a>$sel:shardLimit:DescribeLimitsResponse'</a>,
--   <a>describeLimitsResponse_shardLimit</a> - The maximum number of
--   shards.
--   
--   <a>$sel:openShardCount:DescribeLimitsResponse'</a>,
--   <a>describeLimitsResponse_openShardCount</a> - The number of open
--   shards.
newDescribeLimitsResponse :: Int -> Natural -> Natural -> DescribeLimitsResponse

-- | The response's http status code.
describeLimitsResponse_httpStatus :: Lens' DescribeLimitsResponse Int

-- | The maximum number of shards.
describeLimitsResponse_shardLimit :: Lens' DescribeLimitsResponse Natural

-- | The number of open shards.
describeLimitsResponse_openShardCount :: Lens' DescribeLimitsResponse Natural
instance GHC.Generics.Generic Amazonka.Kinesis.DescribeLimits.DescribeLimits
instance GHC.Show.Show Amazonka.Kinesis.DescribeLimits.DescribeLimits
instance GHC.Read.Read Amazonka.Kinesis.DescribeLimits.DescribeLimits
instance GHC.Classes.Eq Amazonka.Kinesis.DescribeLimits.DescribeLimits
instance GHC.Generics.Generic Amazonka.Kinesis.DescribeLimits.DescribeLimitsResponse
instance GHC.Show.Show Amazonka.Kinesis.DescribeLimits.DescribeLimitsResponse
instance GHC.Read.Read Amazonka.Kinesis.DescribeLimits.DescribeLimitsResponse
instance GHC.Classes.Eq Amazonka.Kinesis.DescribeLimits.DescribeLimitsResponse
instance Amazonka.Types.AWSRequest Amazonka.Kinesis.DescribeLimits.DescribeLimits
instance Control.DeepSeq.NFData Amazonka.Kinesis.DescribeLimits.DescribeLimitsResponse
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.DescribeLimits.DescribeLimits
instance Control.DeepSeq.NFData Amazonka.Kinesis.DescribeLimits.DescribeLimits
instance Amazonka.Data.Headers.ToHeaders Amazonka.Kinesis.DescribeLimits.DescribeLimits
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.Kinesis.DescribeLimits.DescribeLimits
instance Amazonka.Data.Path.ToPath Amazonka.Kinesis.DescribeLimits.DescribeLimits
instance Amazonka.Data.Query.ToQuery Amazonka.Kinesis.DescribeLimits.DescribeLimits


-- | To deregister a consumer, provide its ARN. Alternatively, you can
--   provide the ARN of the data stream and the name you gave the consumer
--   when you registered it. You may also provide all three parameters, as
--   long as they don't conflict with each other. If you don't know the
--   name or ARN of the consumer that you want to deregister, you can use
--   the ListStreamConsumers operation to get a list of the descriptions of
--   all the consumers that are currently registered with a given data
--   stream. The description of a consumer contains its name and ARN.
--   
--   This operation has a limit of five transactions per second per stream.
module Amazonka.Kinesis.DeregisterStreamConsumer

-- | <i>See:</i> <a>newDeregisterStreamConsumer</a> smart constructor.
data DeregisterStreamConsumer
DeregisterStreamConsumer' :: Maybe Text -> Maybe Text -> Maybe Text -> DeregisterStreamConsumer

-- | The ARN returned by Kinesis Data Streams when you registered the
--   consumer. If you don't know the ARN of the consumer that you want to
--   deregister, you can use the ListStreamConsumers operation to get a
--   list of the descriptions of all the consumers that are currently
--   registered with a given data stream. The description of a consumer
--   contains its ARN.
[$sel:consumerARN:DeregisterStreamConsumer'] :: DeregisterStreamConsumer -> Maybe Text

-- | The ARN of the Kinesis data stream that the consumer is registered
--   with. For more information, see <a>Amazon Resource Names (ARNs) and
--   AWS Service Namespaces</a>.
[$sel:streamARN:DeregisterStreamConsumer'] :: DeregisterStreamConsumer -> Maybe Text

-- | The name that you gave to the consumer.
[$sel:consumerName:DeregisterStreamConsumer'] :: DeregisterStreamConsumer -> Maybe Text

-- | Create a value of <a>DeregisterStreamConsumer</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:consumerARN:DeregisterStreamConsumer'</a>,
--   <a>deregisterStreamConsumer_consumerARN</a> - The ARN returned by
--   Kinesis Data Streams when you registered the consumer. If you don't
--   know the ARN of the consumer that you want to deregister, you can use
--   the ListStreamConsumers operation to get a list of the descriptions of
--   all the consumers that are currently registered with a given data
--   stream. The description of a consumer contains its ARN.
--   
--   <a>$sel:streamARN:DeregisterStreamConsumer'</a>,
--   <a>deregisterStreamConsumer_streamARN</a> - The ARN of the Kinesis
--   data stream that the consumer is registered with. For more
--   information, see <a>Amazon Resource Names (ARNs) and AWS Service
--   Namespaces</a>.
--   
--   <a>$sel:consumerName:DeregisterStreamConsumer'</a>,
--   <a>deregisterStreamConsumer_consumerName</a> - The name that you gave
--   to the consumer.
newDeregisterStreamConsumer :: DeregisterStreamConsumer

-- | The ARN returned by Kinesis Data Streams when you registered the
--   consumer. If you don't know the ARN of the consumer that you want to
--   deregister, you can use the ListStreamConsumers operation to get a
--   list of the descriptions of all the consumers that are currently
--   registered with a given data stream. The description of a consumer
--   contains its ARN.
deregisterStreamConsumer_consumerARN :: Lens' DeregisterStreamConsumer (Maybe Text)

-- | The ARN of the Kinesis data stream that the consumer is registered
--   with. For more information, see <a>Amazon Resource Names (ARNs) and
--   AWS Service Namespaces</a>.
deregisterStreamConsumer_streamARN :: Lens' DeregisterStreamConsumer (Maybe Text)

-- | The name that you gave to the consumer.
deregisterStreamConsumer_consumerName :: Lens' DeregisterStreamConsumer (Maybe Text)

-- | <i>See:</i> <a>newDeregisterStreamConsumerResponse</a> smart
--   constructor.
data DeregisterStreamConsumerResponse
DeregisterStreamConsumerResponse' :: DeregisterStreamConsumerResponse

-- | Create a value of <a>DeregisterStreamConsumerResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newDeregisterStreamConsumerResponse :: DeregisterStreamConsumerResponse
instance GHC.Generics.Generic Amazonka.Kinesis.DeregisterStreamConsumer.DeregisterStreamConsumer
instance GHC.Show.Show Amazonka.Kinesis.DeregisterStreamConsumer.DeregisterStreamConsumer
instance GHC.Read.Read Amazonka.Kinesis.DeregisterStreamConsumer.DeregisterStreamConsumer
instance GHC.Classes.Eq Amazonka.Kinesis.DeregisterStreamConsumer.DeregisterStreamConsumer
instance GHC.Generics.Generic Amazonka.Kinesis.DeregisterStreamConsumer.DeregisterStreamConsumerResponse
instance GHC.Show.Show Amazonka.Kinesis.DeregisterStreamConsumer.DeregisterStreamConsumerResponse
instance GHC.Read.Read Amazonka.Kinesis.DeregisterStreamConsumer.DeregisterStreamConsumerResponse
instance GHC.Classes.Eq Amazonka.Kinesis.DeregisterStreamConsumer.DeregisterStreamConsumerResponse
instance Amazonka.Types.AWSRequest Amazonka.Kinesis.DeregisterStreamConsumer.DeregisterStreamConsumer
instance Control.DeepSeq.NFData Amazonka.Kinesis.DeregisterStreamConsumer.DeregisterStreamConsumerResponse
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.DeregisterStreamConsumer.DeregisterStreamConsumer
instance Control.DeepSeq.NFData Amazonka.Kinesis.DeregisterStreamConsumer.DeregisterStreamConsumer
instance Amazonka.Data.Headers.ToHeaders Amazonka.Kinesis.DeregisterStreamConsumer.DeregisterStreamConsumer
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.Kinesis.DeregisterStreamConsumer.DeregisterStreamConsumer
instance Amazonka.Data.Path.ToPath Amazonka.Kinesis.DeregisterStreamConsumer.DeregisterStreamConsumer
instance Amazonka.Data.Query.ToQuery Amazonka.Kinesis.DeregisterStreamConsumer.DeregisterStreamConsumer


-- | Deletes a Kinesis data stream and all its shards and data. You must
--   shut down any applications that are operating on the stream before you
--   delete the stream. If an application attempts to operate on a deleted
--   stream, it receives the exception <tt>ResourceNotFoundException</tt>.
--   
--   If the stream is in the <tt>ACTIVE</tt> state, you can delete it.
--   After a <tt>DeleteStream</tt> request, the specified stream is in the
--   <tt>DELETING</tt> state until Kinesis Data Streams completes the
--   deletion.
--   
--   <b>Note:</b> Kinesis Data Streams might continue to accept data read
--   and write operations, such as PutRecord, PutRecords, and GetRecords,
--   on a stream in the <tt>DELETING</tt> state until the stream deletion
--   is complete.
--   
--   When you delete a stream, any shards in that stream are also deleted,
--   and any tags are dissociated from the stream.
--   
--   You can use the DescribeStream operation to check the state of the
--   stream, which is returned in <tt>StreamStatus</tt>.
--   
--   DeleteStream has a limit of five transactions per second per account.
module Amazonka.Kinesis.DeleteStream

-- | Represents the input for DeleteStream.
--   
--   <i>See:</i> <a>newDeleteStream</a> smart constructor.
data DeleteStream
DeleteStream' :: Maybe Bool -> Text -> DeleteStream

-- | If this parameter is unset (<tt>null</tt>) or if you set it to
--   <tt>false</tt>, and the stream has registered consumers, the call to
--   <tt>DeleteStream</tt> fails with a <tt>ResourceInUseException</tt>.
[$sel:enforceConsumerDeletion:DeleteStream'] :: DeleteStream -> Maybe Bool

-- | The name of the stream to delete.
[$sel:streamName:DeleteStream'] :: DeleteStream -> Text

-- | Create a value of <a>DeleteStream</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:enforceConsumerDeletion:DeleteStream'</a>,
--   <a>deleteStream_enforceConsumerDeletion</a> - If this parameter is
--   unset (<tt>null</tt>) or if you set it to <tt>false</tt>, and the
--   stream has registered consumers, the call to <tt>DeleteStream</tt>
--   fails with a <tt>ResourceInUseException</tt>.
--   
--   <a>$sel:streamName:DeleteStream'</a>, <a>deleteStream_streamName</a> -
--   The name of the stream to delete.
newDeleteStream :: Text -> DeleteStream

-- | If this parameter is unset (<tt>null</tt>) or if you set it to
--   <tt>false</tt>, and the stream has registered consumers, the call to
--   <tt>DeleteStream</tt> fails with a <tt>ResourceInUseException</tt>.
deleteStream_enforceConsumerDeletion :: Lens' DeleteStream (Maybe Bool)

-- | The name of the stream to delete.
deleteStream_streamName :: Lens' DeleteStream Text

-- | <i>See:</i> <a>newDeleteStreamResponse</a> smart constructor.
data DeleteStreamResponse
DeleteStreamResponse' :: DeleteStreamResponse

-- | Create a value of <a>DeleteStreamResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newDeleteStreamResponse :: DeleteStreamResponse
instance GHC.Generics.Generic Amazonka.Kinesis.DeleteStream.DeleteStream
instance GHC.Show.Show Amazonka.Kinesis.DeleteStream.DeleteStream
instance GHC.Read.Read Amazonka.Kinesis.DeleteStream.DeleteStream
instance GHC.Classes.Eq Amazonka.Kinesis.DeleteStream.DeleteStream
instance GHC.Generics.Generic Amazonka.Kinesis.DeleteStream.DeleteStreamResponse
instance GHC.Show.Show Amazonka.Kinesis.DeleteStream.DeleteStreamResponse
instance GHC.Read.Read Amazonka.Kinesis.DeleteStream.DeleteStreamResponse
instance GHC.Classes.Eq Amazonka.Kinesis.DeleteStream.DeleteStreamResponse
instance Amazonka.Types.AWSRequest Amazonka.Kinesis.DeleteStream.DeleteStream
instance Control.DeepSeq.NFData Amazonka.Kinesis.DeleteStream.DeleteStreamResponse
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.DeleteStream.DeleteStream
instance Control.DeepSeq.NFData Amazonka.Kinesis.DeleteStream.DeleteStream
instance Amazonka.Data.Headers.ToHeaders Amazonka.Kinesis.DeleteStream.DeleteStream
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.Kinesis.DeleteStream.DeleteStream
instance Amazonka.Data.Path.ToPath Amazonka.Kinesis.DeleteStream.DeleteStream
instance Amazonka.Data.Query.ToQuery Amazonka.Kinesis.DeleteStream.DeleteStream


-- | Decreases the Kinesis data stream's retention period, which is the
--   length of time data records are accessible after they are added to the
--   stream. The minimum value of a stream's retention period is 24 hours.
--   
--   This operation may result in lost data. For example, if the stream's
--   retention period is 48 hours and is decreased to 24 hours, any data
--   already in the stream that is older than 24 hours is inaccessible.
module Amazonka.Kinesis.DecreaseStreamRetentionPeriod

-- | Represents the input for DecreaseStreamRetentionPeriod.
--   
--   <i>See:</i> <a>newDecreaseStreamRetentionPeriod</a> smart constructor.
data DecreaseStreamRetentionPeriod
DecreaseStreamRetentionPeriod' :: Text -> Int -> DecreaseStreamRetentionPeriod

-- | The name of the stream to modify.
[$sel:streamName:DecreaseStreamRetentionPeriod'] :: DecreaseStreamRetentionPeriod -> Text

-- | The new retention period of the stream, in hours. Must be less than
--   the current retention period.
[$sel:retentionPeriodHours:DecreaseStreamRetentionPeriod'] :: DecreaseStreamRetentionPeriod -> Int

-- | Create a value of <a>DecreaseStreamRetentionPeriod</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamName:DecreaseStreamRetentionPeriod'</a>,
--   <a>decreaseStreamRetentionPeriod_streamName</a> - The name of the
--   stream to modify.
--   
--   <a>$sel:retentionPeriodHours:DecreaseStreamRetentionPeriod'</a>,
--   <a>decreaseStreamRetentionPeriod_retentionPeriodHours</a> - The new
--   retention period of the stream, in hours. Must be less than the
--   current retention period.
newDecreaseStreamRetentionPeriod :: Text -> Int -> DecreaseStreamRetentionPeriod

-- | The name of the stream to modify.
decreaseStreamRetentionPeriod_streamName :: Lens' DecreaseStreamRetentionPeriod Text

-- | The new retention period of the stream, in hours. Must be less than
--   the current retention period.
decreaseStreamRetentionPeriod_retentionPeriodHours :: Lens' DecreaseStreamRetentionPeriod Int

-- | <i>See:</i> <a>newDecreaseStreamRetentionPeriodResponse</a> smart
--   constructor.
data DecreaseStreamRetentionPeriodResponse
DecreaseStreamRetentionPeriodResponse' :: DecreaseStreamRetentionPeriodResponse

-- | Create a value of <a>DecreaseStreamRetentionPeriodResponse</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newDecreaseStreamRetentionPeriodResponse :: DecreaseStreamRetentionPeriodResponse
instance GHC.Generics.Generic Amazonka.Kinesis.DecreaseStreamRetentionPeriod.DecreaseStreamRetentionPeriod
instance GHC.Show.Show Amazonka.Kinesis.DecreaseStreamRetentionPeriod.DecreaseStreamRetentionPeriod
instance GHC.Read.Read Amazonka.Kinesis.DecreaseStreamRetentionPeriod.DecreaseStreamRetentionPeriod
instance GHC.Classes.Eq Amazonka.Kinesis.DecreaseStreamRetentionPeriod.DecreaseStreamRetentionPeriod
instance GHC.Generics.Generic Amazonka.Kinesis.DecreaseStreamRetentionPeriod.DecreaseStreamRetentionPeriodResponse
instance GHC.Show.Show Amazonka.Kinesis.DecreaseStreamRetentionPeriod.DecreaseStreamRetentionPeriodResponse
instance GHC.Read.Read Amazonka.Kinesis.DecreaseStreamRetentionPeriod.DecreaseStreamRetentionPeriodResponse
instance GHC.Classes.Eq Amazonka.Kinesis.DecreaseStreamRetentionPeriod.DecreaseStreamRetentionPeriodResponse
instance Amazonka.Types.AWSRequest Amazonka.Kinesis.DecreaseStreamRetentionPeriod.DecreaseStreamRetentionPeriod
instance Control.DeepSeq.NFData Amazonka.Kinesis.DecreaseStreamRetentionPeriod.DecreaseStreamRetentionPeriodResponse
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.DecreaseStreamRetentionPeriod.DecreaseStreamRetentionPeriod
instance Control.DeepSeq.NFData Amazonka.Kinesis.DecreaseStreamRetentionPeriod.DecreaseStreamRetentionPeriod
instance Amazonka.Data.Headers.ToHeaders Amazonka.Kinesis.DecreaseStreamRetentionPeriod.DecreaseStreamRetentionPeriod
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.Kinesis.DecreaseStreamRetentionPeriod.DecreaseStreamRetentionPeriod
instance Amazonka.Data.Path.ToPath Amazonka.Kinesis.DecreaseStreamRetentionPeriod.DecreaseStreamRetentionPeriod
instance Amazonka.Data.Query.ToQuery Amazonka.Kinesis.DecreaseStreamRetentionPeriod.DecreaseStreamRetentionPeriod


-- | Creates a Kinesis data stream. A stream captures and transports data
--   records that are continuously emitted from different data sources or
--   <i>producers</i>. Scale-out within a stream is explicitly supported by
--   means of shards, which are uniquely identified groups of data records
--   in a stream.
--   
--   You specify and control the number of shards that a stream is composed
--   of. Each shard can support reads up to five transactions per second,
--   up to a maximum data read total of 2 MiB per second. Each shard can
--   support writes up to 1,000 records per second, up to a maximum data
--   write total of 1 MiB per second. If the amount of data input increases
--   or decreases, you can add or remove shards.
--   
--   The stream name identifies the stream. The name is scoped to the AWS
--   account used by the application. It is also scoped by AWS Region. That
--   is, two streams in two different accounts can have the same name, and
--   two streams in the same account, but in two different Regions, can
--   have the same name.
--   
--   <tt>CreateStream</tt> is an asynchronous operation. Upon receiving a
--   <tt>CreateStream</tt> request, Kinesis Data Streams immediately
--   returns and sets the stream status to <tt>CREATING</tt>. After the
--   stream is created, Kinesis Data Streams sets the stream status to
--   <tt>ACTIVE</tt>. You should perform read and write operations only on
--   an <tt>ACTIVE</tt> stream.
--   
--   You receive a <tt>LimitExceededException</tt> when making a
--   <tt>CreateStream</tt> request when you try to do one of the following:
--   
--   <ul>
--   <li>Have more than five streams in the <tt>CREATING</tt> state at any
--   point in time.</li>
--   <li>Create more shards than are authorized for your account.</li>
--   </ul>
--   
--   For the default shard limit for an AWS account, see <a>Amazon Kinesis
--   Data Streams Limits</a> in the <i>Amazon Kinesis Data Streams
--   Developer Guide</i>. To increase this limit, <a>contact AWS
--   Support</a>.
--   
--   You can use <tt>DescribeStream</tt> to check the stream status, which
--   is returned in <tt>StreamStatus</tt>.
--   
--   CreateStream has a limit of five transactions per second per account.
module Amazonka.Kinesis.CreateStream

-- | Represents the input for <tt>CreateStream</tt>.
--   
--   <i>See:</i> <a>newCreateStream</a> smart constructor.
data CreateStream
CreateStream' :: Text -> Natural -> CreateStream

-- | A name to identify the stream. The stream name is scoped to the AWS
--   account used by the application that creates the stream. It is also
--   scoped by AWS Region. That is, two streams in two different AWS
--   accounts can have the same name. Two streams in the same AWS account
--   but in two different Regions can also have the same name.
[$sel:streamName:CreateStream'] :: CreateStream -> Text

-- | The number of shards that the stream will use. The throughput of the
--   stream is a function of the number of shards; more shards are required
--   for greater provisioned throughput.
[$sel:shardCount:CreateStream'] :: CreateStream -> Natural

-- | Create a value of <a>CreateStream</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamName:CreateStream'</a>, <a>createStream_streamName</a> -
--   A name to identify the stream. The stream name is scoped to the AWS
--   account used by the application that creates the stream. It is also
--   scoped by AWS Region. That is, two streams in two different AWS
--   accounts can have the same name. Two streams in the same AWS account
--   but in two different Regions can also have the same name.
--   
--   <a>$sel:shardCount:CreateStream'</a>, <a>createStream_shardCount</a> -
--   The number of shards that the stream will use. The throughput of the
--   stream is a function of the number of shards; more shards are required
--   for greater provisioned throughput.
newCreateStream :: Text -> Natural -> CreateStream

-- | A name to identify the stream. The stream name is scoped to the AWS
--   account used by the application that creates the stream. It is also
--   scoped by AWS Region. That is, two streams in two different AWS
--   accounts can have the same name. Two streams in the same AWS account
--   but in two different Regions can also have the same name.
createStream_streamName :: Lens' CreateStream Text

-- | The number of shards that the stream will use. The throughput of the
--   stream is a function of the number of shards; more shards are required
--   for greater provisioned throughput.
createStream_shardCount :: Lens' CreateStream Natural

-- | <i>See:</i> <a>newCreateStreamResponse</a> smart constructor.
data CreateStreamResponse
CreateStreamResponse' :: CreateStreamResponse

-- | Create a value of <a>CreateStreamResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newCreateStreamResponse :: CreateStreamResponse
instance GHC.Generics.Generic Amazonka.Kinesis.CreateStream.CreateStream
instance GHC.Show.Show Amazonka.Kinesis.CreateStream.CreateStream
instance GHC.Read.Read Amazonka.Kinesis.CreateStream.CreateStream
instance GHC.Classes.Eq Amazonka.Kinesis.CreateStream.CreateStream
instance GHC.Generics.Generic Amazonka.Kinesis.CreateStream.CreateStreamResponse
instance GHC.Show.Show Amazonka.Kinesis.CreateStream.CreateStreamResponse
instance GHC.Read.Read Amazonka.Kinesis.CreateStream.CreateStreamResponse
instance GHC.Classes.Eq Amazonka.Kinesis.CreateStream.CreateStreamResponse
instance Amazonka.Types.AWSRequest Amazonka.Kinesis.CreateStream.CreateStream
instance Control.DeepSeq.NFData Amazonka.Kinesis.CreateStream.CreateStreamResponse
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.CreateStream.CreateStream
instance Control.DeepSeq.NFData Amazonka.Kinesis.CreateStream.CreateStream
instance Amazonka.Data.Headers.ToHeaders Amazonka.Kinesis.CreateStream.CreateStream
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.Kinesis.CreateStream.CreateStream
instance Amazonka.Data.Path.ToPath Amazonka.Kinesis.CreateStream.CreateStream
instance Amazonka.Data.Query.ToQuery Amazonka.Kinesis.CreateStream.CreateStream


-- | Adds or updates tags for the specified Kinesis data stream. Each time
--   you invoke this operation, you can specify up to 10 tags. If you want
--   to add more than 10 tags to your stream, you can invoke this operation
--   multiple times. In total, each stream can have up to 50 tags.
--   
--   If tags have already been assigned to the stream,
--   <tt>AddTagsToStream</tt> overwrites any existing tags that correspond
--   to the specified tag keys.
--   
--   AddTagsToStream has a limit of five transactions per second per
--   account.
module Amazonka.Kinesis.AddTagsToStream

-- | Represents the input for <tt>AddTagsToStream</tt>.
--   
--   <i>See:</i> <a>newAddTagsToStream</a> smart constructor.
data AddTagsToStream
AddTagsToStream' :: Text -> HashMap Text Text -> AddTagsToStream

-- | The name of the stream.
[$sel:streamName:AddTagsToStream'] :: AddTagsToStream -> Text

-- | A set of up to 10 key-value pairs to use to create the tags.
[$sel:tags:AddTagsToStream'] :: AddTagsToStream -> HashMap Text Text

-- | Create a value of <a>AddTagsToStream</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamName:AddTagsToStream'</a>,
--   <a>addTagsToStream_streamName</a> - The name of the stream.
--   
--   <a>$sel:tags:AddTagsToStream'</a>, <a>addTagsToStream_tags</a> - A set
--   of up to 10 key-value pairs to use to create the tags.
newAddTagsToStream :: Text -> AddTagsToStream

-- | The name of the stream.
addTagsToStream_streamName :: Lens' AddTagsToStream Text

-- | A set of up to 10 key-value pairs to use to create the tags.
addTagsToStream_tags :: Lens' AddTagsToStream (HashMap Text Text)

-- | <i>See:</i> <a>newAddTagsToStreamResponse</a> smart constructor.
data AddTagsToStreamResponse
AddTagsToStreamResponse' :: AddTagsToStreamResponse

-- | Create a value of <a>AddTagsToStreamResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newAddTagsToStreamResponse :: AddTagsToStreamResponse
instance GHC.Generics.Generic Amazonka.Kinesis.AddTagsToStream.AddTagsToStream
instance GHC.Show.Show Amazonka.Kinesis.AddTagsToStream.AddTagsToStream
instance GHC.Read.Read Amazonka.Kinesis.AddTagsToStream.AddTagsToStream
instance GHC.Classes.Eq Amazonka.Kinesis.AddTagsToStream.AddTagsToStream
instance GHC.Generics.Generic Amazonka.Kinesis.AddTagsToStream.AddTagsToStreamResponse
instance GHC.Show.Show Amazonka.Kinesis.AddTagsToStream.AddTagsToStreamResponse
instance GHC.Read.Read Amazonka.Kinesis.AddTagsToStream.AddTagsToStreamResponse
instance GHC.Classes.Eq Amazonka.Kinesis.AddTagsToStream.AddTagsToStreamResponse
instance Amazonka.Types.AWSRequest Amazonka.Kinesis.AddTagsToStream.AddTagsToStream
instance Control.DeepSeq.NFData Amazonka.Kinesis.AddTagsToStream.AddTagsToStreamResponse
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.AddTagsToStream.AddTagsToStream
instance Control.DeepSeq.NFData Amazonka.Kinesis.AddTagsToStream.AddTagsToStream
instance Amazonka.Data.Headers.ToHeaders Amazonka.Kinesis.AddTagsToStream.AddTagsToStream
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.Kinesis.AddTagsToStream.AddTagsToStream
instance Amazonka.Data.Path.ToPath Amazonka.Kinesis.AddTagsToStream.AddTagsToStream
instance Amazonka.Data.Query.ToQuery Amazonka.Kinesis.AddTagsToStream.AddTagsToStream


-- | Updates the shard count of the specified stream to the specified
--   number of shards.
--   
--   Updating the shard count is an asynchronous operation. Upon receiving
--   the request, Kinesis Data Streams returns immediately and sets the
--   status of the stream to <tt>UPDATING</tt>. After the update is
--   complete, Kinesis Data Streams sets the status of the stream back to
--   <tt>ACTIVE</tt>. Depending on the size of the stream, the scaling
--   action could take a few minutes to complete. You can continue to read
--   and write data to your stream while its status is <tt>UPDATING</tt>.
--   
--   To update the shard count, Kinesis Data Streams performs splits or
--   merges on individual shards. This can cause short-lived shards to be
--   created, in addition to the final shards. These short-lived shards
--   count towards your total shard limit for your account in the Region.
--   
--   When using this operation, we recommend that you specify a target
--   shard count that is a multiple of 25% (25%, 50%, 75%, 100%). You can
--   specify any target value within your shard limit. However, if you
--   specify a target that isn't a multiple of 25%, the scaling action
--   might take longer to complete.
--   
--   This operation has the following default limits. By default, you
--   cannot do the following:
--   
--   <ul>
--   <li>Scale more than ten times per rolling 24-hour period per
--   stream</li>
--   <li>Scale up to more than double your current shard count for a
--   stream</li>
--   <li>Scale down below half your current shard count for a stream</li>
--   <li>Scale up to more than 500 shards in a stream</li>
--   <li>Scale a stream with more than 500 shards down unless the result is
--   less than 500 shards</li>
--   <li>Scale up to more than the shard limit for your account</li>
--   </ul>
--   
--   For the default limits for an AWS account, see <a>Streams Limits</a>
--   in the <i>Amazon Kinesis Data Streams Developer Guide</i>. To request
--   an increase in the call rate limit, the shard limit for this API, or
--   your overall shard limit, use the <a>limits form</a>.
module Amazonka.Kinesis.UpdateShardCount

-- | <i>See:</i> <a>newUpdateShardCount</a> smart constructor.
data UpdateShardCount
UpdateShardCount' :: Text -> Natural -> ScalingType -> UpdateShardCount

-- | The name of the stream.
[$sel:streamName:UpdateShardCount'] :: UpdateShardCount -> Text

-- | The new number of shards. This value has the following default limits.
--   By default, you cannot do the following:
--   
--   <ul>
--   <li>Set this value to more than double your current shard count for a
--   stream.</li>
--   <li>Set this value below half your current shard count for a
--   stream.</li>
--   <li>Set this value to more than 500 shards in a stream (the default
--   limit for shard count per stream is 500 per account per region),
--   unless you request a limit increase.</li>
--   <li>Scale a stream with more than 500 shards down unless you set this
--   value to less than 500 shards.</li>
--   </ul>
[$sel:targetShardCount:UpdateShardCount'] :: UpdateShardCount -> Natural

-- | The scaling type. Uniform scaling creates shards of equal size.
[$sel:scalingType:UpdateShardCount'] :: UpdateShardCount -> ScalingType

-- | Create a value of <a>UpdateShardCount</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamName:UpdateShardCount'</a>,
--   <a>updateShardCount_streamName</a> - The name of the stream.
--   
--   <a>$sel:targetShardCount:UpdateShardCount'</a>,
--   <a>updateShardCount_targetShardCount</a> - The new number of shards.
--   This value has the following default limits. By default, you cannot do
--   the following:
--   
--   <ul>
--   <li>Set this value to more than double your current shard count for a
--   stream.</li>
--   <li>Set this value below half your current shard count for a
--   stream.</li>
--   <li>Set this value to more than 500 shards in a stream (the default
--   limit for shard count per stream is 500 per account per region),
--   unless you request a limit increase.</li>
--   <li>Scale a stream with more than 500 shards down unless you set this
--   value to less than 500 shards.</li>
--   </ul>
--   
--   <a>$sel:scalingType:UpdateShardCount'</a>,
--   <a>updateShardCount_scalingType</a> - The scaling type. Uniform
--   scaling creates shards of equal size.
newUpdateShardCount :: Text -> Natural -> ScalingType -> UpdateShardCount

-- | The name of the stream.
updateShardCount_streamName :: Lens' UpdateShardCount Text

-- | The new number of shards. This value has the following default limits.
--   By default, you cannot do the following:
--   
--   <ul>
--   <li>Set this value to more than double your current shard count for a
--   stream.</li>
--   <li>Set this value below half your current shard count for a
--   stream.</li>
--   <li>Set this value to more than 500 shards in a stream (the default
--   limit for shard count per stream is 500 per account per region),
--   unless you request a limit increase.</li>
--   <li>Scale a stream with more than 500 shards down unless you set this
--   value to less than 500 shards.</li>
--   </ul>
updateShardCount_targetShardCount :: Lens' UpdateShardCount Natural

-- | The scaling type. Uniform scaling creates shards of equal size.
updateShardCount_scalingType :: Lens' UpdateShardCount ScalingType

-- | <i>See:</i> <a>newUpdateShardCountResponse</a> smart constructor.
data UpdateShardCountResponse
UpdateShardCountResponse' :: Maybe Natural -> Maybe Text -> Maybe Natural -> Int -> UpdateShardCountResponse

-- | The updated number of shards.
[$sel:targetShardCount:UpdateShardCountResponse'] :: UpdateShardCountResponse -> Maybe Natural

-- | The name of the stream.
[$sel:streamName:UpdateShardCountResponse'] :: UpdateShardCountResponse -> Maybe Text

-- | The current number of shards.
[$sel:currentShardCount:UpdateShardCountResponse'] :: UpdateShardCountResponse -> Maybe Natural

-- | The response's http status code.
[$sel:httpStatus:UpdateShardCountResponse'] :: UpdateShardCountResponse -> Int

-- | Create a value of <a>UpdateShardCountResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:targetShardCount:UpdateShardCount'</a>,
--   <a>updateShardCountResponse_targetShardCount</a> - The updated number
--   of shards.
--   
--   <a>$sel:streamName:UpdateShardCount'</a>,
--   <a>updateShardCountResponse_streamName</a> - The name of the stream.
--   
--   <a>$sel:currentShardCount:UpdateShardCountResponse'</a>,
--   <a>updateShardCountResponse_currentShardCount</a> - The current number
--   of shards.
--   
--   <a>$sel:httpStatus:UpdateShardCountResponse'</a>,
--   <a>updateShardCountResponse_httpStatus</a> - The response's http
--   status code.
newUpdateShardCountResponse :: Int -> UpdateShardCountResponse

-- | The updated number of shards.
updateShardCountResponse_targetShardCount :: Lens' UpdateShardCountResponse (Maybe Natural)

-- | The name of the stream.
updateShardCountResponse_streamName :: Lens' UpdateShardCountResponse (Maybe Text)

-- | The current number of shards.
updateShardCountResponse_currentShardCount :: Lens' UpdateShardCountResponse (Maybe Natural)

-- | The response's http status code.
updateShardCountResponse_httpStatus :: Lens' UpdateShardCountResponse Int
instance GHC.Generics.Generic Amazonka.Kinesis.UpdateShardCount.UpdateShardCount
instance GHC.Show.Show Amazonka.Kinesis.UpdateShardCount.UpdateShardCount
instance GHC.Read.Read Amazonka.Kinesis.UpdateShardCount.UpdateShardCount
instance GHC.Classes.Eq Amazonka.Kinesis.UpdateShardCount.UpdateShardCount
instance GHC.Generics.Generic Amazonka.Kinesis.UpdateShardCount.UpdateShardCountResponse
instance GHC.Show.Show Amazonka.Kinesis.UpdateShardCount.UpdateShardCountResponse
instance GHC.Read.Read Amazonka.Kinesis.UpdateShardCount.UpdateShardCountResponse
instance GHC.Classes.Eq Amazonka.Kinesis.UpdateShardCount.UpdateShardCountResponse
instance Amazonka.Types.AWSRequest Amazonka.Kinesis.UpdateShardCount.UpdateShardCount
instance Control.DeepSeq.NFData Amazonka.Kinesis.UpdateShardCount.UpdateShardCountResponse
instance Data.Hashable.Class.Hashable Amazonka.Kinesis.UpdateShardCount.UpdateShardCount
instance Control.DeepSeq.NFData Amazonka.Kinesis.UpdateShardCount.UpdateShardCount
instance Amazonka.Data.Headers.ToHeaders Amazonka.Kinesis.UpdateShardCount.UpdateShardCount
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.Kinesis.UpdateShardCount.UpdateShardCount
instance Amazonka.Data.Path.ToPath Amazonka.Kinesis.UpdateShardCount.UpdateShardCount
instance Amazonka.Data.Query.ToQuery Amazonka.Kinesis.UpdateShardCount.UpdateShardCount


module Amazonka.Kinesis.Lens

-- | The hash value used to explicitly determine the shard the data record
--   is assigned to by overriding the partition key hash.
putRecord_explicitHashKey :: Lens' PutRecord (Maybe Text)

-- | Guarantees strictly increasing sequence numbers, for puts from the
--   same client and to the same partition key. Usage: set the
--   <tt>SequenceNumberForOrdering</tt> of record <i>n</i> to the sequence
--   number of record <i>n-1</i> (as returned in the result when putting
--   record <i>n-1</i>). If this parameter is not set, records are coarsely
--   ordered based on arrival time.
putRecord_sequenceNumberForOrdering :: Lens' PutRecord (Maybe Text)

-- | The name of the stream to put the data record into.
putRecord_streamName :: Lens' PutRecord Text

-- | The data blob to put into the record, which is base64-encoded when the
--   blob is serialized. When the data blob (the payload before
--   base64-encoding) is added to the partition key size, the total size
--   must not exceed the maximum record size (1 MiB).-- -- <i>Note:</i>
--   This <tt>Lens</tt> automatically encodes and decodes Base64 data. --
--   The underlying isomorphism will encode to Base64 representation during
--   -- serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
putRecord_data :: Lens' PutRecord ByteString

-- | Determines which shard in the stream the data record is assigned to.
--   Partition keys are Unicode strings with a maximum length limit of 256
--   characters for each key. Amazon Kinesis Data Streams uses the
--   partition key as input to a hash function that maps the partition key
--   and associated data to a specific shard. Specifically, an MD5 hash
--   function is used to map partition keys to 128-bit integer values and
--   to map associated data records to shards. As a result of this hashing
--   mechanism, all data records with the same partition key map to the
--   same shard within the stream.
putRecord_partitionKey :: Lens' PutRecord Text

-- | The encryption type to use on the record. This parameter can be one of
--   the following values:
--   
--   <ul>
--   <li><tt>NONE</tt>: Do not encrypt the records in the stream.</li>
--   <li><tt>KMS</tt>: Use server-side encryption on the records in the
--   stream using a customer-managed AWS KMS key.</li>
--   </ul>
putRecordResponse_encryptionType :: Lens' PutRecordResponse (Maybe EncryptionType)

-- | The response's http status code.
putRecordResponse_httpStatus :: Lens' PutRecordResponse Int

-- | The shard ID of the shard where the data record was placed.
putRecordResponse_shardId :: Lens' PutRecordResponse Text

-- | The sequence number identifier that was assigned to the put data
--   record. The sequence number for the record is unique across all
--   records in the stream. A sequence number is the identifier associated
--   with every record put into the stream.
putRecordResponse_sequenceNumber :: Lens' PutRecordResponse Text

-- | For this parameter, use the value you obtained when you called
--   RegisterStreamConsumer.
subscribeToShard_consumerARN :: Lens' SubscribeToShard Text

-- | The ID of the shard you want to subscribe to. To see a list of all the
--   shards for a given stream, use ListShards.
subscribeToShard_shardId :: Lens' SubscribeToShard Text

subscribeToShard_startingPosition :: Lens' SubscribeToShard StartingPosition

-- | The response's http status code.
subscribeToShardResponse_httpStatus :: Lens' SubscribeToShardResponse Int

-- | The event stream that your consumer can use to read records from the
--   shard.
subscribeToShardResponse_eventStream :: Lens' SubscribeToShardResponse Value

-- | The name of the stream to modify.
decreaseStreamRetentionPeriod_streamName :: Lens' DecreaseStreamRetentionPeriod Text

-- | The new retention period of the stream, in hours. Must be less than
--   the current retention period.
decreaseStreamRetentionPeriod_retentionPeriodHours :: Lens' DecreaseStreamRetentionPeriod Int

-- | The name of the stream for the merge.
mergeShards_streamName :: Lens' MergeShards Text

-- | The shard ID of the shard to combine with the adjacent shard for the
--   merge.
mergeShards_shardToMerge :: Lens' MergeShards Text

-- | The shard ID of the adjacent shard for the merge.
mergeShards_adjacentShardToMerge :: Lens' MergeShards Text

-- | The ARN returned by Kinesis Data Streams when you registered the
--   consumer. If you don't know the ARN of the consumer that you want to
--   deregister, you can use the ListStreamConsumers operation to get a
--   list of the descriptions of all the consumers that are currently
--   registered with a given data stream. The description of a consumer
--   contains its ARN.
deregisterStreamConsumer_consumerARN :: Lens' DeregisterStreamConsumer (Maybe Text)

-- | The ARN of the Kinesis data stream that the consumer is registered
--   with. For more information, see <a>Amazon Resource Names (ARNs) and
--   AWS Service Namespaces</a>.
deregisterStreamConsumer_streamARN :: Lens' DeregisterStreamConsumer (Maybe Text)

-- | The name that you gave to the consumer.
deregisterStreamConsumer_consumerName :: Lens' DeregisterStreamConsumer (Maybe Text)

-- | The name of the stream to describe.
describeStreamSummary_streamName :: Lens' DescribeStreamSummary Text

-- | The response's http status code.
describeStreamSummaryResponse_httpStatus :: Lens' DescribeStreamSummaryResponse Int

-- | A StreamDescriptionSummary containing information about the stream.
describeStreamSummaryResponse_streamDescriptionSummary :: Lens' DescribeStreamSummaryResponse StreamDescriptionSummary

-- | The sequence number of the data record in the shard from which to
--   start reading. Used with shard iterator type AT_SEQUENCE_NUMBER and
--   AFTER_SEQUENCE_NUMBER.
getShardIterator_startingSequenceNumber :: Lens' GetShardIterator (Maybe Text)

-- | The time stamp of the data record from which to start reading. Used
--   with shard iterator type AT_TIMESTAMP. A time stamp is the Unix epoch
--   date with precision in milliseconds. For example,
--   <tt>2016-04-04T19:58:46.480-00:00</tt> or <tt>1459799926.480</tt>. If
--   a record with this exact time stamp does not exist, the iterator
--   returned is for the next (later) record. If the time stamp is older
--   than the current trim horizon, the iterator returned is for the oldest
--   untrimmed data record (TRIM_HORIZON).
getShardIterator_timestamp :: Lens' GetShardIterator (Maybe UTCTime)

-- | The name of the Amazon Kinesis data stream.
getShardIterator_streamName :: Lens' GetShardIterator Text

-- | The shard ID of the Kinesis Data Streams shard to get the iterator
--   for.
getShardIterator_shardId :: Lens' GetShardIterator Text

-- | Determines how the shard iterator is used to start reading data
--   records from the shard.
--   
--   The following are the valid Amazon Kinesis shard iterator types:
--   
--   <ul>
--   <li>AT_SEQUENCE_NUMBER - Start reading from the position denoted by a
--   specific sequence number, provided in the value
--   <tt>StartingSequenceNumber</tt>.</li>
--   <li>AFTER_SEQUENCE_NUMBER - Start reading right after the position
--   denoted by a specific sequence number, provided in the value
--   <tt>StartingSequenceNumber</tt>.</li>
--   <li>AT_TIMESTAMP - Start reading from the position denoted by a
--   specific time stamp, provided in the value <tt>Timestamp</tt>.</li>
--   <li>TRIM_HORIZON - Start reading at the last untrimmed record in the
--   shard in the system, which is the oldest data record in the
--   shard.</li>
--   <li>LATEST - Start reading just after the most recent record in the
--   shard, so that you always read the most recent data in the shard.</li>
--   </ul>
getShardIterator_shardIteratorType :: Lens' GetShardIterator ShardIteratorType

-- | The position in the shard from which to start reading data records
--   sequentially. A shard iterator specifies this position using the
--   sequence number of a data record in a shard.
getShardIteratorResponse_shardIterator :: Lens' GetShardIteratorResponse (Maybe Text)

-- | The response's http status code.
getShardIteratorResponse_httpStatus :: Lens' GetShardIteratorResponse Int

-- | The maximum number of records to return. Specify a value of up to
--   10,000. If you specify a value that is greater than 10,000, GetRecords
--   throws <tt>InvalidArgumentException</tt>. The default value is 10,000.
getRecords_limit :: Lens' GetRecords (Maybe Natural)

-- | The position in the shard from which you want to start sequentially
--   reading data records. A shard iterator specifies this position using
--   the sequence number of a data record in the shard.
getRecords_shardIterator :: Lens' GetRecords Text

-- | The next position in the shard from which to start sequentially
--   reading data records. If set to <tt>null</tt>, the shard has been
--   closed and the requested iterator does not return any more data.
getRecordsResponse_nextShardIterator :: Lens' GetRecordsResponse (Maybe Text)

-- | The number of milliseconds the GetRecords response is from the tip of
--   the stream, indicating how far behind current time the consumer is. A
--   value of zero indicates that record processing is caught up, and there
--   are no new records to process at this moment.
getRecordsResponse_millisBehindLatest :: Lens' GetRecordsResponse (Maybe Natural)

-- | Undocumented member.
getRecordsResponse_childShards :: Lens' GetRecordsResponse (Maybe [ChildShard])

-- | The response's http status code.
getRecordsResponse_httpStatus :: Lens' GetRecordsResponse Int

-- | The data records retrieved from the shard.
getRecordsResponse_records :: Lens' GetRecordsResponse [Record]

-- | The name of the stream on which to stop encrypting records.
stopStreamEncryption_streamName :: Lens' StopStreamEncryption Text

-- | The encryption type. The only valid value is <tt>KMS</tt>.
stopStreamEncryption_encryptionType :: Lens' StopStreamEncryption EncryptionType

-- | The GUID for the customer-managed AWS KMS key to use for encryption.
--   This value can be a globally unique identifier, a fully specified
--   Amazon Resource Name (ARN) to either an alias or a key, or an alias
--   name prefixed by "alias/".You can also use a master key owned by
--   Kinesis Data Streams by specifying the alias <tt>aws/kinesis</tt>.
--   
--   <ul>
--   <li>Key ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:alias/MyAliasName</tt></li>
--   <li>Globally unique key ID example:
--   <tt>12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias name example: <tt>alias/MyAliasName</tt></li>
--   <li>Master key owned by Kinesis Data Streams:
--   <tt>alias/aws/kinesis</tt></li>
--   </ul>
stopStreamEncryption_keyId :: Lens' StopStreamEncryption Text

-- | The name of the stream for which to enable enhanced monitoring.
enableEnhancedMonitoring_streamName :: Lens' EnableEnhancedMonitoring Text

-- | List of shard-level metrics to enable.
--   
--   The following are the valid shard-level metrics. The value
--   "<tt>ALL</tt>" enables every metric.
--   
--   <ul>
--   <li><pre>IncomingBytes</pre></li>
--   <li><pre>IncomingRecords</pre></li>
--   <li><pre>OutgoingBytes</pre></li>
--   <li><pre>OutgoingRecords</pre></li>
--   <li><pre>WriteProvisionedThroughputExceeded</pre></li>
--   <li><pre>ReadProvisionedThroughputExceeded</pre></li>
--   <li><pre>IteratorAgeMilliseconds</pre></li>
--   <li><pre>ALL</pre></li>
--   </ul>
--   
--   For more information, see <a>Monitoring the Amazon Kinesis Data
--   Streams Service with Amazon CloudWatch</a> in the <i>Amazon Kinesis
--   Data Streams Developer Guide</i>.
enableEnhancedMonitoring_shardLevelMetrics :: Lens' EnableEnhancedMonitoring [MetricsName]

-- | Represents the list of all the metrics that would be in the enhanced
--   state after the operation.
enhancedMonitoringOutput_desiredShardLevelMetrics :: Lens' EnhancedMonitoringOutput (Maybe [MetricsName])

-- | Represents the current state of the metrics that are in the enhanced
--   state before the operation.
enhancedMonitoringOutput_currentShardLevelMetrics :: Lens' EnhancedMonitoringOutput (Maybe [MetricsName])

-- | The name of the Kinesis data stream.
enhancedMonitoringOutput_streamName :: Lens' EnhancedMonitoringOutput (Maybe Text)

-- | The response's http status code.
describeLimitsResponse_httpStatus :: Lens' DescribeLimitsResponse Int

-- | The maximum number of shards.
describeLimitsResponse_shardLimit :: Lens' DescribeLimitsResponse Natural

-- | The number of open shards.
describeLimitsResponse_openShardCount :: Lens' DescribeLimitsResponse Natural

-- | The ARN of the Kinesis data stream that you want to register the
--   consumer with. For more info, see <a>Amazon Resource Names (ARNs) and
--   AWS Service Namespaces</a>.
registerStreamConsumer_streamARN :: Lens' RegisterStreamConsumer Text

-- | For a given Kinesis data stream, each consumer must have a unique
--   name. However, consumer names don't have to be unique across data
--   streams.
registerStreamConsumer_consumerName :: Lens' RegisterStreamConsumer Text

-- | The response's http status code.
registerStreamConsumerResponse_httpStatus :: Lens' RegisterStreamConsumerResponse Int

-- | An object that represents the details of the consumer you registered.
--   When you register a consumer, it gets an ARN that is generated by
--   Kinesis Data Streams.
registerStreamConsumerResponse_consumer :: Lens' RegisterStreamConsumerResponse Consumer

-- | The name of the Kinesis data stream for which to disable enhanced
--   monitoring.
disableEnhancedMonitoring_streamName :: Lens' DisableEnhancedMonitoring Text

-- | List of shard-level metrics to disable.
--   
--   The following are the valid shard-level metrics. The value
--   "<tt>ALL</tt>" disables every metric.
--   
--   <ul>
--   <li><pre>IncomingBytes</pre></li>
--   <li><pre>IncomingRecords</pre></li>
--   <li><pre>OutgoingBytes</pre></li>
--   <li><pre>OutgoingRecords</pre></li>
--   <li><pre>WriteProvisionedThroughputExceeded</pre></li>
--   <li><pre>ReadProvisionedThroughputExceeded</pre></li>
--   <li><pre>IteratorAgeMilliseconds</pre></li>
--   <li><pre>ALL</pre></li>
--   </ul>
--   
--   For more information, see <a>Monitoring the Amazon Kinesis Data
--   Streams Service with Amazon CloudWatch</a> in the <i>Amazon Kinesis
--   Data Streams Developer Guide</i>.
disableEnhancedMonitoring_shardLevelMetrics :: Lens' DisableEnhancedMonitoring [MetricsName]

-- | Represents the list of all the metrics that would be in the enhanced
--   state after the operation.
enhancedMonitoringOutput_desiredShardLevelMetrics :: Lens' EnhancedMonitoringOutput (Maybe [MetricsName])

-- | Represents the current state of the metrics that are in the enhanced
--   state before the operation.
enhancedMonitoringOutput_currentShardLevelMetrics :: Lens' EnhancedMonitoringOutput (Maybe [MetricsName])

-- | The name of the Kinesis data stream.
enhancedMonitoringOutput_streamName :: Lens' EnhancedMonitoringOutput (Maybe Text)

-- | The name of the stream.
updateShardCount_streamName :: Lens' UpdateShardCount Text

-- | The new number of shards. This value has the following default limits.
--   By default, you cannot do the following:
--   
--   <ul>
--   <li>Set this value to more than double your current shard count for a
--   stream.</li>
--   <li>Set this value below half your current shard count for a
--   stream.</li>
--   <li>Set this value to more than 500 shards in a stream (the default
--   limit for shard count per stream is 500 per account per region),
--   unless you request a limit increase.</li>
--   <li>Scale a stream with more than 500 shards down unless you set this
--   value to less than 500 shards.</li>
--   </ul>
updateShardCount_targetShardCount :: Lens' UpdateShardCount Natural

-- | The scaling type. Uniform scaling creates shards of equal size.
updateShardCount_scalingType :: Lens' UpdateShardCount ScalingType

-- | The updated number of shards.
updateShardCountResponse_targetShardCount :: Lens' UpdateShardCountResponse (Maybe Natural)

-- | The name of the stream.
updateShardCountResponse_streamName :: Lens' UpdateShardCountResponse (Maybe Text)

-- | The current number of shards.
updateShardCountResponse_currentShardCount :: Lens' UpdateShardCountResponse (Maybe Natural)

-- | The response's http status code.
updateShardCountResponse_httpStatus :: Lens' UpdateShardCountResponse Int

-- | The number of tags to return. If this number is less than the total
--   number of tags associated with the stream, <tt>HasMoreTags</tt> is set
--   to <tt>true</tt>. To list additional tags, set
--   <tt>ExclusiveStartTagKey</tt> to the last key in the response.
listTagsForStream_limit :: Lens' ListTagsForStream (Maybe Natural)

-- | The key to use as the starting point for the list of tags. If this
--   parameter is set, <tt>ListTagsForStream</tt> gets all tags that occur
--   after <tt>ExclusiveStartTagKey</tt>.
listTagsForStream_exclusiveStartTagKey :: Lens' ListTagsForStream (Maybe Text)

-- | The name of the stream.
listTagsForStream_streamName :: Lens' ListTagsForStream Text

-- | The response's http status code.
listTagsForStreamResponse_httpStatus :: Lens' ListTagsForStreamResponse Int

-- | A list of tags associated with <tt>StreamName</tt>, starting with the
--   first tag after <tt>ExclusiveStartTagKey</tt> and up to the specified
--   <tt>Limit</tt>.
listTagsForStreamResponse_tags :: Lens' ListTagsForStreamResponse [Tag]

-- | If set to <tt>true</tt>, more tags are available. To request
--   additional tags, set <tt>ExclusiveStartTagKey</tt> to the key of the
--   last tag returned.
listTagsForStreamResponse_hasMoreTags :: Lens' ListTagsForStreamResponse Bool

-- | The ARN returned by Kinesis Data Streams when you registered the
--   consumer.
describeStreamConsumer_consumerARN :: Lens' DescribeStreamConsumer (Maybe Text)

-- | The ARN of the Kinesis data stream that the consumer is registered
--   with. For more information, see <a>Amazon Resource Names (ARNs) and
--   AWS Service Namespaces</a>.
describeStreamConsumer_streamARN :: Lens' DescribeStreamConsumer (Maybe Text)

-- | The name that you gave to the consumer.
describeStreamConsumer_consumerName :: Lens' DescribeStreamConsumer (Maybe Text)

-- | The response's http status code.
describeStreamConsumerResponse_httpStatus :: Lens' DescribeStreamConsumerResponse Int

-- | An object that represents the details of the consumer.
describeStreamConsumerResponse_consumerDescription :: Lens' DescribeStreamConsumerResponse ConsumerDescription

-- | The name of the stream.
addTagsToStream_streamName :: Lens' AddTagsToStream Text

-- | A set of up to 10 key-value pairs to use to create the tags.
addTagsToStream_tags :: Lens' AddTagsToStream (HashMap Text Text)

-- | The records associated with the request.
putRecords_records :: Lens' PutRecords (NonEmpty PutRecordsRequestEntry)

-- | The stream name associated with the request.
putRecords_streamName :: Lens' PutRecords Text

-- | The encryption type used on the records. This parameter can be one of
--   the following values:
--   
--   <ul>
--   <li><tt>NONE</tt>: Do not encrypt the records.</li>
--   <li><tt>KMS</tt>: Use server-side encryption on the records using a
--   customer-managed AWS KMS key.</li>
--   </ul>
putRecordsResponse_encryptionType :: Lens' PutRecordsResponse (Maybe EncryptionType)

-- | The number of unsuccessfully processed records in a
--   <tt>PutRecords</tt> request.
putRecordsResponse_failedRecordCount :: Lens' PutRecordsResponse (Maybe Natural)

-- | The response's http status code.
putRecordsResponse_httpStatus :: Lens' PutRecordsResponse Int

-- | An array of successfully and unsuccessfully processed record results,
--   correlated with the request by natural ordering. A record that is
--   successfully added to a stream includes <tt>SequenceNumber</tt> and
--   <tt>ShardId</tt> in the result. A record that fails to be added to a
--   stream includes <tt>ErrorCode</tt> and <tt>ErrorMessage</tt> in the
--   result.
putRecordsResponse_records :: Lens' PutRecordsResponse (NonEmpty PutRecordsResultEntry)

-- | Undocumented member.
listShards_shardFilter :: Lens' ListShards (Maybe ShardFilter)

-- | When the number of shards in the data stream is greater than the
--   default value for the <tt>MaxResults</tt> parameter, or if you
--   explicitly specify a value for <tt>MaxResults</tt> that is less than
--   the number of shards in the data stream, the response includes a
--   pagination token named <tt>NextToken</tt>. You can specify this
--   <tt>NextToken</tt> value in a subsequent call to <tt>ListShards</tt>
--   to list the next set of shards.
--   
--   Don't specify <tt>StreamName</tt> or <tt>StreamCreationTimestamp</tt>
--   if you specify <tt>NextToken</tt> because the latter unambiguously
--   identifies the stream.
--   
--   You can optionally specify a value for the <tt>MaxResults</tt>
--   parameter when you specify <tt>NextToken</tt>. If you specify a
--   <tt>MaxResults</tt> value that is less than the number of shards that
--   the operation returns if you don't specify <tt>MaxResults</tt>, the
--   response will contain a new <tt>NextToken</tt> value. You can use the
--   new <tt>NextToken</tt> value in a subsequent call to the
--   <tt>ListShards</tt> operation.
--   
--   Tokens expire after 300 seconds. When you obtain a value for
--   <tt>NextToken</tt> in the response to a call to <tt>ListShards</tt>,
--   you have 300 seconds to use that value. If you specify an expired
--   token in a call to <tt>ListShards</tt>, you get
--   <tt>ExpiredNextTokenException</tt>.
listShards_nextToken :: Lens' ListShards (Maybe Text)

-- | Specify this parameter to indicate that you want to list the shards
--   starting with the shard whose ID immediately follows
--   <tt>ExclusiveStartShardId</tt>.
--   
--   If you don't specify this parameter, the default behavior is for
--   <tt>ListShards</tt> to list the shards starting with the first one in
--   the stream.
--   
--   You cannot specify this parameter if you specify <tt>NextToken</tt>.
listShards_exclusiveStartShardId :: Lens' ListShards (Maybe Text)

-- | Specify this input parameter to distinguish data streams that have the
--   same name. For example, if you create a data stream and then delete
--   it, and you later create another data stream with the same name, you
--   can use this input parameter to specify which of the two streams you
--   want to list the shards for.
--   
--   You cannot specify this parameter if you specify the
--   <tt>NextToken</tt> parameter.
listShards_streamCreationTimestamp :: Lens' ListShards (Maybe UTCTime)

-- | The name of the data stream whose shards you want to list.
--   
--   You cannot specify this parameter if you specify the
--   <tt>NextToken</tt> parameter.
listShards_streamName :: Lens' ListShards (Maybe Text)

-- | The maximum number of shards to return in a single call to
--   <tt>ListShards</tt>. The minimum value you can specify for this
--   parameter is 1, and the maximum is 10,000, which is also the default.
--   
--   When the number of shards to be listed is greater than the value of
--   <tt>MaxResults</tt>, the response contains a <tt>NextToken</tt> value
--   that you can use in a subsequent call to <tt>ListShards</tt> to list
--   the next set of shards.
listShards_maxResults :: Lens' ListShards (Maybe Natural)

-- | When the number of shards in the data stream is greater than the
--   default value for the <tt>MaxResults</tt> parameter, or if you
--   explicitly specify a value for <tt>MaxResults</tt> that is less than
--   the number of shards in the data stream, the response includes a
--   pagination token named <tt>NextToken</tt>. You can specify this
--   <tt>NextToken</tt> value in a subsequent call to <tt>ListShards</tt>
--   to list the next set of shards. For more information about the use of
--   this pagination token when calling the <tt>ListShards</tt> operation,
--   see ListShardsInput$NextToken.
--   
--   Tokens expire after 300 seconds. When you obtain a value for
--   <tt>NextToken</tt> in the response to a call to <tt>ListShards</tt>,
--   you have 300 seconds to use that value. If you specify an expired
--   token in a call to <tt>ListShards</tt>, you get
--   <tt>ExpiredNextTokenException</tt>.
listShardsResponse_nextToken :: Lens' ListShardsResponse (Maybe Text)

-- | An array of JSON objects. Each object represents one shard and
--   specifies the IDs of the shard, the shard's parent, and the shard
--   that's adjacent to the shard's parent. Each object also contains the
--   starting and ending hash keys and the starting and ending sequence
--   numbers for the shard.
listShardsResponse_shards :: Lens' ListShardsResponse (Maybe [Shard])

-- | The response's http status code.
listShardsResponse_httpStatus :: Lens' ListShardsResponse Int

-- | If this parameter is unset (<tt>null</tt>) or if you set it to
--   <tt>false</tt>, and the stream has registered consumers, the call to
--   <tt>DeleteStream</tt> fails with a <tt>ResourceInUseException</tt>.
deleteStream_enforceConsumerDeletion :: Lens' DeleteStream (Maybe Bool)

-- | The name of the stream to delete.
deleteStream_streamName :: Lens' DeleteStream Text

-- | The name of the stream.
removeTagsFromStream_streamName :: Lens' RemoveTagsFromStream Text

-- | A list of tag keys. Each corresponding tag is removed from the stream.
removeTagsFromStream_tagKeys :: Lens' RemoveTagsFromStream (NonEmpty Text)

-- | The maximum number of streams to list.
listStreams_limit :: Lens' ListStreams (Maybe Natural)

-- | The name of the stream to start the list with.
listStreams_exclusiveStartStreamName :: Lens' ListStreams (Maybe Text)

-- | The response's http status code.
listStreamsResponse_httpStatus :: Lens' ListStreamsResponse Int

-- | The names of the streams that are associated with the AWS account
--   making the <tt>ListStreams</tt> request.
listStreamsResponse_streamNames :: Lens' ListStreamsResponse [Text]

-- | If set to <tt>true</tt>, there are more streams available to list.
listStreamsResponse_hasMoreStreams :: Lens' ListStreamsResponse Bool

-- | A name to identify the stream. The stream name is scoped to the AWS
--   account used by the application that creates the stream. It is also
--   scoped by AWS Region. That is, two streams in two different AWS
--   accounts can have the same name. Two streams in the same AWS account
--   but in two different Regions can also have the same name.
createStream_streamName :: Lens' CreateStream Text

-- | The number of shards that the stream will use. The throughput of the
--   stream is a function of the number of shards; more shards are required
--   for greater provisioned throughput.
createStream_shardCount :: Lens' CreateStream Natural

-- | The name of the stream for which to start encrypting records.
startStreamEncryption_streamName :: Lens' StartStreamEncryption Text

-- | The encryption type to use. The only valid value is <tt>KMS</tt>.
startStreamEncryption_encryptionType :: Lens' StartStreamEncryption EncryptionType

-- | The GUID for the customer-managed AWS KMS key to use for encryption.
--   This value can be a globally unique identifier, a fully specified
--   Amazon Resource Name (ARN) to either an alias or a key, or an alias
--   name prefixed by "alias/".You can also use a master key owned by
--   Kinesis Data Streams by specifying the alias <tt>aws/kinesis</tt>.
--   
--   <ul>
--   <li>Key ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:alias/MyAliasName</tt></li>
--   <li>Globally unique key ID example:
--   <tt>12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias name example: <tt>alias/MyAliasName</tt></li>
--   <li>Master key owned by Kinesis Data Streams:
--   <tt>alias/aws/kinesis</tt></li>
--   </ul>
startStreamEncryption_keyId :: Lens' StartStreamEncryption Text

-- | When the number of consumers that are registered with the data stream
--   is greater than the default value for the <tt>MaxResults</tt>
--   parameter, or if you explicitly specify a value for
--   <tt>MaxResults</tt> that is less than the number of consumers that are
--   registered with the data stream, the response includes a pagination
--   token named <tt>NextToken</tt>. You can specify this
--   <tt>NextToken</tt> value in a subsequent call to
--   <tt>ListStreamConsumers</tt> to list the next set of registered
--   consumers.
--   
--   Don't specify <tt>StreamName</tt> or <tt>StreamCreationTimestamp</tt>
--   if you specify <tt>NextToken</tt> because the latter unambiguously
--   identifies the stream.
--   
--   You can optionally specify a value for the <tt>MaxResults</tt>
--   parameter when you specify <tt>NextToken</tt>. If you specify a
--   <tt>MaxResults</tt> value that is less than the number of consumers
--   that the operation returns if you don't specify <tt>MaxResults</tt>,
--   the response will contain a new <tt>NextToken</tt> value. You can use
--   the new <tt>NextToken</tt> value in a subsequent call to the
--   <tt>ListStreamConsumers</tt> operation to list the next set of
--   consumers.
--   
--   Tokens expire after 300 seconds. When you obtain a value for
--   <tt>NextToken</tt> in the response to a call to
--   <tt>ListStreamConsumers</tt>, you have 300 seconds to use that value.
--   If you specify an expired token in a call to
--   <tt>ListStreamConsumers</tt>, you get
--   <tt>ExpiredNextTokenException</tt>.
listStreamConsumers_nextToken :: Lens' ListStreamConsumers (Maybe Text)

-- | Specify this input parameter to distinguish data streams that have the
--   same name. For example, if you create a data stream and then delete
--   it, and you later create another data stream with the same name, you
--   can use this input parameter to specify which of the two streams you
--   want to list the consumers for.
--   
--   You can't specify this parameter if you specify the NextToken
--   parameter.
listStreamConsumers_streamCreationTimestamp :: Lens' ListStreamConsumers (Maybe UTCTime)

-- | The maximum number of consumers that you want a single call of
--   <tt>ListStreamConsumers</tt> to return.
listStreamConsumers_maxResults :: Lens' ListStreamConsumers (Maybe Natural)

-- | The ARN of the Kinesis data stream for which you want to list the
--   registered consumers. For more information, see <a>Amazon Resource
--   Names (ARNs) and AWS Service Namespaces</a>.
listStreamConsumers_streamARN :: Lens' ListStreamConsumers Text

-- | When the number of consumers that are registered with the data stream
--   is greater than the default value for the <tt>MaxResults</tt>
--   parameter, or if you explicitly specify a value for
--   <tt>MaxResults</tt> that is less than the number of registered
--   consumers, the response includes a pagination token named
--   <tt>NextToken</tt>. You can specify this <tt>NextToken</tt> value in a
--   subsequent call to <tt>ListStreamConsumers</tt> to list the next set
--   of registered consumers. For more information about the use of this
--   pagination token when calling the <tt>ListStreamConsumers</tt>
--   operation, see ListStreamConsumersInput$NextToken.
--   
--   Tokens expire after 300 seconds. When you obtain a value for
--   <tt>NextToken</tt> in the response to a call to
--   <tt>ListStreamConsumers</tt>, you have 300 seconds to use that value.
--   If you specify an expired token in a call to
--   <tt>ListStreamConsumers</tt>, you get
--   <tt>ExpiredNextTokenException</tt>.
listStreamConsumersResponse_nextToken :: Lens' ListStreamConsumersResponse (Maybe Text)

-- | An array of JSON objects. Each object represents one registered
--   consumer.
listStreamConsumersResponse_consumers :: Lens' ListStreamConsumersResponse (Maybe [Consumer])

-- | The response's http status code.
listStreamConsumersResponse_httpStatus :: Lens' ListStreamConsumersResponse Int

-- | The name of the stream for the shard split.
splitShard_streamName :: Lens' SplitShard Text

-- | The shard ID of the shard to split.
splitShard_shardToSplit :: Lens' SplitShard Text

-- | A hash key value for the starting hash key of one of the child shards
--   created by the split. The hash key range for a given shard constitutes
--   a set of ordered contiguous positive integers. The value for
--   <tt>NewStartingHashKey</tt> must be in the range of hash keys being
--   mapped into the shard. The <tt>NewStartingHashKey</tt> hash key value
--   and all higher hash key values in hash key range are distributed to
--   one of the child shards. All the lower hash key values in the range
--   are distributed to the other child shard.
splitShard_newStartingHashKey :: Lens' SplitShard Text

-- | The name of the stream to modify.
increaseStreamRetentionPeriod_streamName :: Lens' IncreaseStreamRetentionPeriod Text

-- | The new retention period of the stream, in hours. Must be more than
--   the current retention period.
increaseStreamRetentionPeriod_retentionPeriodHours :: Lens' IncreaseStreamRetentionPeriod Int

-- | The shard ID of the shard to start with.
describeStream_exclusiveStartShardId :: Lens' DescribeStream (Maybe Text)

-- | The maximum number of shards to return in a single call. The default
--   value is 100. If you specify a value greater than 100, at most 100
--   shards are returned.
describeStream_limit :: Lens' DescribeStream (Maybe Natural)

-- | The name of the stream to describe.
describeStream_streamName :: Lens' DescribeStream Text

-- | The response's http status code.
describeStreamResponse_httpStatus :: Lens' DescribeStreamResponse Int

-- | The current status of the stream, the stream Amazon Resource Name
--   (ARN), an array of shard objects that comprise the stream, and whether
--   there are more shards available.
describeStreamResponse_streamDescription :: Lens' DescribeStreamResponse StreamDescription

-- | Undocumented member.
childShard_shardId :: Lens' ChildShard Text

-- | Undocumented member.
childShard_parentShards :: Lens' ChildShard [Text]

-- | Undocumented member.
childShard_hashKeyRange :: Lens' ChildShard HashKeyRange

-- | The name of the consumer is something you choose when you register the
--   consumer.
consumer_consumerName :: Lens' Consumer Text

-- | When you register a consumer, Kinesis Data Streams generates an ARN
--   for it. You need this ARN to be able to call SubscribeToShard.
--   
--   If you delete a consumer and then create a new one with the same name,
--   it won't have the same ARN. That's because consumer ARNs contain the
--   creation timestamp. This is important to keep in mind if you have IAM
--   policies that reference consumer ARNs.
consumer_consumerARN :: Lens' Consumer Text

-- | A consumer can't read data while in the <tt>CREATING</tt> or
--   <tt>DELETING</tt> states.
consumer_consumerStatus :: Lens' Consumer ConsumerStatus

consumer_consumerCreationTimestamp :: Lens' Consumer UTCTime

-- | The name of the consumer is something you choose when you register the
--   consumer.
consumerDescription_consumerName :: Lens' ConsumerDescription Text

-- | When you register a consumer, Kinesis Data Streams generates an ARN
--   for it. You need this ARN to be able to call SubscribeToShard.
--   
--   If you delete a consumer and then create a new one with the same name,
--   it won't have the same ARN. That's because consumer ARNs contain the
--   creation timestamp. This is important to keep in mind if you have IAM
--   policies that reference consumer ARNs.
consumerDescription_consumerARN :: Lens' ConsumerDescription Text

-- | A consumer can't read data while in the <tt>CREATING</tt> or
--   <tt>DELETING</tt> states.
consumerDescription_consumerStatus :: Lens' ConsumerDescription ConsumerStatus

consumerDescription_consumerCreationTimestamp :: Lens' ConsumerDescription UTCTime

-- | The ARN of the stream with which you registered the consumer.
consumerDescription_streamARN :: Lens' ConsumerDescription Text

-- | List of shard-level metrics.
--   
--   The following are the valid shard-level metrics. The value
--   "<tt>ALL</tt>" enhances every metric.
--   
--   <ul>
--   <li><pre>IncomingBytes</pre></li>
--   <li><pre>IncomingRecords</pre></li>
--   <li><pre>OutgoingBytes</pre></li>
--   <li><pre>OutgoingRecords</pre></li>
--   <li><pre>WriteProvisionedThroughputExceeded</pre></li>
--   <li><pre>ReadProvisionedThroughputExceeded</pre></li>
--   <li><pre>IteratorAgeMilliseconds</pre></li>
--   <li><pre>ALL</pre></li>
--   </ul>
--   
--   For more information, see <a>Monitoring the Amazon Kinesis Data
--   Streams Service with Amazon CloudWatch</a> in the <i>Amazon Kinesis
--   Data Streams Developer Guide</i>.
enhancedMetrics_shardLevelMetrics :: Lens' EnhancedMetrics (Maybe [MetricsName])

-- | Represents the list of all the metrics that would be in the enhanced
--   state after the operation.
enhancedMonitoringOutput_desiredShardLevelMetrics :: Lens' EnhancedMonitoringOutput (Maybe [MetricsName])

-- | Represents the current state of the metrics that are in the enhanced
--   state before the operation.
enhancedMonitoringOutput_currentShardLevelMetrics :: Lens' EnhancedMonitoringOutput (Maybe [MetricsName])

-- | The name of the Kinesis data stream.
enhancedMonitoringOutput_streamName :: Lens' EnhancedMonitoringOutput (Maybe Text)

-- | The starting hash key of the hash key range.
hashKeyRange_startingHashKey :: Lens' HashKeyRange Text

-- | The ending hash key of the hash key range.
hashKeyRange_endingHashKey :: Lens' HashKeyRange Text

-- | The hash value used to determine explicitly the shard that the data
--   record is assigned to by overriding the partition key hash.
putRecordsRequestEntry_explicitHashKey :: Lens' PutRecordsRequestEntry (Maybe Text)

-- | The data blob to put into the record, which is base64-encoded when the
--   blob is serialized. When the data blob (the payload before
--   base64-encoding) is added to the partition key size, the total size
--   must not exceed the maximum record size (1 MiB).-- -- <i>Note:</i>
--   This <tt>Lens</tt> automatically encodes and decodes Base64 data. --
--   The underlying isomorphism will encode to Base64 representation during
--   -- serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
putRecordsRequestEntry_data :: Lens' PutRecordsRequestEntry ByteString

-- | Determines which shard in the stream the data record is assigned to.
--   Partition keys are Unicode strings with a maximum length limit of 256
--   characters for each key. Amazon Kinesis Data Streams uses the
--   partition key as input to a hash function that maps the partition key
--   and associated data to a specific shard. Specifically, an MD5 hash
--   function is used to map partition keys to 128-bit integer values and
--   to map associated data records to shards. As a result of this hashing
--   mechanism, all data records with the same partition key map to the
--   same shard within the stream.
putRecordsRequestEntry_partitionKey :: Lens' PutRecordsRequestEntry Text

-- | The sequence number for an individual record result.
putRecordsResultEntry_sequenceNumber :: Lens' PutRecordsResultEntry (Maybe Text)

-- | The error code for an individual record result. <tt>ErrorCodes</tt>
--   can be either <tt>ProvisionedThroughputExceededException</tt> or
--   <tt>InternalFailure</tt>.
putRecordsResultEntry_errorCode :: Lens' PutRecordsResultEntry (Maybe Text)

-- | The error message for an individual record result. An
--   <tt>ErrorCode</tt> value of
--   <tt>ProvisionedThroughputExceededException</tt> has an error message
--   that includes the account ID, stream name, and shard ID. An
--   <tt>ErrorCode</tt> value of <tt>InternalFailure</tt> has the error
--   message <tt>"Internal Service Failure"</tt>.
putRecordsResultEntry_errorMessage :: Lens' PutRecordsResultEntry (Maybe Text)

-- | The shard ID for an individual record result.
putRecordsResultEntry_shardId :: Lens' PutRecordsResultEntry (Maybe Text)

-- | The encryption type used on the record. This parameter can be one of
--   the following values:
--   
--   <ul>
--   <li><tt>NONE</tt>: Do not encrypt the records in the stream.</li>
--   <li><tt>KMS</tt>: Use server-side encryption on the records in the
--   stream using a customer-managed AWS KMS key.</li>
--   </ul>
record_encryptionType :: Lens' Record (Maybe EncryptionType)

-- | The approximate time that the record was inserted into the stream.
record_approximateArrivalTimestamp :: Lens' Record (Maybe UTCTime)

-- | The unique identifier of the record within its shard.
record_sequenceNumber :: Lens' Record Text

-- | The data blob. The data in the blob is both opaque and immutable to
--   Kinesis Data Streams, which does not inspect, interpret, or change the
--   data in the blob in any way. When the data blob (the payload before
--   base64-encoding) is added to the partition key size, the total size
--   must not exceed the maximum record size (1 MiB).-- -- <i>Note:</i>
--   This <tt>Lens</tt> automatically encodes and decodes Base64 data. --
--   The underlying isomorphism will encode to Base64 representation during
--   -- serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
record_data :: Lens' Record ByteString

-- | Identifies which shard in the stream the data record is assigned to.
record_partitionKey :: Lens' Record Text

-- | The ending sequence number for the range. Shards that are in the OPEN
--   state have an ending sequence number of <tt>null</tt>.
sequenceNumberRange_endingSequenceNumber :: Lens' SequenceNumberRange (Maybe Text)

-- | The starting sequence number for the range.
sequenceNumberRange_startingSequenceNumber :: Lens' SequenceNumberRange Text

-- | The shard ID of the shard adjacent to the shard's parent.
shard_adjacentParentShardId :: Lens' Shard (Maybe Text)

-- | The shard ID of the shard's parent.
shard_parentShardId :: Lens' Shard (Maybe Text)

-- | The unique identifier of the shard within the stream.
shard_shardId :: Lens' Shard Text

-- | The range of possible hash key values for the shard, which is a set of
--   ordered contiguous positive integers.
shard_hashKeyRange :: Lens' Shard HashKeyRange

-- | The range of possible sequence numbers for the shard.
shard_sequenceNumberRange :: Lens' Shard SequenceNumberRange

-- | Undocumented member.
shardFilter_timestamp :: Lens' ShardFilter (Maybe UTCTime)

-- | Undocumented member.
shardFilter_shardId :: Lens' ShardFilter (Maybe Text)

-- | Undocumented member.
shardFilter_type :: Lens' ShardFilter ShardFilterType

-- | The sequence number of the data record in the shard from which to
--   start streaming. To specify a sequence number, set
--   <tt>StartingPosition</tt> to <tt>AT_SEQUENCE_NUMBER</tt> or
--   <tt>AFTER_SEQUENCE_NUMBER</tt>.
startingPosition_sequenceNumber :: Lens' StartingPosition (Maybe Text)

-- | The time stamp of the data record from which to start reading. To
--   specify a time stamp, set <tt>StartingPosition</tt> to <tt>Type
--   AT_TIMESTAMP</tt>. A time stamp is the Unix epoch date with precision
--   in milliseconds. For example, <tt>2016-04-04T19:58:46.480-00:00</tt>
--   or <tt>1459799926.480</tt>. If a record with this exact time stamp
--   does not exist, records will be streamed from the next (later) record.
--   If the time stamp is older than the current trim horizon, records will
--   be streamed from the oldest untrimmed data record
--   (<tt>TRIM_HORIZON</tt>).
startingPosition_timestamp :: Lens' StartingPosition (Maybe UTCTime)

-- | You can set the starting position to one of the following values:
--   
--   <tt>AT_SEQUENCE_NUMBER</tt>: Start streaming from the position denoted
--   by the sequence number specified in the <tt>SequenceNumber</tt> field.
--   
--   <tt>AFTER_SEQUENCE_NUMBER</tt>: Start streaming right after the
--   position denoted by the sequence number specified in the
--   <tt>SequenceNumber</tt> field.
--   
--   <tt>AT_TIMESTAMP</tt>: Start streaming from the position denoted by
--   the time stamp specified in the <tt>Timestamp</tt> field.
--   
--   <tt>TRIM_HORIZON</tt>: Start streaming at the last untrimmed record in
--   the shard, which is the oldest data record in the shard.
--   
--   <tt>LATEST</tt>: Start streaming just after the most recent record in
--   the shard, so that you always read the most recent data in the shard.
startingPosition_type :: Lens' StartingPosition ShardIteratorType

-- | The server-side encryption type used on the stream. This parameter can
--   be one of the following values:
--   
--   <ul>
--   <li><tt>NONE</tt>: Do not encrypt the records in the stream.</li>
--   <li><tt>KMS</tt>: Use server-side encryption on the records in the
--   stream using a customer-managed AWS KMS key.</li>
--   </ul>
streamDescription_encryptionType :: Lens' StreamDescription (Maybe EncryptionType)

-- | The GUID for the customer-managed AWS KMS key to use for encryption.
--   This value can be a globally unique identifier, a fully specified ARN
--   to either an alias or a key, or an alias name prefixed by "alias/".You
--   can also use a master key owned by Kinesis Data Streams by specifying
--   the alias <tt>aws/kinesis</tt>.
--   
--   <ul>
--   <li>Key ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:alias/MyAliasName</tt></li>
--   <li>Globally unique key ID example:
--   <tt>12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias name example: <tt>alias/MyAliasName</tt></li>
--   <li>Master key owned by Kinesis Data Streams:
--   <tt>alias/aws/kinesis</tt></li>
--   </ul>
streamDescription_keyId :: Lens' StreamDescription (Maybe Text)

-- | The name of the stream being described.
streamDescription_streamName :: Lens' StreamDescription Text

-- | The Amazon Resource Name (ARN) for the stream being described.
streamDescription_streamARN :: Lens' StreamDescription Text

-- | The current status of the stream being described. The stream status is
--   one of the following states:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The stream is being created. Kinesis Data
--   Streams immediately returns and sets <tt>StreamStatus</tt> to
--   <tt>CREATING</tt>.</li>
--   <li><tt>DELETING</tt> - The stream is being deleted. The specified
--   stream is in the <tt>DELETING</tt> state until Kinesis Data Streams
--   completes the deletion.</li>
--   <li><tt>ACTIVE</tt> - The stream exists and is ready for read and
--   write operations or deletion. You should perform read and write
--   operations only on an <tt>ACTIVE</tt> stream.</li>
--   <li><tt>UPDATING</tt> - Shards in the stream are being merged or
--   split. Read and write operations continue to work while the stream is
--   in the <tt>UPDATING</tt> state.</li>
--   </ul>
streamDescription_streamStatus :: Lens' StreamDescription StreamStatus

-- | The shards that comprise the stream.
streamDescription_shards :: Lens' StreamDescription [Shard]

-- | If set to <tt>true</tt>, more shards in the stream are available to
--   describe.
streamDescription_hasMoreShards :: Lens' StreamDescription Bool

-- | The current retention period, in hours. Minimum value of 24. Maximum
--   value of 168.
streamDescription_retentionPeriodHours :: Lens' StreamDescription Int

-- | The approximate time that the stream was created.
streamDescription_streamCreationTimestamp :: Lens' StreamDescription UTCTime

-- | Represents the current enhanced monitoring settings of the stream.
streamDescription_enhancedMonitoring :: Lens' StreamDescription [EnhancedMetrics]

-- | The encryption type used. This value is one of the following:
--   
--   <ul>
--   <li><pre>KMS</pre></li>
--   <li><pre>NONE</pre></li>
--   </ul>
streamDescriptionSummary_encryptionType :: Lens' StreamDescriptionSummary (Maybe EncryptionType)

-- | The GUID for the customer-managed AWS KMS key to use for encryption.
--   This value can be a globally unique identifier, a fully specified ARN
--   to either an alias or a key, or an alias name prefixed by "alias/".You
--   can also use a master key owned by Kinesis Data Streams by specifying
--   the alias <tt>aws/kinesis</tt>.
--   
--   <ul>
--   <li>Key ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias ARN example: <tt>
--   arn:aws:kms:us-east-1:123456789012:alias/MyAliasName</tt></li>
--   <li>Globally unique key ID example:
--   <tt>12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias name example: <tt>alias/MyAliasName</tt></li>
--   <li>Master key owned by Kinesis Data Streams:
--   <tt>alias/aws/kinesis</tt></li>
--   </ul>
streamDescriptionSummary_keyId :: Lens' StreamDescriptionSummary (Maybe Text)

-- | The number of enhanced fan-out consumers registered with the stream.
streamDescriptionSummary_consumerCount :: Lens' StreamDescriptionSummary (Maybe Natural)

-- | The name of the stream being described.
streamDescriptionSummary_streamName :: Lens' StreamDescriptionSummary Text

-- | The Amazon Resource Name (ARN) for the stream being described.
streamDescriptionSummary_streamARN :: Lens' StreamDescriptionSummary Text

-- | The current status of the stream being described. The stream status is
--   one of the following states:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The stream is being created. Kinesis Data
--   Streams immediately returns and sets <tt>StreamStatus</tt> to
--   <tt>CREATING</tt>.</li>
--   <li><tt>DELETING</tt> - The stream is being deleted. The specified
--   stream is in the <tt>DELETING</tt> state until Kinesis Data Streams
--   completes the deletion.</li>
--   <li><tt>ACTIVE</tt> - The stream exists and is ready for read and
--   write operations or deletion. You should perform read and write
--   operations only on an <tt>ACTIVE</tt> stream.</li>
--   <li><tt>UPDATING</tt> - Shards in the stream are being merged or
--   split. Read and write operations continue to work while the stream is
--   in the <tt>UPDATING</tt> state.</li>
--   </ul>
streamDescriptionSummary_streamStatus :: Lens' StreamDescriptionSummary StreamStatus

-- | The current retention period, in hours.
streamDescriptionSummary_retentionPeriodHours :: Lens' StreamDescriptionSummary Int

-- | The approximate time that the stream was created.
streamDescriptionSummary_streamCreationTimestamp :: Lens' StreamDescriptionSummary UTCTime

-- | Represents the current enhanced monitoring settings of the stream.
streamDescriptionSummary_enhancedMonitoring :: Lens' StreamDescriptionSummary [EnhancedMetrics]

-- | The number of open shards in the stream.
streamDescriptionSummary_openShardCount :: Lens' StreamDescriptionSummary Natural

-- | Undocumented member.
subscribeToShardEvent_childShards :: Lens' SubscribeToShardEvent (Maybe [ChildShard])

subscribeToShardEvent_records :: Lens' SubscribeToShardEvent [Record]

-- | Use this as <tt>SequenceNumber</tt> in the next call to
--   SubscribeToShard, with <tt>StartingPosition</tt> set to
--   <tt>AT_SEQUENCE_NUMBER</tt> or <tt>AFTER_SEQUENCE_NUMBER</tt>. Use
--   <tt>ContinuationSequenceNumber</tt> for checkpointing because it
--   captures your shard progress even when no data is written to the
--   shard.
subscribeToShardEvent_continuationSequenceNumber :: Lens' SubscribeToShardEvent Text

-- | The number of milliseconds the read records are from the tip of the
--   stream, indicating how far behind current time the consumer is. A
--   value of zero indicates that record processing is caught up, and there
--   are no new records to process at this moment.
subscribeToShardEvent_millisBehindLatest :: Lens' SubscribeToShardEvent Natural

-- | An optional string, typically used to describe or define the tag.
--   Maximum length: 256 characters. Valid characters: Unicode letters,
--   digits, white space, _ . / = + - % @
tag_value :: Lens' Tag (Maybe Text)

-- | A unique identifier for the tag. Maximum length: 128 characters. Valid
--   characters: Unicode letters, digits, white space, _ . / = + - % @
tag_key :: Lens' Tag Text


module Amazonka.Kinesis.Waiters

-- | Polls <a>DescribeStream</a> every 10 seconds until a successful state
--   is reached. An error is returned after 18 failed checks.
newStreamExists :: Wait DescribeStream

-- | Polls <a>DescribeStream</a> every 10 seconds until a successful state
--   is reached. An error is returned after 18 failed checks.
newStreamNotExists :: Wait DescribeStream


-- | Derived from API version <tt>2013-12-02</tt> of the AWS service
--   descriptions, licensed under Apache 2.0.
--   
--   Amazon Kinesis Data Streams Service API Reference
--   
--   Amazon Kinesis Data Streams is a managed service that scales
--   elastically for real-time processing of streaming big data.
module Amazonka.Kinesis

-- | API version <tt>2013-12-02</tt> of the Amazon Kinesis SDK
--   configuration.
defaultService :: Service

-- | The request was rejected because the state of the specified resource
--   isn't valid for this request. For more information, see <a>How Key
--   State Affects Use of a Customer Master Key</a> in the <i>AWS Key
--   Management Service Developer Guide</i>.
_KMSInvalidStateException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was denied due to request throttling. For more information
--   about throttling, see <a>Limits</a> in the <i>AWS Key Management
--   Service Developer Guide</i>.
_KMSThrottlingException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The provided iterator exceeds the maximum age allowed.
_ExpiredIteratorException :: AsError a => Getting (First ServiceError) a ServiceError

-- | A specified parameter exceeds its restrictions, is not supported, or
--   can't be used. For more information, see the returned message.
_InvalidArgumentException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The AWS access key ID needs a subscription for the service.
_KMSOptInRequired :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request rate for the stream is too high, or the requested data is
--   too large for the available throughput. Reduce the frequency or size
--   of your requests. For more information, see <a>Streams Limits</a> in
--   the <i>Amazon Kinesis Data Streams Developer Guide</i>, and <a>Error
--   Retries and Exponential Backoff in AWS</a> in the <i>AWS General
--   Reference</i>.
_ProvisionedThroughputExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the specified entity or resource
--   can't be found.
_KMSNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The pagination token passed to the operation is expired.
_ExpiredNextTokenException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the specified customer master key
--   (CMK) isn't enabled.
_KMSDisabledException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The processing of the request failed because of an unknown error,
--   exception, or failure.
_InternalFailureException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The requested resource could not be found. The stream might not be
--   specified correctly.
_ResourceNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The ciphertext references a key that doesn't exist or that you don't
--   have access to.
_KMSAccessDeniedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The requested resource exceeds the maximum number allowed, or the
--   number of concurrent stream requests exceeds the maximum number
--   allowed.
_LimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The resource is not available for this operation. For successful
--   operation, the resource must be in the <tt>ACTIVE</tt> state.
_ResourceInUseException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Polls <a>DescribeStream</a> every 10 seconds until a successful state
--   is reached. An error is returned after 18 failed checks.
newStreamExists :: Wait DescribeStream

-- | Polls <a>DescribeStream</a> every 10 seconds until a successful state
--   is reached. An error is returned after 18 failed checks.
newStreamNotExists :: Wait DescribeStream

-- | Represents the input for <tt>PutRecord</tt>.
--   
--   <i>See:</i> <a>newPutRecord</a> smart constructor.
data PutRecord
PutRecord' :: Maybe Text -> Maybe Text -> Text -> Base64 -> Text -> PutRecord

-- | Create a value of <a>PutRecord</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:explicitHashKey:PutRecord'</a>,
--   <a>putRecord_explicitHashKey</a> - The hash value used to explicitly
--   determine the shard the data record is assigned to by overriding the
--   partition key hash.
--   
--   <a>$sel:sequenceNumberForOrdering:PutRecord'</a>,
--   <a>putRecord_sequenceNumberForOrdering</a> - Guarantees strictly
--   increasing sequence numbers, for puts from the same client and to the
--   same partition key. Usage: set the <tt>SequenceNumberForOrdering</tt>
--   of record <i>n</i> to the sequence number of record <i>n-1</i> (as
--   returned in the result when putting record <i>n-1</i>). If this
--   parameter is not set, records are coarsely ordered based on arrival
--   time.
--   
--   <a>$sel:streamName:PutRecord'</a>, <a>putRecord_streamName</a> - The
--   name of the stream to put the data record into.
--   
--   <a>$sel:data':PutRecord'</a>, <a>putRecord_data</a> - The data blob to
--   put into the record, which is base64-encoded when the blob is
--   serialized. When the data blob (the payload before base64-encoding) is
--   added to the partition key size, the total size must not exceed the
--   maximum record size (1 MiB).-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
--   
--   <a>$sel:partitionKey:PutRecord'</a>, <a>putRecord_partitionKey</a> -
--   Determines which shard in the stream the data record is assigned to.
--   Partition keys are Unicode strings with a maximum length limit of 256
--   characters for each key. Amazon Kinesis Data Streams uses the
--   partition key as input to a hash function that maps the partition key
--   and associated data to a specific shard. Specifically, an MD5 hash
--   function is used to map partition keys to 128-bit integer values and
--   to map associated data records to shards. As a result of this hashing
--   mechanism, all data records with the same partition key map to the
--   same shard within the stream.
newPutRecord :: Text -> ByteString -> Text -> PutRecord

-- | Represents the output for <tt>PutRecord</tt>.
--   
--   <i>See:</i> <a>newPutRecordResponse</a> smart constructor.
data PutRecordResponse
PutRecordResponse' :: Maybe EncryptionType -> Int -> Text -> Text -> PutRecordResponse

-- | Create a value of <a>PutRecordResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:encryptionType:PutRecordResponse'</a>,
--   <a>putRecordResponse_encryptionType</a> - The encryption type to use
--   on the record. This parameter can be one of the following values:
--   
--   <ul>
--   <li><tt>NONE</tt>: Do not encrypt the records in the stream.</li>
--   <li><tt>KMS</tt>: Use server-side encryption on the records in the
--   stream using a customer-managed AWS KMS key.</li>
--   </ul>
--   
--   <a>$sel:httpStatus:PutRecordResponse'</a>,
--   <a>putRecordResponse_httpStatus</a> - The response's http status code.
--   
--   <a>$sel:shardId:PutRecordResponse'</a>,
--   <a>putRecordResponse_shardId</a> - The shard ID of the shard where the
--   data record was placed.
--   
--   <a>$sel:sequenceNumber:PutRecordResponse'</a>,
--   <a>putRecordResponse_sequenceNumber</a> - The sequence number
--   identifier that was assigned to the put data record. The sequence
--   number for the record is unique across all records in the stream. A
--   sequence number is the identifier associated with every record put
--   into the stream.
newPutRecordResponse :: Int -> Text -> Text -> PutRecordResponse

-- | <i>See:</i> <a>newSubscribeToShard</a> smart constructor.
data SubscribeToShard
SubscribeToShard' :: Text -> Text -> StartingPosition -> SubscribeToShard

-- | Create a value of <a>SubscribeToShard</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:consumerARN:SubscribeToShard'</a>,
--   <a>subscribeToShard_consumerARN</a> - For this parameter, use the
--   value you obtained when you called RegisterStreamConsumer.
--   
--   <a>$sel:shardId:SubscribeToShard'</a>, <a>subscribeToShard_shardId</a>
--   - The ID of the shard you want to subscribe to. To see a list of all
--   the shards for a given stream, use ListShards.
--   
--   <a>$sel:startingPosition:SubscribeToShard'</a>,
--   <a>subscribeToShard_startingPosition</a> -
newSubscribeToShard :: Text -> Text -> StartingPosition -> SubscribeToShard

-- | <i>See:</i> <a>newSubscribeToShardResponse</a> smart constructor.
data SubscribeToShardResponse
SubscribeToShardResponse' :: Int -> Value -> SubscribeToShardResponse

-- | Create a value of <a>SubscribeToShardResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:SubscribeToShardResponse'</a>,
--   <a>subscribeToShardResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:eventStream:SubscribeToShardResponse'</a>,
--   <a>subscribeToShardResponse_eventStream</a> - The event stream that
--   your consumer can use to read records from the shard.
newSubscribeToShardResponse :: Int -> Value -> SubscribeToShardResponse

-- | Represents the input for DecreaseStreamRetentionPeriod.
--   
--   <i>See:</i> <a>newDecreaseStreamRetentionPeriod</a> smart constructor.
data DecreaseStreamRetentionPeriod
DecreaseStreamRetentionPeriod' :: Text -> Int -> DecreaseStreamRetentionPeriod

-- | Create a value of <a>DecreaseStreamRetentionPeriod</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamName:DecreaseStreamRetentionPeriod'</a>,
--   <a>decreaseStreamRetentionPeriod_streamName</a> - The name of the
--   stream to modify.
--   
--   <a>$sel:retentionPeriodHours:DecreaseStreamRetentionPeriod'</a>,
--   <a>decreaseStreamRetentionPeriod_retentionPeriodHours</a> - The new
--   retention period of the stream, in hours. Must be less than the
--   current retention period.
newDecreaseStreamRetentionPeriod :: Text -> Int -> DecreaseStreamRetentionPeriod

-- | <i>See:</i> <a>newDecreaseStreamRetentionPeriodResponse</a> smart
--   constructor.
data DecreaseStreamRetentionPeriodResponse
DecreaseStreamRetentionPeriodResponse' :: DecreaseStreamRetentionPeriodResponse

-- | Create a value of <a>DecreaseStreamRetentionPeriodResponse</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newDecreaseStreamRetentionPeriodResponse :: DecreaseStreamRetentionPeriodResponse

-- | Represents the input for <tt>MergeShards</tt>.
--   
--   <i>See:</i> <a>newMergeShards</a> smart constructor.
data MergeShards
MergeShards' :: Text -> Text -> Text -> MergeShards

-- | Create a value of <a>MergeShards</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamName:MergeShards'</a>, <a>mergeShards_streamName</a> -
--   The name of the stream for the merge.
--   
--   <a>$sel:shardToMerge:MergeShards'</a>, <a>mergeShards_shardToMerge</a>
--   - The shard ID of the shard to combine with the adjacent shard for the
--   merge.
--   
--   <a>$sel:adjacentShardToMerge:MergeShards'</a>,
--   <a>mergeShards_adjacentShardToMerge</a> - The shard ID of the adjacent
--   shard for the merge.
newMergeShards :: Text -> Text -> Text -> MergeShards

-- | <i>See:</i> <a>newMergeShardsResponse</a> smart constructor.
data MergeShardsResponse
MergeShardsResponse' :: MergeShardsResponse

-- | Create a value of <a>MergeShardsResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newMergeShardsResponse :: MergeShardsResponse

-- | <i>See:</i> <a>newDeregisterStreamConsumer</a> smart constructor.
data DeregisterStreamConsumer
DeregisterStreamConsumer' :: Maybe Text -> Maybe Text -> Maybe Text -> DeregisterStreamConsumer

-- | Create a value of <a>DeregisterStreamConsumer</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:consumerARN:DeregisterStreamConsumer'</a>,
--   <a>deregisterStreamConsumer_consumerARN</a> - The ARN returned by
--   Kinesis Data Streams when you registered the consumer. If you don't
--   know the ARN of the consumer that you want to deregister, you can use
--   the ListStreamConsumers operation to get a list of the descriptions of
--   all the consumers that are currently registered with a given data
--   stream. The description of a consumer contains its ARN.
--   
--   <a>$sel:streamARN:DeregisterStreamConsumer'</a>,
--   <a>deregisterStreamConsumer_streamARN</a> - The ARN of the Kinesis
--   data stream that the consumer is registered with. For more
--   information, see <a>Amazon Resource Names (ARNs) and AWS Service
--   Namespaces</a>.
--   
--   <a>$sel:consumerName:DeregisterStreamConsumer'</a>,
--   <a>deregisterStreamConsumer_consumerName</a> - The name that you gave
--   to the consumer.
newDeregisterStreamConsumer :: DeregisterStreamConsumer

-- | <i>See:</i> <a>newDeregisterStreamConsumerResponse</a> smart
--   constructor.
data DeregisterStreamConsumerResponse
DeregisterStreamConsumerResponse' :: DeregisterStreamConsumerResponse

-- | Create a value of <a>DeregisterStreamConsumerResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newDeregisterStreamConsumerResponse :: DeregisterStreamConsumerResponse

-- | <i>See:</i> <a>newDescribeStreamSummary</a> smart constructor.
data DescribeStreamSummary
DescribeStreamSummary' :: Text -> DescribeStreamSummary

-- | Create a value of <a>DescribeStreamSummary</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamName:DescribeStreamSummary'</a>,
--   <a>describeStreamSummary_streamName</a> - The name of the stream to
--   describe.
newDescribeStreamSummary :: Text -> DescribeStreamSummary

-- | <i>See:</i> <a>newDescribeStreamSummaryResponse</a> smart constructor.
data DescribeStreamSummaryResponse
DescribeStreamSummaryResponse' :: Int -> StreamDescriptionSummary -> DescribeStreamSummaryResponse

-- | Create a value of <a>DescribeStreamSummaryResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DescribeStreamSummaryResponse'</a>,
--   <a>describeStreamSummaryResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:streamDescriptionSummary:DescribeStreamSummaryResponse'</a>,
--   <a>describeStreamSummaryResponse_streamDescriptionSummary</a> - A
--   StreamDescriptionSummary containing information about the stream.
newDescribeStreamSummaryResponse :: Int -> StreamDescriptionSummary -> DescribeStreamSummaryResponse

-- | Represents the input for <tt>GetShardIterator</tt>.
--   
--   <i>See:</i> <a>newGetShardIterator</a> smart constructor.
data GetShardIterator
GetShardIterator' :: Maybe Text -> Maybe POSIX -> Text -> Text -> ShardIteratorType -> GetShardIterator

-- | Create a value of <a>GetShardIterator</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:startingSequenceNumber:GetShardIterator'</a>,
--   <a>getShardIterator_startingSequenceNumber</a> - The sequence number
--   of the data record in the shard from which to start reading. Used with
--   shard iterator type AT_SEQUENCE_NUMBER and AFTER_SEQUENCE_NUMBER.
--   
--   <a>$sel:timestamp:GetShardIterator'</a>,
--   <a>getShardIterator_timestamp</a> - The time stamp of the data record
--   from which to start reading. Used with shard iterator type
--   AT_TIMESTAMP. A time stamp is the Unix epoch date with precision in
--   milliseconds. For example, <tt>2016-04-04T19:58:46.480-00:00</tt> or
--   <tt>1459799926.480</tt>. If a record with this exact time stamp does
--   not exist, the iterator returned is for the next (later) record. If
--   the time stamp is older than the current trim horizon, the iterator
--   returned is for the oldest untrimmed data record (TRIM_HORIZON).
--   
--   <a>$sel:streamName:GetShardIterator'</a>,
--   <a>getShardIterator_streamName</a> - The name of the Amazon Kinesis
--   data stream.
--   
--   <a>$sel:shardId:GetShardIterator'</a>, <a>getShardIterator_shardId</a>
--   - The shard ID of the Kinesis Data Streams shard to get the iterator
--   for.
--   
--   <a>$sel:shardIteratorType:GetShardIterator'</a>,
--   <a>getShardIterator_shardIteratorType</a> - Determines how the shard
--   iterator is used to start reading data records from the shard.
--   
--   The following are the valid Amazon Kinesis shard iterator types:
--   
--   <ul>
--   <li>AT_SEQUENCE_NUMBER - Start reading from the position denoted by a
--   specific sequence number, provided in the value
--   <tt>StartingSequenceNumber</tt>.</li>
--   <li>AFTER_SEQUENCE_NUMBER - Start reading right after the position
--   denoted by a specific sequence number, provided in the value
--   <tt>StartingSequenceNumber</tt>.</li>
--   <li>AT_TIMESTAMP - Start reading from the position denoted by a
--   specific time stamp, provided in the value <tt>Timestamp</tt>.</li>
--   <li>TRIM_HORIZON - Start reading at the last untrimmed record in the
--   shard in the system, which is the oldest data record in the
--   shard.</li>
--   <li>LATEST - Start reading just after the most recent record in the
--   shard, so that you always read the most recent data in the shard.</li>
--   </ul>
newGetShardIterator :: Text -> Text -> ShardIteratorType -> GetShardIterator

-- | Represents the output for <tt>GetShardIterator</tt>.
--   
--   <i>See:</i> <a>newGetShardIteratorResponse</a> smart constructor.
data GetShardIteratorResponse
GetShardIteratorResponse' :: Maybe Text -> Int -> GetShardIteratorResponse

-- | Create a value of <a>GetShardIteratorResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:shardIterator:GetShardIteratorResponse'</a>,
--   <a>getShardIteratorResponse_shardIterator</a> - The position in the
--   shard from which to start reading data records sequentially. A shard
--   iterator specifies this position using the sequence number of a data
--   record in a shard.
--   
--   <a>$sel:httpStatus:GetShardIteratorResponse'</a>,
--   <a>getShardIteratorResponse_httpStatus</a> - The response's http
--   status code.
newGetShardIteratorResponse :: Int -> GetShardIteratorResponse

-- | Represents the input for GetRecords.
--   
--   <i>See:</i> <a>newGetRecords</a> smart constructor.
data GetRecords
GetRecords' :: Maybe Natural -> Text -> GetRecords

-- | Create a value of <a>GetRecords</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:limit:GetRecords'</a>, <a>getRecords_limit</a> - The maximum
--   number of records to return. Specify a value of up to 10,000. If you
--   specify a value that is greater than 10,000, GetRecords throws
--   <tt>InvalidArgumentException</tt>. The default value is 10,000.
--   
--   <a>$sel:shardIterator:GetRecords'</a>, <a>getRecords_shardIterator</a>
--   - The position in the shard from which you want to start sequentially
--   reading data records. A shard iterator specifies this position using
--   the sequence number of a data record in the shard.
newGetRecords :: Text -> GetRecords

-- | Represents the output for GetRecords.
--   
--   <i>See:</i> <a>newGetRecordsResponse</a> smart constructor.
data GetRecordsResponse
GetRecordsResponse' :: Maybe Text -> Maybe Natural -> Maybe [ChildShard] -> Int -> [Record] -> GetRecordsResponse

-- | Create a value of <a>GetRecordsResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextShardIterator:GetRecordsResponse'</a>,
--   <a>getRecordsResponse_nextShardIterator</a> - The next position in the
--   shard from which to start sequentially reading data records. If set to
--   <tt>null</tt>, the shard has been closed and the requested iterator
--   does not return any more data.
--   
--   <a>$sel:millisBehindLatest:GetRecordsResponse'</a>,
--   <a>getRecordsResponse_millisBehindLatest</a> - The number of
--   milliseconds the GetRecords response is from the tip of the stream,
--   indicating how far behind current time the consumer is. A value of
--   zero indicates that record processing is caught up, and there are no
--   new records to process at this moment.
--   
--   <a>$sel:childShards:GetRecordsResponse'</a>,
--   <a>getRecordsResponse_childShards</a> - Undocumented member.
--   
--   <a>$sel:httpStatus:GetRecordsResponse'</a>,
--   <a>getRecordsResponse_httpStatus</a> - The response's http status
--   code.
--   
--   <a>$sel:records:GetRecordsResponse'</a>,
--   <a>getRecordsResponse_records</a> - The data records retrieved from
--   the shard.
newGetRecordsResponse :: Int -> GetRecordsResponse

-- | <i>See:</i> <a>newStopStreamEncryption</a> smart constructor.
data StopStreamEncryption
StopStreamEncryption' :: Text -> EncryptionType -> Text -> StopStreamEncryption

-- | Create a value of <a>StopStreamEncryption</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamName:StopStreamEncryption'</a>,
--   <a>stopStreamEncryption_streamName</a> - The name of the stream on
--   which to stop encrypting records.
--   
--   <a>$sel:encryptionType:StopStreamEncryption'</a>,
--   <a>stopStreamEncryption_encryptionType</a> - The encryption type. The
--   only valid value is <tt>KMS</tt>.
--   
--   <a>$sel:keyId:StopStreamEncryption'</a>,
--   <a>stopStreamEncryption_keyId</a> - The GUID for the customer-managed
--   AWS KMS key to use for encryption. This value can be a globally unique
--   identifier, a fully specified Amazon Resource Name (ARN) to either an
--   alias or a key, or an alias name prefixed by "alias/".You can also use
--   a master key owned by Kinesis Data Streams by specifying the alias
--   <tt>aws/kinesis</tt>.
--   
--   <ul>
--   <li>Key ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:alias/MyAliasName</tt></li>
--   <li>Globally unique key ID example:
--   <tt>12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias name example: <tt>alias/MyAliasName</tt></li>
--   <li>Master key owned by Kinesis Data Streams:
--   <tt>alias/aws/kinesis</tt></li>
--   </ul>
newStopStreamEncryption :: Text -> EncryptionType -> Text -> StopStreamEncryption

-- | <i>See:</i> <a>newStopStreamEncryptionResponse</a> smart constructor.
data StopStreamEncryptionResponse
StopStreamEncryptionResponse' :: StopStreamEncryptionResponse

-- | Create a value of <a>StopStreamEncryptionResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newStopStreamEncryptionResponse :: StopStreamEncryptionResponse

-- | Represents the input for EnableEnhancedMonitoring.
--   
--   <i>See:</i> <a>newEnableEnhancedMonitoring</a> smart constructor.
data EnableEnhancedMonitoring
EnableEnhancedMonitoring' :: Text -> [MetricsName] -> EnableEnhancedMonitoring

-- | Create a value of <a>EnableEnhancedMonitoring</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamName:EnableEnhancedMonitoring'</a>,
--   <a>enableEnhancedMonitoring_streamName</a> - The name of the stream
--   for which to enable enhanced monitoring.
--   
--   <a>$sel:shardLevelMetrics:EnableEnhancedMonitoring'</a>,
--   <a>enableEnhancedMonitoring_shardLevelMetrics</a> - List of
--   shard-level metrics to enable.
--   
--   The following are the valid shard-level metrics. The value
--   "<tt>ALL</tt>" enables every metric.
--   
--   <ul>
--   <li><pre>IncomingBytes</pre></li>
--   <li><pre>IncomingRecords</pre></li>
--   <li><pre>OutgoingBytes</pre></li>
--   <li><pre>OutgoingRecords</pre></li>
--   <li><pre>WriteProvisionedThroughputExceeded</pre></li>
--   <li><pre>ReadProvisionedThroughputExceeded</pre></li>
--   <li><pre>IteratorAgeMilliseconds</pre></li>
--   <li><pre>ALL</pre></li>
--   </ul>
--   
--   For more information, see <a>Monitoring the Amazon Kinesis Data
--   Streams Service with Amazon CloudWatch</a> in the <i>Amazon Kinesis
--   Data Streams Developer Guide</i>.
newEnableEnhancedMonitoring :: Text -> EnableEnhancedMonitoring

-- | Represents the output for EnableEnhancedMonitoring and
--   DisableEnhancedMonitoring.
--   
--   <i>See:</i> <a>newEnhancedMonitoringOutput</a> smart constructor.
data EnhancedMonitoringOutput
EnhancedMonitoringOutput' :: Maybe [MetricsName] -> Maybe [MetricsName] -> Maybe Text -> EnhancedMonitoringOutput

-- | Create a value of <a>EnhancedMonitoringOutput</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:desiredShardLevelMetrics:EnhancedMonitoringOutput'</a>,
--   <a>enhancedMonitoringOutput_desiredShardLevelMetrics</a> - Represents
--   the list of all the metrics that would be in the enhanced state after
--   the operation.
--   
--   <a>$sel:currentShardLevelMetrics:EnhancedMonitoringOutput'</a>,
--   <a>enhancedMonitoringOutput_currentShardLevelMetrics</a> - Represents
--   the current state of the metrics that are in the enhanced state before
--   the operation.
--   
--   <a>$sel:streamName:EnhancedMonitoringOutput'</a>,
--   <a>enhancedMonitoringOutput_streamName</a> - The name of the Kinesis
--   data stream.
newEnhancedMonitoringOutput :: EnhancedMonitoringOutput

-- | <i>See:</i> <a>newDescribeLimits</a> smart constructor.
data DescribeLimits
DescribeLimits' :: DescribeLimits

-- | Create a value of <a>DescribeLimits</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newDescribeLimits :: DescribeLimits

-- | <i>See:</i> <a>newDescribeLimitsResponse</a> smart constructor.
data DescribeLimitsResponse
DescribeLimitsResponse' :: Int -> Natural -> Natural -> DescribeLimitsResponse

-- | Create a value of <a>DescribeLimitsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DescribeLimitsResponse'</a>,
--   <a>describeLimitsResponse_httpStatus</a> - The response's http status
--   code.
--   
--   <a>$sel:shardLimit:DescribeLimitsResponse'</a>,
--   <a>describeLimitsResponse_shardLimit</a> - The maximum number of
--   shards.
--   
--   <a>$sel:openShardCount:DescribeLimitsResponse'</a>,
--   <a>describeLimitsResponse_openShardCount</a> - The number of open
--   shards.
newDescribeLimitsResponse :: Int -> Natural -> Natural -> DescribeLimitsResponse

-- | <i>See:</i> <a>newRegisterStreamConsumer</a> smart constructor.
data RegisterStreamConsumer
RegisterStreamConsumer' :: Text -> Text -> RegisterStreamConsumer

-- | Create a value of <a>RegisterStreamConsumer</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamARN:RegisterStreamConsumer'</a>,
--   <a>registerStreamConsumer_streamARN</a> - The ARN of the Kinesis data
--   stream that you want to register the consumer with. For more info, see
--   <a>Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.
--   
--   <a>$sel:consumerName:RegisterStreamConsumer'</a>,
--   <a>registerStreamConsumer_consumerName</a> - For a given Kinesis data
--   stream, each consumer must have a unique name. However, consumer names
--   don't have to be unique across data streams.
newRegisterStreamConsumer :: Text -> Text -> RegisterStreamConsumer

-- | <i>See:</i> <a>newRegisterStreamConsumerResponse</a> smart
--   constructor.
data RegisterStreamConsumerResponse
RegisterStreamConsumerResponse' :: Int -> Consumer -> RegisterStreamConsumerResponse

-- | Create a value of <a>RegisterStreamConsumerResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:RegisterStreamConsumerResponse'</a>,
--   <a>registerStreamConsumerResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:consumer:RegisterStreamConsumerResponse'</a>,
--   <a>registerStreamConsumerResponse_consumer</a> - An object that
--   represents the details of the consumer you registered. When you
--   register a consumer, it gets an ARN that is generated by Kinesis Data
--   Streams.
newRegisterStreamConsumerResponse :: Int -> Consumer -> RegisterStreamConsumerResponse

-- | Represents the input for DisableEnhancedMonitoring.
--   
--   <i>See:</i> <a>newDisableEnhancedMonitoring</a> smart constructor.
data DisableEnhancedMonitoring
DisableEnhancedMonitoring' :: Text -> [MetricsName] -> DisableEnhancedMonitoring

-- | Create a value of <a>DisableEnhancedMonitoring</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamName:DisableEnhancedMonitoring'</a>,
--   <a>disableEnhancedMonitoring_streamName</a> - The name of the Kinesis
--   data stream for which to disable enhanced monitoring.
--   
--   <a>$sel:shardLevelMetrics:DisableEnhancedMonitoring'</a>,
--   <a>disableEnhancedMonitoring_shardLevelMetrics</a> - List of
--   shard-level metrics to disable.
--   
--   The following are the valid shard-level metrics. The value
--   "<tt>ALL</tt>" disables every metric.
--   
--   <ul>
--   <li><pre>IncomingBytes</pre></li>
--   <li><pre>IncomingRecords</pre></li>
--   <li><pre>OutgoingBytes</pre></li>
--   <li><pre>OutgoingRecords</pre></li>
--   <li><pre>WriteProvisionedThroughputExceeded</pre></li>
--   <li><pre>ReadProvisionedThroughputExceeded</pre></li>
--   <li><pre>IteratorAgeMilliseconds</pre></li>
--   <li><pre>ALL</pre></li>
--   </ul>
--   
--   For more information, see <a>Monitoring the Amazon Kinesis Data
--   Streams Service with Amazon CloudWatch</a> in the <i>Amazon Kinesis
--   Data Streams Developer Guide</i>.
newDisableEnhancedMonitoring :: Text -> DisableEnhancedMonitoring

-- | Represents the output for EnableEnhancedMonitoring and
--   DisableEnhancedMonitoring.
--   
--   <i>See:</i> <a>newEnhancedMonitoringOutput</a> smart constructor.
data EnhancedMonitoringOutput
EnhancedMonitoringOutput' :: Maybe [MetricsName] -> Maybe [MetricsName] -> Maybe Text -> EnhancedMonitoringOutput

-- | Create a value of <a>EnhancedMonitoringOutput</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:desiredShardLevelMetrics:EnhancedMonitoringOutput'</a>,
--   <a>enhancedMonitoringOutput_desiredShardLevelMetrics</a> - Represents
--   the list of all the metrics that would be in the enhanced state after
--   the operation.
--   
--   <a>$sel:currentShardLevelMetrics:EnhancedMonitoringOutput'</a>,
--   <a>enhancedMonitoringOutput_currentShardLevelMetrics</a> - Represents
--   the current state of the metrics that are in the enhanced state before
--   the operation.
--   
--   <a>$sel:streamName:EnhancedMonitoringOutput'</a>,
--   <a>enhancedMonitoringOutput_streamName</a> - The name of the Kinesis
--   data stream.
newEnhancedMonitoringOutput :: EnhancedMonitoringOutput

-- | <i>See:</i> <a>newUpdateShardCount</a> smart constructor.
data UpdateShardCount
UpdateShardCount' :: Text -> Natural -> ScalingType -> UpdateShardCount

-- | Create a value of <a>UpdateShardCount</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamName:UpdateShardCount'</a>,
--   <a>updateShardCount_streamName</a> - The name of the stream.
--   
--   <a>$sel:targetShardCount:UpdateShardCount'</a>,
--   <a>updateShardCount_targetShardCount</a> - The new number of shards.
--   This value has the following default limits. By default, you cannot do
--   the following:
--   
--   <ul>
--   <li>Set this value to more than double your current shard count for a
--   stream.</li>
--   <li>Set this value below half your current shard count for a
--   stream.</li>
--   <li>Set this value to more than 500 shards in a stream (the default
--   limit for shard count per stream is 500 per account per region),
--   unless you request a limit increase.</li>
--   <li>Scale a stream with more than 500 shards down unless you set this
--   value to less than 500 shards.</li>
--   </ul>
--   
--   <a>$sel:scalingType:UpdateShardCount'</a>,
--   <a>updateShardCount_scalingType</a> - The scaling type. Uniform
--   scaling creates shards of equal size.
newUpdateShardCount :: Text -> Natural -> ScalingType -> UpdateShardCount

-- | <i>See:</i> <a>newUpdateShardCountResponse</a> smart constructor.
data UpdateShardCountResponse
UpdateShardCountResponse' :: Maybe Natural -> Maybe Text -> Maybe Natural -> Int -> UpdateShardCountResponse

-- | Create a value of <a>UpdateShardCountResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:targetShardCount:UpdateShardCount'</a>,
--   <a>updateShardCountResponse_targetShardCount</a> - The updated number
--   of shards.
--   
--   <a>$sel:streamName:UpdateShardCount'</a>,
--   <a>updateShardCountResponse_streamName</a> - The name of the stream.
--   
--   <a>$sel:currentShardCount:UpdateShardCountResponse'</a>,
--   <a>updateShardCountResponse_currentShardCount</a> - The current number
--   of shards.
--   
--   <a>$sel:httpStatus:UpdateShardCountResponse'</a>,
--   <a>updateShardCountResponse_httpStatus</a> - The response's http
--   status code.
newUpdateShardCountResponse :: Int -> UpdateShardCountResponse

-- | Represents the input for <tt>ListTagsForStream</tt>.
--   
--   <i>See:</i> <a>newListTagsForStream</a> smart constructor.
data ListTagsForStream
ListTagsForStream' :: Maybe Natural -> Maybe Text -> Text -> ListTagsForStream

-- | Create a value of <a>ListTagsForStream</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:limit:ListTagsForStream'</a>, <a>listTagsForStream_limit</a> -
--   The number of tags to return. If this number is less than the total
--   number of tags associated with the stream, <tt>HasMoreTags</tt> is set
--   to <tt>true</tt>. To list additional tags, set
--   <tt>ExclusiveStartTagKey</tt> to the last key in the response.
--   
--   <a>$sel:exclusiveStartTagKey:ListTagsForStream'</a>,
--   <a>listTagsForStream_exclusiveStartTagKey</a> - The key to use as the
--   starting point for the list of tags. If this parameter is set,
--   <tt>ListTagsForStream</tt> gets all tags that occur after
--   <tt>ExclusiveStartTagKey</tt>.
--   
--   <a>$sel:streamName:ListTagsForStream'</a>,
--   <a>listTagsForStream_streamName</a> - The name of the stream.
newListTagsForStream :: Text -> ListTagsForStream

-- | Represents the output for <tt>ListTagsForStream</tt>.
--   
--   <i>See:</i> <a>newListTagsForStreamResponse</a> smart constructor.
data ListTagsForStreamResponse
ListTagsForStreamResponse' :: Int -> [Tag] -> Bool -> ListTagsForStreamResponse

-- | Create a value of <a>ListTagsForStreamResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:ListTagsForStreamResponse'</a>,
--   <a>listTagsForStreamResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:tags:ListTagsForStreamResponse'</a>,
--   <a>listTagsForStreamResponse_tags</a> - A list of tags associated with
--   <tt>StreamName</tt>, starting with the first tag after
--   <tt>ExclusiveStartTagKey</tt> and up to the specified <tt>Limit</tt>.
--   
--   <a>$sel:hasMoreTags:ListTagsForStreamResponse'</a>,
--   <a>listTagsForStreamResponse_hasMoreTags</a> - If set to
--   <tt>true</tt>, more tags are available. To request additional tags,
--   set <tt>ExclusiveStartTagKey</tt> to the key of the last tag returned.
newListTagsForStreamResponse :: Int -> Bool -> ListTagsForStreamResponse

-- | <i>See:</i> <a>newDescribeStreamConsumer</a> smart constructor.
data DescribeStreamConsumer
DescribeStreamConsumer' :: Maybe Text -> Maybe Text -> Maybe Text -> DescribeStreamConsumer

-- | Create a value of <a>DescribeStreamConsumer</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:consumerARN:DescribeStreamConsumer'</a>,
--   <a>describeStreamConsumer_consumerARN</a> - The ARN returned by
--   Kinesis Data Streams when you registered the consumer.
--   
--   <a>$sel:streamARN:DescribeStreamConsumer'</a>,
--   <a>describeStreamConsumer_streamARN</a> - The ARN of the Kinesis data
--   stream that the consumer is registered with. For more information, see
--   <a>Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.
--   
--   <a>$sel:consumerName:DescribeStreamConsumer'</a>,
--   <a>describeStreamConsumer_consumerName</a> - The name that you gave to
--   the consumer.
newDescribeStreamConsumer :: DescribeStreamConsumer

-- | <i>See:</i> <a>newDescribeStreamConsumerResponse</a> smart
--   constructor.
data DescribeStreamConsumerResponse
DescribeStreamConsumerResponse' :: Int -> ConsumerDescription -> DescribeStreamConsumerResponse

-- | Create a value of <a>DescribeStreamConsumerResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DescribeStreamConsumerResponse'</a>,
--   <a>describeStreamConsumerResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:consumerDescription:DescribeStreamConsumerResponse'</a>,
--   <a>describeStreamConsumerResponse_consumerDescription</a> - An object
--   that represents the details of the consumer.
newDescribeStreamConsumerResponse :: Int -> ConsumerDescription -> DescribeStreamConsumerResponse

-- | Represents the input for <tt>AddTagsToStream</tt>.
--   
--   <i>See:</i> <a>newAddTagsToStream</a> smart constructor.
data AddTagsToStream
AddTagsToStream' :: Text -> HashMap Text Text -> AddTagsToStream

-- | Create a value of <a>AddTagsToStream</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamName:AddTagsToStream'</a>,
--   <a>addTagsToStream_streamName</a> - The name of the stream.
--   
--   <a>$sel:tags:AddTagsToStream'</a>, <a>addTagsToStream_tags</a> - A set
--   of up to 10 key-value pairs to use to create the tags.
newAddTagsToStream :: Text -> AddTagsToStream

-- | <i>See:</i> <a>newAddTagsToStreamResponse</a> smart constructor.
data AddTagsToStreamResponse
AddTagsToStreamResponse' :: AddTagsToStreamResponse

-- | Create a value of <a>AddTagsToStreamResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newAddTagsToStreamResponse :: AddTagsToStreamResponse

-- | A <tt>PutRecords</tt> request.
--   
--   <i>See:</i> <a>newPutRecords</a> smart constructor.
data PutRecords
PutRecords' :: NonEmpty PutRecordsRequestEntry -> Text -> PutRecords

-- | Create a value of <a>PutRecords</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:records:PutRecords'</a>, <a>putRecords_records</a> - The
--   records associated with the request.
--   
--   <a>$sel:streamName:PutRecords'</a>, <a>putRecords_streamName</a> - The
--   stream name associated with the request.
newPutRecords :: NonEmpty PutRecordsRequestEntry -> Text -> PutRecords

-- | <tt>PutRecords</tt> results.
--   
--   <i>See:</i> <a>newPutRecordsResponse</a> smart constructor.
data PutRecordsResponse
PutRecordsResponse' :: Maybe EncryptionType -> Maybe Natural -> Int -> NonEmpty PutRecordsResultEntry -> PutRecordsResponse

-- | Create a value of <a>PutRecordsResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:encryptionType:PutRecordsResponse'</a>,
--   <a>putRecordsResponse_encryptionType</a> - The encryption type used on
--   the records. This parameter can be one of the following values:
--   
--   <ul>
--   <li><tt>NONE</tt>: Do not encrypt the records.</li>
--   <li><tt>KMS</tt>: Use server-side encryption on the records using a
--   customer-managed AWS KMS key.</li>
--   </ul>
--   
--   <a>$sel:failedRecordCount:PutRecordsResponse'</a>,
--   <a>putRecordsResponse_failedRecordCount</a> - The number of
--   unsuccessfully processed records in a <tt>PutRecords</tt> request.
--   
--   <a>$sel:httpStatus:PutRecordsResponse'</a>,
--   <a>putRecordsResponse_httpStatus</a> - The response's http status
--   code.
--   
--   <a>$sel:records:PutRecords'</a>, <a>putRecordsResponse_records</a> -
--   An array of successfully and unsuccessfully processed record results,
--   correlated with the request by natural ordering. A record that is
--   successfully added to a stream includes <tt>SequenceNumber</tt> and
--   <tt>ShardId</tt> in the result. A record that fails to be added to a
--   stream includes <tt>ErrorCode</tt> and <tt>ErrorMessage</tt> in the
--   result.
newPutRecordsResponse :: Int -> NonEmpty PutRecordsResultEntry -> PutRecordsResponse

-- | <i>See:</i> <a>newListShards</a> smart constructor.
data ListShards
ListShards' :: Maybe ShardFilter -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe Natural -> ListShards

-- | Create a value of <a>ListShards</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:shardFilter:ListShards'</a>, <a>listShards_shardFilter</a> -
--   Undocumented member.
--   
--   <a>$sel:nextToken:ListShards'</a>, <a>listShards_nextToken</a> - When
--   the number of shards in the data stream is greater than the default
--   value for the <tt>MaxResults</tt> parameter, or if you explicitly
--   specify a value for <tt>MaxResults</tt> that is less than the number
--   of shards in the data stream, the response includes a pagination token
--   named <tt>NextToken</tt>. You can specify this <tt>NextToken</tt>
--   value in a subsequent call to <tt>ListShards</tt> to list the next set
--   of shards.
--   
--   Don't specify <tt>StreamName</tt> or <tt>StreamCreationTimestamp</tt>
--   if you specify <tt>NextToken</tt> because the latter unambiguously
--   identifies the stream.
--   
--   You can optionally specify a value for the <tt>MaxResults</tt>
--   parameter when you specify <tt>NextToken</tt>. If you specify a
--   <tt>MaxResults</tt> value that is less than the number of shards that
--   the operation returns if you don't specify <tt>MaxResults</tt>, the
--   response will contain a new <tt>NextToken</tt> value. You can use the
--   new <tt>NextToken</tt> value in a subsequent call to the
--   <tt>ListShards</tt> operation.
--   
--   Tokens expire after 300 seconds. When you obtain a value for
--   <tt>NextToken</tt> in the response to a call to <tt>ListShards</tt>,
--   you have 300 seconds to use that value. If you specify an expired
--   token in a call to <tt>ListShards</tt>, you get
--   <tt>ExpiredNextTokenException</tt>.
--   
--   <a>$sel:exclusiveStartShardId:ListShards'</a>,
--   <a>listShards_exclusiveStartShardId</a> - Specify this parameter to
--   indicate that you want to list the shards starting with the shard
--   whose ID immediately follows <tt>ExclusiveStartShardId</tt>.
--   
--   If you don't specify this parameter, the default behavior is for
--   <tt>ListShards</tt> to list the shards starting with the first one in
--   the stream.
--   
--   You cannot specify this parameter if you specify <tt>NextToken</tt>.
--   
--   <a>$sel:streamCreationTimestamp:ListShards'</a>,
--   <a>listShards_streamCreationTimestamp</a> - Specify this input
--   parameter to distinguish data streams that have the same name. For
--   example, if you create a data stream and then delete it, and you later
--   create another data stream with the same name, you can use this input
--   parameter to specify which of the two streams you want to list the
--   shards for.
--   
--   You cannot specify this parameter if you specify the
--   <tt>NextToken</tt> parameter.
--   
--   <a>$sel:streamName:ListShards'</a>, <a>listShards_streamName</a> - The
--   name of the data stream whose shards you want to list.
--   
--   You cannot specify this parameter if you specify the
--   <tt>NextToken</tt> parameter.
--   
--   <a>$sel:maxResults:ListShards'</a>, <a>listShards_maxResults</a> - The
--   maximum number of shards to return in a single call to
--   <tt>ListShards</tt>. The minimum value you can specify for this
--   parameter is 1, and the maximum is 10,000, which is also the default.
--   
--   When the number of shards to be listed is greater than the value of
--   <tt>MaxResults</tt>, the response contains a <tt>NextToken</tt> value
--   that you can use in a subsequent call to <tt>ListShards</tt> to list
--   the next set of shards.
newListShards :: ListShards

-- | <i>See:</i> <a>newListShardsResponse</a> smart constructor.
data ListShardsResponse
ListShardsResponse' :: Maybe Text -> Maybe [Shard] -> Int -> ListShardsResponse

-- | Create a value of <a>ListShardsResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListShards'</a>, <a>listShardsResponse_nextToken</a>
--   - When the number of shards in the data stream is greater than the
--   default value for the <tt>MaxResults</tt> parameter, or if you
--   explicitly specify a value for <tt>MaxResults</tt> that is less than
--   the number of shards in the data stream, the response includes a
--   pagination token named <tt>NextToken</tt>. You can specify this
--   <tt>NextToken</tt> value in a subsequent call to <tt>ListShards</tt>
--   to list the next set of shards. For more information about the use of
--   this pagination token when calling the <tt>ListShards</tt> operation,
--   see ListShardsInput$NextToken.
--   
--   Tokens expire after 300 seconds. When you obtain a value for
--   <tt>NextToken</tt> in the response to a call to <tt>ListShards</tt>,
--   you have 300 seconds to use that value. If you specify an expired
--   token in a call to <tt>ListShards</tt>, you get
--   <tt>ExpiredNextTokenException</tt>.
--   
--   <a>$sel:shards:ListShardsResponse'</a>,
--   <a>listShardsResponse_shards</a> - An array of JSON objects. Each
--   object represents one shard and specifies the IDs of the shard, the
--   shard's parent, and the shard that's adjacent to the shard's parent.
--   Each object also contains the starting and ending hash keys and the
--   starting and ending sequence numbers for the shard.
--   
--   <a>$sel:httpStatus:ListShardsResponse'</a>,
--   <a>listShardsResponse_httpStatus</a> - The response's http status
--   code.
newListShardsResponse :: Int -> ListShardsResponse

-- | Represents the input for DeleteStream.
--   
--   <i>See:</i> <a>newDeleteStream</a> smart constructor.
data DeleteStream
DeleteStream' :: Maybe Bool -> Text -> DeleteStream

-- | Create a value of <a>DeleteStream</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:enforceConsumerDeletion:DeleteStream'</a>,
--   <a>deleteStream_enforceConsumerDeletion</a> - If this parameter is
--   unset (<tt>null</tt>) or if you set it to <tt>false</tt>, and the
--   stream has registered consumers, the call to <tt>DeleteStream</tt>
--   fails with a <tt>ResourceInUseException</tt>.
--   
--   <a>$sel:streamName:DeleteStream'</a>, <a>deleteStream_streamName</a> -
--   The name of the stream to delete.
newDeleteStream :: Text -> DeleteStream

-- | <i>See:</i> <a>newDeleteStreamResponse</a> smart constructor.
data DeleteStreamResponse
DeleteStreamResponse' :: DeleteStreamResponse

-- | Create a value of <a>DeleteStreamResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newDeleteStreamResponse :: DeleteStreamResponse

-- | Represents the input for <tt>RemoveTagsFromStream</tt>.
--   
--   <i>See:</i> <a>newRemoveTagsFromStream</a> smart constructor.
data RemoveTagsFromStream
RemoveTagsFromStream' :: Text -> NonEmpty Text -> RemoveTagsFromStream

-- | Create a value of <a>RemoveTagsFromStream</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamName:RemoveTagsFromStream'</a>,
--   <a>removeTagsFromStream_streamName</a> - The name of the stream.
--   
--   <a>$sel:tagKeys:RemoveTagsFromStream'</a>,
--   <a>removeTagsFromStream_tagKeys</a> - A list of tag keys. Each
--   corresponding tag is removed from the stream.
newRemoveTagsFromStream :: Text -> NonEmpty Text -> RemoveTagsFromStream

-- | <i>See:</i> <a>newRemoveTagsFromStreamResponse</a> smart constructor.
data RemoveTagsFromStreamResponse
RemoveTagsFromStreamResponse' :: RemoveTagsFromStreamResponse

-- | Create a value of <a>RemoveTagsFromStreamResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newRemoveTagsFromStreamResponse :: RemoveTagsFromStreamResponse

-- | Represents the input for <tt>ListStreams</tt>.
--   
--   <i>See:</i> <a>newListStreams</a> smart constructor.
data ListStreams
ListStreams' :: Maybe Natural -> Maybe Text -> ListStreams

-- | Create a value of <a>ListStreams</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:limit:ListStreams'</a>, <a>listStreams_limit</a> - The maximum
--   number of streams to list.
--   
--   <a>$sel:exclusiveStartStreamName:ListStreams'</a>,
--   <a>listStreams_exclusiveStartStreamName</a> - The name of the stream
--   to start the list with.
newListStreams :: ListStreams

-- | Represents the output for <tt>ListStreams</tt>.
--   
--   <i>See:</i> <a>newListStreamsResponse</a> smart constructor.
data ListStreamsResponse
ListStreamsResponse' :: Int -> [Text] -> Bool -> ListStreamsResponse

-- | Create a value of <a>ListStreamsResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:ListStreamsResponse'</a>,
--   <a>listStreamsResponse_httpStatus</a> - The response's http status
--   code.
--   
--   <a>$sel:streamNames:ListStreamsResponse'</a>,
--   <a>listStreamsResponse_streamNames</a> - The names of the streams that
--   are associated with the AWS account making the <tt>ListStreams</tt>
--   request.
--   
--   <a>$sel:hasMoreStreams:ListStreamsResponse'</a>,
--   <a>listStreamsResponse_hasMoreStreams</a> - If set to <tt>true</tt>,
--   there are more streams available to list.
newListStreamsResponse :: Int -> Bool -> ListStreamsResponse

-- | Represents the input for <tt>CreateStream</tt>.
--   
--   <i>See:</i> <a>newCreateStream</a> smart constructor.
data CreateStream
CreateStream' :: Text -> Natural -> CreateStream

-- | Create a value of <a>CreateStream</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamName:CreateStream'</a>, <a>createStream_streamName</a> -
--   A name to identify the stream. The stream name is scoped to the AWS
--   account used by the application that creates the stream. It is also
--   scoped by AWS Region. That is, two streams in two different AWS
--   accounts can have the same name. Two streams in the same AWS account
--   but in two different Regions can also have the same name.
--   
--   <a>$sel:shardCount:CreateStream'</a>, <a>createStream_shardCount</a> -
--   The number of shards that the stream will use. The throughput of the
--   stream is a function of the number of shards; more shards are required
--   for greater provisioned throughput.
newCreateStream :: Text -> Natural -> CreateStream

-- | <i>See:</i> <a>newCreateStreamResponse</a> smart constructor.
data CreateStreamResponse
CreateStreamResponse' :: CreateStreamResponse

-- | Create a value of <a>CreateStreamResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newCreateStreamResponse :: CreateStreamResponse

-- | <i>See:</i> <a>newStartStreamEncryption</a> smart constructor.
data StartStreamEncryption
StartStreamEncryption' :: Text -> EncryptionType -> Text -> StartStreamEncryption

-- | Create a value of <a>StartStreamEncryption</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamName:StartStreamEncryption'</a>,
--   <a>startStreamEncryption_streamName</a> - The name of the stream for
--   which to start encrypting records.
--   
--   <a>$sel:encryptionType:StartStreamEncryption'</a>,
--   <a>startStreamEncryption_encryptionType</a> - The encryption type to
--   use. The only valid value is <tt>KMS</tt>.
--   
--   <a>$sel:keyId:StartStreamEncryption'</a>,
--   <a>startStreamEncryption_keyId</a> - The GUID for the customer-managed
--   AWS KMS key to use for encryption. This value can be a globally unique
--   identifier, a fully specified Amazon Resource Name (ARN) to either an
--   alias or a key, or an alias name prefixed by "alias/".You can also use
--   a master key owned by Kinesis Data Streams by specifying the alias
--   <tt>aws/kinesis</tt>.
--   
--   <ul>
--   <li>Key ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:alias/MyAliasName</tt></li>
--   <li>Globally unique key ID example:
--   <tt>12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias name example: <tt>alias/MyAliasName</tt></li>
--   <li>Master key owned by Kinesis Data Streams:
--   <tt>alias/aws/kinesis</tt></li>
--   </ul>
newStartStreamEncryption :: Text -> EncryptionType -> Text -> StartStreamEncryption

-- | <i>See:</i> <a>newStartStreamEncryptionResponse</a> smart constructor.
data StartStreamEncryptionResponse
StartStreamEncryptionResponse' :: StartStreamEncryptionResponse

-- | Create a value of <a>StartStreamEncryptionResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newStartStreamEncryptionResponse :: StartStreamEncryptionResponse

-- | <i>See:</i> <a>newListStreamConsumers</a> smart constructor.
data ListStreamConsumers
ListStreamConsumers' :: Maybe Text -> Maybe POSIX -> Maybe Natural -> Text -> ListStreamConsumers

-- | Create a value of <a>ListStreamConsumers</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListStreamConsumers'</a>,
--   <a>listStreamConsumers_nextToken</a> - When the number of consumers
--   that are registered with the data stream is greater than the default
--   value for the <tt>MaxResults</tt> parameter, or if you explicitly
--   specify a value for <tt>MaxResults</tt> that is less than the number
--   of consumers that are registered with the data stream, the response
--   includes a pagination token named <tt>NextToken</tt>. You can specify
--   this <tt>NextToken</tt> value in a subsequent call to
--   <tt>ListStreamConsumers</tt> to list the next set of registered
--   consumers.
--   
--   Don't specify <tt>StreamName</tt> or <tt>StreamCreationTimestamp</tt>
--   if you specify <tt>NextToken</tt> because the latter unambiguously
--   identifies the stream.
--   
--   You can optionally specify a value for the <tt>MaxResults</tt>
--   parameter when you specify <tt>NextToken</tt>. If you specify a
--   <tt>MaxResults</tt> value that is less than the number of consumers
--   that the operation returns if you don't specify <tt>MaxResults</tt>,
--   the response will contain a new <tt>NextToken</tt> value. You can use
--   the new <tt>NextToken</tt> value in a subsequent call to the
--   <tt>ListStreamConsumers</tt> operation to list the next set of
--   consumers.
--   
--   Tokens expire after 300 seconds. When you obtain a value for
--   <tt>NextToken</tt> in the response to a call to
--   <tt>ListStreamConsumers</tt>, you have 300 seconds to use that value.
--   If you specify an expired token in a call to
--   <tt>ListStreamConsumers</tt>, you get
--   <tt>ExpiredNextTokenException</tt>.
--   
--   <a>$sel:streamCreationTimestamp:ListStreamConsumers'</a>,
--   <a>listStreamConsumers_streamCreationTimestamp</a> - Specify this
--   input parameter to distinguish data streams that have the same name.
--   For example, if you create a data stream and then delete it, and you
--   later create another data stream with the same name, you can use this
--   input parameter to specify which of the two streams you want to list
--   the consumers for.
--   
--   You can't specify this parameter if you specify the NextToken
--   parameter.
--   
--   <a>$sel:maxResults:ListStreamConsumers'</a>,
--   <a>listStreamConsumers_maxResults</a> - The maximum number of
--   consumers that you want a single call of <tt>ListStreamConsumers</tt>
--   to return.
--   
--   <a>$sel:streamARN:ListStreamConsumers'</a>,
--   <a>listStreamConsumers_streamARN</a> - The ARN of the Kinesis data
--   stream for which you want to list the registered consumers. For more
--   information, see <a>Amazon Resource Names (ARNs) and AWS Service
--   Namespaces</a>.
newListStreamConsumers :: Text -> ListStreamConsumers

-- | <i>See:</i> <a>newListStreamConsumersResponse</a> smart constructor.
data ListStreamConsumersResponse
ListStreamConsumersResponse' :: Maybe Text -> Maybe [Consumer] -> Int -> ListStreamConsumersResponse

-- | Create a value of <a>ListStreamConsumersResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListStreamConsumers'</a>,
--   <a>listStreamConsumersResponse_nextToken</a> - When the number of
--   consumers that are registered with the data stream is greater than the
--   default value for the <tt>MaxResults</tt> parameter, or if you
--   explicitly specify a value for <tt>MaxResults</tt> that is less than
--   the number of registered consumers, the response includes a pagination
--   token named <tt>NextToken</tt>. You can specify this
--   <tt>NextToken</tt> value in a subsequent call to
--   <tt>ListStreamConsumers</tt> to list the next set of registered
--   consumers. For more information about the use of this pagination token
--   when calling the <tt>ListStreamConsumers</tt> operation, see
--   ListStreamConsumersInput$NextToken.
--   
--   Tokens expire after 300 seconds. When you obtain a value for
--   <tt>NextToken</tt> in the response to a call to
--   <tt>ListStreamConsumers</tt>, you have 300 seconds to use that value.
--   If you specify an expired token in a call to
--   <tt>ListStreamConsumers</tt>, you get
--   <tt>ExpiredNextTokenException</tt>.
--   
--   <a>$sel:consumers:ListStreamConsumersResponse'</a>,
--   <a>listStreamConsumersResponse_consumers</a> - An array of JSON
--   objects. Each object represents one registered consumer.
--   
--   <a>$sel:httpStatus:ListStreamConsumersResponse'</a>,
--   <a>listStreamConsumersResponse_httpStatus</a> - The response's http
--   status code.
newListStreamConsumersResponse :: Int -> ListStreamConsumersResponse

-- | Represents the input for <tt>SplitShard</tt>.
--   
--   <i>See:</i> <a>newSplitShard</a> smart constructor.
data SplitShard
SplitShard' :: Text -> Text -> Text -> SplitShard

-- | Create a value of <a>SplitShard</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamName:SplitShard'</a>, <a>splitShard_streamName</a> - The
--   name of the stream for the shard split.
--   
--   <a>$sel:shardToSplit:SplitShard'</a>, <a>splitShard_shardToSplit</a> -
--   The shard ID of the shard to split.
--   
--   <a>$sel:newStartingHashKey':SplitShard'</a>,
--   <a>splitShard_newStartingHashKey</a> - A hash key value for the
--   starting hash key of one of the child shards created by the split. The
--   hash key range for a given shard constitutes a set of ordered
--   contiguous positive integers. The value for
--   <tt>NewStartingHashKey</tt> must be in the range of hash keys being
--   mapped into the shard. The <tt>NewStartingHashKey</tt> hash key value
--   and all higher hash key values in hash key range are distributed to
--   one of the child shards. All the lower hash key values in the range
--   are distributed to the other child shard.
newSplitShard :: Text -> Text -> Text -> SplitShard

-- | <i>See:</i> <a>newSplitShardResponse</a> smart constructor.
data SplitShardResponse
SplitShardResponse' :: SplitShardResponse

-- | Create a value of <a>SplitShardResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newSplitShardResponse :: SplitShardResponse

-- | Represents the input for IncreaseStreamRetentionPeriod.
--   
--   <i>See:</i> <a>newIncreaseStreamRetentionPeriod</a> smart constructor.
data IncreaseStreamRetentionPeriod
IncreaseStreamRetentionPeriod' :: Text -> Int -> IncreaseStreamRetentionPeriod

-- | Create a value of <a>IncreaseStreamRetentionPeriod</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamName:IncreaseStreamRetentionPeriod'</a>,
--   <a>increaseStreamRetentionPeriod_streamName</a> - The name of the
--   stream to modify.
--   
--   <a>$sel:retentionPeriodHours:IncreaseStreamRetentionPeriod'</a>,
--   <a>increaseStreamRetentionPeriod_retentionPeriodHours</a> - The new
--   retention period of the stream, in hours. Must be more than the
--   current retention period.
newIncreaseStreamRetentionPeriod :: Text -> Int -> IncreaseStreamRetentionPeriod

-- | <i>See:</i> <a>newIncreaseStreamRetentionPeriodResponse</a> smart
--   constructor.
data IncreaseStreamRetentionPeriodResponse
IncreaseStreamRetentionPeriodResponse' :: IncreaseStreamRetentionPeriodResponse

-- | Create a value of <a>IncreaseStreamRetentionPeriodResponse</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newIncreaseStreamRetentionPeriodResponse :: IncreaseStreamRetentionPeriodResponse

-- | Represents the input for <tt>DescribeStream</tt>.
--   
--   <i>See:</i> <a>newDescribeStream</a> smart constructor.
data DescribeStream
DescribeStream' :: Maybe Text -> Maybe Natural -> Text -> DescribeStream

-- | Create a value of <a>DescribeStream</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:exclusiveStartShardId:DescribeStream'</a>,
--   <a>describeStream_exclusiveStartShardId</a> - The shard ID of the
--   shard to start with.
--   
--   <a>$sel:limit:DescribeStream'</a>, <a>describeStream_limit</a> - The
--   maximum number of shards to return in a single call. The default value
--   is 100. If you specify a value greater than 100, at most 100 shards
--   are returned.
--   
--   <a>$sel:streamName:DescribeStream'</a>,
--   <a>describeStream_streamName</a> - The name of the stream to describe.
newDescribeStream :: Text -> DescribeStream

-- | Represents the output for <tt>DescribeStream</tt>.
--   
--   <i>See:</i> <a>newDescribeStreamResponse</a> smart constructor.
data DescribeStreamResponse
DescribeStreamResponse' :: Int -> StreamDescription -> DescribeStreamResponse

-- | Create a value of <a>DescribeStreamResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DescribeStreamResponse'</a>,
--   <a>describeStreamResponse_httpStatus</a> - The response's http status
--   code.
--   
--   <a>$sel:streamDescription:DescribeStreamResponse'</a>,
--   <a>describeStreamResponse_streamDescription</a> - The current status
--   of the stream, the stream Amazon Resource Name (ARN), an array of
--   shard objects that comprise the stream, and whether there are more
--   shards available.
newDescribeStreamResponse :: Int -> StreamDescription -> DescribeStreamResponse
newtype ConsumerStatus
ConsumerStatus' :: Text -> ConsumerStatus
[fromConsumerStatus] :: ConsumerStatus -> Text
pattern ConsumerStatus_ACTIVE :: ConsumerStatus
pattern ConsumerStatus_CREATING :: ConsumerStatus
pattern ConsumerStatus_DELETING :: ConsumerStatus
newtype EncryptionType
EncryptionType' :: Text -> EncryptionType
[fromEncryptionType] :: EncryptionType -> Text
pattern EncryptionType_KMS :: EncryptionType
pattern EncryptionType_NONE :: EncryptionType
newtype MetricsName
MetricsName' :: Text -> MetricsName
[fromMetricsName] :: MetricsName -> Text
pattern MetricsName_ALL :: MetricsName
pattern MetricsName_IncomingBytes :: MetricsName
pattern MetricsName_IncomingRecords :: MetricsName
pattern MetricsName_IteratorAgeMilliseconds :: MetricsName
pattern MetricsName_OutgoingBytes :: MetricsName
pattern MetricsName_OutgoingRecords :: MetricsName
pattern MetricsName_ReadProvisionedThroughputExceeded :: MetricsName
pattern MetricsName_WriteProvisionedThroughputExceeded :: MetricsName
newtype ScalingType
ScalingType' :: Text -> ScalingType
[fromScalingType] :: ScalingType -> Text
pattern ScalingType_UNIFORM_SCALING :: ScalingType
newtype ShardFilterType
ShardFilterType' :: Text -> ShardFilterType
[fromShardFilterType] :: ShardFilterType -> Text
pattern ShardFilterType_AFTER_SHARD_ID :: ShardFilterType
pattern ShardFilterType_AT_LATEST :: ShardFilterType
pattern ShardFilterType_AT_TIMESTAMP :: ShardFilterType
pattern ShardFilterType_AT_TRIM_HORIZON :: ShardFilterType
pattern ShardFilterType_FROM_TIMESTAMP :: ShardFilterType
pattern ShardFilterType_FROM_TRIM_HORIZON :: ShardFilterType
newtype ShardIteratorType
ShardIteratorType' :: Text -> ShardIteratorType
[fromShardIteratorType] :: ShardIteratorType -> Text
pattern ShardIteratorType_AFTER_SEQUENCE_NUMBER :: ShardIteratorType
pattern ShardIteratorType_AT_SEQUENCE_NUMBER :: ShardIteratorType
pattern ShardIteratorType_AT_TIMESTAMP :: ShardIteratorType
pattern ShardIteratorType_LATEST :: ShardIteratorType
pattern ShardIteratorType_TRIM_HORIZON :: ShardIteratorType
newtype StreamStatus
StreamStatus' :: Text -> StreamStatus
[fromStreamStatus] :: StreamStatus -> Text
pattern StreamStatus_ACTIVE :: StreamStatus
pattern StreamStatus_CREATING :: StreamStatus
pattern StreamStatus_DELETING :: StreamStatus
pattern StreamStatus_UPDATING :: StreamStatus

-- | <i>See:</i> <a>newChildShard</a> smart constructor.
data ChildShard
ChildShard' :: Text -> [Text] -> HashKeyRange -> ChildShard

-- | Create a value of <a>ChildShard</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:shardId:ChildShard'</a>, <a>childShard_shardId</a> -
--   Undocumented member.
--   
--   <a>$sel:parentShards:ChildShard'</a>, <a>childShard_parentShards</a> -
--   Undocumented member.
--   
--   <a>$sel:hashKeyRange:ChildShard'</a>, <a>childShard_hashKeyRange</a> -
--   Undocumented member.
newChildShard :: Text -> HashKeyRange -> ChildShard

-- | An object that represents the details of the consumer you registered.
--   This type of object is returned by RegisterStreamConsumer.
--   
--   <i>See:</i> <a>newConsumer</a> smart constructor.
data Consumer
Consumer' :: Text -> Text -> ConsumerStatus -> POSIX -> Consumer

-- | Create a value of <a>Consumer</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:consumerName:Consumer'</a>, <a>consumer_consumerName</a> - The
--   name of the consumer is something you choose when you register the
--   consumer.
--   
--   <a>$sel:consumerARN:Consumer'</a>, <a>consumer_consumerARN</a> - When
--   you register a consumer, Kinesis Data Streams generates an ARN for it.
--   You need this ARN to be able to call SubscribeToShard.
--   
--   If you delete a consumer and then create a new one with the same name,
--   it won't have the same ARN. That's because consumer ARNs contain the
--   creation timestamp. This is important to keep in mind if you have IAM
--   policies that reference consumer ARNs.
--   
--   <a>$sel:consumerStatus:Consumer'</a>, <a>consumer_consumerStatus</a> -
--   A consumer can't read data while in the <tt>CREATING</tt> or
--   <tt>DELETING</tt> states.
--   
--   <a>$sel:consumerCreationTimestamp:Consumer'</a>,
--   <a>consumer_consumerCreationTimestamp</a> -
newConsumer :: Text -> Text -> ConsumerStatus -> UTCTime -> Consumer

-- | An object that represents the details of a registered consumer. This
--   type of object is returned by DescribeStreamConsumer.
--   
--   <i>See:</i> <a>newConsumerDescription</a> smart constructor.
data ConsumerDescription
ConsumerDescription' :: Text -> Text -> ConsumerStatus -> POSIX -> Text -> ConsumerDescription

-- | Create a value of <a>ConsumerDescription</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:consumerName:ConsumerDescription'</a>,
--   <a>consumerDescription_consumerName</a> - The name of the consumer is
--   something you choose when you register the consumer.
--   
--   <a>$sel:consumerARN:ConsumerDescription'</a>,
--   <a>consumerDescription_consumerARN</a> - When you register a consumer,
--   Kinesis Data Streams generates an ARN for it. You need this ARN to be
--   able to call SubscribeToShard.
--   
--   If you delete a consumer and then create a new one with the same name,
--   it won't have the same ARN. That's because consumer ARNs contain the
--   creation timestamp. This is important to keep in mind if you have IAM
--   policies that reference consumer ARNs.
--   
--   <a>$sel:consumerStatus:ConsumerDescription'</a>,
--   <a>consumerDescription_consumerStatus</a> - A consumer can't read data
--   while in the <tt>CREATING</tt> or <tt>DELETING</tt> states.
--   
--   <a>$sel:consumerCreationTimestamp:ConsumerDescription'</a>,
--   <a>consumerDescription_consumerCreationTimestamp</a> -
--   
--   <a>$sel:streamARN:ConsumerDescription'</a>,
--   <a>consumerDescription_streamARN</a> - The ARN of the stream with
--   which you registered the consumer.
newConsumerDescription :: Text -> Text -> ConsumerStatus -> UTCTime -> Text -> ConsumerDescription

-- | Represents enhanced metrics types.
--   
--   <i>See:</i> <a>newEnhancedMetrics</a> smart constructor.
data EnhancedMetrics
EnhancedMetrics' :: Maybe [MetricsName] -> EnhancedMetrics

-- | Create a value of <a>EnhancedMetrics</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:shardLevelMetrics:EnhancedMetrics'</a>,
--   <a>enhancedMetrics_shardLevelMetrics</a> - List of shard-level
--   metrics.
--   
--   The following are the valid shard-level metrics. The value
--   "<tt>ALL</tt>" enhances every metric.
--   
--   <ul>
--   <li><pre>IncomingBytes</pre></li>
--   <li><pre>IncomingRecords</pre></li>
--   <li><pre>OutgoingBytes</pre></li>
--   <li><pre>OutgoingRecords</pre></li>
--   <li><pre>WriteProvisionedThroughputExceeded</pre></li>
--   <li><pre>ReadProvisionedThroughputExceeded</pre></li>
--   <li><pre>IteratorAgeMilliseconds</pre></li>
--   <li><pre>ALL</pre></li>
--   </ul>
--   
--   For more information, see <a>Monitoring the Amazon Kinesis Data
--   Streams Service with Amazon CloudWatch</a> in the <i>Amazon Kinesis
--   Data Streams Developer Guide</i>.
newEnhancedMetrics :: EnhancedMetrics

-- | Represents the output for EnableEnhancedMonitoring and
--   DisableEnhancedMonitoring.
--   
--   <i>See:</i> <a>newEnhancedMonitoringOutput</a> smart constructor.
data EnhancedMonitoringOutput
EnhancedMonitoringOutput' :: Maybe [MetricsName] -> Maybe [MetricsName] -> Maybe Text -> EnhancedMonitoringOutput

-- | Create a value of <a>EnhancedMonitoringOutput</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:desiredShardLevelMetrics:EnhancedMonitoringOutput'</a>,
--   <a>enhancedMonitoringOutput_desiredShardLevelMetrics</a> - Represents
--   the list of all the metrics that would be in the enhanced state after
--   the operation.
--   
--   <a>$sel:currentShardLevelMetrics:EnhancedMonitoringOutput'</a>,
--   <a>enhancedMonitoringOutput_currentShardLevelMetrics</a> - Represents
--   the current state of the metrics that are in the enhanced state before
--   the operation.
--   
--   <a>$sel:streamName:EnhancedMonitoringOutput'</a>,
--   <a>enhancedMonitoringOutput_streamName</a> - The name of the Kinesis
--   data stream.
newEnhancedMonitoringOutput :: EnhancedMonitoringOutput

-- | The range of possible hash key values for the shard, which is a set of
--   ordered contiguous positive integers.
--   
--   <i>See:</i> <a>newHashKeyRange</a> smart constructor.
data HashKeyRange
HashKeyRange' :: Text -> Text -> HashKeyRange

-- | Create a value of <a>HashKeyRange</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:startingHashKey:HashKeyRange'</a>,
--   <a>hashKeyRange_startingHashKey</a> - The starting hash key of the
--   hash key range.
--   
--   <a>$sel:endingHashKey:HashKeyRange'</a>,
--   <a>hashKeyRange_endingHashKey</a> - The ending hash key of the hash
--   key range.
newHashKeyRange :: Text -> Text -> HashKeyRange

-- | Represents the output for <tt>PutRecords</tt>.
--   
--   <i>See:</i> <a>newPutRecordsRequestEntry</a> smart constructor.
data PutRecordsRequestEntry
PutRecordsRequestEntry' :: Maybe Text -> Base64 -> Text -> PutRecordsRequestEntry

-- | Create a value of <a>PutRecordsRequestEntry</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:explicitHashKey:PutRecordsRequestEntry'</a>,
--   <a>putRecordsRequestEntry_explicitHashKey</a> - The hash value used to
--   determine explicitly the shard that the data record is assigned to by
--   overriding the partition key hash.
--   
--   <a>$sel:data':PutRecordsRequestEntry'</a>,
--   <a>putRecordsRequestEntry_data</a> - The data blob to put into the
--   record, which is base64-encoded when the blob is serialized. When the
--   data blob (the payload before base64-encoding) is added to the
--   partition key size, the total size must not exceed the maximum record
--   size (1 MiB).-- -- <i>Note:</i> This <tt>Lens</tt> automatically
--   encodes and decodes Base64 data. -- The underlying isomorphism will
--   encode to Base64 representation during -- serialisation, and decode
--   from Base64 representation during deserialisation. -- This
--   <tt>Lens</tt> accepts and returns only raw unencoded data.
--   
--   <a>$sel:partitionKey:PutRecordsRequestEntry'</a>,
--   <a>putRecordsRequestEntry_partitionKey</a> - Determines which shard in
--   the stream the data record is assigned to. Partition keys are Unicode
--   strings with a maximum length limit of 256 characters for each key.
--   Amazon Kinesis Data Streams uses the partition key as input to a hash
--   function that maps the partition key and associated data to a specific
--   shard. Specifically, an MD5 hash function is used to map partition
--   keys to 128-bit integer values and to map associated data records to
--   shards. As a result of this hashing mechanism, all data records with
--   the same partition key map to the same shard within the stream.
newPutRecordsRequestEntry :: ByteString -> Text -> PutRecordsRequestEntry

-- | Represents the result of an individual record from a
--   <tt>PutRecords</tt> request. A record that is successfully added to a
--   stream includes <tt>SequenceNumber</tt> and <tt>ShardId</tt> in the
--   result. A record that fails to be added to the stream includes
--   <tt>ErrorCode</tt> and <tt>ErrorMessage</tt> in the result.
--   
--   <i>See:</i> <a>newPutRecordsResultEntry</a> smart constructor.
data PutRecordsResultEntry
PutRecordsResultEntry' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> PutRecordsResultEntry

-- | Create a value of <a>PutRecordsResultEntry</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:sequenceNumber:PutRecordsResultEntry'</a>,
--   <a>putRecordsResultEntry_sequenceNumber</a> - The sequence number for
--   an individual record result.
--   
--   <a>$sel:errorCode:PutRecordsResultEntry'</a>,
--   <a>putRecordsResultEntry_errorCode</a> - The error code for an
--   individual record result. <tt>ErrorCodes</tt> can be either
--   <tt>ProvisionedThroughputExceededException</tt> or
--   <tt>InternalFailure</tt>.
--   
--   <a>$sel:errorMessage:PutRecordsResultEntry'</a>,
--   <a>putRecordsResultEntry_errorMessage</a> - The error message for an
--   individual record result. An <tt>ErrorCode</tt> value of
--   <tt>ProvisionedThroughputExceededException</tt> has an error message
--   that includes the account ID, stream name, and shard ID. An
--   <tt>ErrorCode</tt> value of <tt>InternalFailure</tt> has the error
--   message <tt>"Internal Service Failure"</tt>.
--   
--   <a>$sel:shardId:PutRecordsResultEntry'</a>,
--   <a>putRecordsResultEntry_shardId</a> - The shard ID for an individual
--   record result.
newPutRecordsResultEntry :: PutRecordsResultEntry

-- | The unit of data of the Kinesis data stream, which is composed of a
--   sequence number, a partition key, and a data blob.
--   
--   <i>See:</i> <a>newRecord</a> smart constructor.
data Record
Record' :: Maybe EncryptionType -> Maybe POSIX -> Text -> Base64 -> Text -> Record

-- | Create a value of <a>Record</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:encryptionType:Record'</a>, <a>record_encryptionType</a> - The
--   encryption type used on the record. This parameter can be one of the
--   following values:
--   
--   <ul>
--   <li><tt>NONE</tt>: Do not encrypt the records in the stream.</li>
--   <li><tt>KMS</tt>: Use server-side encryption on the records in the
--   stream using a customer-managed AWS KMS key.</li>
--   </ul>
--   
--   <a>$sel:approximateArrivalTimestamp:Record'</a>,
--   <a>record_approximateArrivalTimestamp</a> - The approximate time that
--   the record was inserted into the stream.
--   
--   <a>$sel:sequenceNumber:Record'</a>, <a>record_sequenceNumber</a> - The
--   unique identifier of the record within its shard.
--   
--   <a>$sel:data':Record'</a>, <a>record_data</a> - The data blob. The
--   data in the blob is both opaque and immutable to Kinesis Data Streams,
--   which does not inspect, interpret, or change the data in the blob in
--   any way. When the data blob (the payload before base64-encoding) is
--   added to the partition key size, the total size must not exceed the
--   maximum record size (1 MiB).-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
--   
--   <a>$sel:partitionKey:Record'</a>, <a>record_partitionKey</a> -
--   Identifies which shard in the stream the data record is assigned to.
newRecord :: Text -> ByteString -> Text -> Record

-- | The range of possible sequence numbers for the shard.
--   
--   <i>See:</i> <a>newSequenceNumberRange</a> smart constructor.
data SequenceNumberRange
SequenceNumberRange' :: Maybe Text -> Text -> SequenceNumberRange

-- | Create a value of <a>SequenceNumberRange</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:endingSequenceNumber:SequenceNumberRange'</a>,
--   <a>sequenceNumberRange_endingSequenceNumber</a> - The ending sequence
--   number for the range. Shards that are in the OPEN state have an ending
--   sequence number of <tt>null</tt>.
--   
--   <a>$sel:startingSequenceNumber:SequenceNumberRange'</a>,
--   <a>sequenceNumberRange_startingSequenceNumber</a> - The starting
--   sequence number for the range.
newSequenceNumberRange :: Text -> SequenceNumberRange

-- | A uniquely identified group of data records in a Kinesis data stream.
--   
--   <i>See:</i> <a>newShard</a> smart constructor.
data Shard
Shard' :: Maybe Text -> Maybe Text -> Text -> HashKeyRange -> SequenceNumberRange -> Shard

-- | Create a value of <a>Shard</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:adjacentParentShardId:Shard'</a>,
--   <a>shard_adjacentParentShardId</a> - The shard ID of the shard
--   adjacent to the shard's parent.
--   
--   <a>$sel:parentShardId:Shard'</a>, <a>shard_parentShardId</a> - The
--   shard ID of the shard's parent.
--   
--   <a>$sel:shardId:Shard'</a>, <a>shard_shardId</a> - The unique
--   identifier of the shard within the stream.
--   
--   <a>$sel:hashKeyRange:Shard'</a>, <a>shard_hashKeyRange</a> - The range
--   of possible hash key values for the shard, which is a set of ordered
--   contiguous positive integers.
--   
--   <a>$sel:sequenceNumberRange:Shard'</a>,
--   <a>shard_sequenceNumberRange</a> - The range of possible sequence
--   numbers for the shard.
newShard :: Text -> HashKeyRange -> SequenceNumberRange -> Shard

-- | <i>See:</i> <a>newShardFilter</a> smart constructor.
data ShardFilter
ShardFilter' :: Maybe POSIX -> Maybe Text -> ShardFilterType -> ShardFilter

-- | Create a value of <a>ShardFilter</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:timestamp:ShardFilter'</a>, <a>shardFilter_timestamp</a> -
--   Undocumented member.
--   
--   <a>$sel:shardId:ShardFilter'</a>, <a>shardFilter_shardId</a> -
--   Undocumented member.
--   
--   <a>$sel:type':ShardFilter'</a>, <a>shardFilter_type</a> - Undocumented
--   member.
newShardFilter :: ShardFilterType -> ShardFilter

-- | <i>See:</i> <a>newStartingPosition</a> smart constructor.
data StartingPosition
StartingPosition' :: Maybe Text -> Maybe POSIX -> ShardIteratorType -> StartingPosition

-- | Create a value of <a>StartingPosition</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:sequenceNumber:StartingPosition'</a>,
--   <a>startingPosition_sequenceNumber</a> - The sequence number of the
--   data record in the shard from which to start streaming. To specify a
--   sequence number, set <tt>StartingPosition</tt> to
--   <tt>AT_SEQUENCE_NUMBER</tt> or <tt>AFTER_SEQUENCE_NUMBER</tt>.
--   
--   <a>$sel:timestamp:StartingPosition'</a>,
--   <a>startingPosition_timestamp</a> - The time stamp of the data record
--   from which to start reading. To specify a time stamp, set
--   <tt>StartingPosition</tt> to <tt>Type AT_TIMESTAMP</tt>. A time stamp
--   is the Unix epoch date with precision in milliseconds. For example,
--   <tt>2016-04-04T19:58:46.480-00:00</tt> or <tt>1459799926.480</tt>. If
--   a record with this exact time stamp does not exist, records will be
--   streamed from the next (later) record. If the time stamp is older than
--   the current trim horizon, records will be streamed from the oldest
--   untrimmed data record (<tt>TRIM_HORIZON</tt>).
--   
--   <a>$sel:type':StartingPosition'</a>, <a>startingPosition_type</a> -
--   You can set the starting position to one of the following values:
--   
--   <tt>AT_SEQUENCE_NUMBER</tt>: Start streaming from the position denoted
--   by the sequence number specified in the <tt>SequenceNumber</tt> field.
--   
--   <tt>AFTER_SEQUENCE_NUMBER</tt>: Start streaming right after the
--   position denoted by the sequence number specified in the
--   <tt>SequenceNumber</tt> field.
--   
--   <tt>AT_TIMESTAMP</tt>: Start streaming from the position denoted by
--   the time stamp specified in the <tt>Timestamp</tt> field.
--   
--   <tt>TRIM_HORIZON</tt>: Start streaming at the last untrimmed record in
--   the shard, which is the oldest data record in the shard.
--   
--   <tt>LATEST</tt>: Start streaming just after the most recent record in
--   the shard, so that you always read the most recent data in the shard.
newStartingPosition :: ShardIteratorType -> StartingPosition

-- | Represents the output for DescribeStream.
--   
--   <i>See:</i> <a>newStreamDescription</a> smart constructor.
data StreamDescription
StreamDescription' :: Maybe EncryptionType -> Maybe Text -> Text -> Text -> StreamStatus -> [Shard] -> Bool -> Int -> POSIX -> [EnhancedMetrics] -> StreamDescription

-- | Create a value of <a>StreamDescription</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:encryptionType:StreamDescription'</a>,
--   <a>streamDescription_encryptionType</a> - The server-side encryption
--   type used on the stream. This parameter can be one of the following
--   values:
--   
--   <ul>
--   <li><tt>NONE</tt>: Do not encrypt the records in the stream.</li>
--   <li><tt>KMS</tt>: Use server-side encryption on the records in the
--   stream using a customer-managed AWS KMS key.</li>
--   </ul>
--   
--   <a>$sel:keyId:StreamDescription'</a>, <a>streamDescription_keyId</a> -
--   The GUID for the customer-managed AWS KMS key to use for encryption.
--   This value can be a globally unique identifier, a fully specified ARN
--   to either an alias or a key, or an alias name prefixed by "alias/".You
--   can also use a master key owned by Kinesis Data Streams by specifying
--   the alias <tt>aws/kinesis</tt>.
--   
--   <ul>
--   <li>Key ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:alias/MyAliasName</tt></li>
--   <li>Globally unique key ID example:
--   <tt>12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias name example: <tt>alias/MyAliasName</tt></li>
--   <li>Master key owned by Kinesis Data Streams:
--   <tt>alias/aws/kinesis</tt></li>
--   </ul>
--   
--   <a>$sel:streamName:StreamDescription'</a>,
--   <a>streamDescription_streamName</a> - The name of the stream being
--   described.
--   
--   <a>$sel:streamARN:StreamDescription'</a>,
--   <a>streamDescription_streamARN</a> - The Amazon Resource Name (ARN)
--   for the stream being described.
--   
--   <a>$sel:streamStatus:StreamDescription'</a>,
--   <a>streamDescription_streamStatus</a> - The current status of the
--   stream being described. The stream status is one of the following
--   states:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The stream is being created. Kinesis Data
--   Streams immediately returns and sets <tt>StreamStatus</tt> to
--   <tt>CREATING</tt>.</li>
--   <li><tt>DELETING</tt> - The stream is being deleted. The specified
--   stream is in the <tt>DELETING</tt> state until Kinesis Data Streams
--   completes the deletion.</li>
--   <li><tt>ACTIVE</tt> - The stream exists and is ready for read and
--   write operations or deletion. You should perform read and write
--   operations only on an <tt>ACTIVE</tt> stream.</li>
--   <li><tt>UPDATING</tt> - Shards in the stream are being merged or
--   split. Read and write operations continue to work while the stream is
--   in the <tt>UPDATING</tt> state.</li>
--   </ul>
--   
--   <a>$sel:shards:StreamDescription'</a>, <a>streamDescription_shards</a>
--   - The shards that comprise the stream.
--   
--   <a>$sel:hasMoreShards:StreamDescription'</a>,
--   <a>streamDescription_hasMoreShards</a> - If set to <tt>true</tt>, more
--   shards in the stream are available to describe.
--   
--   <a>$sel:retentionPeriodHours:StreamDescription'</a>,
--   <a>streamDescription_retentionPeriodHours</a> - The current retention
--   period, in hours. Minimum value of 24. Maximum value of 168.
--   
--   <a>$sel:streamCreationTimestamp:StreamDescription'</a>,
--   <a>streamDescription_streamCreationTimestamp</a> - The approximate
--   time that the stream was created.
--   
--   <a>$sel:enhancedMonitoring:StreamDescription'</a>,
--   <a>streamDescription_enhancedMonitoring</a> - Represents the current
--   enhanced monitoring settings of the stream.
newStreamDescription :: Text -> Text -> StreamStatus -> Bool -> Int -> UTCTime -> StreamDescription

-- | Represents the output for DescribeStreamSummary
--   
--   <i>See:</i> <a>newStreamDescriptionSummary</a> smart constructor.
data StreamDescriptionSummary
StreamDescriptionSummary' :: Maybe EncryptionType -> Maybe Text -> Maybe Natural -> Text -> Text -> StreamStatus -> Int -> POSIX -> [EnhancedMetrics] -> Natural -> StreamDescriptionSummary

-- | Create a value of <a>StreamDescriptionSummary</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:encryptionType:StreamDescriptionSummary'</a>,
--   <a>streamDescriptionSummary_encryptionType</a> - The encryption type
--   used. This value is one of the following:
--   
--   <ul>
--   <li><pre>KMS</pre></li>
--   <li><pre>NONE</pre></li>
--   </ul>
--   
--   <a>$sel:keyId:StreamDescriptionSummary'</a>,
--   <a>streamDescriptionSummary_keyId</a> - The GUID for the
--   customer-managed AWS KMS key to use for encryption. This value can be
--   a globally unique identifier, a fully specified ARN to either an alias
--   or a key, or an alias name prefixed by "alias/".You can also use a
--   master key owned by Kinesis Data Streams by specifying the alias
--   <tt>aws/kinesis</tt>.
--   
--   <ul>
--   <li>Key ARN example:
--   <tt>arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias ARN example: <tt>
--   arn:aws:kms:us-east-1:123456789012:alias/MyAliasName</tt></li>
--   <li>Globally unique key ID example:
--   <tt>12345678-1234-1234-1234-123456789012</tt></li>
--   <li>Alias name example: <tt>alias/MyAliasName</tt></li>
--   <li>Master key owned by Kinesis Data Streams:
--   <tt>alias/aws/kinesis</tt></li>
--   </ul>
--   
--   <a>$sel:consumerCount:StreamDescriptionSummary'</a>,
--   <a>streamDescriptionSummary_consumerCount</a> - The number of enhanced
--   fan-out consumers registered with the stream.
--   
--   <a>$sel:streamName:StreamDescriptionSummary'</a>,
--   <a>streamDescriptionSummary_streamName</a> - The name of the stream
--   being described.
--   
--   <a>$sel:streamARN:StreamDescriptionSummary'</a>,
--   <a>streamDescriptionSummary_streamARN</a> - The Amazon Resource Name
--   (ARN) for the stream being described.
--   
--   <a>$sel:streamStatus:StreamDescriptionSummary'</a>,
--   <a>streamDescriptionSummary_streamStatus</a> - The current status of
--   the stream being described. The stream status is one of the following
--   states:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The stream is being created. Kinesis Data
--   Streams immediately returns and sets <tt>StreamStatus</tt> to
--   <tt>CREATING</tt>.</li>
--   <li><tt>DELETING</tt> - The stream is being deleted. The specified
--   stream is in the <tt>DELETING</tt> state until Kinesis Data Streams
--   completes the deletion.</li>
--   <li><tt>ACTIVE</tt> - The stream exists and is ready for read and
--   write operations or deletion. You should perform read and write
--   operations only on an <tt>ACTIVE</tt> stream.</li>
--   <li><tt>UPDATING</tt> - Shards in the stream are being merged or
--   split. Read and write operations continue to work while the stream is
--   in the <tt>UPDATING</tt> state.</li>
--   </ul>
--   
--   <a>$sel:retentionPeriodHours:StreamDescriptionSummary'</a>,
--   <a>streamDescriptionSummary_retentionPeriodHours</a> - The current
--   retention period, in hours.
--   
--   <a>$sel:streamCreationTimestamp:StreamDescriptionSummary'</a>,
--   <a>streamDescriptionSummary_streamCreationTimestamp</a> - The
--   approximate time that the stream was created.
--   
--   <a>$sel:enhancedMonitoring:StreamDescriptionSummary'</a>,
--   <a>streamDescriptionSummary_enhancedMonitoring</a> - Represents the
--   current enhanced monitoring settings of the stream.
--   
--   <a>$sel:openShardCount:StreamDescriptionSummary'</a>,
--   <a>streamDescriptionSummary_openShardCount</a> - The number of open
--   shards in the stream.
newStreamDescriptionSummary :: Text -> Text -> StreamStatus -> Int -> UTCTime -> Natural -> StreamDescriptionSummary

-- | After you call SubscribeToShard, Kinesis Data Streams sends events of
--   this type over an HTTP/2 connection to your consumer.
--   
--   <i>See:</i> <a>newSubscribeToShardEvent</a> smart constructor.
data SubscribeToShardEvent
SubscribeToShardEvent' :: Maybe [ChildShard] -> [Record] -> Text -> Natural -> SubscribeToShardEvent

-- | Create a value of <a>SubscribeToShardEvent</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:childShards:SubscribeToShardEvent'</a>,
--   <a>subscribeToShardEvent_childShards</a> - Undocumented member.
--   
--   <a>$sel:records:SubscribeToShardEvent'</a>,
--   <a>subscribeToShardEvent_records</a> -
--   
--   <a>$sel:continuationSequenceNumber:SubscribeToShardEvent'</a>,
--   <a>subscribeToShardEvent_continuationSequenceNumber</a> - Use this as
--   <tt>SequenceNumber</tt> in the next call to SubscribeToShard, with
--   <tt>StartingPosition</tt> set to <tt>AT_SEQUENCE_NUMBER</tt> or
--   <tt>AFTER_SEQUENCE_NUMBER</tt>. Use
--   <tt>ContinuationSequenceNumber</tt> for checkpointing because it
--   captures your shard progress even when no data is written to the
--   shard.
--   
--   <a>$sel:millisBehindLatest:SubscribeToShardEvent'</a>,
--   <a>subscribeToShardEvent_millisBehindLatest</a> - The number of
--   milliseconds the read records are from the tip of the stream,
--   indicating how far behind current time the consumer is. A value of
--   zero indicates that record processing is caught up, and there are no
--   new records to process at this moment.
newSubscribeToShardEvent :: Text -> Natural -> SubscribeToShardEvent

-- | Metadata assigned to the stream, consisting of a key-value pair.
--   
--   <i>See:</i> <a>newTag</a> smart constructor.
data Tag
Tag' :: Maybe Text -> Text -> Tag

-- | Create a value of <a>Tag</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:Tag'</a>, <a>tag_value</a> - An optional string,
--   typically used to describe or define the tag. Maximum length: 256
--   characters. Valid characters: Unicode letters, digits, white space, _
--   . / = + - % @
--   
--   <a>$sel:key:Tag'</a>, <a>tag_key</a> - A unique identifier for the
--   tag. Maximum length: 128 characters. Valid characters: Unicode
--   letters, digits, white space, _ . / = + - % @
newTag :: Text -> Tag
