-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/

@package libZSservicesZSamazonka-kinesis-video-signalingZSamazonka-kinesis-video-signaling
@version 2.0


module Network.AWS.KinesisVideoSignaling.Types.IceServer

-- | A structure for the ICE server connection data.
--   
--   <i>See:</i> <a>newIceServer</a> smart constructor.
data IceServer
IceServer' :: Maybe Natural -> Maybe [Text] -> Maybe Text -> Maybe Text -> IceServer

-- | The period of time, in seconds, during which the username and password
--   are valid.
[$sel:ttl:IceServer'] :: IceServer -> Maybe Natural

-- | An array of URIs, in the form specified in the
--   <a>I-D.petithuguenin-behave-turn-uris</a> spec. These URIs provide the
--   different addresses and/or protocols that can be used to reach the
--   TURN server.
[$sel:uris:IceServer'] :: IceServer -> Maybe [Text]

-- | A username to login to the ICE server.
[$sel:username:IceServer'] :: IceServer -> Maybe Text

-- | A password to login to the ICE server.
[$sel:password:IceServer'] :: IceServer -> Maybe Text

-- | Create a value of <a>IceServer</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:ttl:IceServer'</a>, <a>iceServer_ttl</a> - The period of time,
--   in seconds, during which the username and password are valid.
--   
--   <a>$sel:uris:IceServer'</a>, <a>iceServer_uris</a> - An array of URIs,
--   in the form specified in the <a>I-D.petithuguenin-behave-turn-uris</a>
--   spec. These URIs provide the different addresses and/or protocols that
--   can be used to reach the TURN server.
--   
--   <a>$sel:username:IceServer'</a>, <a>iceServer_username</a> - A
--   username to login to the ICE server.
--   
--   <a>$sel:password:IceServer'</a>, <a>iceServer_password</a> - A
--   password to login to the ICE server.
newIceServer :: IceServer

-- | The period of time, in seconds, during which the username and password
--   are valid.
iceServer_ttl :: Lens' IceServer (Maybe Natural)

-- | An array of URIs, in the form specified in the
--   <a>I-D.petithuguenin-behave-turn-uris</a> spec. These URIs provide the
--   different addresses and/or protocols that can be used to reach the
--   TURN server.
iceServer_uris :: Lens' IceServer (Maybe [Text])

-- | A username to login to the ICE server.
iceServer_username :: Lens' IceServer (Maybe Text)

-- | A password to login to the ICE server.
iceServer_password :: Lens' IceServer (Maybe Text)
instance GHC.Generics.Generic Network.AWS.KinesisVideoSignaling.Types.IceServer.IceServer
instance GHC.Show.Show Network.AWS.KinesisVideoSignaling.Types.IceServer.IceServer
instance GHC.Read.Read Network.AWS.KinesisVideoSignaling.Types.IceServer.IceServer
instance GHC.Classes.Eq Network.AWS.KinesisVideoSignaling.Types.IceServer.IceServer
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.KinesisVideoSignaling.Types.IceServer.IceServer
instance Data.Hashable.Class.Hashable Network.AWS.KinesisVideoSignaling.Types.IceServer.IceServer
instance Control.DeepSeq.NFData Network.AWS.KinesisVideoSignaling.Types.IceServer.IceServer


module Network.AWS.KinesisVideoSignaling.Types.Service
newtype Service
Service' :: Text -> Service
[fromService] :: Service -> Text
pattern Service_TURN :: Service
instance Network.AWS.Data.XML.ToXML Network.AWS.KinesisVideoSignaling.Types.Service.Service
instance Network.AWS.Data.XML.FromXML Network.AWS.KinesisVideoSignaling.Types.Service.Service
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.KinesisVideoSignaling.Types.Service.Service
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KinesisVideoSignaling.Types.Service.Service
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.KinesisVideoSignaling.Types.Service.Service
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.KinesisVideoSignaling.Types.Service.Service
instance Network.AWS.Data.Query.ToQuery Network.AWS.KinesisVideoSignaling.Types.Service.Service
instance Network.AWS.Data.Headers.ToHeader Network.AWS.KinesisVideoSignaling.Types.Service.Service
instance Network.AWS.Data.Log.ToLog Network.AWS.KinesisVideoSignaling.Types.Service.Service
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.KinesisVideoSignaling.Types.Service.Service
instance Network.AWS.Data.Text.ToText Network.AWS.KinesisVideoSignaling.Types.Service.Service
instance Network.AWS.Data.Text.FromText Network.AWS.KinesisVideoSignaling.Types.Service.Service
instance Control.DeepSeq.NFData Network.AWS.KinesisVideoSignaling.Types.Service.Service
instance Data.Hashable.Class.Hashable Network.AWS.KinesisVideoSignaling.Types.Service.Service
instance GHC.Generics.Generic Network.AWS.KinesisVideoSignaling.Types.Service.Service
instance GHC.Classes.Ord Network.AWS.KinesisVideoSignaling.Types.Service.Service
instance GHC.Classes.Eq Network.AWS.KinesisVideoSignaling.Types.Service.Service
instance GHC.Read.Read Network.AWS.KinesisVideoSignaling.Types.Service.Service
instance GHC.Show.Show Network.AWS.KinesisVideoSignaling.Types.Service.Service


module Network.AWS.KinesisVideoSignaling.Types

-- | API version <tt>2019-12-04</tt> of the Amazon Kinesis Video Signaling
--   Channels SDK configuration.
defaultService :: Service

-- | The value for this input parameter is invalid.
_InvalidArgumentException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The caller is not authorized to perform this operation.
_NotAuthorizedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Your request was throttled because you have exceeded the limit of
--   allowed client calls. Try making the call later.
_ClientLimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | If the client session is expired. Once the client is connected, the
--   session is valid for 45 minutes. Client should reconnect to the
--   channel to continue sending/receiving messages.
_SessionExpiredException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified client is invalid.
_InvalidClientException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified resource is not found.
_ResourceNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError
newtype Service
Service' :: Text -> Service
[fromService] :: Service -> Text
pattern Service_TURN :: Service

-- | A structure for the ICE server connection data.
--   
--   <i>See:</i> <a>newIceServer</a> smart constructor.
data IceServer
IceServer' :: Maybe Natural -> Maybe [Text] -> Maybe Text -> Maybe Text -> IceServer

-- | The period of time, in seconds, during which the username and password
--   are valid.
[$sel:ttl:IceServer'] :: IceServer -> Maybe Natural

-- | An array of URIs, in the form specified in the
--   <a>I-D.petithuguenin-behave-turn-uris</a> spec. These URIs provide the
--   different addresses and/or protocols that can be used to reach the
--   TURN server.
[$sel:uris:IceServer'] :: IceServer -> Maybe [Text]

-- | A username to login to the ICE server.
[$sel:username:IceServer'] :: IceServer -> Maybe Text

-- | A password to login to the ICE server.
[$sel:password:IceServer'] :: IceServer -> Maybe Text

-- | Create a value of <a>IceServer</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:ttl:IceServer'</a>, <a>iceServer_ttl</a> - The period of time,
--   in seconds, during which the username and password are valid.
--   
--   <a>$sel:uris:IceServer'</a>, <a>iceServer_uris</a> - An array of URIs,
--   in the form specified in the <a>I-D.petithuguenin-behave-turn-uris</a>
--   spec. These URIs provide the different addresses and/or protocols that
--   can be used to reach the TURN server.
--   
--   <a>$sel:username:IceServer'</a>, <a>iceServer_username</a> - A
--   username to login to the ICE server.
--   
--   <a>$sel:password:IceServer'</a>, <a>iceServer_password</a> - A
--   password to login to the ICE server.
newIceServer :: IceServer

-- | The period of time, in seconds, during which the username and password
--   are valid.
iceServer_ttl :: Lens' IceServer (Maybe Natural)

-- | An array of URIs, in the form specified in the
--   <a>I-D.petithuguenin-behave-turn-uris</a> spec. These URIs provide the
--   different addresses and/or protocols that can be used to reach the
--   TURN server.
iceServer_uris :: Lens' IceServer (Maybe [Text])

-- | A username to login to the ICE server.
iceServer_username :: Lens' IceServer (Maybe Text)

-- | A password to login to the ICE server.
iceServer_password :: Lens' IceServer (Maybe Text)


-- | This API allows you to connect WebRTC-enabled devices with Alexa
--   display devices. When invoked, it sends the Alexa Session Description
--   Protocol (SDP) offer to the master peer. The offer is delivered as
--   soon as the master is connected to the specified signaling channel.
--   This API returns the SDP answer from the connected master. If the
--   master is not connected to the signaling channel, redelivery requests
--   are made until the message expires.
module Network.AWS.KinesisVideoSignaling.SendAlexaOfferToMaster

-- | <i>See:</i> <a>newSendAlexaOfferToMaster</a> smart constructor.
data SendAlexaOfferToMaster
SendAlexaOfferToMaster' :: Text -> Text -> Text -> SendAlexaOfferToMaster

-- | The ARN of the signaling channel by which Alexa and the master peer
--   communicate.
[$sel:channelARN:SendAlexaOfferToMaster'] :: SendAlexaOfferToMaster -> Text

-- | The unique identifier for the sender client.
[$sel:senderClientId:SendAlexaOfferToMaster'] :: SendAlexaOfferToMaster -> Text

-- | The base64-encoded SDP offer content.
[$sel:messagePayload:SendAlexaOfferToMaster'] :: SendAlexaOfferToMaster -> Text

-- | Create a value of <a>SendAlexaOfferToMaster</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:channelARN:SendAlexaOfferToMaster'</a>,
--   <a>sendAlexaOfferToMaster_channelARN</a> - The ARN of the signaling
--   channel by which Alexa and the master peer communicate.
--   
--   <a>$sel:senderClientId:SendAlexaOfferToMaster'</a>,
--   <a>sendAlexaOfferToMaster_senderClientId</a> - The unique identifier
--   for the sender client.
--   
--   <a>$sel:messagePayload:SendAlexaOfferToMaster'</a>,
--   <a>sendAlexaOfferToMaster_messagePayload</a> - The base64-encoded SDP
--   offer content.
newSendAlexaOfferToMaster :: Text -> Text -> Text -> SendAlexaOfferToMaster

-- | The ARN of the signaling channel by which Alexa and the master peer
--   communicate.
sendAlexaOfferToMaster_channelARN :: Lens' SendAlexaOfferToMaster Text

-- | The unique identifier for the sender client.
sendAlexaOfferToMaster_senderClientId :: Lens' SendAlexaOfferToMaster Text

-- | The base64-encoded SDP offer content.
sendAlexaOfferToMaster_messagePayload :: Lens' SendAlexaOfferToMaster Text

-- | <i>See:</i> <a>newSendAlexaOfferToMasterResponse</a> smart
--   constructor.
data SendAlexaOfferToMasterResponse
SendAlexaOfferToMasterResponse' :: Maybe Text -> Int -> SendAlexaOfferToMasterResponse

-- | The base64-encoded SDP answer content.
[$sel:answer:SendAlexaOfferToMasterResponse'] :: SendAlexaOfferToMasterResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:SendAlexaOfferToMasterResponse'] :: SendAlexaOfferToMasterResponse -> Int

-- | Create a value of <a>SendAlexaOfferToMasterResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:answer:SendAlexaOfferToMasterResponse'</a>,
--   <a>sendAlexaOfferToMasterResponse_answer</a> - The base64-encoded SDP
--   answer content.
--   
--   <a>$sel:httpStatus:SendAlexaOfferToMasterResponse'</a>,
--   <a>sendAlexaOfferToMasterResponse_httpStatus</a> - The response's http
--   status code.
newSendAlexaOfferToMasterResponse :: Int -> SendAlexaOfferToMasterResponse

-- | The base64-encoded SDP answer content.
sendAlexaOfferToMasterResponse_answer :: Lens' SendAlexaOfferToMasterResponse (Maybe Text)

-- | The response's http status code.
sendAlexaOfferToMasterResponse_httpStatus :: Lens' SendAlexaOfferToMasterResponse Int
instance GHC.Generics.Generic Network.AWS.KinesisVideoSignaling.SendAlexaOfferToMaster.SendAlexaOfferToMaster
instance GHC.Show.Show Network.AWS.KinesisVideoSignaling.SendAlexaOfferToMaster.SendAlexaOfferToMaster
instance GHC.Read.Read Network.AWS.KinesisVideoSignaling.SendAlexaOfferToMaster.SendAlexaOfferToMaster
instance GHC.Classes.Eq Network.AWS.KinesisVideoSignaling.SendAlexaOfferToMaster.SendAlexaOfferToMaster
instance GHC.Generics.Generic Network.AWS.KinesisVideoSignaling.SendAlexaOfferToMaster.SendAlexaOfferToMasterResponse
instance GHC.Show.Show Network.AWS.KinesisVideoSignaling.SendAlexaOfferToMaster.SendAlexaOfferToMasterResponse
instance GHC.Read.Read Network.AWS.KinesisVideoSignaling.SendAlexaOfferToMaster.SendAlexaOfferToMasterResponse
instance GHC.Classes.Eq Network.AWS.KinesisVideoSignaling.SendAlexaOfferToMaster.SendAlexaOfferToMasterResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KinesisVideoSignaling.SendAlexaOfferToMaster.SendAlexaOfferToMaster
instance Control.DeepSeq.NFData Network.AWS.KinesisVideoSignaling.SendAlexaOfferToMaster.SendAlexaOfferToMasterResponse
instance Data.Hashable.Class.Hashable Network.AWS.KinesisVideoSignaling.SendAlexaOfferToMaster.SendAlexaOfferToMaster
instance Control.DeepSeq.NFData Network.AWS.KinesisVideoSignaling.SendAlexaOfferToMaster.SendAlexaOfferToMaster
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KinesisVideoSignaling.SendAlexaOfferToMaster.SendAlexaOfferToMaster
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KinesisVideoSignaling.SendAlexaOfferToMaster.SendAlexaOfferToMaster
instance Network.AWS.Data.Path.ToPath Network.AWS.KinesisVideoSignaling.SendAlexaOfferToMaster.SendAlexaOfferToMaster
instance Network.AWS.Data.Query.ToQuery Network.AWS.KinesisVideoSignaling.SendAlexaOfferToMaster.SendAlexaOfferToMaster


-- | Gets the Interactive Connectivity Establishment (ICE) server
--   configuration information, including URIs, username, and password
--   which can be used to configure the WebRTC connection. The ICE
--   component uses this configuration information to setup the WebRTC
--   connection, including authenticating with the Traversal Using Relays
--   around NAT (TURN) relay server.
--   
--   TURN is a protocol that is used to improve the connectivity of
--   peer-to-peer applications. By providing a cloud-based relay service,
--   TURN ensures that a connection can be established even when one or
--   more peers are incapable of a direct peer-to-peer connection. For more
--   information, see <a>A REST API For Access To TURN Services</a>.
--   
--   You can invoke this API to establish a fallback mechanism in case
--   either of the peers is unable to establish a direct peer-to-peer
--   connection over a signaling channel. You must specify either a
--   signaling channel ARN or the client ID in order to invoke this API.
module Network.AWS.KinesisVideoSignaling.GetIceServerConfig

-- | <i>See:</i> <a>newGetIceServerConfig</a> smart constructor.
data GetIceServerConfig
GetIceServerConfig' :: Maybe Text -> Maybe Service -> Maybe Text -> Text -> GetIceServerConfig

-- | Unique identifier for the viewer. Must be unique within the signaling
--   channel.
[$sel:clientId:GetIceServerConfig'] :: GetIceServerConfig -> Maybe Text

-- | Specifies the desired service. Currently, <tt>TURN</tt> is the only
--   valid value.
[$sel:service:GetIceServerConfig'] :: GetIceServerConfig -> Maybe Service

-- | An optional user ID to be associated with the credentials.
[$sel:username:GetIceServerConfig'] :: GetIceServerConfig -> Maybe Text

-- | The ARN of the signaling channel to be used for the peer-to-peer
--   connection between configured peers.
[$sel:channelARN:GetIceServerConfig'] :: GetIceServerConfig -> Text

-- | Create a value of <a>GetIceServerConfig</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:clientId:GetIceServerConfig'</a>,
--   <a>getIceServerConfig_clientId</a> - Unique identifier for the viewer.
--   Must be unique within the signaling channel.
--   
--   <a>$sel:service:GetIceServerConfig'</a>,
--   <a>getIceServerConfig_service</a> - Specifies the desired service.
--   Currently, <tt>TURN</tt> is the only valid value.
--   
--   <a>$sel:username:GetIceServerConfig'</a>,
--   <a>getIceServerConfig_username</a> - An optional user ID to be
--   associated with the credentials.
--   
--   <a>$sel:channelARN:GetIceServerConfig'</a>,
--   <a>getIceServerConfig_channelARN</a> - The ARN of the signaling
--   channel to be used for the peer-to-peer connection between configured
--   peers.
newGetIceServerConfig :: Text -> GetIceServerConfig

-- | Unique identifier for the viewer. Must be unique within the signaling
--   channel.
getIceServerConfig_clientId :: Lens' GetIceServerConfig (Maybe Text)

-- | Specifies the desired service. Currently, <tt>TURN</tt> is the only
--   valid value.
getIceServerConfig_service :: Lens' GetIceServerConfig (Maybe Service)

-- | An optional user ID to be associated with the credentials.
getIceServerConfig_username :: Lens' GetIceServerConfig (Maybe Text)

-- | The ARN of the signaling channel to be used for the peer-to-peer
--   connection between configured peers.
getIceServerConfig_channelARN :: Lens' GetIceServerConfig Text

-- | <i>See:</i> <a>newGetIceServerConfigResponse</a> smart constructor.
data GetIceServerConfigResponse
GetIceServerConfigResponse' :: Maybe [IceServer] -> Int -> GetIceServerConfigResponse

-- | The list of ICE server information objects.
[$sel:iceServerList:GetIceServerConfigResponse'] :: GetIceServerConfigResponse -> Maybe [IceServer]

-- | The response's http status code.
[$sel:httpStatus:GetIceServerConfigResponse'] :: GetIceServerConfigResponse -> Int

-- | Create a value of <a>GetIceServerConfigResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:iceServerList:GetIceServerConfigResponse'</a>,
--   <a>getIceServerConfigResponse_iceServerList</a> - The list of ICE
--   server information objects.
--   
--   <a>$sel:httpStatus:GetIceServerConfigResponse'</a>,
--   <a>getIceServerConfigResponse_httpStatus</a> - The response's http
--   status code.
newGetIceServerConfigResponse :: Int -> GetIceServerConfigResponse

-- | The list of ICE server information objects.
getIceServerConfigResponse_iceServerList :: Lens' GetIceServerConfigResponse (Maybe [IceServer])

-- | The response's http status code.
getIceServerConfigResponse_httpStatus :: Lens' GetIceServerConfigResponse Int
instance GHC.Generics.Generic Network.AWS.KinesisVideoSignaling.GetIceServerConfig.GetIceServerConfig
instance GHC.Show.Show Network.AWS.KinesisVideoSignaling.GetIceServerConfig.GetIceServerConfig
instance GHC.Read.Read Network.AWS.KinesisVideoSignaling.GetIceServerConfig.GetIceServerConfig
instance GHC.Classes.Eq Network.AWS.KinesisVideoSignaling.GetIceServerConfig.GetIceServerConfig
instance GHC.Generics.Generic Network.AWS.KinesisVideoSignaling.GetIceServerConfig.GetIceServerConfigResponse
instance GHC.Show.Show Network.AWS.KinesisVideoSignaling.GetIceServerConfig.GetIceServerConfigResponse
instance GHC.Read.Read Network.AWS.KinesisVideoSignaling.GetIceServerConfig.GetIceServerConfigResponse
instance GHC.Classes.Eq Network.AWS.KinesisVideoSignaling.GetIceServerConfig.GetIceServerConfigResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KinesisVideoSignaling.GetIceServerConfig.GetIceServerConfig
instance Control.DeepSeq.NFData Network.AWS.KinesisVideoSignaling.GetIceServerConfig.GetIceServerConfigResponse
instance Data.Hashable.Class.Hashable Network.AWS.KinesisVideoSignaling.GetIceServerConfig.GetIceServerConfig
instance Control.DeepSeq.NFData Network.AWS.KinesisVideoSignaling.GetIceServerConfig.GetIceServerConfig
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KinesisVideoSignaling.GetIceServerConfig.GetIceServerConfig
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KinesisVideoSignaling.GetIceServerConfig.GetIceServerConfig
instance Network.AWS.Data.Path.ToPath Network.AWS.KinesisVideoSignaling.GetIceServerConfig.GetIceServerConfig
instance Network.AWS.Data.Query.ToQuery Network.AWS.KinesisVideoSignaling.GetIceServerConfig.GetIceServerConfig


module Network.AWS.KinesisVideoSignaling.Lens

-- | The ARN of the signaling channel by which Alexa and the master peer
--   communicate.
sendAlexaOfferToMaster_channelARN :: Lens' SendAlexaOfferToMaster Text

-- | The unique identifier for the sender client.
sendAlexaOfferToMaster_senderClientId :: Lens' SendAlexaOfferToMaster Text

-- | The base64-encoded SDP offer content.
sendAlexaOfferToMaster_messagePayload :: Lens' SendAlexaOfferToMaster Text

-- | The base64-encoded SDP answer content.
sendAlexaOfferToMasterResponse_answer :: Lens' SendAlexaOfferToMasterResponse (Maybe Text)

-- | The response's http status code.
sendAlexaOfferToMasterResponse_httpStatus :: Lens' SendAlexaOfferToMasterResponse Int

-- | Unique identifier for the viewer. Must be unique within the signaling
--   channel.
getIceServerConfig_clientId :: Lens' GetIceServerConfig (Maybe Text)

-- | Specifies the desired service. Currently, <tt>TURN</tt> is the only
--   valid value.
getIceServerConfig_service :: Lens' GetIceServerConfig (Maybe Service)

-- | An optional user ID to be associated with the credentials.
getIceServerConfig_username :: Lens' GetIceServerConfig (Maybe Text)

-- | The ARN of the signaling channel to be used for the peer-to-peer
--   connection between configured peers.
getIceServerConfig_channelARN :: Lens' GetIceServerConfig Text

-- | The list of ICE server information objects.
getIceServerConfigResponse_iceServerList :: Lens' GetIceServerConfigResponse (Maybe [IceServer])

-- | The response's http status code.
getIceServerConfigResponse_httpStatus :: Lens' GetIceServerConfigResponse Int

-- | The period of time, in seconds, during which the username and password
--   are valid.
iceServer_ttl :: Lens' IceServer (Maybe Natural)

-- | An array of URIs, in the form specified in the
--   <a>I-D.petithuguenin-behave-turn-uris</a> spec. These URIs provide the
--   different addresses and/or protocols that can be used to reach the
--   TURN server.
iceServer_uris :: Lens' IceServer (Maybe [Text])

-- | A username to login to the ICE server.
iceServer_username :: Lens' IceServer (Maybe Text)

-- | A password to login to the ICE server.
iceServer_password :: Lens' IceServer (Maybe Text)


module Network.AWS.KinesisVideoSignaling.Waiters


-- | Derived from API version <tt>2019-12-04</tt> of the AWS service
--   descriptions, licensed under Apache 2.0.
--   
--   Kinesis Video Streams Signaling Service is a intermediate service that
--   establishes a communication channel for discovering peers,
--   transmitting offers and answers in order to establish peer-to-peer
--   connection in webRTC technology.
module Network.AWS.KinesisVideoSignaling

-- | API version <tt>2019-12-04</tt> of the Amazon Kinesis Video Signaling
--   Channels SDK configuration.
defaultService :: Service

-- | The value for this input parameter is invalid.
_InvalidArgumentException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The caller is not authorized to perform this operation.
_NotAuthorizedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Your request was throttled because you have exceeded the limit of
--   allowed client calls. Try making the call later.
_ClientLimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | If the client session is expired. Once the client is connected, the
--   session is valid for 45 minutes. Client should reconnect to the
--   channel to continue sending/receiving messages.
_SessionExpiredException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified client is invalid.
_InvalidClientException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified resource is not found.
_ResourceNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | <i>See:</i> <a>newSendAlexaOfferToMaster</a> smart constructor.
data SendAlexaOfferToMaster
SendAlexaOfferToMaster' :: Text -> Text -> Text -> SendAlexaOfferToMaster

-- | Create a value of <a>SendAlexaOfferToMaster</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:channelARN:SendAlexaOfferToMaster'</a>,
--   <a>sendAlexaOfferToMaster_channelARN</a> - The ARN of the signaling
--   channel by which Alexa and the master peer communicate.
--   
--   <a>$sel:senderClientId:SendAlexaOfferToMaster'</a>,
--   <a>sendAlexaOfferToMaster_senderClientId</a> - The unique identifier
--   for the sender client.
--   
--   <a>$sel:messagePayload:SendAlexaOfferToMaster'</a>,
--   <a>sendAlexaOfferToMaster_messagePayload</a> - The base64-encoded SDP
--   offer content.
newSendAlexaOfferToMaster :: Text -> Text -> Text -> SendAlexaOfferToMaster

-- | <i>See:</i> <a>newSendAlexaOfferToMasterResponse</a> smart
--   constructor.
data SendAlexaOfferToMasterResponse
SendAlexaOfferToMasterResponse' :: Maybe Text -> Int -> SendAlexaOfferToMasterResponse

-- | Create a value of <a>SendAlexaOfferToMasterResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:answer:SendAlexaOfferToMasterResponse'</a>,
--   <a>sendAlexaOfferToMasterResponse_answer</a> - The base64-encoded SDP
--   answer content.
--   
--   <a>$sel:httpStatus:SendAlexaOfferToMasterResponse'</a>,
--   <a>sendAlexaOfferToMasterResponse_httpStatus</a> - The response's http
--   status code.
newSendAlexaOfferToMasterResponse :: Int -> SendAlexaOfferToMasterResponse

-- | <i>See:</i> <a>newGetIceServerConfig</a> smart constructor.
data GetIceServerConfig
GetIceServerConfig' :: Maybe Text -> Maybe Service -> Maybe Text -> Text -> GetIceServerConfig

-- | Create a value of <a>GetIceServerConfig</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:clientId:GetIceServerConfig'</a>,
--   <a>getIceServerConfig_clientId</a> - Unique identifier for the viewer.
--   Must be unique within the signaling channel.
--   
--   <a>$sel:service:GetIceServerConfig'</a>,
--   <a>getIceServerConfig_service</a> - Specifies the desired service.
--   Currently, <tt>TURN</tt> is the only valid value.
--   
--   <a>$sel:username:GetIceServerConfig'</a>,
--   <a>getIceServerConfig_username</a> - An optional user ID to be
--   associated with the credentials.
--   
--   <a>$sel:channelARN:GetIceServerConfig'</a>,
--   <a>getIceServerConfig_channelARN</a> - The ARN of the signaling
--   channel to be used for the peer-to-peer connection between configured
--   peers.
newGetIceServerConfig :: Text -> GetIceServerConfig

-- | <i>See:</i> <a>newGetIceServerConfigResponse</a> smart constructor.
data GetIceServerConfigResponse
GetIceServerConfigResponse' :: Maybe [IceServer] -> Int -> GetIceServerConfigResponse

-- | Create a value of <a>GetIceServerConfigResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:iceServerList:GetIceServerConfigResponse'</a>,
--   <a>getIceServerConfigResponse_iceServerList</a> - The list of ICE
--   server information objects.
--   
--   <a>$sel:httpStatus:GetIceServerConfigResponse'</a>,
--   <a>getIceServerConfigResponse_httpStatus</a> - The response's http
--   status code.
newGetIceServerConfigResponse :: Int -> GetIceServerConfigResponse
newtype Service
Service' :: Text -> Service
[fromService] :: Service -> Text
pattern Service_TURN :: Service

-- | A structure for the ICE server connection data.
--   
--   <i>See:</i> <a>newIceServer</a> smart constructor.
data IceServer
IceServer' :: Maybe Natural -> Maybe [Text] -> Maybe Text -> Maybe Text -> IceServer

-- | Create a value of <a>IceServer</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:ttl:IceServer'</a>, <a>iceServer_ttl</a> - The period of time,
--   in seconds, during which the username and password are valid.
--   
--   <a>$sel:uris:IceServer'</a>, <a>iceServer_uris</a> - An array of URIs,
--   in the form specified in the <a>I-D.petithuguenin-behave-turn-uris</a>
--   spec. These URIs provide the different addresses and/or protocols that
--   can be used to reach the TURN server.
--   
--   <a>$sel:username:IceServer'</a>, <a>iceServer_username</a> - A
--   username to login to the ICE server.
--   
--   <a>$sel:password:IceServer'</a>, <a>iceServer_password</a> - A
--   password to login to the ICE server.
newIceServer :: IceServer
