-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/

@package libZSservicesZSamazonka-redshift-dataZSamazonka-redshift-data
@version 2.0


module Network.AWS.RedshiftData.Types.ColumnMetadata

-- | The properties (metadata) of a column.
--   
--   <i>See:</i> <a>newColumnMetadata</a> smart constructor.
data ColumnMetadata
ColumnMetadata' :: Maybe Int -> Maybe Text -> Maybe Bool -> Maybe Text -> Maybe Bool -> Maybe Int -> Maybe Int -> Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Text -> Maybe Int -> Maybe Text -> ColumnMetadata

-- | The length of the column.
[$sel:length:ColumnMetadata'] :: ColumnMetadata -> Maybe Int

-- | The database-specific data type of the column.
[$sel:typeName:ColumnMetadata'] :: ColumnMetadata -> Maybe Text

-- | A value that indicates whether the column is case-sensitive.
[$sel:isCaseSensitive:ColumnMetadata'] :: ColumnMetadata -> Maybe Bool

-- | The default value of the column.
[$sel:columnDefault:ColumnMetadata'] :: ColumnMetadata -> Maybe Text

-- | A value that indicates whether the column contains currency values.
[$sel:isCurrency:ColumnMetadata'] :: ColumnMetadata -> Maybe Bool

-- | The scale value of a decimal number column.
[$sel:scale:ColumnMetadata'] :: ColumnMetadata -> Maybe Int

-- | The precision value of a decimal number column.
[$sel:precision:ColumnMetadata'] :: ColumnMetadata -> Maybe Int

-- | The name of the schema that contains the table that includes the
--   column.
[$sel:schemaName:ColumnMetadata'] :: ColumnMetadata -> Maybe Text

-- | The name of the column.
[$sel:name:ColumnMetadata'] :: ColumnMetadata -> Maybe Text

-- | A value that indicates whether an integer column is signed.
[$sel:isSigned:ColumnMetadata'] :: ColumnMetadata -> Maybe Bool

-- | The label for the column.
[$sel:label:ColumnMetadata'] :: ColumnMetadata -> Maybe Text

-- | A value that indicates whether the column is nullable.
[$sel:nullable:ColumnMetadata'] :: ColumnMetadata -> Maybe Int

-- | The name of the table that includes the column.
[$sel:tableName:ColumnMetadata'] :: ColumnMetadata -> Maybe Text

-- | Create a value of <a>ColumnMetadata</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:length:ColumnMetadata'</a>, <a>columnMetadata_length</a> - The
--   length of the column.
--   
--   <a>$sel:typeName:ColumnMetadata'</a>, <a>columnMetadata_typeName</a> -
--   The database-specific data type of the column.
--   
--   <a>$sel:isCaseSensitive:ColumnMetadata'</a>,
--   <a>columnMetadata_isCaseSensitive</a> - A value that indicates whether
--   the column is case-sensitive.
--   
--   <a>$sel:columnDefault:ColumnMetadata'</a>,
--   <a>columnMetadata_columnDefault</a> - The default value of the column.
--   
--   <a>$sel:isCurrency:ColumnMetadata'</a>,
--   <a>columnMetadata_isCurrency</a> - A value that indicates whether the
--   column contains currency values.
--   
--   <a>$sel:scale:ColumnMetadata'</a>, <a>columnMetadata_scale</a> - The
--   scale value of a decimal number column.
--   
--   <a>$sel:precision:ColumnMetadata'</a>, <a>columnMetadata_precision</a>
--   - The precision value of a decimal number column.
--   
--   <a>$sel:schemaName:ColumnMetadata'</a>,
--   <a>columnMetadata_schemaName</a> - The name of the schema that
--   contains the table that includes the column.
--   
--   <a>$sel:name:ColumnMetadata'</a>, <a>columnMetadata_name</a> - The
--   name of the column.
--   
--   <a>$sel:isSigned:ColumnMetadata'</a>, <a>columnMetadata_isSigned</a> -
--   A value that indicates whether an integer column is signed.
--   
--   <a>$sel:label:ColumnMetadata'</a>, <a>columnMetadata_label</a> - The
--   label for the column.
--   
--   <a>$sel:nullable:ColumnMetadata'</a>, <a>columnMetadata_nullable</a> -
--   A value that indicates whether the column is nullable.
--   
--   <a>$sel:tableName:ColumnMetadata'</a>, <a>columnMetadata_tableName</a>
--   - The name of the table that includes the column.
newColumnMetadata :: ColumnMetadata

-- | The length of the column.
columnMetadata_length :: Lens' ColumnMetadata (Maybe Int)

-- | The database-specific data type of the column.
columnMetadata_typeName :: Lens' ColumnMetadata (Maybe Text)

-- | A value that indicates whether the column is case-sensitive.
columnMetadata_isCaseSensitive :: Lens' ColumnMetadata (Maybe Bool)

-- | The default value of the column.
columnMetadata_columnDefault :: Lens' ColumnMetadata (Maybe Text)

-- | A value that indicates whether the column contains currency values.
columnMetadata_isCurrency :: Lens' ColumnMetadata (Maybe Bool)

-- | The scale value of a decimal number column.
columnMetadata_scale :: Lens' ColumnMetadata (Maybe Int)

-- | The precision value of a decimal number column.
columnMetadata_precision :: Lens' ColumnMetadata (Maybe Int)

-- | The name of the schema that contains the table that includes the
--   column.
columnMetadata_schemaName :: Lens' ColumnMetadata (Maybe Text)

-- | The name of the column.
columnMetadata_name :: Lens' ColumnMetadata (Maybe Text)

-- | A value that indicates whether an integer column is signed.
columnMetadata_isSigned :: Lens' ColumnMetadata (Maybe Bool)

-- | The label for the column.
columnMetadata_label :: Lens' ColumnMetadata (Maybe Text)

-- | A value that indicates whether the column is nullable.
columnMetadata_nullable :: Lens' ColumnMetadata (Maybe Int)

-- | The name of the table that includes the column.
columnMetadata_tableName :: Lens' ColumnMetadata (Maybe Text)
instance GHC.Generics.Generic Network.AWS.RedshiftData.Types.ColumnMetadata.ColumnMetadata
instance GHC.Show.Show Network.AWS.RedshiftData.Types.ColumnMetadata.ColumnMetadata
instance GHC.Read.Read Network.AWS.RedshiftData.Types.ColumnMetadata.ColumnMetadata
instance GHC.Classes.Eq Network.AWS.RedshiftData.Types.ColumnMetadata.ColumnMetadata
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.RedshiftData.Types.ColumnMetadata.ColumnMetadata
instance Data.Hashable.Class.Hashable Network.AWS.RedshiftData.Types.ColumnMetadata.ColumnMetadata
instance Control.DeepSeq.NFData Network.AWS.RedshiftData.Types.ColumnMetadata.ColumnMetadata


module Network.AWS.RedshiftData.Types.Field

-- | A data value in a column.
--   
--   <i>See:</i> <a>newField</a> smart constructor.
data Field
Field' :: Maybe Double -> Maybe Text -> Maybe Integer -> Maybe Bool -> Maybe Base64 -> Maybe Bool -> Field

-- | A value of the double data type.
[$sel:doubleValue:Field'] :: Field -> Maybe Double

-- | A value of the string data type.
[$sel:stringValue:Field'] :: Field -> Maybe Text

-- | A value of the long data type.
[$sel:longValue:Field'] :: Field -> Maybe Integer

-- | A value of the Boolean data type.
[$sel:booleanValue:Field'] :: Field -> Maybe Bool

-- | A value of the BLOB data type.
[$sel:blobValue:Field'] :: Field -> Maybe Base64

-- | A value that indicates whether the data is NULL.
[$sel:isNull:Field'] :: Field -> Maybe Bool

-- | Create a value of <a>Field</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:doubleValue:Field'</a>, <a>field_doubleValue</a> - A value of
--   the double data type.
--   
--   <a>$sel:stringValue:Field'</a>, <a>field_stringValue</a> - A value of
--   the string data type.
--   
--   <a>$sel:longValue:Field'</a>, <a>field_longValue</a> - A value of the
--   long data type.
--   
--   <a>$sel:booleanValue:Field'</a>, <a>field_booleanValue</a> - A value
--   of the Boolean data type.
--   
--   <a>$sel:blobValue:Field'</a>, <a>field_blobValue</a> - A value of the
--   BLOB data type.-- -- <i>Note:</i> This <tt>Lens</tt> automatically
--   encodes and decodes Base64 data. -- The underlying isomorphism will
--   encode to Base64 representation during -- serialisation, and decode
--   from Base64 representation during deserialisation. -- This
--   <tt>Lens</tt> accepts and returns only raw unencoded data.
--   
--   <a>$sel:isNull:Field'</a>, <a>field_isNull</a> - A value that
--   indicates whether the data is NULL.
newField :: Field

-- | A value of the double data type.
field_doubleValue :: Lens' Field (Maybe Double)

-- | A value of the string data type.
field_stringValue :: Lens' Field (Maybe Text)

-- | A value of the long data type.
field_longValue :: Lens' Field (Maybe Integer)

-- | A value of the Boolean data type.
field_booleanValue :: Lens' Field (Maybe Bool)

-- | A value of the BLOB data type.-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
field_blobValue :: Lens' Field (Maybe ByteString)

-- | A value that indicates whether the data is NULL.
field_isNull :: Lens' Field (Maybe Bool)
instance GHC.Generics.Generic Network.AWS.RedshiftData.Types.Field.Field
instance GHC.Show.Show Network.AWS.RedshiftData.Types.Field.Field
instance GHC.Read.Read Network.AWS.RedshiftData.Types.Field.Field
instance GHC.Classes.Eq Network.AWS.RedshiftData.Types.Field.Field
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.RedshiftData.Types.Field.Field
instance Data.Hashable.Class.Hashable Network.AWS.RedshiftData.Types.Field.Field
instance Control.DeepSeq.NFData Network.AWS.RedshiftData.Types.Field.Field


module Network.AWS.RedshiftData.Types.SqlParameter

-- | A parameter used in a SQL statement.
--   
--   <i>See:</i> <a>newSqlParameter</a> smart constructor.
data SqlParameter
SqlParameter' :: Text -> Text -> SqlParameter

-- | The name of the parameter.
[$sel:name:SqlParameter'] :: SqlParameter -> Text

-- | The value of the parameter. Amazon Redshift implicitly converts to the
--   proper data type. For more inforation, see <a>Data types</a> in the
--   <i>Amazon Redshift Database Developer Guide</i>.
[$sel:value:SqlParameter'] :: SqlParameter -> Text

-- | Create a value of <a>SqlParameter</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:name:SqlParameter'</a>, <a>sqlParameter_name</a> - The name of
--   the parameter.
--   
--   <a>$sel:value:SqlParameter'</a>, <a>sqlParameter_value</a> - The value
--   of the parameter. Amazon Redshift implicitly converts to the proper
--   data type. For more inforation, see <a>Data types</a> in the <i>Amazon
--   Redshift Database Developer Guide</i>.
newSqlParameter :: Text -> Text -> SqlParameter

-- | The name of the parameter.
sqlParameter_name :: Lens' SqlParameter Text

-- | The value of the parameter. Amazon Redshift implicitly converts to the
--   proper data type. For more inforation, see <a>Data types</a> in the
--   <i>Amazon Redshift Database Developer Guide</i>.
sqlParameter_value :: Lens' SqlParameter Text
instance GHC.Generics.Generic Network.AWS.RedshiftData.Types.SqlParameter.SqlParameter
instance GHC.Show.Show Network.AWS.RedshiftData.Types.SqlParameter.SqlParameter
instance GHC.Read.Read Network.AWS.RedshiftData.Types.SqlParameter.SqlParameter
instance GHC.Classes.Eq Network.AWS.RedshiftData.Types.SqlParameter.SqlParameter
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.RedshiftData.Types.SqlParameter.SqlParameter
instance Data.Hashable.Class.Hashable Network.AWS.RedshiftData.Types.SqlParameter.SqlParameter
instance Control.DeepSeq.NFData Network.AWS.RedshiftData.Types.SqlParameter.SqlParameter
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.RedshiftData.Types.SqlParameter.SqlParameter


module Network.AWS.RedshiftData.Types.StatementStatusString
newtype StatementStatusString
StatementStatusString' :: Text -> StatementStatusString
[fromStatementStatusString] :: StatementStatusString -> Text
pattern StatementStatusString_ABORTED :: StatementStatusString
pattern StatementStatusString_FAILED :: StatementStatusString
pattern StatementStatusString_FINISHED :: StatementStatusString
pattern StatementStatusString_PICKED :: StatementStatusString
pattern StatementStatusString_STARTED :: StatementStatusString
pattern StatementStatusString_SUBMITTED :: StatementStatusString
instance Network.AWS.Data.XML.ToXML Network.AWS.RedshiftData.Types.StatementStatusString.StatementStatusString
instance Network.AWS.Data.XML.FromXML Network.AWS.RedshiftData.Types.StatementStatusString.StatementStatusString
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.RedshiftData.Types.StatementStatusString.StatementStatusString
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.RedshiftData.Types.StatementStatusString.StatementStatusString
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.RedshiftData.Types.StatementStatusString.StatementStatusString
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.RedshiftData.Types.StatementStatusString.StatementStatusString
instance Network.AWS.Data.Query.ToQuery Network.AWS.RedshiftData.Types.StatementStatusString.StatementStatusString
instance Network.AWS.Data.Headers.ToHeader Network.AWS.RedshiftData.Types.StatementStatusString.StatementStatusString
instance Network.AWS.Data.Log.ToLog Network.AWS.RedshiftData.Types.StatementStatusString.StatementStatusString
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.RedshiftData.Types.StatementStatusString.StatementStatusString
instance Network.AWS.Data.Text.ToText Network.AWS.RedshiftData.Types.StatementStatusString.StatementStatusString
instance Network.AWS.Data.Text.FromText Network.AWS.RedshiftData.Types.StatementStatusString.StatementStatusString
instance Control.DeepSeq.NFData Network.AWS.RedshiftData.Types.StatementStatusString.StatementStatusString
instance Data.Hashable.Class.Hashable Network.AWS.RedshiftData.Types.StatementStatusString.StatementStatusString
instance GHC.Generics.Generic Network.AWS.RedshiftData.Types.StatementStatusString.StatementStatusString
instance GHC.Classes.Ord Network.AWS.RedshiftData.Types.StatementStatusString.StatementStatusString
instance GHC.Classes.Eq Network.AWS.RedshiftData.Types.StatementStatusString.StatementStatusString
instance GHC.Read.Read Network.AWS.RedshiftData.Types.StatementStatusString.StatementStatusString
instance GHC.Show.Show Network.AWS.RedshiftData.Types.StatementStatusString.StatementStatusString


module Network.AWS.RedshiftData.Types.StatusString
newtype StatusString
StatusString' :: Text -> StatusString
[fromStatusString] :: StatusString -> Text
pattern StatusString_ABORTED :: StatusString
pattern StatusString_ALL :: StatusString
pattern StatusString_FAILED :: StatusString
pattern StatusString_FINISHED :: StatusString
pattern StatusString_PICKED :: StatusString
pattern StatusString_STARTED :: StatusString
pattern StatusString_SUBMITTED :: StatusString
instance Network.AWS.Data.XML.ToXML Network.AWS.RedshiftData.Types.StatusString.StatusString
instance Network.AWS.Data.XML.FromXML Network.AWS.RedshiftData.Types.StatusString.StatusString
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.RedshiftData.Types.StatusString.StatusString
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.RedshiftData.Types.StatusString.StatusString
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.RedshiftData.Types.StatusString.StatusString
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.RedshiftData.Types.StatusString.StatusString
instance Network.AWS.Data.Query.ToQuery Network.AWS.RedshiftData.Types.StatusString.StatusString
instance Network.AWS.Data.Headers.ToHeader Network.AWS.RedshiftData.Types.StatusString.StatusString
instance Network.AWS.Data.Log.ToLog Network.AWS.RedshiftData.Types.StatusString.StatusString
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.RedshiftData.Types.StatusString.StatusString
instance Network.AWS.Data.Text.ToText Network.AWS.RedshiftData.Types.StatusString.StatusString
instance Network.AWS.Data.Text.FromText Network.AWS.RedshiftData.Types.StatusString.StatusString
instance Control.DeepSeq.NFData Network.AWS.RedshiftData.Types.StatusString.StatusString
instance Data.Hashable.Class.Hashable Network.AWS.RedshiftData.Types.StatusString.StatusString
instance GHC.Generics.Generic Network.AWS.RedshiftData.Types.StatusString.StatusString
instance GHC.Classes.Ord Network.AWS.RedshiftData.Types.StatusString.StatusString
instance GHC.Classes.Eq Network.AWS.RedshiftData.Types.StatusString.StatusString
instance GHC.Read.Read Network.AWS.RedshiftData.Types.StatusString.StatusString
instance GHC.Show.Show Network.AWS.RedshiftData.Types.StatusString.StatusString


module Network.AWS.RedshiftData.Types.StatementData

-- | The SQL statement to run.
--   
--   <i>See:</i> <a>newStatementData</a> smart constructor.
data StatementData
StatementData' :: Maybe StatusString -> Maybe POSIX -> Maybe (NonEmpty SqlParameter) -> Maybe [Text] -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe Bool -> Text -> StatementData

-- | The status of the SQL statement. An example is the that the SQL
--   statement finished.
[$sel:status:StatementData'] :: StatementData -> Maybe StatusString

-- | The date and time (UTC) the statement was created.
[$sel:createdAt:StatementData'] :: StatementData -> Maybe POSIX

-- | The parameters used in a SQL statement.
[$sel:queryParameters:StatementData'] :: StatementData -> Maybe (NonEmpty SqlParameter)

-- | One or more SQL statements. Each query string in the array corresponds
--   to one of the queries in a batch query request.
[$sel:queryStrings:StatementData'] :: StatementData -> Maybe [Text]

-- | The SQL statement.
[$sel:queryString:StatementData'] :: StatementData -> Maybe Text

-- | The name of the SQL statement.
[$sel:statementName:StatementData'] :: StatementData -> Maybe Text

-- | The date and time (UTC) that the statement metadata was last updated.
[$sel:updatedAt:StatementData'] :: StatementData -> Maybe POSIX

-- | The name or Amazon Resource Name (ARN) of the secret that enables
--   access to the database.
[$sel:secretArn:StatementData'] :: StatementData -> Maybe Text

-- | A value that indicates whether the statement is a batch query request.
[$sel:isBatchStatement:StatementData'] :: StatementData -> Maybe Bool

-- | The SQL statement identifier. This value is a universally unique
--   identifier (UUID) generated by Amazon Redshift Data API.
[$sel:id:StatementData'] :: StatementData -> Text

-- | Create a value of <a>StatementData</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:StatementData'</a>, <a>statementData_status</a> - The
--   status of the SQL statement. An example is the that the SQL statement
--   finished.
--   
--   <a>$sel:createdAt:StatementData'</a>, <a>statementData_createdAt</a> -
--   The date and time (UTC) the statement was created.
--   
--   <a>$sel:queryParameters:StatementData'</a>,
--   <a>statementData_queryParameters</a> - The parameters used in a SQL
--   statement.
--   
--   <a>$sel:queryStrings:StatementData'</a>,
--   <a>statementData_queryStrings</a> - One or more SQL statements. Each
--   query string in the array corresponds to one of the queries in a batch
--   query request.
--   
--   <a>$sel:queryString:StatementData'</a>,
--   <a>statementData_queryString</a> - The SQL statement.
--   
--   <a>$sel:statementName:StatementData'</a>,
--   <a>statementData_statementName</a> - The name of the SQL statement.
--   
--   <a>$sel:updatedAt:StatementData'</a>, <a>statementData_updatedAt</a> -
--   The date and time (UTC) that the statement metadata was last updated.
--   
--   <a>$sel:secretArn:StatementData'</a>, <a>statementData_secretArn</a> -
--   The name or Amazon Resource Name (ARN) of the secret that enables
--   access to the database.
--   
--   <a>$sel:isBatchStatement:StatementData'</a>,
--   <a>statementData_isBatchStatement</a> - A value that indicates whether
--   the statement is a batch query request.
--   
--   <a>$sel:id:StatementData'</a>, <a>statementData_id</a> - The SQL
--   statement identifier. This value is a universally unique identifier
--   (UUID) generated by Amazon Redshift Data API.
newStatementData :: Text -> StatementData

-- | The status of the SQL statement. An example is the that the SQL
--   statement finished.
statementData_status :: Lens' StatementData (Maybe StatusString)

-- | The date and time (UTC) the statement was created.
statementData_createdAt :: Lens' StatementData (Maybe UTCTime)

-- | The parameters used in a SQL statement.
statementData_queryParameters :: Lens' StatementData (Maybe (NonEmpty SqlParameter))

-- | One or more SQL statements. Each query string in the array corresponds
--   to one of the queries in a batch query request.
statementData_queryStrings :: Lens' StatementData (Maybe [Text])

-- | The SQL statement.
statementData_queryString :: Lens' StatementData (Maybe Text)

-- | The name of the SQL statement.
statementData_statementName :: Lens' StatementData (Maybe Text)

-- | The date and time (UTC) that the statement metadata was last updated.
statementData_updatedAt :: Lens' StatementData (Maybe UTCTime)

-- | The name or Amazon Resource Name (ARN) of the secret that enables
--   access to the database.
statementData_secretArn :: Lens' StatementData (Maybe Text)

-- | A value that indicates whether the statement is a batch query request.
statementData_isBatchStatement :: Lens' StatementData (Maybe Bool)

-- | The SQL statement identifier. This value is a universally unique
--   identifier (UUID) generated by Amazon Redshift Data API.
statementData_id :: Lens' StatementData Text
instance GHC.Generics.Generic Network.AWS.RedshiftData.Types.StatementData.StatementData
instance GHC.Show.Show Network.AWS.RedshiftData.Types.StatementData.StatementData
instance GHC.Read.Read Network.AWS.RedshiftData.Types.StatementData.StatementData
instance GHC.Classes.Eq Network.AWS.RedshiftData.Types.StatementData.StatementData
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.RedshiftData.Types.StatementData.StatementData
instance Data.Hashable.Class.Hashable Network.AWS.RedshiftData.Types.StatementData.StatementData
instance Control.DeepSeq.NFData Network.AWS.RedshiftData.Types.StatementData.StatementData


module Network.AWS.RedshiftData.Types.SubStatementData

-- | Information about an SQL statement.
--   
--   <i>See:</i> <a>newSubStatementData</a> smart constructor.
data SubStatementData
SubStatementData' :: Maybe StatementStatusString -> Maybe Integer -> Maybe Integer -> Maybe POSIX -> Maybe Text -> Maybe Integer -> Maybe Bool -> Maybe Text -> Maybe POSIX -> Maybe Integer -> Text -> SubStatementData

-- | The status of the SQL statement. An example is the that the SQL
--   statement finished.
[$sel:status:SubStatementData'] :: SubStatementData -> Maybe StatementStatusString

-- | The SQL statement identifier. This value is a universally unique
--   identifier (UUID) generated by Amazon Redshift Data API.
[$sel:redshiftQueryId:SubStatementData'] :: SubStatementData -> Maybe Integer

-- | The size in bytes of the returned results. A <tt>-1</tt> indicates the
--   value is null.
[$sel:resultSize:SubStatementData'] :: SubStatementData -> Maybe Integer

-- | The date and time (UTC) the statement was created.
[$sel:createdAt:SubStatementData'] :: SubStatementData -> Maybe POSIX

-- | The error message from the cluster if the SQL statement encountered an
--   error while running.
[$sel:error:SubStatementData'] :: SubStatementData -> Maybe Text

-- | Either the number of rows returned from the SQL statement or the
--   number of rows affected. If result size is greater than zero, the
--   result rows can be the number of rows affected by SQL statements such
--   as INSERT, UPDATE, DELETE, COPY, and others. A <tt>-1</tt> indicates
--   the value is null.
[$sel:resultRows:SubStatementData'] :: SubStatementData -> Maybe Integer

-- | A value that indicates whether the statement has a result set. The
--   result set can be empty.
[$sel:hasResultSet:SubStatementData'] :: SubStatementData -> Maybe Bool

-- | The SQL statement text.
[$sel:queryString:SubStatementData'] :: SubStatementData -> Maybe Text

-- | The date and time (UTC) that the statement metadata was last updated.
[$sel:updatedAt:SubStatementData'] :: SubStatementData -> Maybe POSIX

-- | The amount of time in nanoseconds that the statement ran.
[$sel:duration:SubStatementData'] :: SubStatementData -> Maybe Integer

-- | The identifier of the SQL statement. This value is a universally
--   unique identifier (UUID) generated by Amazon Redshift Data API. A
--   suffix indicates the number of the SQL statement. For example,
--   <tt>d9b6c0c9-0747-4bf4-b142-e8883122f766:2</tt> has a suffix of
--   <tt>:2</tt> that indicates the second SQL statement of a batch query.
[$sel:id:SubStatementData'] :: SubStatementData -> Text

-- | Create a value of <a>SubStatementData</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:SubStatementData'</a>, <a>subStatementData_status</a> -
--   The status of the SQL statement. An example is the that the SQL
--   statement finished.
--   
--   <a>$sel:redshiftQueryId:SubStatementData'</a>,
--   <a>subStatementData_redshiftQueryId</a> - The SQL statement
--   identifier. This value is a universally unique identifier (UUID)
--   generated by Amazon Redshift Data API.
--   
--   <a>$sel:resultSize:SubStatementData'</a>,
--   <a>subStatementData_resultSize</a> - The size in bytes of the returned
--   results. A <tt>-1</tt> indicates the value is null.
--   
--   <a>$sel:createdAt:SubStatementData'</a>,
--   <a>subStatementData_createdAt</a> - The date and time (UTC) the
--   statement was created.
--   
--   <a>$sel:error:SubStatementData'</a>, <a>subStatementData_error</a> -
--   The error message from the cluster if the SQL statement encountered an
--   error while running.
--   
--   <a>$sel:resultRows:SubStatementData'</a>,
--   <a>subStatementData_resultRows</a> - Either the number of rows
--   returned from the SQL statement or the number of rows affected. If
--   result size is greater than zero, the result rows can be the number of
--   rows affected by SQL statements such as INSERT, UPDATE, DELETE, COPY,
--   and others. A <tt>-1</tt> indicates the value is null.
--   
--   <a>$sel:hasResultSet:SubStatementData'</a>,
--   <a>subStatementData_hasResultSet</a> - A value that indicates whether
--   the statement has a result set. The result set can be empty.
--   
--   <a>$sel:queryString:SubStatementData'</a>,
--   <a>subStatementData_queryString</a> - The SQL statement text.
--   
--   <a>$sel:updatedAt:SubStatementData'</a>,
--   <a>subStatementData_updatedAt</a> - The date and time (UTC) that the
--   statement metadata was last updated.
--   
--   <a>$sel:duration:SubStatementData'</a>,
--   <a>subStatementData_duration</a> - The amount of time in nanoseconds
--   that the statement ran.
--   
--   <a>$sel:id:SubStatementData'</a>, <a>subStatementData_id</a> - The
--   identifier of the SQL statement. This value is a universally unique
--   identifier (UUID) generated by Amazon Redshift Data API. A suffix
--   indicates the number of the SQL statement. For example,
--   <tt>d9b6c0c9-0747-4bf4-b142-e8883122f766:2</tt> has a suffix of
--   <tt>:2</tt> that indicates the second SQL statement of a batch query.
newSubStatementData :: Text -> SubStatementData

-- | The status of the SQL statement. An example is the that the SQL
--   statement finished.
subStatementData_status :: Lens' SubStatementData (Maybe StatementStatusString)

-- | The SQL statement identifier. This value is a universally unique
--   identifier (UUID) generated by Amazon Redshift Data API.
subStatementData_redshiftQueryId :: Lens' SubStatementData (Maybe Integer)

-- | The size in bytes of the returned results. A <tt>-1</tt> indicates the
--   value is null.
subStatementData_resultSize :: Lens' SubStatementData (Maybe Integer)

-- | The date and time (UTC) the statement was created.
subStatementData_createdAt :: Lens' SubStatementData (Maybe UTCTime)

-- | The error message from the cluster if the SQL statement encountered an
--   error while running.
subStatementData_error :: Lens' SubStatementData (Maybe Text)

-- | Either the number of rows returned from the SQL statement or the
--   number of rows affected. If result size is greater than zero, the
--   result rows can be the number of rows affected by SQL statements such
--   as INSERT, UPDATE, DELETE, COPY, and others. A <tt>-1</tt> indicates
--   the value is null.
subStatementData_resultRows :: Lens' SubStatementData (Maybe Integer)

-- | A value that indicates whether the statement has a result set. The
--   result set can be empty.
subStatementData_hasResultSet :: Lens' SubStatementData (Maybe Bool)

-- | The SQL statement text.
subStatementData_queryString :: Lens' SubStatementData (Maybe Text)

-- | The date and time (UTC) that the statement metadata was last updated.
subStatementData_updatedAt :: Lens' SubStatementData (Maybe UTCTime)

-- | The amount of time in nanoseconds that the statement ran.
subStatementData_duration :: Lens' SubStatementData (Maybe Integer)

-- | The identifier of the SQL statement. This value is a universally
--   unique identifier (UUID) generated by Amazon Redshift Data API. A
--   suffix indicates the number of the SQL statement. For example,
--   <tt>d9b6c0c9-0747-4bf4-b142-e8883122f766:2</tt> has a suffix of
--   <tt>:2</tt> that indicates the second SQL statement of a batch query.
subStatementData_id :: Lens' SubStatementData Text
instance GHC.Generics.Generic Network.AWS.RedshiftData.Types.SubStatementData.SubStatementData
instance GHC.Show.Show Network.AWS.RedshiftData.Types.SubStatementData.SubStatementData
instance GHC.Read.Read Network.AWS.RedshiftData.Types.SubStatementData.SubStatementData
instance GHC.Classes.Eq Network.AWS.RedshiftData.Types.SubStatementData.SubStatementData
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.RedshiftData.Types.SubStatementData.SubStatementData
instance Data.Hashable.Class.Hashable Network.AWS.RedshiftData.Types.SubStatementData.SubStatementData
instance Control.DeepSeq.NFData Network.AWS.RedshiftData.Types.SubStatementData.SubStatementData


module Network.AWS.RedshiftData.Types.TableMember

-- | The properties of a table.
--   
--   <i>See:</i> <a>newTableMember</a> smart constructor.
data TableMember
TableMember' :: Maybe Text -> Maybe Text -> Maybe Text -> TableMember

-- | The schema containing the table.
[$sel:schema:TableMember'] :: TableMember -> Maybe Text

-- | The name of the table.
[$sel:name:TableMember'] :: TableMember -> Maybe Text

-- | The type of the table. Possible values include TABLE, VIEW, SYSTEM
--   TABLE, GLOBAL TEMPORARY, LOCAL TEMPORARY, ALIAS, and SYNONYM.
[$sel:type':TableMember'] :: TableMember -> Maybe Text

-- | Create a value of <a>TableMember</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:schema:TableMember'</a>, <a>tableMember_schema</a> - The
--   schema containing the table.
--   
--   <a>$sel:name:TableMember'</a>, <a>tableMember_name</a> - The name of
--   the table.
--   
--   <a>$sel:type':TableMember'</a>, <a>tableMember_type</a> - The type of
--   the table. Possible values include TABLE, VIEW, SYSTEM TABLE, GLOBAL
--   TEMPORARY, LOCAL TEMPORARY, ALIAS, and SYNONYM.
newTableMember :: TableMember

-- | The schema containing the table.
tableMember_schema :: Lens' TableMember (Maybe Text)

-- | The name of the table.
tableMember_name :: Lens' TableMember (Maybe Text)

-- | The type of the table. Possible values include TABLE, VIEW, SYSTEM
--   TABLE, GLOBAL TEMPORARY, LOCAL TEMPORARY, ALIAS, and SYNONYM.
tableMember_type :: Lens' TableMember (Maybe Text)
instance GHC.Generics.Generic Network.AWS.RedshiftData.Types.TableMember.TableMember
instance GHC.Show.Show Network.AWS.RedshiftData.Types.TableMember.TableMember
instance GHC.Read.Read Network.AWS.RedshiftData.Types.TableMember.TableMember
instance GHC.Classes.Eq Network.AWS.RedshiftData.Types.TableMember.TableMember
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.RedshiftData.Types.TableMember.TableMember
instance Data.Hashable.Class.Hashable Network.AWS.RedshiftData.Types.TableMember.TableMember
instance Control.DeepSeq.NFData Network.AWS.RedshiftData.Types.TableMember.TableMember


module Network.AWS.RedshiftData.Types

-- | API version <tt>2019-12-20</tt> of the Amazon Redshift Data API
--   Service SDK configuration.
defaultService :: Service

-- | The Amazon Redshift Data API operation failed due to invalid input.
_ValidationException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The SQL statement encountered an environmental error while running.
_ExecuteStatementException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The Amazon Redshift Data API operation failed due to invalid input.
_InternalServerException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The number of active statements exceeds the limit.
_ActiveStatementsExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The Amazon Redshift Data API operation failed due to a missing
--   resource.
_ResourceNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | An SQL statement encountered an environmental error while running.
_BatchExecuteStatementException :: AsError a => Getting (First ServiceError) a ServiceError
newtype StatementStatusString
StatementStatusString' :: Text -> StatementStatusString
[fromStatementStatusString] :: StatementStatusString -> Text
pattern StatementStatusString_ABORTED :: StatementStatusString
pattern StatementStatusString_FAILED :: StatementStatusString
pattern StatementStatusString_FINISHED :: StatementStatusString
pattern StatementStatusString_PICKED :: StatementStatusString
pattern StatementStatusString_STARTED :: StatementStatusString
pattern StatementStatusString_SUBMITTED :: StatementStatusString
newtype StatusString
StatusString' :: Text -> StatusString
[fromStatusString] :: StatusString -> Text
pattern StatusString_ABORTED :: StatusString
pattern StatusString_ALL :: StatusString
pattern StatusString_FAILED :: StatusString
pattern StatusString_FINISHED :: StatusString
pattern StatusString_PICKED :: StatusString
pattern StatusString_STARTED :: StatusString
pattern StatusString_SUBMITTED :: StatusString

-- | The properties (metadata) of a column.
--   
--   <i>See:</i> <a>newColumnMetadata</a> smart constructor.
data ColumnMetadata
ColumnMetadata' :: Maybe Int -> Maybe Text -> Maybe Bool -> Maybe Text -> Maybe Bool -> Maybe Int -> Maybe Int -> Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Text -> Maybe Int -> Maybe Text -> ColumnMetadata

-- | The length of the column.
[$sel:length:ColumnMetadata'] :: ColumnMetadata -> Maybe Int

-- | The database-specific data type of the column.
[$sel:typeName:ColumnMetadata'] :: ColumnMetadata -> Maybe Text

-- | A value that indicates whether the column is case-sensitive.
[$sel:isCaseSensitive:ColumnMetadata'] :: ColumnMetadata -> Maybe Bool

-- | The default value of the column.
[$sel:columnDefault:ColumnMetadata'] :: ColumnMetadata -> Maybe Text

-- | A value that indicates whether the column contains currency values.
[$sel:isCurrency:ColumnMetadata'] :: ColumnMetadata -> Maybe Bool

-- | The scale value of a decimal number column.
[$sel:scale:ColumnMetadata'] :: ColumnMetadata -> Maybe Int

-- | The precision value of a decimal number column.
[$sel:precision:ColumnMetadata'] :: ColumnMetadata -> Maybe Int

-- | The name of the schema that contains the table that includes the
--   column.
[$sel:schemaName:ColumnMetadata'] :: ColumnMetadata -> Maybe Text

-- | The name of the column.
[$sel:name:ColumnMetadata'] :: ColumnMetadata -> Maybe Text

-- | A value that indicates whether an integer column is signed.
[$sel:isSigned:ColumnMetadata'] :: ColumnMetadata -> Maybe Bool

-- | The label for the column.
[$sel:label:ColumnMetadata'] :: ColumnMetadata -> Maybe Text

-- | A value that indicates whether the column is nullable.
[$sel:nullable:ColumnMetadata'] :: ColumnMetadata -> Maybe Int

-- | The name of the table that includes the column.
[$sel:tableName:ColumnMetadata'] :: ColumnMetadata -> Maybe Text

-- | Create a value of <a>ColumnMetadata</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:length:ColumnMetadata'</a>, <a>columnMetadata_length</a> - The
--   length of the column.
--   
--   <a>$sel:typeName:ColumnMetadata'</a>, <a>columnMetadata_typeName</a> -
--   The database-specific data type of the column.
--   
--   <a>$sel:isCaseSensitive:ColumnMetadata'</a>,
--   <a>columnMetadata_isCaseSensitive</a> - A value that indicates whether
--   the column is case-sensitive.
--   
--   <a>$sel:columnDefault:ColumnMetadata'</a>,
--   <a>columnMetadata_columnDefault</a> - The default value of the column.
--   
--   <a>$sel:isCurrency:ColumnMetadata'</a>,
--   <a>columnMetadata_isCurrency</a> - A value that indicates whether the
--   column contains currency values.
--   
--   <a>$sel:scale:ColumnMetadata'</a>, <a>columnMetadata_scale</a> - The
--   scale value of a decimal number column.
--   
--   <a>$sel:precision:ColumnMetadata'</a>, <a>columnMetadata_precision</a>
--   - The precision value of a decimal number column.
--   
--   <a>$sel:schemaName:ColumnMetadata'</a>,
--   <a>columnMetadata_schemaName</a> - The name of the schema that
--   contains the table that includes the column.
--   
--   <a>$sel:name:ColumnMetadata'</a>, <a>columnMetadata_name</a> - The
--   name of the column.
--   
--   <a>$sel:isSigned:ColumnMetadata'</a>, <a>columnMetadata_isSigned</a> -
--   A value that indicates whether an integer column is signed.
--   
--   <a>$sel:label:ColumnMetadata'</a>, <a>columnMetadata_label</a> - The
--   label for the column.
--   
--   <a>$sel:nullable:ColumnMetadata'</a>, <a>columnMetadata_nullable</a> -
--   A value that indicates whether the column is nullable.
--   
--   <a>$sel:tableName:ColumnMetadata'</a>, <a>columnMetadata_tableName</a>
--   - The name of the table that includes the column.
newColumnMetadata :: ColumnMetadata

-- | The length of the column.
columnMetadata_length :: Lens' ColumnMetadata (Maybe Int)

-- | The database-specific data type of the column.
columnMetadata_typeName :: Lens' ColumnMetadata (Maybe Text)

-- | A value that indicates whether the column is case-sensitive.
columnMetadata_isCaseSensitive :: Lens' ColumnMetadata (Maybe Bool)

-- | The default value of the column.
columnMetadata_columnDefault :: Lens' ColumnMetadata (Maybe Text)

-- | A value that indicates whether the column contains currency values.
columnMetadata_isCurrency :: Lens' ColumnMetadata (Maybe Bool)

-- | The scale value of a decimal number column.
columnMetadata_scale :: Lens' ColumnMetadata (Maybe Int)

-- | The precision value of a decimal number column.
columnMetadata_precision :: Lens' ColumnMetadata (Maybe Int)

-- | The name of the schema that contains the table that includes the
--   column.
columnMetadata_schemaName :: Lens' ColumnMetadata (Maybe Text)

-- | The name of the column.
columnMetadata_name :: Lens' ColumnMetadata (Maybe Text)

-- | A value that indicates whether an integer column is signed.
columnMetadata_isSigned :: Lens' ColumnMetadata (Maybe Bool)

-- | The label for the column.
columnMetadata_label :: Lens' ColumnMetadata (Maybe Text)

-- | A value that indicates whether the column is nullable.
columnMetadata_nullable :: Lens' ColumnMetadata (Maybe Int)

-- | The name of the table that includes the column.
columnMetadata_tableName :: Lens' ColumnMetadata (Maybe Text)

-- | A data value in a column.
--   
--   <i>See:</i> <a>newField</a> smart constructor.
data Field
Field' :: Maybe Double -> Maybe Text -> Maybe Integer -> Maybe Bool -> Maybe Base64 -> Maybe Bool -> Field

-- | A value of the double data type.
[$sel:doubleValue:Field'] :: Field -> Maybe Double

-- | A value of the string data type.
[$sel:stringValue:Field'] :: Field -> Maybe Text

-- | A value of the long data type.
[$sel:longValue:Field'] :: Field -> Maybe Integer

-- | A value of the Boolean data type.
[$sel:booleanValue:Field'] :: Field -> Maybe Bool

-- | A value of the BLOB data type.
[$sel:blobValue:Field'] :: Field -> Maybe Base64

-- | A value that indicates whether the data is NULL.
[$sel:isNull:Field'] :: Field -> Maybe Bool

-- | Create a value of <a>Field</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:doubleValue:Field'</a>, <a>field_doubleValue</a> - A value of
--   the double data type.
--   
--   <a>$sel:stringValue:Field'</a>, <a>field_stringValue</a> - A value of
--   the string data type.
--   
--   <a>$sel:longValue:Field'</a>, <a>field_longValue</a> - A value of the
--   long data type.
--   
--   <a>$sel:booleanValue:Field'</a>, <a>field_booleanValue</a> - A value
--   of the Boolean data type.
--   
--   <a>$sel:blobValue:Field'</a>, <a>field_blobValue</a> - A value of the
--   BLOB data type.-- -- <i>Note:</i> This <tt>Lens</tt> automatically
--   encodes and decodes Base64 data. -- The underlying isomorphism will
--   encode to Base64 representation during -- serialisation, and decode
--   from Base64 representation during deserialisation. -- This
--   <tt>Lens</tt> accepts and returns only raw unencoded data.
--   
--   <a>$sel:isNull:Field'</a>, <a>field_isNull</a> - A value that
--   indicates whether the data is NULL.
newField :: Field

-- | A value of the double data type.
field_doubleValue :: Lens' Field (Maybe Double)

-- | A value of the string data type.
field_stringValue :: Lens' Field (Maybe Text)

-- | A value of the long data type.
field_longValue :: Lens' Field (Maybe Integer)

-- | A value of the Boolean data type.
field_booleanValue :: Lens' Field (Maybe Bool)

-- | A value of the BLOB data type.-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
field_blobValue :: Lens' Field (Maybe ByteString)

-- | A value that indicates whether the data is NULL.
field_isNull :: Lens' Field (Maybe Bool)

-- | A parameter used in a SQL statement.
--   
--   <i>See:</i> <a>newSqlParameter</a> smart constructor.
data SqlParameter
SqlParameter' :: Text -> Text -> SqlParameter

-- | The name of the parameter.
[$sel:name:SqlParameter'] :: SqlParameter -> Text

-- | The value of the parameter. Amazon Redshift implicitly converts to the
--   proper data type. For more inforation, see <a>Data types</a> in the
--   <i>Amazon Redshift Database Developer Guide</i>.
[$sel:value:SqlParameter'] :: SqlParameter -> Text

-- | Create a value of <a>SqlParameter</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:name:SqlParameter'</a>, <a>sqlParameter_name</a> - The name of
--   the parameter.
--   
--   <a>$sel:value:SqlParameter'</a>, <a>sqlParameter_value</a> - The value
--   of the parameter. Amazon Redshift implicitly converts to the proper
--   data type. For more inforation, see <a>Data types</a> in the <i>Amazon
--   Redshift Database Developer Guide</i>.
newSqlParameter :: Text -> Text -> SqlParameter

-- | The name of the parameter.
sqlParameter_name :: Lens' SqlParameter Text

-- | The value of the parameter. Amazon Redshift implicitly converts to the
--   proper data type. For more inforation, see <a>Data types</a> in the
--   <i>Amazon Redshift Database Developer Guide</i>.
sqlParameter_value :: Lens' SqlParameter Text

-- | The SQL statement to run.
--   
--   <i>See:</i> <a>newStatementData</a> smart constructor.
data StatementData
StatementData' :: Maybe StatusString -> Maybe POSIX -> Maybe (NonEmpty SqlParameter) -> Maybe [Text] -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe Bool -> Text -> StatementData

-- | The status of the SQL statement. An example is the that the SQL
--   statement finished.
[$sel:status:StatementData'] :: StatementData -> Maybe StatusString

-- | The date and time (UTC) the statement was created.
[$sel:createdAt:StatementData'] :: StatementData -> Maybe POSIX

-- | The parameters used in a SQL statement.
[$sel:queryParameters:StatementData'] :: StatementData -> Maybe (NonEmpty SqlParameter)

-- | One or more SQL statements. Each query string in the array corresponds
--   to one of the queries in a batch query request.
[$sel:queryStrings:StatementData'] :: StatementData -> Maybe [Text]

-- | The SQL statement.
[$sel:queryString:StatementData'] :: StatementData -> Maybe Text

-- | The name of the SQL statement.
[$sel:statementName:StatementData'] :: StatementData -> Maybe Text

-- | The date and time (UTC) that the statement metadata was last updated.
[$sel:updatedAt:StatementData'] :: StatementData -> Maybe POSIX

-- | The name or Amazon Resource Name (ARN) of the secret that enables
--   access to the database.
[$sel:secretArn:StatementData'] :: StatementData -> Maybe Text

-- | A value that indicates whether the statement is a batch query request.
[$sel:isBatchStatement:StatementData'] :: StatementData -> Maybe Bool

-- | The SQL statement identifier. This value is a universally unique
--   identifier (UUID) generated by Amazon Redshift Data API.
[$sel:id:StatementData'] :: StatementData -> Text

-- | Create a value of <a>StatementData</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:StatementData'</a>, <a>statementData_status</a> - The
--   status of the SQL statement. An example is the that the SQL statement
--   finished.
--   
--   <a>$sel:createdAt:StatementData'</a>, <a>statementData_createdAt</a> -
--   The date and time (UTC) the statement was created.
--   
--   <a>$sel:queryParameters:StatementData'</a>,
--   <a>statementData_queryParameters</a> - The parameters used in a SQL
--   statement.
--   
--   <a>$sel:queryStrings:StatementData'</a>,
--   <a>statementData_queryStrings</a> - One or more SQL statements. Each
--   query string in the array corresponds to one of the queries in a batch
--   query request.
--   
--   <a>$sel:queryString:StatementData'</a>,
--   <a>statementData_queryString</a> - The SQL statement.
--   
--   <a>$sel:statementName:StatementData'</a>,
--   <a>statementData_statementName</a> - The name of the SQL statement.
--   
--   <a>$sel:updatedAt:StatementData'</a>, <a>statementData_updatedAt</a> -
--   The date and time (UTC) that the statement metadata was last updated.
--   
--   <a>$sel:secretArn:StatementData'</a>, <a>statementData_secretArn</a> -
--   The name or Amazon Resource Name (ARN) of the secret that enables
--   access to the database.
--   
--   <a>$sel:isBatchStatement:StatementData'</a>,
--   <a>statementData_isBatchStatement</a> - A value that indicates whether
--   the statement is a batch query request.
--   
--   <a>$sel:id:StatementData'</a>, <a>statementData_id</a> - The SQL
--   statement identifier. This value is a universally unique identifier
--   (UUID) generated by Amazon Redshift Data API.
newStatementData :: Text -> StatementData

-- | The status of the SQL statement. An example is the that the SQL
--   statement finished.
statementData_status :: Lens' StatementData (Maybe StatusString)

-- | The date and time (UTC) the statement was created.
statementData_createdAt :: Lens' StatementData (Maybe UTCTime)

-- | The parameters used in a SQL statement.
statementData_queryParameters :: Lens' StatementData (Maybe (NonEmpty SqlParameter))

-- | One or more SQL statements. Each query string in the array corresponds
--   to one of the queries in a batch query request.
statementData_queryStrings :: Lens' StatementData (Maybe [Text])

-- | The SQL statement.
statementData_queryString :: Lens' StatementData (Maybe Text)

-- | The name of the SQL statement.
statementData_statementName :: Lens' StatementData (Maybe Text)

-- | The date and time (UTC) that the statement metadata was last updated.
statementData_updatedAt :: Lens' StatementData (Maybe UTCTime)

-- | The name or Amazon Resource Name (ARN) of the secret that enables
--   access to the database.
statementData_secretArn :: Lens' StatementData (Maybe Text)

-- | A value that indicates whether the statement is a batch query request.
statementData_isBatchStatement :: Lens' StatementData (Maybe Bool)

-- | The SQL statement identifier. This value is a universally unique
--   identifier (UUID) generated by Amazon Redshift Data API.
statementData_id :: Lens' StatementData Text

-- | Information about an SQL statement.
--   
--   <i>See:</i> <a>newSubStatementData</a> smart constructor.
data SubStatementData
SubStatementData' :: Maybe StatementStatusString -> Maybe Integer -> Maybe Integer -> Maybe POSIX -> Maybe Text -> Maybe Integer -> Maybe Bool -> Maybe Text -> Maybe POSIX -> Maybe Integer -> Text -> SubStatementData

-- | The status of the SQL statement. An example is the that the SQL
--   statement finished.
[$sel:status:SubStatementData'] :: SubStatementData -> Maybe StatementStatusString

-- | The SQL statement identifier. This value is a universally unique
--   identifier (UUID) generated by Amazon Redshift Data API.
[$sel:redshiftQueryId:SubStatementData'] :: SubStatementData -> Maybe Integer

-- | The size in bytes of the returned results. A <tt>-1</tt> indicates the
--   value is null.
[$sel:resultSize:SubStatementData'] :: SubStatementData -> Maybe Integer

-- | The date and time (UTC) the statement was created.
[$sel:createdAt:SubStatementData'] :: SubStatementData -> Maybe POSIX

-- | The error message from the cluster if the SQL statement encountered an
--   error while running.
[$sel:error:SubStatementData'] :: SubStatementData -> Maybe Text

-- | Either the number of rows returned from the SQL statement or the
--   number of rows affected. If result size is greater than zero, the
--   result rows can be the number of rows affected by SQL statements such
--   as INSERT, UPDATE, DELETE, COPY, and others. A <tt>-1</tt> indicates
--   the value is null.
[$sel:resultRows:SubStatementData'] :: SubStatementData -> Maybe Integer

-- | A value that indicates whether the statement has a result set. The
--   result set can be empty.
[$sel:hasResultSet:SubStatementData'] :: SubStatementData -> Maybe Bool

-- | The SQL statement text.
[$sel:queryString:SubStatementData'] :: SubStatementData -> Maybe Text

-- | The date and time (UTC) that the statement metadata was last updated.
[$sel:updatedAt:SubStatementData'] :: SubStatementData -> Maybe POSIX

-- | The amount of time in nanoseconds that the statement ran.
[$sel:duration:SubStatementData'] :: SubStatementData -> Maybe Integer

-- | The identifier of the SQL statement. This value is a universally
--   unique identifier (UUID) generated by Amazon Redshift Data API. A
--   suffix indicates the number of the SQL statement. For example,
--   <tt>d9b6c0c9-0747-4bf4-b142-e8883122f766:2</tt> has a suffix of
--   <tt>:2</tt> that indicates the second SQL statement of a batch query.
[$sel:id:SubStatementData'] :: SubStatementData -> Text

-- | Create a value of <a>SubStatementData</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:SubStatementData'</a>, <a>subStatementData_status</a> -
--   The status of the SQL statement. An example is the that the SQL
--   statement finished.
--   
--   <a>$sel:redshiftQueryId:SubStatementData'</a>,
--   <a>subStatementData_redshiftQueryId</a> - The SQL statement
--   identifier. This value is a universally unique identifier (UUID)
--   generated by Amazon Redshift Data API.
--   
--   <a>$sel:resultSize:SubStatementData'</a>,
--   <a>subStatementData_resultSize</a> - The size in bytes of the returned
--   results. A <tt>-1</tt> indicates the value is null.
--   
--   <a>$sel:createdAt:SubStatementData'</a>,
--   <a>subStatementData_createdAt</a> - The date and time (UTC) the
--   statement was created.
--   
--   <a>$sel:error:SubStatementData'</a>, <a>subStatementData_error</a> -
--   The error message from the cluster if the SQL statement encountered an
--   error while running.
--   
--   <a>$sel:resultRows:SubStatementData'</a>,
--   <a>subStatementData_resultRows</a> - Either the number of rows
--   returned from the SQL statement or the number of rows affected. If
--   result size is greater than zero, the result rows can be the number of
--   rows affected by SQL statements such as INSERT, UPDATE, DELETE, COPY,
--   and others. A <tt>-1</tt> indicates the value is null.
--   
--   <a>$sel:hasResultSet:SubStatementData'</a>,
--   <a>subStatementData_hasResultSet</a> - A value that indicates whether
--   the statement has a result set. The result set can be empty.
--   
--   <a>$sel:queryString:SubStatementData'</a>,
--   <a>subStatementData_queryString</a> - The SQL statement text.
--   
--   <a>$sel:updatedAt:SubStatementData'</a>,
--   <a>subStatementData_updatedAt</a> - The date and time (UTC) that the
--   statement metadata was last updated.
--   
--   <a>$sel:duration:SubStatementData'</a>,
--   <a>subStatementData_duration</a> - The amount of time in nanoseconds
--   that the statement ran.
--   
--   <a>$sel:id:SubStatementData'</a>, <a>subStatementData_id</a> - The
--   identifier of the SQL statement. This value is a universally unique
--   identifier (UUID) generated by Amazon Redshift Data API. A suffix
--   indicates the number of the SQL statement. For example,
--   <tt>d9b6c0c9-0747-4bf4-b142-e8883122f766:2</tt> has a suffix of
--   <tt>:2</tt> that indicates the second SQL statement of a batch query.
newSubStatementData :: Text -> SubStatementData

-- | The status of the SQL statement. An example is the that the SQL
--   statement finished.
subStatementData_status :: Lens' SubStatementData (Maybe StatementStatusString)

-- | The SQL statement identifier. This value is a universally unique
--   identifier (UUID) generated by Amazon Redshift Data API.
subStatementData_redshiftQueryId :: Lens' SubStatementData (Maybe Integer)

-- | The size in bytes of the returned results. A <tt>-1</tt> indicates the
--   value is null.
subStatementData_resultSize :: Lens' SubStatementData (Maybe Integer)

-- | The date and time (UTC) the statement was created.
subStatementData_createdAt :: Lens' SubStatementData (Maybe UTCTime)

-- | The error message from the cluster if the SQL statement encountered an
--   error while running.
subStatementData_error :: Lens' SubStatementData (Maybe Text)

-- | Either the number of rows returned from the SQL statement or the
--   number of rows affected. If result size is greater than zero, the
--   result rows can be the number of rows affected by SQL statements such
--   as INSERT, UPDATE, DELETE, COPY, and others. A <tt>-1</tt> indicates
--   the value is null.
subStatementData_resultRows :: Lens' SubStatementData (Maybe Integer)

-- | A value that indicates whether the statement has a result set. The
--   result set can be empty.
subStatementData_hasResultSet :: Lens' SubStatementData (Maybe Bool)

-- | The SQL statement text.
subStatementData_queryString :: Lens' SubStatementData (Maybe Text)

-- | The date and time (UTC) that the statement metadata was last updated.
subStatementData_updatedAt :: Lens' SubStatementData (Maybe UTCTime)

-- | The amount of time in nanoseconds that the statement ran.
subStatementData_duration :: Lens' SubStatementData (Maybe Integer)

-- | The identifier of the SQL statement. This value is a universally
--   unique identifier (UUID) generated by Amazon Redshift Data API. A
--   suffix indicates the number of the SQL statement. For example,
--   <tt>d9b6c0c9-0747-4bf4-b142-e8883122f766:2</tt> has a suffix of
--   <tt>:2</tt> that indicates the second SQL statement of a batch query.
subStatementData_id :: Lens' SubStatementData Text

-- | The properties of a table.
--   
--   <i>See:</i> <a>newTableMember</a> smart constructor.
data TableMember
TableMember' :: Maybe Text -> Maybe Text -> Maybe Text -> TableMember

-- | The schema containing the table.
[$sel:schema:TableMember'] :: TableMember -> Maybe Text

-- | The name of the table.
[$sel:name:TableMember'] :: TableMember -> Maybe Text

-- | The type of the table. Possible values include TABLE, VIEW, SYSTEM
--   TABLE, GLOBAL TEMPORARY, LOCAL TEMPORARY, ALIAS, and SYNONYM.
[$sel:type':TableMember'] :: TableMember -> Maybe Text

-- | Create a value of <a>TableMember</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:schema:TableMember'</a>, <a>tableMember_schema</a> - The
--   schema containing the table.
--   
--   <a>$sel:name:TableMember'</a>, <a>tableMember_name</a> - The name of
--   the table.
--   
--   <a>$sel:type':TableMember'</a>, <a>tableMember_type</a> - The type of
--   the table. Possible values include TABLE, VIEW, SYSTEM TABLE, GLOBAL
--   TEMPORARY, LOCAL TEMPORARY, ALIAS, and SYNONYM.
newTableMember :: TableMember

-- | The schema containing the table.
tableMember_schema :: Lens' TableMember (Maybe Text)

-- | The name of the table.
tableMember_name :: Lens' TableMember (Maybe Text)

-- | The type of the table. Possible values include TABLE, VIEW, SYSTEM
--   TABLE, GLOBAL TEMPORARY, LOCAL TEMPORARY, ALIAS, and SYNONYM.
tableMember_type :: Lens' TableMember (Maybe Text)


-- | List the tables in a database. If neither <tt>SchemaPattern</tt> nor
--   <tt>TablePattern</tt> are specified, then all tables in the database
--   are returned. A token is returned to page through the table list.
--   Depending on the authorization method, use one of the following
--   combinations of request parameters:
--   
--   <ul>
--   <li>Secrets Manager - specify the Amazon Resource Name (ARN) of the
--   secret, the database name, and the cluster identifier that matches the
--   cluster in the secret.</li>
--   <li>Temporary credentials - specify the cluster identifier, the
--   database name, and the database user name. Permission to call the
--   <tt>redshift:GetClusterCredentials</tt> operation is required to use
--   this method.</li>
--   </ul>
--   
--   This operation returns paginated results.
module Network.AWS.RedshiftData.ListTables

-- | <i>See:</i> <a>newListTables</a> smart constructor.
data ListTables
ListTables' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Natural -> Maybe Text -> Text -> Text -> ListTables

-- | The database user name. This parameter is required when authenticating
--   using temporary credentials.
[$sel:dbUser:ListTables'] :: ListTables -> Maybe Text

-- | A database name. The connected database is specified when you connect
--   with your authentication credentials.
[$sel:connectedDatabase:ListTables'] :: ListTables -> Maybe Text

-- | A value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
[$sel:nextToken:ListTables'] :: ListTables -> Maybe Text

-- | The name or ARN of the secret that enables access to the database.
--   This parameter is required when authenticating using Secrets Manager.
[$sel:secretArn:ListTables'] :: ListTables -> Maybe Text

-- | A pattern to filter results by table name. Within a table pattern, "%"
--   means match any substring of 0 or more characters and "_" means match
--   any one character. Only table name entries matching the search pattern
--   are returned. If <tt>TablePattern</tt> is not specified, then all
--   tables that match <tt>SchemaPattern</tt>are returned. If neither
--   <tt>SchemaPattern</tt> or <tt>TablePattern</tt> are specified, then
--   all tables are returned.
[$sel:tablePattern:ListTables'] :: ListTables -> Maybe Text

-- | The maximum number of tables to return in the response. If more tables
--   exist than fit in one response, then <tt>NextToken</tt> is returned to
--   page through the results.
[$sel:maxResults:ListTables'] :: ListTables -> Maybe Natural

-- | A pattern to filter results by schema name. Within a schema pattern,
--   "%" means match any substring of 0 or more characters and "_" means
--   match any one character. Only schema name entries matching the search
--   pattern are returned. If <tt>SchemaPattern</tt> is not specified, then
--   all tables that match <tt>TablePattern</tt> are returned. If neither
--   <tt>SchemaPattern</tt> or <tt>TablePattern</tt> are specified, then
--   all tables are returned.
[$sel:schemaPattern:ListTables'] :: ListTables -> Maybe Text

-- | The cluster identifier. This parameter is required when authenticating
--   using either Secrets Manager or temporary credentials.
[$sel:clusterIdentifier:ListTables'] :: ListTables -> Text

-- | The name of the database that contains the tables to list. If
--   <tt>ConnectedDatabase</tt> is not specified, this is also the database
--   to connect to with your authentication credentials.
[$sel:database:ListTables'] :: ListTables -> Text

-- | Create a value of <a>ListTables</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dbUser:ListTables'</a>, <a>listTables_dbUser</a> - The
--   database user name. This parameter is required when authenticating
--   using temporary credentials.
--   
--   <a>$sel:connectedDatabase:ListTables'</a>,
--   <a>listTables_connectedDatabase</a> - A database name. The connected
--   database is specified when you connect with your authentication
--   credentials.
--   
--   <a>$sel:nextToken:ListTables'</a>, <a>listTables_nextToken</a> - A
--   value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
--   
--   <a>$sel:secretArn:ListTables'</a>, <a>listTables_secretArn</a> - The
--   name or ARN of the secret that enables access to the database. This
--   parameter is required when authenticating using Secrets Manager.
--   
--   <a>$sel:tablePattern:ListTables'</a>, <a>listTables_tablePattern</a> -
--   A pattern to filter results by table name. Within a table pattern, "%"
--   means match any substring of 0 or more characters and "_" means match
--   any one character. Only table name entries matching the search pattern
--   are returned. If <tt>TablePattern</tt> is not specified, then all
--   tables that match <tt>SchemaPattern</tt>are returned. If neither
--   <tt>SchemaPattern</tt> or <tt>TablePattern</tt> are specified, then
--   all tables are returned.
--   
--   <a>$sel:maxResults:ListTables'</a>, <a>listTables_maxResults</a> - The
--   maximum number of tables to return in the response. If more tables
--   exist than fit in one response, then <tt>NextToken</tt> is returned to
--   page through the results.
--   
--   <a>$sel:schemaPattern:ListTables'</a>, <a>listTables_schemaPattern</a>
--   - A pattern to filter results by schema name. Within a schema pattern,
--   "%" means match any substring of 0 or more characters and "_" means
--   match any one character. Only schema name entries matching the search
--   pattern are returned. If <tt>SchemaPattern</tt> is not specified, then
--   all tables that match <tt>TablePattern</tt> are returned. If neither
--   <tt>SchemaPattern</tt> or <tt>TablePattern</tt> are specified, then
--   all tables are returned.
--   
--   <a>$sel:clusterIdentifier:ListTables'</a>,
--   <a>listTables_clusterIdentifier</a> - The cluster identifier. This
--   parameter is required when authenticating using either Secrets Manager
--   or temporary credentials.
--   
--   <a>$sel:database:ListTables'</a>, <a>listTables_database</a> - The
--   name of the database that contains the tables to list. If
--   <tt>ConnectedDatabase</tt> is not specified, this is also the database
--   to connect to with your authentication credentials.
newListTables :: Text -> Text -> ListTables

-- | The database user name. This parameter is required when authenticating
--   using temporary credentials.
listTables_dbUser :: Lens' ListTables (Maybe Text)

-- | A database name. The connected database is specified when you connect
--   with your authentication credentials.
listTables_connectedDatabase :: Lens' ListTables (Maybe Text)

-- | A value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
listTables_nextToken :: Lens' ListTables (Maybe Text)

-- | The name or ARN of the secret that enables access to the database.
--   This parameter is required when authenticating using Secrets Manager.
listTables_secretArn :: Lens' ListTables (Maybe Text)

-- | A pattern to filter results by table name. Within a table pattern, "%"
--   means match any substring of 0 or more characters and "_" means match
--   any one character. Only table name entries matching the search pattern
--   are returned. If <tt>TablePattern</tt> is not specified, then all
--   tables that match <tt>SchemaPattern</tt>are returned. If neither
--   <tt>SchemaPattern</tt> or <tt>TablePattern</tt> are specified, then
--   all tables are returned.
listTables_tablePattern :: Lens' ListTables (Maybe Text)

-- | The maximum number of tables to return in the response. If more tables
--   exist than fit in one response, then <tt>NextToken</tt> is returned to
--   page through the results.
listTables_maxResults :: Lens' ListTables (Maybe Natural)

-- | A pattern to filter results by schema name. Within a schema pattern,
--   "%" means match any substring of 0 or more characters and "_" means
--   match any one character. Only schema name entries matching the search
--   pattern are returned. If <tt>SchemaPattern</tt> is not specified, then
--   all tables that match <tt>TablePattern</tt> are returned. If neither
--   <tt>SchemaPattern</tt> or <tt>TablePattern</tt> are specified, then
--   all tables are returned.
listTables_schemaPattern :: Lens' ListTables (Maybe Text)

-- | The cluster identifier. This parameter is required when authenticating
--   using either Secrets Manager or temporary credentials.
listTables_clusterIdentifier :: Lens' ListTables Text

-- | The name of the database that contains the tables to list. If
--   <tt>ConnectedDatabase</tt> is not specified, this is also the database
--   to connect to with your authentication credentials.
listTables_database :: Lens' ListTables Text

-- | <i>See:</i> <a>newListTablesResponse</a> smart constructor.
data ListTablesResponse
ListTablesResponse' :: Maybe Text -> Maybe [TableMember] -> Int -> ListTablesResponse

-- | A value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
[$sel:nextToken:ListTablesResponse'] :: ListTablesResponse -> Maybe Text

-- | The tables that match the request pattern.
[$sel:tables:ListTablesResponse'] :: ListTablesResponse -> Maybe [TableMember]

-- | The response's http status code.
[$sel:httpStatus:ListTablesResponse'] :: ListTablesResponse -> Int

-- | Create a value of <a>ListTablesResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListTables'</a>, <a>listTablesResponse_nextToken</a>
--   - A value that indicates the starting point for the next set of
--   response records in a subsequent request. If a value is returned in a
--   response, you can retrieve the next set of records by providing this
--   returned NextToken value in the next NextToken parameter and retrying
--   the command. If the NextToken field is empty, all response records
--   have been retrieved for the request.
--   
--   <a>$sel:tables:ListTablesResponse'</a>,
--   <a>listTablesResponse_tables</a> - The tables that match the request
--   pattern.
--   
--   <a>$sel:httpStatus:ListTablesResponse'</a>,
--   <a>listTablesResponse_httpStatus</a> - The response's http status
--   code.
newListTablesResponse :: Int -> ListTablesResponse

-- | A value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
listTablesResponse_nextToken :: Lens' ListTablesResponse (Maybe Text)

-- | The tables that match the request pattern.
listTablesResponse_tables :: Lens' ListTablesResponse (Maybe [TableMember])

-- | The response's http status code.
listTablesResponse_httpStatus :: Lens' ListTablesResponse Int
instance GHC.Generics.Generic Network.AWS.RedshiftData.ListTables.ListTables
instance GHC.Show.Show Network.AWS.RedshiftData.ListTables.ListTables
instance GHC.Read.Read Network.AWS.RedshiftData.ListTables.ListTables
instance GHC.Classes.Eq Network.AWS.RedshiftData.ListTables.ListTables
instance GHC.Generics.Generic Network.AWS.RedshiftData.ListTables.ListTablesResponse
instance GHC.Show.Show Network.AWS.RedshiftData.ListTables.ListTablesResponse
instance GHC.Read.Read Network.AWS.RedshiftData.ListTables.ListTablesResponse
instance GHC.Classes.Eq Network.AWS.RedshiftData.ListTables.ListTablesResponse
instance Network.AWS.Types.AWSRequest Network.AWS.RedshiftData.ListTables.ListTables
instance Control.DeepSeq.NFData Network.AWS.RedshiftData.ListTables.ListTablesResponse
instance Network.AWS.Pager.AWSPager Network.AWS.RedshiftData.ListTables.ListTables
instance Data.Hashable.Class.Hashable Network.AWS.RedshiftData.ListTables.ListTables
instance Control.DeepSeq.NFData Network.AWS.RedshiftData.ListTables.ListTables
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.RedshiftData.ListTables.ListTables
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.RedshiftData.ListTables.ListTables
instance Network.AWS.Data.Path.ToPath Network.AWS.RedshiftData.ListTables.ListTables
instance Network.AWS.Data.Query.ToQuery Network.AWS.RedshiftData.ListTables.ListTables


-- | List of SQL statements. By default, only finished statements are
--   shown. A token is returned to page through the statement list.
--   
--   This operation returns paginated results.
module Network.AWS.RedshiftData.ListStatements

-- | <i>See:</i> <a>newListStatements</a> smart constructor.
data ListStatements
ListStatements' :: Maybe StatusString -> Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Natural -> ListStatements

-- | The status of the SQL statement to list. Status values are defined as
--   follows:
--   
--   <ul>
--   <li>ABORTED - The query run was stopped by the user.</li>
--   <li>ALL - A status value that includes all query statuses. This value
--   can be used to filter results.</li>
--   <li>FAILED - The query run failed.</li>
--   <li>FINISHED - The query has finished running.</li>
--   <li>PICKED - The query has been chosen to be run.</li>
--   <li>STARTED - The query run has started.</li>
--   <li>SUBMITTED - The query was submitted, but not yet processed.</li>
--   </ul>
[$sel:status:ListStatements'] :: ListStatements -> Maybe StatusString

-- | A value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
[$sel:nextToken:ListStatements'] :: ListStatements -> Maybe Text

-- | The name of the SQL statement specified as input to
--   <tt>BatchExecuteStatement</tt> or <tt>ExecuteStatement</tt> to
--   identify the query. You can list multiple statements by providing a
--   prefix that matches the beginning of the statement name. For example,
--   to list myStatement1, myStatement2, myStatement3, and so on, then
--   provide the a value of <tt>myStatement</tt>. Data API does a
--   case-sensitive match of SQL statement names to the prefix value you
--   provide.
[$sel:statementName:ListStatements'] :: ListStatements -> Maybe Text

-- | A value that filters which statements to return in the response. If
--   true, all statements run by the caller's IAM role are returned. If
--   false, only statements run by the caller's IAM role in the current IAM
--   session are returned. The default is true.
[$sel:roleLevel:ListStatements'] :: ListStatements -> Maybe Bool

-- | The maximum number of SQL statements to return in the response. If
--   more SQL statements exist than fit in one response, then
--   <tt>NextToken</tt> is returned to page through the results.
[$sel:maxResults:ListStatements'] :: ListStatements -> Maybe Natural

-- | Create a value of <a>ListStatements</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:ListStatements'</a>, <a>listStatements_status</a> - The
--   status of the SQL statement to list. Status values are defined as
--   follows:
--   
--   <ul>
--   <li>ABORTED - The query run was stopped by the user.</li>
--   <li>ALL - A status value that includes all query statuses. This value
--   can be used to filter results.</li>
--   <li>FAILED - The query run failed.</li>
--   <li>FINISHED - The query has finished running.</li>
--   <li>PICKED - The query has been chosen to be run.</li>
--   <li>STARTED - The query run has started.</li>
--   <li>SUBMITTED - The query was submitted, but not yet processed.</li>
--   </ul>
--   
--   <a>$sel:nextToken:ListStatements'</a>, <a>listStatements_nextToken</a>
--   - A value that indicates the starting point for the next set of
--   response records in a subsequent request. If a value is returned in a
--   response, you can retrieve the next set of records by providing this
--   returned NextToken value in the next NextToken parameter and retrying
--   the command. If the NextToken field is empty, all response records
--   have been retrieved for the request.
--   
--   <a>$sel:statementName:ListStatements'</a>,
--   <a>listStatements_statementName</a> - The name of the SQL statement
--   specified as input to <tt>BatchExecuteStatement</tt> or
--   <tt>ExecuteStatement</tt> to identify the query. You can list multiple
--   statements by providing a prefix that matches the beginning of the
--   statement name. For example, to list myStatement1, myStatement2,
--   myStatement3, and so on, then provide the a value of
--   <tt>myStatement</tt>. Data API does a case-sensitive match of SQL
--   statement names to the prefix value you provide.
--   
--   <a>$sel:roleLevel:ListStatements'</a>, <a>listStatements_roleLevel</a>
--   - A value that filters which statements to return in the response. If
--   true, all statements run by the caller's IAM role are returned. If
--   false, only statements run by the caller's IAM role in the current IAM
--   session are returned. The default is true.
--   
--   <a>$sel:maxResults:ListStatements'</a>,
--   <a>listStatements_maxResults</a> - The maximum number of SQL
--   statements to return in the response. If more SQL statements exist
--   than fit in one response, then <tt>NextToken</tt> is returned to page
--   through the results.
newListStatements :: ListStatements

-- | The status of the SQL statement to list. Status values are defined as
--   follows:
--   
--   <ul>
--   <li>ABORTED - The query run was stopped by the user.</li>
--   <li>ALL - A status value that includes all query statuses. This value
--   can be used to filter results.</li>
--   <li>FAILED - The query run failed.</li>
--   <li>FINISHED - The query has finished running.</li>
--   <li>PICKED - The query has been chosen to be run.</li>
--   <li>STARTED - The query run has started.</li>
--   <li>SUBMITTED - The query was submitted, but not yet processed.</li>
--   </ul>
listStatements_status :: Lens' ListStatements (Maybe StatusString)

-- | A value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
listStatements_nextToken :: Lens' ListStatements (Maybe Text)

-- | The name of the SQL statement specified as input to
--   <tt>BatchExecuteStatement</tt> or <tt>ExecuteStatement</tt> to
--   identify the query. You can list multiple statements by providing a
--   prefix that matches the beginning of the statement name. For example,
--   to list myStatement1, myStatement2, myStatement3, and so on, then
--   provide the a value of <tt>myStatement</tt>. Data API does a
--   case-sensitive match of SQL statement names to the prefix value you
--   provide.
listStatements_statementName :: Lens' ListStatements (Maybe Text)

-- | A value that filters which statements to return in the response. If
--   true, all statements run by the caller's IAM role are returned. If
--   false, only statements run by the caller's IAM role in the current IAM
--   session are returned. The default is true.
listStatements_roleLevel :: Lens' ListStatements (Maybe Bool)

-- | The maximum number of SQL statements to return in the response. If
--   more SQL statements exist than fit in one response, then
--   <tt>NextToken</tt> is returned to page through the results.
listStatements_maxResults :: Lens' ListStatements (Maybe Natural)

-- | <i>See:</i> <a>newListStatementsResponse</a> smart constructor.
data ListStatementsResponse
ListStatementsResponse' :: Maybe Text -> Int -> [StatementData] -> ListStatementsResponse

-- | A value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
[$sel:nextToken:ListStatementsResponse'] :: ListStatementsResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:ListStatementsResponse'] :: ListStatementsResponse -> Int

-- | The SQL statements.
[$sel:statements:ListStatementsResponse'] :: ListStatementsResponse -> [StatementData]

-- | Create a value of <a>ListStatementsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListStatements'</a>,
--   <a>listStatementsResponse_nextToken</a> - A value that indicates the
--   starting point for the next set of response records in a subsequent
--   request. If a value is returned in a response, you can retrieve the
--   next set of records by providing this returned NextToken value in the
--   next NextToken parameter and retrying the command. If the NextToken
--   field is empty, all response records have been retrieved for the
--   request.
--   
--   <a>$sel:httpStatus:ListStatementsResponse'</a>,
--   <a>listStatementsResponse_httpStatus</a> - The response's http status
--   code.
--   
--   <a>$sel:statements:ListStatementsResponse'</a>,
--   <a>listStatementsResponse_statements</a> - The SQL statements.
newListStatementsResponse :: Int -> ListStatementsResponse

-- | A value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
listStatementsResponse_nextToken :: Lens' ListStatementsResponse (Maybe Text)

-- | The response's http status code.
listStatementsResponse_httpStatus :: Lens' ListStatementsResponse Int

-- | The SQL statements.
listStatementsResponse_statements :: Lens' ListStatementsResponse [StatementData]
instance GHC.Generics.Generic Network.AWS.RedshiftData.ListStatements.ListStatements
instance GHC.Show.Show Network.AWS.RedshiftData.ListStatements.ListStatements
instance GHC.Read.Read Network.AWS.RedshiftData.ListStatements.ListStatements
instance GHC.Classes.Eq Network.AWS.RedshiftData.ListStatements.ListStatements
instance GHC.Generics.Generic Network.AWS.RedshiftData.ListStatements.ListStatementsResponse
instance GHC.Show.Show Network.AWS.RedshiftData.ListStatements.ListStatementsResponse
instance GHC.Read.Read Network.AWS.RedshiftData.ListStatements.ListStatementsResponse
instance GHC.Classes.Eq Network.AWS.RedshiftData.ListStatements.ListStatementsResponse
instance Network.AWS.Types.AWSRequest Network.AWS.RedshiftData.ListStatements.ListStatements
instance Control.DeepSeq.NFData Network.AWS.RedshiftData.ListStatements.ListStatementsResponse
instance Network.AWS.Pager.AWSPager Network.AWS.RedshiftData.ListStatements.ListStatements
instance Data.Hashable.Class.Hashable Network.AWS.RedshiftData.ListStatements.ListStatements
instance Control.DeepSeq.NFData Network.AWS.RedshiftData.ListStatements.ListStatements
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.RedshiftData.ListStatements.ListStatements
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.RedshiftData.ListStatements.ListStatements
instance Network.AWS.Data.Path.ToPath Network.AWS.RedshiftData.ListStatements.ListStatements
instance Network.AWS.Data.Query.ToQuery Network.AWS.RedshiftData.ListStatements.ListStatements


-- | Lists the schemas in a database. A token is returned to page through
--   the schema list. Depending on the authorization method, use one of the
--   following combinations of request parameters:
--   
--   <ul>
--   <li>Secrets Manager - specify the Amazon Resource Name (ARN) of the
--   secret, the database name, and the cluster identifier that matches the
--   cluster in the secret.</li>
--   <li>Temporary credentials - specify the cluster identifier, the
--   database name, and the database user name. Permission to call the
--   <tt>redshift:GetClusterCredentials</tt> operation is required to use
--   this method.</li>
--   </ul>
--   
--   This operation returns paginated results.
module Network.AWS.RedshiftData.ListSchemas

-- | <i>See:</i> <a>newListSchemas</a> smart constructor.
data ListSchemas
ListSchemas' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Natural -> Maybe Text -> Text -> Text -> ListSchemas

-- | The database user name. This parameter is required when authenticating
--   using temporary credentials.
[$sel:dbUser:ListSchemas'] :: ListSchemas -> Maybe Text

-- | A database name. The connected database is specified when you connect
--   with your authentication credentials.
[$sel:connectedDatabase:ListSchemas'] :: ListSchemas -> Maybe Text

-- | A value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
[$sel:nextToken:ListSchemas'] :: ListSchemas -> Maybe Text

-- | The name or ARN of the secret that enables access to the database.
--   This parameter is required when authenticating using Secrets Manager.
[$sel:secretArn:ListSchemas'] :: ListSchemas -> Maybe Text

-- | The maximum number of schemas to return in the response. If more
--   schemas exist than fit in one response, then <tt>NextToken</tt> is
--   returned to page through the results.
[$sel:maxResults:ListSchemas'] :: ListSchemas -> Maybe Natural

-- | A pattern to filter results by schema name. Within a schema pattern,
--   "%" means match any substring of 0 or more characters and "_" means
--   match any one character. Only schema name entries matching the search
--   pattern are returned.
[$sel:schemaPattern:ListSchemas'] :: ListSchemas -> Maybe Text

-- | The cluster identifier. This parameter is required when authenticating
--   using either Secrets Manager or temporary credentials.
[$sel:clusterIdentifier:ListSchemas'] :: ListSchemas -> Text

-- | The name of the database that contains the schemas to list. If
--   <tt>ConnectedDatabase</tt> is not specified, this is also the database
--   to connect to with your authentication credentials.
[$sel:database:ListSchemas'] :: ListSchemas -> Text

-- | Create a value of <a>ListSchemas</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dbUser:ListSchemas'</a>, <a>listSchemas_dbUser</a> - The
--   database user name. This parameter is required when authenticating
--   using temporary credentials.
--   
--   <a>$sel:connectedDatabase:ListSchemas'</a>,
--   <a>listSchemas_connectedDatabase</a> - A database name. The connected
--   database is specified when you connect with your authentication
--   credentials.
--   
--   <a>$sel:nextToken:ListSchemas'</a>, <a>listSchemas_nextToken</a> - A
--   value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
--   
--   <a>$sel:secretArn:ListSchemas'</a>, <a>listSchemas_secretArn</a> - The
--   name or ARN of the secret that enables access to the database. This
--   parameter is required when authenticating using Secrets Manager.
--   
--   <a>$sel:maxResults:ListSchemas'</a>, <a>listSchemas_maxResults</a> -
--   The maximum number of schemas to return in the response. If more
--   schemas exist than fit in one response, then <tt>NextToken</tt> is
--   returned to page through the results.
--   
--   <a>$sel:schemaPattern:ListSchemas'</a>,
--   <a>listSchemas_schemaPattern</a> - A pattern to filter results by
--   schema name. Within a schema pattern, "%" means match any substring of
--   0 or more characters and "_" means match any one character. Only
--   schema name entries matching the search pattern are returned.
--   
--   <a>$sel:clusterIdentifier:ListSchemas'</a>,
--   <a>listSchemas_clusterIdentifier</a> - The cluster identifier. This
--   parameter is required when authenticating using either Secrets Manager
--   or temporary credentials.
--   
--   <a>$sel:database:ListSchemas'</a>, <a>listSchemas_database</a> - The
--   name of the database that contains the schemas to list. If
--   <tt>ConnectedDatabase</tt> is not specified, this is also the database
--   to connect to with your authentication credentials.
newListSchemas :: Text -> Text -> ListSchemas

-- | The database user name. This parameter is required when authenticating
--   using temporary credentials.
listSchemas_dbUser :: Lens' ListSchemas (Maybe Text)

-- | A database name. The connected database is specified when you connect
--   with your authentication credentials.
listSchemas_connectedDatabase :: Lens' ListSchemas (Maybe Text)

-- | A value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
listSchemas_nextToken :: Lens' ListSchemas (Maybe Text)

-- | The name or ARN of the secret that enables access to the database.
--   This parameter is required when authenticating using Secrets Manager.
listSchemas_secretArn :: Lens' ListSchemas (Maybe Text)

-- | The maximum number of schemas to return in the response. If more
--   schemas exist than fit in one response, then <tt>NextToken</tt> is
--   returned to page through the results.
listSchemas_maxResults :: Lens' ListSchemas (Maybe Natural)

-- | A pattern to filter results by schema name. Within a schema pattern,
--   "%" means match any substring of 0 or more characters and "_" means
--   match any one character. Only schema name entries matching the search
--   pattern are returned.
listSchemas_schemaPattern :: Lens' ListSchemas (Maybe Text)

-- | The cluster identifier. This parameter is required when authenticating
--   using either Secrets Manager or temporary credentials.
listSchemas_clusterIdentifier :: Lens' ListSchemas Text

-- | The name of the database that contains the schemas to list. If
--   <tt>ConnectedDatabase</tt> is not specified, this is also the database
--   to connect to with your authentication credentials.
listSchemas_database :: Lens' ListSchemas Text

-- | <i>See:</i> <a>newListSchemasResponse</a> smart constructor.
data ListSchemasResponse
ListSchemasResponse' :: Maybe [Text] -> Maybe Text -> Int -> ListSchemasResponse

-- | The schemas that match the request pattern.
[$sel:schemas:ListSchemasResponse'] :: ListSchemasResponse -> Maybe [Text]

-- | A value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
[$sel:nextToken:ListSchemasResponse'] :: ListSchemasResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:ListSchemasResponse'] :: ListSchemasResponse -> Int

-- | Create a value of <a>ListSchemasResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:schemas:ListSchemasResponse'</a>,
--   <a>listSchemasResponse_schemas</a> - The schemas that match the
--   request pattern.
--   
--   <a>$sel:nextToken:ListSchemas'</a>,
--   <a>listSchemasResponse_nextToken</a> - A value that indicates the
--   starting point for the next set of response records in a subsequent
--   request. If a value is returned in a response, you can retrieve the
--   next set of records by providing this returned NextToken value in the
--   next NextToken parameter and retrying the command. If the NextToken
--   field is empty, all response records have been retrieved for the
--   request.
--   
--   <a>$sel:httpStatus:ListSchemasResponse'</a>,
--   <a>listSchemasResponse_httpStatus</a> - The response's http status
--   code.
newListSchemasResponse :: Int -> ListSchemasResponse

-- | The schemas that match the request pattern.
listSchemasResponse_schemas :: Lens' ListSchemasResponse (Maybe [Text])

-- | A value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
listSchemasResponse_nextToken :: Lens' ListSchemasResponse (Maybe Text)

-- | The response's http status code.
listSchemasResponse_httpStatus :: Lens' ListSchemasResponse Int
instance GHC.Generics.Generic Network.AWS.RedshiftData.ListSchemas.ListSchemas
instance GHC.Show.Show Network.AWS.RedshiftData.ListSchemas.ListSchemas
instance GHC.Read.Read Network.AWS.RedshiftData.ListSchemas.ListSchemas
instance GHC.Classes.Eq Network.AWS.RedshiftData.ListSchemas.ListSchemas
instance GHC.Generics.Generic Network.AWS.RedshiftData.ListSchemas.ListSchemasResponse
instance GHC.Show.Show Network.AWS.RedshiftData.ListSchemas.ListSchemasResponse
instance GHC.Read.Read Network.AWS.RedshiftData.ListSchemas.ListSchemasResponse
instance GHC.Classes.Eq Network.AWS.RedshiftData.ListSchemas.ListSchemasResponse
instance Network.AWS.Types.AWSRequest Network.AWS.RedshiftData.ListSchemas.ListSchemas
instance Control.DeepSeq.NFData Network.AWS.RedshiftData.ListSchemas.ListSchemasResponse
instance Network.AWS.Pager.AWSPager Network.AWS.RedshiftData.ListSchemas.ListSchemas
instance Data.Hashable.Class.Hashable Network.AWS.RedshiftData.ListSchemas.ListSchemas
instance Control.DeepSeq.NFData Network.AWS.RedshiftData.ListSchemas.ListSchemas
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.RedshiftData.ListSchemas.ListSchemas
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.RedshiftData.ListSchemas.ListSchemas
instance Network.AWS.Data.Path.ToPath Network.AWS.RedshiftData.ListSchemas.ListSchemas
instance Network.AWS.Data.Query.ToQuery Network.AWS.RedshiftData.ListSchemas.ListSchemas


-- | List the databases in a cluster. A token is returned to page through
--   the database list. Depending on the authorization method, use one of
--   the following combinations of request parameters:
--   
--   <ul>
--   <li>Secrets Manager - specify the Amazon Resource Name (ARN) of the
--   secret, the database name, and the cluster identifier that matches the
--   cluster in the secret.</li>
--   <li>Temporary credentials - specify the cluster identifier, the
--   database name, and the database user name. Permission to call the
--   <tt>redshift:GetClusterCredentials</tt> operation is required to use
--   this method.</li>
--   </ul>
--   
--   This operation returns paginated results.
module Network.AWS.RedshiftData.ListDatabases

-- | <i>See:</i> <a>newListDatabases</a> smart constructor.
data ListDatabases
ListDatabases' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Natural -> Text -> Text -> ListDatabases

-- | The database user name. This parameter is required when authenticating
--   using temporary credentials.
[$sel:dbUser:ListDatabases'] :: ListDatabases -> Maybe Text

-- | A value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
[$sel:nextToken:ListDatabases'] :: ListDatabases -> Maybe Text

-- | The name or ARN of the secret that enables access to the database.
--   This parameter is required when authenticating using Secrets Manager.
[$sel:secretArn:ListDatabases'] :: ListDatabases -> Maybe Text

-- | The maximum number of databases to return in the response. If more
--   databases exist than fit in one response, then <tt>NextToken</tt> is
--   returned to page through the results.
[$sel:maxResults:ListDatabases'] :: ListDatabases -> Maybe Natural

-- | The cluster identifier. This parameter is required when authenticating
--   using either Secrets Manager or temporary credentials.
[$sel:clusterIdentifier:ListDatabases'] :: ListDatabases -> Text

-- | The name of the database. This parameter is required when
--   authenticating using either Secrets Manager or temporary credentials.
[$sel:database:ListDatabases'] :: ListDatabases -> Text

-- | Create a value of <a>ListDatabases</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dbUser:ListDatabases'</a>, <a>listDatabases_dbUser</a> - The
--   database user name. This parameter is required when authenticating
--   using temporary credentials.
--   
--   <a>$sel:nextToken:ListDatabases'</a>, <a>listDatabases_nextToken</a> -
--   A value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
--   
--   <a>$sel:secretArn:ListDatabases'</a>, <a>listDatabases_secretArn</a> -
--   The name or ARN of the secret that enables access to the database.
--   This parameter is required when authenticating using Secrets Manager.
--   
--   <a>$sel:maxResults:ListDatabases'</a>, <a>listDatabases_maxResults</a>
--   - The maximum number of databases to return in the response. If more
--   databases exist than fit in one response, then <tt>NextToken</tt> is
--   returned to page through the results.
--   
--   <a>$sel:clusterIdentifier:ListDatabases'</a>,
--   <a>listDatabases_clusterIdentifier</a> - The cluster identifier. This
--   parameter is required when authenticating using either Secrets Manager
--   or temporary credentials.
--   
--   <a>$sel:database:ListDatabases'</a>, <a>listDatabases_database</a> -
--   The name of the database. This parameter is required when
--   authenticating using either Secrets Manager or temporary credentials.
newListDatabases :: Text -> Text -> ListDatabases

-- | The database user name. This parameter is required when authenticating
--   using temporary credentials.
listDatabases_dbUser :: Lens' ListDatabases (Maybe Text)

-- | A value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
listDatabases_nextToken :: Lens' ListDatabases (Maybe Text)

-- | The name or ARN of the secret that enables access to the database.
--   This parameter is required when authenticating using Secrets Manager.
listDatabases_secretArn :: Lens' ListDatabases (Maybe Text)

-- | The maximum number of databases to return in the response. If more
--   databases exist than fit in one response, then <tt>NextToken</tt> is
--   returned to page through the results.
listDatabases_maxResults :: Lens' ListDatabases (Maybe Natural)

-- | The cluster identifier. This parameter is required when authenticating
--   using either Secrets Manager or temporary credentials.
listDatabases_clusterIdentifier :: Lens' ListDatabases Text

-- | The name of the database. This parameter is required when
--   authenticating using either Secrets Manager or temporary credentials.
listDatabases_database :: Lens' ListDatabases Text

-- | <i>See:</i> <a>newListDatabasesResponse</a> smart constructor.
data ListDatabasesResponse
ListDatabasesResponse' :: Maybe Text -> Maybe [Text] -> Int -> ListDatabasesResponse

-- | A value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
[$sel:nextToken:ListDatabasesResponse'] :: ListDatabasesResponse -> Maybe Text

-- | The names of databases.
[$sel:databases:ListDatabasesResponse'] :: ListDatabasesResponse -> Maybe [Text]

-- | The response's http status code.
[$sel:httpStatus:ListDatabasesResponse'] :: ListDatabasesResponse -> Int

-- | Create a value of <a>ListDatabasesResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListDatabases'</a>,
--   <a>listDatabasesResponse_nextToken</a> - A value that indicates the
--   starting point for the next set of response records in a subsequent
--   request. If a value is returned in a response, you can retrieve the
--   next set of records by providing this returned NextToken value in the
--   next NextToken parameter and retrying the command. If the NextToken
--   field is empty, all response records have been retrieved for the
--   request.
--   
--   <a>$sel:databases:ListDatabasesResponse'</a>,
--   <a>listDatabasesResponse_databases</a> - The names of databases.
--   
--   <a>$sel:httpStatus:ListDatabasesResponse'</a>,
--   <a>listDatabasesResponse_httpStatus</a> - The response's http status
--   code.
newListDatabasesResponse :: Int -> ListDatabasesResponse

-- | A value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
listDatabasesResponse_nextToken :: Lens' ListDatabasesResponse (Maybe Text)

-- | The names of databases.
listDatabasesResponse_databases :: Lens' ListDatabasesResponse (Maybe [Text])

-- | The response's http status code.
listDatabasesResponse_httpStatus :: Lens' ListDatabasesResponse Int
instance GHC.Generics.Generic Network.AWS.RedshiftData.ListDatabases.ListDatabases
instance GHC.Show.Show Network.AWS.RedshiftData.ListDatabases.ListDatabases
instance GHC.Read.Read Network.AWS.RedshiftData.ListDatabases.ListDatabases
instance GHC.Classes.Eq Network.AWS.RedshiftData.ListDatabases.ListDatabases
instance GHC.Generics.Generic Network.AWS.RedshiftData.ListDatabases.ListDatabasesResponse
instance GHC.Show.Show Network.AWS.RedshiftData.ListDatabases.ListDatabasesResponse
instance GHC.Read.Read Network.AWS.RedshiftData.ListDatabases.ListDatabasesResponse
instance GHC.Classes.Eq Network.AWS.RedshiftData.ListDatabases.ListDatabasesResponse
instance Network.AWS.Types.AWSRequest Network.AWS.RedshiftData.ListDatabases.ListDatabases
instance Control.DeepSeq.NFData Network.AWS.RedshiftData.ListDatabases.ListDatabasesResponse
instance Network.AWS.Pager.AWSPager Network.AWS.RedshiftData.ListDatabases.ListDatabases
instance Data.Hashable.Class.Hashable Network.AWS.RedshiftData.ListDatabases.ListDatabases
instance Control.DeepSeq.NFData Network.AWS.RedshiftData.ListDatabases.ListDatabases
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.RedshiftData.ListDatabases.ListDatabases
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.RedshiftData.ListDatabases.ListDatabases
instance Network.AWS.Data.Path.ToPath Network.AWS.RedshiftData.ListDatabases.ListDatabases
instance Network.AWS.Data.Query.ToQuery Network.AWS.RedshiftData.ListDatabases.ListDatabases


-- | Fetches the temporarily cached result of an SQL statement. A token is
--   returned to page through the statement results.
--   
--   This operation returns paginated results.
module Network.AWS.RedshiftData.GetStatementResult

-- | <i>See:</i> <a>newGetStatementResult</a> smart constructor.
data GetStatementResult
GetStatementResult' :: Maybe Text -> Text -> GetStatementResult

-- | A value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
[$sel:nextToken:GetStatementResult'] :: GetStatementResult -> Maybe Text

-- | The identifier of the SQL statement whose results are to be fetched.
--   This value is a universally unique identifier (UUID) generated by
--   Amazon Redshift Data API. A suffix indicates then number of the SQL
--   statement. For example,
--   <tt>d9b6c0c9-0747-4bf4-b142-e8883122f766:2</tt> has a suffix of
--   <tt>:2</tt> that indicates the second SQL statement of a batch query.
--   This identifier is returned by <tt>BatchExecuteStatment</tt>,
--   <tt>ExecuteStatment</tt>, and <tt>ListStatements</tt>.
[$sel:id:GetStatementResult'] :: GetStatementResult -> Text

-- | Create a value of <a>GetStatementResult</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:GetStatementResult'</a>,
--   <a>getStatementResult_nextToken</a> - A value that indicates the
--   starting point for the next set of response records in a subsequent
--   request. If a value is returned in a response, you can retrieve the
--   next set of records by providing this returned NextToken value in the
--   next NextToken parameter and retrying the command. If the NextToken
--   field is empty, all response records have been retrieved for the
--   request.
--   
--   <a>$sel:id:GetStatementResult'</a>, <a>getStatementResult_id</a> - The
--   identifier of the SQL statement whose results are to be fetched. This
--   value is a universally unique identifier (UUID) generated by Amazon
--   Redshift Data API. A suffix indicates then number of the SQL
--   statement. For example,
--   <tt>d9b6c0c9-0747-4bf4-b142-e8883122f766:2</tt> has a suffix of
--   <tt>:2</tt> that indicates the second SQL statement of a batch query.
--   This identifier is returned by <tt>BatchExecuteStatment</tt>,
--   <tt>ExecuteStatment</tt>, and <tt>ListStatements</tt>.
newGetStatementResult :: Text -> GetStatementResult

-- | A value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
getStatementResult_nextToken :: Lens' GetStatementResult (Maybe Text)

-- | The identifier of the SQL statement whose results are to be fetched.
--   This value is a universally unique identifier (UUID) generated by
--   Amazon Redshift Data API. A suffix indicates then number of the SQL
--   statement. For example,
--   <tt>d9b6c0c9-0747-4bf4-b142-e8883122f766:2</tt> has a suffix of
--   <tt>:2</tt> that indicates the second SQL statement of a batch query.
--   This identifier is returned by <tt>BatchExecuteStatment</tt>,
--   <tt>ExecuteStatment</tt>, and <tt>ListStatements</tt>.
getStatementResult_id :: Lens' GetStatementResult Text

-- | <i>See:</i> <a>newGetStatementResultResponse</a> smart constructor.
data GetStatementResultResponse
GetStatementResultResponse' :: Maybe Integer -> Maybe Text -> Maybe [ColumnMetadata] -> Int -> [[Field]] -> GetStatementResultResponse

-- | The total number of rows in the result set returned from a query. You
--   can use this number to estimate the number of calls to the
--   <tt>GetStatementResult</tt> operation needed to page through the
--   results.
[$sel:totalNumRows:GetStatementResultResponse'] :: GetStatementResultResponse -> Maybe Integer

-- | A value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
[$sel:nextToken:GetStatementResultResponse'] :: GetStatementResultResponse -> Maybe Text

-- | The properties (metadata) of a column.
[$sel:columnMetadata:GetStatementResultResponse'] :: GetStatementResultResponse -> Maybe [ColumnMetadata]

-- | The response's http status code.
[$sel:httpStatus:GetStatementResultResponse'] :: GetStatementResultResponse -> Int

-- | The results of the SQL statement.
[$sel:records:GetStatementResultResponse'] :: GetStatementResultResponse -> [[Field]]

-- | Create a value of <a>GetStatementResultResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:totalNumRows:GetStatementResultResponse'</a>,
--   <a>getStatementResultResponse_totalNumRows</a> - The total number of
--   rows in the result set returned from a query. You can use this number
--   to estimate the number of calls to the <tt>GetStatementResult</tt>
--   operation needed to page through the results.
--   
--   <a>$sel:nextToken:GetStatementResult'</a>,
--   <a>getStatementResultResponse_nextToken</a> - A value that indicates
--   the starting point for the next set of response records in a
--   subsequent request. If a value is returned in a response, you can
--   retrieve the next set of records by providing this returned NextToken
--   value in the next NextToken parameter and retrying the command. If the
--   NextToken field is empty, all response records have been retrieved for
--   the request.
--   
--   <a>$sel:columnMetadata:GetStatementResultResponse'</a>,
--   <a>getStatementResultResponse_columnMetadata</a> - The properties
--   (metadata) of a column.
--   
--   <a>$sel:httpStatus:GetStatementResultResponse'</a>,
--   <a>getStatementResultResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:records:GetStatementResultResponse'</a>,
--   <a>getStatementResultResponse_records</a> - The results of the SQL
--   statement.
newGetStatementResultResponse :: Int -> GetStatementResultResponse

-- | The total number of rows in the result set returned from a query. You
--   can use this number to estimate the number of calls to the
--   <tt>GetStatementResult</tt> operation needed to page through the
--   results.
getStatementResultResponse_totalNumRows :: Lens' GetStatementResultResponse (Maybe Integer)

-- | A value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
getStatementResultResponse_nextToken :: Lens' GetStatementResultResponse (Maybe Text)

-- | The properties (metadata) of a column.
getStatementResultResponse_columnMetadata :: Lens' GetStatementResultResponse (Maybe [ColumnMetadata])

-- | The response's http status code.
getStatementResultResponse_httpStatus :: Lens' GetStatementResultResponse Int

-- | The results of the SQL statement.
getStatementResultResponse_records :: Lens' GetStatementResultResponse [[Field]]
instance GHC.Generics.Generic Network.AWS.RedshiftData.GetStatementResult.GetStatementResult
instance GHC.Show.Show Network.AWS.RedshiftData.GetStatementResult.GetStatementResult
instance GHC.Read.Read Network.AWS.RedshiftData.GetStatementResult.GetStatementResult
instance GHC.Classes.Eq Network.AWS.RedshiftData.GetStatementResult.GetStatementResult
instance GHC.Generics.Generic Network.AWS.RedshiftData.GetStatementResult.GetStatementResultResponse
instance GHC.Show.Show Network.AWS.RedshiftData.GetStatementResult.GetStatementResultResponse
instance GHC.Read.Read Network.AWS.RedshiftData.GetStatementResult.GetStatementResultResponse
instance GHC.Classes.Eq Network.AWS.RedshiftData.GetStatementResult.GetStatementResultResponse
instance Network.AWS.Types.AWSRequest Network.AWS.RedshiftData.GetStatementResult.GetStatementResult
instance Control.DeepSeq.NFData Network.AWS.RedshiftData.GetStatementResult.GetStatementResultResponse
instance Network.AWS.Pager.AWSPager Network.AWS.RedshiftData.GetStatementResult.GetStatementResult
instance Data.Hashable.Class.Hashable Network.AWS.RedshiftData.GetStatementResult.GetStatementResult
instance Control.DeepSeq.NFData Network.AWS.RedshiftData.GetStatementResult.GetStatementResult
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.RedshiftData.GetStatementResult.GetStatementResult
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.RedshiftData.GetStatementResult.GetStatementResult
instance Network.AWS.Data.Path.ToPath Network.AWS.RedshiftData.GetStatementResult.GetStatementResult
instance Network.AWS.Data.Query.ToQuery Network.AWS.RedshiftData.GetStatementResult.GetStatementResult


-- | Runs an SQL statement, which can be data manipulation language (DML)
--   or data definition language (DDL). This statement must be a single SQL
--   statement. Depending on the authorization method, use one of the
--   following combinations of request parameters:
--   
--   <ul>
--   <li>Secrets Manager - specify the Amazon Resource Name (ARN) of the
--   secret, the database name, and the cluster identifier that matches the
--   cluster in the secret.</li>
--   <li>Temporary credentials - specify the cluster identifier, the
--   database name, and the database user name. Permission to call the
--   <tt>redshift:GetClusterCredentials</tt> operation is required to use
--   this method.</li>
--   </ul>
module Network.AWS.RedshiftData.ExecuteStatement

-- | <i>See:</i> <a>newExecuteStatement</a> smart constructor.
data ExecuteStatement
ExecuteStatement' :: Maybe Text -> Maybe Text -> Maybe (NonEmpty SqlParameter) -> Maybe Text -> Maybe Bool -> Text -> Text -> Text -> ExecuteStatement

-- | The database user name. This parameter is required when authenticating
--   using temporary credentials.
[$sel:dbUser:ExecuteStatement'] :: ExecuteStatement -> Maybe Text

-- | The name of the SQL statement. You can name the SQL statement when you
--   create it to identify the query.
[$sel:statementName:ExecuteStatement'] :: ExecuteStatement -> Maybe Text

-- | The parameters for the SQL statement.
[$sel:parameters:ExecuteStatement'] :: ExecuteStatement -> Maybe (NonEmpty SqlParameter)

-- | The name or ARN of the secret that enables access to the database.
--   This parameter is required when authenticating using Secrets Manager.
[$sel:secretArn:ExecuteStatement'] :: ExecuteStatement -> Maybe Text

-- | A value that indicates whether to send an event to the Amazon
--   EventBridge event bus after the SQL statement runs.
[$sel:withEvent:ExecuteStatement'] :: ExecuteStatement -> Maybe Bool

-- | The cluster identifier. This parameter is required when authenticating
--   using either Secrets Manager or temporary credentials.
[$sel:clusterIdentifier:ExecuteStatement'] :: ExecuteStatement -> Text

-- | The name of the database. This parameter is required when
--   authenticating using either Secrets Manager or temporary credentials.
[$sel:database:ExecuteStatement'] :: ExecuteStatement -> Text

-- | The SQL statement text to run.
[$sel:sql:ExecuteStatement'] :: ExecuteStatement -> Text

-- | Create a value of <a>ExecuteStatement</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dbUser:ExecuteStatement'</a>, <a>executeStatement_dbUser</a> -
--   The database user name. This parameter is required when authenticating
--   using temporary credentials.
--   
--   <a>$sel:statementName:ExecuteStatement'</a>,
--   <a>executeStatement_statementName</a> - The name of the SQL statement.
--   You can name the SQL statement when you create it to identify the
--   query.
--   
--   <a>$sel:parameters:ExecuteStatement'</a>,
--   <a>executeStatement_parameters</a> - The parameters for the SQL
--   statement.
--   
--   <a>$sel:secretArn:ExecuteStatement'</a>,
--   <a>executeStatement_secretArn</a> - The name or ARN of the secret that
--   enables access to the database. This parameter is required when
--   authenticating using Secrets Manager.
--   
--   <a>$sel:withEvent:ExecuteStatement'</a>,
--   <a>executeStatement_withEvent</a> - A value that indicates whether to
--   send an event to the Amazon EventBridge event bus after the SQL
--   statement runs.
--   
--   <a>$sel:clusterIdentifier:ExecuteStatement'</a>,
--   <a>executeStatement_clusterIdentifier</a> - The cluster identifier.
--   This parameter is required when authenticating using either Secrets
--   Manager or temporary credentials.
--   
--   <a>$sel:database:ExecuteStatement'</a>,
--   <a>executeStatement_database</a> - The name of the database. This
--   parameter is required when authenticating using either Secrets Manager
--   or temporary credentials.
--   
--   <a>$sel:sql:ExecuteStatement'</a>, <a>executeStatement_sql</a> - The
--   SQL statement text to run.
newExecuteStatement :: Text -> Text -> Text -> ExecuteStatement

-- | The database user name. This parameter is required when authenticating
--   using temporary credentials.
executeStatement_dbUser :: Lens' ExecuteStatement (Maybe Text)

-- | The name of the SQL statement. You can name the SQL statement when you
--   create it to identify the query.
executeStatement_statementName :: Lens' ExecuteStatement (Maybe Text)

-- | The parameters for the SQL statement.
executeStatement_parameters :: Lens' ExecuteStatement (Maybe (NonEmpty SqlParameter))

-- | The name or ARN of the secret that enables access to the database.
--   This parameter is required when authenticating using Secrets Manager.
executeStatement_secretArn :: Lens' ExecuteStatement (Maybe Text)

-- | A value that indicates whether to send an event to the Amazon
--   EventBridge event bus after the SQL statement runs.
executeStatement_withEvent :: Lens' ExecuteStatement (Maybe Bool)

-- | The cluster identifier. This parameter is required when authenticating
--   using either Secrets Manager or temporary credentials.
executeStatement_clusterIdentifier :: Lens' ExecuteStatement Text

-- | The name of the database. This parameter is required when
--   authenticating using either Secrets Manager or temporary credentials.
executeStatement_database :: Lens' ExecuteStatement Text

-- | The SQL statement text to run.
executeStatement_sql :: Lens' ExecuteStatement Text

-- | <i>See:</i> <a>newExecuteStatementResponse</a> smart constructor.
data ExecuteStatementResponse
ExecuteStatementResponse' :: Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe Text -> Int -> ExecuteStatementResponse

-- | The database user name.
[$sel:dbUser:ExecuteStatementResponse'] :: ExecuteStatementResponse -> Maybe Text

-- | The name of the database.
[$sel:database:ExecuteStatementResponse'] :: ExecuteStatementResponse -> Maybe Text

-- | The date and time (UTC) the statement was created.
[$sel:createdAt:ExecuteStatementResponse'] :: ExecuteStatementResponse -> Maybe POSIX

-- | The cluster identifier.
[$sel:clusterIdentifier:ExecuteStatementResponse'] :: ExecuteStatementResponse -> Maybe Text

-- | The identifier of the SQL statement whose results are to be fetched.
--   This value is a universally unique identifier (UUID) generated by
--   Amazon Redshift Data API.
[$sel:id:ExecuteStatementResponse'] :: ExecuteStatementResponse -> Maybe Text

-- | The name or ARN of the secret that enables access to the database.
[$sel:secretArn:ExecuteStatementResponse'] :: ExecuteStatementResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:ExecuteStatementResponse'] :: ExecuteStatementResponse -> Int

-- | Create a value of <a>ExecuteStatementResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dbUser:ExecuteStatement'</a>,
--   <a>executeStatementResponse_dbUser</a> - The database user name.
--   
--   <a>$sel:database:ExecuteStatement'</a>,
--   <a>executeStatementResponse_database</a> - The name of the database.
--   
--   <a>$sel:createdAt:ExecuteStatementResponse'</a>,
--   <a>executeStatementResponse_createdAt</a> - The date and time (UTC)
--   the statement was created.
--   
--   <a>$sel:clusterIdentifier:ExecuteStatement'</a>,
--   <a>executeStatementResponse_clusterIdentifier</a> - The cluster
--   identifier.
--   
--   <a>$sel:id:ExecuteStatementResponse'</a>,
--   <a>executeStatementResponse_id</a> - The identifier of the SQL
--   statement whose results are to be fetched. This value is a universally
--   unique identifier (UUID) generated by Amazon Redshift Data API.
--   
--   <a>$sel:secretArn:ExecuteStatement'</a>,
--   <a>executeStatementResponse_secretArn</a> - The name or ARN of the
--   secret that enables access to the database.
--   
--   <a>$sel:httpStatus:ExecuteStatementResponse'</a>,
--   <a>executeStatementResponse_httpStatus</a> - The response's http
--   status code.
newExecuteStatementResponse :: Int -> ExecuteStatementResponse

-- | The database user name.
executeStatementResponse_dbUser :: Lens' ExecuteStatementResponse (Maybe Text)

-- | The name of the database.
executeStatementResponse_database :: Lens' ExecuteStatementResponse (Maybe Text)

-- | The date and time (UTC) the statement was created.
executeStatementResponse_createdAt :: Lens' ExecuteStatementResponse (Maybe UTCTime)

-- | The cluster identifier.
executeStatementResponse_clusterIdentifier :: Lens' ExecuteStatementResponse (Maybe Text)

-- | The identifier of the SQL statement whose results are to be fetched.
--   This value is a universally unique identifier (UUID) generated by
--   Amazon Redshift Data API.
executeStatementResponse_id :: Lens' ExecuteStatementResponse (Maybe Text)

-- | The name or ARN of the secret that enables access to the database.
executeStatementResponse_secretArn :: Lens' ExecuteStatementResponse (Maybe Text)

-- | The response's http status code.
executeStatementResponse_httpStatus :: Lens' ExecuteStatementResponse Int
instance GHC.Generics.Generic Network.AWS.RedshiftData.ExecuteStatement.ExecuteStatement
instance GHC.Show.Show Network.AWS.RedshiftData.ExecuteStatement.ExecuteStatement
instance GHC.Read.Read Network.AWS.RedshiftData.ExecuteStatement.ExecuteStatement
instance GHC.Classes.Eq Network.AWS.RedshiftData.ExecuteStatement.ExecuteStatement
instance GHC.Generics.Generic Network.AWS.RedshiftData.ExecuteStatement.ExecuteStatementResponse
instance GHC.Show.Show Network.AWS.RedshiftData.ExecuteStatement.ExecuteStatementResponse
instance GHC.Read.Read Network.AWS.RedshiftData.ExecuteStatement.ExecuteStatementResponse
instance GHC.Classes.Eq Network.AWS.RedshiftData.ExecuteStatement.ExecuteStatementResponse
instance Network.AWS.Types.AWSRequest Network.AWS.RedshiftData.ExecuteStatement.ExecuteStatement
instance Control.DeepSeq.NFData Network.AWS.RedshiftData.ExecuteStatement.ExecuteStatementResponse
instance Data.Hashable.Class.Hashable Network.AWS.RedshiftData.ExecuteStatement.ExecuteStatement
instance Control.DeepSeq.NFData Network.AWS.RedshiftData.ExecuteStatement.ExecuteStatement
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.RedshiftData.ExecuteStatement.ExecuteStatement
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.RedshiftData.ExecuteStatement.ExecuteStatement
instance Network.AWS.Data.Path.ToPath Network.AWS.RedshiftData.ExecuteStatement.ExecuteStatement
instance Network.AWS.Data.Query.ToQuery Network.AWS.RedshiftData.ExecuteStatement.ExecuteStatement


-- | Describes the detailed information about a table from metadata in the
--   cluster. The information includes its columns. A token is returned to
--   page through the column list. Depending on the authorization method,
--   use one of the following combinations of request parameters:
--   
--   <ul>
--   <li>Secrets Manager - specify the Amazon Resource Name (ARN) of the
--   secret, the database name, and the cluster identifier that matches the
--   cluster in the secret.</li>
--   <li>Temporary credentials - specify the cluster identifier, the
--   database name, and the database user name. Permission to call the
--   <tt>redshift:GetClusterCredentials</tt> operation is required to use
--   this method.</li>
--   </ul>
--   
--   This operation returns paginated results.
module Network.AWS.RedshiftData.DescribeTable

-- | <i>See:</i> <a>newDescribeTable</a> smart constructor.
data DescribeTable
DescribeTable' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Natural -> Text -> Text -> DescribeTable

-- | The database user name. This parameter is required when authenticating
--   using temporary credentials.
[$sel:dbUser:DescribeTable'] :: DescribeTable -> Maybe Text

-- | A database name. The connected database is specified when you connect
--   with your authentication credentials.
[$sel:connectedDatabase:DescribeTable'] :: DescribeTable -> Maybe Text

-- | The schema that contains the table. If no schema is specified, then
--   matching tables for all schemas are returned.
[$sel:schema:DescribeTable'] :: DescribeTable -> Maybe Text

-- | A value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
[$sel:nextToken:DescribeTable'] :: DescribeTable -> Maybe Text

-- | The name or ARN of the secret that enables access to the database.
--   This parameter is required when authenticating using Secrets Manager.
[$sel:secretArn:DescribeTable'] :: DescribeTable -> Maybe Text

-- | The table name. If no table is specified, then all tables for all
--   matching schemas are returned. If no table and no schema is specified,
--   then all tables for all schemas in the database are returned
[$sel:table:DescribeTable'] :: DescribeTable -> Maybe Text

-- | The maximum number of tables to return in the response. If more tables
--   exist than fit in one response, then <tt>NextToken</tt> is returned to
--   page through the results.
[$sel:maxResults:DescribeTable'] :: DescribeTable -> Maybe Natural

-- | The cluster identifier. This parameter is required when authenticating
--   using either Secrets Manager or temporary credentials.
[$sel:clusterIdentifier:DescribeTable'] :: DescribeTable -> Text

-- | The name of the database that contains the tables to be described. If
--   <tt>ConnectedDatabase</tt> is not specified, this is also the database
--   to connect to with your authentication credentials.
[$sel:database:DescribeTable'] :: DescribeTable -> Text

-- | Create a value of <a>DescribeTable</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dbUser:DescribeTable'</a>, <a>describeTable_dbUser</a> - The
--   database user name. This parameter is required when authenticating
--   using temporary credentials.
--   
--   <a>$sel:connectedDatabase:DescribeTable'</a>,
--   <a>describeTable_connectedDatabase</a> - A database name. The
--   connected database is specified when you connect with your
--   authentication credentials.
--   
--   <a>$sel:schema:DescribeTable'</a>, <a>describeTable_schema</a> - The
--   schema that contains the table. If no schema is specified, then
--   matching tables for all schemas are returned.
--   
--   <a>$sel:nextToken:DescribeTable'</a>, <a>describeTable_nextToken</a> -
--   A value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
--   
--   <a>$sel:secretArn:DescribeTable'</a>, <a>describeTable_secretArn</a> -
--   The name or ARN of the secret that enables access to the database.
--   This parameter is required when authenticating using Secrets Manager.
--   
--   <a>$sel:table:DescribeTable'</a>, <a>describeTable_table</a> - The
--   table name. If no table is specified, then all tables for all matching
--   schemas are returned. If no table and no schema is specified, then all
--   tables for all schemas in the database are returned
--   
--   <a>$sel:maxResults:DescribeTable'</a>, <a>describeTable_maxResults</a>
--   - The maximum number of tables to return in the response. If more
--   tables exist than fit in one response, then <tt>NextToken</tt> is
--   returned to page through the results.
--   
--   <a>$sel:clusterIdentifier:DescribeTable'</a>,
--   <a>describeTable_clusterIdentifier</a> - The cluster identifier. This
--   parameter is required when authenticating using either Secrets Manager
--   or temporary credentials.
--   
--   <a>$sel:database:DescribeTable'</a>, <a>describeTable_database</a> -
--   The name of the database that contains the tables to be described. If
--   <tt>ConnectedDatabase</tt> is not specified, this is also the database
--   to connect to with your authentication credentials.
newDescribeTable :: Text -> Text -> DescribeTable

-- | The database user name. This parameter is required when authenticating
--   using temporary credentials.
describeTable_dbUser :: Lens' DescribeTable (Maybe Text)

-- | A database name. The connected database is specified when you connect
--   with your authentication credentials.
describeTable_connectedDatabase :: Lens' DescribeTable (Maybe Text)

-- | The schema that contains the table. If no schema is specified, then
--   matching tables for all schemas are returned.
describeTable_schema :: Lens' DescribeTable (Maybe Text)

-- | A value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
describeTable_nextToken :: Lens' DescribeTable (Maybe Text)

-- | The name or ARN of the secret that enables access to the database.
--   This parameter is required when authenticating using Secrets Manager.
describeTable_secretArn :: Lens' DescribeTable (Maybe Text)

-- | The table name. If no table is specified, then all tables for all
--   matching schemas are returned. If no table and no schema is specified,
--   then all tables for all schemas in the database are returned
describeTable_table :: Lens' DescribeTable (Maybe Text)

-- | The maximum number of tables to return in the response. If more tables
--   exist than fit in one response, then <tt>NextToken</tt> is returned to
--   page through the results.
describeTable_maxResults :: Lens' DescribeTable (Maybe Natural)

-- | The cluster identifier. This parameter is required when authenticating
--   using either Secrets Manager or temporary credentials.
describeTable_clusterIdentifier :: Lens' DescribeTable Text

-- | The name of the database that contains the tables to be described. If
--   <tt>ConnectedDatabase</tt> is not specified, this is also the database
--   to connect to with your authentication credentials.
describeTable_database :: Lens' DescribeTable Text

-- | <i>See:</i> <a>newDescribeTableResponse</a> smart constructor.
data DescribeTableResponse
DescribeTableResponse' :: Maybe [ColumnMetadata] -> Maybe Text -> Maybe Text -> Int -> DescribeTableResponse

-- | A list of columns in the table.
[$sel:columnList:DescribeTableResponse'] :: DescribeTableResponse -> Maybe [ColumnMetadata]

-- | A value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
[$sel:nextToken:DescribeTableResponse'] :: DescribeTableResponse -> Maybe Text

-- | The table name.
[$sel:tableName:DescribeTableResponse'] :: DescribeTableResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:DescribeTableResponse'] :: DescribeTableResponse -> Int

-- | Create a value of <a>DescribeTableResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:columnList:DescribeTableResponse'</a>,
--   <a>describeTableResponse_columnList</a> - A list of columns in the
--   table.
--   
--   <a>$sel:nextToken:DescribeTable'</a>,
--   <a>describeTableResponse_nextToken</a> - A value that indicates the
--   starting point for the next set of response records in a subsequent
--   request. If a value is returned in a response, you can retrieve the
--   next set of records by providing this returned NextToken value in the
--   next NextToken parameter and retrying the command. If the NextToken
--   field is empty, all response records have been retrieved for the
--   request.
--   
--   <a>$sel:tableName:DescribeTableResponse'</a>,
--   <a>describeTableResponse_tableName</a> - The table name.
--   
--   <a>$sel:httpStatus:DescribeTableResponse'</a>,
--   <a>describeTableResponse_httpStatus</a> - The response's http status
--   code.
newDescribeTableResponse :: Int -> DescribeTableResponse

-- | A list of columns in the table.
describeTableResponse_columnList :: Lens' DescribeTableResponse (Maybe [ColumnMetadata])

-- | A value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
describeTableResponse_nextToken :: Lens' DescribeTableResponse (Maybe Text)

-- | The table name.
describeTableResponse_tableName :: Lens' DescribeTableResponse (Maybe Text)

-- | The response's http status code.
describeTableResponse_httpStatus :: Lens' DescribeTableResponse Int
instance GHC.Generics.Generic Network.AWS.RedshiftData.DescribeTable.DescribeTable
instance GHC.Show.Show Network.AWS.RedshiftData.DescribeTable.DescribeTable
instance GHC.Read.Read Network.AWS.RedshiftData.DescribeTable.DescribeTable
instance GHC.Classes.Eq Network.AWS.RedshiftData.DescribeTable.DescribeTable
instance GHC.Generics.Generic Network.AWS.RedshiftData.DescribeTable.DescribeTableResponse
instance GHC.Show.Show Network.AWS.RedshiftData.DescribeTable.DescribeTableResponse
instance GHC.Read.Read Network.AWS.RedshiftData.DescribeTable.DescribeTableResponse
instance GHC.Classes.Eq Network.AWS.RedshiftData.DescribeTable.DescribeTableResponse
instance Network.AWS.Types.AWSRequest Network.AWS.RedshiftData.DescribeTable.DescribeTable
instance Control.DeepSeq.NFData Network.AWS.RedshiftData.DescribeTable.DescribeTableResponse
instance Network.AWS.Pager.AWSPager Network.AWS.RedshiftData.DescribeTable.DescribeTable
instance Data.Hashable.Class.Hashable Network.AWS.RedshiftData.DescribeTable.DescribeTable
instance Control.DeepSeq.NFData Network.AWS.RedshiftData.DescribeTable.DescribeTable
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.RedshiftData.DescribeTable.DescribeTable
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.RedshiftData.DescribeTable.DescribeTable
instance Network.AWS.Data.Path.ToPath Network.AWS.RedshiftData.DescribeTable.DescribeTable
instance Network.AWS.Data.Query.ToQuery Network.AWS.RedshiftData.DescribeTable.DescribeTable


-- | Describes the details about a specific instance when a query was run
--   by the Amazon Redshift Data API. The information includes when the
--   query started, when it finished, the query status, the number of rows
--   returned, and the SQL statement.
module Network.AWS.RedshiftData.DescribeStatement

-- | <i>See:</i> <a>newDescribeStatement</a> smart constructor.
data DescribeStatement
DescribeStatement' :: Text -> DescribeStatement

-- | The identifier of the SQL statement to describe. This value is a
--   universally unique identifier (UUID) generated by Amazon Redshift Data
--   API. A suffix indicates the number of the SQL statement. For example,
--   <tt>d9b6c0c9-0747-4bf4-b142-e8883122f766:2</tt> has a suffix of
--   <tt>:2</tt> that indicates the second SQL statement of a batch query.
--   This identifier is returned by <tt>BatchExecuteStatment</tt>,
--   <tt>ExecuteStatement</tt>, and <tt>ListStatements</tt>.
[$sel:id:DescribeStatement'] :: DescribeStatement -> Text

-- | Create a value of <a>DescribeStatement</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:id:DescribeStatement'</a>, <a>describeStatement_id</a> - The
--   identifier of the SQL statement to describe. This value is a
--   universally unique identifier (UUID) generated by Amazon Redshift Data
--   API. A suffix indicates the number of the SQL statement. For example,
--   <tt>d9b6c0c9-0747-4bf4-b142-e8883122f766:2</tt> has a suffix of
--   <tt>:2</tt> that indicates the second SQL statement of a batch query.
--   This identifier is returned by <tt>BatchExecuteStatment</tt>,
--   <tt>ExecuteStatement</tt>, and <tt>ListStatements</tt>.
newDescribeStatement :: Text -> DescribeStatement

-- | The identifier of the SQL statement to describe. This value is a
--   universally unique identifier (UUID) generated by Amazon Redshift Data
--   API. A suffix indicates the number of the SQL statement. For example,
--   <tt>d9b6c0c9-0747-4bf4-b142-e8883122f766:2</tt> has a suffix of
--   <tt>:2</tt> that indicates the second SQL statement of a batch query.
--   This identifier is returned by <tt>BatchExecuteStatment</tt>,
--   <tt>ExecuteStatement</tt>, and <tt>ListStatements</tt>.
describeStatement_id :: Lens' DescribeStatement Text

-- | <i>See:</i> <a>newDescribeStatementResponse</a> smart constructor.
data DescribeStatementResponse
DescribeStatementResponse' :: Maybe StatusString -> Maybe Integer -> Maybe Integer -> Maybe Text -> Maybe [SubStatementData] -> Maybe Text -> Maybe POSIX -> Maybe (NonEmpty SqlParameter) -> Maybe Text -> Maybe Integer -> Maybe Integer -> Maybe Text -> Maybe Bool -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe Integer -> Int -> Text -> DescribeStatementResponse

-- | The status of the SQL statement being described. Status values are
--   defined as follows:
--   
--   <ul>
--   <li>ABORTED - The query run was stopped by the user.</li>
--   <li>ALL - A status value that includes all query statuses. This value
--   can be used to filter results.</li>
--   <li>FAILED - The query run failed.</li>
--   <li>FINISHED - The query has finished running.</li>
--   <li>PICKED - The query has been chosen to be run.</li>
--   <li>STARTED - The query run has started.</li>
--   <li>SUBMITTED - The query was submitted, but not yet processed.</li>
--   </ul>
[$sel:status:DescribeStatementResponse'] :: DescribeStatementResponse -> Maybe StatusString

-- | The identifier of the query generated by Amazon Redshift. These
--   identifiers are also available in the <tt>query</tt> column of the
--   <tt>STL_QUERY</tt> system view.
[$sel:redshiftQueryId:DescribeStatementResponse'] :: DescribeStatementResponse -> Maybe Integer

-- | The size in bytes of the returned results. A <tt>-1</tt> indicates the
--   value is null.
[$sel:resultSize:DescribeStatementResponse'] :: DescribeStatementResponse -> Maybe Integer

-- | The database user name.
[$sel:dbUser:DescribeStatementResponse'] :: DescribeStatementResponse -> Maybe Text

-- | The SQL statements from a multiple statement run.
[$sel:subStatements:DescribeStatementResponse'] :: DescribeStatementResponse -> Maybe [SubStatementData]

-- | The name of the database.
[$sel:database:DescribeStatementResponse'] :: DescribeStatementResponse -> Maybe Text

-- | The date and time (UTC) when the SQL statement was submitted to run.
[$sel:createdAt:DescribeStatementResponse'] :: DescribeStatementResponse -> Maybe POSIX

-- | The parameters for the SQL statement.
[$sel:queryParameters:DescribeStatementResponse'] :: DescribeStatementResponse -> Maybe (NonEmpty SqlParameter)

-- | The error message from the cluster if the SQL statement encountered an
--   error while running.
[$sel:error:DescribeStatementResponse'] :: DescribeStatementResponse -> Maybe Text

-- | Either the number of rows returned from the SQL statement or the
--   number of rows affected. If result size is greater than zero, the
--   result rows can be the number of rows affected by SQL statements such
--   as INSERT, UPDATE, DELETE, COPY, and others. A <tt>-1</tt> indicates
--   the value is null.
[$sel:resultRows:DescribeStatementResponse'] :: DescribeStatementResponse -> Maybe Integer

-- | The process identifier from Amazon Redshift.
[$sel:redshiftPid:DescribeStatementResponse'] :: DescribeStatementResponse -> Maybe Integer

-- | The cluster identifier.
[$sel:clusterIdentifier:DescribeStatementResponse'] :: DescribeStatementResponse -> Maybe Text

-- | A value that indicates whether the statement has a result set. The
--   result set can be empty.
[$sel:hasResultSet:DescribeStatementResponse'] :: DescribeStatementResponse -> Maybe Bool

-- | The SQL statement text.
[$sel:queryString:DescribeStatementResponse'] :: DescribeStatementResponse -> Maybe Text

-- | The date and time (UTC) that the metadata for the SQL statement was
--   last updated. An example is the time the status last changed.
[$sel:updatedAt:DescribeStatementResponse'] :: DescribeStatementResponse -> Maybe POSIX

-- | The name or Amazon Resource Name (ARN) of the secret that enables
--   access to the database.
[$sel:secretArn:DescribeStatementResponse'] :: DescribeStatementResponse -> Maybe Text

-- | The amount of time in nanoseconds that the statement ran.
[$sel:duration:DescribeStatementResponse'] :: DescribeStatementResponse -> Maybe Integer

-- | The response's http status code.
[$sel:httpStatus:DescribeStatementResponse'] :: DescribeStatementResponse -> Int

-- | The identifier of the SQL statement described. This value is a
--   universally unique identifier (UUID) generated by Amazon Redshift Data
--   API.
[$sel:id:DescribeStatementResponse'] :: DescribeStatementResponse -> Text

-- | Create a value of <a>DescribeStatementResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:DescribeStatementResponse'</a>,
--   <a>describeStatementResponse_status</a> - The status of the SQL
--   statement being described. Status values are defined as follows:
--   
--   <ul>
--   <li>ABORTED - The query run was stopped by the user.</li>
--   <li>ALL - A status value that includes all query statuses. This value
--   can be used to filter results.</li>
--   <li>FAILED - The query run failed.</li>
--   <li>FINISHED - The query has finished running.</li>
--   <li>PICKED - The query has been chosen to be run.</li>
--   <li>STARTED - The query run has started.</li>
--   <li>SUBMITTED - The query was submitted, but not yet processed.</li>
--   </ul>
--   
--   <a>$sel:redshiftQueryId:DescribeStatementResponse'</a>,
--   <a>describeStatementResponse_redshiftQueryId</a> - The identifier of
--   the query generated by Amazon Redshift. These identifiers are also
--   available in the <tt>query</tt> column of the <tt>STL_QUERY</tt>
--   system view.
--   
--   <a>$sel:resultSize:DescribeStatementResponse'</a>,
--   <a>describeStatementResponse_resultSize</a> - The size in bytes of the
--   returned results. A <tt>-1</tt> indicates the value is null.
--   
--   <a>$sel:dbUser:DescribeStatementResponse'</a>,
--   <a>describeStatementResponse_dbUser</a> - The database user name.
--   
--   <a>$sel:subStatements:DescribeStatementResponse'</a>,
--   <a>describeStatementResponse_subStatements</a> - The SQL statements
--   from a multiple statement run.
--   
--   <a>$sel:database:DescribeStatementResponse'</a>,
--   <a>describeStatementResponse_database</a> - The name of the database.
--   
--   <a>$sel:createdAt:DescribeStatementResponse'</a>,
--   <a>describeStatementResponse_createdAt</a> - The date and time (UTC)
--   when the SQL statement was submitted to run.
--   
--   <a>$sel:queryParameters:DescribeStatementResponse'</a>,
--   <a>describeStatementResponse_queryParameters</a> - The parameters for
--   the SQL statement.
--   
--   <a>$sel:error:DescribeStatementResponse'</a>,
--   <a>describeStatementResponse_error</a> - The error message from the
--   cluster if the SQL statement encountered an error while running.
--   
--   <a>$sel:resultRows:DescribeStatementResponse'</a>,
--   <a>describeStatementResponse_resultRows</a> - Either the number of
--   rows returned from the SQL statement or the number of rows affected.
--   If result size is greater than zero, the result rows can be the number
--   of rows affected by SQL statements such as INSERT, UPDATE, DELETE,
--   COPY, and others. A <tt>-1</tt> indicates the value is null.
--   
--   <a>$sel:redshiftPid:DescribeStatementResponse'</a>,
--   <a>describeStatementResponse_redshiftPid</a> - The process identifier
--   from Amazon Redshift.
--   
--   <a>$sel:clusterIdentifier:DescribeStatementResponse'</a>,
--   <a>describeStatementResponse_clusterIdentifier</a> - The cluster
--   identifier.
--   
--   <a>$sel:hasResultSet:DescribeStatementResponse'</a>,
--   <a>describeStatementResponse_hasResultSet</a> - A value that indicates
--   whether the statement has a result set. The result set can be empty.
--   
--   <a>$sel:queryString:DescribeStatementResponse'</a>,
--   <a>describeStatementResponse_queryString</a> - The SQL statement text.
--   
--   <a>$sel:updatedAt:DescribeStatementResponse'</a>,
--   <a>describeStatementResponse_updatedAt</a> - The date and time (UTC)
--   that the metadata for the SQL statement was last updated. An example
--   is the time the status last changed.
--   
--   <a>$sel:secretArn:DescribeStatementResponse'</a>,
--   <a>describeStatementResponse_secretArn</a> - The name or Amazon
--   Resource Name (ARN) of the secret that enables access to the database.
--   
--   <a>$sel:duration:DescribeStatementResponse'</a>,
--   <a>describeStatementResponse_duration</a> - The amount of time in
--   nanoseconds that the statement ran.
--   
--   <a>$sel:httpStatus:DescribeStatementResponse'</a>,
--   <a>describeStatementResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:id:DescribeStatement'</a>, <a>describeStatementResponse_id</a>
--   - The identifier of the SQL statement described. This value is a
--   universally unique identifier (UUID) generated by Amazon Redshift Data
--   API.
newDescribeStatementResponse :: Int -> Text -> DescribeStatementResponse

-- | The status of the SQL statement being described. Status values are
--   defined as follows:
--   
--   <ul>
--   <li>ABORTED - The query run was stopped by the user.</li>
--   <li>ALL - A status value that includes all query statuses. This value
--   can be used to filter results.</li>
--   <li>FAILED - The query run failed.</li>
--   <li>FINISHED - The query has finished running.</li>
--   <li>PICKED - The query has been chosen to be run.</li>
--   <li>STARTED - The query run has started.</li>
--   <li>SUBMITTED - The query was submitted, but not yet processed.</li>
--   </ul>
describeStatementResponse_status :: Lens' DescribeStatementResponse (Maybe StatusString)

-- | The identifier of the query generated by Amazon Redshift. These
--   identifiers are also available in the <tt>query</tt> column of the
--   <tt>STL_QUERY</tt> system view.
describeStatementResponse_redshiftQueryId :: Lens' DescribeStatementResponse (Maybe Integer)

-- | The size in bytes of the returned results. A <tt>-1</tt> indicates the
--   value is null.
describeStatementResponse_resultSize :: Lens' DescribeStatementResponse (Maybe Integer)

-- | The database user name.
describeStatementResponse_dbUser :: Lens' DescribeStatementResponse (Maybe Text)

-- | The SQL statements from a multiple statement run.
describeStatementResponse_subStatements :: Lens' DescribeStatementResponse (Maybe [SubStatementData])

-- | The name of the database.
describeStatementResponse_database :: Lens' DescribeStatementResponse (Maybe Text)

-- | The date and time (UTC) when the SQL statement was submitted to run.
describeStatementResponse_createdAt :: Lens' DescribeStatementResponse (Maybe UTCTime)

-- | The parameters for the SQL statement.
describeStatementResponse_queryParameters :: Lens' DescribeStatementResponse (Maybe (NonEmpty SqlParameter))

-- | The error message from the cluster if the SQL statement encountered an
--   error while running.
describeStatementResponse_error :: Lens' DescribeStatementResponse (Maybe Text)

-- | Either the number of rows returned from the SQL statement or the
--   number of rows affected. If result size is greater than zero, the
--   result rows can be the number of rows affected by SQL statements such
--   as INSERT, UPDATE, DELETE, COPY, and others. A <tt>-1</tt> indicates
--   the value is null.
describeStatementResponse_resultRows :: Lens' DescribeStatementResponse (Maybe Integer)

-- | The process identifier from Amazon Redshift.
describeStatementResponse_redshiftPid :: Lens' DescribeStatementResponse (Maybe Integer)

-- | The cluster identifier.
describeStatementResponse_clusterIdentifier :: Lens' DescribeStatementResponse (Maybe Text)

-- | A value that indicates whether the statement has a result set. The
--   result set can be empty.
describeStatementResponse_hasResultSet :: Lens' DescribeStatementResponse (Maybe Bool)

-- | The SQL statement text.
describeStatementResponse_queryString :: Lens' DescribeStatementResponse (Maybe Text)

-- | The date and time (UTC) that the metadata for the SQL statement was
--   last updated. An example is the time the status last changed.
describeStatementResponse_updatedAt :: Lens' DescribeStatementResponse (Maybe UTCTime)

-- | The name or Amazon Resource Name (ARN) of the secret that enables
--   access to the database.
describeStatementResponse_secretArn :: Lens' DescribeStatementResponse (Maybe Text)

-- | The amount of time in nanoseconds that the statement ran.
describeStatementResponse_duration :: Lens' DescribeStatementResponse (Maybe Integer)

-- | The response's http status code.
describeStatementResponse_httpStatus :: Lens' DescribeStatementResponse Int

-- | The identifier of the SQL statement described. This value is a
--   universally unique identifier (UUID) generated by Amazon Redshift Data
--   API.
describeStatementResponse_id :: Lens' DescribeStatementResponse Text
instance GHC.Generics.Generic Network.AWS.RedshiftData.DescribeStatement.DescribeStatement
instance GHC.Show.Show Network.AWS.RedshiftData.DescribeStatement.DescribeStatement
instance GHC.Read.Read Network.AWS.RedshiftData.DescribeStatement.DescribeStatement
instance GHC.Classes.Eq Network.AWS.RedshiftData.DescribeStatement.DescribeStatement
instance GHC.Generics.Generic Network.AWS.RedshiftData.DescribeStatement.DescribeStatementResponse
instance GHC.Show.Show Network.AWS.RedshiftData.DescribeStatement.DescribeStatementResponse
instance GHC.Read.Read Network.AWS.RedshiftData.DescribeStatement.DescribeStatementResponse
instance GHC.Classes.Eq Network.AWS.RedshiftData.DescribeStatement.DescribeStatementResponse
instance Network.AWS.Types.AWSRequest Network.AWS.RedshiftData.DescribeStatement.DescribeStatement
instance Control.DeepSeq.NFData Network.AWS.RedshiftData.DescribeStatement.DescribeStatementResponse
instance Data.Hashable.Class.Hashable Network.AWS.RedshiftData.DescribeStatement.DescribeStatement
instance Control.DeepSeq.NFData Network.AWS.RedshiftData.DescribeStatement.DescribeStatement
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.RedshiftData.DescribeStatement.DescribeStatement
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.RedshiftData.DescribeStatement.DescribeStatement
instance Network.AWS.Data.Path.ToPath Network.AWS.RedshiftData.DescribeStatement.DescribeStatement
instance Network.AWS.Data.Query.ToQuery Network.AWS.RedshiftData.DescribeStatement.DescribeStatement


-- | Cancels a running query. To be canceled, a query must be running.
module Network.AWS.RedshiftData.CancelStatement

-- | <i>See:</i> <a>newCancelStatement</a> smart constructor.
data CancelStatement
CancelStatement' :: Text -> CancelStatement

-- | The identifier of the SQL statement to cancel. This value is a
--   universally unique identifier (UUID) generated by Amazon Redshift Data
--   API. This identifier is returned by <tt>BatchExecuteStatment</tt>,
--   <tt>ExecuteStatment</tt>, and <tt>ListStatements</tt>.
[$sel:id:CancelStatement'] :: CancelStatement -> Text

-- | Create a value of <a>CancelStatement</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:id:CancelStatement'</a>, <a>cancelStatement_id</a> - The
--   identifier of the SQL statement to cancel. This value is a universally
--   unique identifier (UUID) generated by Amazon Redshift Data API. This
--   identifier is returned by <tt>BatchExecuteStatment</tt>,
--   <tt>ExecuteStatment</tt>, and <tt>ListStatements</tt>.
newCancelStatement :: Text -> CancelStatement

-- | The identifier of the SQL statement to cancel. This value is a
--   universally unique identifier (UUID) generated by Amazon Redshift Data
--   API. This identifier is returned by <tt>BatchExecuteStatment</tt>,
--   <tt>ExecuteStatment</tt>, and <tt>ListStatements</tt>.
cancelStatement_id :: Lens' CancelStatement Text

-- | <i>See:</i> <a>newCancelStatementResponse</a> smart constructor.
data CancelStatementResponse
CancelStatementResponse' :: Maybe Bool -> Int -> CancelStatementResponse

-- | A value that indicates whether the cancel statement succeeded (true).
[$sel:status:CancelStatementResponse'] :: CancelStatementResponse -> Maybe Bool

-- | The response's http status code.
[$sel:httpStatus:CancelStatementResponse'] :: CancelStatementResponse -> Int

-- | Create a value of <a>CancelStatementResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:CancelStatementResponse'</a>,
--   <a>cancelStatementResponse_status</a> - A value that indicates whether
--   the cancel statement succeeded (true).
--   
--   <a>$sel:httpStatus:CancelStatementResponse'</a>,
--   <a>cancelStatementResponse_httpStatus</a> - The response's http status
--   code.
newCancelStatementResponse :: Int -> CancelStatementResponse

-- | A value that indicates whether the cancel statement succeeded (true).
cancelStatementResponse_status :: Lens' CancelStatementResponse (Maybe Bool)

-- | The response's http status code.
cancelStatementResponse_httpStatus :: Lens' CancelStatementResponse Int
instance GHC.Generics.Generic Network.AWS.RedshiftData.CancelStatement.CancelStatement
instance GHC.Show.Show Network.AWS.RedshiftData.CancelStatement.CancelStatement
instance GHC.Read.Read Network.AWS.RedshiftData.CancelStatement.CancelStatement
instance GHC.Classes.Eq Network.AWS.RedshiftData.CancelStatement.CancelStatement
instance GHC.Generics.Generic Network.AWS.RedshiftData.CancelStatement.CancelStatementResponse
instance GHC.Show.Show Network.AWS.RedshiftData.CancelStatement.CancelStatementResponse
instance GHC.Read.Read Network.AWS.RedshiftData.CancelStatement.CancelStatementResponse
instance GHC.Classes.Eq Network.AWS.RedshiftData.CancelStatement.CancelStatementResponse
instance Network.AWS.Types.AWSRequest Network.AWS.RedshiftData.CancelStatement.CancelStatement
instance Control.DeepSeq.NFData Network.AWS.RedshiftData.CancelStatement.CancelStatementResponse
instance Data.Hashable.Class.Hashable Network.AWS.RedshiftData.CancelStatement.CancelStatement
instance Control.DeepSeq.NFData Network.AWS.RedshiftData.CancelStatement.CancelStatement
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.RedshiftData.CancelStatement.CancelStatement
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.RedshiftData.CancelStatement.CancelStatement
instance Network.AWS.Data.Path.ToPath Network.AWS.RedshiftData.CancelStatement.CancelStatement
instance Network.AWS.Data.Query.ToQuery Network.AWS.RedshiftData.CancelStatement.CancelStatement


-- | Runs one or more SQL statements, which can be data manipulation
--   language (DML) or data definition language (DDL). Depending on the
--   authorization method, use one of the following combinations of request
--   parameters:
--   
--   <ul>
--   <li>Secrets Manager - specify the Amazon Resource Name (ARN) of the
--   secret, the database name, and the cluster identifier that matches the
--   cluster in the secret.</li>
--   <li>Temporary credentials - specify the cluster identifier, the
--   database name, and the database user name. Permission to call the
--   <tt>redshift:GetClusterCredentials</tt> operation is required to use
--   this method.</li>
--   </ul>
module Network.AWS.RedshiftData.BatchExecuteStatement

-- | <i>See:</i> <a>newBatchExecuteStatement</a> smart constructor.
data BatchExecuteStatement
BatchExecuteStatement' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Bool -> Text -> Text -> NonEmpty Text -> BatchExecuteStatement

-- | The database user name. This parameter is required when authenticating
--   using temporary credentials.
[$sel:dbUser:BatchExecuteStatement'] :: BatchExecuteStatement -> Maybe Text

-- | The name of the SQL statements. You can name the SQL statements when
--   you create them to identify the query.
[$sel:statementName:BatchExecuteStatement'] :: BatchExecuteStatement -> Maybe Text

-- | The name or ARN of the secret that enables access to the database.
--   This parameter is required when authenticating using Secrets Manager.
[$sel:secretArn:BatchExecuteStatement'] :: BatchExecuteStatement -> Maybe Text

-- | A value that indicates whether to send an event to the Amazon
--   EventBridge event bus after the SQL statements run.
[$sel:withEvent:BatchExecuteStatement'] :: BatchExecuteStatement -> Maybe Bool

-- | The cluster identifier. This parameter is required when authenticating
--   using either Secrets Manager or temporary credentials.
[$sel:clusterIdentifier:BatchExecuteStatement'] :: BatchExecuteStatement -> Text

-- | The name of the database. This parameter is required when
--   authenticating using either Secrets Manager or temporary credentials.
[$sel:database:BatchExecuteStatement'] :: BatchExecuteStatement -> Text

-- | One or more SQL statements to run.
[$sel:sqls:BatchExecuteStatement'] :: BatchExecuteStatement -> NonEmpty Text

-- | Create a value of <a>BatchExecuteStatement</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dbUser:BatchExecuteStatement'</a>,
--   <a>batchExecuteStatement_dbUser</a> - The database user name. This
--   parameter is required when authenticating using temporary credentials.
--   
--   <a>$sel:statementName:BatchExecuteStatement'</a>,
--   <a>batchExecuteStatement_statementName</a> - The name of the SQL
--   statements. You can name the SQL statements when you create them to
--   identify the query.
--   
--   <a>$sel:secretArn:BatchExecuteStatement'</a>,
--   <a>batchExecuteStatement_secretArn</a> - The name or ARN of the secret
--   that enables access to the database. This parameter is required when
--   authenticating using Secrets Manager.
--   
--   <a>$sel:withEvent:BatchExecuteStatement'</a>,
--   <a>batchExecuteStatement_withEvent</a> - A value that indicates
--   whether to send an event to the Amazon EventBridge event bus after the
--   SQL statements run.
--   
--   <a>$sel:clusterIdentifier:BatchExecuteStatement'</a>,
--   <a>batchExecuteStatement_clusterIdentifier</a> - The cluster
--   identifier. This parameter is required when authenticating using
--   either Secrets Manager or temporary credentials.
--   
--   <a>$sel:database:BatchExecuteStatement'</a>,
--   <a>batchExecuteStatement_database</a> - The name of the database. This
--   parameter is required when authenticating using either Secrets Manager
--   or temporary credentials.
--   
--   <a>$sel:sqls:BatchExecuteStatement'</a>,
--   <a>batchExecuteStatement_sqls</a> - One or more SQL statements to run.
newBatchExecuteStatement :: Text -> Text -> NonEmpty Text -> BatchExecuteStatement

-- | The database user name. This parameter is required when authenticating
--   using temporary credentials.
batchExecuteStatement_dbUser :: Lens' BatchExecuteStatement (Maybe Text)

-- | The name of the SQL statements. You can name the SQL statements when
--   you create them to identify the query.
batchExecuteStatement_statementName :: Lens' BatchExecuteStatement (Maybe Text)

-- | The name or ARN of the secret that enables access to the database.
--   This parameter is required when authenticating using Secrets Manager.
batchExecuteStatement_secretArn :: Lens' BatchExecuteStatement (Maybe Text)

-- | A value that indicates whether to send an event to the Amazon
--   EventBridge event bus after the SQL statements run.
batchExecuteStatement_withEvent :: Lens' BatchExecuteStatement (Maybe Bool)

-- | The cluster identifier. This parameter is required when authenticating
--   using either Secrets Manager or temporary credentials.
batchExecuteStatement_clusterIdentifier :: Lens' BatchExecuteStatement Text

-- | The name of the database. This parameter is required when
--   authenticating using either Secrets Manager or temporary credentials.
batchExecuteStatement_database :: Lens' BatchExecuteStatement Text

-- | One or more SQL statements to run.
batchExecuteStatement_sqls :: Lens' BatchExecuteStatement (NonEmpty Text)

-- | <i>See:</i> <a>newBatchExecuteStatementResponse</a> smart constructor.
data BatchExecuteStatementResponse
BatchExecuteStatementResponse' :: Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe Text -> Int -> BatchExecuteStatementResponse

-- | The database user name.
[$sel:dbUser:BatchExecuteStatementResponse'] :: BatchExecuteStatementResponse -> Maybe Text

-- | The name of the database.
[$sel:database:BatchExecuteStatementResponse'] :: BatchExecuteStatementResponse -> Maybe Text

-- | The date and time (UTC) the statement was created.
[$sel:createdAt:BatchExecuteStatementResponse'] :: BatchExecuteStatementResponse -> Maybe POSIX

-- | The cluster identifier.
[$sel:clusterIdentifier:BatchExecuteStatementResponse'] :: BatchExecuteStatementResponse -> Maybe Text

-- | The identifier of the SQL statement whose results are to be fetched.
--   This value is a universally unique identifier (UUID) generated by
--   Amazon Redshift Data API. This identifier is returned by
--   <tt>BatchExecuteStatment</tt>.
[$sel:id:BatchExecuteStatementResponse'] :: BatchExecuteStatementResponse -> Maybe Text

-- | The name or ARN of the secret that enables access to the database.
[$sel:secretArn:BatchExecuteStatementResponse'] :: BatchExecuteStatementResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:BatchExecuteStatementResponse'] :: BatchExecuteStatementResponse -> Int

-- | Create a value of <a>BatchExecuteStatementResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dbUser:BatchExecuteStatement'</a>,
--   <a>batchExecuteStatementResponse_dbUser</a> - The database user name.
--   
--   <a>$sel:database:BatchExecuteStatement'</a>,
--   <a>batchExecuteStatementResponse_database</a> - The name of the
--   database.
--   
--   <a>$sel:createdAt:BatchExecuteStatementResponse'</a>,
--   <a>batchExecuteStatementResponse_createdAt</a> - The date and time
--   (UTC) the statement was created.
--   
--   <a>$sel:clusterIdentifier:BatchExecuteStatement'</a>,
--   <a>batchExecuteStatementResponse_clusterIdentifier</a> - The cluster
--   identifier.
--   
--   <a>$sel:id:BatchExecuteStatementResponse'</a>,
--   <a>batchExecuteStatementResponse_id</a> - The identifier of the SQL
--   statement whose results are to be fetched. This value is a universally
--   unique identifier (UUID) generated by Amazon Redshift Data API. This
--   identifier is returned by <tt>BatchExecuteStatment</tt>.
--   
--   <a>$sel:secretArn:BatchExecuteStatement'</a>,
--   <a>batchExecuteStatementResponse_secretArn</a> - The name or ARN of
--   the secret that enables access to the database.
--   
--   <a>$sel:httpStatus:BatchExecuteStatementResponse'</a>,
--   <a>batchExecuteStatementResponse_httpStatus</a> - The response's http
--   status code.
newBatchExecuteStatementResponse :: Int -> BatchExecuteStatementResponse

-- | The database user name.
batchExecuteStatementResponse_dbUser :: Lens' BatchExecuteStatementResponse (Maybe Text)

-- | The name of the database.
batchExecuteStatementResponse_database :: Lens' BatchExecuteStatementResponse (Maybe Text)

-- | The date and time (UTC) the statement was created.
batchExecuteStatementResponse_createdAt :: Lens' BatchExecuteStatementResponse (Maybe UTCTime)

-- | The cluster identifier.
batchExecuteStatementResponse_clusterIdentifier :: Lens' BatchExecuteStatementResponse (Maybe Text)

-- | The identifier of the SQL statement whose results are to be fetched.
--   This value is a universally unique identifier (UUID) generated by
--   Amazon Redshift Data API. This identifier is returned by
--   <tt>BatchExecuteStatment</tt>.
batchExecuteStatementResponse_id :: Lens' BatchExecuteStatementResponse (Maybe Text)

-- | The name or ARN of the secret that enables access to the database.
batchExecuteStatementResponse_secretArn :: Lens' BatchExecuteStatementResponse (Maybe Text)

-- | The response's http status code.
batchExecuteStatementResponse_httpStatus :: Lens' BatchExecuteStatementResponse Int
instance GHC.Generics.Generic Network.AWS.RedshiftData.BatchExecuteStatement.BatchExecuteStatement
instance GHC.Show.Show Network.AWS.RedshiftData.BatchExecuteStatement.BatchExecuteStatement
instance GHC.Read.Read Network.AWS.RedshiftData.BatchExecuteStatement.BatchExecuteStatement
instance GHC.Classes.Eq Network.AWS.RedshiftData.BatchExecuteStatement.BatchExecuteStatement
instance GHC.Generics.Generic Network.AWS.RedshiftData.BatchExecuteStatement.BatchExecuteStatementResponse
instance GHC.Show.Show Network.AWS.RedshiftData.BatchExecuteStatement.BatchExecuteStatementResponse
instance GHC.Read.Read Network.AWS.RedshiftData.BatchExecuteStatement.BatchExecuteStatementResponse
instance GHC.Classes.Eq Network.AWS.RedshiftData.BatchExecuteStatement.BatchExecuteStatementResponse
instance Network.AWS.Types.AWSRequest Network.AWS.RedshiftData.BatchExecuteStatement.BatchExecuteStatement
instance Control.DeepSeq.NFData Network.AWS.RedshiftData.BatchExecuteStatement.BatchExecuteStatementResponse
instance Data.Hashable.Class.Hashable Network.AWS.RedshiftData.BatchExecuteStatement.BatchExecuteStatement
instance Control.DeepSeq.NFData Network.AWS.RedshiftData.BatchExecuteStatement.BatchExecuteStatement
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.RedshiftData.BatchExecuteStatement.BatchExecuteStatement
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.RedshiftData.BatchExecuteStatement.BatchExecuteStatement
instance Network.AWS.Data.Path.ToPath Network.AWS.RedshiftData.BatchExecuteStatement.BatchExecuteStatement
instance Network.AWS.Data.Query.ToQuery Network.AWS.RedshiftData.BatchExecuteStatement.BatchExecuteStatement


module Network.AWS.RedshiftData.Lens

-- | The status of the SQL statement to list. Status values are defined as
--   follows:
--   
--   <ul>
--   <li>ABORTED - The query run was stopped by the user.</li>
--   <li>ALL - A status value that includes all query statuses. This value
--   can be used to filter results.</li>
--   <li>FAILED - The query run failed.</li>
--   <li>FINISHED - The query has finished running.</li>
--   <li>PICKED - The query has been chosen to be run.</li>
--   <li>STARTED - The query run has started.</li>
--   <li>SUBMITTED - The query was submitted, but not yet processed.</li>
--   </ul>
listStatements_status :: Lens' ListStatements (Maybe StatusString)

-- | A value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
listStatements_nextToken :: Lens' ListStatements (Maybe Text)

-- | The name of the SQL statement specified as input to
--   <tt>BatchExecuteStatement</tt> or <tt>ExecuteStatement</tt> to
--   identify the query. You can list multiple statements by providing a
--   prefix that matches the beginning of the statement name. For example,
--   to list myStatement1, myStatement2, myStatement3, and so on, then
--   provide the a value of <tt>myStatement</tt>. Data API does a
--   case-sensitive match of SQL statement names to the prefix value you
--   provide.
listStatements_statementName :: Lens' ListStatements (Maybe Text)

-- | A value that filters which statements to return in the response. If
--   true, all statements run by the caller's IAM role are returned. If
--   false, only statements run by the caller's IAM role in the current IAM
--   session are returned. The default is true.
listStatements_roleLevel :: Lens' ListStatements (Maybe Bool)

-- | The maximum number of SQL statements to return in the response. If
--   more SQL statements exist than fit in one response, then
--   <tt>NextToken</tt> is returned to page through the results.
listStatements_maxResults :: Lens' ListStatements (Maybe Natural)

-- | A value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
listStatementsResponse_nextToken :: Lens' ListStatementsResponse (Maybe Text)

-- | The response's http status code.
listStatementsResponse_httpStatus :: Lens' ListStatementsResponse Int

-- | The SQL statements.
listStatementsResponse_statements :: Lens' ListStatementsResponse [StatementData]

-- | The database user name. This parameter is required when authenticating
--   using temporary credentials.
listDatabases_dbUser :: Lens' ListDatabases (Maybe Text)

-- | A value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
listDatabases_nextToken :: Lens' ListDatabases (Maybe Text)

-- | The name or ARN of the secret that enables access to the database.
--   This parameter is required when authenticating using Secrets Manager.
listDatabases_secretArn :: Lens' ListDatabases (Maybe Text)

-- | The maximum number of databases to return in the response. If more
--   databases exist than fit in one response, then <tt>NextToken</tt> is
--   returned to page through the results.
listDatabases_maxResults :: Lens' ListDatabases (Maybe Natural)

-- | The cluster identifier. This parameter is required when authenticating
--   using either Secrets Manager or temporary credentials.
listDatabases_clusterIdentifier :: Lens' ListDatabases Text

-- | The name of the database. This parameter is required when
--   authenticating using either Secrets Manager or temporary credentials.
listDatabases_database :: Lens' ListDatabases Text

-- | A value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
listDatabasesResponse_nextToken :: Lens' ListDatabasesResponse (Maybe Text)

-- | The names of databases.
listDatabasesResponse_databases :: Lens' ListDatabasesResponse (Maybe [Text])

-- | The response's http status code.
listDatabasesResponse_httpStatus :: Lens' ListDatabasesResponse Int

-- | The database user name. This parameter is required when authenticating
--   using temporary credentials.
listSchemas_dbUser :: Lens' ListSchemas (Maybe Text)

-- | A database name. The connected database is specified when you connect
--   with your authentication credentials.
listSchemas_connectedDatabase :: Lens' ListSchemas (Maybe Text)

-- | A value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
listSchemas_nextToken :: Lens' ListSchemas (Maybe Text)

-- | The name or ARN of the secret that enables access to the database.
--   This parameter is required when authenticating using Secrets Manager.
listSchemas_secretArn :: Lens' ListSchemas (Maybe Text)

-- | The maximum number of schemas to return in the response. If more
--   schemas exist than fit in one response, then <tt>NextToken</tt> is
--   returned to page through the results.
listSchemas_maxResults :: Lens' ListSchemas (Maybe Natural)

-- | A pattern to filter results by schema name. Within a schema pattern,
--   "%" means match any substring of 0 or more characters and "_" means
--   match any one character. Only schema name entries matching the search
--   pattern are returned.
listSchemas_schemaPattern :: Lens' ListSchemas (Maybe Text)

-- | The cluster identifier. This parameter is required when authenticating
--   using either Secrets Manager or temporary credentials.
listSchemas_clusterIdentifier :: Lens' ListSchemas Text

-- | The name of the database that contains the schemas to list. If
--   <tt>ConnectedDatabase</tt> is not specified, this is also the database
--   to connect to with your authentication credentials.
listSchemas_database :: Lens' ListSchemas Text

-- | The schemas that match the request pattern.
listSchemasResponse_schemas :: Lens' ListSchemasResponse (Maybe [Text])

-- | A value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
listSchemasResponse_nextToken :: Lens' ListSchemasResponse (Maybe Text)

-- | The response's http status code.
listSchemasResponse_httpStatus :: Lens' ListSchemasResponse Int

-- | The identifier of the SQL statement to describe. This value is a
--   universally unique identifier (UUID) generated by Amazon Redshift Data
--   API. A suffix indicates the number of the SQL statement. For example,
--   <tt>d9b6c0c9-0747-4bf4-b142-e8883122f766:2</tt> has a suffix of
--   <tt>:2</tt> that indicates the second SQL statement of a batch query.
--   This identifier is returned by <tt>BatchExecuteStatment</tt>,
--   <tt>ExecuteStatement</tt>, and <tt>ListStatements</tt>.
describeStatement_id :: Lens' DescribeStatement Text

-- | The status of the SQL statement being described. Status values are
--   defined as follows:
--   
--   <ul>
--   <li>ABORTED - The query run was stopped by the user.</li>
--   <li>ALL - A status value that includes all query statuses. This value
--   can be used to filter results.</li>
--   <li>FAILED - The query run failed.</li>
--   <li>FINISHED - The query has finished running.</li>
--   <li>PICKED - The query has been chosen to be run.</li>
--   <li>STARTED - The query run has started.</li>
--   <li>SUBMITTED - The query was submitted, but not yet processed.</li>
--   </ul>
describeStatementResponse_status :: Lens' DescribeStatementResponse (Maybe StatusString)

-- | The identifier of the query generated by Amazon Redshift. These
--   identifiers are also available in the <tt>query</tt> column of the
--   <tt>STL_QUERY</tt> system view.
describeStatementResponse_redshiftQueryId :: Lens' DescribeStatementResponse (Maybe Integer)

-- | The size in bytes of the returned results. A <tt>-1</tt> indicates the
--   value is null.
describeStatementResponse_resultSize :: Lens' DescribeStatementResponse (Maybe Integer)

-- | The database user name.
describeStatementResponse_dbUser :: Lens' DescribeStatementResponse (Maybe Text)

-- | The SQL statements from a multiple statement run.
describeStatementResponse_subStatements :: Lens' DescribeStatementResponse (Maybe [SubStatementData])

-- | The name of the database.
describeStatementResponse_database :: Lens' DescribeStatementResponse (Maybe Text)

-- | The date and time (UTC) when the SQL statement was submitted to run.
describeStatementResponse_createdAt :: Lens' DescribeStatementResponse (Maybe UTCTime)

-- | The parameters for the SQL statement.
describeStatementResponse_queryParameters :: Lens' DescribeStatementResponse (Maybe (NonEmpty SqlParameter))

-- | The error message from the cluster if the SQL statement encountered an
--   error while running.
describeStatementResponse_error :: Lens' DescribeStatementResponse (Maybe Text)

-- | Either the number of rows returned from the SQL statement or the
--   number of rows affected. If result size is greater than zero, the
--   result rows can be the number of rows affected by SQL statements such
--   as INSERT, UPDATE, DELETE, COPY, and others. A <tt>-1</tt> indicates
--   the value is null.
describeStatementResponse_resultRows :: Lens' DescribeStatementResponse (Maybe Integer)

-- | The process identifier from Amazon Redshift.
describeStatementResponse_redshiftPid :: Lens' DescribeStatementResponse (Maybe Integer)

-- | The cluster identifier.
describeStatementResponse_clusterIdentifier :: Lens' DescribeStatementResponse (Maybe Text)

-- | A value that indicates whether the statement has a result set. The
--   result set can be empty.
describeStatementResponse_hasResultSet :: Lens' DescribeStatementResponse (Maybe Bool)

-- | The SQL statement text.
describeStatementResponse_queryString :: Lens' DescribeStatementResponse (Maybe Text)

-- | The date and time (UTC) that the metadata for the SQL statement was
--   last updated. An example is the time the status last changed.
describeStatementResponse_updatedAt :: Lens' DescribeStatementResponse (Maybe UTCTime)

-- | The name or Amazon Resource Name (ARN) of the secret that enables
--   access to the database.
describeStatementResponse_secretArn :: Lens' DescribeStatementResponse (Maybe Text)

-- | The amount of time in nanoseconds that the statement ran.
describeStatementResponse_duration :: Lens' DescribeStatementResponse (Maybe Integer)

-- | The response's http status code.
describeStatementResponse_httpStatus :: Lens' DescribeStatementResponse Int

-- | The identifier of the SQL statement described. This value is a
--   universally unique identifier (UUID) generated by Amazon Redshift Data
--   API.
describeStatementResponse_id :: Lens' DescribeStatementResponse Text

-- | The identifier of the SQL statement to cancel. This value is a
--   universally unique identifier (UUID) generated by Amazon Redshift Data
--   API. This identifier is returned by <tt>BatchExecuteStatment</tt>,
--   <tt>ExecuteStatment</tt>, and <tt>ListStatements</tt>.
cancelStatement_id :: Lens' CancelStatement Text

-- | A value that indicates whether the cancel statement succeeded (true).
cancelStatementResponse_status :: Lens' CancelStatementResponse (Maybe Bool)

-- | The response's http status code.
cancelStatementResponse_httpStatus :: Lens' CancelStatementResponse Int

-- | The database user name. This parameter is required when authenticating
--   using temporary credentials.
describeTable_dbUser :: Lens' DescribeTable (Maybe Text)

-- | A database name. The connected database is specified when you connect
--   with your authentication credentials.
describeTable_connectedDatabase :: Lens' DescribeTable (Maybe Text)

-- | The schema that contains the table. If no schema is specified, then
--   matching tables for all schemas are returned.
describeTable_schema :: Lens' DescribeTable (Maybe Text)

-- | A value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
describeTable_nextToken :: Lens' DescribeTable (Maybe Text)

-- | The name or ARN of the secret that enables access to the database.
--   This parameter is required when authenticating using Secrets Manager.
describeTable_secretArn :: Lens' DescribeTable (Maybe Text)

-- | The table name. If no table is specified, then all tables for all
--   matching schemas are returned. If no table and no schema is specified,
--   then all tables for all schemas in the database are returned
describeTable_table :: Lens' DescribeTable (Maybe Text)

-- | The maximum number of tables to return in the response. If more tables
--   exist than fit in one response, then <tt>NextToken</tt> is returned to
--   page through the results.
describeTable_maxResults :: Lens' DescribeTable (Maybe Natural)

-- | The cluster identifier. This parameter is required when authenticating
--   using either Secrets Manager or temporary credentials.
describeTable_clusterIdentifier :: Lens' DescribeTable Text

-- | The name of the database that contains the tables to be described. If
--   <tt>ConnectedDatabase</tt> is not specified, this is also the database
--   to connect to with your authentication credentials.
describeTable_database :: Lens' DescribeTable Text

-- | A list of columns in the table.
describeTableResponse_columnList :: Lens' DescribeTableResponse (Maybe [ColumnMetadata])

-- | A value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
describeTableResponse_nextToken :: Lens' DescribeTableResponse (Maybe Text)

-- | The table name.
describeTableResponse_tableName :: Lens' DescribeTableResponse (Maybe Text)

-- | The response's http status code.
describeTableResponse_httpStatus :: Lens' DescribeTableResponse Int

-- | The database user name. This parameter is required when authenticating
--   using temporary credentials.
batchExecuteStatement_dbUser :: Lens' BatchExecuteStatement (Maybe Text)

-- | The name of the SQL statements. You can name the SQL statements when
--   you create them to identify the query.
batchExecuteStatement_statementName :: Lens' BatchExecuteStatement (Maybe Text)

-- | The name or ARN of the secret that enables access to the database.
--   This parameter is required when authenticating using Secrets Manager.
batchExecuteStatement_secretArn :: Lens' BatchExecuteStatement (Maybe Text)

-- | A value that indicates whether to send an event to the Amazon
--   EventBridge event bus after the SQL statements run.
batchExecuteStatement_withEvent :: Lens' BatchExecuteStatement (Maybe Bool)

-- | The cluster identifier. This parameter is required when authenticating
--   using either Secrets Manager or temporary credentials.
batchExecuteStatement_clusterIdentifier :: Lens' BatchExecuteStatement Text

-- | The name of the database. This parameter is required when
--   authenticating using either Secrets Manager or temporary credentials.
batchExecuteStatement_database :: Lens' BatchExecuteStatement Text

-- | One or more SQL statements to run.
batchExecuteStatement_sqls :: Lens' BatchExecuteStatement (NonEmpty Text)

-- | The database user name.
batchExecuteStatementResponse_dbUser :: Lens' BatchExecuteStatementResponse (Maybe Text)

-- | The name of the database.
batchExecuteStatementResponse_database :: Lens' BatchExecuteStatementResponse (Maybe Text)

-- | The date and time (UTC) the statement was created.
batchExecuteStatementResponse_createdAt :: Lens' BatchExecuteStatementResponse (Maybe UTCTime)

-- | The cluster identifier.
batchExecuteStatementResponse_clusterIdentifier :: Lens' BatchExecuteStatementResponse (Maybe Text)

-- | The identifier of the SQL statement whose results are to be fetched.
--   This value is a universally unique identifier (UUID) generated by
--   Amazon Redshift Data API. This identifier is returned by
--   <tt>BatchExecuteStatment</tt>.
batchExecuteStatementResponse_id :: Lens' BatchExecuteStatementResponse (Maybe Text)

-- | The name or ARN of the secret that enables access to the database.
batchExecuteStatementResponse_secretArn :: Lens' BatchExecuteStatementResponse (Maybe Text)

-- | The response's http status code.
batchExecuteStatementResponse_httpStatus :: Lens' BatchExecuteStatementResponse Int

-- | The database user name. This parameter is required when authenticating
--   using temporary credentials.
listTables_dbUser :: Lens' ListTables (Maybe Text)

-- | A database name. The connected database is specified when you connect
--   with your authentication credentials.
listTables_connectedDatabase :: Lens' ListTables (Maybe Text)

-- | A value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
listTables_nextToken :: Lens' ListTables (Maybe Text)

-- | The name or ARN of the secret that enables access to the database.
--   This parameter is required when authenticating using Secrets Manager.
listTables_secretArn :: Lens' ListTables (Maybe Text)

-- | A pattern to filter results by table name. Within a table pattern, "%"
--   means match any substring of 0 or more characters and "_" means match
--   any one character. Only table name entries matching the search pattern
--   are returned. If <tt>TablePattern</tt> is not specified, then all
--   tables that match <tt>SchemaPattern</tt>are returned. If neither
--   <tt>SchemaPattern</tt> or <tt>TablePattern</tt> are specified, then
--   all tables are returned.
listTables_tablePattern :: Lens' ListTables (Maybe Text)

-- | The maximum number of tables to return in the response. If more tables
--   exist than fit in one response, then <tt>NextToken</tt> is returned to
--   page through the results.
listTables_maxResults :: Lens' ListTables (Maybe Natural)

-- | A pattern to filter results by schema name. Within a schema pattern,
--   "%" means match any substring of 0 or more characters and "_" means
--   match any one character. Only schema name entries matching the search
--   pattern are returned. If <tt>SchemaPattern</tt> is not specified, then
--   all tables that match <tt>TablePattern</tt> are returned. If neither
--   <tt>SchemaPattern</tt> or <tt>TablePattern</tt> are specified, then
--   all tables are returned.
listTables_schemaPattern :: Lens' ListTables (Maybe Text)

-- | The cluster identifier. This parameter is required when authenticating
--   using either Secrets Manager or temporary credentials.
listTables_clusterIdentifier :: Lens' ListTables Text

-- | The name of the database that contains the tables to list. If
--   <tt>ConnectedDatabase</tt> is not specified, this is also the database
--   to connect to with your authentication credentials.
listTables_database :: Lens' ListTables Text

-- | A value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
listTablesResponse_nextToken :: Lens' ListTablesResponse (Maybe Text)

-- | The tables that match the request pattern.
listTablesResponse_tables :: Lens' ListTablesResponse (Maybe [TableMember])

-- | The response's http status code.
listTablesResponse_httpStatus :: Lens' ListTablesResponse Int

-- | The database user name. This parameter is required when authenticating
--   using temporary credentials.
executeStatement_dbUser :: Lens' ExecuteStatement (Maybe Text)

-- | The name of the SQL statement. You can name the SQL statement when you
--   create it to identify the query.
executeStatement_statementName :: Lens' ExecuteStatement (Maybe Text)

-- | The parameters for the SQL statement.
executeStatement_parameters :: Lens' ExecuteStatement (Maybe (NonEmpty SqlParameter))

-- | The name or ARN of the secret that enables access to the database.
--   This parameter is required when authenticating using Secrets Manager.
executeStatement_secretArn :: Lens' ExecuteStatement (Maybe Text)

-- | A value that indicates whether to send an event to the Amazon
--   EventBridge event bus after the SQL statement runs.
executeStatement_withEvent :: Lens' ExecuteStatement (Maybe Bool)

-- | The cluster identifier. This parameter is required when authenticating
--   using either Secrets Manager or temporary credentials.
executeStatement_clusterIdentifier :: Lens' ExecuteStatement Text

-- | The name of the database. This parameter is required when
--   authenticating using either Secrets Manager or temporary credentials.
executeStatement_database :: Lens' ExecuteStatement Text

-- | The SQL statement text to run.
executeStatement_sql :: Lens' ExecuteStatement Text

-- | The database user name.
executeStatementResponse_dbUser :: Lens' ExecuteStatementResponse (Maybe Text)

-- | The name of the database.
executeStatementResponse_database :: Lens' ExecuteStatementResponse (Maybe Text)

-- | The date and time (UTC) the statement was created.
executeStatementResponse_createdAt :: Lens' ExecuteStatementResponse (Maybe UTCTime)

-- | The cluster identifier.
executeStatementResponse_clusterIdentifier :: Lens' ExecuteStatementResponse (Maybe Text)

-- | The identifier of the SQL statement whose results are to be fetched.
--   This value is a universally unique identifier (UUID) generated by
--   Amazon Redshift Data API.
executeStatementResponse_id :: Lens' ExecuteStatementResponse (Maybe Text)

-- | The name or ARN of the secret that enables access to the database.
executeStatementResponse_secretArn :: Lens' ExecuteStatementResponse (Maybe Text)

-- | The response's http status code.
executeStatementResponse_httpStatus :: Lens' ExecuteStatementResponse Int

-- | A value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
getStatementResult_nextToken :: Lens' GetStatementResult (Maybe Text)

-- | The identifier of the SQL statement whose results are to be fetched.
--   This value is a universally unique identifier (UUID) generated by
--   Amazon Redshift Data API. A suffix indicates then number of the SQL
--   statement. For example,
--   <tt>d9b6c0c9-0747-4bf4-b142-e8883122f766:2</tt> has a suffix of
--   <tt>:2</tt> that indicates the second SQL statement of a batch query.
--   This identifier is returned by <tt>BatchExecuteStatment</tt>,
--   <tt>ExecuteStatment</tt>, and <tt>ListStatements</tt>.
getStatementResult_id :: Lens' GetStatementResult Text

-- | The total number of rows in the result set returned from a query. You
--   can use this number to estimate the number of calls to the
--   <tt>GetStatementResult</tt> operation needed to page through the
--   results.
getStatementResultResponse_totalNumRows :: Lens' GetStatementResultResponse (Maybe Integer)

-- | A value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
getStatementResultResponse_nextToken :: Lens' GetStatementResultResponse (Maybe Text)

-- | The properties (metadata) of a column.
getStatementResultResponse_columnMetadata :: Lens' GetStatementResultResponse (Maybe [ColumnMetadata])

-- | The response's http status code.
getStatementResultResponse_httpStatus :: Lens' GetStatementResultResponse Int

-- | The results of the SQL statement.
getStatementResultResponse_records :: Lens' GetStatementResultResponse [[Field]]

-- | The length of the column.
columnMetadata_length :: Lens' ColumnMetadata (Maybe Int)

-- | The database-specific data type of the column.
columnMetadata_typeName :: Lens' ColumnMetadata (Maybe Text)

-- | A value that indicates whether the column is case-sensitive.
columnMetadata_isCaseSensitive :: Lens' ColumnMetadata (Maybe Bool)

-- | The default value of the column.
columnMetadata_columnDefault :: Lens' ColumnMetadata (Maybe Text)

-- | A value that indicates whether the column contains currency values.
columnMetadata_isCurrency :: Lens' ColumnMetadata (Maybe Bool)

-- | The scale value of a decimal number column.
columnMetadata_scale :: Lens' ColumnMetadata (Maybe Int)

-- | The precision value of a decimal number column.
columnMetadata_precision :: Lens' ColumnMetadata (Maybe Int)

-- | The name of the schema that contains the table that includes the
--   column.
columnMetadata_schemaName :: Lens' ColumnMetadata (Maybe Text)

-- | The name of the column.
columnMetadata_name :: Lens' ColumnMetadata (Maybe Text)

-- | A value that indicates whether an integer column is signed.
columnMetadata_isSigned :: Lens' ColumnMetadata (Maybe Bool)

-- | The label for the column.
columnMetadata_label :: Lens' ColumnMetadata (Maybe Text)

-- | A value that indicates whether the column is nullable.
columnMetadata_nullable :: Lens' ColumnMetadata (Maybe Int)

-- | The name of the table that includes the column.
columnMetadata_tableName :: Lens' ColumnMetadata (Maybe Text)

-- | A value of the double data type.
field_doubleValue :: Lens' Field (Maybe Double)

-- | A value of the string data type.
field_stringValue :: Lens' Field (Maybe Text)

-- | A value of the long data type.
field_longValue :: Lens' Field (Maybe Integer)

-- | A value of the Boolean data type.
field_booleanValue :: Lens' Field (Maybe Bool)

-- | A value of the BLOB data type.-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
field_blobValue :: Lens' Field (Maybe ByteString)

-- | A value that indicates whether the data is NULL.
field_isNull :: Lens' Field (Maybe Bool)

-- | The name of the parameter.
sqlParameter_name :: Lens' SqlParameter Text

-- | The value of the parameter. Amazon Redshift implicitly converts to the
--   proper data type. For more inforation, see <a>Data types</a> in the
--   <i>Amazon Redshift Database Developer Guide</i>.
sqlParameter_value :: Lens' SqlParameter Text

-- | The status of the SQL statement. An example is the that the SQL
--   statement finished.
statementData_status :: Lens' StatementData (Maybe StatusString)

-- | The date and time (UTC) the statement was created.
statementData_createdAt :: Lens' StatementData (Maybe UTCTime)

-- | The parameters used in a SQL statement.
statementData_queryParameters :: Lens' StatementData (Maybe (NonEmpty SqlParameter))

-- | One or more SQL statements. Each query string in the array corresponds
--   to one of the queries in a batch query request.
statementData_queryStrings :: Lens' StatementData (Maybe [Text])

-- | The SQL statement.
statementData_queryString :: Lens' StatementData (Maybe Text)

-- | The name of the SQL statement.
statementData_statementName :: Lens' StatementData (Maybe Text)

-- | The date and time (UTC) that the statement metadata was last updated.
statementData_updatedAt :: Lens' StatementData (Maybe UTCTime)

-- | The name or Amazon Resource Name (ARN) of the secret that enables
--   access to the database.
statementData_secretArn :: Lens' StatementData (Maybe Text)

-- | A value that indicates whether the statement is a batch query request.
statementData_isBatchStatement :: Lens' StatementData (Maybe Bool)

-- | The SQL statement identifier. This value is a universally unique
--   identifier (UUID) generated by Amazon Redshift Data API.
statementData_id :: Lens' StatementData Text

-- | The status of the SQL statement. An example is the that the SQL
--   statement finished.
subStatementData_status :: Lens' SubStatementData (Maybe StatementStatusString)

-- | The SQL statement identifier. This value is a universally unique
--   identifier (UUID) generated by Amazon Redshift Data API.
subStatementData_redshiftQueryId :: Lens' SubStatementData (Maybe Integer)

-- | The size in bytes of the returned results. A <tt>-1</tt> indicates the
--   value is null.
subStatementData_resultSize :: Lens' SubStatementData (Maybe Integer)

-- | The date and time (UTC) the statement was created.
subStatementData_createdAt :: Lens' SubStatementData (Maybe UTCTime)

-- | The error message from the cluster if the SQL statement encountered an
--   error while running.
subStatementData_error :: Lens' SubStatementData (Maybe Text)

-- | Either the number of rows returned from the SQL statement or the
--   number of rows affected. If result size is greater than zero, the
--   result rows can be the number of rows affected by SQL statements such
--   as INSERT, UPDATE, DELETE, COPY, and others. A <tt>-1</tt> indicates
--   the value is null.
subStatementData_resultRows :: Lens' SubStatementData (Maybe Integer)

-- | A value that indicates whether the statement has a result set. The
--   result set can be empty.
subStatementData_hasResultSet :: Lens' SubStatementData (Maybe Bool)

-- | The SQL statement text.
subStatementData_queryString :: Lens' SubStatementData (Maybe Text)

-- | The date and time (UTC) that the statement metadata was last updated.
subStatementData_updatedAt :: Lens' SubStatementData (Maybe UTCTime)

-- | The amount of time in nanoseconds that the statement ran.
subStatementData_duration :: Lens' SubStatementData (Maybe Integer)

-- | The identifier of the SQL statement. This value is a universally
--   unique identifier (UUID) generated by Amazon Redshift Data API. A
--   suffix indicates the number of the SQL statement. For example,
--   <tt>d9b6c0c9-0747-4bf4-b142-e8883122f766:2</tt> has a suffix of
--   <tt>:2</tt> that indicates the second SQL statement of a batch query.
subStatementData_id :: Lens' SubStatementData Text

-- | The schema containing the table.
tableMember_schema :: Lens' TableMember (Maybe Text)

-- | The name of the table.
tableMember_name :: Lens' TableMember (Maybe Text)

-- | The type of the table. Possible values include TABLE, VIEW, SYSTEM
--   TABLE, GLOBAL TEMPORARY, LOCAL TEMPORARY, ALIAS, and SYNONYM.
tableMember_type :: Lens' TableMember (Maybe Text)


module Network.AWS.RedshiftData.Waiters


-- | Derived from API version <tt>2019-12-20</tt> of the AWS service
--   descriptions, licensed under Apache 2.0.
--   
--   You can use the Amazon Redshift Data API to run queries on Amazon
--   Redshift tables. You can run SQL statements, which are committed if
--   the statement succeeds.
--   
--   For more information about the Amazon Redshift Data API, see <a>Using
--   the Amazon Redshift Data API</a> in the <i>Amazon Redshift Cluster
--   Management Guide</i>.
module Network.AWS.RedshiftData

-- | API version <tt>2019-12-20</tt> of the Amazon Redshift Data API
--   Service SDK configuration.
defaultService :: Service

-- | The Amazon Redshift Data API operation failed due to invalid input.
_ValidationException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The SQL statement encountered an environmental error while running.
_ExecuteStatementException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The Amazon Redshift Data API operation failed due to invalid input.
_InternalServerException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The number of active statements exceeds the limit.
_ActiveStatementsExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The Amazon Redshift Data API operation failed due to a missing
--   resource.
_ResourceNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | An SQL statement encountered an environmental error while running.
_BatchExecuteStatementException :: AsError a => Getting (First ServiceError) a ServiceError

-- | <i>See:</i> <a>newListStatements</a> smart constructor.
data ListStatements
ListStatements' :: Maybe StatusString -> Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Natural -> ListStatements

-- | Create a value of <a>ListStatements</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:ListStatements'</a>, <a>listStatements_status</a> - The
--   status of the SQL statement to list. Status values are defined as
--   follows:
--   
--   <ul>
--   <li>ABORTED - The query run was stopped by the user.</li>
--   <li>ALL - A status value that includes all query statuses. This value
--   can be used to filter results.</li>
--   <li>FAILED - The query run failed.</li>
--   <li>FINISHED - The query has finished running.</li>
--   <li>PICKED - The query has been chosen to be run.</li>
--   <li>STARTED - The query run has started.</li>
--   <li>SUBMITTED - The query was submitted, but not yet processed.</li>
--   </ul>
--   
--   <a>$sel:nextToken:ListStatements'</a>, <a>listStatements_nextToken</a>
--   - A value that indicates the starting point for the next set of
--   response records in a subsequent request. If a value is returned in a
--   response, you can retrieve the next set of records by providing this
--   returned NextToken value in the next NextToken parameter and retrying
--   the command. If the NextToken field is empty, all response records
--   have been retrieved for the request.
--   
--   <a>$sel:statementName:ListStatements'</a>,
--   <a>listStatements_statementName</a> - The name of the SQL statement
--   specified as input to <tt>BatchExecuteStatement</tt> or
--   <tt>ExecuteStatement</tt> to identify the query. You can list multiple
--   statements by providing a prefix that matches the beginning of the
--   statement name. For example, to list myStatement1, myStatement2,
--   myStatement3, and so on, then provide the a value of
--   <tt>myStatement</tt>. Data API does a case-sensitive match of SQL
--   statement names to the prefix value you provide.
--   
--   <a>$sel:roleLevel:ListStatements'</a>, <a>listStatements_roleLevel</a>
--   - A value that filters which statements to return in the response. If
--   true, all statements run by the caller's IAM role are returned. If
--   false, only statements run by the caller's IAM role in the current IAM
--   session are returned. The default is true.
--   
--   <a>$sel:maxResults:ListStatements'</a>,
--   <a>listStatements_maxResults</a> - The maximum number of SQL
--   statements to return in the response. If more SQL statements exist
--   than fit in one response, then <tt>NextToken</tt> is returned to page
--   through the results.
newListStatements :: ListStatements

-- | <i>See:</i> <a>newListStatementsResponse</a> smart constructor.
data ListStatementsResponse
ListStatementsResponse' :: Maybe Text -> Int -> [StatementData] -> ListStatementsResponse

-- | Create a value of <a>ListStatementsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListStatements'</a>,
--   <a>listStatementsResponse_nextToken</a> - A value that indicates the
--   starting point for the next set of response records in a subsequent
--   request. If a value is returned in a response, you can retrieve the
--   next set of records by providing this returned NextToken value in the
--   next NextToken parameter and retrying the command. If the NextToken
--   field is empty, all response records have been retrieved for the
--   request.
--   
--   <a>$sel:httpStatus:ListStatementsResponse'</a>,
--   <a>listStatementsResponse_httpStatus</a> - The response's http status
--   code.
--   
--   <a>$sel:statements:ListStatementsResponse'</a>,
--   <a>listStatementsResponse_statements</a> - The SQL statements.
newListStatementsResponse :: Int -> ListStatementsResponse

-- | <i>See:</i> <a>newListDatabases</a> smart constructor.
data ListDatabases
ListDatabases' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Natural -> Text -> Text -> ListDatabases

-- | Create a value of <a>ListDatabases</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dbUser:ListDatabases'</a>, <a>listDatabases_dbUser</a> - The
--   database user name. This parameter is required when authenticating
--   using temporary credentials.
--   
--   <a>$sel:nextToken:ListDatabases'</a>, <a>listDatabases_nextToken</a> -
--   A value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
--   
--   <a>$sel:secretArn:ListDatabases'</a>, <a>listDatabases_secretArn</a> -
--   The name or ARN of the secret that enables access to the database.
--   This parameter is required when authenticating using Secrets Manager.
--   
--   <a>$sel:maxResults:ListDatabases'</a>, <a>listDatabases_maxResults</a>
--   - The maximum number of databases to return in the response. If more
--   databases exist than fit in one response, then <tt>NextToken</tt> is
--   returned to page through the results.
--   
--   <a>$sel:clusterIdentifier:ListDatabases'</a>,
--   <a>listDatabases_clusterIdentifier</a> - The cluster identifier. This
--   parameter is required when authenticating using either Secrets Manager
--   or temporary credentials.
--   
--   <a>$sel:database:ListDatabases'</a>, <a>listDatabases_database</a> -
--   The name of the database. This parameter is required when
--   authenticating using either Secrets Manager or temporary credentials.
newListDatabases :: Text -> Text -> ListDatabases

-- | <i>See:</i> <a>newListDatabasesResponse</a> smart constructor.
data ListDatabasesResponse
ListDatabasesResponse' :: Maybe Text -> Maybe [Text] -> Int -> ListDatabasesResponse

-- | Create a value of <a>ListDatabasesResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListDatabases'</a>,
--   <a>listDatabasesResponse_nextToken</a> - A value that indicates the
--   starting point for the next set of response records in a subsequent
--   request. If a value is returned in a response, you can retrieve the
--   next set of records by providing this returned NextToken value in the
--   next NextToken parameter and retrying the command. If the NextToken
--   field is empty, all response records have been retrieved for the
--   request.
--   
--   <a>$sel:databases:ListDatabasesResponse'</a>,
--   <a>listDatabasesResponse_databases</a> - The names of databases.
--   
--   <a>$sel:httpStatus:ListDatabasesResponse'</a>,
--   <a>listDatabasesResponse_httpStatus</a> - The response's http status
--   code.
newListDatabasesResponse :: Int -> ListDatabasesResponse

-- | <i>See:</i> <a>newListSchemas</a> smart constructor.
data ListSchemas
ListSchemas' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Natural -> Maybe Text -> Text -> Text -> ListSchemas

-- | Create a value of <a>ListSchemas</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dbUser:ListSchemas'</a>, <a>listSchemas_dbUser</a> - The
--   database user name. This parameter is required when authenticating
--   using temporary credentials.
--   
--   <a>$sel:connectedDatabase:ListSchemas'</a>,
--   <a>listSchemas_connectedDatabase</a> - A database name. The connected
--   database is specified when you connect with your authentication
--   credentials.
--   
--   <a>$sel:nextToken:ListSchemas'</a>, <a>listSchemas_nextToken</a> - A
--   value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
--   
--   <a>$sel:secretArn:ListSchemas'</a>, <a>listSchemas_secretArn</a> - The
--   name or ARN of the secret that enables access to the database. This
--   parameter is required when authenticating using Secrets Manager.
--   
--   <a>$sel:maxResults:ListSchemas'</a>, <a>listSchemas_maxResults</a> -
--   The maximum number of schemas to return in the response. If more
--   schemas exist than fit in one response, then <tt>NextToken</tt> is
--   returned to page through the results.
--   
--   <a>$sel:schemaPattern:ListSchemas'</a>,
--   <a>listSchemas_schemaPattern</a> - A pattern to filter results by
--   schema name. Within a schema pattern, "%" means match any substring of
--   0 or more characters and "_" means match any one character. Only
--   schema name entries matching the search pattern are returned.
--   
--   <a>$sel:clusterIdentifier:ListSchemas'</a>,
--   <a>listSchemas_clusterIdentifier</a> - The cluster identifier. This
--   parameter is required when authenticating using either Secrets Manager
--   or temporary credentials.
--   
--   <a>$sel:database:ListSchemas'</a>, <a>listSchemas_database</a> - The
--   name of the database that contains the schemas to list. If
--   <tt>ConnectedDatabase</tt> is not specified, this is also the database
--   to connect to with your authentication credentials.
newListSchemas :: Text -> Text -> ListSchemas

-- | <i>See:</i> <a>newListSchemasResponse</a> smart constructor.
data ListSchemasResponse
ListSchemasResponse' :: Maybe [Text] -> Maybe Text -> Int -> ListSchemasResponse

-- | Create a value of <a>ListSchemasResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:schemas:ListSchemasResponse'</a>,
--   <a>listSchemasResponse_schemas</a> - The schemas that match the
--   request pattern.
--   
--   <a>$sel:nextToken:ListSchemas'</a>,
--   <a>listSchemasResponse_nextToken</a> - A value that indicates the
--   starting point for the next set of response records in a subsequent
--   request. If a value is returned in a response, you can retrieve the
--   next set of records by providing this returned NextToken value in the
--   next NextToken parameter and retrying the command. If the NextToken
--   field is empty, all response records have been retrieved for the
--   request.
--   
--   <a>$sel:httpStatus:ListSchemasResponse'</a>,
--   <a>listSchemasResponse_httpStatus</a> - The response's http status
--   code.
newListSchemasResponse :: Int -> ListSchemasResponse

-- | <i>See:</i> <a>newDescribeStatement</a> smart constructor.
data DescribeStatement
DescribeStatement' :: Text -> DescribeStatement

-- | Create a value of <a>DescribeStatement</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:id:DescribeStatement'</a>, <a>describeStatement_id</a> - The
--   identifier of the SQL statement to describe. This value is a
--   universally unique identifier (UUID) generated by Amazon Redshift Data
--   API. A suffix indicates the number of the SQL statement. For example,
--   <tt>d9b6c0c9-0747-4bf4-b142-e8883122f766:2</tt> has a suffix of
--   <tt>:2</tt> that indicates the second SQL statement of a batch query.
--   This identifier is returned by <tt>BatchExecuteStatment</tt>,
--   <tt>ExecuteStatement</tt>, and <tt>ListStatements</tt>.
newDescribeStatement :: Text -> DescribeStatement

-- | <i>See:</i> <a>newDescribeStatementResponse</a> smart constructor.
data DescribeStatementResponse
DescribeStatementResponse' :: Maybe StatusString -> Maybe Integer -> Maybe Integer -> Maybe Text -> Maybe [SubStatementData] -> Maybe Text -> Maybe POSIX -> Maybe (NonEmpty SqlParameter) -> Maybe Text -> Maybe Integer -> Maybe Integer -> Maybe Text -> Maybe Bool -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe Integer -> Int -> Text -> DescribeStatementResponse

-- | Create a value of <a>DescribeStatementResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:DescribeStatementResponse'</a>,
--   <a>describeStatementResponse_status</a> - The status of the SQL
--   statement being described. Status values are defined as follows:
--   
--   <ul>
--   <li>ABORTED - The query run was stopped by the user.</li>
--   <li>ALL - A status value that includes all query statuses. This value
--   can be used to filter results.</li>
--   <li>FAILED - The query run failed.</li>
--   <li>FINISHED - The query has finished running.</li>
--   <li>PICKED - The query has been chosen to be run.</li>
--   <li>STARTED - The query run has started.</li>
--   <li>SUBMITTED - The query was submitted, but not yet processed.</li>
--   </ul>
--   
--   <a>$sel:redshiftQueryId:DescribeStatementResponse'</a>,
--   <a>describeStatementResponse_redshiftQueryId</a> - The identifier of
--   the query generated by Amazon Redshift. These identifiers are also
--   available in the <tt>query</tt> column of the <tt>STL_QUERY</tt>
--   system view.
--   
--   <a>$sel:resultSize:DescribeStatementResponse'</a>,
--   <a>describeStatementResponse_resultSize</a> - The size in bytes of the
--   returned results. A <tt>-1</tt> indicates the value is null.
--   
--   <a>$sel:dbUser:DescribeStatementResponse'</a>,
--   <a>describeStatementResponse_dbUser</a> - The database user name.
--   
--   <a>$sel:subStatements:DescribeStatementResponse'</a>,
--   <a>describeStatementResponse_subStatements</a> - The SQL statements
--   from a multiple statement run.
--   
--   <a>$sel:database:DescribeStatementResponse'</a>,
--   <a>describeStatementResponse_database</a> - The name of the database.
--   
--   <a>$sel:createdAt:DescribeStatementResponse'</a>,
--   <a>describeStatementResponse_createdAt</a> - The date and time (UTC)
--   when the SQL statement was submitted to run.
--   
--   <a>$sel:queryParameters:DescribeStatementResponse'</a>,
--   <a>describeStatementResponse_queryParameters</a> - The parameters for
--   the SQL statement.
--   
--   <a>$sel:error:DescribeStatementResponse'</a>,
--   <a>describeStatementResponse_error</a> - The error message from the
--   cluster if the SQL statement encountered an error while running.
--   
--   <a>$sel:resultRows:DescribeStatementResponse'</a>,
--   <a>describeStatementResponse_resultRows</a> - Either the number of
--   rows returned from the SQL statement or the number of rows affected.
--   If result size is greater than zero, the result rows can be the number
--   of rows affected by SQL statements such as INSERT, UPDATE, DELETE,
--   COPY, and others. A <tt>-1</tt> indicates the value is null.
--   
--   <a>$sel:redshiftPid:DescribeStatementResponse'</a>,
--   <a>describeStatementResponse_redshiftPid</a> - The process identifier
--   from Amazon Redshift.
--   
--   <a>$sel:clusterIdentifier:DescribeStatementResponse'</a>,
--   <a>describeStatementResponse_clusterIdentifier</a> - The cluster
--   identifier.
--   
--   <a>$sel:hasResultSet:DescribeStatementResponse'</a>,
--   <a>describeStatementResponse_hasResultSet</a> - A value that indicates
--   whether the statement has a result set. The result set can be empty.
--   
--   <a>$sel:queryString:DescribeStatementResponse'</a>,
--   <a>describeStatementResponse_queryString</a> - The SQL statement text.
--   
--   <a>$sel:updatedAt:DescribeStatementResponse'</a>,
--   <a>describeStatementResponse_updatedAt</a> - The date and time (UTC)
--   that the metadata for the SQL statement was last updated. An example
--   is the time the status last changed.
--   
--   <a>$sel:secretArn:DescribeStatementResponse'</a>,
--   <a>describeStatementResponse_secretArn</a> - The name or Amazon
--   Resource Name (ARN) of the secret that enables access to the database.
--   
--   <a>$sel:duration:DescribeStatementResponse'</a>,
--   <a>describeStatementResponse_duration</a> - The amount of time in
--   nanoseconds that the statement ran.
--   
--   <a>$sel:httpStatus:DescribeStatementResponse'</a>,
--   <a>describeStatementResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:id:DescribeStatement'</a>, <a>describeStatementResponse_id</a>
--   - The identifier of the SQL statement described. This value is a
--   universally unique identifier (UUID) generated by Amazon Redshift Data
--   API.
newDescribeStatementResponse :: Int -> Text -> DescribeStatementResponse

-- | <i>See:</i> <a>newCancelStatement</a> smart constructor.
data CancelStatement
CancelStatement' :: Text -> CancelStatement

-- | Create a value of <a>CancelStatement</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:id:CancelStatement'</a>, <a>cancelStatement_id</a> - The
--   identifier of the SQL statement to cancel. This value is a universally
--   unique identifier (UUID) generated by Amazon Redshift Data API. This
--   identifier is returned by <tt>BatchExecuteStatment</tt>,
--   <tt>ExecuteStatment</tt>, and <tt>ListStatements</tt>.
newCancelStatement :: Text -> CancelStatement

-- | <i>See:</i> <a>newCancelStatementResponse</a> smart constructor.
data CancelStatementResponse
CancelStatementResponse' :: Maybe Bool -> Int -> CancelStatementResponse

-- | Create a value of <a>CancelStatementResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:CancelStatementResponse'</a>,
--   <a>cancelStatementResponse_status</a> - A value that indicates whether
--   the cancel statement succeeded (true).
--   
--   <a>$sel:httpStatus:CancelStatementResponse'</a>,
--   <a>cancelStatementResponse_httpStatus</a> - The response's http status
--   code.
newCancelStatementResponse :: Int -> CancelStatementResponse

-- | <i>See:</i> <a>newDescribeTable</a> smart constructor.
data DescribeTable
DescribeTable' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Natural -> Text -> Text -> DescribeTable

-- | Create a value of <a>DescribeTable</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dbUser:DescribeTable'</a>, <a>describeTable_dbUser</a> - The
--   database user name. This parameter is required when authenticating
--   using temporary credentials.
--   
--   <a>$sel:connectedDatabase:DescribeTable'</a>,
--   <a>describeTable_connectedDatabase</a> - A database name. The
--   connected database is specified when you connect with your
--   authentication credentials.
--   
--   <a>$sel:schema:DescribeTable'</a>, <a>describeTable_schema</a> - The
--   schema that contains the table. If no schema is specified, then
--   matching tables for all schemas are returned.
--   
--   <a>$sel:nextToken:DescribeTable'</a>, <a>describeTable_nextToken</a> -
--   A value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
--   
--   <a>$sel:secretArn:DescribeTable'</a>, <a>describeTable_secretArn</a> -
--   The name or ARN of the secret that enables access to the database.
--   This parameter is required when authenticating using Secrets Manager.
--   
--   <a>$sel:table:DescribeTable'</a>, <a>describeTable_table</a> - The
--   table name. If no table is specified, then all tables for all matching
--   schemas are returned. If no table and no schema is specified, then all
--   tables for all schemas in the database are returned
--   
--   <a>$sel:maxResults:DescribeTable'</a>, <a>describeTable_maxResults</a>
--   - The maximum number of tables to return in the response. If more
--   tables exist than fit in one response, then <tt>NextToken</tt> is
--   returned to page through the results.
--   
--   <a>$sel:clusterIdentifier:DescribeTable'</a>,
--   <a>describeTable_clusterIdentifier</a> - The cluster identifier. This
--   parameter is required when authenticating using either Secrets Manager
--   or temporary credentials.
--   
--   <a>$sel:database:DescribeTable'</a>, <a>describeTable_database</a> -
--   The name of the database that contains the tables to be described. If
--   <tt>ConnectedDatabase</tt> is not specified, this is also the database
--   to connect to with your authentication credentials.
newDescribeTable :: Text -> Text -> DescribeTable

-- | <i>See:</i> <a>newDescribeTableResponse</a> smart constructor.
data DescribeTableResponse
DescribeTableResponse' :: Maybe [ColumnMetadata] -> Maybe Text -> Maybe Text -> Int -> DescribeTableResponse

-- | Create a value of <a>DescribeTableResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:columnList:DescribeTableResponse'</a>,
--   <a>describeTableResponse_columnList</a> - A list of columns in the
--   table.
--   
--   <a>$sel:nextToken:DescribeTable'</a>,
--   <a>describeTableResponse_nextToken</a> - A value that indicates the
--   starting point for the next set of response records in a subsequent
--   request. If a value is returned in a response, you can retrieve the
--   next set of records by providing this returned NextToken value in the
--   next NextToken parameter and retrying the command. If the NextToken
--   field is empty, all response records have been retrieved for the
--   request.
--   
--   <a>$sel:tableName:DescribeTableResponse'</a>,
--   <a>describeTableResponse_tableName</a> - The table name.
--   
--   <a>$sel:httpStatus:DescribeTableResponse'</a>,
--   <a>describeTableResponse_httpStatus</a> - The response's http status
--   code.
newDescribeTableResponse :: Int -> DescribeTableResponse

-- | <i>See:</i> <a>newBatchExecuteStatement</a> smart constructor.
data BatchExecuteStatement
BatchExecuteStatement' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Bool -> Text -> Text -> NonEmpty Text -> BatchExecuteStatement

-- | Create a value of <a>BatchExecuteStatement</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dbUser:BatchExecuteStatement'</a>,
--   <a>batchExecuteStatement_dbUser</a> - The database user name. This
--   parameter is required when authenticating using temporary credentials.
--   
--   <a>$sel:statementName:BatchExecuteStatement'</a>,
--   <a>batchExecuteStatement_statementName</a> - The name of the SQL
--   statements. You can name the SQL statements when you create them to
--   identify the query.
--   
--   <a>$sel:secretArn:BatchExecuteStatement'</a>,
--   <a>batchExecuteStatement_secretArn</a> - The name or ARN of the secret
--   that enables access to the database. This parameter is required when
--   authenticating using Secrets Manager.
--   
--   <a>$sel:withEvent:BatchExecuteStatement'</a>,
--   <a>batchExecuteStatement_withEvent</a> - A value that indicates
--   whether to send an event to the Amazon EventBridge event bus after the
--   SQL statements run.
--   
--   <a>$sel:clusterIdentifier:BatchExecuteStatement'</a>,
--   <a>batchExecuteStatement_clusterIdentifier</a> - The cluster
--   identifier. This parameter is required when authenticating using
--   either Secrets Manager or temporary credentials.
--   
--   <a>$sel:database:BatchExecuteStatement'</a>,
--   <a>batchExecuteStatement_database</a> - The name of the database. This
--   parameter is required when authenticating using either Secrets Manager
--   or temporary credentials.
--   
--   <a>$sel:sqls:BatchExecuteStatement'</a>,
--   <a>batchExecuteStatement_sqls</a> - One or more SQL statements to run.
newBatchExecuteStatement :: Text -> Text -> NonEmpty Text -> BatchExecuteStatement

-- | <i>See:</i> <a>newBatchExecuteStatementResponse</a> smart constructor.
data BatchExecuteStatementResponse
BatchExecuteStatementResponse' :: Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe Text -> Int -> BatchExecuteStatementResponse

-- | Create a value of <a>BatchExecuteStatementResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dbUser:BatchExecuteStatement'</a>,
--   <a>batchExecuteStatementResponse_dbUser</a> - The database user name.
--   
--   <a>$sel:database:BatchExecuteStatement'</a>,
--   <a>batchExecuteStatementResponse_database</a> - The name of the
--   database.
--   
--   <a>$sel:createdAt:BatchExecuteStatementResponse'</a>,
--   <a>batchExecuteStatementResponse_createdAt</a> - The date and time
--   (UTC) the statement was created.
--   
--   <a>$sel:clusterIdentifier:BatchExecuteStatement'</a>,
--   <a>batchExecuteStatementResponse_clusterIdentifier</a> - The cluster
--   identifier.
--   
--   <a>$sel:id:BatchExecuteStatementResponse'</a>,
--   <a>batchExecuteStatementResponse_id</a> - The identifier of the SQL
--   statement whose results are to be fetched. This value is a universally
--   unique identifier (UUID) generated by Amazon Redshift Data API. This
--   identifier is returned by <tt>BatchExecuteStatment</tt>.
--   
--   <a>$sel:secretArn:BatchExecuteStatement'</a>,
--   <a>batchExecuteStatementResponse_secretArn</a> - The name or ARN of
--   the secret that enables access to the database.
--   
--   <a>$sel:httpStatus:BatchExecuteStatementResponse'</a>,
--   <a>batchExecuteStatementResponse_httpStatus</a> - The response's http
--   status code.
newBatchExecuteStatementResponse :: Int -> BatchExecuteStatementResponse

-- | <i>See:</i> <a>newListTables</a> smart constructor.
data ListTables
ListTables' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Natural -> Maybe Text -> Text -> Text -> ListTables

-- | Create a value of <a>ListTables</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dbUser:ListTables'</a>, <a>listTables_dbUser</a> - The
--   database user name. This parameter is required when authenticating
--   using temporary credentials.
--   
--   <a>$sel:connectedDatabase:ListTables'</a>,
--   <a>listTables_connectedDatabase</a> - A database name. The connected
--   database is specified when you connect with your authentication
--   credentials.
--   
--   <a>$sel:nextToken:ListTables'</a>, <a>listTables_nextToken</a> - A
--   value that indicates the starting point for the next set of response
--   records in a subsequent request. If a value is returned in a response,
--   you can retrieve the next set of records by providing this returned
--   NextToken value in the next NextToken parameter and retrying the
--   command. If the NextToken field is empty, all response records have
--   been retrieved for the request.
--   
--   <a>$sel:secretArn:ListTables'</a>, <a>listTables_secretArn</a> - The
--   name or ARN of the secret that enables access to the database. This
--   parameter is required when authenticating using Secrets Manager.
--   
--   <a>$sel:tablePattern:ListTables'</a>, <a>listTables_tablePattern</a> -
--   A pattern to filter results by table name. Within a table pattern, "%"
--   means match any substring of 0 or more characters and "_" means match
--   any one character. Only table name entries matching the search pattern
--   are returned. If <tt>TablePattern</tt> is not specified, then all
--   tables that match <tt>SchemaPattern</tt>are returned. If neither
--   <tt>SchemaPattern</tt> or <tt>TablePattern</tt> are specified, then
--   all tables are returned.
--   
--   <a>$sel:maxResults:ListTables'</a>, <a>listTables_maxResults</a> - The
--   maximum number of tables to return in the response. If more tables
--   exist than fit in one response, then <tt>NextToken</tt> is returned to
--   page through the results.
--   
--   <a>$sel:schemaPattern:ListTables'</a>, <a>listTables_schemaPattern</a>
--   - A pattern to filter results by schema name. Within a schema pattern,
--   "%" means match any substring of 0 or more characters and "_" means
--   match any one character. Only schema name entries matching the search
--   pattern are returned. If <tt>SchemaPattern</tt> is not specified, then
--   all tables that match <tt>TablePattern</tt> are returned. If neither
--   <tt>SchemaPattern</tt> or <tt>TablePattern</tt> are specified, then
--   all tables are returned.
--   
--   <a>$sel:clusterIdentifier:ListTables'</a>,
--   <a>listTables_clusterIdentifier</a> - The cluster identifier. This
--   parameter is required when authenticating using either Secrets Manager
--   or temporary credentials.
--   
--   <a>$sel:database:ListTables'</a>, <a>listTables_database</a> - The
--   name of the database that contains the tables to list. If
--   <tt>ConnectedDatabase</tt> is not specified, this is also the database
--   to connect to with your authentication credentials.
newListTables :: Text -> Text -> ListTables

-- | <i>See:</i> <a>newListTablesResponse</a> smart constructor.
data ListTablesResponse
ListTablesResponse' :: Maybe Text -> Maybe [TableMember] -> Int -> ListTablesResponse

-- | Create a value of <a>ListTablesResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListTables'</a>, <a>listTablesResponse_nextToken</a>
--   - A value that indicates the starting point for the next set of
--   response records in a subsequent request. If a value is returned in a
--   response, you can retrieve the next set of records by providing this
--   returned NextToken value in the next NextToken parameter and retrying
--   the command. If the NextToken field is empty, all response records
--   have been retrieved for the request.
--   
--   <a>$sel:tables:ListTablesResponse'</a>,
--   <a>listTablesResponse_tables</a> - The tables that match the request
--   pattern.
--   
--   <a>$sel:httpStatus:ListTablesResponse'</a>,
--   <a>listTablesResponse_httpStatus</a> - The response's http status
--   code.
newListTablesResponse :: Int -> ListTablesResponse

-- | <i>See:</i> <a>newExecuteStatement</a> smart constructor.
data ExecuteStatement
ExecuteStatement' :: Maybe Text -> Maybe Text -> Maybe (NonEmpty SqlParameter) -> Maybe Text -> Maybe Bool -> Text -> Text -> Text -> ExecuteStatement

-- | Create a value of <a>ExecuteStatement</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dbUser:ExecuteStatement'</a>, <a>executeStatement_dbUser</a> -
--   The database user name. This parameter is required when authenticating
--   using temporary credentials.
--   
--   <a>$sel:statementName:ExecuteStatement'</a>,
--   <a>executeStatement_statementName</a> - The name of the SQL statement.
--   You can name the SQL statement when you create it to identify the
--   query.
--   
--   <a>$sel:parameters:ExecuteStatement'</a>,
--   <a>executeStatement_parameters</a> - The parameters for the SQL
--   statement.
--   
--   <a>$sel:secretArn:ExecuteStatement'</a>,
--   <a>executeStatement_secretArn</a> - The name or ARN of the secret that
--   enables access to the database. This parameter is required when
--   authenticating using Secrets Manager.
--   
--   <a>$sel:withEvent:ExecuteStatement'</a>,
--   <a>executeStatement_withEvent</a> - A value that indicates whether to
--   send an event to the Amazon EventBridge event bus after the SQL
--   statement runs.
--   
--   <a>$sel:clusterIdentifier:ExecuteStatement'</a>,
--   <a>executeStatement_clusterIdentifier</a> - The cluster identifier.
--   This parameter is required when authenticating using either Secrets
--   Manager or temporary credentials.
--   
--   <a>$sel:database:ExecuteStatement'</a>,
--   <a>executeStatement_database</a> - The name of the database. This
--   parameter is required when authenticating using either Secrets Manager
--   or temporary credentials.
--   
--   <a>$sel:sql:ExecuteStatement'</a>, <a>executeStatement_sql</a> - The
--   SQL statement text to run.
newExecuteStatement :: Text -> Text -> Text -> ExecuteStatement

-- | <i>See:</i> <a>newExecuteStatementResponse</a> smart constructor.
data ExecuteStatementResponse
ExecuteStatementResponse' :: Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe Text -> Int -> ExecuteStatementResponse

-- | Create a value of <a>ExecuteStatementResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dbUser:ExecuteStatement'</a>,
--   <a>executeStatementResponse_dbUser</a> - The database user name.
--   
--   <a>$sel:database:ExecuteStatement'</a>,
--   <a>executeStatementResponse_database</a> - The name of the database.
--   
--   <a>$sel:createdAt:ExecuteStatementResponse'</a>,
--   <a>executeStatementResponse_createdAt</a> - The date and time (UTC)
--   the statement was created.
--   
--   <a>$sel:clusterIdentifier:ExecuteStatement'</a>,
--   <a>executeStatementResponse_clusterIdentifier</a> - The cluster
--   identifier.
--   
--   <a>$sel:id:ExecuteStatementResponse'</a>,
--   <a>executeStatementResponse_id</a> - The identifier of the SQL
--   statement whose results are to be fetched. This value is a universally
--   unique identifier (UUID) generated by Amazon Redshift Data API.
--   
--   <a>$sel:secretArn:ExecuteStatement'</a>,
--   <a>executeStatementResponse_secretArn</a> - The name or ARN of the
--   secret that enables access to the database.
--   
--   <a>$sel:httpStatus:ExecuteStatementResponse'</a>,
--   <a>executeStatementResponse_httpStatus</a> - The response's http
--   status code.
newExecuteStatementResponse :: Int -> ExecuteStatementResponse

-- | <i>See:</i> <a>newGetStatementResult</a> smart constructor.
data GetStatementResult
GetStatementResult' :: Maybe Text -> Text -> GetStatementResult

-- | Create a value of <a>GetStatementResult</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:GetStatementResult'</a>,
--   <a>getStatementResult_nextToken</a> - A value that indicates the
--   starting point for the next set of response records in a subsequent
--   request. If a value is returned in a response, you can retrieve the
--   next set of records by providing this returned NextToken value in the
--   next NextToken parameter and retrying the command. If the NextToken
--   field is empty, all response records have been retrieved for the
--   request.
--   
--   <a>$sel:id:GetStatementResult'</a>, <a>getStatementResult_id</a> - The
--   identifier of the SQL statement whose results are to be fetched. This
--   value is a universally unique identifier (UUID) generated by Amazon
--   Redshift Data API. A suffix indicates then number of the SQL
--   statement. For example,
--   <tt>d9b6c0c9-0747-4bf4-b142-e8883122f766:2</tt> has a suffix of
--   <tt>:2</tt> that indicates the second SQL statement of a batch query.
--   This identifier is returned by <tt>BatchExecuteStatment</tt>,
--   <tt>ExecuteStatment</tt>, and <tt>ListStatements</tt>.
newGetStatementResult :: Text -> GetStatementResult

-- | <i>See:</i> <a>newGetStatementResultResponse</a> smart constructor.
data GetStatementResultResponse
GetStatementResultResponse' :: Maybe Integer -> Maybe Text -> Maybe [ColumnMetadata] -> Int -> [[Field]] -> GetStatementResultResponse

-- | Create a value of <a>GetStatementResultResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:totalNumRows:GetStatementResultResponse'</a>,
--   <a>getStatementResultResponse_totalNumRows</a> - The total number of
--   rows in the result set returned from a query. You can use this number
--   to estimate the number of calls to the <tt>GetStatementResult</tt>
--   operation needed to page through the results.
--   
--   <a>$sel:nextToken:GetStatementResult'</a>,
--   <a>getStatementResultResponse_nextToken</a> - A value that indicates
--   the starting point for the next set of response records in a
--   subsequent request. If a value is returned in a response, you can
--   retrieve the next set of records by providing this returned NextToken
--   value in the next NextToken parameter and retrying the command. If the
--   NextToken field is empty, all response records have been retrieved for
--   the request.
--   
--   <a>$sel:columnMetadata:GetStatementResultResponse'</a>,
--   <a>getStatementResultResponse_columnMetadata</a> - The properties
--   (metadata) of a column.
--   
--   <a>$sel:httpStatus:GetStatementResultResponse'</a>,
--   <a>getStatementResultResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:records:GetStatementResultResponse'</a>,
--   <a>getStatementResultResponse_records</a> - The results of the SQL
--   statement.
newGetStatementResultResponse :: Int -> GetStatementResultResponse
newtype StatementStatusString
StatementStatusString' :: Text -> StatementStatusString
[fromStatementStatusString] :: StatementStatusString -> Text
pattern StatementStatusString_ABORTED :: StatementStatusString
pattern StatementStatusString_FAILED :: StatementStatusString
pattern StatementStatusString_FINISHED :: StatementStatusString
pattern StatementStatusString_PICKED :: StatementStatusString
pattern StatementStatusString_STARTED :: StatementStatusString
pattern StatementStatusString_SUBMITTED :: StatementStatusString
newtype StatusString
StatusString' :: Text -> StatusString
[fromStatusString] :: StatusString -> Text
pattern StatusString_ABORTED :: StatusString
pattern StatusString_ALL :: StatusString
pattern StatusString_FAILED :: StatusString
pattern StatusString_FINISHED :: StatusString
pattern StatusString_PICKED :: StatusString
pattern StatusString_STARTED :: StatusString
pattern StatusString_SUBMITTED :: StatusString

-- | The properties (metadata) of a column.
--   
--   <i>See:</i> <a>newColumnMetadata</a> smart constructor.
data ColumnMetadata
ColumnMetadata' :: Maybe Int -> Maybe Text -> Maybe Bool -> Maybe Text -> Maybe Bool -> Maybe Int -> Maybe Int -> Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Text -> Maybe Int -> Maybe Text -> ColumnMetadata

-- | Create a value of <a>ColumnMetadata</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:length:ColumnMetadata'</a>, <a>columnMetadata_length</a> - The
--   length of the column.
--   
--   <a>$sel:typeName:ColumnMetadata'</a>, <a>columnMetadata_typeName</a> -
--   The database-specific data type of the column.
--   
--   <a>$sel:isCaseSensitive:ColumnMetadata'</a>,
--   <a>columnMetadata_isCaseSensitive</a> - A value that indicates whether
--   the column is case-sensitive.
--   
--   <a>$sel:columnDefault:ColumnMetadata'</a>,
--   <a>columnMetadata_columnDefault</a> - The default value of the column.
--   
--   <a>$sel:isCurrency:ColumnMetadata'</a>,
--   <a>columnMetadata_isCurrency</a> - A value that indicates whether the
--   column contains currency values.
--   
--   <a>$sel:scale:ColumnMetadata'</a>, <a>columnMetadata_scale</a> - The
--   scale value of a decimal number column.
--   
--   <a>$sel:precision:ColumnMetadata'</a>, <a>columnMetadata_precision</a>
--   - The precision value of a decimal number column.
--   
--   <a>$sel:schemaName:ColumnMetadata'</a>,
--   <a>columnMetadata_schemaName</a> - The name of the schema that
--   contains the table that includes the column.
--   
--   <a>$sel:name:ColumnMetadata'</a>, <a>columnMetadata_name</a> - The
--   name of the column.
--   
--   <a>$sel:isSigned:ColumnMetadata'</a>, <a>columnMetadata_isSigned</a> -
--   A value that indicates whether an integer column is signed.
--   
--   <a>$sel:label:ColumnMetadata'</a>, <a>columnMetadata_label</a> - The
--   label for the column.
--   
--   <a>$sel:nullable:ColumnMetadata'</a>, <a>columnMetadata_nullable</a> -
--   A value that indicates whether the column is nullable.
--   
--   <a>$sel:tableName:ColumnMetadata'</a>, <a>columnMetadata_tableName</a>
--   - The name of the table that includes the column.
newColumnMetadata :: ColumnMetadata

-- | A data value in a column.
--   
--   <i>See:</i> <a>newField</a> smart constructor.
data Field
Field' :: Maybe Double -> Maybe Text -> Maybe Integer -> Maybe Bool -> Maybe Base64 -> Maybe Bool -> Field

-- | Create a value of <a>Field</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:doubleValue:Field'</a>, <a>field_doubleValue</a> - A value of
--   the double data type.
--   
--   <a>$sel:stringValue:Field'</a>, <a>field_stringValue</a> - A value of
--   the string data type.
--   
--   <a>$sel:longValue:Field'</a>, <a>field_longValue</a> - A value of the
--   long data type.
--   
--   <a>$sel:booleanValue:Field'</a>, <a>field_booleanValue</a> - A value
--   of the Boolean data type.
--   
--   <a>$sel:blobValue:Field'</a>, <a>field_blobValue</a> - A value of the
--   BLOB data type.-- -- <i>Note:</i> This <tt>Lens</tt> automatically
--   encodes and decodes Base64 data. -- The underlying isomorphism will
--   encode to Base64 representation during -- serialisation, and decode
--   from Base64 representation during deserialisation. -- This
--   <tt>Lens</tt> accepts and returns only raw unencoded data.
--   
--   <a>$sel:isNull:Field'</a>, <a>field_isNull</a> - A value that
--   indicates whether the data is NULL.
newField :: Field

-- | A parameter used in a SQL statement.
--   
--   <i>See:</i> <a>newSqlParameter</a> smart constructor.
data SqlParameter
SqlParameter' :: Text -> Text -> SqlParameter

-- | Create a value of <a>SqlParameter</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:name:SqlParameter'</a>, <a>sqlParameter_name</a> - The name of
--   the parameter.
--   
--   <a>$sel:value:SqlParameter'</a>, <a>sqlParameter_value</a> - The value
--   of the parameter. Amazon Redshift implicitly converts to the proper
--   data type. For more inforation, see <a>Data types</a> in the <i>Amazon
--   Redshift Database Developer Guide</i>.
newSqlParameter :: Text -> Text -> SqlParameter

-- | The SQL statement to run.
--   
--   <i>See:</i> <a>newStatementData</a> smart constructor.
data StatementData
StatementData' :: Maybe StatusString -> Maybe POSIX -> Maybe (NonEmpty SqlParameter) -> Maybe [Text] -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe Bool -> Text -> StatementData

-- | Create a value of <a>StatementData</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:StatementData'</a>, <a>statementData_status</a> - The
--   status of the SQL statement. An example is the that the SQL statement
--   finished.
--   
--   <a>$sel:createdAt:StatementData'</a>, <a>statementData_createdAt</a> -
--   The date and time (UTC) the statement was created.
--   
--   <a>$sel:queryParameters:StatementData'</a>,
--   <a>statementData_queryParameters</a> - The parameters used in a SQL
--   statement.
--   
--   <a>$sel:queryStrings:StatementData'</a>,
--   <a>statementData_queryStrings</a> - One or more SQL statements. Each
--   query string in the array corresponds to one of the queries in a batch
--   query request.
--   
--   <a>$sel:queryString:StatementData'</a>,
--   <a>statementData_queryString</a> - The SQL statement.
--   
--   <a>$sel:statementName:StatementData'</a>,
--   <a>statementData_statementName</a> - The name of the SQL statement.
--   
--   <a>$sel:updatedAt:StatementData'</a>, <a>statementData_updatedAt</a> -
--   The date and time (UTC) that the statement metadata was last updated.
--   
--   <a>$sel:secretArn:StatementData'</a>, <a>statementData_secretArn</a> -
--   The name or Amazon Resource Name (ARN) of the secret that enables
--   access to the database.
--   
--   <a>$sel:isBatchStatement:StatementData'</a>,
--   <a>statementData_isBatchStatement</a> - A value that indicates whether
--   the statement is a batch query request.
--   
--   <a>$sel:id:StatementData'</a>, <a>statementData_id</a> - The SQL
--   statement identifier. This value is a universally unique identifier
--   (UUID) generated by Amazon Redshift Data API.
newStatementData :: Text -> StatementData

-- | Information about an SQL statement.
--   
--   <i>See:</i> <a>newSubStatementData</a> smart constructor.
data SubStatementData
SubStatementData' :: Maybe StatementStatusString -> Maybe Integer -> Maybe Integer -> Maybe POSIX -> Maybe Text -> Maybe Integer -> Maybe Bool -> Maybe Text -> Maybe POSIX -> Maybe Integer -> Text -> SubStatementData

-- | Create a value of <a>SubStatementData</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:SubStatementData'</a>, <a>subStatementData_status</a> -
--   The status of the SQL statement. An example is the that the SQL
--   statement finished.
--   
--   <a>$sel:redshiftQueryId:SubStatementData'</a>,
--   <a>subStatementData_redshiftQueryId</a> - The SQL statement
--   identifier. This value is a universally unique identifier (UUID)
--   generated by Amazon Redshift Data API.
--   
--   <a>$sel:resultSize:SubStatementData'</a>,
--   <a>subStatementData_resultSize</a> - The size in bytes of the returned
--   results. A <tt>-1</tt> indicates the value is null.
--   
--   <a>$sel:createdAt:SubStatementData'</a>,
--   <a>subStatementData_createdAt</a> - The date and time (UTC) the
--   statement was created.
--   
--   <a>$sel:error:SubStatementData'</a>, <a>subStatementData_error</a> -
--   The error message from the cluster if the SQL statement encountered an
--   error while running.
--   
--   <a>$sel:resultRows:SubStatementData'</a>,
--   <a>subStatementData_resultRows</a> - Either the number of rows
--   returned from the SQL statement or the number of rows affected. If
--   result size is greater than zero, the result rows can be the number of
--   rows affected by SQL statements such as INSERT, UPDATE, DELETE, COPY,
--   and others. A <tt>-1</tt> indicates the value is null.
--   
--   <a>$sel:hasResultSet:SubStatementData'</a>,
--   <a>subStatementData_hasResultSet</a> - A value that indicates whether
--   the statement has a result set. The result set can be empty.
--   
--   <a>$sel:queryString:SubStatementData'</a>,
--   <a>subStatementData_queryString</a> - The SQL statement text.
--   
--   <a>$sel:updatedAt:SubStatementData'</a>,
--   <a>subStatementData_updatedAt</a> - The date and time (UTC) that the
--   statement metadata was last updated.
--   
--   <a>$sel:duration:SubStatementData'</a>,
--   <a>subStatementData_duration</a> - The amount of time in nanoseconds
--   that the statement ran.
--   
--   <a>$sel:id:SubStatementData'</a>, <a>subStatementData_id</a> - The
--   identifier of the SQL statement. This value is a universally unique
--   identifier (UUID) generated by Amazon Redshift Data API. A suffix
--   indicates the number of the SQL statement. For example,
--   <tt>d9b6c0c9-0747-4bf4-b142-e8883122f766:2</tt> has a suffix of
--   <tt>:2</tt> that indicates the second SQL statement of a batch query.
newSubStatementData :: Text -> SubStatementData

-- | The properties of a table.
--   
--   <i>See:</i> <a>newTableMember</a> smart constructor.
data TableMember
TableMember' :: Maybe Text -> Maybe Text -> Maybe Text -> TableMember

-- | Create a value of <a>TableMember</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:schema:TableMember'</a>, <a>tableMember_schema</a> - The
--   schema containing the table.
--   
--   <a>$sel:name:TableMember'</a>, <a>tableMember_name</a> - The name of
--   the table.
--   
--   <a>$sel:type':TableMember'</a>, <a>tableMember_type</a> - The type of
--   the table. Possible values include TABLE, VIEW, SYSTEM TABLE, GLOBAL
--   TEMPORARY, LOCAL TEMPORARY, ALIAS, and SYNONYM.
newTableMember :: TableMember
