-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/

@package libZSservicesZSamazonka-appsyncZSamazonka-appsync
@version 1.6.1


module Network.AWS.AppSync.Types.ApiCacheStatus
newtype ApiCacheStatus
ApiCacheStatus' :: Text -> ApiCacheStatus
[fromApiCacheStatus] :: ApiCacheStatus -> Text
pattern ApiCacheStatus_AVAILABLE :: ApiCacheStatus
pattern ApiCacheStatus_CREATING :: ApiCacheStatus
pattern ApiCacheStatus_DELETING :: ApiCacheStatus
pattern ApiCacheStatus_FAILED :: ApiCacheStatus
pattern ApiCacheStatus_MODIFYING :: ApiCacheStatus
instance Network.AWS.Data.XML.ToXML Network.AWS.AppSync.Types.ApiCacheStatus.ApiCacheStatus
instance Network.AWS.Data.XML.FromXML Network.AWS.AppSync.Types.ApiCacheStatus.ApiCacheStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.AppSync.Types.ApiCacheStatus.ApiCacheStatus
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.Types.ApiCacheStatus.ApiCacheStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.AppSync.Types.ApiCacheStatus.ApiCacheStatus
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.AppSync.Types.ApiCacheStatus.ApiCacheStatus
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.Types.ApiCacheStatus.ApiCacheStatus
instance Network.AWS.Data.Headers.ToHeader Network.AWS.AppSync.Types.ApiCacheStatus.ApiCacheStatus
instance Network.AWS.Data.Log.ToLog Network.AWS.AppSync.Types.ApiCacheStatus.ApiCacheStatus
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.AppSync.Types.ApiCacheStatus.ApiCacheStatus
instance Network.AWS.Data.Text.ToText Network.AWS.AppSync.Types.ApiCacheStatus.ApiCacheStatus
instance Network.AWS.Data.Text.FromText Network.AWS.AppSync.Types.ApiCacheStatus.ApiCacheStatus
instance Control.DeepSeq.NFData Network.AWS.AppSync.Types.ApiCacheStatus.ApiCacheStatus
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.Types.ApiCacheStatus.ApiCacheStatus
instance GHC.Generics.Generic Network.AWS.AppSync.Types.ApiCacheStatus.ApiCacheStatus
instance GHC.Classes.Ord Network.AWS.AppSync.Types.ApiCacheStatus.ApiCacheStatus
instance GHC.Classes.Eq Network.AWS.AppSync.Types.ApiCacheStatus.ApiCacheStatus
instance GHC.Read.Read Network.AWS.AppSync.Types.ApiCacheStatus.ApiCacheStatus
instance GHC.Show.Show Network.AWS.AppSync.Types.ApiCacheStatus.ApiCacheStatus


module Network.AWS.AppSync.Types.ApiCacheType
newtype ApiCacheType
ApiCacheType' :: Text -> ApiCacheType
[fromApiCacheType] :: ApiCacheType -> Text
pattern ApiCacheType_LARGE :: ApiCacheType
pattern ApiCacheType_LARGE_12X :: ApiCacheType
pattern ApiCacheType_LARGE_2X :: ApiCacheType
pattern ApiCacheType_LARGE_4X :: ApiCacheType
pattern ApiCacheType_LARGE_8X :: ApiCacheType
pattern ApiCacheType_MEDIUM :: ApiCacheType
pattern ApiCacheType_R4_2XLARGE :: ApiCacheType
pattern ApiCacheType_R4_4XLARGE :: ApiCacheType
pattern ApiCacheType_R4_8XLARGE :: ApiCacheType
pattern ApiCacheType_R4_LARGE :: ApiCacheType
pattern ApiCacheType_R4_XLARGE :: ApiCacheType
pattern ApiCacheType_SMALL :: ApiCacheType
pattern ApiCacheType_T2_MEDIUM :: ApiCacheType
pattern ApiCacheType_T2_SMALL :: ApiCacheType
pattern ApiCacheType_XLARGE :: ApiCacheType
instance Network.AWS.Data.XML.ToXML Network.AWS.AppSync.Types.ApiCacheType.ApiCacheType
instance Network.AWS.Data.XML.FromXML Network.AWS.AppSync.Types.ApiCacheType.ApiCacheType
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.AppSync.Types.ApiCacheType.ApiCacheType
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.Types.ApiCacheType.ApiCacheType
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.AppSync.Types.ApiCacheType.ApiCacheType
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.AppSync.Types.ApiCacheType.ApiCacheType
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.Types.ApiCacheType.ApiCacheType
instance Network.AWS.Data.Headers.ToHeader Network.AWS.AppSync.Types.ApiCacheType.ApiCacheType
instance Network.AWS.Data.Log.ToLog Network.AWS.AppSync.Types.ApiCacheType.ApiCacheType
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.AppSync.Types.ApiCacheType.ApiCacheType
instance Network.AWS.Data.Text.ToText Network.AWS.AppSync.Types.ApiCacheType.ApiCacheType
instance Network.AWS.Data.Text.FromText Network.AWS.AppSync.Types.ApiCacheType.ApiCacheType
instance Control.DeepSeq.NFData Network.AWS.AppSync.Types.ApiCacheType.ApiCacheType
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.Types.ApiCacheType.ApiCacheType
instance GHC.Generics.Generic Network.AWS.AppSync.Types.ApiCacheType.ApiCacheType
instance GHC.Classes.Ord Network.AWS.AppSync.Types.ApiCacheType.ApiCacheType
instance GHC.Classes.Eq Network.AWS.AppSync.Types.ApiCacheType.ApiCacheType
instance GHC.Read.Read Network.AWS.AppSync.Types.ApiCacheType.ApiCacheType
instance GHC.Show.Show Network.AWS.AppSync.Types.ApiCacheType.ApiCacheType


module Network.AWS.AppSync.Types.ApiCachingBehavior
newtype ApiCachingBehavior
ApiCachingBehavior' :: Text -> ApiCachingBehavior
[fromApiCachingBehavior] :: ApiCachingBehavior -> Text
pattern ApiCachingBehavior_FULL_REQUEST_CACHING :: ApiCachingBehavior
pattern ApiCachingBehavior_PER_RESOLVER_CACHING :: ApiCachingBehavior
instance Network.AWS.Data.XML.ToXML Network.AWS.AppSync.Types.ApiCachingBehavior.ApiCachingBehavior
instance Network.AWS.Data.XML.FromXML Network.AWS.AppSync.Types.ApiCachingBehavior.ApiCachingBehavior
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.AppSync.Types.ApiCachingBehavior.ApiCachingBehavior
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.Types.ApiCachingBehavior.ApiCachingBehavior
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.AppSync.Types.ApiCachingBehavior.ApiCachingBehavior
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.AppSync.Types.ApiCachingBehavior.ApiCachingBehavior
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.Types.ApiCachingBehavior.ApiCachingBehavior
instance Network.AWS.Data.Headers.ToHeader Network.AWS.AppSync.Types.ApiCachingBehavior.ApiCachingBehavior
instance Network.AWS.Data.Log.ToLog Network.AWS.AppSync.Types.ApiCachingBehavior.ApiCachingBehavior
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.AppSync.Types.ApiCachingBehavior.ApiCachingBehavior
instance Network.AWS.Data.Text.ToText Network.AWS.AppSync.Types.ApiCachingBehavior.ApiCachingBehavior
instance Network.AWS.Data.Text.FromText Network.AWS.AppSync.Types.ApiCachingBehavior.ApiCachingBehavior
instance Control.DeepSeq.NFData Network.AWS.AppSync.Types.ApiCachingBehavior.ApiCachingBehavior
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.Types.ApiCachingBehavior.ApiCachingBehavior
instance GHC.Generics.Generic Network.AWS.AppSync.Types.ApiCachingBehavior.ApiCachingBehavior
instance GHC.Classes.Ord Network.AWS.AppSync.Types.ApiCachingBehavior.ApiCachingBehavior
instance GHC.Classes.Eq Network.AWS.AppSync.Types.ApiCachingBehavior.ApiCachingBehavior
instance GHC.Read.Read Network.AWS.AppSync.Types.ApiCachingBehavior.ApiCachingBehavior
instance GHC.Show.Show Network.AWS.AppSync.Types.ApiCachingBehavior.ApiCachingBehavior


module Network.AWS.AppSync.Types.ApiCache

-- | The <tt>ApiCache</tt> object.
--   
--   <i>See:</i> <a>newApiCache</a> smart constructor.
data ApiCache
ApiCache' :: Maybe ApiCacheStatus -> Maybe Bool -> Maybe Integer -> Maybe ApiCacheType -> Maybe Bool -> Maybe ApiCachingBehavior -> ApiCache

-- | The cache instance status.
--   
--   <ul>
--   <li><b>AVAILABLE</b>: The instance is available for use.</li>
--   <li><b>CREATING</b>: The instance is currently creating.</li>
--   <li><b>DELETING</b>: The instance is currently deleting.</li>
--   <li><b>MODIFYING</b>: The instance is currently modifying.</li>
--   <li><b>FAILED</b>: The instance has failed creation.</li>
--   </ul>
[$sel:status:ApiCache'] :: ApiCache -> Maybe ApiCacheStatus

-- | At rest encryption flag for cache. This setting cannot be updated
--   after creation.
[$sel:atRestEncryptionEnabled:ApiCache'] :: ApiCache -> Maybe Bool

-- | TTL in seconds for cache entries.
--   
--   Valid values are between 1 and 3600 seconds.
[$sel:ttl:ApiCache'] :: ApiCache -> Maybe Integer

-- | The cache instance type. Valid values are
--   
--   <ul>
--   <li><pre>SMALL</pre></li>
--   <li><pre>MEDIUM</pre></li>
--   <li><pre>LARGE</pre></li>
--   <li><pre>XLARGE</pre></li>
--   <li><pre>LARGE_2X</pre></li>
--   <li><pre>LARGE_4X</pre></li>
--   <li><tt>LARGE_8X</tt> (not available in all regions)</li>
--   <li><pre>LARGE_12X</pre></li>
--   </ul>
--   
--   Historically, instance types were identified by an EC2-style value. As
--   of July 2020, this is deprecated, and the generic identifiers above
--   should be used.
--   
--   The following legacy instance types are available, but their use is
--   discouraged:
--   
--   <ul>
--   <li><b>T2_SMALL</b>: A t2.small instance type.</li>
--   <li><b>T2_MEDIUM</b>: A t2.medium instance type.</li>
--   <li><b>R4_LARGE</b>: A r4.large instance type.</li>
--   <li><b>R4_XLARGE</b>: A r4.xlarge instance type.</li>
--   <li><b>R4_2XLARGE</b>: A r4.2xlarge instance type.</li>
--   <li><b>R4_4XLARGE</b>: A r4.4xlarge instance type.</li>
--   <li><b>R4_8XLARGE</b>: A r4.8xlarge instance type.</li>
--   </ul>
[$sel:type':ApiCache'] :: ApiCache -> Maybe ApiCacheType

-- | Transit encryption flag when connecting to cache. This setting cannot
--   be updated after creation.
[$sel:transitEncryptionEnabled:ApiCache'] :: ApiCache -> Maybe Bool

-- | Caching behavior.
--   
--   <ul>
--   <li><b>FULL_REQUEST_CACHING</b>: All requests are fully cached.</li>
--   <li><b>PER_RESOLVER_CACHING</b>: Individual resolvers that you specify
--   are cached.</li>
--   </ul>
[$sel:apiCachingBehavior:ApiCache'] :: ApiCache -> Maybe ApiCachingBehavior

-- | Create a value of <a>ApiCache</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:ApiCache'</a>, <a>apiCache_status</a> - The cache
--   instance status.
--   
--   <ul>
--   <li><b>AVAILABLE</b>: The instance is available for use.</li>
--   <li><b>CREATING</b>: The instance is currently creating.</li>
--   <li><b>DELETING</b>: The instance is currently deleting.</li>
--   <li><b>MODIFYING</b>: The instance is currently modifying.</li>
--   <li><b>FAILED</b>: The instance has failed creation.</li>
--   </ul>
--   
--   <a>$sel:atRestEncryptionEnabled:ApiCache'</a>,
--   <a>apiCache_atRestEncryptionEnabled</a> - At rest encryption flag for
--   cache. This setting cannot be updated after creation.
--   
--   <a>$sel:ttl:ApiCache'</a>, <a>apiCache_ttl</a> - TTL in seconds for
--   cache entries.
--   
--   Valid values are between 1 and 3600 seconds.
--   
--   <a>$sel:type':ApiCache'</a>, <a>apiCache_type</a> - The cache instance
--   type. Valid values are
--   
--   <ul>
--   <li><pre>SMALL</pre></li>
--   <li><pre>MEDIUM</pre></li>
--   <li><pre>LARGE</pre></li>
--   <li><pre>XLARGE</pre></li>
--   <li><pre>LARGE_2X</pre></li>
--   <li><pre>LARGE_4X</pre></li>
--   <li><tt>LARGE_8X</tt> (not available in all regions)</li>
--   <li><pre>LARGE_12X</pre></li>
--   </ul>
--   
--   Historically, instance types were identified by an EC2-style value. As
--   of July 2020, this is deprecated, and the generic identifiers above
--   should be used.
--   
--   The following legacy instance types are available, but their use is
--   discouraged:
--   
--   <ul>
--   <li><b>T2_SMALL</b>: A t2.small instance type.</li>
--   <li><b>T2_MEDIUM</b>: A t2.medium instance type.</li>
--   <li><b>R4_LARGE</b>: A r4.large instance type.</li>
--   <li><b>R4_XLARGE</b>: A r4.xlarge instance type.</li>
--   <li><b>R4_2XLARGE</b>: A r4.2xlarge instance type.</li>
--   <li><b>R4_4XLARGE</b>: A r4.4xlarge instance type.</li>
--   <li><b>R4_8XLARGE</b>: A r4.8xlarge instance type.</li>
--   </ul>
--   
--   <a>$sel:transitEncryptionEnabled:ApiCache'</a>,
--   <a>apiCache_transitEncryptionEnabled</a> - Transit encryption flag
--   when connecting to cache. This setting cannot be updated after
--   creation.
--   
--   <a>$sel:apiCachingBehavior:ApiCache'</a>,
--   <a>apiCache_apiCachingBehavior</a> - Caching behavior.
--   
--   <ul>
--   <li><b>FULL_REQUEST_CACHING</b>: All requests are fully cached.</li>
--   <li><b>PER_RESOLVER_CACHING</b>: Individual resolvers that you specify
--   are cached.</li>
--   </ul>
newApiCache :: ApiCache

-- | The cache instance status.
--   
--   <ul>
--   <li><b>AVAILABLE</b>: The instance is available for use.</li>
--   <li><b>CREATING</b>: The instance is currently creating.</li>
--   <li><b>DELETING</b>: The instance is currently deleting.</li>
--   <li><b>MODIFYING</b>: The instance is currently modifying.</li>
--   <li><b>FAILED</b>: The instance has failed creation.</li>
--   </ul>
apiCache_status :: Lens' ApiCache (Maybe ApiCacheStatus)

-- | At rest encryption flag for cache. This setting cannot be updated
--   after creation.
apiCache_atRestEncryptionEnabled :: Lens' ApiCache (Maybe Bool)

-- | TTL in seconds for cache entries.
--   
--   Valid values are between 1 and 3600 seconds.
apiCache_ttl :: Lens' ApiCache (Maybe Integer)

-- | The cache instance type. Valid values are
--   
--   <ul>
--   <li><pre>SMALL</pre></li>
--   <li><pre>MEDIUM</pre></li>
--   <li><pre>LARGE</pre></li>
--   <li><pre>XLARGE</pre></li>
--   <li><pre>LARGE_2X</pre></li>
--   <li><pre>LARGE_4X</pre></li>
--   <li><tt>LARGE_8X</tt> (not available in all regions)</li>
--   <li><pre>LARGE_12X</pre></li>
--   </ul>
--   
--   Historically, instance types were identified by an EC2-style value. As
--   of July 2020, this is deprecated, and the generic identifiers above
--   should be used.
--   
--   The following legacy instance types are available, but their use is
--   discouraged:
--   
--   <ul>
--   <li><b>T2_SMALL</b>: A t2.small instance type.</li>
--   <li><b>T2_MEDIUM</b>: A t2.medium instance type.</li>
--   <li><b>R4_LARGE</b>: A r4.large instance type.</li>
--   <li><b>R4_XLARGE</b>: A r4.xlarge instance type.</li>
--   <li><b>R4_2XLARGE</b>: A r4.2xlarge instance type.</li>
--   <li><b>R4_4XLARGE</b>: A r4.4xlarge instance type.</li>
--   <li><b>R4_8XLARGE</b>: A r4.8xlarge instance type.</li>
--   </ul>
apiCache_type :: Lens' ApiCache (Maybe ApiCacheType)

-- | Transit encryption flag when connecting to cache. This setting cannot
--   be updated after creation.
apiCache_transitEncryptionEnabled :: Lens' ApiCache (Maybe Bool)

-- | Caching behavior.
--   
--   <ul>
--   <li><b>FULL_REQUEST_CACHING</b>: All requests are fully cached.</li>
--   <li><b>PER_RESOLVER_CACHING</b>: Individual resolvers that you specify
--   are cached.</li>
--   </ul>
apiCache_apiCachingBehavior :: Lens' ApiCache (Maybe ApiCachingBehavior)
instance GHC.Generics.Generic Network.AWS.AppSync.Types.ApiCache.ApiCache
instance GHC.Show.Show Network.AWS.AppSync.Types.ApiCache.ApiCache
instance GHC.Read.Read Network.AWS.AppSync.Types.ApiCache.ApiCache
instance GHC.Classes.Eq Network.AWS.AppSync.Types.ApiCache.ApiCache
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.AppSync.Types.ApiCache.ApiCache
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.Types.ApiCache.ApiCache
instance Control.DeepSeq.NFData Network.AWS.AppSync.Types.ApiCache.ApiCache


module Network.AWS.AppSync.Types.ApiKey

-- | Describes an API key.
--   
--   Customers invoke AppSync GraphQL API operations with API keys as an
--   identity mechanism. There are two key versions:
--   
--   <b>da1</b>: This version was introduced at launch in November 2017.
--   These keys always expire after 7 days. Key expiration is managed by
--   Amazon DynamoDB TTL. The keys ceased to be valid after February 21,
--   2018 and should not be used after that date.
--   
--   <ul>
--   <li><tt>ListApiKeys</tt> returns the expiration time in
--   milliseconds.</li>
--   <li><tt>CreateApiKey</tt> returns the expiration time in
--   milliseconds.</li>
--   <li><tt>UpdateApiKey</tt> is not available for this key version.</li>
--   <li><tt>DeleteApiKey</tt> deletes the item from the table.</li>
--   <li>Expiration is stored in Amazon DynamoDB as milliseconds. This
--   results in a bug where keys are not automatically deleted because
--   DynamoDB expects the TTL to be stored in seconds. As a one-time
--   action, we will delete these keys from the table after February 21,
--   2018.</li>
--   </ul>
--   
--   <b>da2</b>: This version was introduced in February 2018 when AppSync
--   added support to extend key expiration.
--   
--   <ul>
--   <li><tt>ListApiKeys</tt> returns the expiration time and deletion time
--   in seconds.</li>
--   <li><tt>CreateApiKey</tt> returns the expiration time and deletion
--   time in seconds and accepts a user-provided expiration time in
--   seconds.</li>
--   <li><tt>UpdateApiKey</tt> returns the expiration time and and deletion
--   time in seconds and accepts a user-provided expiration time in
--   seconds. Expired API keys are kept for 60 days after the expiration
--   time. Key expiration time can be updated while the key is not
--   deleted.</li>
--   <li><tt>DeleteApiKey</tt> deletes the item from the table.</li>
--   <li>Expiration is stored in Amazon DynamoDB as seconds. After the
--   expiration time, using the key to authenticate will fail. But the key
--   can be reinstated before deletion.</li>
--   <li>Deletion is stored in Amazon DynamoDB as seconds. The key will be
--   deleted after deletion time.</li>
--   </ul>
--   
--   <i>See:</i> <a>newApiKey</a> smart constructor.
data ApiKey
ApiKey' :: Maybe Text -> Maybe Integer -> Maybe Text -> Maybe Integer -> ApiKey

-- | The API key ID.
[$sel:id:ApiKey'] :: ApiKey -> Maybe Text

-- | The time after which the API key is deleted. The date is represented
--   as seconds since the epoch, rounded down to the nearest hour.
[$sel:deletes:ApiKey'] :: ApiKey -> Maybe Integer

-- | A description of the purpose of the API key.
[$sel:description:ApiKey'] :: ApiKey -> Maybe Text

-- | The time after which the API key expires. The date is represented as
--   seconds since the epoch, rounded down to the nearest hour.
[$sel:expires:ApiKey'] :: ApiKey -> Maybe Integer

-- | Create a value of <a>ApiKey</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:id:ApiKey'</a>, <a>apiKey_id</a> - The API key ID.
--   
--   <a>$sel:deletes:ApiKey'</a>, <a>apiKey_deletes</a> - The time after
--   which the API key is deleted. The date is represented as seconds since
--   the epoch, rounded down to the nearest hour.
--   
--   <a>$sel:description:ApiKey'</a>, <a>apiKey_description</a> - A
--   description of the purpose of the API key.
--   
--   <a>$sel:expires:ApiKey'</a>, <a>apiKey_expires</a> - The time after
--   which the API key expires. The date is represented as seconds since
--   the epoch, rounded down to the nearest hour.
newApiKey :: ApiKey

-- | The API key ID.
apiKey_id :: Lens' ApiKey (Maybe Text)

-- | The time after which the API key is deleted. The date is represented
--   as seconds since the epoch, rounded down to the nearest hour.
apiKey_deletes :: Lens' ApiKey (Maybe Integer)

-- | A description of the purpose of the API key.
apiKey_description :: Lens' ApiKey (Maybe Text)

-- | The time after which the API key expires. The date is represented as
--   seconds since the epoch, rounded down to the nearest hour.
apiKey_expires :: Lens' ApiKey (Maybe Integer)
instance GHC.Generics.Generic Network.AWS.AppSync.Types.ApiKey.ApiKey
instance GHC.Show.Show Network.AWS.AppSync.Types.ApiKey.ApiKey
instance GHC.Read.Read Network.AWS.AppSync.Types.ApiKey.ApiKey
instance GHC.Classes.Eq Network.AWS.AppSync.Types.ApiKey.ApiKey
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.AppSync.Types.ApiKey.ApiKey
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.Types.ApiKey.ApiKey
instance Control.DeepSeq.NFData Network.AWS.AppSync.Types.ApiKey.ApiKey


module Network.AWS.AppSync.Types.AuthenticationType
newtype AuthenticationType
AuthenticationType' :: Text -> AuthenticationType
[fromAuthenticationType] :: AuthenticationType -> Text
pattern AuthenticationType_AMAZON_COGNITO_USER_POOLS :: AuthenticationType
pattern AuthenticationType_API_KEY :: AuthenticationType
pattern AuthenticationType_AWS_IAM :: AuthenticationType
pattern AuthenticationType_AWS_LAMBDA :: AuthenticationType
pattern AuthenticationType_OPENID_CONNECT :: AuthenticationType
instance Network.AWS.Data.XML.ToXML Network.AWS.AppSync.Types.AuthenticationType.AuthenticationType
instance Network.AWS.Data.XML.FromXML Network.AWS.AppSync.Types.AuthenticationType.AuthenticationType
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.AppSync.Types.AuthenticationType.AuthenticationType
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.Types.AuthenticationType.AuthenticationType
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.AppSync.Types.AuthenticationType.AuthenticationType
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.AppSync.Types.AuthenticationType.AuthenticationType
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.Types.AuthenticationType.AuthenticationType
instance Network.AWS.Data.Headers.ToHeader Network.AWS.AppSync.Types.AuthenticationType.AuthenticationType
instance Network.AWS.Data.Log.ToLog Network.AWS.AppSync.Types.AuthenticationType.AuthenticationType
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.AppSync.Types.AuthenticationType.AuthenticationType
instance Network.AWS.Data.Text.ToText Network.AWS.AppSync.Types.AuthenticationType.AuthenticationType
instance Network.AWS.Data.Text.FromText Network.AWS.AppSync.Types.AuthenticationType.AuthenticationType
instance Control.DeepSeq.NFData Network.AWS.AppSync.Types.AuthenticationType.AuthenticationType
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.Types.AuthenticationType.AuthenticationType
instance GHC.Generics.Generic Network.AWS.AppSync.Types.AuthenticationType.AuthenticationType
instance GHC.Classes.Ord Network.AWS.AppSync.Types.AuthenticationType.AuthenticationType
instance GHC.Classes.Eq Network.AWS.AppSync.Types.AuthenticationType.AuthenticationType
instance GHC.Read.Read Network.AWS.AppSync.Types.AuthenticationType.AuthenticationType
instance GHC.Show.Show Network.AWS.AppSync.Types.AuthenticationType.AuthenticationType


module Network.AWS.AppSync.Types.AuthorizationType
newtype AuthorizationType
AuthorizationType' :: Text -> AuthorizationType
[fromAuthorizationType] :: AuthorizationType -> Text
pattern AuthorizationType_AWS_IAM :: AuthorizationType
instance Network.AWS.Data.XML.ToXML Network.AWS.AppSync.Types.AuthorizationType.AuthorizationType
instance Network.AWS.Data.XML.FromXML Network.AWS.AppSync.Types.AuthorizationType.AuthorizationType
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.AppSync.Types.AuthorizationType.AuthorizationType
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.Types.AuthorizationType.AuthorizationType
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.AppSync.Types.AuthorizationType.AuthorizationType
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.AppSync.Types.AuthorizationType.AuthorizationType
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.Types.AuthorizationType.AuthorizationType
instance Network.AWS.Data.Headers.ToHeader Network.AWS.AppSync.Types.AuthorizationType.AuthorizationType
instance Network.AWS.Data.Log.ToLog Network.AWS.AppSync.Types.AuthorizationType.AuthorizationType
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.AppSync.Types.AuthorizationType.AuthorizationType
instance Network.AWS.Data.Text.ToText Network.AWS.AppSync.Types.AuthorizationType.AuthorizationType
instance Network.AWS.Data.Text.FromText Network.AWS.AppSync.Types.AuthorizationType.AuthorizationType
instance Control.DeepSeq.NFData Network.AWS.AppSync.Types.AuthorizationType.AuthorizationType
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.Types.AuthorizationType.AuthorizationType
instance GHC.Generics.Generic Network.AWS.AppSync.Types.AuthorizationType.AuthorizationType
instance GHC.Classes.Ord Network.AWS.AppSync.Types.AuthorizationType.AuthorizationType
instance GHC.Classes.Eq Network.AWS.AppSync.Types.AuthorizationType.AuthorizationType
instance GHC.Read.Read Network.AWS.AppSync.Types.AuthorizationType.AuthorizationType
instance GHC.Show.Show Network.AWS.AppSync.Types.AuthorizationType.AuthorizationType


module Network.AWS.AppSync.Types.AwsIamConfig

-- | The Identity and Access Management configuration.
--   
--   <i>See:</i> <a>newAwsIamConfig</a> smart constructor.
data AwsIamConfig
AwsIamConfig' :: Maybe Text -> Maybe Text -> AwsIamConfig

-- | The signing service name for Identity and Access Management
--   authorization.
[$sel:signingServiceName:AwsIamConfig'] :: AwsIamConfig -> Maybe Text

-- | The signing region for Identity and Access Management authorization.
[$sel:signingRegion:AwsIamConfig'] :: AwsIamConfig -> Maybe Text

-- | Create a value of <a>AwsIamConfig</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:signingServiceName:AwsIamConfig'</a>,
--   <a>awsIamConfig_signingServiceName</a> - The signing service name for
--   Identity and Access Management authorization.
--   
--   <a>$sel:signingRegion:AwsIamConfig'</a>,
--   <a>awsIamConfig_signingRegion</a> - The signing region for Identity
--   and Access Management authorization.
newAwsIamConfig :: AwsIamConfig

-- | The signing service name for Identity and Access Management
--   authorization.
awsIamConfig_signingServiceName :: Lens' AwsIamConfig (Maybe Text)

-- | The signing region for Identity and Access Management authorization.
awsIamConfig_signingRegion :: Lens' AwsIamConfig (Maybe Text)
instance GHC.Generics.Generic Network.AWS.AppSync.Types.AwsIamConfig.AwsIamConfig
instance GHC.Show.Show Network.AWS.AppSync.Types.AwsIamConfig.AwsIamConfig
instance GHC.Read.Read Network.AWS.AppSync.Types.AwsIamConfig.AwsIamConfig
instance GHC.Classes.Eq Network.AWS.AppSync.Types.AwsIamConfig.AwsIamConfig
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.AppSync.Types.AwsIamConfig.AwsIamConfig
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.Types.AwsIamConfig.AwsIamConfig
instance Control.DeepSeq.NFData Network.AWS.AppSync.Types.AwsIamConfig.AwsIamConfig
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.Types.AwsIamConfig.AwsIamConfig


module Network.AWS.AppSync.Types.AuthorizationConfig

-- | The authorization config in case the HTTP endpoint requires
--   authorization.
--   
--   <i>See:</i> <a>newAuthorizationConfig</a> smart constructor.
data AuthorizationConfig
AuthorizationConfig' :: Maybe AwsIamConfig -> AuthorizationType -> AuthorizationConfig

-- | The Identity and Access Management settings.
[$sel:awsIamConfig:AuthorizationConfig'] :: AuthorizationConfig -> Maybe AwsIamConfig

-- | The authorization type required by the HTTP endpoint.
--   
--   <ul>
--   <li><b>AWS_IAM</b>: The authorization type is Sigv4.</li>
--   </ul>
[$sel:authorizationType:AuthorizationConfig'] :: AuthorizationConfig -> AuthorizationType

-- | Create a value of <a>AuthorizationConfig</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:awsIamConfig:AuthorizationConfig'</a>,
--   <a>authorizationConfig_awsIamConfig</a> - The Identity and Access
--   Management settings.
--   
--   <a>$sel:authorizationType:AuthorizationConfig'</a>,
--   <a>authorizationConfig_authorizationType</a> - The authorization type
--   required by the HTTP endpoint.
--   
--   <ul>
--   <li><b>AWS_IAM</b>: The authorization type is Sigv4.</li>
--   </ul>
newAuthorizationConfig :: AuthorizationType -> AuthorizationConfig

-- | The Identity and Access Management settings.
authorizationConfig_awsIamConfig :: Lens' AuthorizationConfig (Maybe AwsIamConfig)

-- | The authorization type required by the HTTP endpoint.
--   
--   <ul>
--   <li><b>AWS_IAM</b>: The authorization type is Sigv4.</li>
--   </ul>
authorizationConfig_authorizationType :: Lens' AuthorizationConfig AuthorizationType
instance GHC.Generics.Generic Network.AWS.AppSync.Types.AuthorizationConfig.AuthorizationConfig
instance GHC.Show.Show Network.AWS.AppSync.Types.AuthorizationConfig.AuthorizationConfig
instance GHC.Read.Read Network.AWS.AppSync.Types.AuthorizationConfig.AuthorizationConfig
instance GHC.Classes.Eq Network.AWS.AppSync.Types.AuthorizationConfig.AuthorizationConfig
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.AppSync.Types.AuthorizationConfig.AuthorizationConfig
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.Types.AuthorizationConfig.AuthorizationConfig
instance Control.DeepSeq.NFData Network.AWS.AppSync.Types.AuthorizationConfig.AuthorizationConfig
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.Types.AuthorizationConfig.AuthorizationConfig


module Network.AWS.AppSync.Types.CachingConfig

-- | The caching configuration for a resolver that has caching enabled.
--   
--   <i>See:</i> <a>newCachingConfig</a> smart constructor.
data CachingConfig
CachingConfig' :: Maybe Integer -> Maybe [Text] -> CachingConfig

-- | The TTL in seconds for a resolver that has caching enabled.
--   
--   Valid values are between 1 and 3600 seconds.
[$sel:ttl:CachingConfig'] :: CachingConfig -> Maybe Integer

-- | The caching keys for a resolver that has caching enabled.
--   
--   Valid values are entries from the <tt>$context.arguments</tt>,
--   <tt>$context.source</tt>, and <tt>$context.identity</tt> maps.
[$sel:cachingKeys:CachingConfig'] :: CachingConfig -> Maybe [Text]

-- | Create a value of <a>CachingConfig</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:ttl:CachingConfig'</a>, <a>cachingConfig_ttl</a> - The TTL in
--   seconds for a resolver that has caching enabled.
--   
--   Valid values are between 1 and 3600 seconds.
--   
--   <a>$sel:cachingKeys:CachingConfig'</a>,
--   <a>cachingConfig_cachingKeys</a> - The caching keys for a resolver
--   that has caching enabled.
--   
--   Valid values are entries from the <tt>$context.arguments</tt>,
--   <tt>$context.source</tt>, and <tt>$context.identity</tt> maps.
newCachingConfig :: CachingConfig

-- | The TTL in seconds for a resolver that has caching enabled.
--   
--   Valid values are between 1 and 3600 seconds.
cachingConfig_ttl :: Lens' CachingConfig (Maybe Integer)

-- | The caching keys for a resolver that has caching enabled.
--   
--   Valid values are entries from the <tt>$context.arguments</tt>,
--   <tt>$context.source</tt>, and <tt>$context.identity</tt> maps.
cachingConfig_cachingKeys :: Lens' CachingConfig (Maybe [Text])
instance GHC.Generics.Generic Network.AWS.AppSync.Types.CachingConfig.CachingConfig
instance GHC.Show.Show Network.AWS.AppSync.Types.CachingConfig.CachingConfig
instance GHC.Read.Read Network.AWS.AppSync.Types.CachingConfig.CachingConfig
instance GHC.Classes.Eq Network.AWS.AppSync.Types.CachingConfig.CachingConfig
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.AppSync.Types.CachingConfig.CachingConfig
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.Types.CachingConfig.CachingConfig
instance Control.DeepSeq.NFData Network.AWS.AppSync.Types.CachingConfig.CachingConfig
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.Types.CachingConfig.CachingConfig


module Network.AWS.AppSync.Types.CognitoUserPoolConfig

-- | Describes an Amazon Cognito user pool configuration.
--   
--   <i>See:</i> <a>newCognitoUserPoolConfig</a> smart constructor.
data CognitoUserPoolConfig
CognitoUserPoolConfig' :: Maybe Text -> Text -> Text -> CognitoUserPoolConfig

-- | A regular expression for validating the incoming Amazon Cognito user
--   pool app client ID.
[$sel:appIdClientRegex:CognitoUserPoolConfig'] :: CognitoUserPoolConfig -> Maybe Text

-- | The user pool ID.
[$sel:userPoolId:CognitoUserPoolConfig'] :: CognitoUserPoolConfig -> Text

-- | The Amazon Web Services Region in which the user pool was created.
[$sel:awsRegion:CognitoUserPoolConfig'] :: CognitoUserPoolConfig -> Text

-- | Create a value of <a>CognitoUserPoolConfig</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:appIdClientRegex:CognitoUserPoolConfig'</a>,
--   <a>cognitoUserPoolConfig_appIdClientRegex</a> - A regular expression
--   for validating the incoming Amazon Cognito user pool app client ID.
--   
--   <a>$sel:userPoolId:CognitoUserPoolConfig'</a>,
--   <a>cognitoUserPoolConfig_userPoolId</a> - The user pool ID.
--   
--   <a>$sel:awsRegion:CognitoUserPoolConfig'</a>,
--   <a>cognitoUserPoolConfig_awsRegion</a> - The Amazon Web Services
--   Region in which the user pool was created.
newCognitoUserPoolConfig :: Text -> Text -> CognitoUserPoolConfig

-- | A regular expression for validating the incoming Amazon Cognito user
--   pool app client ID.
cognitoUserPoolConfig_appIdClientRegex :: Lens' CognitoUserPoolConfig (Maybe Text)

-- | The user pool ID.
cognitoUserPoolConfig_userPoolId :: Lens' CognitoUserPoolConfig Text

-- | The Amazon Web Services Region in which the user pool was created.
cognitoUserPoolConfig_awsRegion :: Lens' CognitoUserPoolConfig Text
instance GHC.Generics.Generic Network.AWS.AppSync.Types.CognitoUserPoolConfig.CognitoUserPoolConfig
instance GHC.Show.Show Network.AWS.AppSync.Types.CognitoUserPoolConfig.CognitoUserPoolConfig
instance GHC.Read.Read Network.AWS.AppSync.Types.CognitoUserPoolConfig.CognitoUserPoolConfig
instance GHC.Classes.Eq Network.AWS.AppSync.Types.CognitoUserPoolConfig.CognitoUserPoolConfig
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.AppSync.Types.CognitoUserPoolConfig.CognitoUserPoolConfig
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.Types.CognitoUserPoolConfig.CognitoUserPoolConfig
instance Control.DeepSeq.NFData Network.AWS.AppSync.Types.CognitoUserPoolConfig.CognitoUserPoolConfig
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.Types.CognitoUserPoolConfig.CognitoUserPoolConfig


module Network.AWS.AppSync.Types.ConflictDetectionType
newtype ConflictDetectionType
ConflictDetectionType' :: Text -> ConflictDetectionType
[fromConflictDetectionType] :: ConflictDetectionType -> Text
pattern ConflictDetectionType_NONE :: ConflictDetectionType
pattern ConflictDetectionType_VERSION :: ConflictDetectionType
instance Network.AWS.Data.XML.ToXML Network.AWS.AppSync.Types.ConflictDetectionType.ConflictDetectionType
instance Network.AWS.Data.XML.FromXML Network.AWS.AppSync.Types.ConflictDetectionType.ConflictDetectionType
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.AppSync.Types.ConflictDetectionType.ConflictDetectionType
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.Types.ConflictDetectionType.ConflictDetectionType
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.AppSync.Types.ConflictDetectionType.ConflictDetectionType
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.AppSync.Types.ConflictDetectionType.ConflictDetectionType
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.Types.ConflictDetectionType.ConflictDetectionType
instance Network.AWS.Data.Headers.ToHeader Network.AWS.AppSync.Types.ConflictDetectionType.ConflictDetectionType
instance Network.AWS.Data.Log.ToLog Network.AWS.AppSync.Types.ConflictDetectionType.ConflictDetectionType
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.AppSync.Types.ConflictDetectionType.ConflictDetectionType
instance Network.AWS.Data.Text.ToText Network.AWS.AppSync.Types.ConflictDetectionType.ConflictDetectionType
instance Network.AWS.Data.Text.FromText Network.AWS.AppSync.Types.ConflictDetectionType.ConflictDetectionType
instance Control.DeepSeq.NFData Network.AWS.AppSync.Types.ConflictDetectionType.ConflictDetectionType
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.Types.ConflictDetectionType.ConflictDetectionType
instance GHC.Generics.Generic Network.AWS.AppSync.Types.ConflictDetectionType.ConflictDetectionType
instance GHC.Classes.Ord Network.AWS.AppSync.Types.ConflictDetectionType.ConflictDetectionType
instance GHC.Classes.Eq Network.AWS.AppSync.Types.ConflictDetectionType.ConflictDetectionType
instance GHC.Read.Read Network.AWS.AppSync.Types.ConflictDetectionType.ConflictDetectionType
instance GHC.Show.Show Network.AWS.AppSync.Types.ConflictDetectionType.ConflictDetectionType


module Network.AWS.AppSync.Types.ConflictHandlerType
newtype ConflictHandlerType
ConflictHandlerType' :: Text -> ConflictHandlerType
[fromConflictHandlerType] :: ConflictHandlerType -> Text
pattern ConflictHandlerType_AUTOMERGE :: ConflictHandlerType
pattern ConflictHandlerType_LAMBDA :: ConflictHandlerType
pattern ConflictHandlerType_NONE :: ConflictHandlerType
pattern ConflictHandlerType_OPTIMISTIC_CONCURRENCY :: ConflictHandlerType
instance Network.AWS.Data.XML.ToXML Network.AWS.AppSync.Types.ConflictHandlerType.ConflictHandlerType
instance Network.AWS.Data.XML.FromXML Network.AWS.AppSync.Types.ConflictHandlerType.ConflictHandlerType
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.AppSync.Types.ConflictHandlerType.ConflictHandlerType
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.Types.ConflictHandlerType.ConflictHandlerType
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.AppSync.Types.ConflictHandlerType.ConflictHandlerType
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.AppSync.Types.ConflictHandlerType.ConflictHandlerType
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.Types.ConflictHandlerType.ConflictHandlerType
instance Network.AWS.Data.Headers.ToHeader Network.AWS.AppSync.Types.ConflictHandlerType.ConflictHandlerType
instance Network.AWS.Data.Log.ToLog Network.AWS.AppSync.Types.ConflictHandlerType.ConflictHandlerType
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.AppSync.Types.ConflictHandlerType.ConflictHandlerType
instance Network.AWS.Data.Text.ToText Network.AWS.AppSync.Types.ConflictHandlerType.ConflictHandlerType
instance Network.AWS.Data.Text.FromText Network.AWS.AppSync.Types.ConflictHandlerType.ConflictHandlerType
instance Control.DeepSeq.NFData Network.AWS.AppSync.Types.ConflictHandlerType.ConflictHandlerType
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.Types.ConflictHandlerType.ConflictHandlerType
instance GHC.Generics.Generic Network.AWS.AppSync.Types.ConflictHandlerType.ConflictHandlerType
instance GHC.Classes.Ord Network.AWS.AppSync.Types.ConflictHandlerType.ConflictHandlerType
instance GHC.Classes.Eq Network.AWS.AppSync.Types.ConflictHandlerType.ConflictHandlerType
instance GHC.Read.Read Network.AWS.AppSync.Types.ConflictHandlerType.ConflictHandlerType
instance GHC.Show.Show Network.AWS.AppSync.Types.ConflictHandlerType.ConflictHandlerType


module Network.AWS.AppSync.Types.DataSourceType
newtype DataSourceType
DataSourceType' :: Text -> DataSourceType
[fromDataSourceType] :: DataSourceType -> Text
pattern DataSourceType_AMAZON_DYNAMODB :: DataSourceType
pattern DataSourceType_AMAZON_ELASTICSEARCH :: DataSourceType
pattern DataSourceType_AMAZON_OPENSEARCH_SERVICE :: DataSourceType
pattern DataSourceType_AWS_LAMBDA :: DataSourceType
pattern DataSourceType_HTTP :: DataSourceType
pattern DataSourceType_NONE :: DataSourceType
pattern DataSourceType_RELATIONAL_DATABASE :: DataSourceType
instance Network.AWS.Data.XML.ToXML Network.AWS.AppSync.Types.DataSourceType.DataSourceType
instance Network.AWS.Data.XML.FromXML Network.AWS.AppSync.Types.DataSourceType.DataSourceType
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.AppSync.Types.DataSourceType.DataSourceType
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.Types.DataSourceType.DataSourceType
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.AppSync.Types.DataSourceType.DataSourceType
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.AppSync.Types.DataSourceType.DataSourceType
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.Types.DataSourceType.DataSourceType
instance Network.AWS.Data.Headers.ToHeader Network.AWS.AppSync.Types.DataSourceType.DataSourceType
instance Network.AWS.Data.Log.ToLog Network.AWS.AppSync.Types.DataSourceType.DataSourceType
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.AppSync.Types.DataSourceType.DataSourceType
instance Network.AWS.Data.Text.ToText Network.AWS.AppSync.Types.DataSourceType.DataSourceType
instance Network.AWS.Data.Text.FromText Network.AWS.AppSync.Types.DataSourceType.DataSourceType
instance Control.DeepSeq.NFData Network.AWS.AppSync.Types.DataSourceType.DataSourceType
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.Types.DataSourceType.DataSourceType
instance GHC.Generics.Generic Network.AWS.AppSync.Types.DataSourceType.DataSourceType
instance GHC.Classes.Ord Network.AWS.AppSync.Types.DataSourceType.DataSourceType
instance GHC.Classes.Eq Network.AWS.AppSync.Types.DataSourceType.DataSourceType
instance GHC.Read.Read Network.AWS.AppSync.Types.DataSourceType.DataSourceType
instance GHC.Show.Show Network.AWS.AppSync.Types.DataSourceType.DataSourceType


module Network.AWS.AppSync.Types.DefaultAction
newtype DefaultAction
DefaultAction' :: Text -> DefaultAction
[fromDefaultAction] :: DefaultAction -> Text
pattern DefaultAction_ALLOW :: DefaultAction
pattern DefaultAction_DENY :: DefaultAction
instance Network.AWS.Data.XML.ToXML Network.AWS.AppSync.Types.DefaultAction.DefaultAction
instance Network.AWS.Data.XML.FromXML Network.AWS.AppSync.Types.DefaultAction.DefaultAction
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.AppSync.Types.DefaultAction.DefaultAction
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.Types.DefaultAction.DefaultAction
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.AppSync.Types.DefaultAction.DefaultAction
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.AppSync.Types.DefaultAction.DefaultAction
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.Types.DefaultAction.DefaultAction
instance Network.AWS.Data.Headers.ToHeader Network.AWS.AppSync.Types.DefaultAction.DefaultAction
instance Network.AWS.Data.Log.ToLog Network.AWS.AppSync.Types.DefaultAction.DefaultAction
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.AppSync.Types.DefaultAction.DefaultAction
instance Network.AWS.Data.Text.ToText Network.AWS.AppSync.Types.DefaultAction.DefaultAction
instance Network.AWS.Data.Text.FromText Network.AWS.AppSync.Types.DefaultAction.DefaultAction
instance Control.DeepSeq.NFData Network.AWS.AppSync.Types.DefaultAction.DefaultAction
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.Types.DefaultAction.DefaultAction
instance GHC.Generics.Generic Network.AWS.AppSync.Types.DefaultAction.DefaultAction
instance GHC.Classes.Ord Network.AWS.AppSync.Types.DefaultAction.DefaultAction
instance GHC.Classes.Eq Network.AWS.AppSync.Types.DefaultAction.DefaultAction
instance GHC.Read.Read Network.AWS.AppSync.Types.DefaultAction.DefaultAction
instance GHC.Show.Show Network.AWS.AppSync.Types.DefaultAction.DefaultAction


module Network.AWS.AppSync.Types.DeltaSyncConfig

-- | Describes a Delta Sync configuration.
--   
--   <i>See:</i> <a>newDeltaSyncConfig</a> smart constructor.
data DeltaSyncConfig
DeltaSyncConfig' :: Maybe Integer -> Maybe Text -> Maybe Integer -> DeltaSyncConfig

-- | The number of minutes an Item is stored in the datasource.
[$sel:baseTableTTL:DeltaSyncConfig'] :: DeltaSyncConfig -> Maybe Integer

-- | The Delta Sync table name.
[$sel:deltaSyncTableName:DeltaSyncConfig'] :: DeltaSyncConfig -> Maybe Text

-- | The number of minutes a Delta Sync log entry is stored in the Delta
--   Sync table.
[$sel:deltaSyncTableTTL:DeltaSyncConfig'] :: DeltaSyncConfig -> Maybe Integer

-- | Create a value of <a>DeltaSyncConfig</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:baseTableTTL:DeltaSyncConfig'</a>,
--   <a>deltaSyncConfig_baseTableTTL</a> - The number of minutes an Item is
--   stored in the datasource.
--   
--   <a>$sel:deltaSyncTableName:DeltaSyncConfig'</a>,
--   <a>deltaSyncConfig_deltaSyncTableName</a> - The Delta Sync table name.
--   
--   <a>$sel:deltaSyncTableTTL:DeltaSyncConfig'</a>,
--   <a>deltaSyncConfig_deltaSyncTableTTL</a> - The number of minutes a
--   Delta Sync log entry is stored in the Delta Sync table.
newDeltaSyncConfig :: DeltaSyncConfig

-- | The number of minutes an Item is stored in the datasource.
deltaSyncConfig_baseTableTTL :: Lens' DeltaSyncConfig (Maybe Integer)

-- | The Delta Sync table name.
deltaSyncConfig_deltaSyncTableName :: Lens' DeltaSyncConfig (Maybe Text)

-- | The number of minutes a Delta Sync log entry is stored in the Delta
--   Sync table.
deltaSyncConfig_deltaSyncTableTTL :: Lens' DeltaSyncConfig (Maybe Integer)
instance GHC.Generics.Generic Network.AWS.AppSync.Types.DeltaSyncConfig.DeltaSyncConfig
instance GHC.Show.Show Network.AWS.AppSync.Types.DeltaSyncConfig.DeltaSyncConfig
instance GHC.Read.Read Network.AWS.AppSync.Types.DeltaSyncConfig.DeltaSyncConfig
instance GHC.Classes.Eq Network.AWS.AppSync.Types.DeltaSyncConfig.DeltaSyncConfig
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.AppSync.Types.DeltaSyncConfig.DeltaSyncConfig
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.Types.DeltaSyncConfig.DeltaSyncConfig
instance Control.DeepSeq.NFData Network.AWS.AppSync.Types.DeltaSyncConfig.DeltaSyncConfig
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.Types.DeltaSyncConfig.DeltaSyncConfig


module Network.AWS.AppSync.Types.DynamodbDataSourceConfig

-- | Describes an Amazon DynamoDB data source configuration.
--   
--   <i>See:</i> <a>newDynamodbDataSourceConfig</a> smart constructor.
data DynamodbDataSourceConfig
DynamodbDataSourceConfig' :: Maybe Bool -> Maybe Bool -> Maybe DeltaSyncConfig -> Text -> Text -> DynamodbDataSourceConfig

-- | Set to TRUE to use Amazon Cognito credentials with this data source.
[$sel:useCallerCredentials:DynamodbDataSourceConfig'] :: DynamodbDataSourceConfig -> Maybe Bool

-- | Set to TRUE to use Conflict Detection and Resolution with this data
--   source.
[$sel:versioned:DynamodbDataSourceConfig'] :: DynamodbDataSourceConfig -> Maybe Bool

-- | The <tt>DeltaSyncConfig</tt> for a versioned datasource.
[$sel:deltaSyncConfig:DynamodbDataSourceConfig'] :: DynamodbDataSourceConfig -> Maybe DeltaSyncConfig

-- | The table name.
[$sel:tableName:DynamodbDataSourceConfig'] :: DynamodbDataSourceConfig -> Text

-- | The Amazon Web Services Region.
[$sel:awsRegion:DynamodbDataSourceConfig'] :: DynamodbDataSourceConfig -> Text

-- | Create a value of <a>DynamodbDataSourceConfig</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:useCallerCredentials:DynamodbDataSourceConfig'</a>,
--   <a>dynamodbDataSourceConfig_useCallerCredentials</a> - Set to TRUE to
--   use Amazon Cognito credentials with this data source.
--   
--   <a>$sel:versioned:DynamodbDataSourceConfig'</a>,
--   <a>dynamodbDataSourceConfig_versioned</a> - Set to TRUE to use
--   Conflict Detection and Resolution with this data source.
--   
--   <a>$sel:deltaSyncConfig:DynamodbDataSourceConfig'</a>,
--   <a>dynamodbDataSourceConfig_deltaSyncConfig</a> - The
--   <tt>DeltaSyncConfig</tt> for a versioned datasource.
--   
--   <a>$sel:tableName:DynamodbDataSourceConfig'</a>,
--   <a>dynamodbDataSourceConfig_tableName</a> - The table name.
--   
--   <a>$sel:awsRegion:DynamodbDataSourceConfig'</a>,
--   <a>dynamodbDataSourceConfig_awsRegion</a> - The Amazon Web Services
--   Region.
newDynamodbDataSourceConfig :: Text -> Text -> DynamodbDataSourceConfig

-- | Set to TRUE to use Amazon Cognito credentials with this data source.
dynamodbDataSourceConfig_useCallerCredentials :: Lens' DynamodbDataSourceConfig (Maybe Bool)

-- | Set to TRUE to use Conflict Detection and Resolution with this data
--   source.
dynamodbDataSourceConfig_versioned :: Lens' DynamodbDataSourceConfig (Maybe Bool)

-- | The <tt>DeltaSyncConfig</tt> for a versioned datasource.
dynamodbDataSourceConfig_deltaSyncConfig :: Lens' DynamodbDataSourceConfig (Maybe DeltaSyncConfig)

-- | The table name.
dynamodbDataSourceConfig_tableName :: Lens' DynamodbDataSourceConfig Text

-- | The Amazon Web Services Region.
dynamodbDataSourceConfig_awsRegion :: Lens' DynamodbDataSourceConfig Text
instance GHC.Generics.Generic Network.AWS.AppSync.Types.DynamodbDataSourceConfig.DynamodbDataSourceConfig
instance GHC.Show.Show Network.AWS.AppSync.Types.DynamodbDataSourceConfig.DynamodbDataSourceConfig
instance GHC.Read.Read Network.AWS.AppSync.Types.DynamodbDataSourceConfig.DynamodbDataSourceConfig
instance GHC.Classes.Eq Network.AWS.AppSync.Types.DynamodbDataSourceConfig.DynamodbDataSourceConfig
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.AppSync.Types.DynamodbDataSourceConfig.DynamodbDataSourceConfig
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.Types.DynamodbDataSourceConfig.DynamodbDataSourceConfig
instance Control.DeepSeq.NFData Network.AWS.AppSync.Types.DynamodbDataSourceConfig.DynamodbDataSourceConfig
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.Types.DynamodbDataSourceConfig.DynamodbDataSourceConfig


module Network.AWS.AppSync.Types.ElasticsearchDataSourceConfig

-- | Describes an OpenSearch data source configuration.
--   
--   As of September 2021, Amazon Elasticsearch service is Amazon
--   OpenSearch Service. This configuration is deprecated. For new data
--   sources, use OpenSearchServiceDataSourceConfig to specify an
--   OpenSearch data source.
--   
--   <i>See:</i> <a>newElasticsearchDataSourceConfig</a> smart constructor.
data ElasticsearchDataSourceConfig
ElasticsearchDataSourceConfig' :: Text -> Text -> ElasticsearchDataSourceConfig

-- | The endpoint.
[$sel:endpoint:ElasticsearchDataSourceConfig'] :: ElasticsearchDataSourceConfig -> Text

-- | The Amazon Web Services Region.
[$sel:awsRegion:ElasticsearchDataSourceConfig'] :: ElasticsearchDataSourceConfig -> Text

-- | Create a value of <a>ElasticsearchDataSourceConfig</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:endpoint:ElasticsearchDataSourceConfig'</a>,
--   <a>elasticsearchDataSourceConfig_endpoint</a> - The endpoint.
--   
--   <a>$sel:awsRegion:ElasticsearchDataSourceConfig'</a>,
--   <a>elasticsearchDataSourceConfig_awsRegion</a> - The Amazon Web
--   Services Region.
newElasticsearchDataSourceConfig :: Text -> Text -> ElasticsearchDataSourceConfig

-- | The endpoint.
elasticsearchDataSourceConfig_endpoint :: Lens' ElasticsearchDataSourceConfig Text

-- | The Amazon Web Services Region.
elasticsearchDataSourceConfig_awsRegion :: Lens' ElasticsearchDataSourceConfig Text
instance GHC.Generics.Generic Network.AWS.AppSync.Types.ElasticsearchDataSourceConfig.ElasticsearchDataSourceConfig
instance GHC.Show.Show Network.AWS.AppSync.Types.ElasticsearchDataSourceConfig.ElasticsearchDataSourceConfig
instance GHC.Read.Read Network.AWS.AppSync.Types.ElasticsearchDataSourceConfig.ElasticsearchDataSourceConfig
instance GHC.Classes.Eq Network.AWS.AppSync.Types.ElasticsearchDataSourceConfig.ElasticsearchDataSourceConfig
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.AppSync.Types.ElasticsearchDataSourceConfig.ElasticsearchDataSourceConfig
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.Types.ElasticsearchDataSourceConfig.ElasticsearchDataSourceConfig
instance Control.DeepSeq.NFData Network.AWS.AppSync.Types.ElasticsearchDataSourceConfig.ElasticsearchDataSourceConfig
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.Types.ElasticsearchDataSourceConfig.ElasticsearchDataSourceConfig


module Network.AWS.AppSync.Types.FieldLogLevel
newtype FieldLogLevel
FieldLogLevel' :: Text -> FieldLogLevel
[fromFieldLogLevel] :: FieldLogLevel -> Text
pattern FieldLogLevel_ALL :: FieldLogLevel
pattern FieldLogLevel_ERROR :: FieldLogLevel
pattern FieldLogLevel_NONE :: FieldLogLevel
instance Network.AWS.Data.XML.ToXML Network.AWS.AppSync.Types.FieldLogLevel.FieldLogLevel
instance Network.AWS.Data.XML.FromXML Network.AWS.AppSync.Types.FieldLogLevel.FieldLogLevel
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.AppSync.Types.FieldLogLevel.FieldLogLevel
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.Types.FieldLogLevel.FieldLogLevel
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.AppSync.Types.FieldLogLevel.FieldLogLevel
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.AppSync.Types.FieldLogLevel.FieldLogLevel
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.Types.FieldLogLevel.FieldLogLevel
instance Network.AWS.Data.Headers.ToHeader Network.AWS.AppSync.Types.FieldLogLevel.FieldLogLevel
instance Network.AWS.Data.Log.ToLog Network.AWS.AppSync.Types.FieldLogLevel.FieldLogLevel
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.AppSync.Types.FieldLogLevel.FieldLogLevel
instance Network.AWS.Data.Text.ToText Network.AWS.AppSync.Types.FieldLogLevel.FieldLogLevel
instance Network.AWS.Data.Text.FromText Network.AWS.AppSync.Types.FieldLogLevel.FieldLogLevel
instance Control.DeepSeq.NFData Network.AWS.AppSync.Types.FieldLogLevel.FieldLogLevel
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.Types.FieldLogLevel.FieldLogLevel
instance GHC.Generics.Generic Network.AWS.AppSync.Types.FieldLogLevel.FieldLogLevel
instance GHC.Classes.Ord Network.AWS.AppSync.Types.FieldLogLevel.FieldLogLevel
instance GHC.Classes.Eq Network.AWS.AppSync.Types.FieldLogLevel.FieldLogLevel
instance GHC.Read.Read Network.AWS.AppSync.Types.FieldLogLevel.FieldLogLevel
instance GHC.Show.Show Network.AWS.AppSync.Types.FieldLogLevel.FieldLogLevel


module Network.AWS.AppSync.Types.HttpDataSourceConfig

-- | Describes an HTTP data source configuration.
--   
--   <i>See:</i> <a>newHttpDataSourceConfig</a> smart constructor.
data HttpDataSourceConfig
HttpDataSourceConfig' :: Maybe AuthorizationConfig -> Maybe Text -> HttpDataSourceConfig

-- | The authorization config in case the HTTP endpoint requires
--   authorization.
[$sel:authorizationConfig:HttpDataSourceConfig'] :: HttpDataSourceConfig -> Maybe AuthorizationConfig

-- | The HTTP URL endpoint. You can either specify the domain name or IP,
--   and port combination, and the URL scheme must be HTTP or HTTPS. If the
--   port is not specified, AppSync uses the default port 80 for the HTTP
--   endpoint and port 443 for HTTPS endpoints.
[$sel:endpoint:HttpDataSourceConfig'] :: HttpDataSourceConfig -> Maybe Text

-- | Create a value of <a>HttpDataSourceConfig</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:authorizationConfig:HttpDataSourceConfig'</a>,
--   <a>httpDataSourceConfig_authorizationConfig</a> - The authorization
--   config in case the HTTP endpoint requires authorization.
--   
--   <a>$sel:endpoint:HttpDataSourceConfig'</a>,
--   <a>httpDataSourceConfig_endpoint</a> - The HTTP URL endpoint. You can
--   either specify the domain name or IP, and port combination, and the
--   URL scheme must be HTTP or HTTPS. If the port is not specified,
--   AppSync uses the default port 80 for the HTTP endpoint and port 443
--   for HTTPS endpoints.
newHttpDataSourceConfig :: HttpDataSourceConfig

-- | The authorization config in case the HTTP endpoint requires
--   authorization.
httpDataSourceConfig_authorizationConfig :: Lens' HttpDataSourceConfig (Maybe AuthorizationConfig)

-- | The HTTP URL endpoint. You can either specify the domain name or IP,
--   and port combination, and the URL scheme must be HTTP or HTTPS. If the
--   port is not specified, AppSync uses the default port 80 for the HTTP
--   endpoint and port 443 for HTTPS endpoints.
httpDataSourceConfig_endpoint :: Lens' HttpDataSourceConfig (Maybe Text)
instance GHC.Generics.Generic Network.AWS.AppSync.Types.HttpDataSourceConfig.HttpDataSourceConfig
instance GHC.Show.Show Network.AWS.AppSync.Types.HttpDataSourceConfig.HttpDataSourceConfig
instance GHC.Read.Read Network.AWS.AppSync.Types.HttpDataSourceConfig.HttpDataSourceConfig
instance GHC.Classes.Eq Network.AWS.AppSync.Types.HttpDataSourceConfig.HttpDataSourceConfig
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.AppSync.Types.HttpDataSourceConfig.HttpDataSourceConfig
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.Types.HttpDataSourceConfig.HttpDataSourceConfig
instance Control.DeepSeq.NFData Network.AWS.AppSync.Types.HttpDataSourceConfig.HttpDataSourceConfig
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.Types.HttpDataSourceConfig.HttpDataSourceConfig


module Network.AWS.AppSync.Types.LambdaAuthorizerConfig

-- | A <tt>LambdaAuthorizerConfig</tt> holds configuration on how to
--   authorize AppSync API access when using the <tt>AWS_LAMBDA</tt>
--   authorizer mode. Be aware that an AppSync API may have only one Lambda
--   authorizer configured at a time.
--   
--   <i>See:</i> <a>newLambdaAuthorizerConfig</a> smart constructor.
data LambdaAuthorizerConfig
LambdaAuthorizerConfig' :: Maybe Text -> Maybe Natural -> Text -> LambdaAuthorizerConfig

-- | A regular expression for validation of tokens before the Lambda
--   function is called.
[$sel:identityValidationExpression:LambdaAuthorizerConfig'] :: LambdaAuthorizerConfig -> Maybe Text

-- | The number of seconds a response should be cached for. The default is
--   5 minutes (300 seconds). The Lambda function can override this by
--   returning a <tt>ttlOverride</tt> key in its response. A value of 0
--   disables caching of responses.
[$sel:authorizerResultTtlInSeconds:LambdaAuthorizerConfig'] :: LambdaAuthorizerConfig -> Maybe Natural

-- | The ARN of the Lambda function to be called for authorization. This
--   may be a standard Lambda ARN, a version ARN (<tt>.../v3</tt>) or alias
--   ARN.
--   
--   <i>Note</i>: This Lambda function must have the following
--   resource-based policy assigned to it. When configuring Lambda
--   authorizers in the Console, this is done for you. To do so with the
--   Amazon Web Services CLI, run the following:
--   
--   <pre>
--   aws lambda add-permission --function-name "arn:aws:lambda:us-east-2:111122223333:function:my-function" --statement-id "appsync" --principal appsync.amazonaws.com --action lambda:InvokeFunction
--   </pre>
[$sel:authorizerUri:LambdaAuthorizerConfig'] :: LambdaAuthorizerConfig -> Text

-- | Create a value of <a>LambdaAuthorizerConfig</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:identityValidationExpression:LambdaAuthorizerConfig'</a>,
--   <a>lambdaAuthorizerConfig_identityValidationExpression</a> - A regular
--   expression for validation of tokens before the Lambda function is
--   called.
--   
--   <a>$sel:authorizerResultTtlInSeconds:LambdaAuthorizerConfig'</a>,
--   <a>lambdaAuthorizerConfig_authorizerResultTtlInSeconds</a> - The
--   number of seconds a response should be cached for. The default is 5
--   minutes (300 seconds). The Lambda function can override this by
--   returning a <tt>ttlOverride</tt> key in its response. A value of 0
--   disables caching of responses.
--   
--   <a>$sel:authorizerUri:LambdaAuthorizerConfig'</a>,
--   <a>lambdaAuthorizerConfig_authorizerUri</a> - The ARN of the Lambda
--   function to be called for authorization. This may be a standard Lambda
--   ARN, a version ARN (<tt>.../v3</tt>) or alias ARN.
--   
--   <i>Note</i>: This Lambda function must have the following
--   resource-based policy assigned to it. When configuring Lambda
--   authorizers in the Console, this is done for you. To do so with the
--   Amazon Web Services CLI, run the following:
--   
--   <pre>
--   aws lambda add-permission --function-name "arn:aws:lambda:us-east-2:111122223333:function:my-function" --statement-id "appsync" --principal appsync.amazonaws.com --action lambda:InvokeFunction
--   </pre>
newLambdaAuthorizerConfig :: Text -> LambdaAuthorizerConfig

-- | A regular expression for validation of tokens before the Lambda
--   function is called.
lambdaAuthorizerConfig_identityValidationExpression :: Lens' LambdaAuthorizerConfig (Maybe Text)

-- | The number of seconds a response should be cached for. The default is
--   5 minutes (300 seconds). The Lambda function can override this by
--   returning a <tt>ttlOverride</tt> key in its response. A value of 0
--   disables caching of responses.
lambdaAuthorizerConfig_authorizerResultTtlInSeconds :: Lens' LambdaAuthorizerConfig (Maybe Natural)

-- | The ARN of the Lambda function to be called for authorization. This
--   may be a standard Lambda ARN, a version ARN (<tt>.../v3</tt>) or alias
--   ARN.
--   
--   <i>Note</i>: This Lambda function must have the following
--   resource-based policy assigned to it. When configuring Lambda
--   authorizers in the Console, this is done for you. To do so with the
--   Amazon Web Services CLI, run the following:
--   
--   <pre>
--   aws lambda add-permission --function-name "arn:aws:lambda:us-east-2:111122223333:function:my-function" --statement-id "appsync" --principal appsync.amazonaws.com --action lambda:InvokeFunction
--   </pre>
lambdaAuthorizerConfig_authorizerUri :: Lens' LambdaAuthorizerConfig Text
instance GHC.Generics.Generic Network.AWS.AppSync.Types.LambdaAuthorizerConfig.LambdaAuthorizerConfig
instance GHC.Show.Show Network.AWS.AppSync.Types.LambdaAuthorizerConfig.LambdaAuthorizerConfig
instance GHC.Read.Read Network.AWS.AppSync.Types.LambdaAuthorizerConfig.LambdaAuthorizerConfig
instance GHC.Classes.Eq Network.AWS.AppSync.Types.LambdaAuthorizerConfig.LambdaAuthorizerConfig
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.AppSync.Types.LambdaAuthorizerConfig.LambdaAuthorizerConfig
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.Types.LambdaAuthorizerConfig.LambdaAuthorizerConfig
instance Control.DeepSeq.NFData Network.AWS.AppSync.Types.LambdaAuthorizerConfig.LambdaAuthorizerConfig
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.Types.LambdaAuthorizerConfig.LambdaAuthorizerConfig


module Network.AWS.AppSync.Types.LambdaConflictHandlerConfig

-- | The <tt>LambdaConflictHandlerConfig</tt> object when configuring
--   LAMBDA as the Conflict Handler.
--   
--   <i>See:</i> <a>newLambdaConflictHandlerConfig</a> smart constructor.
data LambdaConflictHandlerConfig
LambdaConflictHandlerConfig' :: Maybe Text -> LambdaConflictHandlerConfig

-- | The Arn for the Lambda function to use as the Conflict Handler.
[$sel:lambdaConflictHandlerArn:LambdaConflictHandlerConfig'] :: LambdaConflictHandlerConfig -> Maybe Text

-- | Create a value of <a>LambdaConflictHandlerConfig</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:lambdaConflictHandlerArn:LambdaConflictHandlerConfig'</a>,
--   <a>lambdaConflictHandlerConfig_lambdaConflictHandlerArn</a> - The Arn
--   for the Lambda function to use as the Conflict Handler.
newLambdaConflictHandlerConfig :: LambdaConflictHandlerConfig

-- | The Arn for the Lambda function to use as the Conflict Handler.
lambdaConflictHandlerConfig_lambdaConflictHandlerArn :: Lens' LambdaConflictHandlerConfig (Maybe Text)
instance GHC.Generics.Generic Network.AWS.AppSync.Types.LambdaConflictHandlerConfig.LambdaConflictHandlerConfig
instance GHC.Show.Show Network.AWS.AppSync.Types.LambdaConflictHandlerConfig.LambdaConflictHandlerConfig
instance GHC.Read.Read Network.AWS.AppSync.Types.LambdaConflictHandlerConfig.LambdaConflictHandlerConfig
instance GHC.Classes.Eq Network.AWS.AppSync.Types.LambdaConflictHandlerConfig.LambdaConflictHandlerConfig
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.AppSync.Types.LambdaConflictHandlerConfig.LambdaConflictHandlerConfig
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.Types.LambdaConflictHandlerConfig.LambdaConflictHandlerConfig
instance Control.DeepSeq.NFData Network.AWS.AppSync.Types.LambdaConflictHandlerConfig.LambdaConflictHandlerConfig
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.Types.LambdaConflictHandlerConfig.LambdaConflictHandlerConfig


module Network.AWS.AppSync.Types.LambdaDataSourceConfig

-- | Describes an Amazon Web Services Lambda data source configuration.
--   
--   <i>See:</i> <a>newLambdaDataSourceConfig</a> smart constructor.
data LambdaDataSourceConfig
LambdaDataSourceConfig' :: Text -> LambdaDataSourceConfig

-- | The ARN for the Lambda function.
[$sel:lambdaFunctionArn:LambdaDataSourceConfig'] :: LambdaDataSourceConfig -> Text

-- | Create a value of <a>LambdaDataSourceConfig</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:lambdaFunctionArn:LambdaDataSourceConfig'</a>,
--   <a>lambdaDataSourceConfig_lambdaFunctionArn</a> - The ARN for the
--   Lambda function.
newLambdaDataSourceConfig :: Text -> LambdaDataSourceConfig

-- | The ARN for the Lambda function.
lambdaDataSourceConfig_lambdaFunctionArn :: Lens' LambdaDataSourceConfig Text
instance GHC.Generics.Generic Network.AWS.AppSync.Types.LambdaDataSourceConfig.LambdaDataSourceConfig
instance GHC.Show.Show Network.AWS.AppSync.Types.LambdaDataSourceConfig.LambdaDataSourceConfig
instance GHC.Read.Read Network.AWS.AppSync.Types.LambdaDataSourceConfig.LambdaDataSourceConfig
instance GHC.Classes.Eq Network.AWS.AppSync.Types.LambdaDataSourceConfig.LambdaDataSourceConfig
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.AppSync.Types.LambdaDataSourceConfig.LambdaDataSourceConfig
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.Types.LambdaDataSourceConfig.LambdaDataSourceConfig
instance Control.DeepSeq.NFData Network.AWS.AppSync.Types.LambdaDataSourceConfig.LambdaDataSourceConfig
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.Types.LambdaDataSourceConfig.LambdaDataSourceConfig


module Network.AWS.AppSync.Types.LogConfig

-- | The CloudWatch Logs configuration.
--   
--   <i>See:</i> <a>newLogConfig</a> smart constructor.
data LogConfig
LogConfig' :: Maybe Bool -> FieldLogLevel -> Text -> LogConfig

-- | Set to TRUE to exclude sections that contain information such as
--   headers, context, and evaluated mapping templates, regardless of
--   logging level.
[$sel:excludeVerboseContent:LogConfig'] :: LogConfig -> Maybe Bool

-- | The field logging level. Values can be NONE, ERROR, or ALL.
--   
--   <ul>
--   <li><b>NONE</b>: No field-level logs are captured.</li>
--   <li><b>ERROR</b>: Logs the following information only for the fields
--   that are in error:<ul><li>The error section in the server
--   response.</li><li>Field-level errors.</li><li>The generated
--   request/response functions that got resolved for error
--   fields.</li></ul></li>
--   <li><b>ALL</b>: The following information is logged for all fields in
--   the query:<ul><li>Field-level tracing information.</li><li>The
--   generated request/response functions that got resolved for each
--   field.</li></ul></li>
--   </ul>
[$sel:fieldLogLevel:LogConfig'] :: LogConfig -> FieldLogLevel

-- | The service role that AppSync will assume to publish to Amazon
--   CloudWatch logs in your account.
[$sel:cloudWatchLogsRoleArn:LogConfig'] :: LogConfig -> Text

-- | Create a value of <a>LogConfig</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:excludeVerboseContent:LogConfig'</a>,
--   <a>logConfig_excludeVerboseContent</a> - Set to TRUE to exclude
--   sections that contain information such as headers, context, and
--   evaluated mapping templates, regardless of logging level.
--   
--   <a>$sel:fieldLogLevel:LogConfig'</a>, <a>logConfig_fieldLogLevel</a> -
--   The field logging level. Values can be NONE, ERROR, or ALL.
--   
--   <ul>
--   <li><b>NONE</b>: No field-level logs are captured.</li>
--   <li><b>ERROR</b>: Logs the following information only for the fields
--   that are in error:<ul><li>The error section in the server
--   response.</li><li>Field-level errors.</li><li>The generated
--   request/response functions that got resolved for error
--   fields.</li></ul></li>
--   <li><b>ALL</b>: The following information is logged for all fields in
--   the query:<ul><li>Field-level tracing information.</li><li>The
--   generated request/response functions that got resolved for each
--   field.</li></ul></li>
--   </ul>
--   
--   <a>$sel:cloudWatchLogsRoleArn:LogConfig'</a>,
--   <a>logConfig_cloudWatchLogsRoleArn</a> - The service role that AppSync
--   will assume to publish to Amazon CloudWatch logs in your account.
newLogConfig :: FieldLogLevel -> Text -> LogConfig

-- | Set to TRUE to exclude sections that contain information such as
--   headers, context, and evaluated mapping templates, regardless of
--   logging level.
logConfig_excludeVerboseContent :: Lens' LogConfig (Maybe Bool)

-- | The field logging level. Values can be NONE, ERROR, or ALL.
--   
--   <ul>
--   <li><b>NONE</b>: No field-level logs are captured.</li>
--   <li><b>ERROR</b>: Logs the following information only for the fields
--   that are in error:<ul><li>The error section in the server
--   response.</li><li>Field-level errors.</li><li>The generated
--   request/response functions that got resolved for error
--   fields.</li></ul></li>
--   <li><b>ALL</b>: The following information is logged for all fields in
--   the query:<ul><li>Field-level tracing information.</li><li>The
--   generated request/response functions that got resolved for each
--   field.</li></ul></li>
--   </ul>
logConfig_fieldLogLevel :: Lens' LogConfig FieldLogLevel

-- | The service role that AppSync will assume to publish to Amazon
--   CloudWatch logs in your account.
logConfig_cloudWatchLogsRoleArn :: Lens' LogConfig Text
instance GHC.Generics.Generic Network.AWS.AppSync.Types.LogConfig.LogConfig
instance GHC.Show.Show Network.AWS.AppSync.Types.LogConfig.LogConfig
instance GHC.Read.Read Network.AWS.AppSync.Types.LogConfig.LogConfig
instance GHC.Classes.Eq Network.AWS.AppSync.Types.LogConfig.LogConfig
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.AppSync.Types.LogConfig.LogConfig
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.Types.LogConfig.LogConfig
instance Control.DeepSeq.NFData Network.AWS.AppSync.Types.LogConfig.LogConfig
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.Types.LogConfig.LogConfig


module Network.AWS.AppSync.Types.OpenIDConnectConfig

-- | Describes an OpenID Connect configuration.
--   
--   <i>See:</i> <a>newOpenIDConnectConfig</a> smart constructor.
data OpenIDConnectConfig
OpenIDConnectConfig' :: Maybe Text -> Maybe Integer -> Maybe Integer -> Text -> OpenIDConnectConfig

-- | The client identifier of the Relying party at the OpenID identity
--   provider. This identifier is typically obtained when the Relying party
--   is registered with the OpenID identity provider. You can specify a
--   regular expression so the AppSync can validate against multiple client
--   identifiers at a time.
[$sel:clientId:OpenIDConnectConfig'] :: OpenIDConnectConfig -> Maybe Text

-- | The number of milliseconds a token is valid after being authenticated.
[$sel:authTTL:OpenIDConnectConfig'] :: OpenIDConnectConfig -> Maybe Integer

-- | The number of milliseconds a token is valid after being issued to a
--   user.
[$sel:iatTTL:OpenIDConnectConfig'] :: OpenIDConnectConfig -> Maybe Integer

-- | The issuer for the OpenID Connect configuration. The issuer returned
--   by discovery must exactly match the value of <tt>iss</tt> in the ID
--   token.
[$sel:issuer:OpenIDConnectConfig'] :: OpenIDConnectConfig -> Text

-- | Create a value of <a>OpenIDConnectConfig</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:clientId:OpenIDConnectConfig'</a>,
--   <a>openIDConnectConfig_clientId</a> - The client identifier of the
--   Relying party at the OpenID identity provider. This identifier is
--   typically obtained when the Relying party is registered with the
--   OpenID identity provider. You can specify a regular expression so the
--   AppSync can validate against multiple client identifiers at a time.
--   
--   <a>$sel:authTTL:OpenIDConnectConfig'</a>,
--   <a>openIDConnectConfig_authTTL</a> - The number of milliseconds a
--   token is valid after being authenticated.
--   
--   <a>$sel:iatTTL:OpenIDConnectConfig'</a>,
--   <a>openIDConnectConfig_iatTTL</a> - The number of milliseconds a token
--   is valid after being issued to a user.
--   
--   <a>$sel:issuer:OpenIDConnectConfig'</a>,
--   <a>openIDConnectConfig_issuer</a> - The issuer for the OpenID Connect
--   configuration. The issuer returned by discovery must exactly match the
--   value of <tt>iss</tt> in the ID token.
newOpenIDConnectConfig :: Text -> OpenIDConnectConfig

-- | The client identifier of the Relying party at the OpenID identity
--   provider. This identifier is typically obtained when the Relying party
--   is registered with the OpenID identity provider. You can specify a
--   regular expression so the AppSync can validate against multiple client
--   identifiers at a time.
openIDConnectConfig_clientId :: Lens' OpenIDConnectConfig (Maybe Text)

-- | The number of milliseconds a token is valid after being authenticated.
openIDConnectConfig_authTTL :: Lens' OpenIDConnectConfig (Maybe Integer)

-- | The number of milliseconds a token is valid after being issued to a
--   user.
openIDConnectConfig_iatTTL :: Lens' OpenIDConnectConfig (Maybe Integer)

-- | The issuer for the OpenID Connect configuration. The issuer returned
--   by discovery must exactly match the value of <tt>iss</tt> in the ID
--   token.
openIDConnectConfig_issuer :: Lens' OpenIDConnectConfig Text
instance GHC.Generics.Generic Network.AWS.AppSync.Types.OpenIDConnectConfig.OpenIDConnectConfig
instance GHC.Show.Show Network.AWS.AppSync.Types.OpenIDConnectConfig.OpenIDConnectConfig
instance GHC.Read.Read Network.AWS.AppSync.Types.OpenIDConnectConfig.OpenIDConnectConfig
instance GHC.Classes.Eq Network.AWS.AppSync.Types.OpenIDConnectConfig.OpenIDConnectConfig
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.AppSync.Types.OpenIDConnectConfig.OpenIDConnectConfig
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.Types.OpenIDConnectConfig.OpenIDConnectConfig
instance Control.DeepSeq.NFData Network.AWS.AppSync.Types.OpenIDConnectConfig.OpenIDConnectConfig
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.Types.OpenIDConnectConfig.OpenIDConnectConfig


module Network.AWS.AppSync.Types.AdditionalAuthenticationProvider

-- | Describes an additional authentication provider.
--   
--   <i>See:</i> <a>newAdditionalAuthenticationProvider</a> smart
--   constructor.
data AdditionalAuthenticationProvider
AdditionalAuthenticationProvider' :: Maybe OpenIDConnectConfig -> Maybe CognitoUserPoolConfig -> Maybe LambdaAuthorizerConfig -> Maybe AuthenticationType -> AdditionalAuthenticationProvider

-- | The OpenID Connect configuration.
[$sel:openIDConnectConfig:AdditionalAuthenticationProvider'] :: AdditionalAuthenticationProvider -> Maybe OpenIDConnectConfig

-- | The Amazon Cognito user pool configuration.
[$sel:userPoolConfig:AdditionalAuthenticationProvider'] :: AdditionalAuthenticationProvider -> Maybe CognitoUserPoolConfig

-- | Configuration for Amazon Web Services Lambda function authorization.
[$sel:lambdaAuthorizerConfig:AdditionalAuthenticationProvider'] :: AdditionalAuthenticationProvider -> Maybe LambdaAuthorizerConfig

-- | The authentication type: API key, Identity and Access Management,
--   OIDC, Amazon Cognito user pools, or Amazon Web Services Lambda.
[$sel:authenticationType:AdditionalAuthenticationProvider'] :: AdditionalAuthenticationProvider -> Maybe AuthenticationType

-- | Create a value of <a>AdditionalAuthenticationProvider</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:openIDConnectConfig:AdditionalAuthenticationProvider'</a>,
--   <a>additionalAuthenticationProvider_openIDConnectConfig</a> - The
--   OpenID Connect configuration.
--   
--   <a>$sel:userPoolConfig:AdditionalAuthenticationProvider'</a>,
--   <a>additionalAuthenticationProvider_userPoolConfig</a> - The Amazon
--   Cognito user pool configuration.
--   
--   <a>$sel:lambdaAuthorizerConfig:AdditionalAuthenticationProvider'</a>,
--   <a>additionalAuthenticationProvider_lambdaAuthorizerConfig</a> -
--   Configuration for Amazon Web Services Lambda function authorization.
--   
--   <a>$sel:authenticationType:AdditionalAuthenticationProvider'</a>,
--   <a>additionalAuthenticationProvider_authenticationType</a> - The
--   authentication type: API key, Identity and Access Management, OIDC,
--   Amazon Cognito user pools, or Amazon Web Services Lambda.
newAdditionalAuthenticationProvider :: AdditionalAuthenticationProvider

-- | The OpenID Connect configuration.
additionalAuthenticationProvider_openIDConnectConfig :: Lens' AdditionalAuthenticationProvider (Maybe OpenIDConnectConfig)

-- | The Amazon Cognito user pool configuration.
additionalAuthenticationProvider_userPoolConfig :: Lens' AdditionalAuthenticationProvider (Maybe CognitoUserPoolConfig)

-- | Configuration for Amazon Web Services Lambda function authorization.
additionalAuthenticationProvider_lambdaAuthorizerConfig :: Lens' AdditionalAuthenticationProvider (Maybe LambdaAuthorizerConfig)

-- | The authentication type: API key, Identity and Access Management,
--   OIDC, Amazon Cognito user pools, or Amazon Web Services Lambda.
additionalAuthenticationProvider_authenticationType :: Lens' AdditionalAuthenticationProvider (Maybe AuthenticationType)
instance GHC.Generics.Generic Network.AWS.AppSync.Types.AdditionalAuthenticationProvider.AdditionalAuthenticationProvider
instance GHC.Show.Show Network.AWS.AppSync.Types.AdditionalAuthenticationProvider.AdditionalAuthenticationProvider
instance GHC.Read.Read Network.AWS.AppSync.Types.AdditionalAuthenticationProvider.AdditionalAuthenticationProvider
instance GHC.Classes.Eq Network.AWS.AppSync.Types.AdditionalAuthenticationProvider.AdditionalAuthenticationProvider
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.AppSync.Types.AdditionalAuthenticationProvider.AdditionalAuthenticationProvider
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.Types.AdditionalAuthenticationProvider.AdditionalAuthenticationProvider
instance Control.DeepSeq.NFData Network.AWS.AppSync.Types.AdditionalAuthenticationProvider.AdditionalAuthenticationProvider
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.Types.AdditionalAuthenticationProvider.AdditionalAuthenticationProvider


module Network.AWS.AppSync.Types.OpenSearchServiceDataSourceConfig

-- | Describes an OpenSearch data source configuration.
--   
--   <i>See:</i> <a>newOpenSearchServiceDataSourceConfig</a> smart
--   constructor.
data OpenSearchServiceDataSourceConfig
OpenSearchServiceDataSourceConfig' :: Text -> Text -> OpenSearchServiceDataSourceConfig

-- | The endpoint.
[$sel:endpoint:OpenSearchServiceDataSourceConfig'] :: OpenSearchServiceDataSourceConfig -> Text

-- | The Amazon Web Services Region.
[$sel:awsRegion:OpenSearchServiceDataSourceConfig'] :: OpenSearchServiceDataSourceConfig -> Text

-- | Create a value of <a>OpenSearchServiceDataSourceConfig</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:endpoint:OpenSearchServiceDataSourceConfig'</a>,
--   <a>openSearchServiceDataSourceConfig_endpoint</a> - The endpoint.
--   
--   <a>$sel:awsRegion:OpenSearchServiceDataSourceConfig'</a>,
--   <a>openSearchServiceDataSourceConfig_awsRegion</a> - The Amazon Web
--   Services Region.
newOpenSearchServiceDataSourceConfig :: Text -> Text -> OpenSearchServiceDataSourceConfig

-- | The endpoint.
openSearchServiceDataSourceConfig_endpoint :: Lens' OpenSearchServiceDataSourceConfig Text

-- | The Amazon Web Services Region.
openSearchServiceDataSourceConfig_awsRegion :: Lens' OpenSearchServiceDataSourceConfig Text
instance GHC.Generics.Generic Network.AWS.AppSync.Types.OpenSearchServiceDataSourceConfig.OpenSearchServiceDataSourceConfig
instance GHC.Show.Show Network.AWS.AppSync.Types.OpenSearchServiceDataSourceConfig.OpenSearchServiceDataSourceConfig
instance GHC.Read.Read Network.AWS.AppSync.Types.OpenSearchServiceDataSourceConfig.OpenSearchServiceDataSourceConfig
instance GHC.Classes.Eq Network.AWS.AppSync.Types.OpenSearchServiceDataSourceConfig.OpenSearchServiceDataSourceConfig
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.AppSync.Types.OpenSearchServiceDataSourceConfig.OpenSearchServiceDataSourceConfig
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.Types.OpenSearchServiceDataSourceConfig.OpenSearchServiceDataSourceConfig
instance Control.DeepSeq.NFData Network.AWS.AppSync.Types.OpenSearchServiceDataSourceConfig.OpenSearchServiceDataSourceConfig
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.Types.OpenSearchServiceDataSourceConfig.OpenSearchServiceDataSourceConfig


module Network.AWS.AppSync.Types.OutputType
newtype OutputType
OutputType' :: Text -> OutputType
[fromOutputType] :: OutputType -> Text
pattern OutputType_JSON :: OutputType
pattern OutputType_SDL :: OutputType
instance Network.AWS.Data.XML.ToXML Network.AWS.AppSync.Types.OutputType.OutputType
instance Network.AWS.Data.XML.FromXML Network.AWS.AppSync.Types.OutputType.OutputType
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.AppSync.Types.OutputType.OutputType
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.Types.OutputType.OutputType
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.AppSync.Types.OutputType.OutputType
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.AppSync.Types.OutputType.OutputType
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.Types.OutputType.OutputType
instance Network.AWS.Data.Headers.ToHeader Network.AWS.AppSync.Types.OutputType.OutputType
instance Network.AWS.Data.Log.ToLog Network.AWS.AppSync.Types.OutputType.OutputType
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.AppSync.Types.OutputType.OutputType
instance Network.AWS.Data.Text.ToText Network.AWS.AppSync.Types.OutputType.OutputType
instance Network.AWS.Data.Text.FromText Network.AWS.AppSync.Types.OutputType.OutputType
instance Control.DeepSeq.NFData Network.AWS.AppSync.Types.OutputType.OutputType
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.Types.OutputType.OutputType
instance GHC.Generics.Generic Network.AWS.AppSync.Types.OutputType.OutputType
instance GHC.Classes.Ord Network.AWS.AppSync.Types.OutputType.OutputType
instance GHC.Classes.Eq Network.AWS.AppSync.Types.OutputType.OutputType
instance GHC.Read.Read Network.AWS.AppSync.Types.OutputType.OutputType
instance GHC.Show.Show Network.AWS.AppSync.Types.OutputType.OutputType


module Network.AWS.AppSync.Types.PipelineConfig

-- | The pipeline configuration for a resolver of kind <tt>PIPELINE</tt>.
--   
--   <i>See:</i> <a>newPipelineConfig</a> smart constructor.
data PipelineConfig
PipelineConfig' :: Maybe [Text] -> PipelineConfig

-- | A list of <tt>Function</tt> objects.
[$sel:functions:PipelineConfig'] :: PipelineConfig -> Maybe [Text]

-- | Create a value of <a>PipelineConfig</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:functions:PipelineConfig'</a>, <a>pipelineConfig_functions</a>
--   - A list of <tt>Function</tt> objects.
newPipelineConfig :: PipelineConfig

-- | A list of <tt>Function</tt> objects.
pipelineConfig_functions :: Lens' PipelineConfig (Maybe [Text])
instance GHC.Generics.Generic Network.AWS.AppSync.Types.PipelineConfig.PipelineConfig
instance GHC.Show.Show Network.AWS.AppSync.Types.PipelineConfig.PipelineConfig
instance GHC.Read.Read Network.AWS.AppSync.Types.PipelineConfig.PipelineConfig
instance GHC.Classes.Eq Network.AWS.AppSync.Types.PipelineConfig.PipelineConfig
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.AppSync.Types.PipelineConfig.PipelineConfig
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.Types.PipelineConfig.PipelineConfig
instance Control.DeepSeq.NFData Network.AWS.AppSync.Types.PipelineConfig.PipelineConfig
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.Types.PipelineConfig.PipelineConfig


module Network.AWS.AppSync.Types.RdsHttpEndpointConfig

-- | The Amazon RDS HTTP endpoint configuration.
--   
--   <i>See:</i> <a>newRdsHttpEndpointConfig</a> smart constructor.
data RdsHttpEndpointConfig
RdsHttpEndpointConfig' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> RdsHttpEndpointConfig

-- | Logical schema name.
[$sel:schema:RdsHttpEndpointConfig'] :: RdsHttpEndpointConfig -> Maybe Text

-- | Amazon Web Services secret store ARN for database credentials.
[$sel:awsSecretStoreArn:RdsHttpEndpointConfig'] :: RdsHttpEndpointConfig -> Maybe Text

-- | Amazon RDS cluster ARN.
[$sel:dbClusterIdentifier:RdsHttpEndpointConfig'] :: RdsHttpEndpointConfig -> Maybe Text

-- | Amazon Web Services Region for RDS HTTP endpoint.
[$sel:awsRegion:RdsHttpEndpointConfig'] :: RdsHttpEndpointConfig -> Maybe Text

-- | Logical database name.
[$sel:databaseName:RdsHttpEndpointConfig'] :: RdsHttpEndpointConfig -> Maybe Text

-- | Create a value of <a>RdsHttpEndpointConfig</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:schema:RdsHttpEndpointConfig'</a>,
--   <a>rdsHttpEndpointConfig_schema</a> - Logical schema name.
--   
--   <a>$sel:awsSecretStoreArn:RdsHttpEndpointConfig'</a>,
--   <a>rdsHttpEndpointConfig_awsSecretStoreArn</a> - Amazon Web Services
--   secret store ARN for database credentials.
--   
--   <a>$sel:dbClusterIdentifier:RdsHttpEndpointConfig'</a>,
--   <a>rdsHttpEndpointConfig_dbClusterIdentifier</a> - Amazon RDS cluster
--   ARN.
--   
--   <a>$sel:awsRegion:RdsHttpEndpointConfig'</a>,
--   <a>rdsHttpEndpointConfig_awsRegion</a> - Amazon Web Services Region
--   for RDS HTTP endpoint.
--   
--   <a>$sel:databaseName:RdsHttpEndpointConfig'</a>,
--   <a>rdsHttpEndpointConfig_databaseName</a> - Logical database name.
newRdsHttpEndpointConfig :: RdsHttpEndpointConfig

-- | Logical schema name.
rdsHttpEndpointConfig_schema :: Lens' RdsHttpEndpointConfig (Maybe Text)

-- | Amazon Web Services secret store ARN for database credentials.
rdsHttpEndpointConfig_awsSecretStoreArn :: Lens' RdsHttpEndpointConfig (Maybe Text)

-- | Amazon RDS cluster ARN.
rdsHttpEndpointConfig_dbClusterIdentifier :: Lens' RdsHttpEndpointConfig (Maybe Text)

-- | Amazon Web Services Region for RDS HTTP endpoint.
rdsHttpEndpointConfig_awsRegion :: Lens' RdsHttpEndpointConfig (Maybe Text)

-- | Logical database name.
rdsHttpEndpointConfig_databaseName :: Lens' RdsHttpEndpointConfig (Maybe Text)
instance GHC.Generics.Generic Network.AWS.AppSync.Types.RdsHttpEndpointConfig.RdsHttpEndpointConfig
instance GHC.Show.Show Network.AWS.AppSync.Types.RdsHttpEndpointConfig.RdsHttpEndpointConfig
instance GHC.Read.Read Network.AWS.AppSync.Types.RdsHttpEndpointConfig.RdsHttpEndpointConfig
instance GHC.Classes.Eq Network.AWS.AppSync.Types.RdsHttpEndpointConfig.RdsHttpEndpointConfig
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.AppSync.Types.RdsHttpEndpointConfig.RdsHttpEndpointConfig
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.Types.RdsHttpEndpointConfig.RdsHttpEndpointConfig
instance Control.DeepSeq.NFData Network.AWS.AppSync.Types.RdsHttpEndpointConfig.RdsHttpEndpointConfig
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.Types.RdsHttpEndpointConfig.RdsHttpEndpointConfig


module Network.AWS.AppSync.Types.RelationalDatabaseSourceType
newtype RelationalDatabaseSourceType
RelationalDatabaseSourceType' :: Text -> RelationalDatabaseSourceType
[fromRelationalDatabaseSourceType] :: RelationalDatabaseSourceType -> Text
pattern RelationalDatabaseSourceType_RDS_HTTP_ENDPOINT :: RelationalDatabaseSourceType
instance Network.AWS.Data.XML.ToXML Network.AWS.AppSync.Types.RelationalDatabaseSourceType.RelationalDatabaseSourceType
instance Network.AWS.Data.XML.FromXML Network.AWS.AppSync.Types.RelationalDatabaseSourceType.RelationalDatabaseSourceType
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.AppSync.Types.RelationalDatabaseSourceType.RelationalDatabaseSourceType
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.Types.RelationalDatabaseSourceType.RelationalDatabaseSourceType
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.AppSync.Types.RelationalDatabaseSourceType.RelationalDatabaseSourceType
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.AppSync.Types.RelationalDatabaseSourceType.RelationalDatabaseSourceType
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.Types.RelationalDatabaseSourceType.RelationalDatabaseSourceType
instance Network.AWS.Data.Headers.ToHeader Network.AWS.AppSync.Types.RelationalDatabaseSourceType.RelationalDatabaseSourceType
instance Network.AWS.Data.Log.ToLog Network.AWS.AppSync.Types.RelationalDatabaseSourceType.RelationalDatabaseSourceType
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.AppSync.Types.RelationalDatabaseSourceType.RelationalDatabaseSourceType
instance Network.AWS.Data.Text.ToText Network.AWS.AppSync.Types.RelationalDatabaseSourceType.RelationalDatabaseSourceType
instance Network.AWS.Data.Text.FromText Network.AWS.AppSync.Types.RelationalDatabaseSourceType.RelationalDatabaseSourceType
instance Control.DeepSeq.NFData Network.AWS.AppSync.Types.RelationalDatabaseSourceType.RelationalDatabaseSourceType
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.Types.RelationalDatabaseSourceType.RelationalDatabaseSourceType
instance GHC.Generics.Generic Network.AWS.AppSync.Types.RelationalDatabaseSourceType.RelationalDatabaseSourceType
instance GHC.Classes.Ord Network.AWS.AppSync.Types.RelationalDatabaseSourceType.RelationalDatabaseSourceType
instance GHC.Classes.Eq Network.AWS.AppSync.Types.RelationalDatabaseSourceType.RelationalDatabaseSourceType
instance GHC.Read.Read Network.AWS.AppSync.Types.RelationalDatabaseSourceType.RelationalDatabaseSourceType
instance GHC.Show.Show Network.AWS.AppSync.Types.RelationalDatabaseSourceType.RelationalDatabaseSourceType


module Network.AWS.AppSync.Types.RelationalDatabaseDataSourceConfig

-- | Describes a relational database data source configuration.
--   
--   <i>See:</i> <a>newRelationalDatabaseDataSourceConfig</a> smart
--   constructor.
data RelationalDatabaseDataSourceConfig
RelationalDatabaseDataSourceConfig' :: Maybe RdsHttpEndpointConfig -> Maybe RelationalDatabaseSourceType -> RelationalDatabaseDataSourceConfig

-- | Amazon RDS HTTP endpoint settings.
[$sel:rdsHttpEndpointConfig:RelationalDatabaseDataSourceConfig'] :: RelationalDatabaseDataSourceConfig -> Maybe RdsHttpEndpointConfig

-- | Source type for the relational database.
--   
--   <ul>
--   <li><b>RDS_HTTP_ENDPOINT</b>: The relational database source type is
--   an Amazon RDS HTTP endpoint.</li>
--   </ul>
[$sel:relationalDatabaseSourceType:RelationalDatabaseDataSourceConfig'] :: RelationalDatabaseDataSourceConfig -> Maybe RelationalDatabaseSourceType

-- | Create a value of <a>RelationalDatabaseDataSourceConfig</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rdsHttpEndpointConfig:RelationalDatabaseDataSourceConfig'</a>,
--   <a>relationalDatabaseDataSourceConfig_rdsHttpEndpointConfig</a> -
--   Amazon RDS HTTP endpoint settings.
--   
--   
--   <a>$sel:relationalDatabaseSourceType:RelationalDatabaseDataSourceConfig'</a>,
--   <a>relationalDatabaseDataSourceConfig_relationalDatabaseSourceType</a>
--   - Source type for the relational database.
--   
--   <ul>
--   <li><b>RDS_HTTP_ENDPOINT</b>: The relational database source type is
--   an Amazon RDS HTTP endpoint.</li>
--   </ul>
newRelationalDatabaseDataSourceConfig :: RelationalDatabaseDataSourceConfig

-- | Amazon RDS HTTP endpoint settings.
relationalDatabaseDataSourceConfig_rdsHttpEndpointConfig :: Lens' RelationalDatabaseDataSourceConfig (Maybe RdsHttpEndpointConfig)

-- | Source type for the relational database.
--   
--   <ul>
--   <li><b>RDS_HTTP_ENDPOINT</b>: The relational database source type is
--   an Amazon RDS HTTP endpoint.</li>
--   </ul>
relationalDatabaseDataSourceConfig_relationalDatabaseSourceType :: Lens' RelationalDatabaseDataSourceConfig (Maybe RelationalDatabaseSourceType)
instance GHC.Generics.Generic Network.AWS.AppSync.Types.RelationalDatabaseDataSourceConfig.RelationalDatabaseDataSourceConfig
instance GHC.Show.Show Network.AWS.AppSync.Types.RelationalDatabaseDataSourceConfig.RelationalDatabaseDataSourceConfig
instance GHC.Read.Read Network.AWS.AppSync.Types.RelationalDatabaseDataSourceConfig.RelationalDatabaseDataSourceConfig
instance GHC.Classes.Eq Network.AWS.AppSync.Types.RelationalDatabaseDataSourceConfig.RelationalDatabaseDataSourceConfig
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.AppSync.Types.RelationalDatabaseDataSourceConfig.RelationalDatabaseDataSourceConfig
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.Types.RelationalDatabaseDataSourceConfig.RelationalDatabaseDataSourceConfig
instance Control.DeepSeq.NFData Network.AWS.AppSync.Types.RelationalDatabaseDataSourceConfig.RelationalDatabaseDataSourceConfig
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.Types.RelationalDatabaseDataSourceConfig.RelationalDatabaseDataSourceConfig


module Network.AWS.AppSync.Types.DataSource

-- | Describes a data source.
--   
--   <i>See:</i> <a>newDataSource</a> smart constructor.
data DataSource
DataSource' :: Maybe Text -> Maybe RelationalDatabaseDataSourceConfig -> Maybe ElasticsearchDataSourceConfig -> Maybe LambdaDataSourceConfig -> Maybe Text -> Maybe DynamodbDataSourceConfig -> Maybe Text -> Maybe Text -> Maybe DataSourceType -> Maybe OpenSearchServiceDataSourceConfig -> Maybe HttpDataSourceConfig -> DataSource

-- | The Identity and Access Management service role ARN for the data
--   source. The system assumes this role when accessing the data source.
[$sel:serviceRoleArn:DataSource'] :: DataSource -> Maybe Text

-- | Relational database settings.
[$sel:relationalDatabaseConfig:DataSource'] :: DataSource -> Maybe RelationalDatabaseDataSourceConfig

-- | Amazon OpenSearch Service settings.
[$sel:elasticsearchConfig:DataSource'] :: DataSource -> Maybe ElasticsearchDataSourceConfig

-- | Amazon Web Services Lambda settings.
[$sel:lambdaConfig:DataSource'] :: DataSource -> Maybe LambdaDataSourceConfig

-- | The name of the data source.
[$sel:name:DataSource'] :: DataSource -> Maybe Text

-- | Amazon DynamoDB settings.
[$sel:dynamodbConfig:DataSource'] :: DataSource -> Maybe DynamodbDataSourceConfig

-- | The description of the data source.
[$sel:description:DataSource'] :: DataSource -> Maybe Text

-- | The data source ARN.
[$sel:dataSourceArn:DataSource'] :: DataSource -> Maybe Text

-- | The type of the data source.
--   
--   <ul>
--   <li><b>AWS_LAMBDA</b>: The data source is an Amazon Web Services
--   Lambda function.</li>
--   <li><b>AMAZON_DYNAMODB</b>: The data source is an Amazon DynamoDB
--   table.</li>
--   <li><b>AMAZON_ELASTICSEARCH</b>: The data source is an Amazon
--   OpenSearch Service domain.</li>
--   <li><b>AMAZON_OPENSEARCH_SERVICE</b>: The data source is an Amazon
--   OpenSearch Service domain.</li>
--   <li><b>NONE</b>: There is no data source. This type is used when you
--   wish to invoke a GraphQL operation without connecting to a data
--   source, such as performing data transformation with resolvers or
--   triggering a subscription to be invoked from a mutation.</li>
--   <li><b>HTTP</b>: The data source is an HTTP endpoint.</li>
--   <li><b>RELATIONAL_DATABASE</b>: The data source is a relational
--   database.</li>
--   </ul>
[$sel:type':DataSource'] :: DataSource -> Maybe DataSourceType

-- | Amazon OpenSearch Service settings.
[$sel:openSearchServiceConfig:DataSource'] :: DataSource -> Maybe OpenSearchServiceDataSourceConfig

-- | HTTP endpoint settings.
[$sel:httpConfig:DataSource'] :: DataSource -> Maybe HttpDataSourceConfig

-- | Create a value of <a>DataSource</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:serviceRoleArn:DataSource'</a>,
--   <a>dataSource_serviceRoleArn</a> - The Identity and Access Management
--   service role ARN for the data source. The system assumes this role
--   when accessing the data source.
--   
--   <a>$sel:relationalDatabaseConfig:DataSource'</a>,
--   <a>dataSource_relationalDatabaseConfig</a> - Relational database
--   settings.
--   
--   <a>$sel:elasticsearchConfig:DataSource'</a>,
--   <a>dataSource_elasticsearchConfig</a> - Amazon OpenSearch Service
--   settings.
--   
--   <a>$sel:lambdaConfig:DataSource'</a>, <a>dataSource_lambdaConfig</a> -
--   Amazon Web Services Lambda settings.
--   
--   <a>$sel:name:DataSource'</a>, <a>dataSource_name</a> - The name of the
--   data source.
--   
--   <a>$sel:dynamodbConfig:DataSource'</a>,
--   <a>dataSource_dynamodbConfig</a> - Amazon DynamoDB settings.
--   
--   <a>$sel:description:DataSource'</a>, <a>dataSource_description</a> -
--   The description of the data source.
--   
--   <a>$sel:dataSourceArn:DataSource'</a>, <a>dataSource_dataSourceArn</a>
--   - The data source ARN.
--   
--   <a>$sel:type':DataSource'</a>, <a>dataSource_type</a> - The type of
--   the data source.
--   
--   <ul>
--   <li><b>AWS_LAMBDA</b>: The data source is an Amazon Web Services
--   Lambda function.</li>
--   <li><b>AMAZON_DYNAMODB</b>: The data source is an Amazon DynamoDB
--   table.</li>
--   <li><b>AMAZON_ELASTICSEARCH</b>: The data source is an Amazon
--   OpenSearch Service domain.</li>
--   <li><b>AMAZON_OPENSEARCH_SERVICE</b>: The data source is an Amazon
--   OpenSearch Service domain.</li>
--   <li><b>NONE</b>: There is no data source. This type is used when you
--   wish to invoke a GraphQL operation without connecting to a data
--   source, such as performing data transformation with resolvers or
--   triggering a subscription to be invoked from a mutation.</li>
--   <li><b>HTTP</b>: The data source is an HTTP endpoint.</li>
--   <li><b>RELATIONAL_DATABASE</b>: The data source is a relational
--   database.</li>
--   </ul>
--   
--   <a>$sel:openSearchServiceConfig:DataSource'</a>,
--   <a>dataSource_openSearchServiceConfig</a> - Amazon OpenSearch Service
--   settings.
--   
--   <a>$sel:httpConfig:DataSource'</a>, <a>dataSource_httpConfig</a> -
--   HTTP endpoint settings.
newDataSource :: DataSource

-- | The Identity and Access Management service role ARN for the data
--   source. The system assumes this role when accessing the data source.
dataSource_serviceRoleArn :: Lens' DataSource (Maybe Text)

-- | Relational database settings.
dataSource_relationalDatabaseConfig :: Lens' DataSource (Maybe RelationalDatabaseDataSourceConfig)

-- | Amazon OpenSearch Service settings.
dataSource_elasticsearchConfig :: Lens' DataSource (Maybe ElasticsearchDataSourceConfig)

-- | Amazon Web Services Lambda settings.
dataSource_lambdaConfig :: Lens' DataSource (Maybe LambdaDataSourceConfig)

-- | The name of the data source.
dataSource_name :: Lens' DataSource (Maybe Text)

-- | Amazon DynamoDB settings.
dataSource_dynamodbConfig :: Lens' DataSource (Maybe DynamodbDataSourceConfig)

-- | The description of the data source.
dataSource_description :: Lens' DataSource (Maybe Text)

-- | The data source ARN.
dataSource_dataSourceArn :: Lens' DataSource (Maybe Text)

-- | The type of the data source.
--   
--   <ul>
--   <li><b>AWS_LAMBDA</b>: The data source is an Amazon Web Services
--   Lambda function.</li>
--   <li><b>AMAZON_DYNAMODB</b>: The data source is an Amazon DynamoDB
--   table.</li>
--   <li><b>AMAZON_ELASTICSEARCH</b>: The data source is an Amazon
--   OpenSearch Service domain.</li>
--   <li><b>AMAZON_OPENSEARCH_SERVICE</b>: The data source is an Amazon
--   OpenSearch Service domain.</li>
--   <li><b>NONE</b>: There is no data source. This type is used when you
--   wish to invoke a GraphQL operation without connecting to a data
--   source, such as performing data transformation with resolvers or
--   triggering a subscription to be invoked from a mutation.</li>
--   <li><b>HTTP</b>: The data source is an HTTP endpoint.</li>
--   <li><b>RELATIONAL_DATABASE</b>: The data source is a relational
--   database.</li>
--   </ul>
dataSource_type :: Lens' DataSource (Maybe DataSourceType)

-- | Amazon OpenSearch Service settings.
dataSource_openSearchServiceConfig :: Lens' DataSource (Maybe OpenSearchServiceDataSourceConfig)

-- | HTTP endpoint settings.
dataSource_httpConfig :: Lens' DataSource (Maybe HttpDataSourceConfig)
instance GHC.Generics.Generic Network.AWS.AppSync.Types.DataSource.DataSource
instance GHC.Show.Show Network.AWS.AppSync.Types.DataSource.DataSource
instance GHC.Read.Read Network.AWS.AppSync.Types.DataSource.DataSource
instance GHC.Classes.Eq Network.AWS.AppSync.Types.DataSource.DataSource
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.AppSync.Types.DataSource.DataSource
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.Types.DataSource.DataSource
instance Control.DeepSeq.NFData Network.AWS.AppSync.Types.DataSource.DataSource


module Network.AWS.AppSync.Types.ResolverKind
newtype ResolverKind
ResolverKind' :: Text -> ResolverKind
[fromResolverKind] :: ResolverKind -> Text
pattern ResolverKind_PIPELINE :: ResolverKind
pattern ResolverKind_UNIT :: ResolverKind
instance Network.AWS.Data.XML.ToXML Network.AWS.AppSync.Types.ResolverKind.ResolverKind
instance Network.AWS.Data.XML.FromXML Network.AWS.AppSync.Types.ResolverKind.ResolverKind
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.AppSync.Types.ResolverKind.ResolverKind
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.Types.ResolverKind.ResolverKind
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.AppSync.Types.ResolverKind.ResolverKind
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.AppSync.Types.ResolverKind.ResolverKind
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.Types.ResolverKind.ResolverKind
instance Network.AWS.Data.Headers.ToHeader Network.AWS.AppSync.Types.ResolverKind.ResolverKind
instance Network.AWS.Data.Log.ToLog Network.AWS.AppSync.Types.ResolverKind.ResolverKind
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.AppSync.Types.ResolverKind.ResolverKind
instance Network.AWS.Data.Text.ToText Network.AWS.AppSync.Types.ResolverKind.ResolverKind
instance Network.AWS.Data.Text.FromText Network.AWS.AppSync.Types.ResolverKind.ResolverKind
instance Control.DeepSeq.NFData Network.AWS.AppSync.Types.ResolverKind.ResolverKind
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.Types.ResolverKind.ResolverKind
instance GHC.Generics.Generic Network.AWS.AppSync.Types.ResolverKind.ResolverKind
instance GHC.Classes.Ord Network.AWS.AppSync.Types.ResolverKind.ResolverKind
instance GHC.Classes.Eq Network.AWS.AppSync.Types.ResolverKind.ResolverKind
instance GHC.Read.Read Network.AWS.AppSync.Types.ResolverKind.ResolverKind
instance GHC.Show.Show Network.AWS.AppSync.Types.ResolverKind.ResolverKind


module Network.AWS.AppSync.Types.SchemaStatus
newtype SchemaStatus
SchemaStatus' :: Text -> SchemaStatus
[fromSchemaStatus] :: SchemaStatus -> Text
pattern SchemaStatus_ACTIVE :: SchemaStatus
pattern SchemaStatus_DELETING :: SchemaStatus
pattern SchemaStatus_FAILED :: SchemaStatus
pattern SchemaStatus_NOT_APPLICABLE :: SchemaStatus
pattern SchemaStatus_PROCESSING :: SchemaStatus
pattern SchemaStatus_SUCCESS :: SchemaStatus
instance Network.AWS.Data.XML.ToXML Network.AWS.AppSync.Types.SchemaStatus.SchemaStatus
instance Network.AWS.Data.XML.FromXML Network.AWS.AppSync.Types.SchemaStatus.SchemaStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.AppSync.Types.SchemaStatus.SchemaStatus
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.Types.SchemaStatus.SchemaStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.AppSync.Types.SchemaStatus.SchemaStatus
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.AppSync.Types.SchemaStatus.SchemaStatus
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.Types.SchemaStatus.SchemaStatus
instance Network.AWS.Data.Headers.ToHeader Network.AWS.AppSync.Types.SchemaStatus.SchemaStatus
instance Network.AWS.Data.Log.ToLog Network.AWS.AppSync.Types.SchemaStatus.SchemaStatus
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.AppSync.Types.SchemaStatus.SchemaStatus
instance Network.AWS.Data.Text.ToText Network.AWS.AppSync.Types.SchemaStatus.SchemaStatus
instance Network.AWS.Data.Text.FromText Network.AWS.AppSync.Types.SchemaStatus.SchemaStatus
instance Control.DeepSeq.NFData Network.AWS.AppSync.Types.SchemaStatus.SchemaStatus
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.Types.SchemaStatus.SchemaStatus
instance GHC.Generics.Generic Network.AWS.AppSync.Types.SchemaStatus.SchemaStatus
instance GHC.Classes.Ord Network.AWS.AppSync.Types.SchemaStatus.SchemaStatus
instance GHC.Classes.Eq Network.AWS.AppSync.Types.SchemaStatus.SchemaStatus
instance GHC.Read.Read Network.AWS.AppSync.Types.SchemaStatus.SchemaStatus
instance GHC.Show.Show Network.AWS.AppSync.Types.SchemaStatus.SchemaStatus


module Network.AWS.AppSync.Types.SyncConfig

-- | Describes a Sync configuration for a resolver.
--   
--   Contains information on which Conflict Detection as well as Resolution
--   strategy should be performed when the resolver is invoked.
--   
--   <i>See:</i> <a>newSyncConfig</a> smart constructor.
data SyncConfig
SyncConfig' :: Maybe ConflictHandlerType -> Maybe LambdaConflictHandlerConfig -> Maybe ConflictDetectionType -> SyncConfig

-- | The Conflict Resolution strategy to perform in the event of a
--   conflict.
--   
--   <ul>
--   <li><b>OPTIMISTIC_CONCURRENCY</b>: Resolve conflicts by rejecting
--   mutations when versions do not match the latest version at the
--   server.</li>
--   <li><b>AUTOMERGE</b>: Resolve conflicts with the Automerge conflict
--   resolution strategy.</li>
--   <li><b>LAMBDA</b>: Resolve conflicts with a Lambda function supplied
--   in the LambdaConflictHandlerConfig.</li>
--   </ul>
[$sel:conflictHandler:SyncConfig'] :: SyncConfig -> Maybe ConflictHandlerType

-- | The <tt>LambdaConflictHandlerConfig</tt> when configuring LAMBDA as
--   the Conflict Handler.
[$sel:lambdaConflictHandlerConfig:SyncConfig'] :: SyncConfig -> Maybe LambdaConflictHandlerConfig

-- | The Conflict Detection strategy to use.
--   
--   <ul>
--   <li><b>VERSION</b>: Detect conflicts based on object versions for this
--   resolver.</li>
--   <li><b>NONE</b>: Do not detect conflicts when executing this
--   resolver.</li>
--   </ul>
[$sel:conflictDetection:SyncConfig'] :: SyncConfig -> Maybe ConflictDetectionType

-- | Create a value of <a>SyncConfig</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:conflictHandler:SyncConfig'</a>,
--   <a>syncConfig_conflictHandler</a> - The Conflict Resolution strategy
--   to perform in the event of a conflict.
--   
--   <ul>
--   <li><b>OPTIMISTIC_CONCURRENCY</b>: Resolve conflicts by rejecting
--   mutations when versions do not match the latest version at the
--   server.</li>
--   <li><b>AUTOMERGE</b>: Resolve conflicts with the Automerge conflict
--   resolution strategy.</li>
--   <li><b>LAMBDA</b>: Resolve conflicts with a Lambda function supplied
--   in the LambdaConflictHandlerConfig.</li>
--   </ul>
--   
--   <a>$sel:lambdaConflictHandlerConfig:SyncConfig'</a>,
--   <a>syncConfig_lambdaConflictHandlerConfig</a> - The
--   <tt>LambdaConflictHandlerConfig</tt> when configuring LAMBDA as the
--   Conflict Handler.
--   
--   <a>$sel:conflictDetection:SyncConfig'</a>,
--   <a>syncConfig_conflictDetection</a> - The Conflict Detection strategy
--   to use.
--   
--   <ul>
--   <li><b>VERSION</b>: Detect conflicts based on object versions for this
--   resolver.</li>
--   <li><b>NONE</b>: Do not detect conflicts when executing this
--   resolver.</li>
--   </ul>
newSyncConfig :: SyncConfig

-- | The Conflict Resolution strategy to perform in the event of a
--   conflict.
--   
--   <ul>
--   <li><b>OPTIMISTIC_CONCURRENCY</b>: Resolve conflicts by rejecting
--   mutations when versions do not match the latest version at the
--   server.</li>
--   <li><b>AUTOMERGE</b>: Resolve conflicts with the Automerge conflict
--   resolution strategy.</li>
--   <li><b>LAMBDA</b>: Resolve conflicts with a Lambda function supplied
--   in the LambdaConflictHandlerConfig.</li>
--   </ul>
syncConfig_conflictHandler :: Lens' SyncConfig (Maybe ConflictHandlerType)

-- | The <tt>LambdaConflictHandlerConfig</tt> when configuring LAMBDA as
--   the Conflict Handler.
syncConfig_lambdaConflictHandlerConfig :: Lens' SyncConfig (Maybe LambdaConflictHandlerConfig)

-- | The Conflict Detection strategy to use.
--   
--   <ul>
--   <li><b>VERSION</b>: Detect conflicts based on object versions for this
--   resolver.</li>
--   <li><b>NONE</b>: Do not detect conflicts when executing this
--   resolver.</li>
--   </ul>
syncConfig_conflictDetection :: Lens' SyncConfig (Maybe ConflictDetectionType)
instance GHC.Generics.Generic Network.AWS.AppSync.Types.SyncConfig.SyncConfig
instance GHC.Show.Show Network.AWS.AppSync.Types.SyncConfig.SyncConfig
instance GHC.Read.Read Network.AWS.AppSync.Types.SyncConfig.SyncConfig
instance GHC.Classes.Eq Network.AWS.AppSync.Types.SyncConfig.SyncConfig
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.AppSync.Types.SyncConfig.SyncConfig
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.Types.SyncConfig.SyncConfig
instance Control.DeepSeq.NFData Network.AWS.AppSync.Types.SyncConfig.SyncConfig
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.Types.SyncConfig.SyncConfig


module Network.AWS.AppSync.Types.Resolver

-- | Describes a resolver.
--   
--   <i>See:</i> <a>newResolver</a> smart constructor.
data Resolver
Resolver' :: Maybe Text -> Maybe Text -> Maybe ResolverKind -> Maybe SyncConfig -> Maybe Text -> Maybe Text -> Maybe CachingConfig -> Maybe PipelineConfig -> Maybe Text -> Maybe Text -> Resolver

-- | The response mapping template.
[$sel:responseMappingTemplate:Resolver'] :: Resolver -> Maybe Text

-- | The resolver type name.
[$sel:typeName:Resolver'] :: Resolver -> Maybe Text

-- | The resolver type.
--   
--   <ul>
--   <li><b>UNIT</b>: A UNIT resolver type. A UNIT resolver is the default
--   resolver type. A UNIT resolver enables you to execute a GraphQL query
--   against a single data source.</li>
--   <li><b>PIPELINE</b>: A PIPELINE resolver type. A PIPELINE resolver
--   enables you to execute a series of <tt>Function</tt> in a serial
--   manner. You can use a pipeline resolver to execute a GraphQL query
--   against multiple data sources.</li>
--   </ul>
[$sel:kind:Resolver'] :: Resolver -> Maybe ResolverKind

-- | The <tt>SyncConfig</tt> for a resolver attached to a versioned
--   datasource.
[$sel:syncConfig:Resolver'] :: Resolver -> Maybe SyncConfig

-- | The resolver data source name.
[$sel:dataSourceName:Resolver'] :: Resolver -> Maybe Text

-- | The resolver ARN.
[$sel:resolverArn:Resolver'] :: Resolver -> Maybe Text

-- | The caching configuration for the resolver.
[$sel:cachingConfig:Resolver'] :: Resolver -> Maybe CachingConfig

-- | The <tt>PipelineConfig</tt>.
[$sel:pipelineConfig:Resolver'] :: Resolver -> Maybe PipelineConfig

-- | The request mapping template.
[$sel:requestMappingTemplate:Resolver'] :: Resolver -> Maybe Text

-- | The resolver field name.
[$sel:fieldName:Resolver'] :: Resolver -> Maybe Text

-- | Create a value of <a>Resolver</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:responseMappingTemplate:Resolver'</a>,
--   <a>resolver_responseMappingTemplate</a> - The response mapping
--   template.
--   
--   <a>$sel:typeName:Resolver'</a>, <a>resolver_typeName</a> - The
--   resolver type name.
--   
--   <a>$sel:kind:Resolver'</a>, <a>resolver_kind</a> - The resolver type.
--   
--   <ul>
--   <li><b>UNIT</b>: A UNIT resolver type. A UNIT resolver is the default
--   resolver type. A UNIT resolver enables you to execute a GraphQL query
--   against a single data source.</li>
--   <li><b>PIPELINE</b>: A PIPELINE resolver type. A PIPELINE resolver
--   enables you to execute a series of <tt>Function</tt> in a serial
--   manner. You can use a pipeline resolver to execute a GraphQL query
--   against multiple data sources.</li>
--   </ul>
--   
--   <a>$sel:syncConfig:Resolver'</a>, <a>resolver_syncConfig</a> - The
--   <tt>SyncConfig</tt> for a resolver attached to a versioned datasource.
--   
--   <a>$sel:dataSourceName:Resolver'</a>, <a>resolver_dataSourceName</a> -
--   The resolver data source name.
--   
--   <a>$sel:resolverArn:Resolver'</a>, <a>resolver_resolverArn</a> - The
--   resolver ARN.
--   
--   <a>$sel:cachingConfig:Resolver'</a>, <a>resolver_cachingConfig</a> -
--   The caching configuration for the resolver.
--   
--   <a>$sel:pipelineConfig:Resolver'</a>, <a>resolver_pipelineConfig</a> -
--   The <tt>PipelineConfig</tt>.
--   
--   <a>$sel:requestMappingTemplate:Resolver'</a>,
--   <a>resolver_requestMappingTemplate</a> - The request mapping template.
--   
--   <a>$sel:fieldName:Resolver'</a>, <a>resolver_fieldName</a> - The
--   resolver field name.
newResolver :: Resolver

-- | The response mapping template.
resolver_responseMappingTemplate :: Lens' Resolver (Maybe Text)

-- | The resolver type name.
resolver_typeName :: Lens' Resolver (Maybe Text)

-- | The resolver type.
--   
--   <ul>
--   <li><b>UNIT</b>: A UNIT resolver type. A UNIT resolver is the default
--   resolver type. A UNIT resolver enables you to execute a GraphQL query
--   against a single data source.</li>
--   <li><b>PIPELINE</b>: A PIPELINE resolver type. A PIPELINE resolver
--   enables you to execute a series of <tt>Function</tt> in a serial
--   manner. You can use a pipeline resolver to execute a GraphQL query
--   against multiple data sources.</li>
--   </ul>
resolver_kind :: Lens' Resolver (Maybe ResolverKind)

-- | The <tt>SyncConfig</tt> for a resolver attached to a versioned
--   datasource.
resolver_syncConfig :: Lens' Resolver (Maybe SyncConfig)

-- | The resolver data source name.
resolver_dataSourceName :: Lens' Resolver (Maybe Text)

-- | The resolver ARN.
resolver_resolverArn :: Lens' Resolver (Maybe Text)

-- | The caching configuration for the resolver.
resolver_cachingConfig :: Lens' Resolver (Maybe CachingConfig)

-- | The <tt>PipelineConfig</tt>.
resolver_pipelineConfig :: Lens' Resolver (Maybe PipelineConfig)

-- | The request mapping template.
resolver_requestMappingTemplate :: Lens' Resolver (Maybe Text)

-- | The resolver field name.
resolver_fieldName :: Lens' Resolver (Maybe Text)
instance GHC.Generics.Generic Network.AWS.AppSync.Types.Resolver.Resolver
instance GHC.Show.Show Network.AWS.AppSync.Types.Resolver.Resolver
instance GHC.Read.Read Network.AWS.AppSync.Types.Resolver.Resolver
instance GHC.Classes.Eq Network.AWS.AppSync.Types.Resolver.Resolver
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.AppSync.Types.Resolver.Resolver
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.Types.Resolver.Resolver
instance Control.DeepSeq.NFData Network.AWS.AppSync.Types.Resolver.Resolver


module Network.AWS.AppSync.Types.FunctionConfiguration

-- | A function is a reusable entity. Multiple functions can be used to
--   compose the resolver logic.
--   
--   <i>See:</i> <a>newFunctionConfiguration</a> smart constructor.
data FunctionConfiguration
FunctionConfiguration' :: Maybe Text -> Maybe Text -> Maybe SyncConfig -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> FunctionConfiguration

-- | The <tt>Function</tt> response mapping template.
[$sel:responseMappingTemplate:FunctionConfiguration'] :: FunctionConfiguration -> Maybe Text

-- | The version of the request mapping template. Currently only the
--   2018-05-29 version of the template is supported.
[$sel:functionVersion:FunctionConfiguration'] :: FunctionConfiguration -> Maybe Text
[$sel:syncConfig:FunctionConfiguration'] :: FunctionConfiguration -> Maybe SyncConfig

-- | The name of the <tt>DataSource</tt>.
[$sel:dataSourceName:FunctionConfiguration'] :: FunctionConfiguration -> Maybe Text

-- | The ARN of the <tt>Function</tt> object.
[$sel:functionArn:FunctionConfiguration'] :: FunctionConfiguration -> Maybe Text

-- | The name of the <tt>Function</tt> object.
[$sel:name:FunctionConfiguration'] :: FunctionConfiguration -> Maybe Text

-- | A unique ID representing the <tt>Function</tt> object.
[$sel:functionId:FunctionConfiguration'] :: FunctionConfiguration -> Maybe Text

-- | The <tt>Function</tt> description.
[$sel:description:FunctionConfiguration'] :: FunctionConfiguration -> Maybe Text

-- | The <tt>Function</tt> request mapping template. Functions support only
--   the 2018-05-29 version of the request mapping template.
[$sel:requestMappingTemplate:FunctionConfiguration'] :: FunctionConfiguration -> Maybe Text

-- | Create a value of <a>FunctionConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:responseMappingTemplate:FunctionConfiguration'</a>,
--   <a>functionConfiguration_responseMappingTemplate</a> - The
--   <tt>Function</tt> response mapping template.
--   
--   <a>$sel:functionVersion:FunctionConfiguration'</a>,
--   <a>functionConfiguration_functionVersion</a> - The version of the
--   request mapping template. Currently only the 2018-05-29 version of the
--   template is supported.
--   
--   <a>$sel:syncConfig:FunctionConfiguration'</a>,
--   <a>functionConfiguration_syncConfig</a> - Undocumented member.
--   
--   <a>$sel:dataSourceName:FunctionConfiguration'</a>,
--   <a>functionConfiguration_dataSourceName</a> - The name of the
--   <tt>DataSource</tt>.
--   
--   <a>$sel:functionArn:FunctionConfiguration'</a>,
--   <a>functionConfiguration_functionArn</a> - The ARN of the
--   <tt>Function</tt> object.
--   
--   <a>$sel:name:FunctionConfiguration'</a>,
--   <a>functionConfiguration_name</a> - The name of the <tt>Function</tt>
--   object.
--   
--   <a>$sel:functionId:FunctionConfiguration'</a>,
--   <a>functionConfiguration_functionId</a> - A unique ID representing the
--   <tt>Function</tt> object.
--   
--   <a>$sel:description:FunctionConfiguration'</a>,
--   <a>functionConfiguration_description</a> - The <tt>Function</tt>
--   description.
--   
--   <a>$sel:requestMappingTemplate:FunctionConfiguration'</a>,
--   <a>functionConfiguration_requestMappingTemplate</a> - The
--   <tt>Function</tt> request mapping template. Functions support only the
--   2018-05-29 version of the request mapping template.
newFunctionConfiguration :: FunctionConfiguration

-- | The <tt>Function</tt> response mapping template.
functionConfiguration_responseMappingTemplate :: Lens' FunctionConfiguration (Maybe Text)

-- | The version of the request mapping template. Currently only the
--   2018-05-29 version of the template is supported.
functionConfiguration_functionVersion :: Lens' FunctionConfiguration (Maybe Text)

-- | Undocumented member.
functionConfiguration_syncConfig :: Lens' FunctionConfiguration (Maybe SyncConfig)

-- | The name of the <tt>DataSource</tt>.
functionConfiguration_dataSourceName :: Lens' FunctionConfiguration (Maybe Text)

-- | The ARN of the <tt>Function</tt> object.
functionConfiguration_functionArn :: Lens' FunctionConfiguration (Maybe Text)

-- | The name of the <tt>Function</tt> object.
functionConfiguration_name :: Lens' FunctionConfiguration (Maybe Text)

-- | A unique ID representing the <tt>Function</tt> object.
functionConfiguration_functionId :: Lens' FunctionConfiguration (Maybe Text)

-- | The <tt>Function</tt> description.
functionConfiguration_description :: Lens' FunctionConfiguration (Maybe Text)

-- | The <tt>Function</tt> request mapping template. Functions support only
--   the 2018-05-29 version of the request mapping template.
functionConfiguration_requestMappingTemplate :: Lens' FunctionConfiguration (Maybe Text)
instance GHC.Generics.Generic Network.AWS.AppSync.Types.FunctionConfiguration.FunctionConfiguration
instance GHC.Show.Show Network.AWS.AppSync.Types.FunctionConfiguration.FunctionConfiguration
instance GHC.Read.Read Network.AWS.AppSync.Types.FunctionConfiguration.FunctionConfiguration
instance GHC.Classes.Eq Network.AWS.AppSync.Types.FunctionConfiguration.FunctionConfiguration
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.AppSync.Types.FunctionConfiguration.FunctionConfiguration
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.Types.FunctionConfiguration.FunctionConfiguration
instance Control.DeepSeq.NFData Network.AWS.AppSync.Types.FunctionConfiguration.FunctionConfiguration


module Network.AWS.AppSync.Types.TypeDefinitionFormat
newtype TypeDefinitionFormat
TypeDefinitionFormat' :: Text -> TypeDefinitionFormat
[fromTypeDefinitionFormat] :: TypeDefinitionFormat -> Text
pattern TypeDefinitionFormat_JSON :: TypeDefinitionFormat
pattern TypeDefinitionFormat_SDL :: TypeDefinitionFormat
instance Network.AWS.Data.XML.ToXML Network.AWS.AppSync.Types.TypeDefinitionFormat.TypeDefinitionFormat
instance Network.AWS.Data.XML.FromXML Network.AWS.AppSync.Types.TypeDefinitionFormat.TypeDefinitionFormat
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.AppSync.Types.TypeDefinitionFormat.TypeDefinitionFormat
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.Types.TypeDefinitionFormat.TypeDefinitionFormat
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.AppSync.Types.TypeDefinitionFormat.TypeDefinitionFormat
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.AppSync.Types.TypeDefinitionFormat.TypeDefinitionFormat
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.Types.TypeDefinitionFormat.TypeDefinitionFormat
instance Network.AWS.Data.Headers.ToHeader Network.AWS.AppSync.Types.TypeDefinitionFormat.TypeDefinitionFormat
instance Network.AWS.Data.Log.ToLog Network.AWS.AppSync.Types.TypeDefinitionFormat.TypeDefinitionFormat
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.AppSync.Types.TypeDefinitionFormat.TypeDefinitionFormat
instance Network.AWS.Data.Text.ToText Network.AWS.AppSync.Types.TypeDefinitionFormat.TypeDefinitionFormat
instance Network.AWS.Data.Text.FromText Network.AWS.AppSync.Types.TypeDefinitionFormat.TypeDefinitionFormat
instance Control.DeepSeq.NFData Network.AWS.AppSync.Types.TypeDefinitionFormat.TypeDefinitionFormat
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.Types.TypeDefinitionFormat.TypeDefinitionFormat
instance GHC.Generics.Generic Network.AWS.AppSync.Types.TypeDefinitionFormat.TypeDefinitionFormat
instance GHC.Classes.Ord Network.AWS.AppSync.Types.TypeDefinitionFormat.TypeDefinitionFormat
instance GHC.Classes.Eq Network.AWS.AppSync.Types.TypeDefinitionFormat.TypeDefinitionFormat
instance GHC.Read.Read Network.AWS.AppSync.Types.TypeDefinitionFormat.TypeDefinitionFormat
instance GHC.Show.Show Network.AWS.AppSync.Types.TypeDefinitionFormat.TypeDefinitionFormat


module Network.AWS.AppSync.Types.Type

-- | Describes a type.
--   
--   <i>See:</i> <a>newType</a> smart constructor.
data Type
Type' :: Maybe TypeDefinitionFormat -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Type

-- | The type format: SDL or JSON.
[$sel:format:Type'] :: Type -> Maybe TypeDefinitionFormat

-- | The type ARN.
[$sel:arn:Type'] :: Type -> Maybe Text

-- | The type name.
[$sel:name:Type'] :: Type -> Maybe Text

-- | The type description.
[$sel:description:Type'] :: Type -> Maybe Text

-- | The type definition.
[$sel:definition:Type'] :: Type -> Maybe Text

-- | Create a value of <a>Type</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:format:Type'</a>, <a>type_format</a> - The type format: SDL or
--   JSON.
--   
--   <a>$sel:arn:Type'</a>, <a>type_arn</a> - The type ARN.
--   
--   <a>$sel:name:Type'</a>, <a>type_name</a> - The type name.
--   
--   <a>$sel:description:Type'</a>, <a>type_description</a> - The type
--   description.
--   
--   <a>$sel:definition:Type'</a>, <a>type_definition</a> - The type
--   definition.
newType :: Type

-- | The type format: SDL or JSON.
type_format :: Lens' Type (Maybe TypeDefinitionFormat)

-- | The type ARN.
type_arn :: Lens' Type (Maybe Text)

-- | The type name.
type_name :: Lens' Type (Maybe Text)

-- | The type description.
type_description :: Lens' Type (Maybe Text)

-- | The type definition.
type_definition :: Lens' Type (Maybe Text)
instance GHC.Generics.Generic Network.AWS.AppSync.Types.Type.Type
instance GHC.Show.Show Network.AWS.AppSync.Types.Type.Type
instance GHC.Read.Read Network.AWS.AppSync.Types.Type.Type
instance GHC.Classes.Eq Network.AWS.AppSync.Types.Type.Type
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.AppSync.Types.Type.Type
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.Types.Type.Type
instance Control.DeepSeq.NFData Network.AWS.AppSync.Types.Type.Type


module Network.AWS.AppSync.Types.UserPoolConfig

-- | Describes an Amazon Cognito user pool configuration.
--   
--   <i>See:</i> <a>newUserPoolConfig</a> smart constructor.
data UserPoolConfig
UserPoolConfig' :: Maybe Text -> Text -> Text -> DefaultAction -> UserPoolConfig

-- | A regular expression for validating the incoming Amazon Cognito user
--   pool app client ID.
[$sel:appIdClientRegex:UserPoolConfig'] :: UserPoolConfig -> Maybe Text

-- | The user pool ID.
[$sel:userPoolId:UserPoolConfig'] :: UserPoolConfig -> Text

-- | The Amazon Web Services Region in which the user pool was created.
[$sel:awsRegion:UserPoolConfig'] :: UserPoolConfig -> Text

-- | The action that you want your GraphQL API to take when a request that
--   uses Amazon Cognito user pool authentication doesn't match the Amazon
--   Cognito user pool configuration.
[$sel:defaultAction:UserPoolConfig'] :: UserPoolConfig -> DefaultAction

-- | Create a value of <a>UserPoolConfig</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:appIdClientRegex:UserPoolConfig'</a>,
--   <a>userPoolConfig_appIdClientRegex</a> - A regular expression for
--   validating the incoming Amazon Cognito user pool app client ID.
--   
--   <a>$sel:userPoolId:UserPoolConfig'</a>,
--   <a>userPoolConfig_userPoolId</a> - The user pool ID.
--   
--   <a>$sel:awsRegion:UserPoolConfig'</a>, <a>userPoolConfig_awsRegion</a>
--   - The Amazon Web Services Region in which the user pool was created.
--   
--   <a>$sel:defaultAction:UserPoolConfig'</a>,
--   <a>userPoolConfig_defaultAction</a> - The action that you want your
--   GraphQL API to take when a request that uses Amazon Cognito user pool
--   authentication doesn't match the Amazon Cognito user pool
--   configuration.
newUserPoolConfig :: Text -> Text -> DefaultAction -> UserPoolConfig

-- | A regular expression for validating the incoming Amazon Cognito user
--   pool app client ID.
userPoolConfig_appIdClientRegex :: Lens' UserPoolConfig (Maybe Text)

-- | The user pool ID.
userPoolConfig_userPoolId :: Lens' UserPoolConfig Text

-- | The Amazon Web Services Region in which the user pool was created.
userPoolConfig_awsRegion :: Lens' UserPoolConfig Text

-- | The action that you want your GraphQL API to take when a request that
--   uses Amazon Cognito user pool authentication doesn't match the Amazon
--   Cognito user pool configuration.
userPoolConfig_defaultAction :: Lens' UserPoolConfig DefaultAction
instance GHC.Generics.Generic Network.AWS.AppSync.Types.UserPoolConfig.UserPoolConfig
instance GHC.Show.Show Network.AWS.AppSync.Types.UserPoolConfig.UserPoolConfig
instance GHC.Read.Read Network.AWS.AppSync.Types.UserPoolConfig.UserPoolConfig
instance GHC.Classes.Eq Network.AWS.AppSync.Types.UserPoolConfig.UserPoolConfig
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.AppSync.Types.UserPoolConfig.UserPoolConfig
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.Types.UserPoolConfig.UserPoolConfig
instance Control.DeepSeq.NFData Network.AWS.AppSync.Types.UserPoolConfig.UserPoolConfig
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.Types.UserPoolConfig.UserPoolConfig


module Network.AWS.AppSync.Types.GraphqlApi

-- | Describes a GraphQL API.
--   
--   <i>See:</i> <a>newGraphqlApi</a> smart constructor.
data GraphqlApi
GraphqlApi' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe OpenIDConnectConfig -> Maybe UserPoolConfig -> Maybe Bool -> Maybe Text -> Maybe LambdaAuthorizerConfig -> Maybe (HashMap Text Text) -> Maybe LogConfig -> Maybe [AdditionalAuthenticationProvider] -> Maybe AuthenticationType -> Maybe (HashMap Text Text) -> GraphqlApi

-- | The ARN of the WAF ACL associated with this <tt>GraphqlApi</tt>, if
--   one exists.
[$sel:wafWebAclArn:GraphqlApi'] :: GraphqlApi -> Maybe Text

-- | The API ID.
[$sel:apiId:GraphqlApi'] :: GraphqlApi -> Maybe Text

-- | The ARN.
[$sel:arn:GraphqlApi'] :: GraphqlApi -> Maybe Text

-- | The OpenID Connect configuration.
[$sel:openIDConnectConfig:GraphqlApi'] :: GraphqlApi -> Maybe OpenIDConnectConfig

-- | The Amazon Cognito user pool configuration.
[$sel:userPoolConfig:GraphqlApi'] :: GraphqlApi -> Maybe UserPoolConfig

-- | A flag representing whether X-Ray tracing is enabled for this
--   <tt>GraphqlApi</tt>.
[$sel:xrayEnabled:GraphqlApi'] :: GraphqlApi -> Maybe Bool

-- | The API name.
[$sel:name:GraphqlApi'] :: GraphqlApi -> Maybe Text

-- | Configuration for Amazon Web Services Lambda function authorization.
[$sel:lambdaAuthorizerConfig:GraphqlApi'] :: GraphqlApi -> Maybe LambdaAuthorizerConfig

-- | The tags.
[$sel:tags:GraphqlApi'] :: GraphqlApi -> Maybe (HashMap Text Text)

-- | The Amazon CloudWatch Logs configuration.
[$sel:logConfig:GraphqlApi'] :: GraphqlApi -> Maybe LogConfig

-- | A list of additional authentication providers for the
--   <tt>GraphqlApi</tt> API.
[$sel:additionalAuthenticationProviders:GraphqlApi'] :: GraphqlApi -> Maybe [AdditionalAuthenticationProvider]

-- | The authentication type.
[$sel:authenticationType:GraphqlApi'] :: GraphqlApi -> Maybe AuthenticationType

-- | The URIs.
[$sel:uris:GraphqlApi'] :: GraphqlApi -> Maybe (HashMap Text Text)

-- | Create a value of <a>GraphqlApi</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:wafWebAclArn:GraphqlApi'</a>, <a>graphqlApi_wafWebAclArn</a> -
--   The ARN of the WAF ACL associated with this <tt>GraphqlApi</tt>, if
--   one exists.
--   
--   <a>$sel:apiId:GraphqlApi'</a>, <a>graphqlApi_apiId</a> - The API ID.
--   
--   <a>$sel:arn:GraphqlApi'</a>, <a>graphqlApi_arn</a> - The ARN.
--   
--   <a>$sel:openIDConnectConfig:GraphqlApi'</a>,
--   <a>graphqlApi_openIDConnectConfig</a> - The OpenID Connect
--   configuration.
--   
--   <a>$sel:userPoolConfig:GraphqlApi'</a>,
--   <a>graphqlApi_userPoolConfig</a> - The Amazon Cognito user pool
--   configuration.
--   
--   <a>$sel:xrayEnabled:GraphqlApi'</a>, <a>graphqlApi_xrayEnabled</a> - A
--   flag representing whether X-Ray tracing is enabled for this
--   <tt>GraphqlApi</tt>.
--   
--   <a>$sel:name:GraphqlApi'</a>, <a>graphqlApi_name</a> - The API name.
--   
--   <a>$sel:lambdaAuthorizerConfig:GraphqlApi'</a>,
--   <a>graphqlApi_lambdaAuthorizerConfig</a> - Configuration for Amazon
--   Web Services Lambda function authorization.
--   
--   <a>$sel:tags:GraphqlApi'</a>, <a>graphqlApi_tags</a> - The tags.
--   
--   <a>$sel:logConfig:GraphqlApi'</a>, <a>graphqlApi_logConfig</a> - The
--   Amazon CloudWatch Logs configuration.
--   
--   <a>$sel:additionalAuthenticationProviders:GraphqlApi'</a>,
--   <a>graphqlApi_additionalAuthenticationProviders</a> - A list of
--   additional authentication providers for the <tt>GraphqlApi</tt> API.
--   
--   <a>$sel:authenticationType:GraphqlApi'</a>,
--   <a>graphqlApi_authenticationType</a> - The authentication type.
--   
--   <a>$sel:uris:GraphqlApi'</a>, <a>graphqlApi_uris</a> - The URIs.
newGraphqlApi :: GraphqlApi

-- | The ARN of the WAF ACL associated with this <tt>GraphqlApi</tt>, if
--   one exists.
graphqlApi_wafWebAclArn :: Lens' GraphqlApi (Maybe Text)

-- | The API ID.
graphqlApi_apiId :: Lens' GraphqlApi (Maybe Text)

-- | The ARN.
graphqlApi_arn :: Lens' GraphqlApi (Maybe Text)

-- | The OpenID Connect configuration.
graphqlApi_openIDConnectConfig :: Lens' GraphqlApi (Maybe OpenIDConnectConfig)

-- | The Amazon Cognito user pool configuration.
graphqlApi_userPoolConfig :: Lens' GraphqlApi (Maybe UserPoolConfig)

-- | A flag representing whether X-Ray tracing is enabled for this
--   <tt>GraphqlApi</tt>.
graphqlApi_xrayEnabled :: Lens' GraphqlApi (Maybe Bool)

-- | The API name.
graphqlApi_name :: Lens' GraphqlApi (Maybe Text)

-- | Configuration for Amazon Web Services Lambda function authorization.
graphqlApi_lambdaAuthorizerConfig :: Lens' GraphqlApi (Maybe LambdaAuthorizerConfig)

-- | The tags.
graphqlApi_tags :: Lens' GraphqlApi (Maybe (HashMap Text Text))

-- | The Amazon CloudWatch Logs configuration.
graphqlApi_logConfig :: Lens' GraphqlApi (Maybe LogConfig)

-- | A list of additional authentication providers for the
--   <tt>GraphqlApi</tt> API.
graphqlApi_additionalAuthenticationProviders :: Lens' GraphqlApi (Maybe [AdditionalAuthenticationProvider])

-- | The authentication type.
graphqlApi_authenticationType :: Lens' GraphqlApi (Maybe AuthenticationType)

-- | The URIs.
graphqlApi_uris :: Lens' GraphqlApi (Maybe (HashMap Text Text))
instance GHC.Generics.Generic Network.AWS.AppSync.Types.GraphqlApi.GraphqlApi
instance GHC.Show.Show Network.AWS.AppSync.Types.GraphqlApi.GraphqlApi
instance GHC.Read.Read Network.AWS.AppSync.Types.GraphqlApi.GraphqlApi
instance GHC.Classes.Eq Network.AWS.AppSync.Types.GraphqlApi.GraphqlApi
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.AppSync.Types.GraphqlApi.GraphqlApi
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.Types.GraphqlApi.GraphqlApi
instance Control.DeepSeq.NFData Network.AWS.AppSync.Types.GraphqlApi.GraphqlApi


module Network.AWS.AppSync.Types

-- | API version <tt>2017-07-25</tt> of the Amazon AppSync SDK
--   configuration.
defaultService :: Service

-- | The API key expiration must be set to a value between 1 and 365 days
--   from creation (for <tt>CreateApiKey</tt>) or from update (for
--   <tt>UpdateApiKey</tt>).
_ApiKeyValidityOutOfBoundsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The resource specified in the request was not found. Check the
--   resource, and then try again.
_NotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request is not well formed. For example, a value is invalid or a
--   required field is missing. Check the field values, and then try again.
_BadRequestException :: AsError a => Getting (First ServiceError) a ServiceError

-- | You are not authorized to perform this operation.
_UnauthorizedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Another modification is in progress at this time and it must complete
--   before you can make your change.
_ConcurrentModificationException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The GraphQL schema is not valid.
_GraphQLSchemaException :: AsError a => Getting (First ServiceError) a ServiceError

-- | You do not have access to perform this operation on this resource.
_AccessDeniedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request exceeded a limit. Try your request again.
_LimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The GraphQL API exceeded a limit. Try your request again.
_ApiLimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The API key exceeded a limit. Try your request again.
_ApiKeyLimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | An internal AppSync error occurred. Try your request again.
_InternalFailureException :: AsError a => Getting (First ServiceError) a ServiceError
newtype ApiCacheStatus
ApiCacheStatus' :: Text -> ApiCacheStatus
[fromApiCacheStatus] :: ApiCacheStatus -> Text
pattern ApiCacheStatus_AVAILABLE :: ApiCacheStatus
pattern ApiCacheStatus_CREATING :: ApiCacheStatus
pattern ApiCacheStatus_DELETING :: ApiCacheStatus
pattern ApiCacheStatus_FAILED :: ApiCacheStatus
pattern ApiCacheStatus_MODIFYING :: ApiCacheStatus
newtype ApiCacheType
ApiCacheType' :: Text -> ApiCacheType
[fromApiCacheType] :: ApiCacheType -> Text
pattern ApiCacheType_LARGE :: ApiCacheType
pattern ApiCacheType_LARGE_12X :: ApiCacheType
pattern ApiCacheType_LARGE_2X :: ApiCacheType
pattern ApiCacheType_LARGE_4X :: ApiCacheType
pattern ApiCacheType_LARGE_8X :: ApiCacheType
pattern ApiCacheType_MEDIUM :: ApiCacheType
pattern ApiCacheType_R4_2XLARGE :: ApiCacheType
pattern ApiCacheType_R4_4XLARGE :: ApiCacheType
pattern ApiCacheType_R4_8XLARGE :: ApiCacheType
pattern ApiCacheType_R4_LARGE :: ApiCacheType
pattern ApiCacheType_R4_XLARGE :: ApiCacheType
pattern ApiCacheType_SMALL :: ApiCacheType
pattern ApiCacheType_T2_MEDIUM :: ApiCacheType
pattern ApiCacheType_T2_SMALL :: ApiCacheType
pattern ApiCacheType_XLARGE :: ApiCacheType
newtype ApiCachingBehavior
ApiCachingBehavior' :: Text -> ApiCachingBehavior
[fromApiCachingBehavior] :: ApiCachingBehavior -> Text
pattern ApiCachingBehavior_FULL_REQUEST_CACHING :: ApiCachingBehavior
pattern ApiCachingBehavior_PER_RESOLVER_CACHING :: ApiCachingBehavior
newtype AuthenticationType
AuthenticationType' :: Text -> AuthenticationType
[fromAuthenticationType] :: AuthenticationType -> Text
pattern AuthenticationType_AMAZON_COGNITO_USER_POOLS :: AuthenticationType
pattern AuthenticationType_API_KEY :: AuthenticationType
pattern AuthenticationType_AWS_IAM :: AuthenticationType
pattern AuthenticationType_AWS_LAMBDA :: AuthenticationType
pattern AuthenticationType_OPENID_CONNECT :: AuthenticationType
newtype AuthorizationType
AuthorizationType' :: Text -> AuthorizationType
[fromAuthorizationType] :: AuthorizationType -> Text
pattern AuthorizationType_AWS_IAM :: AuthorizationType
newtype ConflictDetectionType
ConflictDetectionType' :: Text -> ConflictDetectionType
[fromConflictDetectionType] :: ConflictDetectionType -> Text
pattern ConflictDetectionType_NONE :: ConflictDetectionType
pattern ConflictDetectionType_VERSION :: ConflictDetectionType
newtype ConflictHandlerType
ConflictHandlerType' :: Text -> ConflictHandlerType
[fromConflictHandlerType] :: ConflictHandlerType -> Text
pattern ConflictHandlerType_AUTOMERGE :: ConflictHandlerType
pattern ConflictHandlerType_LAMBDA :: ConflictHandlerType
pattern ConflictHandlerType_NONE :: ConflictHandlerType
pattern ConflictHandlerType_OPTIMISTIC_CONCURRENCY :: ConflictHandlerType
newtype DataSourceType
DataSourceType' :: Text -> DataSourceType
[fromDataSourceType] :: DataSourceType -> Text
pattern DataSourceType_AMAZON_DYNAMODB :: DataSourceType
pattern DataSourceType_AMAZON_ELASTICSEARCH :: DataSourceType
pattern DataSourceType_AMAZON_OPENSEARCH_SERVICE :: DataSourceType
pattern DataSourceType_AWS_LAMBDA :: DataSourceType
pattern DataSourceType_HTTP :: DataSourceType
pattern DataSourceType_NONE :: DataSourceType
pattern DataSourceType_RELATIONAL_DATABASE :: DataSourceType
newtype DefaultAction
DefaultAction' :: Text -> DefaultAction
[fromDefaultAction] :: DefaultAction -> Text
pattern DefaultAction_ALLOW :: DefaultAction
pattern DefaultAction_DENY :: DefaultAction
newtype FieldLogLevel
FieldLogLevel' :: Text -> FieldLogLevel
[fromFieldLogLevel] :: FieldLogLevel -> Text
pattern FieldLogLevel_ALL :: FieldLogLevel
pattern FieldLogLevel_ERROR :: FieldLogLevel
pattern FieldLogLevel_NONE :: FieldLogLevel
newtype OutputType
OutputType' :: Text -> OutputType
[fromOutputType] :: OutputType -> Text
pattern OutputType_JSON :: OutputType
pattern OutputType_SDL :: OutputType
newtype RelationalDatabaseSourceType
RelationalDatabaseSourceType' :: Text -> RelationalDatabaseSourceType
[fromRelationalDatabaseSourceType] :: RelationalDatabaseSourceType -> Text
pattern RelationalDatabaseSourceType_RDS_HTTP_ENDPOINT :: RelationalDatabaseSourceType
newtype ResolverKind
ResolverKind' :: Text -> ResolverKind
[fromResolverKind] :: ResolverKind -> Text
pattern ResolverKind_PIPELINE :: ResolverKind
pattern ResolverKind_UNIT :: ResolverKind
newtype SchemaStatus
SchemaStatus' :: Text -> SchemaStatus
[fromSchemaStatus] :: SchemaStatus -> Text
pattern SchemaStatus_ACTIVE :: SchemaStatus
pattern SchemaStatus_DELETING :: SchemaStatus
pattern SchemaStatus_FAILED :: SchemaStatus
pattern SchemaStatus_NOT_APPLICABLE :: SchemaStatus
pattern SchemaStatus_PROCESSING :: SchemaStatus
pattern SchemaStatus_SUCCESS :: SchemaStatus
newtype TypeDefinitionFormat
TypeDefinitionFormat' :: Text -> TypeDefinitionFormat
[fromTypeDefinitionFormat] :: TypeDefinitionFormat -> Text
pattern TypeDefinitionFormat_JSON :: TypeDefinitionFormat
pattern TypeDefinitionFormat_SDL :: TypeDefinitionFormat

-- | Describes an additional authentication provider.
--   
--   <i>See:</i> <a>newAdditionalAuthenticationProvider</a> smart
--   constructor.
data AdditionalAuthenticationProvider
AdditionalAuthenticationProvider' :: Maybe OpenIDConnectConfig -> Maybe CognitoUserPoolConfig -> Maybe LambdaAuthorizerConfig -> Maybe AuthenticationType -> AdditionalAuthenticationProvider

-- | The OpenID Connect configuration.
[$sel:openIDConnectConfig:AdditionalAuthenticationProvider'] :: AdditionalAuthenticationProvider -> Maybe OpenIDConnectConfig

-- | The Amazon Cognito user pool configuration.
[$sel:userPoolConfig:AdditionalAuthenticationProvider'] :: AdditionalAuthenticationProvider -> Maybe CognitoUserPoolConfig

-- | Configuration for Amazon Web Services Lambda function authorization.
[$sel:lambdaAuthorizerConfig:AdditionalAuthenticationProvider'] :: AdditionalAuthenticationProvider -> Maybe LambdaAuthorizerConfig

-- | The authentication type: API key, Identity and Access Management,
--   OIDC, Amazon Cognito user pools, or Amazon Web Services Lambda.
[$sel:authenticationType:AdditionalAuthenticationProvider'] :: AdditionalAuthenticationProvider -> Maybe AuthenticationType

-- | Create a value of <a>AdditionalAuthenticationProvider</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:openIDConnectConfig:AdditionalAuthenticationProvider'</a>,
--   <a>additionalAuthenticationProvider_openIDConnectConfig</a> - The
--   OpenID Connect configuration.
--   
--   <a>$sel:userPoolConfig:AdditionalAuthenticationProvider'</a>,
--   <a>additionalAuthenticationProvider_userPoolConfig</a> - The Amazon
--   Cognito user pool configuration.
--   
--   <a>$sel:lambdaAuthorizerConfig:AdditionalAuthenticationProvider'</a>,
--   <a>additionalAuthenticationProvider_lambdaAuthorizerConfig</a> -
--   Configuration for Amazon Web Services Lambda function authorization.
--   
--   <a>$sel:authenticationType:AdditionalAuthenticationProvider'</a>,
--   <a>additionalAuthenticationProvider_authenticationType</a> - The
--   authentication type: API key, Identity and Access Management, OIDC,
--   Amazon Cognito user pools, or Amazon Web Services Lambda.
newAdditionalAuthenticationProvider :: AdditionalAuthenticationProvider

-- | The OpenID Connect configuration.
additionalAuthenticationProvider_openIDConnectConfig :: Lens' AdditionalAuthenticationProvider (Maybe OpenIDConnectConfig)

-- | The Amazon Cognito user pool configuration.
additionalAuthenticationProvider_userPoolConfig :: Lens' AdditionalAuthenticationProvider (Maybe CognitoUserPoolConfig)

-- | Configuration for Amazon Web Services Lambda function authorization.
additionalAuthenticationProvider_lambdaAuthorizerConfig :: Lens' AdditionalAuthenticationProvider (Maybe LambdaAuthorizerConfig)

-- | The authentication type: API key, Identity and Access Management,
--   OIDC, Amazon Cognito user pools, or Amazon Web Services Lambda.
additionalAuthenticationProvider_authenticationType :: Lens' AdditionalAuthenticationProvider (Maybe AuthenticationType)

-- | The <tt>ApiCache</tt> object.
--   
--   <i>See:</i> <a>newApiCache</a> smart constructor.
data ApiCache
ApiCache' :: Maybe ApiCacheStatus -> Maybe Bool -> Maybe Integer -> Maybe ApiCacheType -> Maybe Bool -> Maybe ApiCachingBehavior -> ApiCache

-- | The cache instance status.
--   
--   <ul>
--   <li><b>AVAILABLE</b>: The instance is available for use.</li>
--   <li><b>CREATING</b>: The instance is currently creating.</li>
--   <li><b>DELETING</b>: The instance is currently deleting.</li>
--   <li><b>MODIFYING</b>: The instance is currently modifying.</li>
--   <li><b>FAILED</b>: The instance has failed creation.</li>
--   </ul>
[$sel:status:ApiCache'] :: ApiCache -> Maybe ApiCacheStatus

-- | At rest encryption flag for cache. This setting cannot be updated
--   after creation.
[$sel:atRestEncryptionEnabled:ApiCache'] :: ApiCache -> Maybe Bool

-- | TTL in seconds for cache entries.
--   
--   Valid values are between 1 and 3600 seconds.
[$sel:ttl:ApiCache'] :: ApiCache -> Maybe Integer

-- | The cache instance type. Valid values are
--   
--   <ul>
--   <li><pre>SMALL</pre></li>
--   <li><pre>MEDIUM</pre></li>
--   <li><pre>LARGE</pre></li>
--   <li><pre>XLARGE</pre></li>
--   <li><pre>LARGE_2X</pre></li>
--   <li><pre>LARGE_4X</pre></li>
--   <li><tt>LARGE_8X</tt> (not available in all regions)</li>
--   <li><pre>LARGE_12X</pre></li>
--   </ul>
--   
--   Historically, instance types were identified by an EC2-style value. As
--   of July 2020, this is deprecated, and the generic identifiers above
--   should be used.
--   
--   The following legacy instance types are available, but their use is
--   discouraged:
--   
--   <ul>
--   <li><b>T2_SMALL</b>: A t2.small instance type.</li>
--   <li><b>T2_MEDIUM</b>: A t2.medium instance type.</li>
--   <li><b>R4_LARGE</b>: A r4.large instance type.</li>
--   <li><b>R4_XLARGE</b>: A r4.xlarge instance type.</li>
--   <li><b>R4_2XLARGE</b>: A r4.2xlarge instance type.</li>
--   <li><b>R4_4XLARGE</b>: A r4.4xlarge instance type.</li>
--   <li><b>R4_8XLARGE</b>: A r4.8xlarge instance type.</li>
--   </ul>
[$sel:type':ApiCache'] :: ApiCache -> Maybe ApiCacheType

-- | Transit encryption flag when connecting to cache. This setting cannot
--   be updated after creation.
[$sel:transitEncryptionEnabled:ApiCache'] :: ApiCache -> Maybe Bool

-- | Caching behavior.
--   
--   <ul>
--   <li><b>FULL_REQUEST_CACHING</b>: All requests are fully cached.</li>
--   <li><b>PER_RESOLVER_CACHING</b>: Individual resolvers that you specify
--   are cached.</li>
--   </ul>
[$sel:apiCachingBehavior:ApiCache'] :: ApiCache -> Maybe ApiCachingBehavior

-- | Create a value of <a>ApiCache</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:ApiCache'</a>, <a>apiCache_status</a> - The cache
--   instance status.
--   
--   <ul>
--   <li><b>AVAILABLE</b>: The instance is available for use.</li>
--   <li><b>CREATING</b>: The instance is currently creating.</li>
--   <li><b>DELETING</b>: The instance is currently deleting.</li>
--   <li><b>MODIFYING</b>: The instance is currently modifying.</li>
--   <li><b>FAILED</b>: The instance has failed creation.</li>
--   </ul>
--   
--   <a>$sel:atRestEncryptionEnabled:ApiCache'</a>,
--   <a>apiCache_atRestEncryptionEnabled</a> - At rest encryption flag for
--   cache. This setting cannot be updated after creation.
--   
--   <a>$sel:ttl:ApiCache'</a>, <a>apiCache_ttl</a> - TTL in seconds for
--   cache entries.
--   
--   Valid values are between 1 and 3600 seconds.
--   
--   <a>$sel:type':ApiCache'</a>, <a>apiCache_type</a> - The cache instance
--   type. Valid values are
--   
--   <ul>
--   <li><pre>SMALL</pre></li>
--   <li><pre>MEDIUM</pre></li>
--   <li><pre>LARGE</pre></li>
--   <li><pre>XLARGE</pre></li>
--   <li><pre>LARGE_2X</pre></li>
--   <li><pre>LARGE_4X</pre></li>
--   <li><tt>LARGE_8X</tt> (not available in all regions)</li>
--   <li><pre>LARGE_12X</pre></li>
--   </ul>
--   
--   Historically, instance types were identified by an EC2-style value. As
--   of July 2020, this is deprecated, and the generic identifiers above
--   should be used.
--   
--   The following legacy instance types are available, but their use is
--   discouraged:
--   
--   <ul>
--   <li><b>T2_SMALL</b>: A t2.small instance type.</li>
--   <li><b>T2_MEDIUM</b>: A t2.medium instance type.</li>
--   <li><b>R4_LARGE</b>: A r4.large instance type.</li>
--   <li><b>R4_XLARGE</b>: A r4.xlarge instance type.</li>
--   <li><b>R4_2XLARGE</b>: A r4.2xlarge instance type.</li>
--   <li><b>R4_4XLARGE</b>: A r4.4xlarge instance type.</li>
--   <li><b>R4_8XLARGE</b>: A r4.8xlarge instance type.</li>
--   </ul>
--   
--   <a>$sel:transitEncryptionEnabled:ApiCache'</a>,
--   <a>apiCache_transitEncryptionEnabled</a> - Transit encryption flag
--   when connecting to cache. This setting cannot be updated after
--   creation.
--   
--   <a>$sel:apiCachingBehavior:ApiCache'</a>,
--   <a>apiCache_apiCachingBehavior</a> - Caching behavior.
--   
--   <ul>
--   <li><b>FULL_REQUEST_CACHING</b>: All requests are fully cached.</li>
--   <li><b>PER_RESOLVER_CACHING</b>: Individual resolvers that you specify
--   are cached.</li>
--   </ul>
newApiCache :: ApiCache

-- | The cache instance status.
--   
--   <ul>
--   <li><b>AVAILABLE</b>: The instance is available for use.</li>
--   <li><b>CREATING</b>: The instance is currently creating.</li>
--   <li><b>DELETING</b>: The instance is currently deleting.</li>
--   <li><b>MODIFYING</b>: The instance is currently modifying.</li>
--   <li><b>FAILED</b>: The instance has failed creation.</li>
--   </ul>
apiCache_status :: Lens' ApiCache (Maybe ApiCacheStatus)

-- | At rest encryption flag for cache. This setting cannot be updated
--   after creation.
apiCache_atRestEncryptionEnabled :: Lens' ApiCache (Maybe Bool)

-- | TTL in seconds for cache entries.
--   
--   Valid values are between 1 and 3600 seconds.
apiCache_ttl :: Lens' ApiCache (Maybe Integer)

-- | The cache instance type. Valid values are
--   
--   <ul>
--   <li><pre>SMALL</pre></li>
--   <li><pre>MEDIUM</pre></li>
--   <li><pre>LARGE</pre></li>
--   <li><pre>XLARGE</pre></li>
--   <li><pre>LARGE_2X</pre></li>
--   <li><pre>LARGE_4X</pre></li>
--   <li><tt>LARGE_8X</tt> (not available in all regions)</li>
--   <li><pre>LARGE_12X</pre></li>
--   </ul>
--   
--   Historically, instance types were identified by an EC2-style value. As
--   of July 2020, this is deprecated, and the generic identifiers above
--   should be used.
--   
--   The following legacy instance types are available, but their use is
--   discouraged:
--   
--   <ul>
--   <li><b>T2_SMALL</b>: A t2.small instance type.</li>
--   <li><b>T2_MEDIUM</b>: A t2.medium instance type.</li>
--   <li><b>R4_LARGE</b>: A r4.large instance type.</li>
--   <li><b>R4_XLARGE</b>: A r4.xlarge instance type.</li>
--   <li><b>R4_2XLARGE</b>: A r4.2xlarge instance type.</li>
--   <li><b>R4_4XLARGE</b>: A r4.4xlarge instance type.</li>
--   <li><b>R4_8XLARGE</b>: A r4.8xlarge instance type.</li>
--   </ul>
apiCache_type :: Lens' ApiCache (Maybe ApiCacheType)

-- | Transit encryption flag when connecting to cache. This setting cannot
--   be updated after creation.
apiCache_transitEncryptionEnabled :: Lens' ApiCache (Maybe Bool)

-- | Caching behavior.
--   
--   <ul>
--   <li><b>FULL_REQUEST_CACHING</b>: All requests are fully cached.</li>
--   <li><b>PER_RESOLVER_CACHING</b>: Individual resolvers that you specify
--   are cached.</li>
--   </ul>
apiCache_apiCachingBehavior :: Lens' ApiCache (Maybe ApiCachingBehavior)

-- | Describes an API key.
--   
--   Customers invoke AppSync GraphQL API operations with API keys as an
--   identity mechanism. There are two key versions:
--   
--   <b>da1</b>: This version was introduced at launch in November 2017.
--   These keys always expire after 7 days. Key expiration is managed by
--   Amazon DynamoDB TTL. The keys ceased to be valid after February 21,
--   2018 and should not be used after that date.
--   
--   <ul>
--   <li><tt>ListApiKeys</tt> returns the expiration time in
--   milliseconds.</li>
--   <li><tt>CreateApiKey</tt> returns the expiration time in
--   milliseconds.</li>
--   <li><tt>UpdateApiKey</tt> is not available for this key version.</li>
--   <li><tt>DeleteApiKey</tt> deletes the item from the table.</li>
--   <li>Expiration is stored in Amazon DynamoDB as milliseconds. This
--   results in a bug where keys are not automatically deleted because
--   DynamoDB expects the TTL to be stored in seconds. As a one-time
--   action, we will delete these keys from the table after February 21,
--   2018.</li>
--   </ul>
--   
--   <b>da2</b>: This version was introduced in February 2018 when AppSync
--   added support to extend key expiration.
--   
--   <ul>
--   <li><tt>ListApiKeys</tt> returns the expiration time and deletion time
--   in seconds.</li>
--   <li><tt>CreateApiKey</tt> returns the expiration time and deletion
--   time in seconds and accepts a user-provided expiration time in
--   seconds.</li>
--   <li><tt>UpdateApiKey</tt> returns the expiration time and and deletion
--   time in seconds and accepts a user-provided expiration time in
--   seconds. Expired API keys are kept for 60 days after the expiration
--   time. Key expiration time can be updated while the key is not
--   deleted.</li>
--   <li><tt>DeleteApiKey</tt> deletes the item from the table.</li>
--   <li>Expiration is stored in Amazon DynamoDB as seconds. After the
--   expiration time, using the key to authenticate will fail. But the key
--   can be reinstated before deletion.</li>
--   <li>Deletion is stored in Amazon DynamoDB as seconds. The key will be
--   deleted after deletion time.</li>
--   </ul>
--   
--   <i>See:</i> <a>newApiKey</a> smart constructor.
data ApiKey
ApiKey' :: Maybe Text -> Maybe Integer -> Maybe Text -> Maybe Integer -> ApiKey

-- | The API key ID.
[$sel:id:ApiKey'] :: ApiKey -> Maybe Text

-- | The time after which the API key is deleted. The date is represented
--   as seconds since the epoch, rounded down to the nearest hour.
[$sel:deletes:ApiKey'] :: ApiKey -> Maybe Integer

-- | A description of the purpose of the API key.
[$sel:description:ApiKey'] :: ApiKey -> Maybe Text

-- | The time after which the API key expires. The date is represented as
--   seconds since the epoch, rounded down to the nearest hour.
[$sel:expires:ApiKey'] :: ApiKey -> Maybe Integer

-- | Create a value of <a>ApiKey</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:id:ApiKey'</a>, <a>apiKey_id</a> - The API key ID.
--   
--   <a>$sel:deletes:ApiKey'</a>, <a>apiKey_deletes</a> - The time after
--   which the API key is deleted. The date is represented as seconds since
--   the epoch, rounded down to the nearest hour.
--   
--   <a>$sel:description:ApiKey'</a>, <a>apiKey_description</a> - A
--   description of the purpose of the API key.
--   
--   <a>$sel:expires:ApiKey'</a>, <a>apiKey_expires</a> - The time after
--   which the API key expires. The date is represented as seconds since
--   the epoch, rounded down to the nearest hour.
newApiKey :: ApiKey

-- | The API key ID.
apiKey_id :: Lens' ApiKey (Maybe Text)

-- | The time after which the API key is deleted. The date is represented
--   as seconds since the epoch, rounded down to the nearest hour.
apiKey_deletes :: Lens' ApiKey (Maybe Integer)

-- | A description of the purpose of the API key.
apiKey_description :: Lens' ApiKey (Maybe Text)

-- | The time after which the API key expires. The date is represented as
--   seconds since the epoch, rounded down to the nearest hour.
apiKey_expires :: Lens' ApiKey (Maybe Integer)

-- | The authorization config in case the HTTP endpoint requires
--   authorization.
--   
--   <i>See:</i> <a>newAuthorizationConfig</a> smart constructor.
data AuthorizationConfig
AuthorizationConfig' :: Maybe AwsIamConfig -> AuthorizationType -> AuthorizationConfig

-- | The Identity and Access Management settings.
[$sel:awsIamConfig:AuthorizationConfig'] :: AuthorizationConfig -> Maybe AwsIamConfig

-- | The authorization type required by the HTTP endpoint.
--   
--   <ul>
--   <li><b>AWS_IAM</b>: The authorization type is Sigv4.</li>
--   </ul>
[$sel:authorizationType:AuthorizationConfig'] :: AuthorizationConfig -> AuthorizationType

-- | Create a value of <a>AuthorizationConfig</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:awsIamConfig:AuthorizationConfig'</a>,
--   <a>authorizationConfig_awsIamConfig</a> - The Identity and Access
--   Management settings.
--   
--   <a>$sel:authorizationType:AuthorizationConfig'</a>,
--   <a>authorizationConfig_authorizationType</a> - The authorization type
--   required by the HTTP endpoint.
--   
--   <ul>
--   <li><b>AWS_IAM</b>: The authorization type is Sigv4.</li>
--   </ul>
newAuthorizationConfig :: AuthorizationType -> AuthorizationConfig

-- | The Identity and Access Management settings.
authorizationConfig_awsIamConfig :: Lens' AuthorizationConfig (Maybe AwsIamConfig)

-- | The authorization type required by the HTTP endpoint.
--   
--   <ul>
--   <li><b>AWS_IAM</b>: The authorization type is Sigv4.</li>
--   </ul>
authorizationConfig_authorizationType :: Lens' AuthorizationConfig AuthorizationType

-- | The Identity and Access Management configuration.
--   
--   <i>See:</i> <a>newAwsIamConfig</a> smart constructor.
data AwsIamConfig
AwsIamConfig' :: Maybe Text -> Maybe Text -> AwsIamConfig

-- | The signing service name for Identity and Access Management
--   authorization.
[$sel:signingServiceName:AwsIamConfig'] :: AwsIamConfig -> Maybe Text

-- | The signing region for Identity and Access Management authorization.
[$sel:signingRegion:AwsIamConfig'] :: AwsIamConfig -> Maybe Text

-- | Create a value of <a>AwsIamConfig</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:signingServiceName:AwsIamConfig'</a>,
--   <a>awsIamConfig_signingServiceName</a> - The signing service name for
--   Identity and Access Management authorization.
--   
--   <a>$sel:signingRegion:AwsIamConfig'</a>,
--   <a>awsIamConfig_signingRegion</a> - The signing region for Identity
--   and Access Management authorization.
newAwsIamConfig :: AwsIamConfig

-- | The signing service name for Identity and Access Management
--   authorization.
awsIamConfig_signingServiceName :: Lens' AwsIamConfig (Maybe Text)

-- | The signing region for Identity and Access Management authorization.
awsIamConfig_signingRegion :: Lens' AwsIamConfig (Maybe Text)

-- | The caching configuration for a resolver that has caching enabled.
--   
--   <i>See:</i> <a>newCachingConfig</a> smart constructor.
data CachingConfig
CachingConfig' :: Maybe Integer -> Maybe [Text] -> CachingConfig

-- | The TTL in seconds for a resolver that has caching enabled.
--   
--   Valid values are between 1 and 3600 seconds.
[$sel:ttl:CachingConfig'] :: CachingConfig -> Maybe Integer

-- | The caching keys for a resolver that has caching enabled.
--   
--   Valid values are entries from the <tt>$context.arguments</tt>,
--   <tt>$context.source</tt>, and <tt>$context.identity</tt> maps.
[$sel:cachingKeys:CachingConfig'] :: CachingConfig -> Maybe [Text]

-- | Create a value of <a>CachingConfig</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:ttl:CachingConfig'</a>, <a>cachingConfig_ttl</a> - The TTL in
--   seconds for a resolver that has caching enabled.
--   
--   Valid values are between 1 and 3600 seconds.
--   
--   <a>$sel:cachingKeys:CachingConfig'</a>,
--   <a>cachingConfig_cachingKeys</a> - The caching keys for a resolver
--   that has caching enabled.
--   
--   Valid values are entries from the <tt>$context.arguments</tt>,
--   <tt>$context.source</tt>, and <tt>$context.identity</tt> maps.
newCachingConfig :: CachingConfig

-- | The TTL in seconds for a resolver that has caching enabled.
--   
--   Valid values are between 1 and 3600 seconds.
cachingConfig_ttl :: Lens' CachingConfig (Maybe Integer)

-- | The caching keys for a resolver that has caching enabled.
--   
--   Valid values are entries from the <tt>$context.arguments</tt>,
--   <tt>$context.source</tt>, and <tt>$context.identity</tt> maps.
cachingConfig_cachingKeys :: Lens' CachingConfig (Maybe [Text])

-- | Describes an Amazon Cognito user pool configuration.
--   
--   <i>See:</i> <a>newCognitoUserPoolConfig</a> smart constructor.
data CognitoUserPoolConfig
CognitoUserPoolConfig' :: Maybe Text -> Text -> Text -> CognitoUserPoolConfig

-- | A regular expression for validating the incoming Amazon Cognito user
--   pool app client ID.
[$sel:appIdClientRegex:CognitoUserPoolConfig'] :: CognitoUserPoolConfig -> Maybe Text

-- | The user pool ID.
[$sel:userPoolId:CognitoUserPoolConfig'] :: CognitoUserPoolConfig -> Text

-- | The Amazon Web Services Region in which the user pool was created.
[$sel:awsRegion:CognitoUserPoolConfig'] :: CognitoUserPoolConfig -> Text

-- | Create a value of <a>CognitoUserPoolConfig</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:appIdClientRegex:CognitoUserPoolConfig'</a>,
--   <a>cognitoUserPoolConfig_appIdClientRegex</a> - A regular expression
--   for validating the incoming Amazon Cognito user pool app client ID.
--   
--   <a>$sel:userPoolId:CognitoUserPoolConfig'</a>,
--   <a>cognitoUserPoolConfig_userPoolId</a> - The user pool ID.
--   
--   <a>$sel:awsRegion:CognitoUserPoolConfig'</a>,
--   <a>cognitoUserPoolConfig_awsRegion</a> - The Amazon Web Services
--   Region in which the user pool was created.
newCognitoUserPoolConfig :: Text -> Text -> CognitoUserPoolConfig

-- | A regular expression for validating the incoming Amazon Cognito user
--   pool app client ID.
cognitoUserPoolConfig_appIdClientRegex :: Lens' CognitoUserPoolConfig (Maybe Text)

-- | The user pool ID.
cognitoUserPoolConfig_userPoolId :: Lens' CognitoUserPoolConfig Text

-- | The Amazon Web Services Region in which the user pool was created.
cognitoUserPoolConfig_awsRegion :: Lens' CognitoUserPoolConfig Text

-- | Describes a data source.
--   
--   <i>See:</i> <a>newDataSource</a> smart constructor.
data DataSource
DataSource' :: Maybe Text -> Maybe RelationalDatabaseDataSourceConfig -> Maybe ElasticsearchDataSourceConfig -> Maybe LambdaDataSourceConfig -> Maybe Text -> Maybe DynamodbDataSourceConfig -> Maybe Text -> Maybe Text -> Maybe DataSourceType -> Maybe OpenSearchServiceDataSourceConfig -> Maybe HttpDataSourceConfig -> DataSource

-- | The Identity and Access Management service role ARN for the data
--   source. The system assumes this role when accessing the data source.
[$sel:serviceRoleArn:DataSource'] :: DataSource -> Maybe Text

-- | Relational database settings.
[$sel:relationalDatabaseConfig:DataSource'] :: DataSource -> Maybe RelationalDatabaseDataSourceConfig

-- | Amazon OpenSearch Service settings.
[$sel:elasticsearchConfig:DataSource'] :: DataSource -> Maybe ElasticsearchDataSourceConfig

-- | Amazon Web Services Lambda settings.
[$sel:lambdaConfig:DataSource'] :: DataSource -> Maybe LambdaDataSourceConfig

-- | The name of the data source.
[$sel:name:DataSource'] :: DataSource -> Maybe Text

-- | Amazon DynamoDB settings.
[$sel:dynamodbConfig:DataSource'] :: DataSource -> Maybe DynamodbDataSourceConfig

-- | The description of the data source.
[$sel:description:DataSource'] :: DataSource -> Maybe Text

-- | The data source ARN.
[$sel:dataSourceArn:DataSource'] :: DataSource -> Maybe Text

-- | The type of the data source.
--   
--   <ul>
--   <li><b>AWS_LAMBDA</b>: The data source is an Amazon Web Services
--   Lambda function.</li>
--   <li><b>AMAZON_DYNAMODB</b>: The data source is an Amazon DynamoDB
--   table.</li>
--   <li><b>AMAZON_ELASTICSEARCH</b>: The data source is an Amazon
--   OpenSearch Service domain.</li>
--   <li><b>AMAZON_OPENSEARCH_SERVICE</b>: The data source is an Amazon
--   OpenSearch Service domain.</li>
--   <li><b>NONE</b>: There is no data source. This type is used when you
--   wish to invoke a GraphQL operation without connecting to a data
--   source, such as performing data transformation with resolvers or
--   triggering a subscription to be invoked from a mutation.</li>
--   <li><b>HTTP</b>: The data source is an HTTP endpoint.</li>
--   <li><b>RELATIONAL_DATABASE</b>: The data source is a relational
--   database.</li>
--   </ul>
[$sel:type':DataSource'] :: DataSource -> Maybe DataSourceType

-- | Amazon OpenSearch Service settings.
[$sel:openSearchServiceConfig:DataSource'] :: DataSource -> Maybe OpenSearchServiceDataSourceConfig

-- | HTTP endpoint settings.
[$sel:httpConfig:DataSource'] :: DataSource -> Maybe HttpDataSourceConfig

-- | Create a value of <a>DataSource</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:serviceRoleArn:DataSource'</a>,
--   <a>dataSource_serviceRoleArn</a> - The Identity and Access Management
--   service role ARN for the data source. The system assumes this role
--   when accessing the data source.
--   
--   <a>$sel:relationalDatabaseConfig:DataSource'</a>,
--   <a>dataSource_relationalDatabaseConfig</a> - Relational database
--   settings.
--   
--   <a>$sel:elasticsearchConfig:DataSource'</a>,
--   <a>dataSource_elasticsearchConfig</a> - Amazon OpenSearch Service
--   settings.
--   
--   <a>$sel:lambdaConfig:DataSource'</a>, <a>dataSource_lambdaConfig</a> -
--   Amazon Web Services Lambda settings.
--   
--   <a>$sel:name:DataSource'</a>, <a>dataSource_name</a> - The name of the
--   data source.
--   
--   <a>$sel:dynamodbConfig:DataSource'</a>,
--   <a>dataSource_dynamodbConfig</a> - Amazon DynamoDB settings.
--   
--   <a>$sel:description:DataSource'</a>, <a>dataSource_description</a> -
--   The description of the data source.
--   
--   <a>$sel:dataSourceArn:DataSource'</a>, <a>dataSource_dataSourceArn</a>
--   - The data source ARN.
--   
--   <a>$sel:type':DataSource'</a>, <a>dataSource_type</a> - The type of
--   the data source.
--   
--   <ul>
--   <li><b>AWS_LAMBDA</b>: The data source is an Amazon Web Services
--   Lambda function.</li>
--   <li><b>AMAZON_DYNAMODB</b>: The data source is an Amazon DynamoDB
--   table.</li>
--   <li><b>AMAZON_ELASTICSEARCH</b>: The data source is an Amazon
--   OpenSearch Service domain.</li>
--   <li><b>AMAZON_OPENSEARCH_SERVICE</b>: The data source is an Amazon
--   OpenSearch Service domain.</li>
--   <li><b>NONE</b>: There is no data source. This type is used when you
--   wish to invoke a GraphQL operation without connecting to a data
--   source, such as performing data transformation with resolvers or
--   triggering a subscription to be invoked from a mutation.</li>
--   <li><b>HTTP</b>: The data source is an HTTP endpoint.</li>
--   <li><b>RELATIONAL_DATABASE</b>: The data source is a relational
--   database.</li>
--   </ul>
--   
--   <a>$sel:openSearchServiceConfig:DataSource'</a>,
--   <a>dataSource_openSearchServiceConfig</a> - Amazon OpenSearch Service
--   settings.
--   
--   <a>$sel:httpConfig:DataSource'</a>, <a>dataSource_httpConfig</a> -
--   HTTP endpoint settings.
newDataSource :: DataSource

-- | The Identity and Access Management service role ARN for the data
--   source. The system assumes this role when accessing the data source.
dataSource_serviceRoleArn :: Lens' DataSource (Maybe Text)

-- | Relational database settings.
dataSource_relationalDatabaseConfig :: Lens' DataSource (Maybe RelationalDatabaseDataSourceConfig)

-- | Amazon OpenSearch Service settings.
dataSource_elasticsearchConfig :: Lens' DataSource (Maybe ElasticsearchDataSourceConfig)

-- | Amazon Web Services Lambda settings.
dataSource_lambdaConfig :: Lens' DataSource (Maybe LambdaDataSourceConfig)

-- | The name of the data source.
dataSource_name :: Lens' DataSource (Maybe Text)

-- | Amazon DynamoDB settings.
dataSource_dynamodbConfig :: Lens' DataSource (Maybe DynamodbDataSourceConfig)

-- | The description of the data source.
dataSource_description :: Lens' DataSource (Maybe Text)

-- | The data source ARN.
dataSource_dataSourceArn :: Lens' DataSource (Maybe Text)

-- | The type of the data source.
--   
--   <ul>
--   <li><b>AWS_LAMBDA</b>: The data source is an Amazon Web Services
--   Lambda function.</li>
--   <li><b>AMAZON_DYNAMODB</b>: The data source is an Amazon DynamoDB
--   table.</li>
--   <li><b>AMAZON_ELASTICSEARCH</b>: The data source is an Amazon
--   OpenSearch Service domain.</li>
--   <li><b>AMAZON_OPENSEARCH_SERVICE</b>: The data source is an Amazon
--   OpenSearch Service domain.</li>
--   <li><b>NONE</b>: There is no data source. This type is used when you
--   wish to invoke a GraphQL operation without connecting to a data
--   source, such as performing data transformation with resolvers or
--   triggering a subscription to be invoked from a mutation.</li>
--   <li><b>HTTP</b>: The data source is an HTTP endpoint.</li>
--   <li><b>RELATIONAL_DATABASE</b>: The data source is a relational
--   database.</li>
--   </ul>
dataSource_type :: Lens' DataSource (Maybe DataSourceType)

-- | Amazon OpenSearch Service settings.
dataSource_openSearchServiceConfig :: Lens' DataSource (Maybe OpenSearchServiceDataSourceConfig)

-- | HTTP endpoint settings.
dataSource_httpConfig :: Lens' DataSource (Maybe HttpDataSourceConfig)

-- | Describes a Delta Sync configuration.
--   
--   <i>See:</i> <a>newDeltaSyncConfig</a> smart constructor.
data DeltaSyncConfig
DeltaSyncConfig' :: Maybe Integer -> Maybe Text -> Maybe Integer -> DeltaSyncConfig

-- | The number of minutes an Item is stored in the datasource.
[$sel:baseTableTTL:DeltaSyncConfig'] :: DeltaSyncConfig -> Maybe Integer

-- | The Delta Sync table name.
[$sel:deltaSyncTableName:DeltaSyncConfig'] :: DeltaSyncConfig -> Maybe Text

-- | The number of minutes a Delta Sync log entry is stored in the Delta
--   Sync table.
[$sel:deltaSyncTableTTL:DeltaSyncConfig'] :: DeltaSyncConfig -> Maybe Integer

-- | Create a value of <a>DeltaSyncConfig</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:baseTableTTL:DeltaSyncConfig'</a>,
--   <a>deltaSyncConfig_baseTableTTL</a> - The number of minutes an Item is
--   stored in the datasource.
--   
--   <a>$sel:deltaSyncTableName:DeltaSyncConfig'</a>,
--   <a>deltaSyncConfig_deltaSyncTableName</a> - The Delta Sync table name.
--   
--   <a>$sel:deltaSyncTableTTL:DeltaSyncConfig'</a>,
--   <a>deltaSyncConfig_deltaSyncTableTTL</a> - The number of minutes a
--   Delta Sync log entry is stored in the Delta Sync table.
newDeltaSyncConfig :: DeltaSyncConfig

-- | The number of minutes an Item is stored in the datasource.
deltaSyncConfig_baseTableTTL :: Lens' DeltaSyncConfig (Maybe Integer)

-- | The Delta Sync table name.
deltaSyncConfig_deltaSyncTableName :: Lens' DeltaSyncConfig (Maybe Text)

-- | The number of minutes a Delta Sync log entry is stored in the Delta
--   Sync table.
deltaSyncConfig_deltaSyncTableTTL :: Lens' DeltaSyncConfig (Maybe Integer)

-- | Describes an Amazon DynamoDB data source configuration.
--   
--   <i>See:</i> <a>newDynamodbDataSourceConfig</a> smart constructor.
data DynamodbDataSourceConfig
DynamodbDataSourceConfig' :: Maybe Bool -> Maybe Bool -> Maybe DeltaSyncConfig -> Text -> Text -> DynamodbDataSourceConfig

-- | Set to TRUE to use Amazon Cognito credentials with this data source.
[$sel:useCallerCredentials:DynamodbDataSourceConfig'] :: DynamodbDataSourceConfig -> Maybe Bool

-- | Set to TRUE to use Conflict Detection and Resolution with this data
--   source.
[$sel:versioned:DynamodbDataSourceConfig'] :: DynamodbDataSourceConfig -> Maybe Bool

-- | The <tt>DeltaSyncConfig</tt> for a versioned datasource.
[$sel:deltaSyncConfig:DynamodbDataSourceConfig'] :: DynamodbDataSourceConfig -> Maybe DeltaSyncConfig

-- | The table name.
[$sel:tableName:DynamodbDataSourceConfig'] :: DynamodbDataSourceConfig -> Text

-- | The Amazon Web Services Region.
[$sel:awsRegion:DynamodbDataSourceConfig'] :: DynamodbDataSourceConfig -> Text

-- | Create a value of <a>DynamodbDataSourceConfig</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:useCallerCredentials:DynamodbDataSourceConfig'</a>,
--   <a>dynamodbDataSourceConfig_useCallerCredentials</a> - Set to TRUE to
--   use Amazon Cognito credentials with this data source.
--   
--   <a>$sel:versioned:DynamodbDataSourceConfig'</a>,
--   <a>dynamodbDataSourceConfig_versioned</a> - Set to TRUE to use
--   Conflict Detection and Resolution with this data source.
--   
--   <a>$sel:deltaSyncConfig:DynamodbDataSourceConfig'</a>,
--   <a>dynamodbDataSourceConfig_deltaSyncConfig</a> - The
--   <tt>DeltaSyncConfig</tt> for a versioned datasource.
--   
--   <a>$sel:tableName:DynamodbDataSourceConfig'</a>,
--   <a>dynamodbDataSourceConfig_tableName</a> - The table name.
--   
--   <a>$sel:awsRegion:DynamodbDataSourceConfig'</a>,
--   <a>dynamodbDataSourceConfig_awsRegion</a> - The Amazon Web Services
--   Region.
newDynamodbDataSourceConfig :: Text -> Text -> DynamodbDataSourceConfig

-- | Set to TRUE to use Amazon Cognito credentials with this data source.
dynamodbDataSourceConfig_useCallerCredentials :: Lens' DynamodbDataSourceConfig (Maybe Bool)

-- | Set to TRUE to use Conflict Detection and Resolution with this data
--   source.
dynamodbDataSourceConfig_versioned :: Lens' DynamodbDataSourceConfig (Maybe Bool)

-- | The <tt>DeltaSyncConfig</tt> for a versioned datasource.
dynamodbDataSourceConfig_deltaSyncConfig :: Lens' DynamodbDataSourceConfig (Maybe DeltaSyncConfig)

-- | The table name.
dynamodbDataSourceConfig_tableName :: Lens' DynamodbDataSourceConfig Text

-- | The Amazon Web Services Region.
dynamodbDataSourceConfig_awsRegion :: Lens' DynamodbDataSourceConfig Text

-- | Describes an OpenSearch data source configuration.
--   
--   As of September 2021, Amazon Elasticsearch service is Amazon
--   OpenSearch Service. This configuration is deprecated. For new data
--   sources, use OpenSearchServiceDataSourceConfig to specify an
--   OpenSearch data source.
--   
--   <i>See:</i> <a>newElasticsearchDataSourceConfig</a> smart constructor.
data ElasticsearchDataSourceConfig
ElasticsearchDataSourceConfig' :: Text -> Text -> ElasticsearchDataSourceConfig

-- | The endpoint.
[$sel:endpoint:ElasticsearchDataSourceConfig'] :: ElasticsearchDataSourceConfig -> Text

-- | The Amazon Web Services Region.
[$sel:awsRegion:ElasticsearchDataSourceConfig'] :: ElasticsearchDataSourceConfig -> Text

-- | Create a value of <a>ElasticsearchDataSourceConfig</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:endpoint:ElasticsearchDataSourceConfig'</a>,
--   <a>elasticsearchDataSourceConfig_endpoint</a> - The endpoint.
--   
--   <a>$sel:awsRegion:ElasticsearchDataSourceConfig'</a>,
--   <a>elasticsearchDataSourceConfig_awsRegion</a> - The Amazon Web
--   Services Region.
newElasticsearchDataSourceConfig :: Text -> Text -> ElasticsearchDataSourceConfig

-- | The endpoint.
elasticsearchDataSourceConfig_endpoint :: Lens' ElasticsearchDataSourceConfig Text

-- | The Amazon Web Services Region.
elasticsearchDataSourceConfig_awsRegion :: Lens' ElasticsearchDataSourceConfig Text

-- | A function is a reusable entity. Multiple functions can be used to
--   compose the resolver logic.
--   
--   <i>See:</i> <a>newFunctionConfiguration</a> smart constructor.
data FunctionConfiguration
FunctionConfiguration' :: Maybe Text -> Maybe Text -> Maybe SyncConfig -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> FunctionConfiguration

-- | The <tt>Function</tt> response mapping template.
[$sel:responseMappingTemplate:FunctionConfiguration'] :: FunctionConfiguration -> Maybe Text

-- | The version of the request mapping template. Currently only the
--   2018-05-29 version of the template is supported.
[$sel:functionVersion:FunctionConfiguration'] :: FunctionConfiguration -> Maybe Text
[$sel:syncConfig:FunctionConfiguration'] :: FunctionConfiguration -> Maybe SyncConfig

-- | The name of the <tt>DataSource</tt>.
[$sel:dataSourceName:FunctionConfiguration'] :: FunctionConfiguration -> Maybe Text

-- | The ARN of the <tt>Function</tt> object.
[$sel:functionArn:FunctionConfiguration'] :: FunctionConfiguration -> Maybe Text

-- | The name of the <tt>Function</tt> object.
[$sel:name:FunctionConfiguration'] :: FunctionConfiguration -> Maybe Text

-- | A unique ID representing the <tt>Function</tt> object.
[$sel:functionId:FunctionConfiguration'] :: FunctionConfiguration -> Maybe Text

-- | The <tt>Function</tt> description.
[$sel:description:FunctionConfiguration'] :: FunctionConfiguration -> Maybe Text

-- | The <tt>Function</tt> request mapping template. Functions support only
--   the 2018-05-29 version of the request mapping template.
[$sel:requestMappingTemplate:FunctionConfiguration'] :: FunctionConfiguration -> Maybe Text

-- | Create a value of <a>FunctionConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:responseMappingTemplate:FunctionConfiguration'</a>,
--   <a>functionConfiguration_responseMappingTemplate</a> - The
--   <tt>Function</tt> response mapping template.
--   
--   <a>$sel:functionVersion:FunctionConfiguration'</a>,
--   <a>functionConfiguration_functionVersion</a> - The version of the
--   request mapping template. Currently only the 2018-05-29 version of the
--   template is supported.
--   
--   <a>$sel:syncConfig:FunctionConfiguration'</a>,
--   <a>functionConfiguration_syncConfig</a> - Undocumented member.
--   
--   <a>$sel:dataSourceName:FunctionConfiguration'</a>,
--   <a>functionConfiguration_dataSourceName</a> - The name of the
--   <tt>DataSource</tt>.
--   
--   <a>$sel:functionArn:FunctionConfiguration'</a>,
--   <a>functionConfiguration_functionArn</a> - The ARN of the
--   <tt>Function</tt> object.
--   
--   <a>$sel:name:FunctionConfiguration'</a>,
--   <a>functionConfiguration_name</a> - The name of the <tt>Function</tt>
--   object.
--   
--   <a>$sel:functionId:FunctionConfiguration'</a>,
--   <a>functionConfiguration_functionId</a> - A unique ID representing the
--   <tt>Function</tt> object.
--   
--   <a>$sel:description:FunctionConfiguration'</a>,
--   <a>functionConfiguration_description</a> - The <tt>Function</tt>
--   description.
--   
--   <a>$sel:requestMappingTemplate:FunctionConfiguration'</a>,
--   <a>functionConfiguration_requestMappingTemplate</a> - The
--   <tt>Function</tt> request mapping template. Functions support only the
--   2018-05-29 version of the request mapping template.
newFunctionConfiguration :: FunctionConfiguration

-- | The <tt>Function</tt> response mapping template.
functionConfiguration_responseMappingTemplate :: Lens' FunctionConfiguration (Maybe Text)

-- | The version of the request mapping template. Currently only the
--   2018-05-29 version of the template is supported.
functionConfiguration_functionVersion :: Lens' FunctionConfiguration (Maybe Text)

-- | Undocumented member.
functionConfiguration_syncConfig :: Lens' FunctionConfiguration (Maybe SyncConfig)

-- | The name of the <tt>DataSource</tt>.
functionConfiguration_dataSourceName :: Lens' FunctionConfiguration (Maybe Text)

-- | The ARN of the <tt>Function</tt> object.
functionConfiguration_functionArn :: Lens' FunctionConfiguration (Maybe Text)

-- | The name of the <tt>Function</tt> object.
functionConfiguration_name :: Lens' FunctionConfiguration (Maybe Text)

-- | A unique ID representing the <tt>Function</tt> object.
functionConfiguration_functionId :: Lens' FunctionConfiguration (Maybe Text)

-- | The <tt>Function</tt> description.
functionConfiguration_description :: Lens' FunctionConfiguration (Maybe Text)

-- | The <tt>Function</tt> request mapping template. Functions support only
--   the 2018-05-29 version of the request mapping template.
functionConfiguration_requestMappingTemplate :: Lens' FunctionConfiguration (Maybe Text)

-- | Describes a GraphQL API.
--   
--   <i>See:</i> <a>newGraphqlApi</a> smart constructor.
data GraphqlApi
GraphqlApi' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe OpenIDConnectConfig -> Maybe UserPoolConfig -> Maybe Bool -> Maybe Text -> Maybe LambdaAuthorizerConfig -> Maybe (HashMap Text Text) -> Maybe LogConfig -> Maybe [AdditionalAuthenticationProvider] -> Maybe AuthenticationType -> Maybe (HashMap Text Text) -> GraphqlApi

-- | The ARN of the WAF ACL associated with this <tt>GraphqlApi</tt>, if
--   one exists.
[$sel:wafWebAclArn:GraphqlApi'] :: GraphqlApi -> Maybe Text

-- | The API ID.
[$sel:apiId:GraphqlApi'] :: GraphqlApi -> Maybe Text

-- | The ARN.
[$sel:arn:GraphqlApi'] :: GraphqlApi -> Maybe Text

-- | The OpenID Connect configuration.
[$sel:openIDConnectConfig:GraphqlApi'] :: GraphqlApi -> Maybe OpenIDConnectConfig

-- | The Amazon Cognito user pool configuration.
[$sel:userPoolConfig:GraphqlApi'] :: GraphqlApi -> Maybe UserPoolConfig

-- | A flag representing whether X-Ray tracing is enabled for this
--   <tt>GraphqlApi</tt>.
[$sel:xrayEnabled:GraphqlApi'] :: GraphqlApi -> Maybe Bool

-- | The API name.
[$sel:name:GraphqlApi'] :: GraphqlApi -> Maybe Text

-- | Configuration for Amazon Web Services Lambda function authorization.
[$sel:lambdaAuthorizerConfig:GraphqlApi'] :: GraphqlApi -> Maybe LambdaAuthorizerConfig

-- | The tags.
[$sel:tags:GraphqlApi'] :: GraphqlApi -> Maybe (HashMap Text Text)

-- | The Amazon CloudWatch Logs configuration.
[$sel:logConfig:GraphqlApi'] :: GraphqlApi -> Maybe LogConfig

-- | A list of additional authentication providers for the
--   <tt>GraphqlApi</tt> API.
[$sel:additionalAuthenticationProviders:GraphqlApi'] :: GraphqlApi -> Maybe [AdditionalAuthenticationProvider]

-- | The authentication type.
[$sel:authenticationType:GraphqlApi'] :: GraphqlApi -> Maybe AuthenticationType

-- | The URIs.
[$sel:uris:GraphqlApi'] :: GraphqlApi -> Maybe (HashMap Text Text)

-- | Create a value of <a>GraphqlApi</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:wafWebAclArn:GraphqlApi'</a>, <a>graphqlApi_wafWebAclArn</a> -
--   The ARN of the WAF ACL associated with this <tt>GraphqlApi</tt>, if
--   one exists.
--   
--   <a>$sel:apiId:GraphqlApi'</a>, <a>graphqlApi_apiId</a> - The API ID.
--   
--   <a>$sel:arn:GraphqlApi'</a>, <a>graphqlApi_arn</a> - The ARN.
--   
--   <a>$sel:openIDConnectConfig:GraphqlApi'</a>,
--   <a>graphqlApi_openIDConnectConfig</a> - The OpenID Connect
--   configuration.
--   
--   <a>$sel:userPoolConfig:GraphqlApi'</a>,
--   <a>graphqlApi_userPoolConfig</a> - The Amazon Cognito user pool
--   configuration.
--   
--   <a>$sel:xrayEnabled:GraphqlApi'</a>, <a>graphqlApi_xrayEnabled</a> - A
--   flag representing whether X-Ray tracing is enabled for this
--   <tt>GraphqlApi</tt>.
--   
--   <a>$sel:name:GraphqlApi'</a>, <a>graphqlApi_name</a> - The API name.
--   
--   <a>$sel:lambdaAuthorizerConfig:GraphqlApi'</a>,
--   <a>graphqlApi_lambdaAuthorizerConfig</a> - Configuration for Amazon
--   Web Services Lambda function authorization.
--   
--   <a>$sel:tags:GraphqlApi'</a>, <a>graphqlApi_tags</a> - The tags.
--   
--   <a>$sel:logConfig:GraphqlApi'</a>, <a>graphqlApi_logConfig</a> - The
--   Amazon CloudWatch Logs configuration.
--   
--   <a>$sel:additionalAuthenticationProviders:GraphqlApi'</a>,
--   <a>graphqlApi_additionalAuthenticationProviders</a> - A list of
--   additional authentication providers for the <tt>GraphqlApi</tt> API.
--   
--   <a>$sel:authenticationType:GraphqlApi'</a>,
--   <a>graphqlApi_authenticationType</a> - The authentication type.
--   
--   <a>$sel:uris:GraphqlApi'</a>, <a>graphqlApi_uris</a> - The URIs.
newGraphqlApi :: GraphqlApi

-- | The ARN of the WAF ACL associated with this <tt>GraphqlApi</tt>, if
--   one exists.
graphqlApi_wafWebAclArn :: Lens' GraphqlApi (Maybe Text)

-- | The API ID.
graphqlApi_apiId :: Lens' GraphqlApi (Maybe Text)

-- | The ARN.
graphqlApi_arn :: Lens' GraphqlApi (Maybe Text)

-- | The OpenID Connect configuration.
graphqlApi_openIDConnectConfig :: Lens' GraphqlApi (Maybe OpenIDConnectConfig)

-- | The Amazon Cognito user pool configuration.
graphqlApi_userPoolConfig :: Lens' GraphqlApi (Maybe UserPoolConfig)

-- | A flag representing whether X-Ray tracing is enabled for this
--   <tt>GraphqlApi</tt>.
graphqlApi_xrayEnabled :: Lens' GraphqlApi (Maybe Bool)

-- | The API name.
graphqlApi_name :: Lens' GraphqlApi (Maybe Text)

-- | Configuration for Amazon Web Services Lambda function authorization.
graphqlApi_lambdaAuthorizerConfig :: Lens' GraphqlApi (Maybe LambdaAuthorizerConfig)

-- | The tags.
graphqlApi_tags :: Lens' GraphqlApi (Maybe (HashMap Text Text))

-- | The Amazon CloudWatch Logs configuration.
graphqlApi_logConfig :: Lens' GraphqlApi (Maybe LogConfig)

-- | A list of additional authentication providers for the
--   <tt>GraphqlApi</tt> API.
graphqlApi_additionalAuthenticationProviders :: Lens' GraphqlApi (Maybe [AdditionalAuthenticationProvider])

-- | The authentication type.
graphqlApi_authenticationType :: Lens' GraphqlApi (Maybe AuthenticationType)

-- | The URIs.
graphqlApi_uris :: Lens' GraphqlApi (Maybe (HashMap Text Text))

-- | Describes an HTTP data source configuration.
--   
--   <i>See:</i> <a>newHttpDataSourceConfig</a> smart constructor.
data HttpDataSourceConfig
HttpDataSourceConfig' :: Maybe AuthorizationConfig -> Maybe Text -> HttpDataSourceConfig

-- | The authorization config in case the HTTP endpoint requires
--   authorization.
[$sel:authorizationConfig:HttpDataSourceConfig'] :: HttpDataSourceConfig -> Maybe AuthorizationConfig

-- | The HTTP URL endpoint. You can either specify the domain name or IP,
--   and port combination, and the URL scheme must be HTTP or HTTPS. If the
--   port is not specified, AppSync uses the default port 80 for the HTTP
--   endpoint and port 443 for HTTPS endpoints.
[$sel:endpoint:HttpDataSourceConfig'] :: HttpDataSourceConfig -> Maybe Text

-- | Create a value of <a>HttpDataSourceConfig</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:authorizationConfig:HttpDataSourceConfig'</a>,
--   <a>httpDataSourceConfig_authorizationConfig</a> - The authorization
--   config in case the HTTP endpoint requires authorization.
--   
--   <a>$sel:endpoint:HttpDataSourceConfig'</a>,
--   <a>httpDataSourceConfig_endpoint</a> - The HTTP URL endpoint. You can
--   either specify the domain name or IP, and port combination, and the
--   URL scheme must be HTTP or HTTPS. If the port is not specified,
--   AppSync uses the default port 80 for the HTTP endpoint and port 443
--   for HTTPS endpoints.
newHttpDataSourceConfig :: HttpDataSourceConfig

-- | The authorization config in case the HTTP endpoint requires
--   authorization.
httpDataSourceConfig_authorizationConfig :: Lens' HttpDataSourceConfig (Maybe AuthorizationConfig)

-- | The HTTP URL endpoint. You can either specify the domain name or IP,
--   and port combination, and the URL scheme must be HTTP or HTTPS. If the
--   port is not specified, AppSync uses the default port 80 for the HTTP
--   endpoint and port 443 for HTTPS endpoints.
httpDataSourceConfig_endpoint :: Lens' HttpDataSourceConfig (Maybe Text)

-- | A <tt>LambdaAuthorizerConfig</tt> holds configuration on how to
--   authorize AppSync API access when using the <tt>AWS_LAMBDA</tt>
--   authorizer mode. Be aware that an AppSync API may have only one Lambda
--   authorizer configured at a time.
--   
--   <i>See:</i> <a>newLambdaAuthorizerConfig</a> smart constructor.
data LambdaAuthorizerConfig
LambdaAuthorizerConfig' :: Maybe Text -> Maybe Natural -> Text -> LambdaAuthorizerConfig

-- | A regular expression for validation of tokens before the Lambda
--   function is called.
[$sel:identityValidationExpression:LambdaAuthorizerConfig'] :: LambdaAuthorizerConfig -> Maybe Text

-- | The number of seconds a response should be cached for. The default is
--   5 minutes (300 seconds). The Lambda function can override this by
--   returning a <tt>ttlOverride</tt> key in its response. A value of 0
--   disables caching of responses.
[$sel:authorizerResultTtlInSeconds:LambdaAuthorizerConfig'] :: LambdaAuthorizerConfig -> Maybe Natural

-- | The ARN of the Lambda function to be called for authorization. This
--   may be a standard Lambda ARN, a version ARN (<tt>.../v3</tt>) or alias
--   ARN.
--   
--   <i>Note</i>: This Lambda function must have the following
--   resource-based policy assigned to it. When configuring Lambda
--   authorizers in the Console, this is done for you. To do so with the
--   Amazon Web Services CLI, run the following:
--   
--   <pre>
--   aws lambda add-permission --function-name "arn:aws:lambda:us-east-2:111122223333:function:my-function" --statement-id "appsync" --principal appsync.amazonaws.com --action lambda:InvokeFunction
--   </pre>
[$sel:authorizerUri:LambdaAuthorizerConfig'] :: LambdaAuthorizerConfig -> Text

-- | Create a value of <a>LambdaAuthorizerConfig</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:identityValidationExpression:LambdaAuthorizerConfig'</a>,
--   <a>lambdaAuthorizerConfig_identityValidationExpression</a> - A regular
--   expression for validation of tokens before the Lambda function is
--   called.
--   
--   <a>$sel:authorizerResultTtlInSeconds:LambdaAuthorizerConfig'</a>,
--   <a>lambdaAuthorizerConfig_authorizerResultTtlInSeconds</a> - The
--   number of seconds a response should be cached for. The default is 5
--   minutes (300 seconds). The Lambda function can override this by
--   returning a <tt>ttlOverride</tt> key in its response. A value of 0
--   disables caching of responses.
--   
--   <a>$sel:authorizerUri:LambdaAuthorizerConfig'</a>,
--   <a>lambdaAuthorizerConfig_authorizerUri</a> - The ARN of the Lambda
--   function to be called for authorization. This may be a standard Lambda
--   ARN, a version ARN (<tt>.../v3</tt>) or alias ARN.
--   
--   <i>Note</i>: This Lambda function must have the following
--   resource-based policy assigned to it. When configuring Lambda
--   authorizers in the Console, this is done for you. To do so with the
--   Amazon Web Services CLI, run the following:
--   
--   <pre>
--   aws lambda add-permission --function-name "arn:aws:lambda:us-east-2:111122223333:function:my-function" --statement-id "appsync" --principal appsync.amazonaws.com --action lambda:InvokeFunction
--   </pre>
newLambdaAuthorizerConfig :: Text -> LambdaAuthorizerConfig

-- | A regular expression for validation of tokens before the Lambda
--   function is called.
lambdaAuthorizerConfig_identityValidationExpression :: Lens' LambdaAuthorizerConfig (Maybe Text)

-- | The number of seconds a response should be cached for. The default is
--   5 minutes (300 seconds). The Lambda function can override this by
--   returning a <tt>ttlOverride</tt> key in its response. A value of 0
--   disables caching of responses.
lambdaAuthorizerConfig_authorizerResultTtlInSeconds :: Lens' LambdaAuthorizerConfig (Maybe Natural)

-- | The ARN of the Lambda function to be called for authorization. This
--   may be a standard Lambda ARN, a version ARN (<tt>.../v3</tt>) or alias
--   ARN.
--   
--   <i>Note</i>: This Lambda function must have the following
--   resource-based policy assigned to it. When configuring Lambda
--   authorizers in the Console, this is done for you. To do so with the
--   Amazon Web Services CLI, run the following:
--   
--   <pre>
--   aws lambda add-permission --function-name "arn:aws:lambda:us-east-2:111122223333:function:my-function" --statement-id "appsync" --principal appsync.amazonaws.com --action lambda:InvokeFunction
--   </pre>
lambdaAuthorizerConfig_authorizerUri :: Lens' LambdaAuthorizerConfig Text

-- | The <tt>LambdaConflictHandlerConfig</tt> object when configuring
--   LAMBDA as the Conflict Handler.
--   
--   <i>See:</i> <a>newLambdaConflictHandlerConfig</a> smart constructor.
data LambdaConflictHandlerConfig
LambdaConflictHandlerConfig' :: Maybe Text -> LambdaConflictHandlerConfig

-- | The Arn for the Lambda function to use as the Conflict Handler.
[$sel:lambdaConflictHandlerArn:LambdaConflictHandlerConfig'] :: LambdaConflictHandlerConfig -> Maybe Text

-- | Create a value of <a>LambdaConflictHandlerConfig</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:lambdaConflictHandlerArn:LambdaConflictHandlerConfig'</a>,
--   <a>lambdaConflictHandlerConfig_lambdaConflictHandlerArn</a> - The Arn
--   for the Lambda function to use as the Conflict Handler.
newLambdaConflictHandlerConfig :: LambdaConflictHandlerConfig

-- | The Arn for the Lambda function to use as the Conflict Handler.
lambdaConflictHandlerConfig_lambdaConflictHandlerArn :: Lens' LambdaConflictHandlerConfig (Maybe Text)

-- | Describes an Amazon Web Services Lambda data source configuration.
--   
--   <i>See:</i> <a>newLambdaDataSourceConfig</a> smart constructor.
data LambdaDataSourceConfig
LambdaDataSourceConfig' :: Text -> LambdaDataSourceConfig

-- | The ARN for the Lambda function.
[$sel:lambdaFunctionArn:LambdaDataSourceConfig'] :: LambdaDataSourceConfig -> Text

-- | Create a value of <a>LambdaDataSourceConfig</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:lambdaFunctionArn:LambdaDataSourceConfig'</a>,
--   <a>lambdaDataSourceConfig_lambdaFunctionArn</a> - The ARN for the
--   Lambda function.
newLambdaDataSourceConfig :: Text -> LambdaDataSourceConfig

-- | The ARN for the Lambda function.
lambdaDataSourceConfig_lambdaFunctionArn :: Lens' LambdaDataSourceConfig Text

-- | The CloudWatch Logs configuration.
--   
--   <i>See:</i> <a>newLogConfig</a> smart constructor.
data LogConfig
LogConfig' :: Maybe Bool -> FieldLogLevel -> Text -> LogConfig

-- | Set to TRUE to exclude sections that contain information such as
--   headers, context, and evaluated mapping templates, regardless of
--   logging level.
[$sel:excludeVerboseContent:LogConfig'] :: LogConfig -> Maybe Bool

-- | The field logging level. Values can be NONE, ERROR, or ALL.
--   
--   <ul>
--   <li><b>NONE</b>: No field-level logs are captured.</li>
--   <li><b>ERROR</b>: Logs the following information only for the fields
--   that are in error:<ul><li>The error section in the server
--   response.</li><li>Field-level errors.</li><li>The generated
--   request/response functions that got resolved for error
--   fields.</li></ul></li>
--   <li><b>ALL</b>: The following information is logged for all fields in
--   the query:<ul><li>Field-level tracing information.</li><li>The
--   generated request/response functions that got resolved for each
--   field.</li></ul></li>
--   </ul>
[$sel:fieldLogLevel:LogConfig'] :: LogConfig -> FieldLogLevel

-- | The service role that AppSync will assume to publish to Amazon
--   CloudWatch logs in your account.
[$sel:cloudWatchLogsRoleArn:LogConfig'] :: LogConfig -> Text

-- | Create a value of <a>LogConfig</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:excludeVerboseContent:LogConfig'</a>,
--   <a>logConfig_excludeVerboseContent</a> - Set to TRUE to exclude
--   sections that contain information such as headers, context, and
--   evaluated mapping templates, regardless of logging level.
--   
--   <a>$sel:fieldLogLevel:LogConfig'</a>, <a>logConfig_fieldLogLevel</a> -
--   The field logging level. Values can be NONE, ERROR, or ALL.
--   
--   <ul>
--   <li><b>NONE</b>: No field-level logs are captured.</li>
--   <li><b>ERROR</b>: Logs the following information only for the fields
--   that are in error:<ul><li>The error section in the server
--   response.</li><li>Field-level errors.</li><li>The generated
--   request/response functions that got resolved for error
--   fields.</li></ul></li>
--   <li><b>ALL</b>: The following information is logged for all fields in
--   the query:<ul><li>Field-level tracing information.</li><li>The
--   generated request/response functions that got resolved for each
--   field.</li></ul></li>
--   </ul>
--   
--   <a>$sel:cloudWatchLogsRoleArn:LogConfig'</a>,
--   <a>logConfig_cloudWatchLogsRoleArn</a> - The service role that AppSync
--   will assume to publish to Amazon CloudWatch logs in your account.
newLogConfig :: FieldLogLevel -> Text -> LogConfig

-- | Set to TRUE to exclude sections that contain information such as
--   headers, context, and evaluated mapping templates, regardless of
--   logging level.
logConfig_excludeVerboseContent :: Lens' LogConfig (Maybe Bool)

-- | The field logging level. Values can be NONE, ERROR, or ALL.
--   
--   <ul>
--   <li><b>NONE</b>: No field-level logs are captured.</li>
--   <li><b>ERROR</b>: Logs the following information only for the fields
--   that are in error:<ul><li>The error section in the server
--   response.</li><li>Field-level errors.</li><li>The generated
--   request/response functions that got resolved for error
--   fields.</li></ul></li>
--   <li><b>ALL</b>: The following information is logged for all fields in
--   the query:<ul><li>Field-level tracing information.</li><li>The
--   generated request/response functions that got resolved for each
--   field.</li></ul></li>
--   </ul>
logConfig_fieldLogLevel :: Lens' LogConfig FieldLogLevel

-- | The service role that AppSync will assume to publish to Amazon
--   CloudWatch logs in your account.
logConfig_cloudWatchLogsRoleArn :: Lens' LogConfig Text

-- | Describes an OpenID Connect configuration.
--   
--   <i>See:</i> <a>newOpenIDConnectConfig</a> smart constructor.
data OpenIDConnectConfig
OpenIDConnectConfig' :: Maybe Text -> Maybe Integer -> Maybe Integer -> Text -> OpenIDConnectConfig

-- | The client identifier of the Relying party at the OpenID identity
--   provider. This identifier is typically obtained when the Relying party
--   is registered with the OpenID identity provider. You can specify a
--   regular expression so the AppSync can validate against multiple client
--   identifiers at a time.
[$sel:clientId:OpenIDConnectConfig'] :: OpenIDConnectConfig -> Maybe Text

-- | The number of milliseconds a token is valid after being authenticated.
[$sel:authTTL:OpenIDConnectConfig'] :: OpenIDConnectConfig -> Maybe Integer

-- | The number of milliseconds a token is valid after being issued to a
--   user.
[$sel:iatTTL:OpenIDConnectConfig'] :: OpenIDConnectConfig -> Maybe Integer

-- | The issuer for the OpenID Connect configuration. The issuer returned
--   by discovery must exactly match the value of <tt>iss</tt> in the ID
--   token.
[$sel:issuer:OpenIDConnectConfig'] :: OpenIDConnectConfig -> Text

-- | Create a value of <a>OpenIDConnectConfig</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:clientId:OpenIDConnectConfig'</a>,
--   <a>openIDConnectConfig_clientId</a> - The client identifier of the
--   Relying party at the OpenID identity provider. This identifier is
--   typically obtained when the Relying party is registered with the
--   OpenID identity provider. You can specify a regular expression so the
--   AppSync can validate against multiple client identifiers at a time.
--   
--   <a>$sel:authTTL:OpenIDConnectConfig'</a>,
--   <a>openIDConnectConfig_authTTL</a> - The number of milliseconds a
--   token is valid after being authenticated.
--   
--   <a>$sel:iatTTL:OpenIDConnectConfig'</a>,
--   <a>openIDConnectConfig_iatTTL</a> - The number of milliseconds a token
--   is valid after being issued to a user.
--   
--   <a>$sel:issuer:OpenIDConnectConfig'</a>,
--   <a>openIDConnectConfig_issuer</a> - The issuer for the OpenID Connect
--   configuration. The issuer returned by discovery must exactly match the
--   value of <tt>iss</tt> in the ID token.
newOpenIDConnectConfig :: Text -> OpenIDConnectConfig

-- | The client identifier of the Relying party at the OpenID identity
--   provider. This identifier is typically obtained when the Relying party
--   is registered with the OpenID identity provider. You can specify a
--   regular expression so the AppSync can validate against multiple client
--   identifiers at a time.
openIDConnectConfig_clientId :: Lens' OpenIDConnectConfig (Maybe Text)

-- | The number of milliseconds a token is valid after being authenticated.
openIDConnectConfig_authTTL :: Lens' OpenIDConnectConfig (Maybe Integer)

-- | The number of milliseconds a token is valid after being issued to a
--   user.
openIDConnectConfig_iatTTL :: Lens' OpenIDConnectConfig (Maybe Integer)

-- | The issuer for the OpenID Connect configuration. The issuer returned
--   by discovery must exactly match the value of <tt>iss</tt> in the ID
--   token.
openIDConnectConfig_issuer :: Lens' OpenIDConnectConfig Text

-- | Describes an OpenSearch data source configuration.
--   
--   <i>See:</i> <a>newOpenSearchServiceDataSourceConfig</a> smart
--   constructor.
data OpenSearchServiceDataSourceConfig
OpenSearchServiceDataSourceConfig' :: Text -> Text -> OpenSearchServiceDataSourceConfig

-- | The endpoint.
[$sel:endpoint:OpenSearchServiceDataSourceConfig'] :: OpenSearchServiceDataSourceConfig -> Text

-- | The Amazon Web Services Region.
[$sel:awsRegion:OpenSearchServiceDataSourceConfig'] :: OpenSearchServiceDataSourceConfig -> Text

-- | Create a value of <a>OpenSearchServiceDataSourceConfig</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:endpoint:OpenSearchServiceDataSourceConfig'</a>,
--   <a>openSearchServiceDataSourceConfig_endpoint</a> - The endpoint.
--   
--   <a>$sel:awsRegion:OpenSearchServiceDataSourceConfig'</a>,
--   <a>openSearchServiceDataSourceConfig_awsRegion</a> - The Amazon Web
--   Services Region.
newOpenSearchServiceDataSourceConfig :: Text -> Text -> OpenSearchServiceDataSourceConfig

-- | The endpoint.
openSearchServiceDataSourceConfig_endpoint :: Lens' OpenSearchServiceDataSourceConfig Text

-- | The Amazon Web Services Region.
openSearchServiceDataSourceConfig_awsRegion :: Lens' OpenSearchServiceDataSourceConfig Text

-- | The pipeline configuration for a resolver of kind <tt>PIPELINE</tt>.
--   
--   <i>See:</i> <a>newPipelineConfig</a> smart constructor.
data PipelineConfig
PipelineConfig' :: Maybe [Text] -> PipelineConfig

-- | A list of <tt>Function</tt> objects.
[$sel:functions:PipelineConfig'] :: PipelineConfig -> Maybe [Text]

-- | Create a value of <a>PipelineConfig</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:functions:PipelineConfig'</a>, <a>pipelineConfig_functions</a>
--   - A list of <tt>Function</tt> objects.
newPipelineConfig :: PipelineConfig

-- | A list of <tt>Function</tt> objects.
pipelineConfig_functions :: Lens' PipelineConfig (Maybe [Text])

-- | The Amazon RDS HTTP endpoint configuration.
--   
--   <i>See:</i> <a>newRdsHttpEndpointConfig</a> smart constructor.
data RdsHttpEndpointConfig
RdsHttpEndpointConfig' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> RdsHttpEndpointConfig

-- | Logical schema name.
[$sel:schema:RdsHttpEndpointConfig'] :: RdsHttpEndpointConfig -> Maybe Text

-- | Amazon Web Services secret store ARN for database credentials.
[$sel:awsSecretStoreArn:RdsHttpEndpointConfig'] :: RdsHttpEndpointConfig -> Maybe Text

-- | Amazon RDS cluster ARN.
[$sel:dbClusterIdentifier:RdsHttpEndpointConfig'] :: RdsHttpEndpointConfig -> Maybe Text

-- | Amazon Web Services Region for RDS HTTP endpoint.
[$sel:awsRegion:RdsHttpEndpointConfig'] :: RdsHttpEndpointConfig -> Maybe Text

-- | Logical database name.
[$sel:databaseName:RdsHttpEndpointConfig'] :: RdsHttpEndpointConfig -> Maybe Text

-- | Create a value of <a>RdsHttpEndpointConfig</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:schema:RdsHttpEndpointConfig'</a>,
--   <a>rdsHttpEndpointConfig_schema</a> - Logical schema name.
--   
--   <a>$sel:awsSecretStoreArn:RdsHttpEndpointConfig'</a>,
--   <a>rdsHttpEndpointConfig_awsSecretStoreArn</a> - Amazon Web Services
--   secret store ARN for database credentials.
--   
--   <a>$sel:dbClusterIdentifier:RdsHttpEndpointConfig'</a>,
--   <a>rdsHttpEndpointConfig_dbClusterIdentifier</a> - Amazon RDS cluster
--   ARN.
--   
--   <a>$sel:awsRegion:RdsHttpEndpointConfig'</a>,
--   <a>rdsHttpEndpointConfig_awsRegion</a> - Amazon Web Services Region
--   for RDS HTTP endpoint.
--   
--   <a>$sel:databaseName:RdsHttpEndpointConfig'</a>,
--   <a>rdsHttpEndpointConfig_databaseName</a> - Logical database name.
newRdsHttpEndpointConfig :: RdsHttpEndpointConfig

-- | Logical schema name.
rdsHttpEndpointConfig_schema :: Lens' RdsHttpEndpointConfig (Maybe Text)

-- | Amazon Web Services secret store ARN for database credentials.
rdsHttpEndpointConfig_awsSecretStoreArn :: Lens' RdsHttpEndpointConfig (Maybe Text)

-- | Amazon RDS cluster ARN.
rdsHttpEndpointConfig_dbClusterIdentifier :: Lens' RdsHttpEndpointConfig (Maybe Text)

-- | Amazon Web Services Region for RDS HTTP endpoint.
rdsHttpEndpointConfig_awsRegion :: Lens' RdsHttpEndpointConfig (Maybe Text)

-- | Logical database name.
rdsHttpEndpointConfig_databaseName :: Lens' RdsHttpEndpointConfig (Maybe Text)

-- | Describes a relational database data source configuration.
--   
--   <i>See:</i> <a>newRelationalDatabaseDataSourceConfig</a> smart
--   constructor.
data RelationalDatabaseDataSourceConfig
RelationalDatabaseDataSourceConfig' :: Maybe RdsHttpEndpointConfig -> Maybe RelationalDatabaseSourceType -> RelationalDatabaseDataSourceConfig

-- | Amazon RDS HTTP endpoint settings.
[$sel:rdsHttpEndpointConfig:RelationalDatabaseDataSourceConfig'] :: RelationalDatabaseDataSourceConfig -> Maybe RdsHttpEndpointConfig

-- | Source type for the relational database.
--   
--   <ul>
--   <li><b>RDS_HTTP_ENDPOINT</b>: The relational database source type is
--   an Amazon RDS HTTP endpoint.</li>
--   </ul>
[$sel:relationalDatabaseSourceType:RelationalDatabaseDataSourceConfig'] :: RelationalDatabaseDataSourceConfig -> Maybe RelationalDatabaseSourceType

-- | Create a value of <a>RelationalDatabaseDataSourceConfig</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rdsHttpEndpointConfig:RelationalDatabaseDataSourceConfig'</a>,
--   <a>relationalDatabaseDataSourceConfig_rdsHttpEndpointConfig</a> -
--   Amazon RDS HTTP endpoint settings.
--   
--   
--   <a>$sel:relationalDatabaseSourceType:RelationalDatabaseDataSourceConfig'</a>,
--   <a>relationalDatabaseDataSourceConfig_relationalDatabaseSourceType</a>
--   - Source type for the relational database.
--   
--   <ul>
--   <li><b>RDS_HTTP_ENDPOINT</b>: The relational database source type is
--   an Amazon RDS HTTP endpoint.</li>
--   </ul>
newRelationalDatabaseDataSourceConfig :: RelationalDatabaseDataSourceConfig

-- | Amazon RDS HTTP endpoint settings.
relationalDatabaseDataSourceConfig_rdsHttpEndpointConfig :: Lens' RelationalDatabaseDataSourceConfig (Maybe RdsHttpEndpointConfig)

-- | Source type for the relational database.
--   
--   <ul>
--   <li><b>RDS_HTTP_ENDPOINT</b>: The relational database source type is
--   an Amazon RDS HTTP endpoint.</li>
--   </ul>
relationalDatabaseDataSourceConfig_relationalDatabaseSourceType :: Lens' RelationalDatabaseDataSourceConfig (Maybe RelationalDatabaseSourceType)

-- | Describes a resolver.
--   
--   <i>See:</i> <a>newResolver</a> smart constructor.
data Resolver
Resolver' :: Maybe Text -> Maybe Text -> Maybe ResolverKind -> Maybe SyncConfig -> Maybe Text -> Maybe Text -> Maybe CachingConfig -> Maybe PipelineConfig -> Maybe Text -> Maybe Text -> Resolver

-- | The response mapping template.
[$sel:responseMappingTemplate:Resolver'] :: Resolver -> Maybe Text

-- | The resolver type name.
[$sel:typeName:Resolver'] :: Resolver -> Maybe Text

-- | The resolver type.
--   
--   <ul>
--   <li><b>UNIT</b>: A UNIT resolver type. A UNIT resolver is the default
--   resolver type. A UNIT resolver enables you to execute a GraphQL query
--   against a single data source.</li>
--   <li><b>PIPELINE</b>: A PIPELINE resolver type. A PIPELINE resolver
--   enables you to execute a series of <tt>Function</tt> in a serial
--   manner. You can use a pipeline resolver to execute a GraphQL query
--   against multiple data sources.</li>
--   </ul>
[$sel:kind:Resolver'] :: Resolver -> Maybe ResolverKind

-- | The <tt>SyncConfig</tt> for a resolver attached to a versioned
--   datasource.
[$sel:syncConfig:Resolver'] :: Resolver -> Maybe SyncConfig

-- | The resolver data source name.
[$sel:dataSourceName:Resolver'] :: Resolver -> Maybe Text

-- | The resolver ARN.
[$sel:resolverArn:Resolver'] :: Resolver -> Maybe Text

-- | The caching configuration for the resolver.
[$sel:cachingConfig:Resolver'] :: Resolver -> Maybe CachingConfig

-- | The <tt>PipelineConfig</tt>.
[$sel:pipelineConfig:Resolver'] :: Resolver -> Maybe PipelineConfig

-- | The request mapping template.
[$sel:requestMappingTemplate:Resolver'] :: Resolver -> Maybe Text

-- | The resolver field name.
[$sel:fieldName:Resolver'] :: Resolver -> Maybe Text

-- | Create a value of <a>Resolver</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:responseMappingTemplate:Resolver'</a>,
--   <a>resolver_responseMappingTemplate</a> - The response mapping
--   template.
--   
--   <a>$sel:typeName:Resolver'</a>, <a>resolver_typeName</a> - The
--   resolver type name.
--   
--   <a>$sel:kind:Resolver'</a>, <a>resolver_kind</a> - The resolver type.
--   
--   <ul>
--   <li><b>UNIT</b>: A UNIT resolver type. A UNIT resolver is the default
--   resolver type. A UNIT resolver enables you to execute a GraphQL query
--   against a single data source.</li>
--   <li><b>PIPELINE</b>: A PIPELINE resolver type. A PIPELINE resolver
--   enables you to execute a series of <tt>Function</tt> in a serial
--   manner. You can use a pipeline resolver to execute a GraphQL query
--   against multiple data sources.</li>
--   </ul>
--   
--   <a>$sel:syncConfig:Resolver'</a>, <a>resolver_syncConfig</a> - The
--   <tt>SyncConfig</tt> for a resolver attached to a versioned datasource.
--   
--   <a>$sel:dataSourceName:Resolver'</a>, <a>resolver_dataSourceName</a> -
--   The resolver data source name.
--   
--   <a>$sel:resolverArn:Resolver'</a>, <a>resolver_resolverArn</a> - The
--   resolver ARN.
--   
--   <a>$sel:cachingConfig:Resolver'</a>, <a>resolver_cachingConfig</a> -
--   The caching configuration for the resolver.
--   
--   <a>$sel:pipelineConfig:Resolver'</a>, <a>resolver_pipelineConfig</a> -
--   The <tt>PipelineConfig</tt>.
--   
--   <a>$sel:requestMappingTemplate:Resolver'</a>,
--   <a>resolver_requestMappingTemplate</a> - The request mapping template.
--   
--   <a>$sel:fieldName:Resolver'</a>, <a>resolver_fieldName</a> - The
--   resolver field name.
newResolver :: Resolver

-- | The response mapping template.
resolver_responseMappingTemplate :: Lens' Resolver (Maybe Text)

-- | The resolver type name.
resolver_typeName :: Lens' Resolver (Maybe Text)

-- | The resolver type.
--   
--   <ul>
--   <li><b>UNIT</b>: A UNIT resolver type. A UNIT resolver is the default
--   resolver type. A UNIT resolver enables you to execute a GraphQL query
--   against a single data source.</li>
--   <li><b>PIPELINE</b>: A PIPELINE resolver type. A PIPELINE resolver
--   enables you to execute a series of <tt>Function</tt> in a serial
--   manner. You can use a pipeline resolver to execute a GraphQL query
--   against multiple data sources.</li>
--   </ul>
resolver_kind :: Lens' Resolver (Maybe ResolverKind)

-- | The <tt>SyncConfig</tt> for a resolver attached to a versioned
--   datasource.
resolver_syncConfig :: Lens' Resolver (Maybe SyncConfig)

-- | The resolver data source name.
resolver_dataSourceName :: Lens' Resolver (Maybe Text)

-- | The resolver ARN.
resolver_resolverArn :: Lens' Resolver (Maybe Text)

-- | The caching configuration for the resolver.
resolver_cachingConfig :: Lens' Resolver (Maybe CachingConfig)

-- | The <tt>PipelineConfig</tt>.
resolver_pipelineConfig :: Lens' Resolver (Maybe PipelineConfig)

-- | The request mapping template.
resolver_requestMappingTemplate :: Lens' Resolver (Maybe Text)

-- | The resolver field name.
resolver_fieldName :: Lens' Resolver (Maybe Text)

-- | Describes a Sync configuration for a resolver.
--   
--   Contains information on which Conflict Detection as well as Resolution
--   strategy should be performed when the resolver is invoked.
--   
--   <i>See:</i> <a>newSyncConfig</a> smart constructor.
data SyncConfig
SyncConfig' :: Maybe ConflictHandlerType -> Maybe LambdaConflictHandlerConfig -> Maybe ConflictDetectionType -> SyncConfig

-- | The Conflict Resolution strategy to perform in the event of a
--   conflict.
--   
--   <ul>
--   <li><b>OPTIMISTIC_CONCURRENCY</b>: Resolve conflicts by rejecting
--   mutations when versions do not match the latest version at the
--   server.</li>
--   <li><b>AUTOMERGE</b>: Resolve conflicts with the Automerge conflict
--   resolution strategy.</li>
--   <li><b>LAMBDA</b>: Resolve conflicts with a Lambda function supplied
--   in the LambdaConflictHandlerConfig.</li>
--   </ul>
[$sel:conflictHandler:SyncConfig'] :: SyncConfig -> Maybe ConflictHandlerType

-- | The <tt>LambdaConflictHandlerConfig</tt> when configuring LAMBDA as
--   the Conflict Handler.
[$sel:lambdaConflictHandlerConfig:SyncConfig'] :: SyncConfig -> Maybe LambdaConflictHandlerConfig

-- | The Conflict Detection strategy to use.
--   
--   <ul>
--   <li><b>VERSION</b>: Detect conflicts based on object versions for this
--   resolver.</li>
--   <li><b>NONE</b>: Do not detect conflicts when executing this
--   resolver.</li>
--   </ul>
[$sel:conflictDetection:SyncConfig'] :: SyncConfig -> Maybe ConflictDetectionType

-- | Create a value of <a>SyncConfig</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:conflictHandler:SyncConfig'</a>,
--   <a>syncConfig_conflictHandler</a> - The Conflict Resolution strategy
--   to perform in the event of a conflict.
--   
--   <ul>
--   <li><b>OPTIMISTIC_CONCURRENCY</b>: Resolve conflicts by rejecting
--   mutations when versions do not match the latest version at the
--   server.</li>
--   <li><b>AUTOMERGE</b>: Resolve conflicts with the Automerge conflict
--   resolution strategy.</li>
--   <li><b>LAMBDA</b>: Resolve conflicts with a Lambda function supplied
--   in the LambdaConflictHandlerConfig.</li>
--   </ul>
--   
--   <a>$sel:lambdaConflictHandlerConfig:SyncConfig'</a>,
--   <a>syncConfig_lambdaConflictHandlerConfig</a> - The
--   <tt>LambdaConflictHandlerConfig</tt> when configuring LAMBDA as the
--   Conflict Handler.
--   
--   <a>$sel:conflictDetection:SyncConfig'</a>,
--   <a>syncConfig_conflictDetection</a> - The Conflict Detection strategy
--   to use.
--   
--   <ul>
--   <li><b>VERSION</b>: Detect conflicts based on object versions for this
--   resolver.</li>
--   <li><b>NONE</b>: Do not detect conflicts when executing this
--   resolver.</li>
--   </ul>
newSyncConfig :: SyncConfig

-- | The Conflict Resolution strategy to perform in the event of a
--   conflict.
--   
--   <ul>
--   <li><b>OPTIMISTIC_CONCURRENCY</b>: Resolve conflicts by rejecting
--   mutations when versions do not match the latest version at the
--   server.</li>
--   <li><b>AUTOMERGE</b>: Resolve conflicts with the Automerge conflict
--   resolution strategy.</li>
--   <li><b>LAMBDA</b>: Resolve conflicts with a Lambda function supplied
--   in the LambdaConflictHandlerConfig.</li>
--   </ul>
syncConfig_conflictHandler :: Lens' SyncConfig (Maybe ConflictHandlerType)

-- | The <tt>LambdaConflictHandlerConfig</tt> when configuring LAMBDA as
--   the Conflict Handler.
syncConfig_lambdaConflictHandlerConfig :: Lens' SyncConfig (Maybe LambdaConflictHandlerConfig)

-- | The Conflict Detection strategy to use.
--   
--   <ul>
--   <li><b>VERSION</b>: Detect conflicts based on object versions for this
--   resolver.</li>
--   <li><b>NONE</b>: Do not detect conflicts when executing this
--   resolver.</li>
--   </ul>
syncConfig_conflictDetection :: Lens' SyncConfig (Maybe ConflictDetectionType)

-- | Describes a type.
--   
--   <i>See:</i> <a>newType</a> smart constructor.
data Type
Type' :: Maybe TypeDefinitionFormat -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Type

-- | The type format: SDL or JSON.
[$sel:format:Type'] :: Type -> Maybe TypeDefinitionFormat

-- | The type ARN.
[$sel:arn:Type'] :: Type -> Maybe Text

-- | The type name.
[$sel:name:Type'] :: Type -> Maybe Text

-- | The type description.
[$sel:description:Type'] :: Type -> Maybe Text

-- | The type definition.
[$sel:definition:Type'] :: Type -> Maybe Text

-- | Create a value of <a>Type</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:format:Type'</a>, <a>type_format</a> - The type format: SDL or
--   JSON.
--   
--   <a>$sel:arn:Type'</a>, <a>type_arn</a> - The type ARN.
--   
--   <a>$sel:name:Type'</a>, <a>type_name</a> - The type name.
--   
--   <a>$sel:description:Type'</a>, <a>type_description</a> - The type
--   description.
--   
--   <a>$sel:definition:Type'</a>, <a>type_definition</a> - The type
--   definition.
newType :: Type

-- | The type format: SDL or JSON.
type_format :: Lens' Type (Maybe TypeDefinitionFormat)

-- | The type ARN.
type_arn :: Lens' Type (Maybe Text)

-- | The type name.
type_name :: Lens' Type (Maybe Text)

-- | The type description.
type_description :: Lens' Type (Maybe Text)

-- | The type definition.
type_definition :: Lens' Type (Maybe Text)

-- | Describes an Amazon Cognito user pool configuration.
--   
--   <i>See:</i> <a>newUserPoolConfig</a> smart constructor.
data UserPoolConfig
UserPoolConfig' :: Maybe Text -> Text -> Text -> DefaultAction -> UserPoolConfig

-- | A regular expression for validating the incoming Amazon Cognito user
--   pool app client ID.
[$sel:appIdClientRegex:UserPoolConfig'] :: UserPoolConfig -> Maybe Text

-- | The user pool ID.
[$sel:userPoolId:UserPoolConfig'] :: UserPoolConfig -> Text

-- | The Amazon Web Services Region in which the user pool was created.
[$sel:awsRegion:UserPoolConfig'] :: UserPoolConfig -> Text

-- | The action that you want your GraphQL API to take when a request that
--   uses Amazon Cognito user pool authentication doesn't match the Amazon
--   Cognito user pool configuration.
[$sel:defaultAction:UserPoolConfig'] :: UserPoolConfig -> DefaultAction

-- | Create a value of <a>UserPoolConfig</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:appIdClientRegex:UserPoolConfig'</a>,
--   <a>userPoolConfig_appIdClientRegex</a> - A regular expression for
--   validating the incoming Amazon Cognito user pool app client ID.
--   
--   <a>$sel:userPoolId:UserPoolConfig'</a>,
--   <a>userPoolConfig_userPoolId</a> - The user pool ID.
--   
--   <a>$sel:awsRegion:UserPoolConfig'</a>, <a>userPoolConfig_awsRegion</a>
--   - The Amazon Web Services Region in which the user pool was created.
--   
--   <a>$sel:defaultAction:UserPoolConfig'</a>,
--   <a>userPoolConfig_defaultAction</a> - The action that you want your
--   GraphQL API to take when a request that uses Amazon Cognito user pool
--   authentication doesn't match the Amazon Cognito user pool
--   configuration.
newUserPoolConfig :: Text -> Text -> DefaultAction -> UserPoolConfig

-- | A regular expression for validating the incoming Amazon Cognito user
--   pool app client ID.
userPoolConfig_appIdClientRegex :: Lens' UserPoolConfig (Maybe Text)

-- | The user pool ID.
userPoolConfig_userPoolId :: Lens' UserPoolConfig Text

-- | The Amazon Web Services Region in which the user pool was created.
userPoolConfig_awsRegion :: Lens' UserPoolConfig Text

-- | The action that you want your GraphQL API to take when a request that
--   uses Amazon Cognito user pool authentication doesn't match the Amazon
--   Cognito user pool configuration.
userPoolConfig_defaultAction :: Lens' UserPoolConfig DefaultAction


-- | Tags a resource with user-supplied tags.
module Network.AWS.AppSync.TagResource

-- | <i>See:</i> <a>newTagResource</a> smart constructor.
data TagResource
TagResource' :: Text -> HashMap Text Text -> TagResource

-- | The <tt>GraphqlApi</tt> ARN.
[$sel:resourceArn:TagResource'] :: TagResource -> Text

-- | A <tt>TagMap</tt> object.
[$sel:tags:TagResource'] :: TagResource -> HashMap Text Text

-- | Create a value of <a>TagResource</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:TagResource'</a>, <a>tagResource_resourceArn</a> -
--   The <tt>GraphqlApi</tt> ARN.
--   
--   <a>$sel:tags:TagResource'</a>, <a>tagResource_tags</a> - A
--   <tt>TagMap</tt> object.
newTagResource :: Text -> TagResource

-- | The <tt>GraphqlApi</tt> ARN.
tagResource_resourceArn :: Lens' TagResource Text

-- | A <tt>TagMap</tt> object.
tagResource_tags :: Lens' TagResource (HashMap Text Text)

-- | <i>See:</i> <a>newTagResourceResponse</a> smart constructor.
data TagResourceResponse
TagResourceResponse' :: Int -> TagResourceResponse

-- | The response's http status code.
[$sel:httpStatus:TagResourceResponse'] :: TagResourceResponse -> Int

-- | Create a value of <a>TagResourceResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:TagResourceResponse'</a>,
--   <a>tagResourceResponse_httpStatus</a> - The response's http status
--   code.
newTagResourceResponse :: Int -> TagResourceResponse

-- | The response's http status code.
tagResourceResponse_httpStatus :: Lens' TagResourceResponse Int
instance GHC.Generics.Generic Network.AWS.AppSync.TagResource.TagResource
instance GHC.Show.Show Network.AWS.AppSync.TagResource.TagResource
instance GHC.Read.Read Network.AWS.AppSync.TagResource.TagResource
instance GHC.Classes.Eq Network.AWS.AppSync.TagResource.TagResource
instance GHC.Generics.Generic Network.AWS.AppSync.TagResource.TagResourceResponse
instance GHC.Show.Show Network.AWS.AppSync.TagResource.TagResourceResponse
instance GHC.Read.Read Network.AWS.AppSync.TagResource.TagResourceResponse
instance GHC.Classes.Eq Network.AWS.AppSync.TagResource.TagResourceResponse
instance Network.AWS.Types.AWSRequest Network.AWS.AppSync.TagResource.TagResource
instance Control.DeepSeq.NFData Network.AWS.AppSync.TagResource.TagResourceResponse
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.TagResource.TagResource
instance Control.DeepSeq.NFData Network.AWS.AppSync.TagResource.TagResource
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.AppSync.TagResource.TagResource
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.TagResource.TagResource
instance Network.AWS.Data.Path.ToPath Network.AWS.AppSync.TagResource.TagResource
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.TagResource.TagResource


-- | Adds a new schema to your GraphQL API.
--   
--   This operation is asynchronous. Use to determine when it has
--   completed.
module Network.AWS.AppSync.StartSchemaCreation

-- | <i>See:</i> <a>newStartSchemaCreation</a> smart constructor.
data StartSchemaCreation
StartSchemaCreation' :: Text -> Base64 -> StartSchemaCreation

-- | The API ID.
[$sel:apiId:StartSchemaCreation'] :: StartSchemaCreation -> Text

-- | The schema definition, in GraphQL schema language format.
[$sel:definition:StartSchemaCreation'] :: StartSchemaCreation -> Base64

-- | Create a value of <a>StartSchemaCreation</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiId:StartSchemaCreation'</a>,
--   <a>startSchemaCreation_apiId</a> - The API ID.
--   
--   <a>$sel:definition:StartSchemaCreation'</a>,
--   <a>startSchemaCreation_definition</a> - The schema definition, in
--   GraphQL schema language format.-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
newStartSchemaCreation :: Text -> ByteString -> StartSchemaCreation

-- | The API ID.
startSchemaCreation_apiId :: Lens' StartSchemaCreation Text

-- | The schema definition, in GraphQL schema language format.-- --
--   <i>Note:</i> This <tt>Lens</tt> automatically encodes and decodes
--   Base64 data. -- The underlying isomorphism will encode to Base64
--   representation during -- serialisation, and decode from Base64
--   representation during deserialisation. -- This <tt>Lens</tt> accepts
--   and returns only raw unencoded data.
startSchemaCreation_definition :: Lens' StartSchemaCreation ByteString

-- | <i>See:</i> <a>newStartSchemaCreationResponse</a> smart constructor.
data StartSchemaCreationResponse
StartSchemaCreationResponse' :: Maybe SchemaStatus -> Int -> StartSchemaCreationResponse

-- | The current state of the schema (PROCESSING, FAILED, SUCCESS, or
--   NOT_APPLICABLE). When the schema is in the ACTIVE state, you can add
--   data.
[$sel:status:StartSchemaCreationResponse'] :: StartSchemaCreationResponse -> Maybe SchemaStatus

-- | The response's http status code.
[$sel:httpStatus:StartSchemaCreationResponse'] :: StartSchemaCreationResponse -> Int

-- | Create a value of <a>StartSchemaCreationResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:StartSchemaCreationResponse'</a>,
--   <a>startSchemaCreationResponse_status</a> - The current state of the
--   schema (PROCESSING, FAILED, SUCCESS, or NOT_APPLICABLE). When the
--   schema is in the ACTIVE state, you can add data.
--   
--   <a>$sel:httpStatus:StartSchemaCreationResponse'</a>,
--   <a>startSchemaCreationResponse_httpStatus</a> - The response's http
--   status code.
newStartSchemaCreationResponse :: Int -> StartSchemaCreationResponse

-- | The current state of the schema (PROCESSING, FAILED, SUCCESS, or
--   NOT_APPLICABLE). When the schema is in the ACTIVE state, you can add
--   data.
startSchemaCreationResponse_status :: Lens' StartSchemaCreationResponse (Maybe SchemaStatus)

-- | The response's http status code.
startSchemaCreationResponse_httpStatus :: Lens' StartSchemaCreationResponse Int
instance GHC.Generics.Generic Network.AWS.AppSync.StartSchemaCreation.StartSchemaCreation
instance GHC.Show.Show Network.AWS.AppSync.StartSchemaCreation.StartSchemaCreation
instance GHC.Read.Read Network.AWS.AppSync.StartSchemaCreation.StartSchemaCreation
instance GHC.Classes.Eq Network.AWS.AppSync.StartSchemaCreation.StartSchemaCreation
instance GHC.Generics.Generic Network.AWS.AppSync.StartSchemaCreation.StartSchemaCreationResponse
instance GHC.Show.Show Network.AWS.AppSync.StartSchemaCreation.StartSchemaCreationResponse
instance GHC.Read.Read Network.AWS.AppSync.StartSchemaCreation.StartSchemaCreationResponse
instance GHC.Classes.Eq Network.AWS.AppSync.StartSchemaCreation.StartSchemaCreationResponse
instance Network.AWS.Types.AWSRequest Network.AWS.AppSync.StartSchemaCreation.StartSchemaCreation
instance Control.DeepSeq.NFData Network.AWS.AppSync.StartSchemaCreation.StartSchemaCreationResponse
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.StartSchemaCreation.StartSchemaCreation
instance Control.DeepSeq.NFData Network.AWS.AppSync.StartSchemaCreation.StartSchemaCreation
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.AppSync.StartSchemaCreation.StartSchemaCreation
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.StartSchemaCreation.StartSchemaCreation
instance Network.AWS.Data.Path.ToPath Network.AWS.AppSync.StartSchemaCreation.StartSchemaCreation
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.StartSchemaCreation.StartSchemaCreation


-- | Lists the types for a given API.
--   
--   This operation returns paginated results.
module Network.AWS.AppSync.ListTypes

-- | <i>See:</i> <a>newListTypes</a> smart constructor.
data ListTypes
ListTypes' :: Maybe Text -> Maybe Natural -> Text -> TypeDefinitionFormat -> ListTypes

-- | An identifier that was returned from the previous call to this
--   operation, which can be used to return the next set of items in the
--   list.
[$sel:nextToken:ListTypes'] :: ListTypes -> Maybe Text

-- | The maximum number of results you want the request to return.
[$sel:maxResults:ListTypes'] :: ListTypes -> Maybe Natural

-- | The API ID.
[$sel:apiId:ListTypes'] :: ListTypes -> Text

-- | The type format: SDL or JSON.
[$sel:format:ListTypes'] :: ListTypes -> TypeDefinitionFormat

-- | Create a value of <a>ListTypes</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListTypes'</a>, <a>listTypes_nextToken</a> - An
--   identifier that was returned from the previous call to this operation,
--   which can be used to return the next set of items in the list.
--   
--   <a>$sel:maxResults:ListTypes'</a>, <a>listTypes_maxResults</a> - The
--   maximum number of results you want the request to return.
--   
--   <a>$sel:apiId:ListTypes'</a>, <a>listTypes_apiId</a> - The API ID.
--   
--   <a>$sel:format:ListTypes'</a>, <a>listTypes_format</a> - The type
--   format: SDL or JSON.
newListTypes :: Text -> TypeDefinitionFormat -> ListTypes

-- | An identifier that was returned from the previous call to this
--   operation, which can be used to return the next set of items in the
--   list.
listTypes_nextToken :: Lens' ListTypes (Maybe Text)

-- | The maximum number of results you want the request to return.
listTypes_maxResults :: Lens' ListTypes (Maybe Natural)

-- | The API ID.
listTypes_apiId :: Lens' ListTypes Text

-- | The type format: SDL or JSON.
listTypes_format :: Lens' ListTypes TypeDefinitionFormat

-- | <i>See:</i> <a>newListTypesResponse</a> smart constructor.
data ListTypesResponse
ListTypesResponse' :: Maybe Text -> Maybe [Type] -> Int -> ListTypesResponse

-- | An identifier to be passed in the next request to this operation to
--   return the next set of items in the list.
[$sel:nextToken:ListTypesResponse'] :: ListTypesResponse -> Maybe Text

-- | The <tt>Type</tt> objects.
[$sel:types:ListTypesResponse'] :: ListTypesResponse -> Maybe [Type]

-- | The response's http status code.
[$sel:httpStatus:ListTypesResponse'] :: ListTypesResponse -> Int

-- | Create a value of <a>ListTypesResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListTypes'</a>, <a>listTypesResponse_nextToken</a> -
--   An identifier to be passed in the next request to this operation to
--   return the next set of items in the list.
--   
--   <a>$sel:types:ListTypesResponse'</a>, <a>listTypesResponse_types</a> -
--   The <tt>Type</tt> objects.
--   
--   <a>$sel:httpStatus:ListTypesResponse'</a>,
--   <a>listTypesResponse_httpStatus</a> - The response's http status code.
newListTypesResponse :: Int -> ListTypesResponse

-- | An identifier to be passed in the next request to this operation to
--   return the next set of items in the list.
listTypesResponse_nextToken :: Lens' ListTypesResponse (Maybe Text)

-- | The <tt>Type</tt> objects.
listTypesResponse_types :: Lens' ListTypesResponse (Maybe [Type])

-- | The response's http status code.
listTypesResponse_httpStatus :: Lens' ListTypesResponse Int
instance GHC.Generics.Generic Network.AWS.AppSync.ListTypes.ListTypes
instance GHC.Show.Show Network.AWS.AppSync.ListTypes.ListTypes
instance GHC.Read.Read Network.AWS.AppSync.ListTypes.ListTypes
instance GHC.Classes.Eq Network.AWS.AppSync.ListTypes.ListTypes
instance GHC.Generics.Generic Network.AWS.AppSync.ListTypes.ListTypesResponse
instance GHC.Show.Show Network.AWS.AppSync.ListTypes.ListTypesResponse
instance GHC.Read.Read Network.AWS.AppSync.ListTypes.ListTypesResponse
instance GHC.Classes.Eq Network.AWS.AppSync.ListTypes.ListTypesResponse
instance Network.AWS.Types.AWSRequest Network.AWS.AppSync.ListTypes.ListTypes
instance Control.DeepSeq.NFData Network.AWS.AppSync.ListTypes.ListTypesResponse
instance Network.AWS.Pager.AWSPager Network.AWS.AppSync.ListTypes.ListTypes
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.ListTypes.ListTypes
instance Control.DeepSeq.NFData Network.AWS.AppSync.ListTypes.ListTypes
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.AppSync.ListTypes.ListTypes
instance Network.AWS.Data.Path.ToPath Network.AWS.AppSync.ListTypes.ListTypes
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.ListTypes.ListTypes


-- | Lists the tags for a resource.
module Network.AWS.AppSync.ListTagsForResource

-- | <i>See:</i> <a>newListTagsForResource</a> smart constructor.
data ListTagsForResource
ListTagsForResource' :: Text -> ListTagsForResource

-- | The <tt>GraphqlApi</tt> ARN.
[$sel:resourceArn:ListTagsForResource'] :: ListTagsForResource -> Text

-- | Create a value of <a>ListTagsForResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:ListTagsForResource'</a>,
--   <a>listTagsForResource_resourceArn</a> - The <tt>GraphqlApi</tt> ARN.
newListTagsForResource :: Text -> ListTagsForResource

-- | The <tt>GraphqlApi</tt> ARN.
listTagsForResource_resourceArn :: Lens' ListTagsForResource Text

-- | <i>See:</i> <a>newListTagsForResourceResponse</a> smart constructor.
data ListTagsForResourceResponse
ListTagsForResourceResponse' :: Maybe (HashMap Text Text) -> Int -> ListTagsForResourceResponse

-- | A <tt>TagMap</tt> object.
[$sel:tags:ListTagsForResourceResponse'] :: ListTagsForResourceResponse -> Maybe (HashMap Text Text)

-- | The response's http status code.
[$sel:httpStatus:ListTagsForResourceResponse'] :: ListTagsForResourceResponse -> Int

-- | Create a value of <a>ListTagsForResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tags:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_tags</a> - A <tt>TagMap</tt> object.
--   
--   <a>$sel:httpStatus:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_httpStatus</a> - The response's http
--   status code.
newListTagsForResourceResponse :: Int -> ListTagsForResourceResponse

-- | A <tt>TagMap</tt> object.
listTagsForResourceResponse_tags :: Lens' ListTagsForResourceResponse (Maybe (HashMap Text Text))

-- | The response's http status code.
listTagsForResourceResponse_httpStatus :: Lens' ListTagsForResourceResponse Int
instance GHC.Generics.Generic Network.AWS.AppSync.ListTagsForResource.ListTagsForResource
instance GHC.Show.Show Network.AWS.AppSync.ListTagsForResource.ListTagsForResource
instance GHC.Read.Read Network.AWS.AppSync.ListTagsForResource.ListTagsForResource
instance GHC.Classes.Eq Network.AWS.AppSync.ListTagsForResource.ListTagsForResource
instance GHC.Generics.Generic Network.AWS.AppSync.ListTagsForResource.ListTagsForResourceResponse
instance GHC.Show.Show Network.AWS.AppSync.ListTagsForResource.ListTagsForResourceResponse
instance GHC.Read.Read Network.AWS.AppSync.ListTagsForResource.ListTagsForResourceResponse
instance GHC.Classes.Eq Network.AWS.AppSync.ListTagsForResource.ListTagsForResourceResponse
instance Network.AWS.Types.AWSRequest Network.AWS.AppSync.ListTagsForResource.ListTagsForResource
instance Control.DeepSeq.NFData Network.AWS.AppSync.ListTagsForResource.ListTagsForResourceResponse
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.ListTagsForResource.ListTagsForResource
instance Control.DeepSeq.NFData Network.AWS.AppSync.ListTagsForResource.ListTagsForResource
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.AppSync.ListTagsForResource.ListTagsForResource
instance Network.AWS.Data.Path.ToPath Network.AWS.AppSync.ListTagsForResource.ListTagsForResource
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.ListTagsForResource.ListTagsForResource


-- | List the resolvers that are associated with a specific function.
--   
--   This operation returns paginated results.
module Network.AWS.AppSync.ListResolversByFunction

-- | <i>See:</i> <a>newListResolversByFunction</a> smart constructor.
data ListResolversByFunction
ListResolversByFunction' :: Maybe Text -> Maybe Natural -> Text -> Text -> ListResolversByFunction

-- | An identifier that was returned from the previous call to this
--   operation, which you can use to return the next set of items in the
--   list.
[$sel:nextToken:ListResolversByFunction'] :: ListResolversByFunction -> Maybe Text

-- | The maximum number of results you want the request to return.
[$sel:maxResults:ListResolversByFunction'] :: ListResolversByFunction -> Maybe Natural

-- | The API ID.
[$sel:apiId:ListResolversByFunction'] :: ListResolversByFunction -> Text

-- | The Function ID.
[$sel:functionId:ListResolversByFunction'] :: ListResolversByFunction -> Text

-- | Create a value of <a>ListResolversByFunction</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListResolversByFunction'</a>,
--   <a>listResolversByFunction_nextToken</a> - An identifier that was
--   returned from the previous call to this operation, which you can use
--   to return the next set of items in the list.
--   
--   <a>$sel:maxResults:ListResolversByFunction'</a>,
--   <a>listResolversByFunction_maxResults</a> - The maximum number of
--   results you want the request to return.
--   
--   <a>$sel:apiId:ListResolversByFunction'</a>,
--   <a>listResolversByFunction_apiId</a> - The API ID.
--   
--   <a>$sel:functionId:ListResolversByFunction'</a>,
--   <a>listResolversByFunction_functionId</a> - The Function ID.
newListResolversByFunction :: Text -> Text -> ListResolversByFunction

-- | An identifier that was returned from the previous call to this
--   operation, which you can use to return the next set of items in the
--   list.
listResolversByFunction_nextToken :: Lens' ListResolversByFunction (Maybe Text)

-- | The maximum number of results you want the request to return.
listResolversByFunction_maxResults :: Lens' ListResolversByFunction (Maybe Natural)

-- | The API ID.
listResolversByFunction_apiId :: Lens' ListResolversByFunction Text

-- | The Function ID.
listResolversByFunction_functionId :: Lens' ListResolversByFunction Text

-- | <i>See:</i> <a>newListResolversByFunctionResponse</a> smart
--   constructor.
data ListResolversByFunctionResponse
ListResolversByFunctionResponse' :: Maybe Text -> Maybe [Resolver] -> Int -> ListResolversByFunctionResponse

-- | An identifier that can be used to return the next set of items in the
--   list.
[$sel:nextToken:ListResolversByFunctionResponse'] :: ListResolversByFunctionResponse -> Maybe Text

-- | The list of resolvers.
[$sel:resolvers:ListResolversByFunctionResponse'] :: ListResolversByFunctionResponse -> Maybe [Resolver]

-- | The response's http status code.
[$sel:httpStatus:ListResolversByFunctionResponse'] :: ListResolversByFunctionResponse -> Int

-- | Create a value of <a>ListResolversByFunctionResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListResolversByFunction'</a>,
--   <a>listResolversByFunctionResponse_nextToken</a> - An identifier that
--   can be used to return the next set of items in the list.
--   
--   <a>$sel:resolvers:ListResolversByFunctionResponse'</a>,
--   <a>listResolversByFunctionResponse_resolvers</a> - The list of
--   resolvers.
--   
--   <a>$sel:httpStatus:ListResolversByFunctionResponse'</a>,
--   <a>listResolversByFunctionResponse_httpStatus</a> - The response's
--   http status code.
newListResolversByFunctionResponse :: Int -> ListResolversByFunctionResponse

-- | An identifier that can be used to return the next set of items in the
--   list.
listResolversByFunctionResponse_nextToken :: Lens' ListResolversByFunctionResponse (Maybe Text)

-- | The list of resolvers.
listResolversByFunctionResponse_resolvers :: Lens' ListResolversByFunctionResponse (Maybe [Resolver])

-- | The response's http status code.
listResolversByFunctionResponse_httpStatus :: Lens' ListResolversByFunctionResponse Int
instance GHC.Generics.Generic Network.AWS.AppSync.ListResolversByFunction.ListResolversByFunction
instance GHC.Show.Show Network.AWS.AppSync.ListResolversByFunction.ListResolversByFunction
instance GHC.Read.Read Network.AWS.AppSync.ListResolversByFunction.ListResolversByFunction
instance GHC.Classes.Eq Network.AWS.AppSync.ListResolversByFunction.ListResolversByFunction
instance GHC.Generics.Generic Network.AWS.AppSync.ListResolversByFunction.ListResolversByFunctionResponse
instance GHC.Show.Show Network.AWS.AppSync.ListResolversByFunction.ListResolversByFunctionResponse
instance GHC.Read.Read Network.AWS.AppSync.ListResolversByFunction.ListResolversByFunctionResponse
instance GHC.Classes.Eq Network.AWS.AppSync.ListResolversByFunction.ListResolversByFunctionResponse
instance Network.AWS.Types.AWSRequest Network.AWS.AppSync.ListResolversByFunction.ListResolversByFunction
instance Control.DeepSeq.NFData Network.AWS.AppSync.ListResolversByFunction.ListResolversByFunctionResponse
instance Network.AWS.Pager.AWSPager Network.AWS.AppSync.ListResolversByFunction.ListResolversByFunction
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.ListResolversByFunction.ListResolversByFunction
instance Control.DeepSeq.NFData Network.AWS.AppSync.ListResolversByFunction.ListResolversByFunction
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.AppSync.ListResolversByFunction.ListResolversByFunction
instance Network.AWS.Data.Path.ToPath Network.AWS.AppSync.ListResolversByFunction.ListResolversByFunction
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.ListResolversByFunction.ListResolversByFunction


-- | Lists the resolvers for a given API and type.
--   
--   This operation returns paginated results.
module Network.AWS.AppSync.ListResolvers

-- | <i>See:</i> <a>newListResolvers</a> smart constructor.
data ListResolvers
ListResolvers' :: Maybe Text -> Maybe Natural -> Text -> Text -> ListResolvers

-- | An identifier that was returned from the previous call to this
--   operation, which can be used to return the next set of items in the
--   list.
[$sel:nextToken:ListResolvers'] :: ListResolvers -> Maybe Text

-- | The maximum number of results you want the request to return.
[$sel:maxResults:ListResolvers'] :: ListResolvers -> Maybe Natural

-- | The API ID.
[$sel:apiId:ListResolvers'] :: ListResolvers -> Text

-- | The type name.
[$sel:typeName:ListResolvers'] :: ListResolvers -> Text

-- | Create a value of <a>ListResolvers</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListResolvers'</a>, <a>listResolvers_nextToken</a> -
--   An identifier that was returned from the previous call to this
--   operation, which can be used to return the next set of items in the
--   list.
--   
--   <a>$sel:maxResults:ListResolvers'</a>, <a>listResolvers_maxResults</a>
--   - The maximum number of results you want the request to return.
--   
--   <a>$sel:apiId:ListResolvers'</a>, <a>listResolvers_apiId</a> - The API
--   ID.
--   
--   <a>$sel:typeName:ListResolvers'</a>, <a>listResolvers_typeName</a> -
--   The type name.
newListResolvers :: Text -> Text -> ListResolvers

-- | An identifier that was returned from the previous call to this
--   operation, which can be used to return the next set of items in the
--   list.
listResolvers_nextToken :: Lens' ListResolvers (Maybe Text)

-- | The maximum number of results you want the request to return.
listResolvers_maxResults :: Lens' ListResolvers (Maybe Natural)

-- | The API ID.
listResolvers_apiId :: Lens' ListResolvers Text

-- | The type name.
listResolvers_typeName :: Lens' ListResolvers Text

-- | <i>See:</i> <a>newListResolversResponse</a> smart constructor.
data ListResolversResponse
ListResolversResponse' :: Maybe Text -> Maybe [Resolver] -> Int -> ListResolversResponse

-- | An identifier to be passed in the next request to this operation to
--   return the next set of items in the list.
[$sel:nextToken:ListResolversResponse'] :: ListResolversResponse -> Maybe Text

-- | The <tt>Resolver</tt> objects.
[$sel:resolvers:ListResolversResponse'] :: ListResolversResponse -> Maybe [Resolver]

-- | The response's http status code.
[$sel:httpStatus:ListResolversResponse'] :: ListResolversResponse -> Int

-- | Create a value of <a>ListResolversResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListResolvers'</a>,
--   <a>listResolversResponse_nextToken</a> - An identifier to be passed in
--   the next request to this operation to return the next set of items in
--   the list.
--   
--   <a>$sel:resolvers:ListResolversResponse'</a>,
--   <a>listResolversResponse_resolvers</a> - The <tt>Resolver</tt>
--   objects.
--   
--   <a>$sel:httpStatus:ListResolversResponse'</a>,
--   <a>listResolversResponse_httpStatus</a> - The response's http status
--   code.
newListResolversResponse :: Int -> ListResolversResponse

-- | An identifier to be passed in the next request to this operation to
--   return the next set of items in the list.
listResolversResponse_nextToken :: Lens' ListResolversResponse (Maybe Text)

-- | The <tt>Resolver</tt> objects.
listResolversResponse_resolvers :: Lens' ListResolversResponse (Maybe [Resolver])

-- | The response's http status code.
listResolversResponse_httpStatus :: Lens' ListResolversResponse Int
instance GHC.Generics.Generic Network.AWS.AppSync.ListResolvers.ListResolvers
instance GHC.Show.Show Network.AWS.AppSync.ListResolvers.ListResolvers
instance GHC.Read.Read Network.AWS.AppSync.ListResolvers.ListResolvers
instance GHC.Classes.Eq Network.AWS.AppSync.ListResolvers.ListResolvers
instance GHC.Generics.Generic Network.AWS.AppSync.ListResolvers.ListResolversResponse
instance GHC.Show.Show Network.AWS.AppSync.ListResolvers.ListResolversResponse
instance GHC.Read.Read Network.AWS.AppSync.ListResolvers.ListResolversResponse
instance GHC.Classes.Eq Network.AWS.AppSync.ListResolvers.ListResolversResponse
instance Network.AWS.Types.AWSRequest Network.AWS.AppSync.ListResolvers.ListResolvers
instance Control.DeepSeq.NFData Network.AWS.AppSync.ListResolvers.ListResolversResponse
instance Network.AWS.Pager.AWSPager Network.AWS.AppSync.ListResolvers.ListResolvers
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.ListResolvers.ListResolvers
instance Control.DeepSeq.NFData Network.AWS.AppSync.ListResolvers.ListResolvers
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.AppSync.ListResolvers.ListResolvers
instance Network.AWS.Data.Path.ToPath Network.AWS.AppSync.ListResolvers.ListResolvers
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.ListResolvers.ListResolvers


-- | Lists your GraphQL APIs.
--   
--   This operation returns paginated results.
module Network.AWS.AppSync.ListGraphqlApis

-- | <i>See:</i> <a>newListGraphqlApis</a> smart constructor.
data ListGraphqlApis
ListGraphqlApis' :: Maybe Text -> Maybe Natural -> ListGraphqlApis

-- | An identifier that was returned from the previous call to this
--   operation, which can be used to return the next set of items in the
--   list.
[$sel:nextToken:ListGraphqlApis'] :: ListGraphqlApis -> Maybe Text

-- | The maximum number of results you want the request to return.
[$sel:maxResults:ListGraphqlApis'] :: ListGraphqlApis -> Maybe Natural

-- | Create a value of <a>ListGraphqlApis</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListGraphqlApis'</a>,
--   <a>listGraphqlApis_nextToken</a> - An identifier that was returned
--   from the previous call to this operation, which can be used to return
--   the next set of items in the list.
--   
--   <a>$sel:maxResults:ListGraphqlApis'</a>,
--   <a>listGraphqlApis_maxResults</a> - The maximum number of results you
--   want the request to return.
newListGraphqlApis :: ListGraphqlApis

-- | An identifier that was returned from the previous call to this
--   operation, which can be used to return the next set of items in the
--   list.
listGraphqlApis_nextToken :: Lens' ListGraphqlApis (Maybe Text)

-- | The maximum number of results you want the request to return.
listGraphqlApis_maxResults :: Lens' ListGraphqlApis (Maybe Natural)

-- | <i>See:</i> <a>newListGraphqlApisResponse</a> smart constructor.
data ListGraphqlApisResponse
ListGraphqlApisResponse' :: Maybe Text -> Maybe [GraphqlApi] -> Int -> ListGraphqlApisResponse

-- | An identifier to be passed in the next request to this operation to
--   return the next set of items in the list.
[$sel:nextToken:ListGraphqlApisResponse'] :: ListGraphqlApisResponse -> Maybe Text

-- | The <tt>GraphqlApi</tt> objects.
[$sel:graphqlApis:ListGraphqlApisResponse'] :: ListGraphqlApisResponse -> Maybe [GraphqlApi]

-- | The response's http status code.
[$sel:httpStatus:ListGraphqlApisResponse'] :: ListGraphqlApisResponse -> Int

-- | Create a value of <a>ListGraphqlApisResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListGraphqlApis'</a>,
--   <a>listGraphqlApisResponse_nextToken</a> - An identifier to be passed
--   in the next request to this operation to return the next set of items
--   in the list.
--   
--   <a>$sel:graphqlApis:ListGraphqlApisResponse'</a>,
--   <a>listGraphqlApisResponse_graphqlApis</a> - The <tt>GraphqlApi</tt>
--   objects.
--   
--   <a>$sel:httpStatus:ListGraphqlApisResponse'</a>,
--   <a>listGraphqlApisResponse_httpStatus</a> - The response's http status
--   code.
newListGraphqlApisResponse :: Int -> ListGraphqlApisResponse

-- | An identifier to be passed in the next request to this operation to
--   return the next set of items in the list.
listGraphqlApisResponse_nextToken :: Lens' ListGraphqlApisResponse (Maybe Text)

-- | The <tt>GraphqlApi</tt> objects.
listGraphqlApisResponse_graphqlApis :: Lens' ListGraphqlApisResponse (Maybe [GraphqlApi])

-- | The response's http status code.
listGraphqlApisResponse_httpStatus :: Lens' ListGraphqlApisResponse Int
instance GHC.Generics.Generic Network.AWS.AppSync.ListGraphqlApis.ListGraphqlApis
instance GHC.Show.Show Network.AWS.AppSync.ListGraphqlApis.ListGraphqlApis
instance GHC.Read.Read Network.AWS.AppSync.ListGraphqlApis.ListGraphqlApis
instance GHC.Classes.Eq Network.AWS.AppSync.ListGraphqlApis.ListGraphqlApis
instance GHC.Generics.Generic Network.AWS.AppSync.ListGraphqlApis.ListGraphqlApisResponse
instance GHC.Show.Show Network.AWS.AppSync.ListGraphqlApis.ListGraphqlApisResponse
instance GHC.Read.Read Network.AWS.AppSync.ListGraphqlApis.ListGraphqlApisResponse
instance GHC.Classes.Eq Network.AWS.AppSync.ListGraphqlApis.ListGraphqlApisResponse
instance Network.AWS.Types.AWSRequest Network.AWS.AppSync.ListGraphqlApis.ListGraphqlApis
instance Control.DeepSeq.NFData Network.AWS.AppSync.ListGraphqlApis.ListGraphqlApisResponse
instance Network.AWS.Pager.AWSPager Network.AWS.AppSync.ListGraphqlApis.ListGraphqlApis
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.ListGraphqlApis.ListGraphqlApis
instance Control.DeepSeq.NFData Network.AWS.AppSync.ListGraphqlApis.ListGraphqlApis
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.AppSync.ListGraphqlApis.ListGraphqlApis
instance Network.AWS.Data.Path.ToPath Network.AWS.AppSync.ListGraphqlApis.ListGraphqlApis
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.ListGraphqlApis.ListGraphqlApis


-- | List multiple functions.
--   
--   This operation returns paginated results.
module Network.AWS.AppSync.ListFunctions

-- | <i>See:</i> <a>newListFunctions</a> smart constructor.
data ListFunctions
ListFunctions' :: Maybe Text -> Maybe Natural -> Text -> ListFunctions

-- | An identifier that was returned from the previous call to this
--   operation, which can be used to return the next set of items in the
--   list.
[$sel:nextToken:ListFunctions'] :: ListFunctions -> Maybe Text

-- | The maximum number of results you want the request to return.
[$sel:maxResults:ListFunctions'] :: ListFunctions -> Maybe Natural

-- | The GraphQL API ID.
[$sel:apiId:ListFunctions'] :: ListFunctions -> Text

-- | Create a value of <a>ListFunctions</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListFunctions'</a>, <a>listFunctions_nextToken</a> -
--   An identifier that was returned from the previous call to this
--   operation, which can be used to return the next set of items in the
--   list.
--   
--   <a>$sel:maxResults:ListFunctions'</a>, <a>listFunctions_maxResults</a>
--   - The maximum number of results you want the request to return.
--   
--   <a>$sel:apiId:ListFunctions'</a>, <a>listFunctions_apiId</a> - The
--   GraphQL API ID.
newListFunctions :: Text -> ListFunctions

-- | An identifier that was returned from the previous call to this
--   operation, which can be used to return the next set of items in the
--   list.
listFunctions_nextToken :: Lens' ListFunctions (Maybe Text)

-- | The maximum number of results you want the request to return.
listFunctions_maxResults :: Lens' ListFunctions (Maybe Natural)

-- | The GraphQL API ID.
listFunctions_apiId :: Lens' ListFunctions Text

-- | <i>See:</i> <a>newListFunctionsResponse</a> smart constructor.
data ListFunctionsResponse
ListFunctionsResponse' :: Maybe Text -> Maybe [FunctionConfiguration] -> Int -> ListFunctionsResponse

-- | An identifier that was returned from the previous call to this
--   operation, which can be used to return the next set of items in the
--   list.
[$sel:nextToken:ListFunctionsResponse'] :: ListFunctionsResponse -> Maybe Text

-- | A list of <tt>Function</tt> objects.
[$sel:functions:ListFunctionsResponse'] :: ListFunctionsResponse -> Maybe [FunctionConfiguration]

-- | The response's http status code.
[$sel:httpStatus:ListFunctionsResponse'] :: ListFunctionsResponse -> Int

-- | Create a value of <a>ListFunctionsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListFunctions'</a>,
--   <a>listFunctionsResponse_nextToken</a> - An identifier that was
--   returned from the previous call to this operation, which can be used
--   to return the next set of items in the list.
--   
--   <a>$sel:functions:ListFunctionsResponse'</a>,
--   <a>listFunctionsResponse_functions</a> - A list of <tt>Function</tt>
--   objects.
--   
--   <a>$sel:httpStatus:ListFunctionsResponse'</a>,
--   <a>listFunctionsResponse_httpStatus</a> - The response's http status
--   code.
newListFunctionsResponse :: Int -> ListFunctionsResponse

-- | An identifier that was returned from the previous call to this
--   operation, which can be used to return the next set of items in the
--   list.
listFunctionsResponse_nextToken :: Lens' ListFunctionsResponse (Maybe Text)

-- | A list of <tt>Function</tt> objects.
listFunctionsResponse_functions :: Lens' ListFunctionsResponse (Maybe [FunctionConfiguration])

-- | The response's http status code.
listFunctionsResponse_httpStatus :: Lens' ListFunctionsResponse Int
instance GHC.Generics.Generic Network.AWS.AppSync.ListFunctions.ListFunctions
instance GHC.Show.Show Network.AWS.AppSync.ListFunctions.ListFunctions
instance GHC.Read.Read Network.AWS.AppSync.ListFunctions.ListFunctions
instance GHC.Classes.Eq Network.AWS.AppSync.ListFunctions.ListFunctions
instance GHC.Generics.Generic Network.AWS.AppSync.ListFunctions.ListFunctionsResponse
instance GHC.Show.Show Network.AWS.AppSync.ListFunctions.ListFunctionsResponse
instance GHC.Read.Read Network.AWS.AppSync.ListFunctions.ListFunctionsResponse
instance GHC.Classes.Eq Network.AWS.AppSync.ListFunctions.ListFunctionsResponse
instance Network.AWS.Types.AWSRequest Network.AWS.AppSync.ListFunctions.ListFunctions
instance Control.DeepSeq.NFData Network.AWS.AppSync.ListFunctions.ListFunctionsResponse
instance Network.AWS.Pager.AWSPager Network.AWS.AppSync.ListFunctions.ListFunctions
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.ListFunctions.ListFunctions
instance Control.DeepSeq.NFData Network.AWS.AppSync.ListFunctions.ListFunctions
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.AppSync.ListFunctions.ListFunctions
instance Network.AWS.Data.Path.ToPath Network.AWS.AppSync.ListFunctions.ListFunctions
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.ListFunctions.ListFunctions


-- | Lists the data sources for a given API.
--   
--   This operation returns paginated results.
module Network.AWS.AppSync.ListDataSources

-- | <i>See:</i> <a>newListDataSources</a> smart constructor.
data ListDataSources
ListDataSources' :: Maybe Text -> Maybe Natural -> Text -> ListDataSources

-- | An identifier that was returned from the previous call to this
--   operation, which can be used to return the next set of items in the
--   list.
[$sel:nextToken:ListDataSources'] :: ListDataSources -> Maybe Text

-- | The maximum number of results you want the request to return.
[$sel:maxResults:ListDataSources'] :: ListDataSources -> Maybe Natural

-- | The API ID.
[$sel:apiId:ListDataSources'] :: ListDataSources -> Text

-- | Create a value of <a>ListDataSources</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListDataSources'</a>,
--   <a>listDataSources_nextToken</a> - An identifier that was returned
--   from the previous call to this operation, which can be used to return
--   the next set of items in the list.
--   
--   <a>$sel:maxResults:ListDataSources'</a>,
--   <a>listDataSources_maxResults</a> - The maximum number of results you
--   want the request to return.
--   
--   <a>$sel:apiId:ListDataSources'</a>, <a>listDataSources_apiId</a> - The
--   API ID.
newListDataSources :: Text -> ListDataSources

-- | An identifier that was returned from the previous call to this
--   operation, which can be used to return the next set of items in the
--   list.
listDataSources_nextToken :: Lens' ListDataSources (Maybe Text)

-- | The maximum number of results you want the request to return.
listDataSources_maxResults :: Lens' ListDataSources (Maybe Natural)

-- | The API ID.
listDataSources_apiId :: Lens' ListDataSources Text

-- | <i>See:</i> <a>newListDataSourcesResponse</a> smart constructor.
data ListDataSourcesResponse
ListDataSourcesResponse' :: Maybe Text -> Maybe [DataSource] -> Int -> ListDataSourcesResponse

-- | An identifier to be passed in the next request to this operation to
--   return the next set of items in the list.
[$sel:nextToken:ListDataSourcesResponse'] :: ListDataSourcesResponse -> Maybe Text

-- | The <tt>DataSource</tt> objects.
[$sel:dataSources:ListDataSourcesResponse'] :: ListDataSourcesResponse -> Maybe [DataSource]

-- | The response's http status code.
[$sel:httpStatus:ListDataSourcesResponse'] :: ListDataSourcesResponse -> Int

-- | Create a value of <a>ListDataSourcesResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListDataSources'</a>,
--   <a>listDataSourcesResponse_nextToken</a> - An identifier to be passed
--   in the next request to this operation to return the next set of items
--   in the list.
--   
--   <a>$sel:dataSources:ListDataSourcesResponse'</a>,
--   <a>listDataSourcesResponse_dataSources</a> - The <tt>DataSource</tt>
--   objects.
--   
--   <a>$sel:httpStatus:ListDataSourcesResponse'</a>,
--   <a>listDataSourcesResponse_httpStatus</a> - The response's http status
--   code.
newListDataSourcesResponse :: Int -> ListDataSourcesResponse

-- | An identifier to be passed in the next request to this operation to
--   return the next set of items in the list.
listDataSourcesResponse_nextToken :: Lens' ListDataSourcesResponse (Maybe Text)

-- | The <tt>DataSource</tt> objects.
listDataSourcesResponse_dataSources :: Lens' ListDataSourcesResponse (Maybe [DataSource])

-- | The response's http status code.
listDataSourcesResponse_httpStatus :: Lens' ListDataSourcesResponse Int
instance GHC.Generics.Generic Network.AWS.AppSync.ListDataSources.ListDataSources
instance GHC.Show.Show Network.AWS.AppSync.ListDataSources.ListDataSources
instance GHC.Read.Read Network.AWS.AppSync.ListDataSources.ListDataSources
instance GHC.Classes.Eq Network.AWS.AppSync.ListDataSources.ListDataSources
instance GHC.Generics.Generic Network.AWS.AppSync.ListDataSources.ListDataSourcesResponse
instance GHC.Show.Show Network.AWS.AppSync.ListDataSources.ListDataSourcesResponse
instance GHC.Read.Read Network.AWS.AppSync.ListDataSources.ListDataSourcesResponse
instance GHC.Classes.Eq Network.AWS.AppSync.ListDataSources.ListDataSourcesResponse
instance Network.AWS.Types.AWSRequest Network.AWS.AppSync.ListDataSources.ListDataSources
instance Control.DeepSeq.NFData Network.AWS.AppSync.ListDataSources.ListDataSourcesResponse
instance Network.AWS.Pager.AWSPager Network.AWS.AppSync.ListDataSources.ListDataSources
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.ListDataSources.ListDataSources
instance Control.DeepSeq.NFData Network.AWS.AppSync.ListDataSources.ListDataSources
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.AppSync.ListDataSources.ListDataSources
instance Network.AWS.Data.Path.ToPath Network.AWS.AppSync.ListDataSources.ListDataSources
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.ListDataSources.ListDataSources


-- | Lists the API keys for a given API.
--   
--   API keys are deleted automatically 60 days after they expire. However,
--   they may still be included in the response until they have actually
--   been deleted. You can safely call <tt>DeleteApiKey</tt> to manually
--   delete a key before it's automatically deleted.
--   
--   This operation returns paginated results.
module Network.AWS.AppSync.ListApiKeys

-- | <i>See:</i> <a>newListApiKeys</a> smart constructor.
data ListApiKeys
ListApiKeys' :: Maybe Text -> Maybe Natural -> Text -> ListApiKeys

-- | An identifier that was returned from the previous call to this
--   operation, which can be used to return the next set of items in the
--   list.
[$sel:nextToken:ListApiKeys'] :: ListApiKeys -> Maybe Text

-- | The maximum number of results you want the request to return.
[$sel:maxResults:ListApiKeys'] :: ListApiKeys -> Maybe Natural

-- | The API ID.
[$sel:apiId:ListApiKeys'] :: ListApiKeys -> Text

-- | Create a value of <a>ListApiKeys</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListApiKeys'</a>, <a>listApiKeys_nextToken</a> - An
--   identifier that was returned from the previous call to this operation,
--   which can be used to return the next set of items in the list.
--   
--   <a>$sel:maxResults:ListApiKeys'</a>, <a>listApiKeys_maxResults</a> -
--   The maximum number of results you want the request to return.
--   
--   <a>$sel:apiId:ListApiKeys'</a>, <a>listApiKeys_apiId</a> - The API ID.
newListApiKeys :: Text -> ListApiKeys

-- | An identifier that was returned from the previous call to this
--   operation, which can be used to return the next set of items in the
--   list.
listApiKeys_nextToken :: Lens' ListApiKeys (Maybe Text)

-- | The maximum number of results you want the request to return.
listApiKeys_maxResults :: Lens' ListApiKeys (Maybe Natural)

-- | The API ID.
listApiKeys_apiId :: Lens' ListApiKeys Text

-- | <i>See:</i> <a>newListApiKeysResponse</a> smart constructor.
data ListApiKeysResponse
ListApiKeysResponse' :: Maybe Text -> Maybe [ApiKey] -> Int -> ListApiKeysResponse

-- | An identifier to be passed in the next request to this operation to
--   return the next set of items in the list.
[$sel:nextToken:ListApiKeysResponse'] :: ListApiKeysResponse -> Maybe Text

-- | The <tt>ApiKey</tt> objects.
[$sel:apiKeys:ListApiKeysResponse'] :: ListApiKeysResponse -> Maybe [ApiKey]

-- | The response's http status code.
[$sel:httpStatus:ListApiKeysResponse'] :: ListApiKeysResponse -> Int

-- | Create a value of <a>ListApiKeysResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListApiKeys'</a>,
--   <a>listApiKeysResponse_nextToken</a> - An identifier to be passed in
--   the next request to this operation to return the next set of items in
--   the list.
--   
--   <a>$sel:apiKeys:ListApiKeysResponse'</a>,
--   <a>listApiKeysResponse_apiKeys</a> - The <tt>ApiKey</tt> objects.
--   
--   <a>$sel:httpStatus:ListApiKeysResponse'</a>,
--   <a>listApiKeysResponse_httpStatus</a> - The response's http status
--   code.
newListApiKeysResponse :: Int -> ListApiKeysResponse

-- | An identifier to be passed in the next request to this operation to
--   return the next set of items in the list.
listApiKeysResponse_nextToken :: Lens' ListApiKeysResponse (Maybe Text)

-- | The <tt>ApiKey</tt> objects.
listApiKeysResponse_apiKeys :: Lens' ListApiKeysResponse (Maybe [ApiKey])

-- | The response's http status code.
listApiKeysResponse_httpStatus :: Lens' ListApiKeysResponse Int
instance GHC.Generics.Generic Network.AWS.AppSync.ListApiKeys.ListApiKeys
instance GHC.Show.Show Network.AWS.AppSync.ListApiKeys.ListApiKeys
instance GHC.Read.Read Network.AWS.AppSync.ListApiKeys.ListApiKeys
instance GHC.Classes.Eq Network.AWS.AppSync.ListApiKeys.ListApiKeys
instance GHC.Generics.Generic Network.AWS.AppSync.ListApiKeys.ListApiKeysResponse
instance GHC.Show.Show Network.AWS.AppSync.ListApiKeys.ListApiKeysResponse
instance GHC.Read.Read Network.AWS.AppSync.ListApiKeys.ListApiKeysResponse
instance GHC.Classes.Eq Network.AWS.AppSync.ListApiKeys.ListApiKeysResponse
instance Network.AWS.Types.AWSRequest Network.AWS.AppSync.ListApiKeys.ListApiKeys
instance Control.DeepSeq.NFData Network.AWS.AppSync.ListApiKeys.ListApiKeysResponse
instance Network.AWS.Pager.AWSPager Network.AWS.AppSync.ListApiKeys.ListApiKeys
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.ListApiKeys.ListApiKeys
instance Control.DeepSeq.NFData Network.AWS.AppSync.ListApiKeys.ListApiKeys
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.AppSync.ListApiKeys.ListApiKeys
instance Network.AWS.Data.Path.ToPath Network.AWS.AppSync.ListApiKeys.ListApiKeys
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.ListApiKeys.ListApiKeys


-- | Retrieves a <tt>Type</tt> object.
module Network.AWS.AppSync.GetType

-- | <i>See:</i> <a>newGetType</a> smart constructor.
data GetType
GetType' :: Text -> Text -> TypeDefinitionFormat -> GetType

-- | The API ID.
[$sel:apiId:GetType'] :: GetType -> Text

-- | The type name.
[$sel:typeName:GetType'] :: GetType -> Text

-- | The type format: SDL or JSON.
[$sel:format:GetType'] :: GetType -> TypeDefinitionFormat

-- | Create a value of <a>GetType</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiId:GetType'</a>, <a>getType_apiId</a> - The API ID.
--   
--   <a>$sel:typeName:GetType'</a>, <a>getType_typeName</a> - The type
--   name.
--   
--   <a>$sel:format:GetType'</a>, <a>getType_format</a> - The type format:
--   SDL or JSON.
newGetType :: Text -> Text -> TypeDefinitionFormat -> GetType

-- | The API ID.
getType_apiId :: Lens' GetType Text

-- | The type name.
getType_typeName :: Lens' GetType Text

-- | The type format: SDL or JSON.
getType_format :: Lens' GetType TypeDefinitionFormat

-- | <i>See:</i> <a>newGetTypeResponse</a> smart constructor.
data GetTypeResponse
GetTypeResponse' :: Maybe Type -> Int -> GetTypeResponse

-- | The <tt>Type</tt> object.
[$sel:type':GetTypeResponse'] :: GetTypeResponse -> Maybe Type

-- | The response's http status code.
[$sel:httpStatus:GetTypeResponse'] :: GetTypeResponse -> Int

-- | Create a value of <a>GetTypeResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:type':GetTypeResponse'</a>, <a>getTypeResponse_type</a> - The
--   <tt>Type</tt> object.
--   
--   <a>$sel:httpStatus:GetTypeResponse'</a>,
--   <a>getTypeResponse_httpStatus</a> - The response's http status code.
newGetTypeResponse :: Int -> GetTypeResponse

-- | The <tt>Type</tt> object.
getTypeResponse_type :: Lens' GetTypeResponse (Maybe Type)

-- | The response's http status code.
getTypeResponse_httpStatus :: Lens' GetTypeResponse Int
instance GHC.Generics.Generic Network.AWS.AppSync.GetType.GetType
instance GHC.Show.Show Network.AWS.AppSync.GetType.GetType
instance GHC.Read.Read Network.AWS.AppSync.GetType.GetType
instance GHC.Classes.Eq Network.AWS.AppSync.GetType.GetType
instance GHC.Generics.Generic Network.AWS.AppSync.GetType.GetTypeResponse
instance GHC.Show.Show Network.AWS.AppSync.GetType.GetTypeResponse
instance GHC.Read.Read Network.AWS.AppSync.GetType.GetTypeResponse
instance GHC.Classes.Eq Network.AWS.AppSync.GetType.GetTypeResponse
instance Network.AWS.Types.AWSRequest Network.AWS.AppSync.GetType.GetType
instance Control.DeepSeq.NFData Network.AWS.AppSync.GetType.GetTypeResponse
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.GetType.GetType
instance Control.DeepSeq.NFData Network.AWS.AppSync.GetType.GetType
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.AppSync.GetType.GetType
instance Network.AWS.Data.Path.ToPath Network.AWS.AppSync.GetType.GetType
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.GetType.GetType


-- | Retrieves the current status of a schema creation operation.
module Network.AWS.AppSync.GetSchemaCreationStatus

-- | <i>See:</i> <a>newGetSchemaCreationStatus</a> smart constructor.
data GetSchemaCreationStatus
GetSchemaCreationStatus' :: Text -> GetSchemaCreationStatus

-- | The API ID.
[$sel:apiId:GetSchemaCreationStatus'] :: GetSchemaCreationStatus -> Text

-- | Create a value of <a>GetSchemaCreationStatus</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiId:GetSchemaCreationStatus'</a>,
--   <a>getSchemaCreationStatus_apiId</a> - The API ID.
newGetSchemaCreationStatus :: Text -> GetSchemaCreationStatus

-- | The API ID.
getSchemaCreationStatus_apiId :: Lens' GetSchemaCreationStatus Text

-- | <i>See:</i> <a>newGetSchemaCreationStatusResponse</a> smart
--   constructor.
data GetSchemaCreationStatusResponse
GetSchemaCreationStatusResponse' :: Maybe SchemaStatus -> Maybe Text -> Int -> GetSchemaCreationStatusResponse

-- | The current state of the schema (PROCESSING, FAILED, SUCCESS, or
--   NOT_APPLICABLE). When the schema is in the ACTIVE state, you can add
--   data.
[$sel:status:GetSchemaCreationStatusResponse'] :: GetSchemaCreationStatusResponse -> Maybe SchemaStatus

-- | Detailed information about the status of the schema creation
--   operation.
[$sel:details:GetSchemaCreationStatusResponse'] :: GetSchemaCreationStatusResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:GetSchemaCreationStatusResponse'] :: GetSchemaCreationStatusResponse -> Int

-- | Create a value of <a>GetSchemaCreationStatusResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:GetSchemaCreationStatusResponse'</a>,
--   <a>getSchemaCreationStatusResponse_status</a> - The current state of
--   the schema (PROCESSING, FAILED, SUCCESS, or NOT_APPLICABLE). When the
--   schema is in the ACTIVE state, you can add data.
--   
--   <a>$sel:details:GetSchemaCreationStatusResponse'</a>,
--   <a>getSchemaCreationStatusResponse_details</a> - Detailed information
--   about the status of the schema creation operation.
--   
--   <a>$sel:httpStatus:GetSchemaCreationStatusResponse'</a>,
--   <a>getSchemaCreationStatusResponse_httpStatus</a> - The response's
--   http status code.
newGetSchemaCreationStatusResponse :: Int -> GetSchemaCreationStatusResponse

-- | The current state of the schema (PROCESSING, FAILED, SUCCESS, or
--   NOT_APPLICABLE). When the schema is in the ACTIVE state, you can add
--   data.
getSchemaCreationStatusResponse_status :: Lens' GetSchemaCreationStatusResponse (Maybe SchemaStatus)

-- | Detailed information about the status of the schema creation
--   operation.
getSchemaCreationStatusResponse_details :: Lens' GetSchemaCreationStatusResponse (Maybe Text)

-- | The response's http status code.
getSchemaCreationStatusResponse_httpStatus :: Lens' GetSchemaCreationStatusResponse Int
instance GHC.Generics.Generic Network.AWS.AppSync.GetSchemaCreationStatus.GetSchemaCreationStatus
instance GHC.Show.Show Network.AWS.AppSync.GetSchemaCreationStatus.GetSchemaCreationStatus
instance GHC.Read.Read Network.AWS.AppSync.GetSchemaCreationStatus.GetSchemaCreationStatus
instance GHC.Classes.Eq Network.AWS.AppSync.GetSchemaCreationStatus.GetSchemaCreationStatus
instance GHC.Generics.Generic Network.AWS.AppSync.GetSchemaCreationStatus.GetSchemaCreationStatusResponse
instance GHC.Show.Show Network.AWS.AppSync.GetSchemaCreationStatus.GetSchemaCreationStatusResponse
instance GHC.Read.Read Network.AWS.AppSync.GetSchemaCreationStatus.GetSchemaCreationStatusResponse
instance GHC.Classes.Eq Network.AWS.AppSync.GetSchemaCreationStatus.GetSchemaCreationStatusResponse
instance Network.AWS.Types.AWSRequest Network.AWS.AppSync.GetSchemaCreationStatus.GetSchemaCreationStatus
instance Control.DeepSeq.NFData Network.AWS.AppSync.GetSchemaCreationStatus.GetSchemaCreationStatusResponse
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.GetSchemaCreationStatus.GetSchemaCreationStatus
instance Control.DeepSeq.NFData Network.AWS.AppSync.GetSchemaCreationStatus.GetSchemaCreationStatus
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.AppSync.GetSchemaCreationStatus.GetSchemaCreationStatus
instance Network.AWS.Data.Path.ToPath Network.AWS.AppSync.GetSchemaCreationStatus.GetSchemaCreationStatus
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.GetSchemaCreationStatus.GetSchemaCreationStatus


-- | Retrieves a <tt>Resolver</tt> object.
module Network.AWS.AppSync.GetResolver

-- | <i>See:</i> <a>newGetResolver</a> smart constructor.
data GetResolver
GetResolver' :: Text -> Text -> Text -> GetResolver

-- | The API ID.
[$sel:apiId:GetResolver'] :: GetResolver -> Text

-- | The resolver type name.
[$sel:typeName:GetResolver'] :: GetResolver -> Text

-- | The resolver field name.
[$sel:fieldName:GetResolver'] :: GetResolver -> Text

-- | Create a value of <a>GetResolver</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiId:GetResolver'</a>, <a>getResolver_apiId</a> - The API ID.
--   
--   <a>$sel:typeName:GetResolver'</a>, <a>getResolver_typeName</a> - The
--   resolver type name.
--   
--   <a>$sel:fieldName:GetResolver'</a>, <a>getResolver_fieldName</a> - The
--   resolver field name.
newGetResolver :: Text -> Text -> Text -> GetResolver

-- | The API ID.
getResolver_apiId :: Lens' GetResolver Text

-- | The resolver type name.
getResolver_typeName :: Lens' GetResolver Text

-- | The resolver field name.
getResolver_fieldName :: Lens' GetResolver Text

-- | <i>See:</i> <a>newGetResolverResponse</a> smart constructor.
data GetResolverResponse
GetResolverResponse' :: Maybe Resolver -> Int -> GetResolverResponse

-- | The <tt>Resolver</tt> object.
[$sel:resolver:GetResolverResponse'] :: GetResolverResponse -> Maybe Resolver

-- | The response's http status code.
[$sel:httpStatus:GetResolverResponse'] :: GetResolverResponse -> Int

-- | Create a value of <a>GetResolverResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resolver:GetResolverResponse'</a>,
--   <a>getResolverResponse_resolver</a> - The <tt>Resolver</tt> object.
--   
--   <a>$sel:httpStatus:GetResolverResponse'</a>,
--   <a>getResolverResponse_httpStatus</a> - The response's http status
--   code.
newGetResolverResponse :: Int -> GetResolverResponse

-- | The <tt>Resolver</tt> object.
getResolverResponse_resolver :: Lens' GetResolverResponse (Maybe Resolver)

-- | The response's http status code.
getResolverResponse_httpStatus :: Lens' GetResolverResponse Int
instance GHC.Generics.Generic Network.AWS.AppSync.GetResolver.GetResolver
instance GHC.Show.Show Network.AWS.AppSync.GetResolver.GetResolver
instance GHC.Read.Read Network.AWS.AppSync.GetResolver.GetResolver
instance GHC.Classes.Eq Network.AWS.AppSync.GetResolver.GetResolver
instance GHC.Generics.Generic Network.AWS.AppSync.GetResolver.GetResolverResponse
instance GHC.Show.Show Network.AWS.AppSync.GetResolver.GetResolverResponse
instance GHC.Read.Read Network.AWS.AppSync.GetResolver.GetResolverResponse
instance GHC.Classes.Eq Network.AWS.AppSync.GetResolver.GetResolverResponse
instance Network.AWS.Types.AWSRequest Network.AWS.AppSync.GetResolver.GetResolver
instance Control.DeepSeq.NFData Network.AWS.AppSync.GetResolver.GetResolverResponse
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.GetResolver.GetResolver
instance Control.DeepSeq.NFData Network.AWS.AppSync.GetResolver.GetResolver
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.AppSync.GetResolver.GetResolver
instance Network.AWS.Data.Path.ToPath Network.AWS.AppSync.GetResolver.GetResolver
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.GetResolver.GetResolver


-- | Retrieves the introspection schema for a GraphQL API.
module Network.AWS.AppSync.GetIntrospectionSchema

-- | <i>See:</i> <a>newGetIntrospectionSchema</a> smart constructor.
data GetIntrospectionSchema
GetIntrospectionSchema' :: Maybe Bool -> Text -> OutputType -> GetIntrospectionSchema

-- | A flag that specifies whether the schema introspection should contain
--   directives.
[$sel:includeDirectives:GetIntrospectionSchema'] :: GetIntrospectionSchema -> Maybe Bool

-- | The API ID.
[$sel:apiId:GetIntrospectionSchema'] :: GetIntrospectionSchema -> Text

-- | The schema format: SDL or JSON.
[$sel:format:GetIntrospectionSchema'] :: GetIntrospectionSchema -> OutputType

-- | Create a value of <a>GetIntrospectionSchema</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:includeDirectives:GetIntrospectionSchema'</a>,
--   <a>getIntrospectionSchema_includeDirectives</a> - A flag that
--   specifies whether the schema introspection should contain directives.
--   
--   <a>$sel:apiId:GetIntrospectionSchema'</a>,
--   <a>getIntrospectionSchema_apiId</a> - The API ID.
--   
--   <a>$sel:format:GetIntrospectionSchema'</a>,
--   <a>getIntrospectionSchema_format</a> - The schema format: SDL or JSON.
newGetIntrospectionSchema :: Text -> OutputType -> GetIntrospectionSchema

-- | A flag that specifies whether the schema introspection should contain
--   directives.
getIntrospectionSchema_includeDirectives :: Lens' GetIntrospectionSchema (Maybe Bool)

-- | The API ID.
getIntrospectionSchema_apiId :: Lens' GetIntrospectionSchema Text

-- | The schema format: SDL or JSON.
getIntrospectionSchema_format :: Lens' GetIntrospectionSchema OutputType

-- | <i>See:</i> <a>newGetIntrospectionSchemaResponse</a> smart
--   constructor.
data GetIntrospectionSchemaResponse
GetIntrospectionSchemaResponse' :: Maybe ByteString -> Int -> GetIntrospectionSchemaResponse

-- | The schema, in GraphQL Schema Definition Language (SDL) format.
--   
--   For more information, see the <a>GraphQL SDL documentation</a>.
[$sel:schema:GetIntrospectionSchemaResponse'] :: GetIntrospectionSchemaResponse -> Maybe ByteString

-- | The response's http status code.
[$sel:httpStatus:GetIntrospectionSchemaResponse'] :: GetIntrospectionSchemaResponse -> Int

-- | Create a value of <a>GetIntrospectionSchemaResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:schema:GetIntrospectionSchemaResponse'</a>,
--   <a>getIntrospectionSchemaResponse_schema</a> - The schema, in GraphQL
--   Schema Definition Language (SDL) format.
--   
--   For more information, see the <a>GraphQL SDL documentation</a>.
--   
--   <a>$sel:httpStatus:GetIntrospectionSchemaResponse'</a>,
--   <a>getIntrospectionSchemaResponse_httpStatus</a> - The response's http
--   status code.
newGetIntrospectionSchemaResponse :: Int -> GetIntrospectionSchemaResponse

-- | The schema, in GraphQL Schema Definition Language (SDL) format.
--   
--   For more information, see the <a>GraphQL SDL documentation</a>.
getIntrospectionSchemaResponse_schema :: Lens' GetIntrospectionSchemaResponse (Maybe ByteString)

-- | The response's http status code.
getIntrospectionSchemaResponse_httpStatus :: Lens' GetIntrospectionSchemaResponse Int
instance GHC.Generics.Generic Network.AWS.AppSync.GetIntrospectionSchema.GetIntrospectionSchema
instance GHC.Show.Show Network.AWS.AppSync.GetIntrospectionSchema.GetIntrospectionSchema
instance GHC.Read.Read Network.AWS.AppSync.GetIntrospectionSchema.GetIntrospectionSchema
instance GHC.Classes.Eq Network.AWS.AppSync.GetIntrospectionSchema.GetIntrospectionSchema
instance GHC.Generics.Generic Network.AWS.AppSync.GetIntrospectionSchema.GetIntrospectionSchemaResponse
instance GHC.Show.Show Network.AWS.AppSync.GetIntrospectionSchema.GetIntrospectionSchemaResponse
instance GHC.Read.Read Network.AWS.AppSync.GetIntrospectionSchema.GetIntrospectionSchemaResponse
instance GHC.Classes.Eq Network.AWS.AppSync.GetIntrospectionSchema.GetIntrospectionSchemaResponse
instance Network.AWS.Types.AWSRequest Network.AWS.AppSync.GetIntrospectionSchema.GetIntrospectionSchema
instance Control.DeepSeq.NFData Network.AWS.AppSync.GetIntrospectionSchema.GetIntrospectionSchemaResponse
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.GetIntrospectionSchema.GetIntrospectionSchema
instance Control.DeepSeq.NFData Network.AWS.AppSync.GetIntrospectionSchema.GetIntrospectionSchema
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.AppSync.GetIntrospectionSchema.GetIntrospectionSchema
instance Network.AWS.Data.Path.ToPath Network.AWS.AppSync.GetIntrospectionSchema.GetIntrospectionSchema
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.GetIntrospectionSchema.GetIntrospectionSchema


-- | Retrieves a <tt>GraphqlApi</tt> object.
module Network.AWS.AppSync.GetGraphqlApi

-- | <i>See:</i> <a>newGetGraphqlApi</a> smart constructor.
data GetGraphqlApi
GetGraphqlApi' :: Text -> GetGraphqlApi

-- | The API ID for the GraphQL API.
[$sel:apiId:GetGraphqlApi'] :: GetGraphqlApi -> Text

-- | Create a value of <a>GetGraphqlApi</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiId:GetGraphqlApi'</a>, <a>getGraphqlApi_apiId</a> - The API
--   ID for the GraphQL API.
newGetGraphqlApi :: Text -> GetGraphqlApi

-- | The API ID for the GraphQL API.
getGraphqlApi_apiId :: Lens' GetGraphqlApi Text

-- | <i>See:</i> <a>newGetGraphqlApiResponse</a> smart constructor.
data GetGraphqlApiResponse
GetGraphqlApiResponse' :: Maybe GraphqlApi -> Int -> GetGraphqlApiResponse

-- | The <tt>GraphqlApi</tt> object.
[$sel:graphqlApi:GetGraphqlApiResponse'] :: GetGraphqlApiResponse -> Maybe GraphqlApi

-- | The response's http status code.
[$sel:httpStatus:GetGraphqlApiResponse'] :: GetGraphqlApiResponse -> Int

-- | Create a value of <a>GetGraphqlApiResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:graphqlApi:GetGraphqlApiResponse'</a>,
--   <a>getGraphqlApiResponse_graphqlApi</a> - The <tt>GraphqlApi</tt>
--   object.
--   
--   <a>$sel:httpStatus:GetGraphqlApiResponse'</a>,
--   <a>getGraphqlApiResponse_httpStatus</a> - The response's http status
--   code.
newGetGraphqlApiResponse :: Int -> GetGraphqlApiResponse

-- | The <tt>GraphqlApi</tt> object.
getGraphqlApiResponse_graphqlApi :: Lens' GetGraphqlApiResponse (Maybe GraphqlApi)

-- | The response's http status code.
getGraphqlApiResponse_httpStatus :: Lens' GetGraphqlApiResponse Int
instance GHC.Generics.Generic Network.AWS.AppSync.GetGraphqlApi.GetGraphqlApi
instance GHC.Show.Show Network.AWS.AppSync.GetGraphqlApi.GetGraphqlApi
instance GHC.Read.Read Network.AWS.AppSync.GetGraphqlApi.GetGraphqlApi
instance GHC.Classes.Eq Network.AWS.AppSync.GetGraphqlApi.GetGraphqlApi
instance GHC.Generics.Generic Network.AWS.AppSync.GetGraphqlApi.GetGraphqlApiResponse
instance GHC.Show.Show Network.AWS.AppSync.GetGraphqlApi.GetGraphqlApiResponse
instance GHC.Read.Read Network.AWS.AppSync.GetGraphqlApi.GetGraphqlApiResponse
instance GHC.Classes.Eq Network.AWS.AppSync.GetGraphqlApi.GetGraphqlApiResponse
instance Network.AWS.Types.AWSRequest Network.AWS.AppSync.GetGraphqlApi.GetGraphqlApi
instance Control.DeepSeq.NFData Network.AWS.AppSync.GetGraphqlApi.GetGraphqlApiResponse
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.GetGraphqlApi.GetGraphqlApi
instance Control.DeepSeq.NFData Network.AWS.AppSync.GetGraphqlApi.GetGraphqlApi
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.AppSync.GetGraphqlApi.GetGraphqlApi
instance Network.AWS.Data.Path.ToPath Network.AWS.AppSync.GetGraphqlApi.GetGraphqlApi
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.GetGraphqlApi.GetGraphqlApi


-- | Get a <tt>Function</tt>.
module Network.AWS.AppSync.GetFunction

-- | <i>See:</i> <a>newGetFunction</a> smart constructor.
data GetFunction
GetFunction' :: Text -> Text -> GetFunction

-- | The GraphQL API ID.
[$sel:apiId:GetFunction'] :: GetFunction -> Text

-- | The <tt>Function</tt> ID.
[$sel:functionId:GetFunction'] :: GetFunction -> Text

-- | Create a value of <a>GetFunction</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiId:GetFunction'</a>, <a>getFunction_apiId</a> - The GraphQL
--   API ID.
--   
--   <a>$sel:functionId:GetFunction'</a>, <a>getFunction_functionId</a> -
--   The <tt>Function</tt> ID.
newGetFunction :: Text -> Text -> GetFunction

-- | The GraphQL API ID.
getFunction_apiId :: Lens' GetFunction Text

-- | The <tt>Function</tt> ID.
getFunction_functionId :: Lens' GetFunction Text

-- | <i>See:</i> <a>newGetFunctionResponse</a> smart constructor.
data GetFunctionResponse
GetFunctionResponse' :: Maybe FunctionConfiguration -> Int -> GetFunctionResponse

-- | The <tt>Function</tt> object.
[$sel:functionConfiguration:GetFunctionResponse'] :: GetFunctionResponse -> Maybe FunctionConfiguration

-- | The response's http status code.
[$sel:httpStatus:GetFunctionResponse'] :: GetFunctionResponse -> Int

-- | Create a value of <a>GetFunctionResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:functionConfiguration:GetFunctionResponse'</a>,
--   <a>getFunctionResponse_functionConfiguration</a> - The
--   <tt>Function</tt> object.
--   
--   <a>$sel:httpStatus:GetFunctionResponse'</a>,
--   <a>getFunctionResponse_httpStatus</a> - The response's http status
--   code.
newGetFunctionResponse :: Int -> GetFunctionResponse

-- | The <tt>Function</tt> object.
getFunctionResponse_functionConfiguration :: Lens' GetFunctionResponse (Maybe FunctionConfiguration)

-- | The response's http status code.
getFunctionResponse_httpStatus :: Lens' GetFunctionResponse Int
instance GHC.Generics.Generic Network.AWS.AppSync.GetFunction.GetFunction
instance GHC.Show.Show Network.AWS.AppSync.GetFunction.GetFunction
instance GHC.Read.Read Network.AWS.AppSync.GetFunction.GetFunction
instance GHC.Classes.Eq Network.AWS.AppSync.GetFunction.GetFunction
instance GHC.Generics.Generic Network.AWS.AppSync.GetFunction.GetFunctionResponse
instance GHC.Show.Show Network.AWS.AppSync.GetFunction.GetFunctionResponse
instance GHC.Read.Read Network.AWS.AppSync.GetFunction.GetFunctionResponse
instance GHC.Classes.Eq Network.AWS.AppSync.GetFunction.GetFunctionResponse
instance Network.AWS.Types.AWSRequest Network.AWS.AppSync.GetFunction.GetFunction
instance Control.DeepSeq.NFData Network.AWS.AppSync.GetFunction.GetFunctionResponse
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.GetFunction.GetFunction
instance Control.DeepSeq.NFData Network.AWS.AppSync.GetFunction.GetFunction
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.AppSync.GetFunction.GetFunction
instance Network.AWS.Data.Path.ToPath Network.AWS.AppSync.GetFunction.GetFunction
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.GetFunction.GetFunction


-- | Retrieves a <tt>DataSource</tt> object.
module Network.AWS.AppSync.GetDataSource

-- | <i>See:</i> <a>newGetDataSource</a> smart constructor.
data GetDataSource
GetDataSource' :: Text -> Text -> GetDataSource

-- | The API ID.
[$sel:apiId:GetDataSource'] :: GetDataSource -> Text

-- | The name of the data source.
[$sel:name:GetDataSource'] :: GetDataSource -> Text

-- | Create a value of <a>GetDataSource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiId:GetDataSource'</a>, <a>getDataSource_apiId</a> - The API
--   ID.
--   
--   <a>$sel:name:GetDataSource'</a>, <a>getDataSource_name</a> - The name
--   of the data source.
newGetDataSource :: Text -> Text -> GetDataSource

-- | The API ID.
getDataSource_apiId :: Lens' GetDataSource Text

-- | The name of the data source.
getDataSource_name :: Lens' GetDataSource Text

-- | <i>See:</i> <a>newGetDataSourceResponse</a> smart constructor.
data GetDataSourceResponse
GetDataSourceResponse' :: Maybe DataSource -> Int -> GetDataSourceResponse

-- | The <tt>DataSource</tt> object.
[$sel:dataSource:GetDataSourceResponse'] :: GetDataSourceResponse -> Maybe DataSource

-- | The response's http status code.
[$sel:httpStatus:GetDataSourceResponse'] :: GetDataSourceResponse -> Int

-- | Create a value of <a>GetDataSourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dataSource:GetDataSourceResponse'</a>,
--   <a>getDataSourceResponse_dataSource</a> - The <tt>DataSource</tt>
--   object.
--   
--   <a>$sel:httpStatus:GetDataSourceResponse'</a>,
--   <a>getDataSourceResponse_httpStatus</a> - The response's http status
--   code.
newGetDataSourceResponse :: Int -> GetDataSourceResponse

-- | The <tt>DataSource</tt> object.
getDataSourceResponse_dataSource :: Lens' GetDataSourceResponse (Maybe DataSource)

-- | The response's http status code.
getDataSourceResponse_httpStatus :: Lens' GetDataSourceResponse Int
instance GHC.Generics.Generic Network.AWS.AppSync.GetDataSource.GetDataSource
instance GHC.Show.Show Network.AWS.AppSync.GetDataSource.GetDataSource
instance GHC.Read.Read Network.AWS.AppSync.GetDataSource.GetDataSource
instance GHC.Classes.Eq Network.AWS.AppSync.GetDataSource.GetDataSource
instance GHC.Generics.Generic Network.AWS.AppSync.GetDataSource.GetDataSourceResponse
instance GHC.Show.Show Network.AWS.AppSync.GetDataSource.GetDataSourceResponse
instance GHC.Read.Read Network.AWS.AppSync.GetDataSource.GetDataSourceResponse
instance GHC.Classes.Eq Network.AWS.AppSync.GetDataSource.GetDataSourceResponse
instance Network.AWS.Types.AWSRequest Network.AWS.AppSync.GetDataSource.GetDataSource
instance Control.DeepSeq.NFData Network.AWS.AppSync.GetDataSource.GetDataSourceResponse
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.GetDataSource.GetDataSource
instance Control.DeepSeq.NFData Network.AWS.AppSync.GetDataSource.GetDataSource
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.AppSync.GetDataSource.GetDataSource
instance Network.AWS.Data.Path.ToPath Network.AWS.AppSync.GetDataSource.GetDataSource
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.GetDataSource.GetDataSource


-- | Retrieves an <tt>ApiCache</tt> object.
module Network.AWS.AppSync.GetApiCache

-- | Represents the input of a <tt>GetApiCache</tt> operation.
--   
--   <i>See:</i> <a>newGetApiCache</a> smart constructor.
data GetApiCache
GetApiCache' :: Text -> GetApiCache

-- | The API ID.
[$sel:apiId:GetApiCache'] :: GetApiCache -> Text

-- | Create a value of <a>GetApiCache</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiId:GetApiCache'</a>, <a>getApiCache_apiId</a> - The API ID.
newGetApiCache :: Text -> GetApiCache

-- | The API ID.
getApiCache_apiId :: Lens' GetApiCache Text

-- | Represents the output of a <tt>GetApiCache</tt> operation.
--   
--   <i>See:</i> <a>newGetApiCacheResponse</a> smart constructor.
data GetApiCacheResponse
GetApiCacheResponse' :: Maybe ApiCache -> Int -> GetApiCacheResponse

-- | The <tt>ApiCache</tt> object.
[$sel:apiCache:GetApiCacheResponse'] :: GetApiCacheResponse -> Maybe ApiCache

-- | The response's http status code.
[$sel:httpStatus:GetApiCacheResponse'] :: GetApiCacheResponse -> Int

-- | Create a value of <a>GetApiCacheResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiCache:GetApiCacheResponse'</a>,
--   <a>getApiCacheResponse_apiCache</a> - The <tt>ApiCache</tt> object.
--   
--   <a>$sel:httpStatus:GetApiCacheResponse'</a>,
--   <a>getApiCacheResponse_httpStatus</a> - The response's http status
--   code.
newGetApiCacheResponse :: Int -> GetApiCacheResponse

-- | The <tt>ApiCache</tt> object.
getApiCacheResponse_apiCache :: Lens' GetApiCacheResponse (Maybe ApiCache)

-- | The response's http status code.
getApiCacheResponse_httpStatus :: Lens' GetApiCacheResponse Int
instance GHC.Generics.Generic Network.AWS.AppSync.GetApiCache.GetApiCache
instance GHC.Show.Show Network.AWS.AppSync.GetApiCache.GetApiCache
instance GHC.Read.Read Network.AWS.AppSync.GetApiCache.GetApiCache
instance GHC.Classes.Eq Network.AWS.AppSync.GetApiCache.GetApiCache
instance GHC.Generics.Generic Network.AWS.AppSync.GetApiCache.GetApiCacheResponse
instance GHC.Show.Show Network.AWS.AppSync.GetApiCache.GetApiCacheResponse
instance GHC.Read.Read Network.AWS.AppSync.GetApiCache.GetApiCacheResponse
instance GHC.Classes.Eq Network.AWS.AppSync.GetApiCache.GetApiCacheResponse
instance Network.AWS.Types.AWSRequest Network.AWS.AppSync.GetApiCache.GetApiCache
instance Control.DeepSeq.NFData Network.AWS.AppSync.GetApiCache.GetApiCacheResponse
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.GetApiCache.GetApiCache
instance Control.DeepSeq.NFData Network.AWS.AppSync.GetApiCache.GetApiCache
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.AppSync.GetApiCache.GetApiCache
instance Network.AWS.Data.Path.ToPath Network.AWS.AppSync.GetApiCache.GetApiCache
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.GetApiCache.GetApiCache


-- | Flushes an <tt>ApiCache</tt> object.
module Network.AWS.AppSync.FlushApiCache

-- | Represents the input of a <tt>FlushApiCache</tt> operation.
--   
--   <i>See:</i> <a>newFlushApiCache</a> smart constructor.
data FlushApiCache
FlushApiCache' :: Text -> FlushApiCache

-- | The API ID.
[$sel:apiId:FlushApiCache'] :: FlushApiCache -> Text

-- | Create a value of <a>FlushApiCache</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiId:FlushApiCache'</a>, <a>flushApiCache_apiId</a> - The API
--   ID.
newFlushApiCache :: Text -> FlushApiCache

-- | The API ID.
flushApiCache_apiId :: Lens' FlushApiCache Text

-- | Represents the output of a <tt>FlushApiCache</tt> operation.
--   
--   <i>See:</i> <a>newFlushApiCacheResponse</a> smart constructor.
data FlushApiCacheResponse
FlushApiCacheResponse' :: Int -> FlushApiCacheResponse

-- | The response's http status code.
[$sel:httpStatus:FlushApiCacheResponse'] :: FlushApiCacheResponse -> Int

-- | Create a value of <a>FlushApiCacheResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:FlushApiCacheResponse'</a>,
--   <a>flushApiCacheResponse_httpStatus</a> - The response's http status
--   code.
newFlushApiCacheResponse :: Int -> FlushApiCacheResponse

-- | The response's http status code.
flushApiCacheResponse_httpStatus :: Lens' FlushApiCacheResponse Int
instance GHC.Generics.Generic Network.AWS.AppSync.FlushApiCache.FlushApiCache
instance GHC.Show.Show Network.AWS.AppSync.FlushApiCache.FlushApiCache
instance GHC.Read.Read Network.AWS.AppSync.FlushApiCache.FlushApiCache
instance GHC.Classes.Eq Network.AWS.AppSync.FlushApiCache.FlushApiCache
instance GHC.Generics.Generic Network.AWS.AppSync.FlushApiCache.FlushApiCacheResponse
instance GHC.Show.Show Network.AWS.AppSync.FlushApiCache.FlushApiCacheResponse
instance GHC.Read.Read Network.AWS.AppSync.FlushApiCache.FlushApiCacheResponse
instance GHC.Classes.Eq Network.AWS.AppSync.FlushApiCache.FlushApiCacheResponse
instance Network.AWS.Types.AWSRequest Network.AWS.AppSync.FlushApiCache.FlushApiCache
instance Control.DeepSeq.NFData Network.AWS.AppSync.FlushApiCache.FlushApiCacheResponse
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.FlushApiCache.FlushApiCache
instance Control.DeepSeq.NFData Network.AWS.AppSync.FlushApiCache.FlushApiCache
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.AppSync.FlushApiCache.FlushApiCache
instance Network.AWS.Data.Path.ToPath Network.AWS.AppSync.FlushApiCache.FlushApiCache
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.FlushApiCache.FlushApiCache


-- | Deletes a <tt>Type</tt> object.
module Network.AWS.AppSync.DeleteType

-- | <i>See:</i> <a>newDeleteType</a> smart constructor.
data DeleteType
DeleteType' :: Text -> Text -> DeleteType

-- | The API ID.
[$sel:apiId:DeleteType'] :: DeleteType -> Text

-- | The type name.
[$sel:typeName:DeleteType'] :: DeleteType -> Text

-- | Create a value of <a>DeleteType</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiId:DeleteType'</a>, <a>deleteType_apiId</a> - The API ID.
--   
--   <a>$sel:typeName:DeleteType'</a>, <a>deleteType_typeName</a> - The
--   type name.
newDeleteType :: Text -> Text -> DeleteType

-- | The API ID.
deleteType_apiId :: Lens' DeleteType Text

-- | The type name.
deleteType_typeName :: Lens' DeleteType Text

-- | <i>See:</i> <a>newDeleteTypeResponse</a> smart constructor.
data DeleteTypeResponse
DeleteTypeResponse' :: Int -> DeleteTypeResponse

-- | The response's http status code.
[$sel:httpStatus:DeleteTypeResponse'] :: DeleteTypeResponse -> Int

-- | Create a value of <a>DeleteTypeResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteTypeResponse'</a>,
--   <a>deleteTypeResponse_httpStatus</a> - The response's http status
--   code.
newDeleteTypeResponse :: Int -> DeleteTypeResponse

-- | The response's http status code.
deleteTypeResponse_httpStatus :: Lens' DeleteTypeResponse Int
instance GHC.Generics.Generic Network.AWS.AppSync.DeleteType.DeleteType
instance GHC.Show.Show Network.AWS.AppSync.DeleteType.DeleteType
instance GHC.Read.Read Network.AWS.AppSync.DeleteType.DeleteType
instance GHC.Classes.Eq Network.AWS.AppSync.DeleteType.DeleteType
instance GHC.Generics.Generic Network.AWS.AppSync.DeleteType.DeleteTypeResponse
instance GHC.Show.Show Network.AWS.AppSync.DeleteType.DeleteTypeResponse
instance GHC.Read.Read Network.AWS.AppSync.DeleteType.DeleteTypeResponse
instance GHC.Classes.Eq Network.AWS.AppSync.DeleteType.DeleteTypeResponse
instance Network.AWS.Types.AWSRequest Network.AWS.AppSync.DeleteType.DeleteType
instance Control.DeepSeq.NFData Network.AWS.AppSync.DeleteType.DeleteTypeResponse
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.DeleteType.DeleteType
instance Control.DeepSeq.NFData Network.AWS.AppSync.DeleteType.DeleteType
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.AppSync.DeleteType.DeleteType
instance Network.AWS.Data.Path.ToPath Network.AWS.AppSync.DeleteType.DeleteType
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.DeleteType.DeleteType


-- | Deletes a <tt>Resolver</tt> object.
module Network.AWS.AppSync.DeleteResolver

-- | <i>See:</i> <a>newDeleteResolver</a> smart constructor.
data DeleteResolver
DeleteResolver' :: Text -> Text -> Text -> DeleteResolver

-- | The API ID.
[$sel:apiId:DeleteResolver'] :: DeleteResolver -> Text

-- | The name of the resolver type.
[$sel:typeName:DeleteResolver'] :: DeleteResolver -> Text

-- | The resolver field name.
[$sel:fieldName:DeleteResolver'] :: DeleteResolver -> Text

-- | Create a value of <a>DeleteResolver</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiId:DeleteResolver'</a>, <a>deleteResolver_apiId</a> - The
--   API ID.
--   
--   <a>$sel:typeName:DeleteResolver'</a>, <a>deleteResolver_typeName</a> -
--   The name of the resolver type.
--   
--   <a>$sel:fieldName:DeleteResolver'</a>, <a>deleteResolver_fieldName</a>
--   - The resolver field name.
newDeleteResolver :: Text -> Text -> Text -> DeleteResolver

-- | The API ID.
deleteResolver_apiId :: Lens' DeleteResolver Text

-- | The name of the resolver type.
deleteResolver_typeName :: Lens' DeleteResolver Text

-- | The resolver field name.
deleteResolver_fieldName :: Lens' DeleteResolver Text

-- | <i>See:</i> <a>newDeleteResolverResponse</a> smart constructor.
data DeleteResolverResponse
DeleteResolverResponse' :: Int -> DeleteResolverResponse

-- | The response's http status code.
[$sel:httpStatus:DeleteResolverResponse'] :: DeleteResolverResponse -> Int

-- | Create a value of <a>DeleteResolverResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteResolverResponse'</a>,
--   <a>deleteResolverResponse_httpStatus</a> - The response's http status
--   code.
newDeleteResolverResponse :: Int -> DeleteResolverResponse

-- | The response's http status code.
deleteResolverResponse_httpStatus :: Lens' DeleteResolverResponse Int
instance GHC.Generics.Generic Network.AWS.AppSync.DeleteResolver.DeleteResolver
instance GHC.Show.Show Network.AWS.AppSync.DeleteResolver.DeleteResolver
instance GHC.Read.Read Network.AWS.AppSync.DeleteResolver.DeleteResolver
instance GHC.Classes.Eq Network.AWS.AppSync.DeleteResolver.DeleteResolver
instance GHC.Generics.Generic Network.AWS.AppSync.DeleteResolver.DeleteResolverResponse
instance GHC.Show.Show Network.AWS.AppSync.DeleteResolver.DeleteResolverResponse
instance GHC.Read.Read Network.AWS.AppSync.DeleteResolver.DeleteResolverResponse
instance GHC.Classes.Eq Network.AWS.AppSync.DeleteResolver.DeleteResolverResponse
instance Network.AWS.Types.AWSRequest Network.AWS.AppSync.DeleteResolver.DeleteResolver
instance Control.DeepSeq.NFData Network.AWS.AppSync.DeleteResolver.DeleteResolverResponse
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.DeleteResolver.DeleteResolver
instance Control.DeepSeq.NFData Network.AWS.AppSync.DeleteResolver.DeleteResolver
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.AppSync.DeleteResolver.DeleteResolver
instance Network.AWS.Data.Path.ToPath Network.AWS.AppSync.DeleteResolver.DeleteResolver
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.DeleteResolver.DeleteResolver


-- | Deletes a <tt>GraphqlApi</tt> object.
module Network.AWS.AppSync.DeleteGraphqlApi

-- | <i>See:</i> <a>newDeleteGraphqlApi</a> smart constructor.
data DeleteGraphqlApi
DeleteGraphqlApi' :: Text -> DeleteGraphqlApi

-- | The API ID.
[$sel:apiId:DeleteGraphqlApi'] :: DeleteGraphqlApi -> Text

-- | Create a value of <a>DeleteGraphqlApi</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiId:DeleteGraphqlApi'</a>, <a>deleteGraphqlApi_apiId</a> -
--   The API ID.
newDeleteGraphqlApi :: Text -> DeleteGraphqlApi

-- | The API ID.
deleteGraphqlApi_apiId :: Lens' DeleteGraphqlApi Text

-- | <i>See:</i> <a>newDeleteGraphqlApiResponse</a> smart constructor.
data DeleteGraphqlApiResponse
DeleteGraphqlApiResponse' :: Int -> DeleteGraphqlApiResponse

-- | The response's http status code.
[$sel:httpStatus:DeleteGraphqlApiResponse'] :: DeleteGraphqlApiResponse -> Int

-- | Create a value of <a>DeleteGraphqlApiResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteGraphqlApiResponse'</a>,
--   <a>deleteGraphqlApiResponse_httpStatus</a> - The response's http
--   status code.
newDeleteGraphqlApiResponse :: Int -> DeleteGraphqlApiResponse

-- | The response's http status code.
deleteGraphqlApiResponse_httpStatus :: Lens' DeleteGraphqlApiResponse Int
instance GHC.Generics.Generic Network.AWS.AppSync.DeleteGraphqlApi.DeleteGraphqlApi
instance GHC.Show.Show Network.AWS.AppSync.DeleteGraphqlApi.DeleteGraphqlApi
instance GHC.Read.Read Network.AWS.AppSync.DeleteGraphqlApi.DeleteGraphqlApi
instance GHC.Classes.Eq Network.AWS.AppSync.DeleteGraphqlApi.DeleteGraphqlApi
instance GHC.Generics.Generic Network.AWS.AppSync.DeleteGraphqlApi.DeleteGraphqlApiResponse
instance GHC.Show.Show Network.AWS.AppSync.DeleteGraphqlApi.DeleteGraphqlApiResponse
instance GHC.Read.Read Network.AWS.AppSync.DeleteGraphqlApi.DeleteGraphqlApiResponse
instance GHC.Classes.Eq Network.AWS.AppSync.DeleteGraphqlApi.DeleteGraphqlApiResponse
instance Network.AWS.Types.AWSRequest Network.AWS.AppSync.DeleteGraphqlApi.DeleteGraphqlApi
instance Control.DeepSeq.NFData Network.AWS.AppSync.DeleteGraphqlApi.DeleteGraphqlApiResponse
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.DeleteGraphqlApi.DeleteGraphqlApi
instance Control.DeepSeq.NFData Network.AWS.AppSync.DeleteGraphqlApi.DeleteGraphqlApi
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.AppSync.DeleteGraphqlApi.DeleteGraphqlApi
instance Network.AWS.Data.Path.ToPath Network.AWS.AppSync.DeleteGraphqlApi.DeleteGraphqlApi
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.DeleteGraphqlApi.DeleteGraphqlApi


-- | Deletes a <tt>Function</tt>.
module Network.AWS.AppSync.DeleteFunction

-- | <i>See:</i> <a>newDeleteFunction</a> smart constructor.
data DeleteFunction
DeleteFunction' :: Text -> Text -> DeleteFunction

-- | The GraphQL API ID.
[$sel:apiId:DeleteFunction'] :: DeleteFunction -> Text

-- | The <tt>Function</tt> ID.
[$sel:functionId:DeleteFunction'] :: DeleteFunction -> Text

-- | Create a value of <a>DeleteFunction</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiId:DeleteFunction'</a>, <a>deleteFunction_apiId</a> - The
--   GraphQL API ID.
--   
--   <a>$sel:functionId:DeleteFunction'</a>,
--   <a>deleteFunction_functionId</a> - The <tt>Function</tt> ID.
newDeleteFunction :: Text -> Text -> DeleteFunction

-- | The GraphQL API ID.
deleteFunction_apiId :: Lens' DeleteFunction Text

-- | The <tt>Function</tt> ID.
deleteFunction_functionId :: Lens' DeleteFunction Text

-- | <i>See:</i> <a>newDeleteFunctionResponse</a> smart constructor.
data DeleteFunctionResponse
DeleteFunctionResponse' :: Int -> DeleteFunctionResponse

-- | The response's http status code.
[$sel:httpStatus:DeleteFunctionResponse'] :: DeleteFunctionResponse -> Int

-- | Create a value of <a>DeleteFunctionResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteFunctionResponse'</a>,
--   <a>deleteFunctionResponse_httpStatus</a> - The response's http status
--   code.
newDeleteFunctionResponse :: Int -> DeleteFunctionResponse

-- | The response's http status code.
deleteFunctionResponse_httpStatus :: Lens' DeleteFunctionResponse Int
instance GHC.Generics.Generic Network.AWS.AppSync.DeleteFunction.DeleteFunction
instance GHC.Show.Show Network.AWS.AppSync.DeleteFunction.DeleteFunction
instance GHC.Read.Read Network.AWS.AppSync.DeleteFunction.DeleteFunction
instance GHC.Classes.Eq Network.AWS.AppSync.DeleteFunction.DeleteFunction
instance GHC.Generics.Generic Network.AWS.AppSync.DeleteFunction.DeleteFunctionResponse
instance GHC.Show.Show Network.AWS.AppSync.DeleteFunction.DeleteFunctionResponse
instance GHC.Read.Read Network.AWS.AppSync.DeleteFunction.DeleteFunctionResponse
instance GHC.Classes.Eq Network.AWS.AppSync.DeleteFunction.DeleteFunctionResponse
instance Network.AWS.Types.AWSRequest Network.AWS.AppSync.DeleteFunction.DeleteFunction
instance Control.DeepSeq.NFData Network.AWS.AppSync.DeleteFunction.DeleteFunctionResponse
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.DeleteFunction.DeleteFunction
instance Control.DeepSeq.NFData Network.AWS.AppSync.DeleteFunction.DeleteFunction
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.AppSync.DeleteFunction.DeleteFunction
instance Network.AWS.Data.Path.ToPath Network.AWS.AppSync.DeleteFunction.DeleteFunction
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.DeleteFunction.DeleteFunction


-- | Deletes a <tt>DataSource</tt> object.
module Network.AWS.AppSync.DeleteDataSource

-- | <i>See:</i> <a>newDeleteDataSource</a> smart constructor.
data DeleteDataSource
DeleteDataSource' :: Text -> Text -> DeleteDataSource

-- | The API ID.
[$sel:apiId:DeleteDataSource'] :: DeleteDataSource -> Text

-- | The name of the data source.
[$sel:name:DeleteDataSource'] :: DeleteDataSource -> Text

-- | Create a value of <a>DeleteDataSource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiId:DeleteDataSource'</a>, <a>deleteDataSource_apiId</a> -
--   The API ID.
--   
--   <a>$sel:name:DeleteDataSource'</a>, <a>deleteDataSource_name</a> - The
--   name of the data source.
newDeleteDataSource :: Text -> Text -> DeleteDataSource

-- | The API ID.
deleteDataSource_apiId :: Lens' DeleteDataSource Text

-- | The name of the data source.
deleteDataSource_name :: Lens' DeleteDataSource Text

-- | <i>See:</i> <a>newDeleteDataSourceResponse</a> smart constructor.
data DeleteDataSourceResponse
DeleteDataSourceResponse' :: Int -> DeleteDataSourceResponse

-- | The response's http status code.
[$sel:httpStatus:DeleteDataSourceResponse'] :: DeleteDataSourceResponse -> Int

-- | Create a value of <a>DeleteDataSourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteDataSourceResponse'</a>,
--   <a>deleteDataSourceResponse_httpStatus</a> - The response's http
--   status code.
newDeleteDataSourceResponse :: Int -> DeleteDataSourceResponse

-- | The response's http status code.
deleteDataSourceResponse_httpStatus :: Lens' DeleteDataSourceResponse Int
instance GHC.Generics.Generic Network.AWS.AppSync.DeleteDataSource.DeleteDataSource
instance GHC.Show.Show Network.AWS.AppSync.DeleteDataSource.DeleteDataSource
instance GHC.Read.Read Network.AWS.AppSync.DeleteDataSource.DeleteDataSource
instance GHC.Classes.Eq Network.AWS.AppSync.DeleteDataSource.DeleteDataSource
instance GHC.Generics.Generic Network.AWS.AppSync.DeleteDataSource.DeleteDataSourceResponse
instance GHC.Show.Show Network.AWS.AppSync.DeleteDataSource.DeleteDataSourceResponse
instance GHC.Read.Read Network.AWS.AppSync.DeleteDataSource.DeleteDataSourceResponse
instance GHC.Classes.Eq Network.AWS.AppSync.DeleteDataSource.DeleteDataSourceResponse
instance Network.AWS.Types.AWSRequest Network.AWS.AppSync.DeleteDataSource.DeleteDataSource
instance Control.DeepSeq.NFData Network.AWS.AppSync.DeleteDataSource.DeleteDataSourceResponse
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.DeleteDataSource.DeleteDataSource
instance Control.DeepSeq.NFData Network.AWS.AppSync.DeleteDataSource.DeleteDataSource
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.AppSync.DeleteDataSource.DeleteDataSource
instance Network.AWS.Data.Path.ToPath Network.AWS.AppSync.DeleteDataSource.DeleteDataSource
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.DeleteDataSource.DeleteDataSource


-- | Deletes an API key.
module Network.AWS.AppSync.DeleteApiKey

-- | <i>See:</i> <a>newDeleteApiKey</a> smart constructor.
data DeleteApiKey
DeleteApiKey' :: Text -> Text -> DeleteApiKey

-- | The API ID.
[$sel:apiId:DeleteApiKey'] :: DeleteApiKey -> Text

-- | The ID for the API key.
[$sel:id:DeleteApiKey'] :: DeleteApiKey -> Text

-- | Create a value of <a>DeleteApiKey</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiId:DeleteApiKey'</a>, <a>deleteApiKey_apiId</a> - The API
--   ID.
--   
--   <a>$sel:id:DeleteApiKey'</a>, <a>deleteApiKey_id</a> - The ID for the
--   API key.
newDeleteApiKey :: Text -> Text -> DeleteApiKey

-- | The API ID.
deleteApiKey_apiId :: Lens' DeleteApiKey Text

-- | The ID for the API key.
deleteApiKey_id :: Lens' DeleteApiKey Text

-- | <i>See:</i> <a>newDeleteApiKeyResponse</a> smart constructor.
data DeleteApiKeyResponse
DeleteApiKeyResponse' :: Int -> DeleteApiKeyResponse

-- | The response's http status code.
[$sel:httpStatus:DeleteApiKeyResponse'] :: DeleteApiKeyResponse -> Int

-- | Create a value of <a>DeleteApiKeyResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteApiKeyResponse'</a>,
--   <a>deleteApiKeyResponse_httpStatus</a> - The response's http status
--   code.
newDeleteApiKeyResponse :: Int -> DeleteApiKeyResponse

-- | The response's http status code.
deleteApiKeyResponse_httpStatus :: Lens' DeleteApiKeyResponse Int
instance GHC.Generics.Generic Network.AWS.AppSync.DeleteApiKey.DeleteApiKey
instance GHC.Show.Show Network.AWS.AppSync.DeleteApiKey.DeleteApiKey
instance GHC.Read.Read Network.AWS.AppSync.DeleteApiKey.DeleteApiKey
instance GHC.Classes.Eq Network.AWS.AppSync.DeleteApiKey.DeleteApiKey
instance GHC.Generics.Generic Network.AWS.AppSync.DeleteApiKey.DeleteApiKeyResponse
instance GHC.Show.Show Network.AWS.AppSync.DeleteApiKey.DeleteApiKeyResponse
instance GHC.Read.Read Network.AWS.AppSync.DeleteApiKey.DeleteApiKeyResponse
instance GHC.Classes.Eq Network.AWS.AppSync.DeleteApiKey.DeleteApiKeyResponse
instance Network.AWS.Types.AWSRequest Network.AWS.AppSync.DeleteApiKey.DeleteApiKey
instance Control.DeepSeq.NFData Network.AWS.AppSync.DeleteApiKey.DeleteApiKeyResponse
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.DeleteApiKey.DeleteApiKey
instance Control.DeepSeq.NFData Network.AWS.AppSync.DeleteApiKey.DeleteApiKey
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.AppSync.DeleteApiKey.DeleteApiKey
instance Network.AWS.Data.Path.ToPath Network.AWS.AppSync.DeleteApiKey.DeleteApiKey
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.DeleteApiKey.DeleteApiKey


-- | Deletes an <tt>ApiCache</tt> object.
module Network.AWS.AppSync.DeleteApiCache

-- | Represents the input of a <tt>DeleteApiCache</tt> operation.
--   
--   <i>See:</i> <a>newDeleteApiCache</a> smart constructor.
data DeleteApiCache
DeleteApiCache' :: Text -> DeleteApiCache

-- | The API ID.
[$sel:apiId:DeleteApiCache'] :: DeleteApiCache -> Text

-- | Create a value of <a>DeleteApiCache</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiId:DeleteApiCache'</a>, <a>deleteApiCache_apiId</a> - The
--   API ID.
newDeleteApiCache :: Text -> DeleteApiCache

-- | The API ID.
deleteApiCache_apiId :: Lens' DeleteApiCache Text

-- | Represents the output of a <tt>DeleteApiCache</tt> operation.
--   
--   <i>See:</i> <a>newDeleteApiCacheResponse</a> smart constructor.
data DeleteApiCacheResponse
DeleteApiCacheResponse' :: Int -> DeleteApiCacheResponse

-- | The response's http status code.
[$sel:httpStatus:DeleteApiCacheResponse'] :: DeleteApiCacheResponse -> Int

-- | Create a value of <a>DeleteApiCacheResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteApiCacheResponse'</a>,
--   <a>deleteApiCacheResponse_httpStatus</a> - The response's http status
--   code.
newDeleteApiCacheResponse :: Int -> DeleteApiCacheResponse

-- | The response's http status code.
deleteApiCacheResponse_httpStatus :: Lens' DeleteApiCacheResponse Int
instance GHC.Generics.Generic Network.AWS.AppSync.DeleteApiCache.DeleteApiCache
instance GHC.Show.Show Network.AWS.AppSync.DeleteApiCache.DeleteApiCache
instance GHC.Read.Read Network.AWS.AppSync.DeleteApiCache.DeleteApiCache
instance GHC.Classes.Eq Network.AWS.AppSync.DeleteApiCache.DeleteApiCache
instance GHC.Generics.Generic Network.AWS.AppSync.DeleteApiCache.DeleteApiCacheResponse
instance GHC.Show.Show Network.AWS.AppSync.DeleteApiCache.DeleteApiCacheResponse
instance GHC.Read.Read Network.AWS.AppSync.DeleteApiCache.DeleteApiCacheResponse
instance GHC.Classes.Eq Network.AWS.AppSync.DeleteApiCache.DeleteApiCacheResponse
instance Network.AWS.Types.AWSRequest Network.AWS.AppSync.DeleteApiCache.DeleteApiCache
instance Control.DeepSeq.NFData Network.AWS.AppSync.DeleteApiCache.DeleteApiCacheResponse
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.DeleteApiCache.DeleteApiCache
instance Control.DeepSeq.NFData Network.AWS.AppSync.DeleteApiCache.DeleteApiCache
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.AppSync.DeleteApiCache.DeleteApiCache
instance Network.AWS.Data.Path.ToPath Network.AWS.AppSync.DeleteApiCache.DeleteApiCache
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.DeleteApiCache.DeleteApiCache


-- | Creates a <tt>Type</tt> object.
module Network.AWS.AppSync.CreateType

-- | <i>See:</i> <a>newCreateType</a> smart constructor.
data CreateType
CreateType' :: Text -> Text -> TypeDefinitionFormat -> CreateType

-- | The API ID.
[$sel:apiId:CreateType'] :: CreateType -> Text

-- | The type definition, in GraphQL Schema Definition Language (SDL)
--   format.
--   
--   For more information, see the <a>GraphQL SDL documentation</a>.
[$sel:definition:CreateType'] :: CreateType -> Text

-- | The type format: SDL or JSON.
[$sel:format:CreateType'] :: CreateType -> TypeDefinitionFormat

-- | Create a value of <a>CreateType</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiId:CreateType'</a>, <a>createType_apiId</a> - The API ID.
--   
--   <a>$sel:definition:CreateType'</a>, <a>createType_definition</a> - The
--   type definition, in GraphQL Schema Definition Language (SDL) format.
--   
--   For more information, see the <a>GraphQL SDL documentation</a>.
--   
--   <a>$sel:format:CreateType'</a>, <a>createType_format</a> - The type
--   format: SDL or JSON.
newCreateType :: Text -> Text -> TypeDefinitionFormat -> CreateType

-- | The API ID.
createType_apiId :: Lens' CreateType Text

-- | The type definition, in GraphQL Schema Definition Language (SDL)
--   format.
--   
--   For more information, see the <a>GraphQL SDL documentation</a>.
createType_definition :: Lens' CreateType Text

-- | The type format: SDL or JSON.
createType_format :: Lens' CreateType TypeDefinitionFormat

-- | <i>See:</i> <a>newCreateTypeResponse</a> smart constructor.
data CreateTypeResponse
CreateTypeResponse' :: Maybe Type -> Int -> CreateTypeResponse

-- | The <tt>Type</tt> object.
[$sel:type':CreateTypeResponse'] :: CreateTypeResponse -> Maybe Type

-- | The response's http status code.
[$sel:httpStatus:CreateTypeResponse'] :: CreateTypeResponse -> Int

-- | Create a value of <a>CreateTypeResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:type':CreateTypeResponse'</a>, <a>createTypeResponse_type</a>
--   - The <tt>Type</tt> object.
--   
--   <a>$sel:httpStatus:CreateTypeResponse'</a>,
--   <a>createTypeResponse_httpStatus</a> - The response's http status
--   code.
newCreateTypeResponse :: Int -> CreateTypeResponse

-- | The <tt>Type</tt> object.
createTypeResponse_type :: Lens' CreateTypeResponse (Maybe Type)

-- | The response's http status code.
createTypeResponse_httpStatus :: Lens' CreateTypeResponse Int
instance GHC.Generics.Generic Network.AWS.AppSync.CreateType.CreateType
instance GHC.Show.Show Network.AWS.AppSync.CreateType.CreateType
instance GHC.Read.Read Network.AWS.AppSync.CreateType.CreateType
instance GHC.Classes.Eq Network.AWS.AppSync.CreateType.CreateType
instance GHC.Generics.Generic Network.AWS.AppSync.CreateType.CreateTypeResponse
instance GHC.Show.Show Network.AWS.AppSync.CreateType.CreateTypeResponse
instance GHC.Read.Read Network.AWS.AppSync.CreateType.CreateTypeResponse
instance GHC.Classes.Eq Network.AWS.AppSync.CreateType.CreateTypeResponse
instance Network.AWS.Types.AWSRequest Network.AWS.AppSync.CreateType.CreateType
instance Control.DeepSeq.NFData Network.AWS.AppSync.CreateType.CreateTypeResponse
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.CreateType.CreateType
instance Control.DeepSeq.NFData Network.AWS.AppSync.CreateType.CreateType
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.AppSync.CreateType.CreateType
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.CreateType.CreateType
instance Network.AWS.Data.Path.ToPath Network.AWS.AppSync.CreateType.CreateType
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.CreateType.CreateType


-- | Creates a <tt>Resolver</tt> object.
--   
--   A resolver converts incoming requests into a format that a data source
--   can understand and converts the data source's responses into GraphQL.
module Network.AWS.AppSync.CreateResolver

-- | <i>See:</i> <a>newCreateResolver</a> smart constructor.
data CreateResolver
CreateResolver' :: Maybe Text -> Maybe ResolverKind -> Maybe SyncConfig -> Maybe Text -> Maybe CachingConfig -> Maybe PipelineConfig -> Maybe Text -> Text -> Text -> Text -> CreateResolver

-- | The mapping template to be used for responses from the data source.
[$sel:responseMappingTemplate:CreateResolver'] :: CreateResolver -> Maybe Text

-- | The resolver type.
--   
--   <ul>
--   <li><b>UNIT</b>: A UNIT resolver type. A UNIT resolver is the default
--   resolver type. A UNIT resolver enables you to execute a GraphQL query
--   against a single data source.</li>
--   <li><b>PIPELINE</b>: A PIPELINE resolver type. A PIPELINE resolver
--   enables you to execute a series of <tt>Function</tt> in a serial
--   manner. You can use a pipeline resolver to execute a GraphQL query
--   against multiple data sources.</li>
--   </ul>
[$sel:kind:CreateResolver'] :: CreateResolver -> Maybe ResolverKind

-- | The <tt>SyncConfig</tt> for a resolver attached to a versioned
--   datasource.
[$sel:syncConfig:CreateResolver'] :: CreateResolver -> Maybe SyncConfig

-- | The name of the data source for which the resolver is being created.
[$sel:dataSourceName:CreateResolver'] :: CreateResolver -> Maybe Text

-- | The caching configuration for the resolver.
[$sel:cachingConfig:CreateResolver'] :: CreateResolver -> Maybe CachingConfig

-- | The <tt>PipelineConfig</tt>.
[$sel:pipelineConfig:CreateResolver'] :: CreateResolver -> Maybe PipelineConfig

-- | The mapping template to be used for requests.
--   
--   A resolver uses a request mapping template to convert a GraphQL
--   expression into a format that a data source can understand. Mapping
--   templates are written in Apache Velocity Template Language (VTL).
--   
--   VTL request mapping templates are optional when using a Lambda data
--   source. For all other data sources, VTL request and response mapping
--   templates are required.
[$sel:requestMappingTemplate:CreateResolver'] :: CreateResolver -> Maybe Text

-- | The ID for the GraphQL API for which the resolver is being created.
[$sel:apiId:CreateResolver'] :: CreateResolver -> Text

-- | The name of the <tt>Type</tt>.
[$sel:typeName:CreateResolver'] :: CreateResolver -> Text

-- | The name of the field to attach the resolver to.
[$sel:fieldName:CreateResolver'] :: CreateResolver -> Text

-- | Create a value of <a>CreateResolver</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:responseMappingTemplate:CreateResolver'</a>,
--   <a>createResolver_responseMappingTemplate</a> - The mapping template
--   to be used for responses from the data source.
--   
--   <a>$sel:kind:CreateResolver'</a>, <a>createResolver_kind</a> - The
--   resolver type.
--   
--   <ul>
--   <li><b>UNIT</b>: A UNIT resolver type. A UNIT resolver is the default
--   resolver type. A UNIT resolver enables you to execute a GraphQL query
--   against a single data source.</li>
--   <li><b>PIPELINE</b>: A PIPELINE resolver type. A PIPELINE resolver
--   enables you to execute a series of <tt>Function</tt> in a serial
--   manner. You can use a pipeline resolver to execute a GraphQL query
--   against multiple data sources.</li>
--   </ul>
--   
--   <a>$sel:syncConfig:CreateResolver'</a>,
--   <a>createResolver_syncConfig</a> - The <tt>SyncConfig</tt> for a
--   resolver attached to a versioned datasource.
--   
--   <a>$sel:dataSourceName:CreateResolver'</a>,
--   <a>createResolver_dataSourceName</a> - The name of the data source for
--   which the resolver is being created.
--   
--   <a>$sel:cachingConfig:CreateResolver'</a>,
--   <a>createResolver_cachingConfig</a> - The caching configuration for
--   the resolver.
--   
--   <a>$sel:pipelineConfig:CreateResolver'</a>,
--   <a>createResolver_pipelineConfig</a> - The <tt>PipelineConfig</tt>.
--   
--   <a>$sel:requestMappingTemplate:CreateResolver'</a>,
--   <a>createResolver_requestMappingTemplate</a> - The mapping template to
--   be used for requests.
--   
--   A resolver uses a request mapping template to convert a GraphQL
--   expression into a format that a data source can understand. Mapping
--   templates are written in Apache Velocity Template Language (VTL).
--   
--   VTL request mapping templates are optional when using a Lambda data
--   source. For all other data sources, VTL request and response mapping
--   templates are required.
--   
--   <a>$sel:apiId:CreateResolver'</a>, <a>createResolver_apiId</a> - The
--   ID for the GraphQL API for which the resolver is being created.
--   
--   <a>$sel:typeName:CreateResolver'</a>, <a>createResolver_typeName</a> -
--   The name of the <tt>Type</tt>.
--   
--   <a>$sel:fieldName:CreateResolver'</a>, <a>createResolver_fieldName</a>
--   - The name of the field to attach the resolver to.
newCreateResolver :: Text -> Text -> Text -> CreateResolver

-- | The mapping template to be used for responses from the data source.
createResolver_responseMappingTemplate :: Lens' CreateResolver (Maybe Text)

-- | The resolver type.
--   
--   <ul>
--   <li><b>UNIT</b>: A UNIT resolver type. A UNIT resolver is the default
--   resolver type. A UNIT resolver enables you to execute a GraphQL query
--   against a single data source.</li>
--   <li><b>PIPELINE</b>: A PIPELINE resolver type. A PIPELINE resolver
--   enables you to execute a series of <tt>Function</tt> in a serial
--   manner. You can use a pipeline resolver to execute a GraphQL query
--   against multiple data sources.</li>
--   </ul>
createResolver_kind :: Lens' CreateResolver (Maybe ResolverKind)

-- | The <tt>SyncConfig</tt> for a resolver attached to a versioned
--   datasource.
createResolver_syncConfig :: Lens' CreateResolver (Maybe SyncConfig)

-- | The name of the data source for which the resolver is being created.
createResolver_dataSourceName :: Lens' CreateResolver (Maybe Text)

-- | The caching configuration for the resolver.
createResolver_cachingConfig :: Lens' CreateResolver (Maybe CachingConfig)

-- | The <tt>PipelineConfig</tt>.
createResolver_pipelineConfig :: Lens' CreateResolver (Maybe PipelineConfig)

-- | The mapping template to be used for requests.
--   
--   A resolver uses a request mapping template to convert a GraphQL
--   expression into a format that a data source can understand. Mapping
--   templates are written in Apache Velocity Template Language (VTL).
--   
--   VTL request mapping templates are optional when using a Lambda data
--   source. For all other data sources, VTL request and response mapping
--   templates are required.
createResolver_requestMappingTemplate :: Lens' CreateResolver (Maybe Text)

-- | The ID for the GraphQL API for which the resolver is being created.
createResolver_apiId :: Lens' CreateResolver Text

-- | The name of the <tt>Type</tt>.
createResolver_typeName :: Lens' CreateResolver Text

-- | The name of the field to attach the resolver to.
createResolver_fieldName :: Lens' CreateResolver Text

-- | <i>See:</i> <a>newCreateResolverResponse</a> smart constructor.
data CreateResolverResponse
CreateResolverResponse' :: Maybe Resolver -> Int -> CreateResolverResponse

-- | The <tt>Resolver</tt> object.
[$sel:resolver:CreateResolverResponse'] :: CreateResolverResponse -> Maybe Resolver

-- | The response's http status code.
[$sel:httpStatus:CreateResolverResponse'] :: CreateResolverResponse -> Int

-- | Create a value of <a>CreateResolverResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resolver:CreateResolverResponse'</a>,
--   <a>createResolverResponse_resolver</a> - The <tt>Resolver</tt> object.
--   
--   <a>$sel:httpStatus:CreateResolverResponse'</a>,
--   <a>createResolverResponse_httpStatus</a> - The response's http status
--   code.
newCreateResolverResponse :: Int -> CreateResolverResponse

-- | The <tt>Resolver</tt> object.
createResolverResponse_resolver :: Lens' CreateResolverResponse (Maybe Resolver)

-- | The response's http status code.
createResolverResponse_httpStatus :: Lens' CreateResolverResponse Int
instance GHC.Generics.Generic Network.AWS.AppSync.CreateResolver.CreateResolver
instance GHC.Show.Show Network.AWS.AppSync.CreateResolver.CreateResolver
instance GHC.Read.Read Network.AWS.AppSync.CreateResolver.CreateResolver
instance GHC.Classes.Eq Network.AWS.AppSync.CreateResolver.CreateResolver
instance GHC.Generics.Generic Network.AWS.AppSync.CreateResolver.CreateResolverResponse
instance GHC.Show.Show Network.AWS.AppSync.CreateResolver.CreateResolverResponse
instance GHC.Read.Read Network.AWS.AppSync.CreateResolver.CreateResolverResponse
instance GHC.Classes.Eq Network.AWS.AppSync.CreateResolver.CreateResolverResponse
instance Network.AWS.Types.AWSRequest Network.AWS.AppSync.CreateResolver.CreateResolver
instance Control.DeepSeq.NFData Network.AWS.AppSync.CreateResolver.CreateResolverResponse
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.CreateResolver.CreateResolver
instance Control.DeepSeq.NFData Network.AWS.AppSync.CreateResolver.CreateResolver
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.AppSync.CreateResolver.CreateResolver
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.CreateResolver.CreateResolver
instance Network.AWS.Data.Path.ToPath Network.AWS.AppSync.CreateResolver.CreateResolver
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.CreateResolver.CreateResolver


-- | Creates a <tt>GraphqlApi</tt> object.
module Network.AWS.AppSync.CreateGraphqlApi

-- | <i>See:</i> <a>newCreateGraphqlApi</a> smart constructor.
data CreateGraphqlApi
CreateGraphqlApi' :: Maybe OpenIDConnectConfig -> Maybe UserPoolConfig -> Maybe Bool -> Maybe LambdaAuthorizerConfig -> Maybe (HashMap Text Text) -> Maybe LogConfig -> Maybe [AdditionalAuthenticationProvider] -> Text -> AuthenticationType -> CreateGraphqlApi

-- | The OpenID Connect configuration.
[$sel:openIDConnectConfig:CreateGraphqlApi'] :: CreateGraphqlApi -> Maybe OpenIDConnectConfig

-- | The Amazon Cognito user pool configuration.
[$sel:userPoolConfig:CreateGraphqlApi'] :: CreateGraphqlApi -> Maybe UserPoolConfig

-- | A flag indicating whether to enable X-Ray tracing for the
--   <tt>GraphqlApi</tt>.
[$sel:xrayEnabled:CreateGraphqlApi'] :: CreateGraphqlApi -> Maybe Bool

-- | Configuration for Amazon Web Services Lambda function authorization.
[$sel:lambdaAuthorizerConfig:CreateGraphqlApi'] :: CreateGraphqlApi -> Maybe LambdaAuthorizerConfig

-- | A <tt>TagMap</tt> object.
[$sel:tags:CreateGraphqlApi'] :: CreateGraphqlApi -> Maybe (HashMap Text Text)

-- | The Amazon CloudWatch Logs configuration.
[$sel:logConfig:CreateGraphqlApi'] :: CreateGraphqlApi -> Maybe LogConfig

-- | A list of additional authentication providers for the
--   <tt>GraphqlApi</tt> API.
[$sel:additionalAuthenticationProviders:CreateGraphqlApi'] :: CreateGraphqlApi -> Maybe [AdditionalAuthenticationProvider]

-- | A user-supplied name for the <tt>GraphqlApi</tt>.
[$sel:name:CreateGraphqlApi'] :: CreateGraphqlApi -> Text

-- | The authentication type: API key, Identity and Access Management,
--   OIDC, Amazon Cognito user pools, or Amazon Web Services Lambda.
[$sel:authenticationType:CreateGraphqlApi'] :: CreateGraphqlApi -> AuthenticationType

-- | Create a value of <a>CreateGraphqlApi</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:openIDConnectConfig:CreateGraphqlApi'</a>,
--   <a>createGraphqlApi_openIDConnectConfig</a> - The OpenID Connect
--   configuration.
--   
--   <a>$sel:userPoolConfig:CreateGraphqlApi'</a>,
--   <a>createGraphqlApi_userPoolConfig</a> - The Amazon Cognito user pool
--   configuration.
--   
--   <a>$sel:xrayEnabled:CreateGraphqlApi'</a>,
--   <a>createGraphqlApi_xrayEnabled</a> - A flag indicating whether to
--   enable X-Ray tracing for the <tt>GraphqlApi</tt>.
--   
--   <a>$sel:lambdaAuthorizerConfig:CreateGraphqlApi'</a>,
--   <a>createGraphqlApi_lambdaAuthorizerConfig</a> - Configuration for
--   Amazon Web Services Lambda function authorization.
--   
--   <a>$sel:tags:CreateGraphqlApi'</a>, <a>createGraphqlApi_tags</a> - A
--   <tt>TagMap</tt> object.
--   
--   <a>$sel:logConfig:CreateGraphqlApi'</a>,
--   <a>createGraphqlApi_logConfig</a> - The Amazon CloudWatch Logs
--   configuration.
--   
--   <a>$sel:additionalAuthenticationProviders:CreateGraphqlApi'</a>,
--   <a>createGraphqlApi_additionalAuthenticationProviders</a> - A list of
--   additional authentication providers for the <tt>GraphqlApi</tt> API.
--   
--   <a>$sel:name:CreateGraphqlApi'</a>, <a>createGraphqlApi_name</a> - A
--   user-supplied name for the <tt>GraphqlApi</tt>.
--   
--   <a>$sel:authenticationType:CreateGraphqlApi'</a>,
--   <a>createGraphqlApi_authenticationType</a> - The authentication type:
--   API key, Identity and Access Management, OIDC, Amazon Cognito user
--   pools, or Amazon Web Services Lambda.
newCreateGraphqlApi :: Text -> AuthenticationType -> CreateGraphqlApi

-- | The OpenID Connect configuration.
createGraphqlApi_openIDConnectConfig :: Lens' CreateGraphqlApi (Maybe OpenIDConnectConfig)

-- | The Amazon Cognito user pool configuration.
createGraphqlApi_userPoolConfig :: Lens' CreateGraphqlApi (Maybe UserPoolConfig)

-- | A flag indicating whether to enable X-Ray tracing for the
--   <tt>GraphqlApi</tt>.
createGraphqlApi_xrayEnabled :: Lens' CreateGraphqlApi (Maybe Bool)

-- | Configuration for Amazon Web Services Lambda function authorization.
createGraphqlApi_lambdaAuthorizerConfig :: Lens' CreateGraphqlApi (Maybe LambdaAuthorizerConfig)

-- | A <tt>TagMap</tt> object.
createGraphqlApi_tags :: Lens' CreateGraphqlApi (Maybe (HashMap Text Text))

-- | The Amazon CloudWatch Logs configuration.
createGraphqlApi_logConfig :: Lens' CreateGraphqlApi (Maybe LogConfig)

-- | A list of additional authentication providers for the
--   <tt>GraphqlApi</tt> API.
createGraphqlApi_additionalAuthenticationProviders :: Lens' CreateGraphqlApi (Maybe [AdditionalAuthenticationProvider])

-- | A user-supplied name for the <tt>GraphqlApi</tt>.
createGraphqlApi_name :: Lens' CreateGraphqlApi Text

-- | The authentication type: API key, Identity and Access Management,
--   OIDC, Amazon Cognito user pools, or Amazon Web Services Lambda.
createGraphqlApi_authenticationType :: Lens' CreateGraphqlApi AuthenticationType

-- | <i>See:</i> <a>newCreateGraphqlApiResponse</a> smart constructor.
data CreateGraphqlApiResponse
CreateGraphqlApiResponse' :: Maybe GraphqlApi -> Int -> CreateGraphqlApiResponse

-- | The <tt>GraphqlApi</tt>.
[$sel:graphqlApi:CreateGraphqlApiResponse'] :: CreateGraphqlApiResponse -> Maybe GraphqlApi

-- | The response's http status code.
[$sel:httpStatus:CreateGraphqlApiResponse'] :: CreateGraphqlApiResponse -> Int

-- | Create a value of <a>CreateGraphqlApiResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:graphqlApi:CreateGraphqlApiResponse'</a>,
--   <a>createGraphqlApiResponse_graphqlApi</a> - The <tt>GraphqlApi</tt>.
--   
--   <a>$sel:httpStatus:CreateGraphqlApiResponse'</a>,
--   <a>createGraphqlApiResponse_httpStatus</a> - The response's http
--   status code.
newCreateGraphqlApiResponse :: Int -> CreateGraphqlApiResponse

-- | The <tt>GraphqlApi</tt>.
createGraphqlApiResponse_graphqlApi :: Lens' CreateGraphqlApiResponse (Maybe GraphqlApi)

-- | The response's http status code.
createGraphqlApiResponse_httpStatus :: Lens' CreateGraphqlApiResponse Int
instance GHC.Generics.Generic Network.AWS.AppSync.CreateGraphqlApi.CreateGraphqlApi
instance GHC.Show.Show Network.AWS.AppSync.CreateGraphqlApi.CreateGraphqlApi
instance GHC.Read.Read Network.AWS.AppSync.CreateGraphqlApi.CreateGraphqlApi
instance GHC.Classes.Eq Network.AWS.AppSync.CreateGraphqlApi.CreateGraphqlApi
instance GHC.Generics.Generic Network.AWS.AppSync.CreateGraphqlApi.CreateGraphqlApiResponse
instance GHC.Show.Show Network.AWS.AppSync.CreateGraphqlApi.CreateGraphqlApiResponse
instance GHC.Read.Read Network.AWS.AppSync.CreateGraphqlApi.CreateGraphqlApiResponse
instance GHC.Classes.Eq Network.AWS.AppSync.CreateGraphqlApi.CreateGraphqlApiResponse
instance Network.AWS.Types.AWSRequest Network.AWS.AppSync.CreateGraphqlApi.CreateGraphqlApi
instance Control.DeepSeq.NFData Network.AWS.AppSync.CreateGraphqlApi.CreateGraphqlApiResponse
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.CreateGraphqlApi.CreateGraphqlApi
instance Control.DeepSeq.NFData Network.AWS.AppSync.CreateGraphqlApi.CreateGraphqlApi
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.AppSync.CreateGraphqlApi.CreateGraphqlApi
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.CreateGraphqlApi.CreateGraphqlApi
instance Network.AWS.Data.Path.ToPath Network.AWS.AppSync.CreateGraphqlApi.CreateGraphqlApi
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.CreateGraphqlApi.CreateGraphqlApi


-- | Creates a <tt>Function</tt> object.
--   
--   A function is a reusable entity. Multiple functions can be used to
--   compose the resolver logic.
module Network.AWS.AppSync.CreateFunction

-- | <i>See:</i> <a>newCreateFunction</a> smart constructor.
data CreateFunction
CreateFunction' :: Maybe Text -> Maybe SyncConfig -> Maybe Text -> Maybe Text -> Text -> Text -> Text -> Text -> CreateFunction

-- | The <tt>Function</tt> response mapping template.
[$sel:responseMappingTemplate:CreateFunction'] :: CreateFunction -> Maybe Text
[$sel:syncConfig:CreateFunction'] :: CreateFunction -> Maybe SyncConfig

-- | The <tt>Function</tt> description.
[$sel:description:CreateFunction'] :: CreateFunction -> Maybe Text

-- | The <tt>Function</tt> request mapping template. Functions support only
--   the 2018-05-29 version of the request mapping template.
[$sel:requestMappingTemplate:CreateFunction'] :: CreateFunction -> Maybe Text

-- | The GraphQL API ID.
[$sel:apiId:CreateFunction'] :: CreateFunction -> Text

-- | The <tt>Function</tt> name. The function name does not have to be
--   unique.
[$sel:name:CreateFunction'] :: CreateFunction -> Text

-- | The <tt>Function</tt> <tt>DataSource</tt> name.
[$sel:dataSourceName:CreateFunction'] :: CreateFunction -> Text

-- | The <tt>version</tt> of the request mapping template. Currently the
--   supported value is 2018-05-29.
[$sel:functionVersion:CreateFunction'] :: CreateFunction -> Text

-- | Create a value of <a>CreateFunction</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:responseMappingTemplate:CreateFunction'</a>,
--   <a>createFunction_responseMappingTemplate</a> - The <tt>Function</tt>
--   response mapping template.
--   
--   <a>$sel:syncConfig:CreateFunction'</a>,
--   <a>createFunction_syncConfig</a> - Undocumented member.
--   
--   <a>$sel:description:CreateFunction'</a>,
--   <a>createFunction_description</a> - The <tt>Function</tt> description.
--   
--   <a>$sel:requestMappingTemplate:CreateFunction'</a>,
--   <a>createFunction_requestMappingTemplate</a> - The <tt>Function</tt>
--   request mapping template. Functions support only the 2018-05-29
--   version of the request mapping template.
--   
--   <a>$sel:apiId:CreateFunction'</a>, <a>createFunction_apiId</a> - The
--   GraphQL API ID.
--   
--   <a>$sel:name:CreateFunction'</a>, <a>createFunction_name</a> - The
--   <tt>Function</tt> name. The function name does not have to be unique.
--   
--   <a>$sel:dataSourceName:CreateFunction'</a>,
--   <a>createFunction_dataSourceName</a> - The <tt>Function</tt>
--   <tt>DataSource</tt> name.
--   
--   <a>$sel:functionVersion:CreateFunction'</a>,
--   <a>createFunction_functionVersion</a> - The <tt>version</tt> of the
--   request mapping template. Currently the supported value is 2018-05-29.
newCreateFunction :: Text -> Text -> Text -> Text -> CreateFunction

-- | The <tt>Function</tt> response mapping template.
createFunction_responseMappingTemplate :: Lens' CreateFunction (Maybe Text)

-- | Undocumented member.
createFunction_syncConfig :: Lens' CreateFunction (Maybe SyncConfig)

-- | The <tt>Function</tt> description.
createFunction_description :: Lens' CreateFunction (Maybe Text)

-- | The <tt>Function</tt> request mapping template. Functions support only
--   the 2018-05-29 version of the request mapping template.
createFunction_requestMappingTemplate :: Lens' CreateFunction (Maybe Text)

-- | The GraphQL API ID.
createFunction_apiId :: Lens' CreateFunction Text

-- | The <tt>Function</tt> name. The function name does not have to be
--   unique.
createFunction_name :: Lens' CreateFunction Text

-- | The <tt>Function</tt> <tt>DataSource</tt> name.
createFunction_dataSourceName :: Lens' CreateFunction Text

-- | The <tt>version</tt> of the request mapping template. Currently the
--   supported value is 2018-05-29.
createFunction_functionVersion :: Lens' CreateFunction Text

-- | <i>See:</i> <a>newCreateFunctionResponse</a> smart constructor.
data CreateFunctionResponse
CreateFunctionResponse' :: Maybe FunctionConfiguration -> Int -> CreateFunctionResponse

-- | The <tt>Function</tt> object.
[$sel:functionConfiguration:CreateFunctionResponse'] :: CreateFunctionResponse -> Maybe FunctionConfiguration

-- | The response's http status code.
[$sel:httpStatus:CreateFunctionResponse'] :: CreateFunctionResponse -> Int

-- | Create a value of <a>CreateFunctionResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:functionConfiguration:CreateFunctionResponse'</a>,
--   <a>createFunctionResponse_functionConfiguration</a> - The
--   <tt>Function</tt> object.
--   
--   <a>$sel:httpStatus:CreateFunctionResponse'</a>,
--   <a>createFunctionResponse_httpStatus</a> - The response's http status
--   code.
newCreateFunctionResponse :: Int -> CreateFunctionResponse

-- | The <tt>Function</tt> object.
createFunctionResponse_functionConfiguration :: Lens' CreateFunctionResponse (Maybe FunctionConfiguration)

-- | The response's http status code.
createFunctionResponse_httpStatus :: Lens' CreateFunctionResponse Int
instance GHC.Generics.Generic Network.AWS.AppSync.CreateFunction.CreateFunction
instance GHC.Show.Show Network.AWS.AppSync.CreateFunction.CreateFunction
instance GHC.Read.Read Network.AWS.AppSync.CreateFunction.CreateFunction
instance GHC.Classes.Eq Network.AWS.AppSync.CreateFunction.CreateFunction
instance GHC.Generics.Generic Network.AWS.AppSync.CreateFunction.CreateFunctionResponse
instance GHC.Show.Show Network.AWS.AppSync.CreateFunction.CreateFunctionResponse
instance GHC.Read.Read Network.AWS.AppSync.CreateFunction.CreateFunctionResponse
instance GHC.Classes.Eq Network.AWS.AppSync.CreateFunction.CreateFunctionResponse
instance Network.AWS.Types.AWSRequest Network.AWS.AppSync.CreateFunction.CreateFunction
instance Control.DeepSeq.NFData Network.AWS.AppSync.CreateFunction.CreateFunctionResponse
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.CreateFunction.CreateFunction
instance Control.DeepSeq.NFData Network.AWS.AppSync.CreateFunction.CreateFunction
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.AppSync.CreateFunction.CreateFunction
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.CreateFunction.CreateFunction
instance Network.AWS.Data.Path.ToPath Network.AWS.AppSync.CreateFunction.CreateFunction
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.CreateFunction.CreateFunction


-- | Creates a <tt>DataSource</tt> object.
module Network.AWS.AppSync.CreateDataSource

-- | <i>See:</i> <a>newCreateDataSource</a> smart constructor.
data CreateDataSource
CreateDataSource' :: Maybe Text -> Maybe RelationalDatabaseDataSourceConfig -> Maybe ElasticsearchDataSourceConfig -> Maybe LambdaDataSourceConfig -> Maybe DynamodbDataSourceConfig -> Maybe Text -> Maybe OpenSearchServiceDataSourceConfig -> Maybe HttpDataSourceConfig -> Text -> Text -> DataSourceType -> CreateDataSource

-- | The Identity and Access Management service role ARN for the data
--   source. The system assumes this role when accessing the data source.
[$sel:serviceRoleArn:CreateDataSource'] :: CreateDataSource -> Maybe Text

-- | Relational database settings.
[$sel:relationalDatabaseConfig:CreateDataSource'] :: CreateDataSource -> Maybe RelationalDatabaseDataSourceConfig

-- | Amazon OpenSearch Service settings.
--   
--   As of September 2021, Amazon Elasticsearch service is Amazon
--   OpenSearch Service. This configuration is deprecated. For new data
--   sources, use CreateDataSourceRequest$openSearchServiceConfig to create
--   an OpenSearch data source.
[$sel:elasticsearchConfig:CreateDataSource'] :: CreateDataSource -> Maybe ElasticsearchDataSourceConfig

-- | Amazon Web Services Lambda settings.
[$sel:lambdaConfig:CreateDataSource'] :: CreateDataSource -> Maybe LambdaDataSourceConfig

-- | Amazon DynamoDB settings.
[$sel:dynamodbConfig:CreateDataSource'] :: CreateDataSource -> Maybe DynamodbDataSourceConfig

-- | A description of the <tt>DataSource</tt>.
[$sel:description:CreateDataSource'] :: CreateDataSource -> Maybe Text

-- | Amazon OpenSearch Service settings.
[$sel:openSearchServiceConfig:CreateDataSource'] :: CreateDataSource -> Maybe OpenSearchServiceDataSourceConfig

-- | HTTP endpoint settings.
[$sel:httpConfig:CreateDataSource'] :: CreateDataSource -> Maybe HttpDataSourceConfig

-- | The API ID for the GraphQL API for the <tt>DataSource</tt>.
[$sel:apiId:CreateDataSource'] :: CreateDataSource -> Text

-- | A user-supplied name for the <tt>DataSource</tt>.
[$sel:name:CreateDataSource'] :: CreateDataSource -> Text

-- | The type of the <tt>DataSource</tt>.
[$sel:type':CreateDataSource'] :: CreateDataSource -> DataSourceType

-- | Create a value of <a>CreateDataSource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:serviceRoleArn:CreateDataSource'</a>,
--   <a>createDataSource_serviceRoleArn</a> - The Identity and Access
--   Management service role ARN for the data source. The system assumes
--   this role when accessing the data source.
--   
--   <a>$sel:relationalDatabaseConfig:CreateDataSource'</a>,
--   <a>createDataSource_relationalDatabaseConfig</a> - Relational database
--   settings.
--   
--   <a>$sel:elasticsearchConfig:CreateDataSource'</a>,
--   <a>createDataSource_elasticsearchConfig</a> - Amazon OpenSearch
--   Service settings.
--   
--   As of September 2021, Amazon Elasticsearch service is Amazon
--   OpenSearch Service. This configuration is deprecated. For new data
--   sources, use CreateDataSourceRequest$openSearchServiceConfig to create
--   an OpenSearch data source.
--   
--   <a>$sel:lambdaConfig:CreateDataSource'</a>,
--   <a>createDataSource_lambdaConfig</a> - Amazon Web Services Lambda
--   settings.
--   
--   <a>$sel:dynamodbConfig:CreateDataSource'</a>,
--   <a>createDataSource_dynamodbConfig</a> - Amazon DynamoDB settings.
--   
--   <a>$sel:description:CreateDataSource'</a>,
--   <a>createDataSource_description</a> - A description of the
--   <tt>DataSource</tt>.
--   
--   <a>$sel:openSearchServiceConfig:CreateDataSource'</a>,
--   <a>createDataSource_openSearchServiceConfig</a> - Amazon OpenSearch
--   Service settings.
--   
--   <a>$sel:httpConfig:CreateDataSource'</a>,
--   <a>createDataSource_httpConfig</a> - HTTP endpoint settings.
--   
--   <a>$sel:apiId:CreateDataSource'</a>, <a>createDataSource_apiId</a> -
--   The API ID for the GraphQL API for the <tt>DataSource</tt>.
--   
--   <a>$sel:name:CreateDataSource'</a>, <a>createDataSource_name</a> - A
--   user-supplied name for the <tt>DataSource</tt>.
--   
--   <a>$sel:type':CreateDataSource'</a>, <a>createDataSource_type</a> -
--   The type of the <tt>DataSource</tt>.
newCreateDataSource :: Text -> Text -> DataSourceType -> CreateDataSource

-- | The Identity and Access Management service role ARN for the data
--   source. The system assumes this role when accessing the data source.
createDataSource_serviceRoleArn :: Lens' CreateDataSource (Maybe Text)

-- | Relational database settings.
createDataSource_relationalDatabaseConfig :: Lens' CreateDataSource (Maybe RelationalDatabaseDataSourceConfig)

-- | Amazon OpenSearch Service settings.
--   
--   As of September 2021, Amazon Elasticsearch service is Amazon
--   OpenSearch Service. This configuration is deprecated. For new data
--   sources, use CreateDataSourceRequest$openSearchServiceConfig to create
--   an OpenSearch data source.
createDataSource_elasticsearchConfig :: Lens' CreateDataSource (Maybe ElasticsearchDataSourceConfig)

-- | Amazon Web Services Lambda settings.
createDataSource_lambdaConfig :: Lens' CreateDataSource (Maybe LambdaDataSourceConfig)

-- | Amazon DynamoDB settings.
createDataSource_dynamodbConfig :: Lens' CreateDataSource (Maybe DynamodbDataSourceConfig)

-- | A description of the <tt>DataSource</tt>.
createDataSource_description :: Lens' CreateDataSource (Maybe Text)

-- | Amazon OpenSearch Service settings.
createDataSource_openSearchServiceConfig :: Lens' CreateDataSource (Maybe OpenSearchServiceDataSourceConfig)

-- | HTTP endpoint settings.
createDataSource_httpConfig :: Lens' CreateDataSource (Maybe HttpDataSourceConfig)

-- | The API ID for the GraphQL API for the <tt>DataSource</tt>.
createDataSource_apiId :: Lens' CreateDataSource Text

-- | A user-supplied name for the <tt>DataSource</tt>.
createDataSource_name :: Lens' CreateDataSource Text

-- | The type of the <tt>DataSource</tt>.
createDataSource_type :: Lens' CreateDataSource DataSourceType

-- | <i>See:</i> <a>newCreateDataSourceResponse</a> smart constructor.
data CreateDataSourceResponse
CreateDataSourceResponse' :: Maybe DataSource -> Int -> CreateDataSourceResponse

-- | The <tt>DataSource</tt> object.
[$sel:dataSource:CreateDataSourceResponse'] :: CreateDataSourceResponse -> Maybe DataSource

-- | The response's http status code.
[$sel:httpStatus:CreateDataSourceResponse'] :: CreateDataSourceResponse -> Int

-- | Create a value of <a>CreateDataSourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dataSource:CreateDataSourceResponse'</a>,
--   <a>createDataSourceResponse_dataSource</a> - The <tt>DataSource</tt>
--   object.
--   
--   <a>$sel:httpStatus:CreateDataSourceResponse'</a>,
--   <a>createDataSourceResponse_httpStatus</a> - The response's http
--   status code.
newCreateDataSourceResponse :: Int -> CreateDataSourceResponse

-- | The <tt>DataSource</tt> object.
createDataSourceResponse_dataSource :: Lens' CreateDataSourceResponse (Maybe DataSource)

-- | The response's http status code.
createDataSourceResponse_httpStatus :: Lens' CreateDataSourceResponse Int
instance GHC.Generics.Generic Network.AWS.AppSync.CreateDataSource.CreateDataSource
instance GHC.Show.Show Network.AWS.AppSync.CreateDataSource.CreateDataSource
instance GHC.Read.Read Network.AWS.AppSync.CreateDataSource.CreateDataSource
instance GHC.Classes.Eq Network.AWS.AppSync.CreateDataSource.CreateDataSource
instance GHC.Generics.Generic Network.AWS.AppSync.CreateDataSource.CreateDataSourceResponse
instance GHC.Show.Show Network.AWS.AppSync.CreateDataSource.CreateDataSourceResponse
instance GHC.Read.Read Network.AWS.AppSync.CreateDataSource.CreateDataSourceResponse
instance GHC.Classes.Eq Network.AWS.AppSync.CreateDataSource.CreateDataSourceResponse
instance Network.AWS.Types.AWSRequest Network.AWS.AppSync.CreateDataSource.CreateDataSource
instance Control.DeepSeq.NFData Network.AWS.AppSync.CreateDataSource.CreateDataSourceResponse
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.CreateDataSource.CreateDataSource
instance Control.DeepSeq.NFData Network.AWS.AppSync.CreateDataSource.CreateDataSource
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.AppSync.CreateDataSource.CreateDataSource
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.CreateDataSource.CreateDataSource
instance Network.AWS.Data.Path.ToPath Network.AWS.AppSync.CreateDataSource.CreateDataSource
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.CreateDataSource.CreateDataSource


-- | Creates a unique key that you can distribute to clients who are
--   executing your API.
module Network.AWS.AppSync.CreateApiKey

-- | <i>See:</i> <a>newCreateApiKey</a> smart constructor.
data CreateApiKey
CreateApiKey' :: Maybe Text -> Maybe Integer -> Text -> CreateApiKey

-- | A description of the purpose of the API key.
[$sel:description:CreateApiKey'] :: CreateApiKey -> Maybe Text

-- | The time from creation time after which the API key expires. The date
--   is represented as seconds since the epoch, rounded down to the nearest
--   hour. The default value for this parameter is 7 days from creation
--   time. For more information, see .
[$sel:expires:CreateApiKey'] :: CreateApiKey -> Maybe Integer

-- | The ID for your GraphQL API.
[$sel:apiId:CreateApiKey'] :: CreateApiKey -> Text

-- | Create a value of <a>CreateApiKey</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:description:CreateApiKey'</a>, <a>createApiKey_description</a>
--   - A description of the purpose of the API key.
--   
--   <a>$sel:expires:CreateApiKey'</a>, <a>createApiKey_expires</a> - The
--   time from creation time after which the API key expires. The date is
--   represented as seconds since the epoch, rounded down to the nearest
--   hour. The default value for this parameter is 7 days from creation
--   time. For more information, see .
--   
--   <a>$sel:apiId:CreateApiKey'</a>, <a>createApiKey_apiId</a> - The ID
--   for your GraphQL API.
newCreateApiKey :: Text -> CreateApiKey

-- | A description of the purpose of the API key.
createApiKey_description :: Lens' CreateApiKey (Maybe Text)

-- | The time from creation time after which the API key expires. The date
--   is represented as seconds since the epoch, rounded down to the nearest
--   hour. The default value for this parameter is 7 days from creation
--   time. For more information, see .
createApiKey_expires :: Lens' CreateApiKey (Maybe Integer)

-- | The ID for your GraphQL API.
createApiKey_apiId :: Lens' CreateApiKey Text

-- | <i>See:</i> <a>newCreateApiKeyResponse</a> smart constructor.
data CreateApiKeyResponse
CreateApiKeyResponse' :: Maybe ApiKey -> Int -> CreateApiKeyResponse

-- | The API key.
[$sel:apiKey:CreateApiKeyResponse'] :: CreateApiKeyResponse -> Maybe ApiKey

-- | The response's http status code.
[$sel:httpStatus:CreateApiKeyResponse'] :: CreateApiKeyResponse -> Int

-- | Create a value of <a>CreateApiKeyResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiKey:CreateApiKeyResponse'</a>,
--   <a>createApiKeyResponse_apiKey</a> - The API key.
--   
--   <a>$sel:httpStatus:CreateApiKeyResponse'</a>,
--   <a>createApiKeyResponse_httpStatus</a> - The response's http status
--   code.
newCreateApiKeyResponse :: Int -> CreateApiKeyResponse

-- | The API key.
createApiKeyResponse_apiKey :: Lens' CreateApiKeyResponse (Maybe ApiKey)

-- | The response's http status code.
createApiKeyResponse_httpStatus :: Lens' CreateApiKeyResponse Int
instance GHC.Generics.Generic Network.AWS.AppSync.CreateApiKey.CreateApiKey
instance GHC.Show.Show Network.AWS.AppSync.CreateApiKey.CreateApiKey
instance GHC.Read.Read Network.AWS.AppSync.CreateApiKey.CreateApiKey
instance GHC.Classes.Eq Network.AWS.AppSync.CreateApiKey.CreateApiKey
instance GHC.Generics.Generic Network.AWS.AppSync.CreateApiKey.CreateApiKeyResponse
instance GHC.Show.Show Network.AWS.AppSync.CreateApiKey.CreateApiKeyResponse
instance GHC.Read.Read Network.AWS.AppSync.CreateApiKey.CreateApiKeyResponse
instance GHC.Classes.Eq Network.AWS.AppSync.CreateApiKey.CreateApiKeyResponse
instance Network.AWS.Types.AWSRequest Network.AWS.AppSync.CreateApiKey.CreateApiKey
instance Control.DeepSeq.NFData Network.AWS.AppSync.CreateApiKey.CreateApiKeyResponse
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.CreateApiKey.CreateApiKey
instance Control.DeepSeq.NFData Network.AWS.AppSync.CreateApiKey.CreateApiKey
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.AppSync.CreateApiKey.CreateApiKey
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.CreateApiKey.CreateApiKey
instance Network.AWS.Data.Path.ToPath Network.AWS.AppSync.CreateApiKey.CreateApiKey
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.CreateApiKey.CreateApiKey


-- | Creates a cache for the GraphQL API.
module Network.AWS.AppSync.CreateApiCache

-- | Represents the input of a <tt>CreateApiCache</tt> operation.
--   
--   <i>See:</i> <a>newCreateApiCache</a> smart constructor.
data CreateApiCache
CreateApiCache' :: Maybe Bool -> Maybe Bool -> Text -> Integer -> ApiCachingBehavior -> ApiCacheType -> CreateApiCache

-- | At rest encryption flag for cache. This setting cannot be updated
--   after creation.
[$sel:atRestEncryptionEnabled:CreateApiCache'] :: CreateApiCache -> Maybe Bool

-- | Transit encryption flag when connecting to cache. This setting cannot
--   be updated after creation.
[$sel:transitEncryptionEnabled:CreateApiCache'] :: CreateApiCache -> Maybe Bool

-- | The GraphQL API Id.
[$sel:apiId:CreateApiCache'] :: CreateApiCache -> Text

-- | TTL in seconds for cache entries.
--   
--   Valid values are between 1 and 3600 seconds.
[$sel:ttl:CreateApiCache'] :: CreateApiCache -> Integer

-- | Caching behavior.
--   
--   <ul>
--   <li><b>FULL_REQUEST_CACHING</b>: All requests are fully cached.</li>
--   <li><b>PER_RESOLVER_CACHING</b>: Individual resolvers that you specify
--   are cached.</li>
--   </ul>
[$sel:apiCachingBehavior:CreateApiCache'] :: CreateApiCache -> ApiCachingBehavior

-- | The cache instance type. Valid values are
--   
--   <ul>
--   <li><pre>SMALL</pre></li>
--   <li><pre>MEDIUM</pre></li>
--   <li><pre>LARGE</pre></li>
--   <li><pre>XLARGE</pre></li>
--   <li><pre>LARGE_2X</pre></li>
--   <li><pre>LARGE_4X</pre></li>
--   <li><tt>LARGE_8X</tt> (not available in all regions)</li>
--   <li><pre>LARGE_12X</pre></li>
--   </ul>
--   
--   Historically, instance types were identified by an EC2-style value. As
--   of July 2020, this is deprecated, and the generic identifiers above
--   should be used.
--   
--   The following legacy instance types are available, but their use is
--   discouraged:
--   
--   <ul>
--   <li><b>T2_SMALL</b>: A t2.small instance type.</li>
--   <li><b>T2_MEDIUM</b>: A t2.medium instance type.</li>
--   <li><b>R4_LARGE</b>: A r4.large instance type.</li>
--   <li><b>R4_XLARGE</b>: A r4.xlarge instance type.</li>
--   <li><b>R4_2XLARGE</b>: A r4.2xlarge instance type.</li>
--   <li><b>R4_4XLARGE</b>: A r4.4xlarge instance type.</li>
--   <li><b>R4_8XLARGE</b>: A r4.8xlarge instance type.</li>
--   </ul>
[$sel:type':CreateApiCache'] :: CreateApiCache -> ApiCacheType

-- | Create a value of <a>CreateApiCache</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:atRestEncryptionEnabled:CreateApiCache'</a>,
--   <a>createApiCache_atRestEncryptionEnabled</a> - At rest encryption
--   flag for cache. This setting cannot be updated after creation.
--   
--   <a>$sel:transitEncryptionEnabled:CreateApiCache'</a>,
--   <a>createApiCache_transitEncryptionEnabled</a> - Transit encryption
--   flag when connecting to cache. This setting cannot be updated after
--   creation.
--   
--   <a>$sel:apiId:CreateApiCache'</a>, <a>createApiCache_apiId</a> - The
--   GraphQL API Id.
--   
--   <a>$sel:ttl:CreateApiCache'</a>, <a>createApiCache_ttl</a> - TTL in
--   seconds for cache entries.
--   
--   Valid values are between 1 and 3600 seconds.
--   
--   <a>$sel:apiCachingBehavior:CreateApiCache'</a>,
--   <a>createApiCache_apiCachingBehavior</a> - Caching behavior.
--   
--   <ul>
--   <li><b>FULL_REQUEST_CACHING</b>: All requests are fully cached.</li>
--   <li><b>PER_RESOLVER_CACHING</b>: Individual resolvers that you specify
--   are cached.</li>
--   </ul>
--   
--   <a>$sel:type':CreateApiCache'</a>, <a>createApiCache_type</a> - The
--   cache instance type. Valid values are
--   
--   <ul>
--   <li><pre>SMALL</pre></li>
--   <li><pre>MEDIUM</pre></li>
--   <li><pre>LARGE</pre></li>
--   <li><pre>XLARGE</pre></li>
--   <li><pre>LARGE_2X</pre></li>
--   <li><pre>LARGE_4X</pre></li>
--   <li><tt>LARGE_8X</tt> (not available in all regions)</li>
--   <li><pre>LARGE_12X</pre></li>
--   </ul>
--   
--   Historically, instance types were identified by an EC2-style value. As
--   of July 2020, this is deprecated, and the generic identifiers above
--   should be used.
--   
--   The following legacy instance types are available, but their use is
--   discouraged:
--   
--   <ul>
--   <li><b>T2_SMALL</b>: A t2.small instance type.</li>
--   <li><b>T2_MEDIUM</b>: A t2.medium instance type.</li>
--   <li><b>R4_LARGE</b>: A r4.large instance type.</li>
--   <li><b>R4_XLARGE</b>: A r4.xlarge instance type.</li>
--   <li><b>R4_2XLARGE</b>: A r4.2xlarge instance type.</li>
--   <li><b>R4_4XLARGE</b>: A r4.4xlarge instance type.</li>
--   <li><b>R4_8XLARGE</b>: A r4.8xlarge instance type.</li>
--   </ul>
newCreateApiCache :: Text -> Integer -> ApiCachingBehavior -> ApiCacheType -> CreateApiCache

-- | At rest encryption flag for cache. This setting cannot be updated
--   after creation.
createApiCache_atRestEncryptionEnabled :: Lens' CreateApiCache (Maybe Bool)

-- | Transit encryption flag when connecting to cache. This setting cannot
--   be updated after creation.
createApiCache_transitEncryptionEnabled :: Lens' CreateApiCache (Maybe Bool)

-- | The GraphQL API Id.
createApiCache_apiId :: Lens' CreateApiCache Text

-- | TTL in seconds for cache entries.
--   
--   Valid values are between 1 and 3600 seconds.
createApiCache_ttl :: Lens' CreateApiCache Integer

-- | Caching behavior.
--   
--   <ul>
--   <li><b>FULL_REQUEST_CACHING</b>: All requests are fully cached.</li>
--   <li><b>PER_RESOLVER_CACHING</b>: Individual resolvers that you specify
--   are cached.</li>
--   </ul>
createApiCache_apiCachingBehavior :: Lens' CreateApiCache ApiCachingBehavior

-- | The cache instance type. Valid values are
--   
--   <ul>
--   <li><pre>SMALL</pre></li>
--   <li><pre>MEDIUM</pre></li>
--   <li><pre>LARGE</pre></li>
--   <li><pre>XLARGE</pre></li>
--   <li><pre>LARGE_2X</pre></li>
--   <li><pre>LARGE_4X</pre></li>
--   <li><tt>LARGE_8X</tt> (not available in all regions)</li>
--   <li><pre>LARGE_12X</pre></li>
--   </ul>
--   
--   Historically, instance types were identified by an EC2-style value. As
--   of July 2020, this is deprecated, and the generic identifiers above
--   should be used.
--   
--   The following legacy instance types are available, but their use is
--   discouraged:
--   
--   <ul>
--   <li><b>T2_SMALL</b>: A t2.small instance type.</li>
--   <li><b>T2_MEDIUM</b>: A t2.medium instance type.</li>
--   <li><b>R4_LARGE</b>: A r4.large instance type.</li>
--   <li><b>R4_XLARGE</b>: A r4.xlarge instance type.</li>
--   <li><b>R4_2XLARGE</b>: A r4.2xlarge instance type.</li>
--   <li><b>R4_4XLARGE</b>: A r4.4xlarge instance type.</li>
--   <li><b>R4_8XLARGE</b>: A r4.8xlarge instance type.</li>
--   </ul>
createApiCache_type :: Lens' CreateApiCache ApiCacheType

-- | Represents the output of a <tt>CreateApiCache</tt> operation.
--   
--   <i>See:</i> <a>newCreateApiCacheResponse</a> smart constructor.
data CreateApiCacheResponse
CreateApiCacheResponse' :: Maybe ApiCache -> Int -> CreateApiCacheResponse

-- | The <tt>ApiCache</tt> object.
[$sel:apiCache:CreateApiCacheResponse'] :: CreateApiCacheResponse -> Maybe ApiCache

-- | The response's http status code.
[$sel:httpStatus:CreateApiCacheResponse'] :: CreateApiCacheResponse -> Int

-- | Create a value of <a>CreateApiCacheResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiCache:CreateApiCacheResponse'</a>,
--   <a>createApiCacheResponse_apiCache</a> - The <tt>ApiCache</tt> object.
--   
--   <a>$sel:httpStatus:CreateApiCacheResponse'</a>,
--   <a>createApiCacheResponse_httpStatus</a> - The response's http status
--   code.
newCreateApiCacheResponse :: Int -> CreateApiCacheResponse

-- | The <tt>ApiCache</tt> object.
createApiCacheResponse_apiCache :: Lens' CreateApiCacheResponse (Maybe ApiCache)

-- | The response's http status code.
createApiCacheResponse_httpStatus :: Lens' CreateApiCacheResponse Int
instance GHC.Generics.Generic Network.AWS.AppSync.CreateApiCache.CreateApiCache
instance GHC.Show.Show Network.AWS.AppSync.CreateApiCache.CreateApiCache
instance GHC.Read.Read Network.AWS.AppSync.CreateApiCache.CreateApiCache
instance GHC.Classes.Eq Network.AWS.AppSync.CreateApiCache.CreateApiCache
instance GHC.Generics.Generic Network.AWS.AppSync.CreateApiCache.CreateApiCacheResponse
instance GHC.Show.Show Network.AWS.AppSync.CreateApiCache.CreateApiCacheResponse
instance GHC.Read.Read Network.AWS.AppSync.CreateApiCache.CreateApiCacheResponse
instance GHC.Classes.Eq Network.AWS.AppSync.CreateApiCache.CreateApiCacheResponse
instance Network.AWS.Types.AWSRequest Network.AWS.AppSync.CreateApiCache.CreateApiCache
instance Control.DeepSeq.NFData Network.AWS.AppSync.CreateApiCache.CreateApiCacheResponse
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.CreateApiCache.CreateApiCache
instance Control.DeepSeq.NFData Network.AWS.AppSync.CreateApiCache.CreateApiCache
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.AppSync.CreateApiCache.CreateApiCache
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.CreateApiCache.CreateApiCache
instance Network.AWS.Data.Path.ToPath Network.AWS.AppSync.CreateApiCache.CreateApiCache
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.CreateApiCache.CreateApiCache


-- | Untags a resource.
module Network.AWS.AppSync.UntagResource

-- | <i>See:</i> <a>newUntagResource</a> smart constructor.
data UntagResource
UntagResource' :: Text -> NonEmpty Text -> UntagResource

-- | The <tt>GraphqlApi</tt> ARN.
[$sel:resourceArn:UntagResource'] :: UntagResource -> Text

-- | A list of <tt>TagKey</tt> objects.
[$sel:tagKeys:UntagResource'] :: UntagResource -> NonEmpty Text

-- | Create a value of <a>UntagResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:UntagResource'</a>,
--   <a>untagResource_resourceArn</a> - The <tt>GraphqlApi</tt> ARN.
--   
--   <a>$sel:tagKeys:UntagResource'</a>, <a>untagResource_tagKeys</a> - A
--   list of <tt>TagKey</tt> objects.
newUntagResource :: Text -> NonEmpty Text -> UntagResource

-- | The <tt>GraphqlApi</tt> ARN.
untagResource_resourceArn :: Lens' UntagResource Text

-- | A list of <tt>TagKey</tt> objects.
untagResource_tagKeys :: Lens' UntagResource (NonEmpty Text)

-- | <i>See:</i> <a>newUntagResourceResponse</a> smart constructor.
data UntagResourceResponse
UntagResourceResponse' :: Int -> UntagResourceResponse

-- | The response's http status code.
[$sel:httpStatus:UntagResourceResponse'] :: UntagResourceResponse -> Int

-- | Create a value of <a>UntagResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UntagResourceResponse'</a>,
--   <a>untagResourceResponse_httpStatus</a> - The response's http status
--   code.
newUntagResourceResponse :: Int -> UntagResourceResponse

-- | The response's http status code.
untagResourceResponse_httpStatus :: Lens' UntagResourceResponse Int
instance GHC.Generics.Generic Network.AWS.AppSync.UntagResource.UntagResource
instance GHC.Show.Show Network.AWS.AppSync.UntagResource.UntagResource
instance GHC.Read.Read Network.AWS.AppSync.UntagResource.UntagResource
instance GHC.Classes.Eq Network.AWS.AppSync.UntagResource.UntagResource
instance GHC.Generics.Generic Network.AWS.AppSync.UntagResource.UntagResourceResponse
instance GHC.Show.Show Network.AWS.AppSync.UntagResource.UntagResourceResponse
instance GHC.Read.Read Network.AWS.AppSync.UntagResource.UntagResourceResponse
instance GHC.Classes.Eq Network.AWS.AppSync.UntagResource.UntagResourceResponse
instance Network.AWS.Types.AWSRequest Network.AWS.AppSync.UntagResource.UntagResource
instance Control.DeepSeq.NFData Network.AWS.AppSync.UntagResource.UntagResourceResponse
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.UntagResource.UntagResource
instance Control.DeepSeq.NFData Network.AWS.AppSync.UntagResource.UntagResource
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.AppSync.UntagResource.UntagResource
instance Network.AWS.Data.Path.ToPath Network.AWS.AppSync.UntagResource.UntagResource
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.UntagResource.UntagResource


-- | Updates the cache for the GraphQL API.
module Network.AWS.AppSync.UpdateApiCache

-- | Represents the input of a <tt>UpdateApiCache</tt> operation.
--   
--   <i>See:</i> <a>newUpdateApiCache</a> smart constructor.
data UpdateApiCache
UpdateApiCache' :: Text -> Integer -> ApiCachingBehavior -> ApiCacheType -> UpdateApiCache

-- | The GraphQL API Id.
[$sel:apiId:UpdateApiCache'] :: UpdateApiCache -> Text

-- | TTL in seconds for cache entries.
--   
--   Valid values are between 1 and 3600 seconds.
[$sel:ttl:UpdateApiCache'] :: UpdateApiCache -> Integer

-- | Caching behavior.
--   
--   <ul>
--   <li><b>FULL_REQUEST_CACHING</b>: All requests are fully cached.</li>
--   <li><b>PER_RESOLVER_CACHING</b>: Individual resolvers that you specify
--   are cached.</li>
--   </ul>
[$sel:apiCachingBehavior:UpdateApiCache'] :: UpdateApiCache -> ApiCachingBehavior

-- | The cache instance type. Valid values are
--   
--   <ul>
--   <li><pre>SMALL</pre></li>
--   <li><pre>MEDIUM</pre></li>
--   <li><pre>LARGE</pre></li>
--   <li><pre>XLARGE</pre></li>
--   <li><pre>LARGE_2X</pre></li>
--   <li><pre>LARGE_4X</pre></li>
--   <li><tt>LARGE_8X</tt> (not available in all regions)</li>
--   <li><pre>LARGE_12X</pre></li>
--   </ul>
--   
--   Historically, instance types were identified by an EC2-style value. As
--   of July 2020, this is deprecated, and the generic identifiers above
--   should be used.
--   
--   The following legacy instance types are available, but their use is
--   discouraged:
--   
--   <ul>
--   <li><b>T2_SMALL</b>: A t2.small instance type.</li>
--   <li><b>T2_MEDIUM</b>: A t2.medium instance type.</li>
--   <li><b>R4_LARGE</b>: A r4.large instance type.</li>
--   <li><b>R4_XLARGE</b>: A r4.xlarge instance type.</li>
--   <li><b>R4_2XLARGE</b>: A r4.2xlarge instance type.</li>
--   <li><b>R4_4XLARGE</b>: A r4.4xlarge instance type.</li>
--   <li><b>R4_8XLARGE</b>: A r4.8xlarge instance type.</li>
--   </ul>
[$sel:type':UpdateApiCache'] :: UpdateApiCache -> ApiCacheType

-- | Create a value of <a>UpdateApiCache</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiId:UpdateApiCache'</a>, <a>updateApiCache_apiId</a> - The
--   GraphQL API Id.
--   
--   <a>$sel:ttl:UpdateApiCache'</a>, <a>updateApiCache_ttl</a> - TTL in
--   seconds for cache entries.
--   
--   Valid values are between 1 and 3600 seconds.
--   
--   <a>$sel:apiCachingBehavior:UpdateApiCache'</a>,
--   <a>updateApiCache_apiCachingBehavior</a> - Caching behavior.
--   
--   <ul>
--   <li><b>FULL_REQUEST_CACHING</b>: All requests are fully cached.</li>
--   <li><b>PER_RESOLVER_CACHING</b>: Individual resolvers that you specify
--   are cached.</li>
--   </ul>
--   
--   <a>$sel:type':UpdateApiCache'</a>, <a>updateApiCache_type</a> - The
--   cache instance type. Valid values are
--   
--   <ul>
--   <li><pre>SMALL</pre></li>
--   <li><pre>MEDIUM</pre></li>
--   <li><pre>LARGE</pre></li>
--   <li><pre>XLARGE</pre></li>
--   <li><pre>LARGE_2X</pre></li>
--   <li><pre>LARGE_4X</pre></li>
--   <li><tt>LARGE_8X</tt> (not available in all regions)</li>
--   <li><pre>LARGE_12X</pre></li>
--   </ul>
--   
--   Historically, instance types were identified by an EC2-style value. As
--   of July 2020, this is deprecated, and the generic identifiers above
--   should be used.
--   
--   The following legacy instance types are available, but their use is
--   discouraged:
--   
--   <ul>
--   <li><b>T2_SMALL</b>: A t2.small instance type.</li>
--   <li><b>T2_MEDIUM</b>: A t2.medium instance type.</li>
--   <li><b>R4_LARGE</b>: A r4.large instance type.</li>
--   <li><b>R4_XLARGE</b>: A r4.xlarge instance type.</li>
--   <li><b>R4_2XLARGE</b>: A r4.2xlarge instance type.</li>
--   <li><b>R4_4XLARGE</b>: A r4.4xlarge instance type.</li>
--   <li><b>R4_8XLARGE</b>: A r4.8xlarge instance type.</li>
--   </ul>
newUpdateApiCache :: Text -> Integer -> ApiCachingBehavior -> ApiCacheType -> UpdateApiCache

-- | The GraphQL API Id.
updateApiCache_apiId :: Lens' UpdateApiCache Text

-- | TTL in seconds for cache entries.
--   
--   Valid values are between 1 and 3600 seconds.
updateApiCache_ttl :: Lens' UpdateApiCache Integer

-- | Caching behavior.
--   
--   <ul>
--   <li><b>FULL_REQUEST_CACHING</b>: All requests are fully cached.</li>
--   <li><b>PER_RESOLVER_CACHING</b>: Individual resolvers that you specify
--   are cached.</li>
--   </ul>
updateApiCache_apiCachingBehavior :: Lens' UpdateApiCache ApiCachingBehavior

-- | The cache instance type. Valid values are
--   
--   <ul>
--   <li><pre>SMALL</pre></li>
--   <li><pre>MEDIUM</pre></li>
--   <li><pre>LARGE</pre></li>
--   <li><pre>XLARGE</pre></li>
--   <li><pre>LARGE_2X</pre></li>
--   <li><pre>LARGE_4X</pre></li>
--   <li><tt>LARGE_8X</tt> (not available in all regions)</li>
--   <li><pre>LARGE_12X</pre></li>
--   </ul>
--   
--   Historically, instance types were identified by an EC2-style value. As
--   of July 2020, this is deprecated, and the generic identifiers above
--   should be used.
--   
--   The following legacy instance types are available, but their use is
--   discouraged:
--   
--   <ul>
--   <li><b>T2_SMALL</b>: A t2.small instance type.</li>
--   <li><b>T2_MEDIUM</b>: A t2.medium instance type.</li>
--   <li><b>R4_LARGE</b>: A r4.large instance type.</li>
--   <li><b>R4_XLARGE</b>: A r4.xlarge instance type.</li>
--   <li><b>R4_2XLARGE</b>: A r4.2xlarge instance type.</li>
--   <li><b>R4_4XLARGE</b>: A r4.4xlarge instance type.</li>
--   <li><b>R4_8XLARGE</b>: A r4.8xlarge instance type.</li>
--   </ul>
updateApiCache_type :: Lens' UpdateApiCache ApiCacheType

-- | Represents the output of a <tt>UpdateApiCache</tt> operation.
--   
--   <i>See:</i> <a>newUpdateApiCacheResponse</a> smart constructor.
data UpdateApiCacheResponse
UpdateApiCacheResponse' :: Maybe ApiCache -> Int -> UpdateApiCacheResponse

-- | The <tt>ApiCache</tt> object.
[$sel:apiCache:UpdateApiCacheResponse'] :: UpdateApiCacheResponse -> Maybe ApiCache

-- | The response's http status code.
[$sel:httpStatus:UpdateApiCacheResponse'] :: UpdateApiCacheResponse -> Int

-- | Create a value of <a>UpdateApiCacheResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiCache:UpdateApiCacheResponse'</a>,
--   <a>updateApiCacheResponse_apiCache</a> - The <tt>ApiCache</tt> object.
--   
--   <a>$sel:httpStatus:UpdateApiCacheResponse'</a>,
--   <a>updateApiCacheResponse_httpStatus</a> - The response's http status
--   code.
newUpdateApiCacheResponse :: Int -> UpdateApiCacheResponse

-- | The <tt>ApiCache</tt> object.
updateApiCacheResponse_apiCache :: Lens' UpdateApiCacheResponse (Maybe ApiCache)

-- | The response's http status code.
updateApiCacheResponse_httpStatus :: Lens' UpdateApiCacheResponse Int
instance GHC.Generics.Generic Network.AWS.AppSync.UpdateApiCache.UpdateApiCache
instance GHC.Show.Show Network.AWS.AppSync.UpdateApiCache.UpdateApiCache
instance GHC.Read.Read Network.AWS.AppSync.UpdateApiCache.UpdateApiCache
instance GHC.Classes.Eq Network.AWS.AppSync.UpdateApiCache.UpdateApiCache
instance GHC.Generics.Generic Network.AWS.AppSync.UpdateApiCache.UpdateApiCacheResponse
instance GHC.Show.Show Network.AWS.AppSync.UpdateApiCache.UpdateApiCacheResponse
instance GHC.Read.Read Network.AWS.AppSync.UpdateApiCache.UpdateApiCacheResponse
instance GHC.Classes.Eq Network.AWS.AppSync.UpdateApiCache.UpdateApiCacheResponse
instance Network.AWS.Types.AWSRequest Network.AWS.AppSync.UpdateApiCache.UpdateApiCache
instance Control.DeepSeq.NFData Network.AWS.AppSync.UpdateApiCache.UpdateApiCacheResponse
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.UpdateApiCache.UpdateApiCache
instance Control.DeepSeq.NFData Network.AWS.AppSync.UpdateApiCache.UpdateApiCache
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.AppSync.UpdateApiCache.UpdateApiCache
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.UpdateApiCache.UpdateApiCache
instance Network.AWS.Data.Path.ToPath Network.AWS.AppSync.UpdateApiCache.UpdateApiCache
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.UpdateApiCache.UpdateApiCache


-- | Updates an API key. The key can be updated while it is not deleted.
module Network.AWS.AppSync.UpdateApiKey

-- | <i>See:</i> <a>newUpdateApiKey</a> smart constructor.
data UpdateApiKey
UpdateApiKey' :: Maybe Text -> Maybe Integer -> Text -> Text -> UpdateApiKey

-- | A description of the purpose of the API key.
[$sel:description:UpdateApiKey'] :: UpdateApiKey -> Maybe Text

-- | The time from update time after which the API key expires. The date is
--   represented as seconds since the epoch. For more information, see .
[$sel:expires:UpdateApiKey'] :: UpdateApiKey -> Maybe Integer

-- | The ID for the GraphQL API.
[$sel:apiId:UpdateApiKey'] :: UpdateApiKey -> Text

-- | The API key ID.
[$sel:id:UpdateApiKey'] :: UpdateApiKey -> Text

-- | Create a value of <a>UpdateApiKey</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:description:UpdateApiKey'</a>, <a>updateApiKey_description</a>
--   - A description of the purpose of the API key.
--   
--   <a>$sel:expires:UpdateApiKey'</a>, <a>updateApiKey_expires</a> - The
--   time from update time after which the API key expires. The date is
--   represented as seconds since the epoch. For more information, see .
--   
--   <a>$sel:apiId:UpdateApiKey'</a>, <a>updateApiKey_apiId</a> - The ID
--   for the GraphQL API.
--   
--   <a>$sel:id:UpdateApiKey'</a>, <a>updateApiKey_id</a> - The API key ID.
newUpdateApiKey :: Text -> Text -> UpdateApiKey

-- | A description of the purpose of the API key.
updateApiKey_description :: Lens' UpdateApiKey (Maybe Text)

-- | The time from update time after which the API key expires. The date is
--   represented as seconds since the epoch. For more information, see .
updateApiKey_expires :: Lens' UpdateApiKey (Maybe Integer)

-- | The ID for the GraphQL API.
updateApiKey_apiId :: Lens' UpdateApiKey Text

-- | The API key ID.
updateApiKey_id :: Lens' UpdateApiKey Text

-- | <i>See:</i> <a>newUpdateApiKeyResponse</a> smart constructor.
data UpdateApiKeyResponse
UpdateApiKeyResponse' :: Maybe ApiKey -> Int -> UpdateApiKeyResponse

-- | The API key.
[$sel:apiKey:UpdateApiKeyResponse'] :: UpdateApiKeyResponse -> Maybe ApiKey

-- | The response's http status code.
[$sel:httpStatus:UpdateApiKeyResponse'] :: UpdateApiKeyResponse -> Int

-- | Create a value of <a>UpdateApiKeyResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiKey:UpdateApiKeyResponse'</a>,
--   <a>updateApiKeyResponse_apiKey</a> - The API key.
--   
--   <a>$sel:httpStatus:UpdateApiKeyResponse'</a>,
--   <a>updateApiKeyResponse_httpStatus</a> - The response's http status
--   code.
newUpdateApiKeyResponse :: Int -> UpdateApiKeyResponse

-- | The API key.
updateApiKeyResponse_apiKey :: Lens' UpdateApiKeyResponse (Maybe ApiKey)

-- | The response's http status code.
updateApiKeyResponse_httpStatus :: Lens' UpdateApiKeyResponse Int
instance GHC.Generics.Generic Network.AWS.AppSync.UpdateApiKey.UpdateApiKey
instance GHC.Show.Show Network.AWS.AppSync.UpdateApiKey.UpdateApiKey
instance GHC.Read.Read Network.AWS.AppSync.UpdateApiKey.UpdateApiKey
instance GHC.Classes.Eq Network.AWS.AppSync.UpdateApiKey.UpdateApiKey
instance GHC.Generics.Generic Network.AWS.AppSync.UpdateApiKey.UpdateApiKeyResponse
instance GHC.Show.Show Network.AWS.AppSync.UpdateApiKey.UpdateApiKeyResponse
instance GHC.Read.Read Network.AWS.AppSync.UpdateApiKey.UpdateApiKeyResponse
instance GHC.Classes.Eq Network.AWS.AppSync.UpdateApiKey.UpdateApiKeyResponse
instance Network.AWS.Types.AWSRequest Network.AWS.AppSync.UpdateApiKey.UpdateApiKey
instance Control.DeepSeq.NFData Network.AWS.AppSync.UpdateApiKey.UpdateApiKeyResponse
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.UpdateApiKey.UpdateApiKey
instance Control.DeepSeq.NFData Network.AWS.AppSync.UpdateApiKey.UpdateApiKey
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.AppSync.UpdateApiKey.UpdateApiKey
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.UpdateApiKey.UpdateApiKey
instance Network.AWS.Data.Path.ToPath Network.AWS.AppSync.UpdateApiKey.UpdateApiKey
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.UpdateApiKey.UpdateApiKey


-- | Updates a <tt>DataSource</tt> object.
module Network.AWS.AppSync.UpdateDataSource

-- | <i>See:</i> <a>newUpdateDataSource</a> smart constructor.
data UpdateDataSource
UpdateDataSource' :: Maybe Text -> Maybe RelationalDatabaseDataSourceConfig -> Maybe ElasticsearchDataSourceConfig -> Maybe LambdaDataSourceConfig -> Maybe DynamodbDataSourceConfig -> Maybe Text -> Maybe OpenSearchServiceDataSourceConfig -> Maybe HttpDataSourceConfig -> Text -> Text -> DataSourceType -> UpdateDataSource

-- | The new service role ARN for the data source.
[$sel:serviceRoleArn:UpdateDataSource'] :: UpdateDataSource -> Maybe Text

-- | The new relational database configuration.
[$sel:relationalDatabaseConfig:UpdateDataSource'] :: UpdateDataSource -> Maybe RelationalDatabaseDataSourceConfig

-- | The new OpenSearch configuration.
--   
--   As of September 2021, Amazon Elasticsearch service is Amazon
--   OpenSearch Service. This configuration is deprecated. Instead, use
--   UpdateDataSourceRequest$openSearchServiceConfig to update an
--   OpenSearch data source.
[$sel:elasticsearchConfig:UpdateDataSource'] :: UpdateDataSource -> Maybe ElasticsearchDataSourceConfig

-- | The new Amazon Web Services Lambda configuration.
[$sel:lambdaConfig:UpdateDataSource'] :: UpdateDataSource -> Maybe LambdaDataSourceConfig

-- | The new Amazon DynamoDB configuration.
[$sel:dynamodbConfig:UpdateDataSource'] :: UpdateDataSource -> Maybe DynamodbDataSourceConfig

-- | The new description for the data source.
[$sel:description:UpdateDataSource'] :: UpdateDataSource -> Maybe Text

-- | The new OpenSearch configuration.
[$sel:openSearchServiceConfig:UpdateDataSource'] :: UpdateDataSource -> Maybe OpenSearchServiceDataSourceConfig

-- | The new HTTP endpoint configuration.
[$sel:httpConfig:UpdateDataSource'] :: UpdateDataSource -> Maybe HttpDataSourceConfig

-- | The API ID.
[$sel:apiId:UpdateDataSource'] :: UpdateDataSource -> Text

-- | The new name for the data source.
[$sel:name:UpdateDataSource'] :: UpdateDataSource -> Text

-- | The new data source type.
[$sel:type':UpdateDataSource'] :: UpdateDataSource -> DataSourceType

-- | Create a value of <a>UpdateDataSource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:serviceRoleArn:UpdateDataSource'</a>,
--   <a>updateDataSource_serviceRoleArn</a> - The new service role ARN for
--   the data source.
--   
--   <a>$sel:relationalDatabaseConfig:UpdateDataSource'</a>,
--   <a>updateDataSource_relationalDatabaseConfig</a> - The new relational
--   database configuration.
--   
--   <a>$sel:elasticsearchConfig:UpdateDataSource'</a>,
--   <a>updateDataSource_elasticsearchConfig</a> - The new OpenSearch
--   configuration.
--   
--   As of September 2021, Amazon Elasticsearch service is Amazon
--   OpenSearch Service. This configuration is deprecated. Instead, use
--   UpdateDataSourceRequest$openSearchServiceConfig to update an
--   OpenSearch data source.
--   
--   <a>$sel:lambdaConfig:UpdateDataSource'</a>,
--   <a>updateDataSource_lambdaConfig</a> - The new Amazon Web Services
--   Lambda configuration.
--   
--   <a>$sel:dynamodbConfig:UpdateDataSource'</a>,
--   <a>updateDataSource_dynamodbConfig</a> - The new Amazon DynamoDB
--   configuration.
--   
--   <a>$sel:description:UpdateDataSource'</a>,
--   <a>updateDataSource_description</a> - The new description for the data
--   source.
--   
--   <a>$sel:openSearchServiceConfig:UpdateDataSource'</a>,
--   <a>updateDataSource_openSearchServiceConfig</a> - The new OpenSearch
--   configuration.
--   
--   <a>$sel:httpConfig:UpdateDataSource'</a>,
--   <a>updateDataSource_httpConfig</a> - The new HTTP endpoint
--   configuration.
--   
--   <a>$sel:apiId:UpdateDataSource'</a>, <a>updateDataSource_apiId</a> -
--   The API ID.
--   
--   <a>$sel:name:UpdateDataSource'</a>, <a>updateDataSource_name</a> - The
--   new name for the data source.
--   
--   <a>$sel:type':UpdateDataSource'</a>, <a>updateDataSource_type</a> -
--   The new data source type.
newUpdateDataSource :: Text -> Text -> DataSourceType -> UpdateDataSource

-- | The new service role ARN for the data source.
updateDataSource_serviceRoleArn :: Lens' UpdateDataSource (Maybe Text)

-- | The new relational database configuration.
updateDataSource_relationalDatabaseConfig :: Lens' UpdateDataSource (Maybe RelationalDatabaseDataSourceConfig)

-- | The new OpenSearch configuration.
--   
--   As of September 2021, Amazon Elasticsearch service is Amazon
--   OpenSearch Service. This configuration is deprecated. Instead, use
--   UpdateDataSourceRequest$openSearchServiceConfig to update an
--   OpenSearch data source.
updateDataSource_elasticsearchConfig :: Lens' UpdateDataSource (Maybe ElasticsearchDataSourceConfig)

-- | The new Amazon Web Services Lambda configuration.
updateDataSource_lambdaConfig :: Lens' UpdateDataSource (Maybe LambdaDataSourceConfig)

-- | The new Amazon DynamoDB configuration.
updateDataSource_dynamodbConfig :: Lens' UpdateDataSource (Maybe DynamodbDataSourceConfig)

-- | The new description for the data source.
updateDataSource_description :: Lens' UpdateDataSource (Maybe Text)

-- | The new OpenSearch configuration.
updateDataSource_openSearchServiceConfig :: Lens' UpdateDataSource (Maybe OpenSearchServiceDataSourceConfig)

-- | The new HTTP endpoint configuration.
updateDataSource_httpConfig :: Lens' UpdateDataSource (Maybe HttpDataSourceConfig)

-- | The API ID.
updateDataSource_apiId :: Lens' UpdateDataSource Text

-- | The new name for the data source.
updateDataSource_name :: Lens' UpdateDataSource Text

-- | The new data source type.
updateDataSource_type :: Lens' UpdateDataSource DataSourceType

-- | <i>See:</i> <a>newUpdateDataSourceResponse</a> smart constructor.
data UpdateDataSourceResponse
UpdateDataSourceResponse' :: Maybe DataSource -> Int -> UpdateDataSourceResponse

-- | The updated <tt>DataSource</tt> object.
[$sel:dataSource:UpdateDataSourceResponse'] :: UpdateDataSourceResponse -> Maybe DataSource

-- | The response's http status code.
[$sel:httpStatus:UpdateDataSourceResponse'] :: UpdateDataSourceResponse -> Int

-- | Create a value of <a>UpdateDataSourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dataSource:UpdateDataSourceResponse'</a>,
--   <a>updateDataSourceResponse_dataSource</a> - The updated
--   <tt>DataSource</tt> object.
--   
--   <a>$sel:httpStatus:UpdateDataSourceResponse'</a>,
--   <a>updateDataSourceResponse_httpStatus</a> - The response's http
--   status code.
newUpdateDataSourceResponse :: Int -> UpdateDataSourceResponse

-- | The updated <tt>DataSource</tt> object.
updateDataSourceResponse_dataSource :: Lens' UpdateDataSourceResponse (Maybe DataSource)

-- | The response's http status code.
updateDataSourceResponse_httpStatus :: Lens' UpdateDataSourceResponse Int
instance GHC.Generics.Generic Network.AWS.AppSync.UpdateDataSource.UpdateDataSource
instance GHC.Show.Show Network.AWS.AppSync.UpdateDataSource.UpdateDataSource
instance GHC.Read.Read Network.AWS.AppSync.UpdateDataSource.UpdateDataSource
instance GHC.Classes.Eq Network.AWS.AppSync.UpdateDataSource.UpdateDataSource
instance GHC.Generics.Generic Network.AWS.AppSync.UpdateDataSource.UpdateDataSourceResponse
instance GHC.Show.Show Network.AWS.AppSync.UpdateDataSource.UpdateDataSourceResponse
instance GHC.Read.Read Network.AWS.AppSync.UpdateDataSource.UpdateDataSourceResponse
instance GHC.Classes.Eq Network.AWS.AppSync.UpdateDataSource.UpdateDataSourceResponse
instance Network.AWS.Types.AWSRequest Network.AWS.AppSync.UpdateDataSource.UpdateDataSource
instance Control.DeepSeq.NFData Network.AWS.AppSync.UpdateDataSource.UpdateDataSourceResponse
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.UpdateDataSource.UpdateDataSource
instance Control.DeepSeq.NFData Network.AWS.AppSync.UpdateDataSource.UpdateDataSource
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.AppSync.UpdateDataSource.UpdateDataSource
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.UpdateDataSource.UpdateDataSource
instance Network.AWS.Data.Path.ToPath Network.AWS.AppSync.UpdateDataSource.UpdateDataSource
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.UpdateDataSource.UpdateDataSource


-- | Updates a <tt>Function</tt> object.
module Network.AWS.AppSync.UpdateFunction

-- | <i>See:</i> <a>newUpdateFunction</a> smart constructor.
data UpdateFunction
UpdateFunction' :: Maybe Text -> Maybe SyncConfig -> Maybe Text -> Maybe Text -> Text -> Text -> Text -> Text -> Text -> UpdateFunction

-- | The <tt>Function</tt> request mapping template.
[$sel:responseMappingTemplate:UpdateFunction'] :: UpdateFunction -> Maybe Text
[$sel:syncConfig:UpdateFunction'] :: UpdateFunction -> Maybe SyncConfig

-- | The <tt>Function</tt> description.
[$sel:description:UpdateFunction'] :: UpdateFunction -> Maybe Text

-- | The <tt>Function</tt> request mapping template. Functions support only
--   the 2018-05-29 version of the request mapping template.
[$sel:requestMappingTemplate:UpdateFunction'] :: UpdateFunction -> Maybe Text

-- | The GraphQL API ID.
[$sel:apiId:UpdateFunction'] :: UpdateFunction -> Text

-- | The <tt>Function</tt> name.
[$sel:name:UpdateFunction'] :: UpdateFunction -> Text

-- | The function ID.
[$sel:functionId:UpdateFunction'] :: UpdateFunction -> Text

-- | The <tt>Function</tt> <tt>DataSource</tt> name.
[$sel:dataSourceName:UpdateFunction'] :: UpdateFunction -> Text

-- | The <tt>version</tt> of the request mapping template. Currently the
--   supported value is 2018-05-29.
[$sel:functionVersion:UpdateFunction'] :: UpdateFunction -> Text

-- | Create a value of <a>UpdateFunction</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:responseMappingTemplate:UpdateFunction'</a>,
--   <a>updateFunction_responseMappingTemplate</a> - The <tt>Function</tt>
--   request mapping template.
--   
--   <a>$sel:syncConfig:UpdateFunction'</a>,
--   <a>updateFunction_syncConfig</a> - Undocumented member.
--   
--   <a>$sel:description:UpdateFunction'</a>,
--   <a>updateFunction_description</a> - The <tt>Function</tt> description.
--   
--   <a>$sel:requestMappingTemplate:UpdateFunction'</a>,
--   <a>updateFunction_requestMappingTemplate</a> - The <tt>Function</tt>
--   request mapping template. Functions support only the 2018-05-29
--   version of the request mapping template.
--   
--   <a>$sel:apiId:UpdateFunction'</a>, <a>updateFunction_apiId</a> - The
--   GraphQL API ID.
--   
--   <a>$sel:name:UpdateFunction'</a>, <a>updateFunction_name</a> - The
--   <tt>Function</tt> name.
--   
--   <a>$sel:functionId:UpdateFunction'</a>,
--   <a>updateFunction_functionId</a> - The function ID.
--   
--   <a>$sel:dataSourceName:UpdateFunction'</a>,
--   <a>updateFunction_dataSourceName</a> - The <tt>Function</tt>
--   <tt>DataSource</tt> name.
--   
--   <a>$sel:functionVersion:UpdateFunction'</a>,
--   <a>updateFunction_functionVersion</a> - The <tt>version</tt> of the
--   request mapping template. Currently the supported value is 2018-05-29.
newUpdateFunction :: Text -> Text -> Text -> Text -> Text -> UpdateFunction

-- | The <tt>Function</tt> request mapping template.
updateFunction_responseMappingTemplate :: Lens' UpdateFunction (Maybe Text)

-- | Undocumented member.
updateFunction_syncConfig :: Lens' UpdateFunction (Maybe SyncConfig)

-- | The <tt>Function</tt> description.
updateFunction_description :: Lens' UpdateFunction (Maybe Text)

-- | The <tt>Function</tt> request mapping template. Functions support only
--   the 2018-05-29 version of the request mapping template.
updateFunction_requestMappingTemplate :: Lens' UpdateFunction (Maybe Text)

-- | The GraphQL API ID.
updateFunction_apiId :: Lens' UpdateFunction Text

-- | The <tt>Function</tt> name.
updateFunction_name :: Lens' UpdateFunction Text

-- | The function ID.
updateFunction_functionId :: Lens' UpdateFunction Text

-- | The <tt>Function</tt> <tt>DataSource</tt> name.
updateFunction_dataSourceName :: Lens' UpdateFunction Text

-- | The <tt>version</tt> of the request mapping template. Currently the
--   supported value is 2018-05-29.
updateFunction_functionVersion :: Lens' UpdateFunction Text

-- | <i>See:</i> <a>newUpdateFunctionResponse</a> smart constructor.
data UpdateFunctionResponse
UpdateFunctionResponse' :: Maybe FunctionConfiguration -> Int -> UpdateFunctionResponse

-- | The <tt>Function</tt> object.
[$sel:functionConfiguration:UpdateFunctionResponse'] :: UpdateFunctionResponse -> Maybe FunctionConfiguration

-- | The response's http status code.
[$sel:httpStatus:UpdateFunctionResponse'] :: UpdateFunctionResponse -> Int

-- | Create a value of <a>UpdateFunctionResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:functionConfiguration:UpdateFunctionResponse'</a>,
--   <a>updateFunctionResponse_functionConfiguration</a> - The
--   <tt>Function</tt> object.
--   
--   <a>$sel:httpStatus:UpdateFunctionResponse'</a>,
--   <a>updateFunctionResponse_httpStatus</a> - The response's http status
--   code.
newUpdateFunctionResponse :: Int -> UpdateFunctionResponse

-- | The <tt>Function</tt> object.
updateFunctionResponse_functionConfiguration :: Lens' UpdateFunctionResponse (Maybe FunctionConfiguration)

-- | The response's http status code.
updateFunctionResponse_httpStatus :: Lens' UpdateFunctionResponse Int
instance GHC.Generics.Generic Network.AWS.AppSync.UpdateFunction.UpdateFunction
instance GHC.Show.Show Network.AWS.AppSync.UpdateFunction.UpdateFunction
instance GHC.Read.Read Network.AWS.AppSync.UpdateFunction.UpdateFunction
instance GHC.Classes.Eq Network.AWS.AppSync.UpdateFunction.UpdateFunction
instance GHC.Generics.Generic Network.AWS.AppSync.UpdateFunction.UpdateFunctionResponse
instance GHC.Show.Show Network.AWS.AppSync.UpdateFunction.UpdateFunctionResponse
instance GHC.Read.Read Network.AWS.AppSync.UpdateFunction.UpdateFunctionResponse
instance GHC.Classes.Eq Network.AWS.AppSync.UpdateFunction.UpdateFunctionResponse
instance Network.AWS.Types.AWSRequest Network.AWS.AppSync.UpdateFunction.UpdateFunction
instance Control.DeepSeq.NFData Network.AWS.AppSync.UpdateFunction.UpdateFunctionResponse
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.UpdateFunction.UpdateFunction
instance Control.DeepSeq.NFData Network.AWS.AppSync.UpdateFunction.UpdateFunction
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.AppSync.UpdateFunction.UpdateFunction
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.UpdateFunction.UpdateFunction
instance Network.AWS.Data.Path.ToPath Network.AWS.AppSync.UpdateFunction.UpdateFunction
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.UpdateFunction.UpdateFunction


-- | Updates a <tt>GraphqlApi</tt> object.
module Network.AWS.AppSync.UpdateGraphqlApi

-- | <i>See:</i> <a>newUpdateGraphqlApi</a> smart constructor.
data UpdateGraphqlApi
UpdateGraphqlApi' :: Maybe OpenIDConnectConfig -> Maybe UserPoolConfig -> Maybe Bool -> Maybe LambdaAuthorizerConfig -> Maybe LogConfig -> Maybe [AdditionalAuthenticationProvider] -> Maybe AuthenticationType -> Text -> Text -> UpdateGraphqlApi

-- | The OpenID Connect configuration for the <tt>GraphqlApi</tt> object.
[$sel:openIDConnectConfig:UpdateGraphqlApi'] :: UpdateGraphqlApi -> Maybe OpenIDConnectConfig

-- | The new Amazon Cognito user pool configuration for the
--   <tt>GraphqlApi</tt> object.
[$sel:userPoolConfig:UpdateGraphqlApi'] :: UpdateGraphqlApi -> Maybe UserPoolConfig

-- | A flag indicating whether to enable X-Ray tracing for the
--   <tt>GraphqlApi</tt>.
[$sel:xrayEnabled:UpdateGraphqlApi'] :: UpdateGraphqlApi -> Maybe Bool

-- | Configuration for Amazon Web Services Lambda function authorization.
[$sel:lambdaAuthorizerConfig:UpdateGraphqlApi'] :: UpdateGraphqlApi -> Maybe LambdaAuthorizerConfig

-- | The Amazon CloudWatch Logs configuration for the <tt>GraphqlApi</tt>
--   object.
[$sel:logConfig:UpdateGraphqlApi'] :: UpdateGraphqlApi -> Maybe LogConfig

-- | A list of additional authentication providers for the
--   <tt>GraphqlApi</tt> API.
[$sel:additionalAuthenticationProviders:UpdateGraphqlApi'] :: UpdateGraphqlApi -> Maybe [AdditionalAuthenticationProvider]

-- | The new authentication type for the <tt>GraphqlApi</tt> object.
[$sel:authenticationType:UpdateGraphqlApi'] :: UpdateGraphqlApi -> Maybe AuthenticationType

-- | The API ID.
[$sel:apiId:UpdateGraphqlApi'] :: UpdateGraphqlApi -> Text

-- | The new name for the <tt>GraphqlApi</tt> object.
[$sel:name:UpdateGraphqlApi'] :: UpdateGraphqlApi -> Text

-- | Create a value of <a>UpdateGraphqlApi</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:openIDConnectConfig:UpdateGraphqlApi'</a>,
--   <a>updateGraphqlApi_openIDConnectConfig</a> - The OpenID Connect
--   configuration for the <tt>GraphqlApi</tt> object.
--   
--   <a>$sel:userPoolConfig:UpdateGraphqlApi'</a>,
--   <a>updateGraphqlApi_userPoolConfig</a> - The new Amazon Cognito user
--   pool configuration for the <tt>GraphqlApi</tt> object.
--   
--   <a>$sel:xrayEnabled:UpdateGraphqlApi'</a>,
--   <a>updateGraphqlApi_xrayEnabled</a> - A flag indicating whether to
--   enable X-Ray tracing for the <tt>GraphqlApi</tt>.
--   
--   <a>$sel:lambdaAuthorizerConfig:UpdateGraphqlApi'</a>,
--   <a>updateGraphqlApi_lambdaAuthorizerConfig</a> - Configuration for
--   Amazon Web Services Lambda function authorization.
--   
--   <a>$sel:logConfig:UpdateGraphqlApi'</a>,
--   <a>updateGraphqlApi_logConfig</a> - The Amazon CloudWatch Logs
--   configuration for the <tt>GraphqlApi</tt> object.
--   
--   <a>$sel:additionalAuthenticationProviders:UpdateGraphqlApi'</a>,
--   <a>updateGraphqlApi_additionalAuthenticationProviders</a> - A list of
--   additional authentication providers for the <tt>GraphqlApi</tt> API.
--   
--   <a>$sel:authenticationType:UpdateGraphqlApi'</a>,
--   <a>updateGraphqlApi_authenticationType</a> - The new authentication
--   type for the <tt>GraphqlApi</tt> object.
--   
--   <a>$sel:apiId:UpdateGraphqlApi'</a>, <a>updateGraphqlApi_apiId</a> -
--   The API ID.
--   
--   <a>$sel:name:UpdateGraphqlApi'</a>, <a>updateGraphqlApi_name</a> - The
--   new name for the <tt>GraphqlApi</tt> object.
newUpdateGraphqlApi :: Text -> Text -> UpdateGraphqlApi

-- | The OpenID Connect configuration for the <tt>GraphqlApi</tt> object.
updateGraphqlApi_openIDConnectConfig :: Lens' UpdateGraphqlApi (Maybe OpenIDConnectConfig)

-- | The new Amazon Cognito user pool configuration for the
--   <tt>GraphqlApi</tt> object.
updateGraphqlApi_userPoolConfig :: Lens' UpdateGraphqlApi (Maybe UserPoolConfig)

-- | A flag indicating whether to enable X-Ray tracing for the
--   <tt>GraphqlApi</tt>.
updateGraphqlApi_xrayEnabled :: Lens' UpdateGraphqlApi (Maybe Bool)

-- | Configuration for Amazon Web Services Lambda function authorization.
updateGraphqlApi_lambdaAuthorizerConfig :: Lens' UpdateGraphqlApi (Maybe LambdaAuthorizerConfig)

-- | The Amazon CloudWatch Logs configuration for the <tt>GraphqlApi</tt>
--   object.
updateGraphqlApi_logConfig :: Lens' UpdateGraphqlApi (Maybe LogConfig)

-- | A list of additional authentication providers for the
--   <tt>GraphqlApi</tt> API.
updateGraphqlApi_additionalAuthenticationProviders :: Lens' UpdateGraphqlApi (Maybe [AdditionalAuthenticationProvider])

-- | The new authentication type for the <tt>GraphqlApi</tt> object.
updateGraphqlApi_authenticationType :: Lens' UpdateGraphqlApi (Maybe AuthenticationType)

-- | The API ID.
updateGraphqlApi_apiId :: Lens' UpdateGraphqlApi Text

-- | The new name for the <tt>GraphqlApi</tt> object.
updateGraphqlApi_name :: Lens' UpdateGraphqlApi Text

-- | <i>See:</i> <a>newUpdateGraphqlApiResponse</a> smart constructor.
data UpdateGraphqlApiResponse
UpdateGraphqlApiResponse' :: Maybe GraphqlApi -> Int -> UpdateGraphqlApiResponse

-- | The updated <tt>GraphqlApi</tt> object.
[$sel:graphqlApi:UpdateGraphqlApiResponse'] :: UpdateGraphqlApiResponse -> Maybe GraphqlApi

-- | The response's http status code.
[$sel:httpStatus:UpdateGraphqlApiResponse'] :: UpdateGraphqlApiResponse -> Int

-- | Create a value of <a>UpdateGraphqlApiResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:graphqlApi:UpdateGraphqlApiResponse'</a>,
--   <a>updateGraphqlApiResponse_graphqlApi</a> - The updated
--   <tt>GraphqlApi</tt> object.
--   
--   <a>$sel:httpStatus:UpdateGraphqlApiResponse'</a>,
--   <a>updateGraphqlApiResponse_httpStatus</a> - The response's http
--   status code.
newUpdateGraphqlApiResponse :: Int -> UpdateGraphqlApiResponse

-- | The updated <tt>GraphqlApi</tt> object.
updateGraphqlApiResponse_graphqlApi :: Lens' UpdateGraphqlApiResponse (Maybe GraphqlApi)

-- | The response's http status code.
updateGraphqlApiResponse_httpStatus :: Lens' UpdateGraphqlApiResponse Int
instance GHC.Generics.Generic Network.AWS.AppSync.UpdateGraphqlApi.UpdateGraphqlApi
instance GHC.Show.Show Network.AWS.AppSync.UpdateGraphqlApi.UpdateGraphqlApi
instance GHC.Read.Read Network.AWS.AppSync.UpdateGraphqlApi.UpdateGraphqlApi
instance GHC.Classes.Eq Network.AWS.AppSync.UpdateGraphqlApi.UpdateGraphqlApi
instance GHC.Generics.Generic Network.AWS.AppSync.UpdateGraphqlApi.UpdateGraphqlApiResponse
instance GHC.Show.Show Network.AWS.AppSync.UpdateGraphqlApi.UpdateGraphqlApiResponse
instance GHC.Read.Read Network.AWS.AppSync.UpdateGraphqlApi.UpdateGraphqlApiResponse
instance GHC.Classes.Eq Network.AWS.AppSync.UpdateGraphqlApi.UpdateGraphqlApiResponse
instance Network.AWS.Types.AWSRequest Network.AWS.AppSync.UpdateGraphqlApi.UpdateGraphqlApi
instance Control.DeepSeq.NFData Network.AWS.AppSync.UpdateGraphqlApi.UpdateGraphqlApiResponse
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.UpdateGraphqlApi.UpdateGraphqlApi
instance Control.DeepSeq.NFData Network.AWS.AppSync.UpdateGraphqlApi.UpdateGraphqlApi
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.AppSync.UpdateGraphqlApi.UpdateGraphqlApi
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.UpdateGraphqlApi.UpdateGraphqlApi
instance Network.AWS.Data.Path.ToPath Network.AWS.AppSync.UpdateGraphqlApi.UpdateGraphqlApi
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.UpdateGraphqlApi.UpdateGraphqlApi


-- | Updates a <tt>Resolver</tt> object.
module Network.AWS.AppSync.UpdateResolver

-- | <i>See:</i> <a>newUpdateResolver</a> smart constructor.
data UpdateResolver
UpdateResolver' :: Maybe Text -> Maybe ResolverKind -> Maybe SyncConfig -> Maybe Text -> Maybe CachingConfig -> Maybe PipelineConfig -> Maybe Text -> Text -> Text -> Text -> UpdateResolver

-- | The new response mapping template.
[$sel:responseMappingTemplate:UpdateResolver'] :: UpdateResolver -> Maybe Text

-- | The resolver type.
--   
--   <ul>
--   <li><b>UNIT</b>: A UNIT resolver type. A UNIT resolver is the default
--   resolver type. A UNIT resolver enables you to execute a GraphQL query
--   against a single data source.</li>
--   <li><b>PIPELINE</b>: A PIPELINE resolver type. A PIPELINE resolver
--   enables you to execute a series of <tt>Function</tt> in a serial
--   manner. You can use a pipeline resolver to execute a GraphQL query
--   against multiple data sources.</li>
--   </ul>
[$sel:kind:UpdateResolver'] :: UpdateResolver -> Maybe ResolverKind

-- | The <tt>SyncConfig</tt> for a resolver attached to a versioned
--   datasource.
[$sel:syncConfig:UpdateResolver'] :: UpdateResolver -> Maybe SyncConfig

-- | The new data source name.
[$sel:dataSourceName:UpdateResolver'] :: UpdateResolver -> Maybe Text

-- | The caching configuration for the resolver.
[$sel:cachingConfig:UpdateResolver'] :: UpdateResolver -> Maybe CachingConfig

-- | The <tt>PipelineConfig</tt>.
[$sel:pipelineConfig:UpdateResolver'] :: UpdateResolver -> Maybe PipelineConfig

-- | The new request mapping template.
--   
--   A resolver uses a request mapping template to convert a GraphQL
--   expression into a format that a data source can understand. Mapping
--   templates are written in Apache Velocity Template Language (VTL).
--   
--   VTL request mapping templates are optional when using a Lambda data
--   source. For all other data sources, VTL request and response mapping
--   templates are required.
[$sel:requestMappingTemplate:UpdateResolver'] :: UpdateResolver -> Maybe Text

-- | The API ID.
[$sel:apiId:UpdateResolver'] :: UpdateResolver -> Text

-- | The new type name.
[$sel:typeName:UpdateResolver'] :: UpdateResolver -> Text

-- | The new field name.
[$sel:fieldName:UpdateResolver'] :: UpdateResolver -> Text

-- | Create a value of <a>UpdateResolver</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:responseMappingTemplate:UpdateResolver'</a>,
--   <a>updateResolver_responseMappingTemplate</a> - The new response
--   mapping template.
--   
--   <a>$sel:kind:UpdateResolver'</a>, <a>updateResolver_kind</a> - The
--   resolver type.
--   
--   <ul>
--   <li><b>UNIT</b>: A UNIT resolver type. A UNIT resolver is the default
--   resolver type. A UNIT resolver enables you to execute a GraphQL query
--   against a single data source.</li>
--   <li><b>PIPELINE</b>: A PIPELINE resolver type. A PIPELINE resolver
--   enables you to execute a series of <tt>Function</tt> in a serial
--   manner. You can use a pipeline resolver to execute a GraphQL query
--   against multiple data sources.</li>
--   </ul>
--   
--   <a>$sel:syncConfig:UpdateResolver'</a>,
--   <a>updateResolver_syncConfig</a> - The <tt>SyncConfig</tt> for a
--   resolver attached to a versioned datasource.
--   
--   <a>$sel:dataSourceName:UpdateResolver'</a>,
--   <a>updateResolver_dataSourceName</a> - The new data source name.
--   
--   <a>$sel:cachingConfig:UpdateResolver'</a>,
--   <a>updateResolver_cachingConfig</a> - The caching configuration for
--   the resolver.
--   
--   <a>$sel:pipelineConfig:UpdateResolver'</a>,
--   <a>updateResolver_pipelineConfig</a> - The <tt>PipelineConfig</tt>.
--   
--   <a>$sel:requestMappingTemplate:UpdateResolver'</a>,
--   <a>updateResolver_requestMappingTemplate</a> - The new request mapping
--   template.
--   
--   A resolver uses a request mapping template to convert a GraphQL
--   expression into a format that a data source can understand. Mapping
--   templates are written in Apache Velocity Template Language (VTL).
--   
--   VTL request mapping templates are optional when using a Lambda data
--   source. For all other data sources, VTL request and response mapping
--   templates are required.
--   
--   <a>$sel:apiId:UpdateResolver'</a>, <a>updateResolver_apiId</a> - The
--   API ID.
--   
--   <a>$sel:typeName:UpdateResolver'</a>, <a>updateResolver_typeName</a> -
--   The new type name.
--   
--   <a>$sel:fieldName:UpdateResolver'</a>, <a>updateResolver_fieldName</a>
--   - The new field name.
newUpdateResolver :: Text -> Text -> Text -> UpdateResolver

-- | The new response mapping template.
updateResolver_responseMappingTemplate :: Lens' UpdateResolver (Maybe Text)

-- | The resolver type.
--   
--   <ul>
--   <li><b>UNIT</b>: A UNIT resolver type. A UNIT resolver is the default
--   resolver type. A UNIT resolver enables you to execute a GraphQL query
--   against a single data source.</li>
--   <li><b>PIPELINE</b>: A PIPELINE resolver type. A PIPELINE resolver
--   enables you to execute a series of <tt>Function</tt> in a serial
--   manner. You can use a pipeline resolver to execute a GraphQL query
--   against multiple data sources.</li>
--   </ul>
updateResolver_kind :: Lens' UpdateResolver (Maybe ResolverKind)

-- | The <tt>SyncConfig</tt> for a resolver attached to a versioned
--   datasource.
updateResolver_syncConfig :: Lens' UpdateResolver (Maybe SyncConfig)

-- | The new data source name.
updateResolver_dataSourceName :: Lens' UpdateResolver (Maybe Text)

-- | The caching configuration for the resolver.
updateResolver_cachingConfig :: Lens' UpdateResolver (Maybe CachingConfig)

-- | The <tt>PipelineConfig</tt>.
updateResolver_pipelineConfig :: Lens' UpdateResolver (Maybe PipelineConfig)

-- | The new request mapping template.
--   
--   A resolver uses a request mapping template to convert a GraphQL
--   expression into a format that a data source can understand. Mapping
--   templates are written in Apache Velocity Template Language (VTL).
--   
--   VTL request mapping templates are optional when using a Lambda data
--   source. For all other data sources, VTL request and response mapping
--   templates are required.
updateResolver_requestMappingTemplate :: Lens' UpdateResolver (Maybe Text)

-- | The API ID.
updateResolver_apiId :: Lens' UpdateResolver Text

-- | The new type name.
updateResolver_typeName :: Lens' UpdateResolver Text

-- | The new field name.
updateResolver_fieldName :: Lens' UpdateResolver Text

-- | <i>See:</i> <a>newUpdateResolverResponse</a> smart constructor.
data UpdateResolverResponse
UpdateResolverResponse' :: Maybe Resolver -> Int -> UpdateResolverResponse

-- | The updated <tt>Resolver</tt> object.
[$sel:resolver:UpdateResolverResponse'] :: UpdateResolverResponse -> Maybe Resolver

-- | The response's http status code.
[$sel:httpStatus:UpdateResolverResponse'] :: UpdateResolverResponse -> Int

-- | Create a value of <a>UpdateResolverResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resolver:UpdateResolverResponse'</a>,
--   <a>updateResolverResponse_resolver</a> - The updated <tt>Resolver</tt>
--   object.
--   
--   <a>$sel:httpStatus:UpdateResolverResponse'</a>,
--   <a>updateResolverResponse_httpStatus</a> - The response's http status
--   code.
newUpdateResolverResponse :: Int -> UpdateResolverResponse

-- | The updated <tt>Resolver</tt> object.
updateResolverResponse_resolver :: Lens' UpdateResolverResponse (Maybe Resolver)

-- | The response's http status code.
updateResolverResponse_httpStatus :: Lens' UpdateResolverResponse Int
instance GHC.Generics.Generic Network.AWS.AppSync.UpdateResolver.UpdateResolver
instance GHC.Show.Show Network.AWS.AppSync.UpdateResolver.UpdateResolver
instance GHC.Read.Read Network.AWS.AppSync.UpdateResolver.UpdateResolver
instance GHC.Classes.Eq Network.AWS.AppSync.UpdateResolver.UpdateResolver
instance GHC.Generics.Generic Network.AWS.AppSync.UpdateResolver.UpdateResolverResponse
instance GHC.Show.Show Network.AWS.AppSync.UpdateResolver.UpdateResolverResponse
instance GHC.Read.Read Network.AWS.AppSync.UpdateResolver.UpdateResolverResponse
instance GHC.Classes.Eq Network.AWS.AppSync.UpdateResolver.UpdateResolverResponse
instance Network.AWS.Types.AWSRequest Network.AWS.AppSync.UpdateResolver.UpdateResolver
instance Control.DeepSeq.NFData Network.AWS.AppSync.UpdateResolver.UpdateResolverResponse
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.UpdateResolver.UpdateResolver
instance Control.DeepSeq.NFData Network.AWS.AppSync.UpdateResolver.UpdateResolver
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.AppSync.UpdateResolver.UpdateResolver
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.UpdateResolver.UpdateResolver
instance Network.AWS.Data.Path.ToPath Network.AWS.AppSync.UpdateResolver.UpdateResolver
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.UpdateResolver.UpdateResolver


-- | Updates a <tt>Type</tt> object.
module Network.AWS.AppSync.UpdateType

-- | <i>See:</i> <a>newUpdateType</a> smart constructor.
data UpdateType
UpdateType' :: Maybe Text -> Text -> Text -> TypeDefinitionFormat -> UpdateType

-- | The new definition.
[$sel:definition:UpdateType'] :: UpdateType -> Maybe Text

-- | The API ID.
[$sel:apiId:UpdateType'] :: UpdateType -> Text

-- | The new type name.
[$sel:typeName:UpdateType'] :: UpdateType -> Text

-- | The new type format: SDL or JSON.
[$sel:format:UpdateType'] :: UpdateType -> TypeDefinitionFormat

-- | Create a value of <a>UpdateType</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:definition:UpdateType'</a>, <a>updateType_definition</a> - The
--   new definition.
--   
--   <a>$sel:apiId:UpdateType'</a>, <a>updateType_apiId</a> - The API ID.
--   
--   <a>$sel:typeName:UpdateType'</a>, <a>updateType_typeName</a> - The new
--   type name.
--   
--   <a>$sel:format:UpdateType'</a>, <a>updateType_format</a> - The new
--   type format: SDL or JSON.
newUpdateType :: Text -> Text -> TypeDefinitionFormat -> UpdateType

-- | The new definition.
updateType_definition :: Lens' UpdateType (Maybe Text)

-- | The API ID.
updateType_apiId :: Lens' UpdateType Text

-- | The new type name.
updateType_typeName :: Lens' UpdateType Text

-- | The new type format: SDL or JSON.
updateType_format :: Lens' UpdateType TypeDefinitionFormat

-- | <i>See:</i> <a>newUpdateTypeResponse</a> smart constructor.
data UpdateTypeResponse
UpdateTypeResponse' :: Maybe Type -> Int -> UpdateTypeResponse

-- | The updated <tt>Type</tt> object.
[$sel:type':UpdateTypeResponse'] :: UpdateTypeResponse -> Maybe Type

-- | The response's http status code.
[$sel:httpStatus:UpdateTypeResponse'] :: UpdateTypeResponse -> Int

-- | Create a value of <a>UpdateTypeResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:type':UpdateTypeResponse'</a>, <a>updateTypeResponse_type</a>
--   - The updated <tt>Type</tt> object.
--   
--   <a>$sel:httpStatus:UpdateTypeResponse'</a>,
--   <a>updateTypeResponse_httpStatus</a> - The response's http status
--   code.
newUpdateTypeResponse :: Int -> UpdateTypeResponse

-- | The updated <tt>Type</tt> object.
updateTypeResponse_type :: Lens' UpdateTypeResponse (Maybe Type)

-- | The response's http status code.
updateTypeResponse_httpStatus :: Lens' UpdateTypeResponse Int
instance GHC.Generics.Generic Network.AWS.AppSync.UpdateType.UpdateType
instance GHC.Show.Show Network.AWS.AppSync.UpdateType.UpdateType
instance GHC.Read.Read Network.AWS.AppSync.UpdateType.UpdateType
instance GHC.Classes.Eq Network.AWS.AppSync.UpdateType.UpdateType
instance GHC.Generics.Generic Network.AWS.AppSync.UpdateType.UpdateTypeResponse
instance GHC.Show.Show Network.AWS.AppSync.UpdateType.UpdateTypeResponse
instance GHC.Read.Read Network.AWS.AppSync.UpdateType.UpdateTypeResponse
instance GHC.Classes.Eq Network.AWS.AppSync.UpdateType.UpdateTypeResponse
instance Network.AWS.Types.AWSRequest Network.AWS.AppSync.UpdateType.UpdateType
instance Control.DeepSeq.NFData Network.AWS.AppSync.UpdateType.UpdateTypeResponse
instance Data.Hashable.Class.Hashable Network.AWS.AppSync.UpdateType.UpdateType
instance Control.DeepSeq.NFData Network.AWS.AppSync.UpdateType.UpdateType
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.AppSync.UpdateType.UpdateType
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.AppSync.UpdateType.UpdateType
instance Network.AWS.Data.Path.ToPath Network.AWS.AppSync.UpdateType.UpdateType
instance Network.AWS.Data.Query.ToQuery Network.AWS.AppSync.UpdateType.UpdateType


module Network.AWS.AppSync.Lens

-- | An identifier that was returned from the previous call to this
--   operation, which can be used to return the next set of items in the
--   list.
listResolvers_nextToken :: Lens' ListResolvers (Maybe Text)

-- | The maximum number of results you want the request to return.
listResolvers_maxResults :: Lens' ListResolvers (Maybe Natural)

-- | The API ID.
listResolvers_apiId :: Lens' ListResolvers Text

-- | The type name.
listResolvers_typeName :: Lens' ListResolvers Text

-- | An identifier to be passed in the next request to this operation to
--   return the next set of items in the list.
listResolversResponse_nextToken :: Lens' ListResolversResponse (Maybe Text)

-- | The <tt>Resolver</tt> objects.
listResolversResponse_resolvers :: Lens' ListResolversResponse (Maybe [Resolver])

-- | The response's http status code.
listResolversResponse_httpStatus :: Lens' ListResolversResponse Int

-- | The new service role ARN for the data source.
updateDataSource_serviceRoleArn :: Lens' UpdateDataSource (Maybe Text)

-- | The new relational database configuration.
updateDataSource_relationalDatabaseConfig :: Lens' UpdateDataSource (Maybe RelationalDatabaseDataSourceConfig)

-- | The new OpenSearch configuration.
--   
--   As of September 2021, Amazon Elasticsearch service is Amazon
--   OpenSearch Service. This configuration is deprecated. Instead, use
--   UpdateDataSourceRequest$openSearchServiceConfig to update an
--   OpenSearch data source.
updateDataSource_elasticsearchConfig :: Lens' UpdateDataSource (Maybe ElasticsearchDataSourceConfig)

-- | The new Amazon Web Services Lambda configuration.
updateDataSource_lambdaConfig :: Lens' UpdateDataSource (Maybe LambdaDataSourceConfig)

-- | The new Amazon DynamoDB configuration.
updateDataSource_dynamodbConfig :: Lens' UpdateDataSource (Maybe DynamodbDataSourceConfig)

-- | The new description for the data source.
updateDataSource_description :: Lens' UpdateDataSource (Maybe Text)

-- | The new OpenSearch configuration.
updateDataSource_openSearchServiceConfig :: Lens' UpdateDataSource (Maybe OpenSearchServiceDataSourceConfig)

-- | The new HTTP endpoint configuration.
updateDataSource_httpConfig :: Lens' UpdateDataSource (Maybe HttpDataSourceConfig)

-- | The API ID.
updateDataSource_apiId :: Lens' UpdateDataSource Text

-- | The new name for the data source.
updateDataSource_name :: Lens' UpdateDataSource Text

-- | The new data source type.
updateDataSource_type :: Lens' UpdateDataSource DataSourceType

-- | The updated <tt>DataSource</tt> object.
updateDataSourceResponse_dataSource :: Lens' UpdateDataSourceResponse (Maybe DataSource)

-- | The response's http status code.
updateDataSourceResponse_httpStatus :: Lens' UpdateDataSourceResponse Int

-- | An identifier that was returned from the previous call to this
--   operation, which can be used to return the next set of items in the
--   list.
listDataSources_nextToken :: Lens' ListDataSources (Maybe Text)

-- | The maximum number of results you want the request to return.
listDataSources_maxResults :: Lens' ListDataSources (Maybe Natural)

-- | The API ID.
listDataSources_apiId :: Lens' ListDataSources Text

-- | An identifier to be passed in the next request to this operation to
--   return the next set of items in the list.
listDataSourcesResponse_nextToken :: Lens' ListDataSourcesResponse (Maybe Text)

-- | The <tt>DataSource</tt> objects.
listDataSourcesResponse_dataSources :: Lens' ListDataSourcesResponse (Maybe [DataSource])

-- | The response's http status code.
listDataSourcesResponse_httpStatus :: Lens' ListDataSourcesResponse Int

-- | The GraphQL API ID.
getFunction_apiId :: Lens' GetFunction Text

-- | The <tt>Function</tt> ID.
getFunction_functionId :: Lens' GetFunction Text

-- | The <tt>Function</tt> object.
getFunctionResponse_functionConfiguration :: Lens' GetFunctionResponse (Maybe FunctionConfiguration)

-- | The response's http status code.
getFunctionResponse_httpStatus :: Lens' GetFunctionResponse Int

-- | The API ID.
createType_apiId :: Lens' CreateType Text

-- | The type definition, in GraphQL Schema Definition Language (SDL)
--   format.
--   
--   For more information, see the <a>GraphQL SDL documentation</a>.
createType_definition :: Lens' CreateType Text

-- | The type format: SDL or JSON.
createType_format :: Lens' CreateType TypeDefinitionFormat

-- | The <tt>Type</tt> object.
createTypeResponse_type :: Lens' CreateTypeResponse (Maybe Type)

-- | The response's http status code.
createTypeResponse_httpStatus :: Lens' CreateTypeResponse Int

-- | The API ID.
deleteDataSource_apiId :: Lens' DeleteDataSource Text

-- | The name of the data source.
deleteDataSource_name :: Lens' DeleteDataSource Text

-- | The response's http status code.
deleteDataSourceResponse_httpStatus :: Lens' DeleteDataSourceResponse Int

-- | The new definition.
updateType_definition :: Lens' UpdateType (Maybe Text)

-- | The API ID.
updateType_apiId :: Lens' UpdateType Text

-- | The new type name.
updateType_typeName :: Lens' UpdateType Text

-- | The new type format: SDL or JSON.
updateType_format :: Lens' UpdateType TypeDefinitionFormat

-- | The updated <tt>Type</tt> object.
updateTypeResponse_type :: Lens' UpdateTypeResponse (Maybe Type)

-- | The response's http status code.
updateTypeResponse_httpStatus :: Lens' UpdateTypeResponse Int

-- | The Identity and Access Management service role ARN for the data
--   source. The system assumes this role when accessing the data source.
createDataSource_serviceRoleArn :: Lens' CreateDataSource (Maybe Text)

-- | Relational database settings.
createDataSource_relationalDatabaseConfig :: Lens' CreateDataSource (Maybe RelationalDatabaseDataSourceConfig)

-- | Amazon OpenSearch Service settings.
--   
--   As of September 2021, Amazon Elasticsearch service is Amazon
--   OpenSearch Service. This configuration is deprecated. For new data
--   sources, use CreateDataSourceRequest$openSearchServiceConfig to create
--   an OpenSearch data source.
createDataSource_elasticsearchConfig :: Lens' CreateDataSource (Maybe ElasticsearchDataSourceConfig)

-- | Amazon Web Services Lambda settings.
createDataSource_lambdaConfig :: Lens' CreateDataSource (Maybe LambdaDataSourceConfig)

-- | Amazon DynamoDB settings.
createDataSource_dynamodbConfig :: Lens' CreateDataSource (Maybe DynamodbDataSourceConfig)

-- | A description of the <tt>DataSource</tt>.
createDataSource_description :: Lens' CreateDataSource (Maybe Text)

-- | Amazon OpenSearch Service settings.
createDataSource_openSearchServiceConfig :: Lens' CreateDataSource (Maybe OpenSearchServiceDataSourceConfig)

-- | HTTP endpoint settings.
createDataSource_httpConfig :: Lens' CreateDataSource (Maybe HttpDataSourceConfig)

-- | The API ID for the GraphQL API for the <tt>DataSource</tt>.
createDataSource_apiId :: Lens' CreateDataSource Text

-- | A user-supplied name for the <tt>DataSource</tt>.
createDataSource_name :: Lens' CreateDataSource Text

-- | The type of the <tt>DataSource</tt>.
createDataSource_type :: Lens' CreateDataSource DataSourceType

-- | The <tt>DataSource</tt> object.
createDataSourceResponse_dataSource :: Lens' CreateDataSourceResponse (Maybe DataSource)

-- | The response's http status code.
createDataSourceResponse_httpStatus :: Lens' CreateDataSourceResponse Int

-- | The API ID.
deleteType_apiId :: Lens' DeleteType Text

-- | The type name.
deleteType_typeName :: Lens' DeleteType Text

-- | The response's http status code.
deleteTypeResponse_httpStatus :: Lens' DeleteTypeResponse Int

-- | An identifier that was returned from the previous call to this
--   operation, which you can use to return the next set of items in the
--   list.
listResolversByFunction_nextToken :: Lens' ListResolversByFunction (Maybe Text)

-- | The maximum number of results you want the request to return.
listResolversByFunction_maxResults :: Lens' ListResolversByFunction (Maybe Natural)

-- | The API ID.
listResolversByFunction_apiId :: Lens' ListResolversByFunction Text

-- | The Function ID.
listResolversByFunction_functionId :: Lens' ListResolversByFunction Text

-- | An identifier that can be used to return the next set of items in the
--   list.
listResolversByFunctionResponse_nextToken :: Lens' ListResolversByFunctionResponse (Maybe Text)

-- | The list of resolvers.
listResolversByFunctionResponse_resolvers :: Lens' ListResolversByFunctionResponse (Maybe [Resolver])

-- | The response's http status code.
listResolversByFunctionResponse_httpStatus :: Lens' ListResolversByFunctionResponse Int

-- | An identifier that was returned from the previous call to this
--   operation, which can be used to return the next set of items in the
--   list.
listFunctions_nextToken :: Lens' ListFunctions (Maybe Text)

-- | The maximum number of results you want the request to return.
listFunctions_maxResults :: Lens' ListFunctions (Maybe Natural)

-- | The GraphQL API ID.
listFunctions_apiId :: Lens' ListFunctions Text

-- | An identifier that was returned from the previous call to this
--   operation, which can be used to return the next set of items in the
--   list.
listFunctionsResponse_nextToken :: Lens' ListFunctionsResponse (Maybe Text)

-- | A list of <tt>Function</tt> objects.
listFunctionsResponse_functions :: Lens' ListFunctionsResponse (Maybe [FunctionConfiguration])

-- | The response's http status code.
listFunctionsResponse_httpStatus :: Lens' ListFunctionsResponse Int

-- | The <tt>GraphqlApi</tt> ARN.
untagResource_resourceArn :: Lens' UntagResource Text

-- | A list of <tt>TagKey</tt> objects.
untagResource_tagKeys :: Lens' UntagResource (NonEmpty Text)

-- | The response's http status code.
untagResourceResponse_httpStatus :: Lens' UntagResourceResponse Int

-- | The API ID.
deleteGraphqlApi_apiId :: Lens' DeleteGraphqlApi Text

-- | The response's http status code.
deleteGraphqlApiResponse_httpStatus :: Lens' DeleteGraphqlApiResponse Int

-- | The API ID.
getResolver_apiId :: Lens' GetResolver Text

-- | The resolver type name.
getResolver_typeName :: Lens' GetResolver Text

-- | The resolver field name.
getResolver_fieldName :: Lens' GetResolver Text

-- | The <tt>Resolver</tt> object.
getResolverResponse_resolver :: Lens' GetResolverResponse (Maybe Resolver)

-- | The response's http status code.
getResolverResponse_httpStatus :: Lens' GetResolverResponse Int

-- | A flag that specifies whether the schema introspection should contain
--   directives.
getIntrospectionSchema_includeDirectives :: Lens' GetIntrospectionSchema (Maybe Bool)

-- | The API ID.
getIntrospectionSchema_apiId :: Lens' GetIntrospectionSchema Text

-- | The schema format: SDL or JSON.
getIntrospectionSchema_format :: Lens' GetIntrospectionSchema OutputType

-- | The schema, in GraphQL Schema Definition Language (SDL) format.
--   
--   For more information, see the <a>GraphQL SDL documentation</a>.
getIntrospectionSchemaResponse_schema :: Lens' GetIntrospectionSchemaResponse (Maybe ByteString)

-- | The response's http status code.
getIntrospectionSchemaResponse_httpStatus :: Lens' GetIntrospectionSchemaResponse Int

-- | The <tt>GraphqlApi</tt> ARN.
tagResource_resourceArn :: Lens' TagResource Text

-- | A <tt>TagMap</tt> object.
tagResource_tags :: Lens' TagResource (HashMap Text Text)

-- | The response's http status code.
tagResourceResponse_httpStatus :: Lens' TagResourceResponse Int

-- | An identifier that was returned from the previous call to this
--   operation, which can be used to return the next set of items in the
--   list.
listGraphqlApis_nextToken :: Lens' ListGraphqlApis (Maybe Text)

-- | The maximum number of results you want the request to return.
listGraphqlApis_maxResults :: Lens' ListGraphqlApis (Maybe Natural)

-- | An identifier to be passed in the next request to this operation to
--   return the next set of items in the list.
listGraphqlApisResponse_nextToken :: Lens' ListGraphqlApisResponse (Maybe Text)

-- | The <tt>GraphqlApi</tt> objects.
listGraphqlApisResponse_graphqlApis :: Lens' ListGraphqlApisResponse (Maybe [GraphqlApi])

-- | The response's http status code.
listGraphqlApisResponse_httpStatus :: Lens' ListGraphqlApisResponse Int

-- | The OpenID Connect configuration for the <tt>GraphqlApi</tt> object.
updateGraphqlApi_openIDConnectConfig :: Lens' UpdateGraphqlApi (Maybe OpenIDConnectConfig)

-- | The new Amazon Cognito user pool configuration for the
--   <tt>GraphqlApi</tt> object.
updateGraphqlApi_userPoolConfig :: Lens' UpdateGraphqlApi (Maybe UserPoolConfig)

-- | A flag indicating whether to enable X-Ray tracing for the
--   <tt>GraphqlApi</tt>.
updateGraphqlApi_xrayEnabled :: Lens' UpdateGraphqlApi (Maybe Bool)

-- | Configuration for Amazon Web Services Lambda function authorization.
updateGraphqlApi_lambdaAuthorizerConfig :: Lens' UpdateGraphqlApi (Maybe LambdaAuthorizerConfig)

-- | The Amazon CloudWatch Logs configuration for the <tt>GraphqlApi</tt>
--   object.
updateGraphqlApi_logConfig :: Lens' UpdateGraphqlApi (Maybe LogConfig)

-- | A list of additional authentication providers for the
--   <tt>GraphqlApi</tt> API.
updateGraphqlApi_additionalAuthenticationProviders :: Lens' UpdateGraphqlApi (Maybe [AdditionalAuthenticationProvider])

-- | The new authentication type for the <tt>GraphqlApi</tt> object.
updateGraphqlApi_authenticationType :: Lens' UpdateGraphqlApi (Maybe AuthenticationType)

-- | The API ID.
updateGraphqlApi_apiId :: Lens' UpdateGraphqlApi Text

-- | The new name for the <tt>GraphqlApi</tt> object.
updateGraphqlApi_name :: Lens' UpdateGraphqlApi Text

-- | The updated <tt>GraphqlApi</tt> object.
updateGraphqlApiResponse_graphqlApi :: Lens' UpdateGraphqlApiResponse (Maybe GraphqlApi)

-- | The response's http status code.
updateGraphqlApiResponse_httpStatus :: Lens' UpdateGraphqlApiResponse Int

-- | The GraphQL API Id.
updateApiCache_apiId :: Lens' UpdateApiCache Text

-- | TTL in seconds for cache entries.
--   
--   Valid values are between 1 and 3600 seconds.
updateApiCache_ttl :: Lens' UpdateApiCache Integer

-- | Caching behavior.
--   
--   <ul>
--   <li><b>FULL_REQUEST_CACHING</b>: All requests are fully cached.</li>
--   <li><b>PER_RESOLVER_CACHING</b>: Individual resolvers that you specify
--   are cached.</li>
--   </ul>
updateApiCache_apiCachingBehavior :: Lens' UpdateApiCache ApiCachingBehavior

-- | The cache instance type. Valid values are
--   
--   <ul>
--   <li><pre>SMALL</pre></li>
--   <li><pre>MEDIUM</pre></li>
--   <li><pre>LARGE</pre></li>
--   <li><pre>XLARGE</pre></li>
--   <li><pre>LARGE_2X</pre></li>
--   <li><pre>LARGE_4X</pre></li>
--   <li><tt>LARGE_8X</tt> (not available in all regions)</li>
--   <li><pre>LARGE_12X</pre></li>
--   </ul>
--   
--   Historically, instance types were identified by an EC2-style value. As
--   of July 2020, this is deprecated, and the generic identifiers above
--   should be used.
--   
--   The following legacy instance types are available, but their use is
--   discouraged:
--   
--   <ul>
--   <li><b>T2_SMALL</b>: A t2.small instance type.</li>
--   <li><b>T2_MEDIUM</b>: A t2.medium instance type.</li>
--   <li><b>R4_LARGE</b>: A r4.large instance type.</li>
--   <li><b>R4_XLARGE</b>: A r4.xlarge instance type.</li>
--   <li><b>R4_2XLARGE</b>: A r4.2xlarge instance type.</li>
--   <li><b>R4_4XLARGE</b>: A r4.4xlarge instance type.</li>
--   <li><b>R4_8XLARGE</b>: A r4.8xlarge instance type.</li>
--   </ul>
updateApiCache_type :: Lens' UpdateApiCache ApiCacheType

-- | The <tt>ApiCache</tt> object.
updateApiCacheResponse_apiCache :: Lens' UpdateApiCacheResponse (Maybe ApiCache)

-- | The response's http status code.
updateApiCacheResponse_httpStatus :: Lens' UpdateApiCacheResponse Int

-- | The API ID.
deleteApiCache_apiId :: Lens' DeleteApiCache Text

-- | The response's http status code.
deleteApiCacheResponse_httpStatus :: Lens' DeleteApiCacheResponse Int

-- | The API ID.
getSchemaCreationStatus_apiId :: Lens' GetSchemaCreationStatus Text

-- | The current state of the schema (PROCESSING, FAILED, SUCCESS, or
--   NOT_APPLICABLE). When the schema is in the ACTIVE state, you can add
--   data.
getSchemaCreationStatusResponse_status :: Lens' GetSchemaCreationStatusResponse (Maybe SchemaStatus)

-- | Detailed information about the status of the schema creation
--   operation.
getSchemaCreationStatusResponse_details :: Lens' GetSchemaCreationStatusResponse (Maybe Text)

-- | The response's http status code.
getSchemaCreationStatusResponse_httpStatus :: Lens' GetSchemaCreationStatusResponse Int

-- | The API ID.
getApiCache_apiId :: Lens' GetApiCache Text

-- | The <tt>ApiCache</tt> object.
getApiCacheResponse_apiCache :: Lens' GetApiCacheResponse (Maybe ApiCache)

-- | The response's http status code.
getApiCacheResponse_httpStatus :: Lens' GetApiCacheResponse Int

-- | The API ID for the GraphQL API.
getGraphqlApi_apiId :: Lens' GetGraphqlApi Text

-- | The <tt>GraphqlApi</tt> object.
getGraphqlApiResponse_graphqlApi :: Lens' GetGraphqlApiResponse (Maybe GraphqlApi)

-- | The response's http status code.
getGraphqlApiResponse_httpStatus :: Lens' GetGraphqlApiResponse Int

-- | The new response mapping template.
updateResolver_responseMappingTemplate :: Lens' UpdateResolver (Maybe Text)

-- | The resolver type.
--   
--   <ul>
--   <li><b>UNIT</b>: A UNIT resolver type. A UNIT resolver is the default
--   resolver type. A UNIT resolver enables you to execute a GraphQL query
--   against a single data source.</li>
--   <li><b>PIPELINE</b>: A PIPELINE resolver type. A PIPELINE resolver
--   enables you to execute a series of <tt>Function</tt> in a serial
--   manner. You can use a pipeline resolver to execute a GraphQL query
--   against multiple data sources.</li>
--   </ul>
updateResolver_kind :: Lens' UpdateResolver (Maybe ResolverKind)

-- | The <tt>SyncConfig</tt> for a resolver attached to a versioned
--   datasource.
updateResolver_syncConfig :: Lens' UpdateResolver (Maybe SyncConfig)

-- | The new data source name.
updateResolver_dataSourceName :: Lens' UpdateResolver (Maybe Text)

-- | The caching configuration for the resolver.
updateResolver_cachingConfig :: Lens' UpdateResolver (Maybe CachingConfig)

-- | The <tt>PipelineConfig</tt>.
updateResolver_pipelineConfig :: Lens' UpdateResolver (Maybe PipelineConfig)

-- | The new request mapping template.
--   
--   A resolver uses a request mapping template to convert a GraphQL
--   expression into a format that a data source can understand. Mapping
--   templates are written in Apache Velocity Template Language (VTL).
--   
--   VTL request mapping templates are optional when using a Lambda data
--   source. For all other data sources, VTL request and response mapping
--   templates are required.
updateResolver_requestMappingTemplate :: Lens' UpdateResolver (Maybe Text)

-- | The API ID.
updateResolver_apiId :: Lens' UpdateResolver Text

-- | The new type name.
updateResolver_typeName :: Lens' UpdateResolver Text

-- | The new field name.
updateResolver_fieldName :: Lens' UpdateResolver Text

-- | The updated <tt>Resolver</tt> object.
updateResolverResponse_resolver :: Lens' UpdateResolverResponse (Maybe Resolver)

-- | The response's http status code.
updateResolverResponse_httpStatus :: Lens' UpdateResolverResponse Int

-- | The API ID.
deleteResolver_apiId :: Lens' DeleteResolver Text

-- | The name of the resolver type.
deleteResolver_typeName :: Lens' DeleteResolver Text

-- | The resolver field name.
deleteResolver_fieldName :: Lens' DeleteResolver Text

-- | The response's http status code.
deleteResolverResponse_httpStatus :: Lens' DeleteResolverResponse Int

-- | An identifier that was returned from the previous call to this
--   operation, which can be used to return the next set of items in the
--   list.
listTypes_nextToken :: Lens' ListTypes (Maybe Text)

-- | The maximum number of results you want the request to return.
listTypes_maxResults :: Lens' ListTypes (Maybe Natural)

-- | The API ID.
listTypes_apiId :: Lens' ListTypes Text

-- | The type format: SDL or JSON.
listTypes_format :: Lens' ListTypes TypeDefinitionFormat

-- | An identifier to be passed in the next request to this operation to
--   return the next set of items in the list.
listTypesResponse_nextToken :: Lens' ListTypesResponse (Maybe Text)

-- | The <tt>Type</tt> objects.
listTypesResponse_types :: Lens' ListTypesResponse (Maybe [Type])

-- | The response's http status code.
listTypesResponse_httpStatus :: Lens' ListTypesResponse Int

-- | The API ID.
getType_apiId :: Lens' GetType Text

-- | The type name.
getType_typeName :: Lens' GetType Text

-- | The type format: SDL or JSON.
getType_format :: Lens' GetType TypeDefinitionFormat

-- | The <tt>Type</tt> object.
getTypeResponse_type :: Lens' GetTypeResponse (Maybe Type)

-- | The response's http status code.
getTypeResponse_httpStatus :: Lens' GetTypeResponse Int

-- | The <tt>Function</tt> response mapping template.
createFunction_responseMappingTemplate :: Lens' CreateFunction (Maybe Text)

-- | Undocumented member.
createFunction_syncConfig :: Lens' CreateFunction (Maybe SyncConfig)

-- | The <tt>Function</tt> description.
createFunction_description :: Lens' CreateFunction (Maybe Text)

-- | The <tt>Function</tt> request mapping template. Functions support only
--   the 2018-05-29 version of the request mapping template.
createFunction_requestMappingTemplate :: Lens' CreateFunction (Maybe Text)

-- | The GraphQL API ID.
createFunction_apiId :: Lens' CreateFunction Text

-- | The <tt>Function</tt> name. The function name does not have to be
--   unique.
createFunction_name :: Lens' CreateFunction Text

-- | The <tt>Function</tt> <tt>DataSource</tt> name.
createFunction_dataSourceName :: Lens' CreateFunction Text

-- | The <tt>version</tt> of the request mapping template. Currently the
--   supported value is 2018-05-29.
createFunction_functionVersion :: Lens' CreateFunction Text

-- | The <tt>Function</tt> object.
createFunctionResponse_functionConfiguration :: Lens' CreateFunctionResponse (Maybe FunctionConfiguration)

-- | The response's http status code.
createFunctionResponse_httpStatus :: Lens' CreateFunctionResponse Int

-- | The API ID.
deleteApiKey_apiId :: Lens' DeleteApiKey Text

-- | The ID for the API key.
deleteApiKey_id :: Lens' DeleteApiKey Text

-- | The response's http status code.
deleteApiKeyResponse_httpStatus :: Lens' DeleteApiKeyResponse Int

-- | An identifier that was returned from the previous call to this
--   operation, which can be used to return the next set of items in the
--   list.
listApiKeys_nextToken :: Lens' ListApiKeys (Maybe Text)

-- | The maximum number of results you want the request to return.
listApiKeys_maxResults :: Lens' ListApiKeys (Maybe Natural)

-- | The API ID.
listApiKeys_apiId :: Lens' ListApiKeys Text

-- | An identifier to be passed in the next request to this operation to
--   return the next set of items in the list.
listApiKeysResponse_nextToken :: Lens' ListApiKeysResponse (Maybe Text)

-- | The <tt>ApiKey</tt> objects.
listApiKeysResponse_apiKeys :: Lens' ListApiKeysResponse (Maybe [ApiKey])

-- | The response's http status code.
listApiKeysResponse_httpStatus :: Lens' ListApiKeysResponse Int

-- | A description of the purpose of the API key.
updateApiKey_description :: Lens' UpdateApiKey (Maybe Text)

-- | The time from update time after which the API key expires. The date is
--   represented as seconds since the epoch. For more information, see .
updateApiKey_expires :: Lens' UpdateApiKey (Maybe Integer)

-- | The ID for the GraphQL API.
updateApiKey_apiId :: Lens' UpdateApiKey Text

-- | The API key ID.
updateApiKey_id :: Lens' UpdateApiKey Text

-- | The API key.
updateApiKeyResponse_apiKey :: Lens' UpdateApiKeyResponse (Maybe ApiKey)

-- | The response's http status code.
updateApiKeyResponse_httpStatus :: Lens' UpdateApiKeyResponse Int

-- | A description of the purpose of the API key.
createApiKey_description :: Lens' CreateApiKey (Maybe Text)

-- | The time from creation time after which the API key expires. The date
--   is represented as seconds since the epoch, rounded down to the nearest
--   hour. The default value for this parameter is 7 days from creation
--   time. For more information, see .
createApiKey_expires :: Lens' CreateApiKey (Maybe Integer)

-- | The ID for your GraphQL API.
createApiKey_apiId :: Lens' CreateApiKey Text

-- | The API key.
createApiKeyResponse_apiKey :: Lens' CreateApiKeyResponse (Maybe ApiKey)

-- | The response's http status code.
createApiKeyResponse_httpStatus :: Lens' CreateApiKeyResponse Int

-- | The GraphQL API ID.
deleteFunction_apiId :: Lens' DeleteFunction Text

-- | The <tt>Function</tt> ID.
deleteFunction_functionId :: Lens' DeleteFunction Text

-- | The response's http status code.
deleteFunctionResponse_httpStatus :: Lens' DeleteFunctionResponse Int

-- | The <tt>Function</tt> request mapping template.
updateFunction_responseMappingTemplate :: Lens' UpdateFunction (Maybe Text)

-- | Undocumented member.
updateFunction_syncConfig :: Lens' UpdateFunction (Maybe SyncConfig)

-- | The <tt>Function</tt> description.
updateFunction_description :: Lens' UpdateFunction (Maybe Text)

-- | The <tt>Function</tt> request mapping template. Functions support only
--   the 2018-05-29 version of the request mapping template.
updateFunction_requestMappingTemplate :: Lens' UpdateFunction (Maybe Text)

-- | The GraphQL API ID.
updateFunction_apiId :: Lens' UpdateFunction Text

-- | The <tt>Function</tt> name.
updateFunction_name :: Lens' UpdateFunction Text

-- | The function ID.
updateFunction_functionId :: Lens' UpdateFunction Text

-- | The <tt>Function</tt> <tt>DataSource</tt> name.
updateFunction_dataSourceName :: Lens' UpdateFunction Text

-- | The <tt>version</tt> of the request mapping template. Currently the
--   supported value is 2018-05-29.
updateFunction_functionVersion :: Lens' UpdateFunction Text

-- | The <tt>Function</tt> object.
updateFunctionResponse_functionConfiguration :: Lens' UpdateFunctionResponse (Maybe FunctionConfiguration)

-- | The response's http status code.
updateFunctionResponse_httpStatus :: Lens' UpdateFunctionResponse Int

-- | The API ID.
getDataSource_apiId :: Lens' GetDataSource Text

-- | The name of the data source.
getDataSource_name :: Lens' GetDataSource Text

-- | The <tt>DataSource</tt> object.
getDataSourceResponse_dataSource :: Lens' GetDataSourceResponse (Maybe DataSource)

-- | The response's http status code.
getDataSourceResponse_httpStatus :: Lens' GetDataSourceResponse Int

-- | The API ID.
startSchemaCreation_apiId :: Lens' StartSchemaCreation Text

-- | The schema definition, in GraphQL schema language format.-- --
--   <i>Note:</i> This <tt>Lens</tt> automatically encodes and decodes
--   Base64 data. -- The underlying isomorphism will encode to Base64
--   representation during -- serialisation, and decode from Base64
--   representation during deserialisation. -- This <tt>Lens</tt> accepts
--   and returns only raw unencoded data.
startSchemaCreation_definition :: Lens' StartSchemaCreation ByteString

-- | The current state of the schema (PROCESSING, FAILED, SUCCESS, or
--   NOT_APPLICABLE). When the schema is in the ACTIVE state, you can add
--   data.
startSchemaCreationResponse_status :: Lens' StartSchemaCreationResponse (Maybe SchemaStatus)

-- | The response's http status code.
startSchemaCreationResponse_httpStatus :: Lens' StartSchemaCreationResponse Int

-- | At rest encryption flag for cache. This setting cannot be updated
--   after creation.
createApiCache_atRestEncryptionEnabled :: Lens' CreateApiCache (Maybe Bool)

-- | Transit encryption flag when connecting to cache. This setting cannot
--   be updated after creation.
createApiCache_transitEncryptionEnabled :: Lens' CreateApiCache (Maybe Bool)

-- | The GraphQL API Id.
createApiCache_apiId :: Lens' CreateApiCache Text

-- | TTL in seconds for cache entries.
--   
--   Valid values are between 1 and 3600 seconds.
createApiCache_ttl :: Lens' CreateApiCache Integer

-- | Caching behavior.
--   
--   <ul>
--   <li><b>FULL_REQUEST_CACHING</b>: All requests are fully cached.</li>
--   <li><b>PER_RESOLVER_CACHING</b>: Individual resolvers that you specify
--   are cached.</li>
--   </ul>
createApiCache_apiCachingBehavior :: Lens' CreateApiCache ApiCachingBehavior

-- | The cache instance type. Valid values are
--   
--   <ul>
--   <li><pre>SMALL</pre></li>
--   <li><pre>MEDIUM</pre></li>
--   <li><pre>LARGE</pre></li>
--   <li><pre>XLARGE</pre></li>
--   <li><pre>LARGE_2X</pre></li>
--   <li><pre>LARGE_4X</pre></li>
--   <li><tt>LARGE_8X</tt> (not available in all regions)</li>
--   <li><pre>LARGE_12X</pre></li>
--   </ul>
--   
--   Historically, instance types were identified by an EC2-style value. As
--   of July 2020, this is deprecated, and the generic identifiers above
--   should be used.
--   
--   The following legacy instance types are available, but their use is
--   discouraged:
--   
--   <ul>
--   <li><b>T2_SMALL</b>: A t2.small instance type.</li>
--   <li><b>T2_MEDIUM</b>: A t2.medium instance type.</li>
--   <li><b>R4_LARGE</b>: A r4.large instance type.</li>
--   <li><b>R4_XLARGE</b>: A r4.xlarge instance type.</li>
--   <li><b>R4_2XLARGE</b>: A r4.2xlarge instance type.</li>
--   <li><b>R4_4XLARGE</b>: A r4.4xlarge instance type.</li>
--   <li><b>R4_8XLARGE</b>: A r4.8xlarge instance type.</li>
--   </ul>
createApiCache_type :: Lens' CreateApiCache ApiCacheType

-- | The <tt>ApiCache</tt> object.
createApiCacheResponse_apiCache :: Lens' CreateApiCacheResponse (Maybe ApiCache)

-- | The response's http status code.
createApiCacheResponse_httpStatus :: Lens' CreateApiCacheResponse Int

-- | The API ID.
flushApiCache_apiId :: Lens' FlushApiCache Text

-- | The response's http status code.
flushApiCacheResponse_httpStatus :: Lens' FlushApiCacheResponse Int

-- | The OpenID Connect configuration.
createGraphqlApi_openIDConnectConfig :: Lens' CreateGraphqlApi (Maybe OpenIDConnectConfig)

-- | The Amazon Cognito user pool configuration.
createGraphqlApi_userPoolConfig :: Lens' CreateGraphqlApi (Maybe UserPoolConfig)

-- | A flag indicating whether to enable X-Ray tracing for the
--   <tt>GraphqlApi</tt>.
createGraphqlApi_xrayEnabled :: Lens' CreateGraphqlApi (Maybe Bool)

-- | Configuration for Amazon Web Services Lambda function authorization.
createGraphqlApi_lambdaAuthorizerConfig :: Lens' CreateGraphqlApi (Maybe LambdaAuthorizerConfig)

-- | A <tt>TagMap</tt> object.
createGraphqlApi_tags :: Lens' CreateGraphqlApi (Maybe (HashMap Text Text))

-- | The Amazon CloudWatch Logs configuration.
createGraphqlApi_logConfig :: Lens' CreateGraphqlApi (Maybe LogConfig)

-- | A list of additional authentication providers for the
--   <tt>GraphqlApi</tt> API.
createGraphqlApi_additionalAuthenticationProviders :: Lens' CreateGraphqlApi (Maybe [AdditionalAuthenticationProvider])

-- | A user-supplied name for the <tt>GraphqlApi</tt>.
createGraphqlApi_name :: Lens' CreateGraphqlApi Text

-- | The authentication type: API key, Identity and Access Management,
--   OIDC, Amazon Cognito user pools, or Amazon Web Services Lambda.
createGraphqlApi_authenticationType :: Lens' CreateGraphqlApi AuthenticationType

-- | The <tt>GraphqlApi</tt>.
createGraphqlApiResponse_graphqlApi :: Lens' CreateGraphqlApiResponse (Maybe GraphqlApi)

-- | The response's http status code.
createGraphqlApiResponse_httpStatus :: Lens' CreateGraphqlApiResponse Int

-- | The <tt>GraphqlApi</tt> ARN.
listTagsForResource_resourceArn :: Lens' ListTagsForResource Text

-- | A <tt>TagMap</tt> object.
listTagsForResourceResponse_tags :: Lens' ListTagsForResourceResponse (Maybe (HashMap Text Text))

-- | The response's http status code.
listTagsForResourceResponse_httpStatus :: Lens' ListTagsForResourceResponse Int

-- | The mapping template to be used for responses from the data source.
createResolver_responseMappingTemplate :: Lens' CreateResolver (Maybe Text)

-- | The resolver type.
--   
--   <ul>
--   <li><b>UNIT</b>: A UNIT resolver type. A UNIT resolver is the default
--   resolver type. A UNIT resolver enables you to execute a GraphQL query
--   against a single data source.</li>
--   <li><b>PIPELINE</b>: A PIPELINE resolver type. A PIPELINE resolver
--   enables you to execute a series of <tt>Function</tt> in a serial
--   manner. You can use a pipeline resolver to execute a GraphQL query
--   against multiple data sources.</li>
--   </ul>
createResolver_kind :: Lens' CreateResolver (Maybe ResolverKind)

-- | The <tt>SyncConfig</tt> for a resolver attached to a versioned
--   datasource.
createResolver_syncConfig :: Lens' CreateResolver (Maybe SyncConfig)

-- | The name of the data source for which the resolver is being created.
createResolver_dataSourceName :: Lens' CreateResolver (Maybe Text)

-- | The caching configuration for the resolver.
createResolver_cachingConfig :: Lens' CreateResolver (Maybe CachingConfig)

-- | The <tt>PipelineConfig</tt>.
createResolver_pipelineConfig :: Lens' CreateResolver (Maybe PipelineConfig)

-- | The mapping template to be used for requests.
--   
--   A resolver uses a request mapping template to convert a GraphQL
--   expression into a format that a data source can understand. Mapping
--   templates are written in Apache Velocity Template Language (VTL).
--   
--   VTL request mapping templates are optional when using a Lambda data
--   source. For all other data sources, VTL request and response mapping
--   templates are required.
createResolver_requestMappingTemplate :: Lens' CreateResolver (Maybe Text)

-- | The ID for the GraphQL API for which the resolver is being created.
createResolver_apiId :: Lens' CreateResolver Text

-- | The name of the <tt>Type</tt>.
createResolver_typeName :: Lens' CreateResolver Text

-- | The name of the field to attach the resolver to.
createResolver_fieldName :: Lens' CreateResolver Text

-- | The <tt>Resolver</tt> object.
createResolverResponse_resolver :: Lens' CreateResolverResponse (Maybe Resolver)

-- | The response's http status code.
createResolverResponse_httpStatus :: Lens' CreateResolverResponse Int

-- | The OpenID Connect configuration.
additionalAuthenticationProvider_openIDConnectConfig :: Lens' AdditionalAuthenticationProvider (Maybe OpenIDConnectConfig)

-- | The Amazon Cognito user pool configuration.
additionalAuthenticationProvider_userPoolConfig :: Lens' AdditionalAuthenticationProvider (Maybe CognitoUserPoolConfig)

-- | Configuration for Amazon Web Services Lambda function authorization.
additionalAuthenticationProvider_lambdaAuthorizerConfig :: Lens' AdditionalAuthenticationProvider (Maybe LambdaAuthorizerConfig)

-- | The authentication type: API key, Identity and Access Management,
--   OIDC, Amazon Cognito user pools, or Amazon Web Services Lambda.
additionalAuthenticationProvider_authenticationType :: Lens' AdditionalAuthenticationProvider (Maybe AuthenticationType)

-- | The cache instance status.
--   
--   <ul>
--   <li><b>AVAILABLE</b>: The instance is available for use.</li>
--   <li><b>CREATING</b>: The instance is currently creating.</li>
--   <li><b>DELETING</b>: The instance is currently deleting.</li>
--   <li><b>MODIFYING</b>: The instance is currently modifying.</li>
--   <li><b>FAILED</b>: The instance has failed creation.</li>
--   </ul>
apiCache_status :: Lens' ApiCache (Maybe ApiCacheStatus)

-- | At rest encryption flag for cache. This setting cannot be updated
--   after creation.
apiCache_atRestEncryptionEnabled :: Lens' ApiCache (Maybe Bool)

-- | TTL in seconds for cache entries.
--   
--   Valid values are between 1 and 3600 seconds.
apiCache_ttl :: Lens' ApiCache (Maybe Integer)

-- | The cache instance type. Valid values are
--   
--   <ul>
--   <li><pre>SMALL</pre></li>
--   <li><pre>MEDIUM</pre></li>
--   <li><pre>LARGE</pre></li>
--   <li><pre>XLARGE</pre></li>
--   <li><pre>LARGE_2X</pre></li>
--   <li><pre>LARGE_4X</pre></li>
--   <li><tt>LARGE_8X</tt> (not available in all regions)</li>
--   <li><pre>LARGE_12X</pre></li>
--   </ul>
--   
--   Historically, instance types were identified by an EC2-style value. As
--   of July 2020, this is deprecated, and the generic identifiers above
--   should be used.
--   
--   The following legacy instance types are available, but their use is
--   discouraged:
--   
--   <ul>
--   <li><b>T2_SMALL</b>: A t2.small instance type.</li>
--   <li><b>T2_MEDIUM</b>: A t2.medium instance type.</li>
--   <li><b>R4_LARGE</b>: A r4.large instance type.</li>
--   <li><b>R4_XLARGE</b>: A r4.xlarge instance type.</li>
--   <li><b>R4_2XLARGE</b>: A r4.2xlarge instance type.</li>
--   <li><b>R4_4XLARGE</b>: A r4.4xlarge instance type.</li>
--   <li><b>R4_8XLARGE</b>: A r4.8xlarge instance type.</li>
--   </ul>
apiCache_type :: Lens' ApiCache (Maybe ApiCacheType)

-- | Transit encryption flag when connecting to cache. This setting cannot
--   be updated after creation.
apiCache_transitEncryptionEnabled :: Lens' ApiCache (Maybe Bool)

-- | Caching behavior.
--   
--   <ul>
--   <li><b>FULL_REQUEST_CACHING</b>: All requests are fully cached.</li>
--   <li><b>PER_RESOLVER_CACHING</b>: Individual resolvers that you specify
--   are cached.</li>
--   </ul>
apiCache_apiCachingBehavior :: Lens' ApiCache (Maybe ApiCachingBehavior)

-- | The API key ID.
apiKey_id :: Lens' ApiKey (Maybe Text)

-- | The time after which the API key is deleted. The date is represented
--   as seconds since the epoch, rounded down to the nearest hour.
apiKey_deletes :: Lens' ApiKey (Maybe Integer)

-- | A description of the purpose of the API key.
apiKey_description :: Lens' ApiKey (Maybe Text)

-- | The time after which the API key expires. The date is represented as
--   seconds since the epoch, rounded down to the nearest hour.
apiKey_expires :: Lens' ApiKey (Maybe Integer)

-- | The Identity and Access Management settings.
authorizationConfig_awsIamConfig :: Lens' AuthorizationConfig (Maybe AwsIamConfig)

-- | The authorization type required by the HTTP endpoint.
--   
--   <ul>
--   <li><b>AWS_IAM</b>: The authorization type is Sigv4.</li>
--   </ul>
authorizationConfig_authorizationType :: Lens' AuthorizationConfig AuthorizationType

-- | The signing service name for Identity and Access Management
--   authorization.
awsIamConfig_signingServiceName :: Lens' AwsIamConfig (Maybe Text)

-- | The signing region for Identity and Access Management authorization.
awsIamConfig_signingRegion :: Lens' AwsIamConfig (Maybe Text)

-- | The TTL in seconds for a resolver that has caching enabled.
--   
--   Valid values are between 1 and 3600 seconds.
cachingConfig_ttl :: Lens' CachingConfig (Maybe Integer)

-- | The caching keys for a resolver that has caching enabled.
--   
--   Valid values are entries from the <tt>$context.arguments</tt>,
--   <tt>$context.source</tt>, and <tt>$context.identity</tt> maps.
cachingConfig_cachingKeys :: Lens' CachingConfig (Maybe [Text])

-- | A regular expression for validating the incoming Amazon Cognito user
--   pool app client ID.
cognitoUserPoolConfig_appIdClientRegex :: Lens' CognitoUserPoolConfig (Maybe Text)

-- | The user pool ID.
cognitoUserPoolConfig_userPoolId :: Lens' CognitoUserPoolConfig Text

-- | The Amazon Web Services Region in which the user pool was created.
cognitoUserPoolConfig_awsRegion :: Lens' CognitoUserPoolConfig Text

-- | The Identity and Access Management service role ARN for the data
--   source. The system assumes this role when accessing the data source.
dataSource_serviceRoleArn :: Lens' DataSource (Maybe Text)

-- | Relational database settings.
dataSource_relationalDatabaseConfig :: Lens' DataSource (Maybe RelationalDatabaseDataSourceConfig)

-- | Amazon OpenSearch Service settings.
dataSource_elasticsearchConfig :: Lens' DataSource (Maybe ElasticsearchDataSourceConfig)

-- | Amazon Web Services Lambda settings.
dataSource_lambdaConfig :: Lens' DataSource (Maybe LambdaDataSourceConfig)

-- | The name of the data source.
dataSource_name :: Lens' DataSource (Maybe Text)

-- | Amazon DynamoDB settings.
dataSource_dynamodbConfig :: Lens' DataSource (Maybe DynamodbDataSourceConfig)

-- | The description of the data source.
dataSource_description :: Lens' DataSource (Maybe Text)

-- | The data source ARN.
dataSource_dataSourceArn :: Lens' DataSource (Maybe Text)

-- | The type of the data source.
--   
--   <ul>
--   <li><b>AWS_LAMBDA</b>: The data source is an Amazon Web Services
--   Lambda function.</li>
--   <li><b>AMAZON_DYNAMODB</b>: The data source is an Amazon DynamoDB
--   table.</li>
--   <li><b>AMAZON_ELASTICSEARCH</b>: The data source is an Amazon
--   OpenSearch Service domain.</li>
--   <li><b>AMAZON_OPENSEARCH_SERVICE</b>: The data source is an Amazon
--   OpenSearch Service domain.</li>
--   <li><b>NONE</b>: There is no data source. This type is used when you
--   wish to invoke a GraphQL operation without connecting to a data
--   source, such as performing data transformation with resolvers or
--   triggering a subscription to be invoked from a mutation.</li>
--   <li><b>HTTP</b>: The data source is an HTTP endpoint.</li>
--   <li><b>RELATIONAL_DATABASE</b>: The data source is a relational
--   database.</li>
--   </ul>
dataSource_type :: Lens' DataSource (Maybe DataSourceType)

-- | Amazon OpenSearch Service settings.
dataSource_openSearchServiceConfig :: Lens' DataSource (Maybe OpenSearchServiceDataSourceConfig)

-- | HTTP endpoint settings.
dataSource_httpConfig :: Lens' DataSource (Maybe HttpDataSourceConfig)

-- | The number of minutes an Item is stored in the datasource.
deltaSyncConfig_baseTableTTL :: Lens' DeltaSyncConfig (Maybe Integer)

-- | The Delta Sync table name.
deltaSyncConfig_deltaSyncTableName :: Lens' DeltaSyncConfig (Maybe Text)

-- | The number of minutes a Delta Sync log entry is stored in the Delta
--   Sync table.
deltaSyncConfig_deltaSyncTableTTL :: Lens' DeltaSyncConfig (Maybe Integer)

-- | Set to TRUE to use Amazon Cognito credentials with this data source.
dynamodbDataSourceConfig_useCallerCredentials :: Lens' DynamodbDataSourceConfig (Maybe Bool)

-- | Set to TRUE to use Conflict Detection and Resolution with this data
--   source.
dynamodbDataSourceConfig_versioned :: Lens' DynamodbDataSourceConfig (Maybe Bool)

-- | The <tt>DeltaSyncConfig</tt> for a versioned datasource.
dynamodbDataSourceConfig_deltaSyncConfig :: Lens' DynamodbDataSourceConfig (Maybe DeltaSyncConfig)

-- | The table name.
dynamodbDataSourceConfig_tableName :: Lens' DynamodbDataSourceConfig Text

-- | The Amazon Web Services Region.
dynamodbDataSourceConfig_awsRegion :: Lens' DynamodbDataSourceConfig Text

-- | The endpoint.
elasticsearchDataSourceConfig_endpoint :: Lens' ElasticsearchDataSourceConfig Text

-- | The Amazon Web Services Region.
elasticsearchDataSourceConfig_awsRegion :: Lens' ElasticsearchDataSourceConfig Text

-- | The <tt>Function</tt> response mapping template.
functionConfiguration_responseMappingTemplate :: Lens' FunctionConfiguration (Maybe Text)

-- | The version of the request mapping template. Currently only the
--   2018-05-29 version of the template is supported.
functionConfiguration_functionVersion :: Lens' FunctionConfiguration (Maybe Text)

-- | Undocumented member.
functionConfiguration_syncConfig :: Lens' FunctionConfiguration (Maybe SyncConfig)

-- | The name of the <tt>DataSource</tt>.
functionConfiguration_dataSourceName :: Lens' FunctionConfiguration (Maybe Text)

-- | The ARN of the <tt>Function</tt> object.
functionConfiguration_functionArn :: Lens' FunctionConfiguration (Maybe Text)

-- | The name of the <tt>Function</tt> object.
functionConfiguration_name :: Lens' FunctionConfiguration (Maybe Text)

-- | A unique ID representing the <tt>Function</tt> object.
functionConfiguration_functionId :: Lens' FunctionConfiguration (Maybe Text)

-- | The <tt>Function</tt> description.
functionConfiguration_description :: Lens' FunctionConfiguration (Maybe Text)

-- | The <tt>Function</tt> request mapping template. Functions support only
--   the 2018-05-29 version of the request mapping template.
functionConfiguration_requestMappingTemplate :: Lens' FunctionConfiguration (Maybe Text)

-- | The ARN of the WAF ACL associated with this <tt>GraphqlApi</tt>, if
--   one exists.
graphqlApi_wafWebAclArn :: Lens' GraphqlApi (Maybe Text)

-- | The API ID.
graphqlApi_apiId :: Lens' GraphqlApi (Maybe Text)

-- | The ARN.
graphqlApi_arn :: Lens' GraphqlApi (Maybe Text)

-- | The OpenID Connect configuration.
graphqlApi_openIDConnectConfig :: Lens' GraphqlApi (Maybe OpenIDConnectConfig)

-- | The Amazon Cognito user pool configuration.
graphqlApi_userPoolConfig :: Lens' GraphqlApi (Maybe UserPoolConfig)

-- | A flag representing whether X-Ray tracing is enabled for this
--   <tt>GraphqlApi</tt>.
graphqlApi_xrayEnabled :: Lens' GraphqlApi (Maybe Bool)

-- | The API name.
graphqlApi_name :: Lens' GraphqlApi (Maybe Text)

-- | Configuration for Amazon Web Services Lambda function authorization.
graphqlApi_lambdaAuthorizerConfig :: Lens' GraphqlApi (Maybe LambdaAuthorizerConfig)

-- | The tags.
graphqlApi_tags :: Lens' GraphqlApi (Maybe (HashMap Text Text))

-- | The Amazon CloudWatch Logs configuration.
graphqlApi_logConfig :: Lens' GraphqlApi (Maybe LogConfig)

-- | A list of additional authentication providers for the
--   <tt>GraphqlApi</tt> API.
graphqlApi_additionalAuthenticationProviders :: Lens' GraphqlApi (Maybe [AdditionalAuthenticationProvider])

-- | The authentication type.
graphqlApi_authenticationType :: Lens' GraphqlApi (Maybe AuthenticationType)

-- | The URIs.
graphqlApi_uris :: Lens' GraphqlApi (Maybe (HashMap Text Text))

-- | The authorization config in case the HTTP endpoint requires
--   authorization.
httpDataSourceConfig_authorizationConfig :: Lens' HttpDataSourceConfig (Maybe AuthorizationConfig)

-- | The HTTP URL endpoint. You can either specify the domain name or IP,
--   and port combination, and the URL scheme must be HTTP or HTTPS. If the
--   port is not specified, AppSync uses the default port 80 for the HTTP
--   endpoint and port 443 for HTTPS endpoints.
httpDataSourceConfig_endpoint :: Lens' HttpDataSourceConfig (Maybe Text)

-- | A regular expression for validation of tokens before the Lambda
--   function is called.
lambdaAuthorizerConfig_identityValidationExpression :: Lens' LambdaAuthorizerConfig (Maybe Text)

-- | The number of seconds a response should be cached for. The default is
--   5 minutes (300 seconds). The Lambda function can override this by
--   returning a <tt>ttlOverride</tt> key in its response. A value of 0
--   disables caching of responses.
lambdaAuthorizerConfig_authorizerResultTtlInSeconds :: Lens' LambdaAuthorizerConfig (Maybe Natural)

-- | The ARN of the Lambda function to be called for authorization. This
--   may be a standard Lambda ARN, a version ARN (<tt>.../v3</tt>) or alias
--   ARN.
--   
--   <i>Note</i>: This Lambda function must have the following
--   resource-based policy assigned to it. When configuring Lambda
--   authorizers in the Console, this is done for you. To do so with the
--   Amazon Web Services CLI, run the following:
--   
--   <pre>
--   aws lambda add-permission --function-name "arn:aws:lambda:us-east-2:111122223333:function:my-function" --statement-id "appsync" --principal appsync.amazonaws.com --action lambda:InvokeFunction
--   </pre>
lambdaAuthorizerConfig_authorizerUri :: Lens' LambdaAuthorizerConfig Text

-- | The Arn for the Lambda function to use as the Conflict Handler.
lambdaConflictHandlerConfig_lambdaConflictHandlerArn :: Lens' LambdaConflictHandlerConfig (Maybe Text)

-- | The ARN for the Lambda function.
lambdaDataSourceConfig_lambdaFunctionArn :: Lens' LambdaDataSourceConfig Text

-- | Set to TRUE to exclude sections that contain information such as
--   headers, context, and evaluated mapping templates, regardless of
--   logging level.
logConfig_excludeVerboseContent :: Lens' LogConfig (Maybe Bool)

-- | The field logging level. Values can be NONE, ERROR, or ALL.
--   
--   <ul>
--   <li><b>NONE</b>: No field-level logs are captured.</li>
--   <li><b>ERROR</b>: Logs the following information only for the fields
--   that are in error:<ul><li>The error section in the server
--   response.</li><li>Field-level errors.</li><li>The generated
--   request/response functions that got resolved for error
--   fields.</li></ul></li>
--   <li><b>ALL</b>: The following information is logged for all fields in
--   the query:<ul><li>Field-level tracing information.</li><li>The
--   generated request/response functions that got resolved for each
--   field.</li></ul></li>
--   </ul>
logConfig_fieldLogLevel :: Lens' LogConfig FieldLogLevel

-- | The service role that AppSync will assume to publish to Amazon
--   CloudWatch logs in your account.
logConfig_cloudWatchLogsRoleArn :: Lens' LogConfig Text

-- | The client identifier of the Relying party at the OpenID identity
--   provider. This identifier is typically obtained when the Relying party
--   is registered with the OpenID identity provider. You can specify a
--   regular expression so the AppSync can validate against multiple client
--   identifiers at a time.
openIDConnectConfig_clientId :: Lens' OpenIDConnectConfig (Maybe Text)

-- | The number of milliseconds a token is valid after being authenticated.
openIDConnectConfig_authTTL :: Lens' OpenIDConnectConfig (Maybe Integer)

-- | The number of milliseconds a token is valid after being issued to a
--   user.
openIDConnectConfig_iatTTL :: Lens' OpenIDConnectConfig (Maybe Integer)

-- | The issuer for the OpenID Connect configuration. The issuer returned
--   by discovery must exactly match the value of <tt>iss</tt> in the ID
--   token.
openIDConnectConfig_issuer :: Lens' OpenIDConnectConfig Text

-- | The endpoint.
openSearchServiceDataSourceConfig_endpoint :: Lens' OpenSearchServiceDataSourceConfig Text

-- | The Amazon Web Services Region.
openSearchServiceDataSourceConfig_awsRegion :: Lens' OpenSearchServiceDataSourceConfig Text

-- | A list of <tt>Function</tt> objects.
pipelineConfig_functions :: Lens' PipelineConfig (Maybe [Text])

-- | Logical schema name.
rdsHttpEndpointConfig_schema :: Lens' RdsHttpEndpointConfig (Maybe Text)

-- | Amazon Web Services secret store ARN for database credentials.
rdsHttpEndpointConfig_awsSecretStoreArn :: Lens' RdsHttpEndpointConfig (Maybe Text)

-- | Amazon RDS cluster ARN.
rdsHttpEndpointConfig_dbClusterIdentifier :: Lens' RdsHttpEndpointConfig (Maybe Text)

-- | Amazon Web Services Region for RDS HTTP endpoint.
rdsHttpEndpointConfig_awsRegion :: Lens' RdsHttpEndpointConfig (Maybe Text)

-- | Logical database name.
rdsHttpEndpointConfig_databaseName :: Lens' RdsHttpEndpointConfig (Maybe Text)

-- | Amazon RDS HTTP endpoint settings.
relationalDatabaseDataSourceConfig_rdsHttpEndpointConfig :: Lens' RelationalDatabaseDataSourceConfig (Maybe RdsHttpEndpointConfig)

-- | Source type for the relational database.
--   
--   <ul>
--   <li><b>RDS_HTTP_ENDPOINT</b>: The relational database source type is
--   an Amazon RDS HTTP endpoint.</li>
--   </ul>
relationalDatabaseDataSourceConfig_relationalDatabaseSourceType :: Lens' RelationalDatabaseDataSourceConfig (Maybe RelationalDatabaseSourceType)

-- | The response mapping template.
resolver_responseMappingTemplate :: Lens' Resolver (Maybe Text)

-- | The resolver type name.
resolver_typeName :: Lens' Resolver (Maybe Text)

-- | The resolver type.
--   
--   <ul>
--   <li><b>UNIT</b>: A UNIT resolver type. A UNIT resolver is the default
--   resolver type. A UNIT resolver enables you to execute a GraphQL query
--   against a single data source.</li>
--   <li><b>PIPELINE</b>: A PIPELINE resolver type. A PIPELINE resolver
--   enables you to execute a series of <tt>Function</tt> in a serial
--   manner. You can use a pipeline resolver to execute a GraphQL query
--   against multiple data sources.</li>
--   </ul>
resolver_kind :: Lens' Resolver (Maybe ResolverKind)

-- | The <tt>SyncConfig</tt> for a resolver attached to a versioned
--   datasource.
resolver_syncConfig :: Lens' Resolver (Maybe SyncConfig)

-- | The resolver data source name.
resolver_dataSourceName :: Lens' Resolver (Maybe Text)

-- | The resolver ARN.
resolver_resolverArn :: Lens' Resolver (Maybe Text)

-- | The caching configuration for the resolver.
resolver_cachingConfig :: Lens' Resolver (Maybe CachingConfig)

-- | The <tt>PipelineConfig</tt>.
resolver_pipelineConfig :: Lens' Resolver (Maybe PipelineConfig)

-- | The request mapping template.
resolver_requestMappingTemplate :: Lens' Resolver (Maybe Text)

-- | The resolver field name.
resolver_fieldName :: Lens' Resolver (Maybe Text)

-- | The Conflict Resolution strategy to perform in the event of a
--   conflict.
--   
--   <ul>
--   <li><b>OPTIMISTIC_CONCURRENCY</b>: Resolve conflicts by rejecting
--   mutations when versions do not match the latest version at the
--   server.</li>
--   <li><b>AUTOMERGE</b>: Resolve conflicts with the Automerge conflict
--   resolution strategy.</li>
--   <li><b>LAMBDA</b>: Resolve conflicts with a Lambda function supplied
--   in the LambdaConflictHandlerConfig.</li>
--   </ul>
syncConfig_conflictHandler :: Lens' SyncConfig (Maybe ConflictHandlerType)

-- | The <tt>LambdaConflictHandlerConfig</tt> when configuring LAMBDA as
--   the Conflict Handler.
syncConfig_lambdaConflictHandlerConfig :: Lens' SyncConfig (Maybe LambdaConflictHandlerConfig)

-- | The Conflict Detection strategy to use.
--   
--   <ul>
--   <li><b>VERSION</b>: Detect conflicts based on object versions for this
--   resolver.</li>
--   <li><b>NONE</b>: Do not detect conflicts when executing this
--   resolver.</li>
--   </ul>
syncConfig_conflictDetection :: Lens' SyncConfig (Maybe ConflictDetectionType)

-- | The type format: SDL or JSON.
type_format :: Lens' Type (Maybe TypeDefinitionFormat)

-- | The type ARN.
type_arn :: Lens' Type (Maybe Text)

-- | The type name.
type_name :: Lens' Type (Maybe Text)

-- | The type description.
type_description :: Lens' Type (Maybe Text)

-- | The type definition.
type_definition :: Lens' Type (Maybe Text)

-- | A regular expression for validating the incoming Amazon Cognito user
--   pool app client ID.
userPoolConfig_appIdClientRegex :: Lens' UserPoolConfig (Maybe Text)

-- | The user pool ID.
userPoolConfig_userPoolId :: Lens' UserPoolConfig Text

-- | The Amazon Web Services Region in which the user pool was created.
userPoolConfig_awsRegion :: Lens' UserPoolConfig Text

-- | The action that you want your GraphQL API to take when a request that
--   uses Amazon Cognito user pool authentication doesn't match the Amazon
--   Cognito user pool configuration.
userPoolConfig_defaultAction :: Lens' UserPoolConfig DefaultAction


module Network.AWS.AppSync.Waiters


-- | Derived from API version <tt>2017-07-25</tt> of the AWS service
--   descriptions, licensed under Apache 2.0.
--   
--   AppSync provides API actions for creating and interacting with data
--   sources using GraphQL from your application.
module Network.AWS.AppSync

-- | API version <tt>2017-07-25</tt> of the Amazon AppSync SDK
--   configuration.
defaultService :: Service

-- | The API key expiration must be set to a value between 1 and 365 days
--   from creation (for <tt>CreateApiKey</tt>) or from update (for
--   <tt>UpdateApiKey</tt>).
_ApiKeyValidityOutOfBoundsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The resource specified in the request was not found. Check the
--   resource, and then try again.
_NotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request is not well formed. For example, a value is invalid or a
--   required field is missing. Check the field values, and then try again.
_BadRequestException :: AsError a => Getting (First ServiceError) a ServiceError

-- | You are not authorized to perform this operation.
_UnauthorizedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Another modification is in progress at this time and it must complete
--   before you can make your change.
_ConcurrentModificationException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The GraphQL schema is not valid.
_GraphQLSchemaException :: AsError a => Getting (First ServiceError) a ServiceError

-- | You do not have access to perform this operation on this resource.
_AccessDeniedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request exceeded a limit. Try your request again.
_LimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The GraphQL API exceeded a limit. Try your request again.
_ApiLimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The API key exceeded a limit. Try your request again.
_ApiKeyLimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | An internal AppSync error occurred. Try your request again.
_InternalFailureException :: AsError a => Getting (First ServiceError) a ServiceError

-- | <i>See:</i> <a>newListResolvers</a> smart constructor.
data ListResolvers
ListResolvers' :: Maybe Text -> Maybe Natural -> Text -> Text -> ListResolvers

-- | Create a value of <a>ListResolvers</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListResolvers'</a>, <a>listResolvers_nextToken</a> -
--   An identifier that was returned from the previous call to this
--   operation, which can be used to return the next set of items in the
--   list.
--   
--   <a>$sel:maxResults:ListResolvers'</a>, <a>listResolvers_maxResults</a>
--   - The maximum number of results you want the request to return.
--   
--   <a>$sel:apiId:ListResolvers'</a>, <a>listResolvers_apiId</a> - The API
--   ID.
--   
--   <a>$sel:typeName:ListResolvers'</a>, <a>listResolvers_typeName</a> -
--   The type name.
newListResolvers :: Text -> Text -> ListResolvers

-- | <i>See:</i> <a>newListResolversResponse</a> smart constructor.
data ListResolversResponse
ListResolversResponse' :: Maybe Text -> Maybe [Resolver] -> Int -> ListResolversResponse

-- | Create a value of <a>ListResolversResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListResolvers'</a>,
--   <a>listResolversResponse_nextToken</a> - An identifier to be passed in
--   the next request to this operation to return the next set of items in
--   the list.
--   
--   <a>$sel:resolvers:ListResolversResponse'</a>,
--   <a>listResolversResponse_resolvers</a> - The <tt>Resolver</tt>
--   objects.
--   
--   <a>$sel:httpStatus:ListResolversResponse'</a>,
--   <a>listResolversResponse_httpStatus</a> - The response's http status
--   code.
newListResolversResponse :: Int -> ListResolversResponse

-- | <i>See:</i> <a>newUpdateDataSource</a> smart constructor.
data UpdateDataSource
UpdateDataSource' :: Maybe Text -> Maybe RelationalDatabaseDataSourceConfig -> Maybe ElasticsearchDataSourceConfig -> Maybe LambdaDataSourceConfig -> Maybe DynamodbDataSourceConfig -> Maybe Text -> Maybe OpenSearchServiceDataSourceConfig -> Maybe HttpDataSourceConfig -> Text -> Text -> DataSourceType -> UpdateDataSource

-- | Create a value of <a>UpdateDataSource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:serviceRoleArn:UpdateDataSource'</a>,
--   <a>updateDataSource_serviceRoleArn</a> - The new service role ARN for
--   the data source.
--   
--   <a>$sel:relationalDatabaseConfig:UpdateDataSource'</a>,
--   <a>updateDataSource_relationalDatabaseConfig</a> - The new relational
--   database configuration.
--   
--   <a>$sel:elasticsearchConfig:UpdateDataSource'</a>,
--   <a>updateDataSource_elasticsearchConfig</a> - The new OpenSearch
--   configuration.
--   
--   As of September 2021, Amazon Elasticsearch service is Amazon
--   OpenSearch Service. This configuration is deprecated. Instead, use
--   UpdateDataSourceRequest$openSearchServiceConfig to update an
--   OpenSearch data source.
--   
--   <a>$sel:lambdaConfig:UpdateDataSource'</a>,
--   <a>updateDataSource_lambdaConfig</a> - The new Amazon Web Services
--   Lambda configuration.
--   
--   <a>$sel:dynamodbConfig:UpdateDataSource'</a>,
--   <a>updateDataSource_dynamodbConfig</a> - The new Amazon DynamoDB
--   configuration.
--   
--   <a>$sel:description:UpdateDataSource'</a>,
--   <a>updateDataSource_description</a> - The new description for the data
--   source.
--   
--   <a>$sel:openSearchServiceConfig:UpdateDataSource'</a>,
--   <a>updateDataSource_openSearchServiceConfig</a> - The new OpenSearch
--   configuration.
--   
--   <a>$sel:httpConfig:UpdateDataSource'</a>,
--   <a>updateDataSource_httpConfig</a> - The new HTTP endpoint
--   configuration.
--   
--   <a>$sel:apiId:UpdateDataSource'</a>, <a>updateDataSource_apiId</a> -
--   The API ID.
--   
--   <a>$sel:name:UpdateDataSource'</a>, <a>updateDataSource_name</a> - The
--   new name for the data source.
--   
--   <a>$sel:type':UpdateDataSource'</a>, <a>updateDataSource_type</a> -
--   The new data source type.
newUpdateDataSource :: Text -> Text -> DataSourceType -> UpdateDataSource

-- | <i>See:</i> <a>newUpdateDataSourceResponse</a> smart constructor.
data UpdateDataSourceResponse
UpdateDataSourceResponse' :: Maybe DataSource -> Int -> UpdateDataSourceResponse

-- | Create a value of <a>UpdateDataSourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dataSource:UpdateDataSourceResponse'</a>,
--   <a>updateDataSourceResponse_dataSource</a> - The updated
--   <tt>DataSource</tt> object.
--   
--   <a>$sel:httpStatus:UpdateDataSourceResponse'</a>,
--   <a>updateDataSourceResponse_httpStatus</a> - The response's http
--   status code.
newUpdateDataSourceResponse :: Int -> UpdateDataSourceResponse

-- | <i>See:</i> <a>newListDataSources</a> smart constructor.
data ListDataSources
ListDataSources' :: Maybe Text -> Maybe Natural -> Text -> ListDataSources

-- | Create a value of <a>ListDataSources</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListDataSources'</a>,
--   <a>listDataSources_nextToken</a> - An identifier that was returned
--   from the previous call to this operation, which can be used to return
--   the next set of items in the list.
--   
--   <a>$sel:maxResults:ListDataSources'</a>,
--   <a>listDataSources_maxResults</a> - The maximum number of results you
--   want the request to return.
--   
--   <a>$sel:apiId:ListDataSources'</a>, <a>listDataSources_apiId</a> - The
--   API ID.
newListDataSources :: Text -> ListDataSources

-- | <i>See:</i> <a>newListDataSourcesResponse</a> smart constructor.
data ListDataSourcesResponse
ListDataSourcesResponse' :: Maybe Text -> Maybe [DataSource] -> Int -> ListDataSourcesResponse

-- | Create a value of <a>ListDataSourcesResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListDataSources'</a>,
--   <a>listDataSourcesResponse_nextToken</a> - An identifier to be passed
--   in the next request to this operation to return the next set of items
--   in the list.
--   
--   <a>$sel:dataSources:ListDataSourcesResponse'</a>,
--   <a>listDataSourcesResponse_dataSources</a> - The <tt>DataSource</tt>
--   objects.
--   
--   <a>$sel:httpStatus:ListDataSourcesResponse'</a>,
--   <a>listDataSourcesResponse_httpStatus</a> - The response's http status
--   code.
newListDataSourcesResponse :: Int -> ListDataSourcesResponse

-- | <i>See:</i> <a>newGetFunction</a> smart constructor.
data GetFunction
GetFunction' :: Text -> Text -> GetFunction

-- | Create a value of <a>GetFunction</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiId:GetFunction'</a>, <a>getFunction_apiId</a> - The GraphQL
--   API ID.
--   
--   <a>$sel:functionId:GetFunction'</a>, <a>getFunction_functionId</a> -
--   The <tt>Function</tt> ID.
newGetFunction :: Text -> Text -> GetFunction

-- | <i>See:</i> <a>newGetFunctionResponse</a> smart constructor.
data GetFunctionResponse
GetFunctionResponse' :: Maybe FunctionConfiguration -> Int -> GetFunctionResponse

-- | Create a value of <a>GetFunctionResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:functionConfiguration:GetFunctionResponse'</a>,
--   <a>getFunctionResponse_functionConfiguration</a> - The
--   <tt>Function</tt> object.
--   
--   <a>$sel:httpStatus:GetFunctionResponse'</a>,
--   <a>getFunctionResponse_httpStatus</a> - The response's http status
--   code.
newGetFunctionResponse :: Int -> GetFunctionResponse

-- | <i>See:</i> <a>newCreateType</a> smart constructor.
data CreateType
CreateType' :: Text -> Text -> TypeDefinitionFormat -> CreateType

-- | Create a value of <a>CreateType</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiId:CreateType'</a>, <a>createType_apiId</a> - The API ID.
--   
--   <a>$sel:definition:CreateType'</a>, <a>createType_definition</a> - The
--   type definition, in GraphQL Schema Definition Language (SDL) format.
--   
--   For more information, see the <a>GraphQL SDL documentation</a>.
--   
--   <a>$sel:format:CreateType'</a>, <a>createType_format</a> - The type
--   format: SDL or JSON.
newCreateType :: Text -> Text -> TypeDefinitionFormat -> CreateType

-- | <i>See:</i> <a>newCreateTypeResponse</a> smart constructor.
data CreateTypeResponse
CreateTypeResponse' :: Maybe Type -> Int -> CreateTypeResponse

-- | Create a value of <a>CreateTypeResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:type':CreateTypeResponse'</a>, <a>createTypeResponse_type</a>
--   - The <tt>Type</tt> object.
--   
--   <a>$sel:httpStatus:CreateTypeResponse'</a>,
--   <a>createTypeResponse_httpStatus</a> - The response's http status
--   code.
newCreateTypeResponse :: Int -> CreateTypeResponse

-- | <i>See:</i> <a>newDeleteDataSource</a> smart constructor.
data DeleteDataSource
DeleteDataSource' :: Text -> Text -> DeleteDataSource

-- | Create a value of <a>DeleteDataSource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiId:DeleteDataSource'</a>, <a>deleteDataSource_apiId</a> -
--   The API ID.
--   
--   <a>$sel:name:DeleteDataSource'</a>, <a>deleteDataSource_name</a> - The
--   name of the data source.
newDeleteDataSource :: Text -> Text -> DeleteDataSource

-- | <i>See:</i> <a>newDeleteDataSourceResponse</a> smart constructor.
data DeleteDataSourceResponse
DeleteDataSourceResponse' :: Int -> DeleteDataSourceResponse

-- | Create a value of <a>DeleteDataSourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteDataSourceResponse'</a>,
--   <a>deleteDataSourceResponse_httpStatus</a> - The response's http
--   status code.
newDeleteDataSourceResponse :: Int -> DeleteDataSourceResponse

-- | <i>See:</i> <a>newUpdateType</a> smart constructor.
data UpdateType
UpdateType' :: Maybe Text -> Text -> Text -> TypeDefinitionFormat -> UpdateType

-- | Create a value of <a>UpdateType</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:definition:UpdateType'</a>, <a>updateType_definition</a> - The
--   new definition.
--   
--   <a>$sel:apiId:UpdateType'</a>, <a>updateType_apiId</a> - The API ID.
--   
--   <a>$sel:typeName:UpdateType'</a>, <a>updateType_typeName</a> - The new
--   type name.
--   
--   <a>$sel:format:UpdateType'</a>, <a>updateType_format</a> - The new
--   type format: SDL or JSON.
newUpdateType :: Text -> Text -> TypeDefinitionFormat -> UpdateType

-- | <i>See:</i> <a>newUpdateTypeResponse</a> smart constructor.
data UpdateTypeResponse
UpdateTypeResponse' :: Maybe Type -> Int -> UpdateTypeResponse

-- | Create a value of <a>UpdateTypeResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:type':UpdateTypeResponse'</a>, <a>updateTypeResponse_type</a>
--   - The updated <tt>Type</tt> object.
--   
--   <a>$sel:httpStatus:UpdateTypeResponse'</a>,
--   <a>updateTypeResponse_httpStatus</a> - The response's http status
--   code.
newUpdateTypeResponse :: Int -> UpdateTypeResponse

-- | <i>See:</i> <a>newCreateDataSource</a> smart constructor.
data CreateDataSource
CreateDataSource' :: Maybe Text -> Maybe RelationalDatabaseDataSourceConfig -> Maybe ElasticsearchDataSourceConfig -> Maybe LambdaDataSourceConfig -> Maybe DynamodbDataSourceConfig -> Maybe Text -> Maybe OpenSearchServiceDataSourceConfig -> Maybe HttpDataSourceConfig -> Text -> Text -> DataSourceType -> CreateDataSource

-- | Create a value of <a>CreateDataSource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:serviceRoleArn:CreateDataSource'</a>,
--   <a>createDataSource_serviceRoleArn</a> - The Identity and Access
--   Management service role ARN for the data source. The system assumes
--   this role when accessing the data source.
--   
--   <a>$sel:relationalDatabaseConfig:CreateDataSource'</a>,
--   <a>createDataSource_relationalDatabaseConfig</a> - Relational database
--   settings.
--   
--   <a>$sel:elasticsearchConfig:CreateDataSource'</a>,
--   <a>createDataSource_elasticsearchConfig</a> - Amazon OpenSearch
--   Service settings.
--   
--   As of September 2021, Amazon Elasticsearch service is Amazon
--   OpenSearch Service. This configuration is deprecated. For new data
--   sources, use CreateDataSourceRequest$openSearchServiceConfig to create
--   an OpenSearch data source.
--   
--   <a>$sel:lambdaConfig:CreateDataSource'</a>,
--   <a>createDataSource_lambdaConfig</a> - Amazon Web Services Lambda
--   settings.
--   
--   <a>$sel:dynamodbConfig:CreateDataSource'</a>,
--   <a>createDataSource_dynamodbConfig</a> - Amazon DynamoDB settings.
--   
--   <a>$sel:description:CreateDataSource'</a>,
--   <a>createDataSource_description</a> - A description of the
--   <tt>DataSource</tt>.
--   
--   <a>$sel:openSearchServiceConfig:CreateDataSource'</a>,
--   <a>createDataSource_openSearchServiceConfig</a> - Amazon OpenSearch
--   Service settings.
--   
--   <a>$sel:httpConfig:CreateDataSource'</a>,
--   <a>createDataSource_httpConfig</a> - HTTP endpoint settings.
--   
--   <a>$sel:apiId:CreateDataSource'</a>, <a>createDataSource_apiId</a> -
--   The API ID for the GraphQL API for the <tt>DataSource</tt>.
--   
--   <a>$sel:name:CreateDataSource'</a>, <a>createDataSource_name</a> - A
--   user-supplied name for the <tt>DataSource</tt>.
--   
--   <a>$sel:type':CreateDataSource'</a>, <a>createDataSource_type</a> -
--   The type of the <tt>DataSource</tt>.
newCreateDataSource :: Text -> Text -> DataSourceType -> CreateDataSource

-- | <i>See:</i> <a>newCreateDataSourceResponse</a> smart constructor.
data CreateDataSourceResponse
CreateDataSourceResponse' :: Maybe DataSource -> Int -> CreateDataSourceResponse

-- | Create a value of <a>CreateDataSourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dataSource:CreateDataSourceResponse'</a>,
--   <a>createDataSourceResponse_dataSource</a> - The <tt>DataSource</tt>
--   object.
--   
--   <a>$sel:httpStatus:CreateDataSourceResponse'</a>,
--   <a>createDataSourceResponse_httpStatus</a> - The response's http
--   status code.
newCreateDataSourceResponse :: Int -> CreateDataSourceResponse

-- | <i>See:</i> <a>newDeleteType</a> smart constructor.
data DeleteType
DeleteType' :: Text -> Text -> DeleteType

-- | Create a value of <a>DeleteType</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiId:DeleteType'</a>, <a>deleteType_apiId</a> - The API ID.
--   
--   <a>$sel:typeName:DeleteType'</a>, <a>deleteType_typeName</a> - The
--   type name.
newDeleteType :: Text -> Text -> DeleteType

-- | <i>See:</i> <a>newDeleteTypeResponse</a> smart constructor.
data DeleteTypeResponse
DeleteTypeResponse' :: Int -> DeleteTypeResponse

-- | Create a value of <a>DeleteTypeResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteTypeResponse'</a>,
--   <a>deleteTypeResponse_httpStatus</a> - The response's http status
--   code.
newDeleteTypeResponse :: Int -> DeleteTypeResponse

-- | <i>See:</i> <a>newListResolversByFunction</a> smart constructor.
data ListResolversByFunction
ListResolversByFunction' :: Maybe Text -> Maybe Natural -> Text -> Text -> ListResolversByFunction

-- | Create a value of <a>ListResolversByFunction</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListResolversByFunction'</a>,
--   <a>listResolversByFunction_nextToken</a> - An identifier that was
--   returned from the previous call to this operation, which you can use
--   to return the next set of items in the list.
--   
--   <a>$sel:maxResults:ListResolversByFunction'</a>,
--   <a>listResolversByFunction_maxResults</a> - The maximum number of
--   results you want the request to return.
--   
--   <a>$sel:apiId:ListResolversByFunction'</a>,
--   <a>listResolversByFunction_apiId</a> - The API ID.
--   
--   <a>$sel:functionId:ListResolversByFunction'</a>,
--   <a>listResolversByFunction_functionId</a> - The Function ID.
newListResolversByFunction :: Text -> Text -> ListResolversByFunction

-- | <i>See:</i> <a>newListResolversByFunctionResponse</a> smart
--   constructor.
data ListResolversByFunctionResponse
ListResolversByFunctionResponse' :: Maybe Text -> Maybe [Resolver] -> Int -> ListResolversByFunctionResponse

-- | Create a value of <a>ListResolversByFunctionResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListResolversByFunction'</a>,
--   <a>listResolversByFunctionResponse_nextToken</a> - An identifier that
--   can be used to return the next set of items in the list.
--   
--   <a>$sel:resolvers:ListResolversByFunctionResponse'</a>,
--   <a>listResolversByFunctionResponse_resolvers</a> - The list of
--   resolvers.
--   
--   <a>$sel:httpStatus:ListResolversByFunctionResponse'</a>,
--   <a>listResolversByFunctionResponse_httpStatus</a> - The response's
--   http status code.
newListResolversByFunctionResponse :: Int -> ListResolversByFunctionResponse

-- | <i>See:</i> <a>newListFunctions</a> smart constructor.
data ListFunctions
ListFunctions' :: Maybe Text -> Maybe Natural -> Text -> ListFunctions

-- | Create a value of <a>ListFunctions</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListFunctions'</a>, <a>listFunctions_nextToken</a> -
--   An identifier that was returned from the previous call to this
--   operation, which can be used to return the next set of items in the
--   list.
--   
--   <a>$sel:maxResults:ListFunctions'</a>, <a>listFunctions_maxResults</a>
--   - The maximum number of results you want the request to return.
--   
--   <a>$sel:apiId:ListFunctions'</a>, <a>listFunctions_apiId</a> - The
--   GraphQL API ID.
newListFunctions :: Text -> ListFunctions

-- | <i>See:</i> <a>newListFunctionsResponse</a> smart constructor.
data ListFunctionsResponse
ListFunctionsResponse' :: Maybe Text -> Maybe [FunctionConfiguration] -> Int -> ListFunctionsResponse

-- | Create a value of <a>ListFunctionsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListFunctions'</a>,
--   <a>listFunctionsResponse_nextToken</a> - An identifier that was
--   returned from the previous call to this operation, which can be used
--   to return the next set of items in the list.
--   
--   <a>$sel:functions:ListFunctionsResponse'</a>,
--   <a>listFunctionsResponse_functions</a> - A list of <tt>Function</tt>
--   objects.
--   
--   <a>$sel:httpStatus:ListFunctionsResponse'</a>,
--   <a>listFunctionsResponse_httpStatus</a> - The response's http status
--   code.
newListFunctionsResponse :: Int -> ListFunctionsResponse

-- | <i>See:</i> <a>newUntagResource</a> smart constructor.
data UntagResource
UntagResource' :: Text -> NonEmpty Text -> UntagResource

-- | Create a value of <a>UntagResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:UntagResource'</a>,
--   <a>untagResource_resourceArn</a> - The <tt>GraphqlApi</tt> ARN.
--   
--   <a>$sel:tagKeys:UntagResource'</a>, <a>untagResource_tagKeys</a> - A
--   list of <tt>TagKey</tt> objects.
newUntagResource :: Text -> NonEmpty Text -> UntagResource

-- | <i>See:</i> <a>newUntagResourceResponse</a> smart constructor.
data UntagResourceResponse
UntagResourceResponse' :: Int -> UntagResourceResponse

-- | Create a value of <a>UntagResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UntagResourceResponse'</a>,
--   <a>untagResourceResponse_httpStatus</a> - The response's http status
--   code.
newUntagResourceResponse :: Int -> UntagResourceResponse

-- | <i>See:</i> <a>newDeleteGraphqlApi</a> smart constructor.
data DeleteGraphqlApi
DeleteGraphqlApi' :: Text -> DeleteGraphqlApi

-- | Create a value of <a>DeleteGraphqlApi</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiId:DeleteGraphqlApi'</a>, <a>deleteGraphqlApi_apiId</a> -
--   The API ID.
newDeleteGraphqlApi :: Text -> DeleteGraphqlApi

-- | <i>See:</i> <a>newDeleteGraphqlApiResponse</a> smart constructor.
data DeleteGraphqlApiResponse
DeleteGraphqlApiResponse' :: Int -> DeleteGraphqlApiResponse

-- | Create a value of <a>DeleteGraphqlApiResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteGraphqlApiResponse'</a>,
--   <a>deleteGraphqlApiResponse_httpStatus</a> - The response's http
--   status code.
newDeleteGraphqlApiResponse :: Int -> DeleteGraphqlApiResponse

-- | <i>See:</i> <a>newGetResolver</a> smart constructor.
data GetResolver
GetResolver' :: Text -> Text -> Text -> GetResolver

-- | Create a value of <a>GetResolver</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiId:GetResolver'</a>, <a>getResolver_apiId</a> - The API ID.
--   
--   <a>$sel:typeName:GetResolver'</a>, <a>getResolver_typeName</a> - The
--   resolver type name.
--   
--   <a>$sel:fieldName:GetResolver'</a>, <a>getResolver_fieldName</a> - The
--   resolver field name.
newGetResolver :: Text -> Text -> Text -> GetResolver

-- | <i>See:</i> <a>newGetResolverResponse</a> smart constructor.
data GetResolverResponse
GetResolverResponse' :: Maybe Resolver -> Int -> GetResolverResponse

-- | Create a value of <a>GetResolverResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resolver:GetResolverResponse'</a>,
--   <a>getResolverResponse_resolver</a> - The <tt>Resolver</tt> object.
--   
--   <a>$sel:httpStatus:GetResolverResponse'</a>,
--   <a>getResolverResponse_httpStatus</a> - The response's http status
--   code.
newGetResolverResponse :: Int -> GetResolverResponse

-- | <i>See:</i> <a>newGetIntrospectionSchema</a> smart constructor.
data GetIntrospectionSchema
GetIntrospectionSchema' :: Maybe Bool -> Text -> OutputType -> GetIntrospectionSchema

-- | Create a value of <a>GetIntrospectionSchema</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:includeDirectives:GetIntrospectionSchema'</a>,
--   <a>getIntrospectionSchema_includeDirectives</a> - A flag that
--   specifies whether the schema introspection should contain directives.
--   
--   <a>$sel:apiId:GetIntrospectionSchema'</a>,
--   <a>getIntrospectionSchema_apiId</a> - The API ID.
--   
--   <a>$sel:format:GetIntrospectionSchema'</a>,
--   <a>getIntrospectionSchema_format</a> - The schema format: SDL or JSON.
newGetIntrospectionSchema :: Text -> OutputType -> GetIntrospectionSchema

-- | <i>See:</i> <a>newGetIntrospectionSchemaResponse</a> smart
--   constructor.
data GetIntrospectionSchemaResponse
GetIntrospectionSchemaResponse' :: Maybe ByteString -> Int -> GetIntrospectionSchemaResponse

-- | Create a value of <a>GetIntrospectionSchemaResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:schema:GetIntrospectionSchemaResponse'</a>,
--   <a>getIntrospectionSchemaResponse_schema</a> - The schema, in GraphQL
--   Schema Definition Language (SDL) format.
--   
--   For more information, see the <a>GraphQL SDL documentation</a>.
--   
--   <a>$sel:httpStatus:GetIntrospectionSchemaResponse'</a>,
--   <a>getIntrospectionSchemaResponse_httpStatus</a> - The response's http
--   status code.
newGetIntrospectionSchemaResponse :: Int -> GetIntrospectionSchemaResponse

-- | <i>See:</i> <a>newTagResource</a> smart constructor.
data TagResource
TagResource' :: Text -> HashMap Text Text -> TagResource

-- | Create a value of <a>TagResource</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:TagResource'</a>, <a>tagResource_resourceArn</a> -
--   The <tt>GraphqlApi</tt> ARN.
--   
--   <a>$sel:tags:TagResource'</a>, <a>tagResource_tags</a> - A
--   <tt>TagMap</tt> object.
newTagResource :: Text -> TagResource

-- | <i>See:</i> <a>newTagResourceResponse</a> smart constructor.
data TagResourceResponse
TagResourceResponse' :: Int -> TagResourceResponse

-- | Create a value of <a>TagResourceResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:TagResourceResponse'</a>,
--   <a>tagResourceResponse_httpStatus</a> - The response's http status
--   code.
newTagResourceResponse :: Int -> TagResourceResponse

-- | <i>See:</i> <a>newListGraphqlApis</a> smart constructor.
data ListGraphqlApis
ListGraphqlApis' :: Maybe Text -> Maybe Natural -> ListGraphqlApis

-- | Create a value of <a>ListGraphqlApis</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListGraphqlApis'</a>,
--   <a>listGraphqlApis_nextToken</a> - An identifier that was returned
--   from the previous call to this operation, which can be used to return
--   the next set of items in the list.
--   
--   <a>$sel:maxResults:ListGraphqlApis'</a>,
--   <a>listGraphqlApis_maxResults</a> - The maximum number of results you
--   want the request to return.
newListGraphqlApis :: ListGraphqlApis

-- | <i>See:</i> <a>newListGraphqlApisResponse</a> smart constructor.
data ListGraphqlApisResponse
ListGraphqlApisResponse' :: Maybe Text -> Maybe [GraphqlApi] -> Int -> ListGraphqlApisResponse

-- | Create a value of <a>ListGraphqlApisResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListGraphqlApis'</a>,
--   <a>listGraphqlApisResponse_nextToken</a> - An identifier to be passed
--   in the next request to this operation to return the next set of items
--   in the list.
--   
--   <a>$sel:graphqlApis:ListGraphqlApisResponse'</a>,
--   <a>listGraphqlApisResponse_graphqlApis</a> - The <tt>GraphqlApi</tt>
--   objects.
--   
--   <a>$sel:httpStatus:ListGraphqlApisResponse'</a>,
--   <a>listGraphqlApisResponse_httpStatus</a> - The response's http status
--   code.
newListGraphqlApisResponse :: Int -> ListGraphqlApisResponse

-- | <i>See:</i> <a>newUpdateGraphqlApi</a> smart constructor.
data UpdateGraphqlApi
UpdateGraphqlApi' :: Maybe OpenIDConnectConfig -> Maybe UserPoolConfig -> Maybe Bool -> Maybe LambdaAuthorizerConfig -> Maybe LogConfig -> Maybe [AdditionalAuthenticationProvider] -> Maybe AuthenticationType -> Text -> Text -> UpdateGraphqlApi

-- | Create a value of <a>UpdateGraphqlApi</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:openIDConnectConfig:UpdateGraphqlApi'</a>,
--   <a>updateGraphqlApi_openIDConnectConfig</a> - The OpenID Connect
--   configuration for the <tt>GraphqlApi</tt> object.
--   
--   <a>$sel:userPoolConfig:UpdateGraphqlApi'</a>,
--   <a>updateGraphqlApi_userPoolConfig</a> - The new Amazon Cognito user
--   pool configuration for the <tt>GraphqlApi</tt> object.
--   
--   <a>$sel:xrayEnabled:UpdateGraphqlApi'</a>,
--   <a>updateGraphqlApi_xrayEnabled</a> - A flag indicating whether to
--   enable X-Ray tracing for the <tt>GraphqlApi</tt>.
--   
--   <a>$sel:lambdaAuthorizerConfig:UpdateGraphqlApi'</a>,
--   <a>updateGraphqlApi_lambdaAuthorizerConfig</a> - Configuration for
--   Amazon Web Services Lambda function authorization.
--   
--   <a>$sel:logConfig:UpdateGraphqlApi'</a>,
--   <a>updateGraphqlApi_logConfig</a> - The Amazon CloudWatch Logs
--   configuration for the <tt>GraphqlApi</tt> object.
--   
--   <a>$sel:additionalAuthenticationProviders:UpdateGraphqlApi'</a>,
--   <a>updateGraphqlApi_additionalAuthenticationProviders</a> - A list of
--   additional authentication providers for the <tt>GraphqlApi</tt> API.
--   
--   <a>$sel:authenticationType:UpdateGraphqlApi'</a>,
--   <a>updateGraphqlApi_authenticationType</a> - The new authentication
--   type for the <tt>GraphqlApi</tt> object.
--   
--   <a>$sel:apiId:UpdateGraphqlApi'</a>, <a>updateGraphqlApi_apiId</a> -
--   The API ID.
--   
--   <a>$sel:name:UpdateGraphqlApi'</a>, <a>updateGraphqlApi_name</a> - The
--   new name for the <tt>GraphqlApi</tt> object.
newUpdateGraphqlApi :: Text -> Text -> UpdateGraphqlApi

-- | <i>See:</i> <a>newUpdateGraphqlApiResponse</a> smart constructor.
data UpdateGraphqlApiResponse
UpdateGraphqlApiResponse' :: Maybe GraphqlApi -> Int -> UpdateGraphqlApiResponse

-- | Create a value of <a>UpdateGraphqlApiResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:graphqlApi:UpdateGraphqlApiResponse'</a>,
--   <a>updateGraphqlApiResponse_graphqlApi</a> - The updated
--   <tt>GraphqlApi</tt> object.
--   
--   <a>$sel:httpStatus:UpdateGraphqlApiResponse'</a>,
--   <a>updateGraphqlApiResponse_httpStatus</a> - The response's http
--   status code.
newUpdateGraphqlApiResponse :: Int -> UpdateGraphqlApiResponse

-- | Represents the input of a <tt>UpdateApiCache</tt> operation.
--   
--   <i>See:</i> <a>newUpdateApiCache</a> smart constructor.
data UpdateApiCache
UpdateApiCache' :: Text -> Integer -> ApiCachingBehavior -> ApiCacheType -> UpdateApiCache

-- | Create a value of <a>UpdateApiCache</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiId:UpdateApiCache'</a>, <a>updateApiCache_apiId</a> - The
--   GraphQL API Id.
--   
--   <a>$sel:ttl:UpdateApiCache'</a>, <a>updateApiCache_ttl</a> - TTL in
--   seconds for cache entries.
--   
--   Valid values are between 1 and 3600 seconds.
--   
--   <a>$sel:apiCachingBehavior:UpdateApiCache'</a>,
--   <a>updateApiCache_apiCachingBehavior</a> - Caching behavior.
--   
--   <ul>
--   <li><b>FULL_REQUEST_CACHING</b>: All requests are fully cached.</li>
--   <li><b>PER_RESOLVER_CACHING</b>: Individual resolvers that you specify
--   are cached.</li>
--   </ul>
--   
--   <a>$sel:type':UpdateApiCache'</a>, <a>updateApiCache_type</a> - The
--   cache instance type. Valid values are
--   
--   <ul>
--   <li><pre>SMALL</pre></li>
--   <li><pre>MEDIUM</pre></li>
--   <li><pre>LARGE</pre></li>
--   <li><pre>XLARGE</pre></li>
--   <li><pre>LARGE_2X</pre></li>
--   <li><pre>LARGE_4X</pre></li>
--   <li><tt>LARGE_8X</tt> (not available in all regions)</li>
--   <li><pre>LARGE_12X</pre></li>
--   </ul>
--   
--   Historically, instance types were identified by an EC2-style value. As
--   of July 2020, this is deprecated, and the generic identifiers above
--   should be used.
--   
--   The following legacy instance types are available, but their use is
--   discouraged:
--   
--   <ul>
--   <li><b>T2_SMALL</b>: A t2.small instance type.</li>
--   <li><b>T2_MEDIUM</b>: A t2.medium instance type.</li>
--   <li><b>R4_LARGE</b>: A r4.large instance type.</li>
--   <li><b>R4_XLARGE</b>: A r4.xlarge instance type.</li>
--   <li><b>R4_2XLARGE</b>: A r4.2xlarge instance type.</li>
--   <li><b>R4_4XLARGE</b>: A r4.4xlarge instance type.</li>
--   <li><b>R4_8XLARGE</b>: A r4.8xlarge instance type.</li>
--   </ul>
newUpdateApiCache :: Text -> Integer -> ApiCachingBehavior -> ApiCacheType -> UpdateApiCache

-- | Represents the output of a <tt>UpdateApiCache</tt> operation.
--   
--   <i>See:</i> <a>newUpdateApiCacheResponse</a> smart constructor.
data UpdateApiCacheResponse
UpdateApiCacheResponse' :: Maybe ApiCache -> Int -> UpdateApiCacheResponse

-- | Create a value of <a>UpdateApiCacheResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiCache:UpdateApiCacheResponse'</a>,
--   <a>updateApiCacheResponse_apiCache</a> - The <tt>ApiCache</tt> object.
--   
--   <a>$sel:httpStatus:UpdateApiCacheResponse'</a>,
--   <a>updateApiCacheResponse_httpStatus</a> - The response's http status
--   code.
newUpdateApiCacheResponse :: Int -> UpdateApiCacheResponse

-- | Represents the input of a <tt>DeleteApiCache</tt> operation.
--   
--   <i>See:</i> <a>newDeleteApiCache</a> smart constructor.
data DeleteApiCache
DeleteApiCache' :: Text -> DeleteApiCache

-- | Create a value of <a>DeleteApiCache</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiId:DeleteApiCache'</a>, <a>deleteApiCache_apiId</a> - The
--   API ID.
newDeleteApiCache :: Text -> DeleteApiCache

-- | Represents the output of a <tt>DeleteApiCache</tt> operation.
--   
--   <i>See:</i> <a>newDeleteApiCacheResponse</a> smart constructor.
data DeleteApiCacheResponse
DeleteApiCacheResponse' :: Int -> DeleteApiCacheResponse

-- | Create a value of <a>DeleteApiCacheResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteApiCacheResponse'</a>,
--   <a>deleteApiCacheResponse_httpStatus</a> - The response's http status
--   code.
newDeleteApiCacheResponse :: Int -> DeleteApiCacheResponse

-- | <i>See:</i> <a>newGetSchemaCreationStatus</a> smart constructor.
data GetSchemaCreationStatus
GetSchemaCreationStatus' :: Text -> GetSchemaCreationStatus

-- | Create a value of <a>GetSchemaCreationStatus</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiId:GetSchemaCreationStatus'</a>,
--   <a>getSchemaCreationStatus_apiId</a> - The API ID.
newGetSchemaCreationStatus :: Text -> GetSchemaCreationStatus

-- | <i>See:</i> <a>newGetSchemaCreationStatusResponse</a> smart
--   constructor.
data GetSchemaCreationStatusResponse
GetSchemaCreationStatusResponse' :: Maybe SchemaStatus -> Maybe Text -> Int -> GetSchemaCreationStatusResponse

-- | Create a value of <a>GetSchemaCreationStatusResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:GetSchemaCreationStatusResponse'</a>,
--   <a>getSchemaCreationStatusResponse_status</a> - The current state of
--   the schema (PROCESSING, FAILED, SUCCESS, or NOT_APPLICABLE). When the
--   schema is in the ACTIVE state, you can add data.
--   
--   <a>$sel:details:GetSchemaCreationStatusResponse'</a>,
--   <a>getSchemaCreationStatusResponse_details</a> - Detailed information
--   about the status of the schema creation operation.
--   
--   <a>$sel:httpStatus:GetSchemaCreationStatusResponse'</a>,
--   <a>getSchemaCreationStatusResponse_httpStatus</a> - The response's
--   http status code.
newGetSchemaCreationStatusResponse :: Int -> GetSchemaCreationStatusResponse

-- | Represents the input of a <tt>GetApiCache</tt> operation.
--   
--   <i>See:</i> <a>newGetApiCache</a> smart constructor.
data GetApiCache
GetApiCache' :: Text -> GetApiCache

-- | Create a value of <a>GetApiCache</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiId:GetApiCache'</a>, <a>getApiCache_apiId</a> - The API ID.
newGetApiCache :: Text -> GetApiCache

-- | Represents the output of a <tt>GetApiCache</tt> operation.
--   
--   <i>See:</i> <a>newGetApiCacheResponse</a> smart constructor.
data GetApiCacheResponse
GetApiCacheResponse' :: Maybe ApiCache -> Int -> GetApiCacheResponse

-- | Create a value of <a>GetApiCacheResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiCache:GetApiCacheResponse'</a>,
--   <a>getApiCacheResponse_apiCache</a> - The <tt>ApiCache</tt> object.
--   
--   <a>$sel:httpStatus:GetApiCacheResponse'</a>,
--   <a>getApiCacheResponse_httpStatus</a> - The response's http status
--   code.
newGetApiCacheResponse :: Int -> GetApiCacheResponse

-- | <i>See:</i> <a>newGetGraphqlApi</a> smart constructor.
data GetGraphqlApi
GetGraphqlApi' :: Text -> GetGraphqlApi

-- | Create a value of <a>GetGraphqlApi</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiId:GetGraphqlApi'</a>, <a>getGraphqlApi_apiId</a> - The API
--   ID for the GraphQL API.
newGetGraphqlApi :: Text -> GetGraphqlApi

-- | <i>See:</i> <a>newGetGraphqlApiResponse</a> smart constructor.
data GetGraphqlApiResponse
GetGraphqlApiResponse' :: Maybe GraphqlApi -> Int -> GetGraphqlApiResponse

-- | Create a value of <a>GetGraphqlApiResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:graphqlApi:GetGraphqlApiResponse'</a>,
--   <a>getGraphqlApiResponse_graphqlApi</a> - The <tt>GraphqlApi</tt>
--   object.
--   
--   <a>$sel:httpStatus:GetGraphqlApiResponse'</a>,
--   <a>getGraphqlApiResponse_httpStatus</a> - The response's http status
--   code.
newGetGraphqlApiResponse :: Int -> GetGraphqlApiResponse

-- | <i>See:</i> <a>newUpdateResolver</a> smart constructor.
data UpdateResolver
UpdateResolver' :: Maybe Text -> Maybe ResolverKind -> Maybe SyncConfig -> Maybe Text -> Maybe CachingConfig -> Maybe PipelineConfig -> Maybe Text -> Text -> Text -> Text -> UpdateResolver

-- | Create a value of <a>UpdateResolver</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:responseMappingTemplate:UpdateResolver'</a>,
--   <a>updateResolver_responseMappingTemplate</a> - The new response
--   mapping template.
--   
--   <a>$sel:kind:UpdateResolver'</a>, <a>updateResolver_kind</a> - The
--   resolver type.
--   
--   <ul>
--   <li><b>UNIT</b>: A UNIT resolver type. A UNIT resolver is the default
--   resolver type. A UNIT resolver enables you to execute a GraphQL query
--   against a single data source.</li>
--   <li><b>PIPELINE</b>: A PIPELINE resolver type. A PIPELINE resolver
--   enables you to execute a series of <tt>Function</tt> in a serial
--   manner. You can use a pipeline resolver to execute a GraphQL query
--   against multiple data sources.</li>
--   </ul>
--   
--   <a>$sel:syncConfig:UpdateResolver'</a>,
--   <a>updateResolver_syncConfig</a> - The <tt>SyncConfig</tt> for a
--   resolver attached to a versioned datasource.
--   
--   <a>$sel:dataSourceName:UpdateResolver'</a>,
--   <a>updateResolver_dataSourceName</a> - The new data source name.
--   
--   <a>$sel:cachingConfig:UpdateResolver'</a>,
--   <a>updateResolver_cachingConfig</a> - The caching configuration for
--   the resolver.
--   
--   <a>$sel:pipelineConfig:UpdateResolver'</a>,
--   <a>updateResolver_pipelineConfig</a> - The <tt>PipelineConfig</tt>.
--   
--   <a>$sel:requestMappingTemplate:UpdateResolver'</a>,
--   <a>updateResolver_requestMappingTemplate</a> - The new request mapping
--   template.
--   
--   A resolver uses a request mapping template to convert a GraphQL
--   expression into a format that a data source can understand. Mapping
--   templates are written in Apache Velocity Template Language (VTL).
--   
--   VTL request mapping templates are optional when using a Lambda data
--   source. For all other data sources, VTL request and response mapping
--   templates are required.
--   
--   <a>$sel:apiId:UpdateResolver'</a>, <a>updateResolver_apiId</a> - The
--   API ID.
--   
--   <a>$sel:typeName:UpdateResolver'</a>, <a>updateResolver_typeName</a> -
--   The new type name.
--   
--   <a>$sel:fieldName:UpdateResolver'</a>, <a>updateResolver_fieldName</a>
--   - The new field name.
newUpdateResolver :: Text -> Text -> Text -> UpdateResolver

-- | <i>See:</i> <a>newUpdateResolverResponse</a> smart constructor.
data UpdateResolverResponse
UpdateResolverResponse' :: Maybe Resolver -> Int -> UpdateResolverResponse

-- | Create a value of <a>UpdateResolverResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resolver:UpdateResolverResponse'</a>,
--   <a>updateResolverResponse_resolver</a> - The updated <tt>Resolver</tt>
--   object.
--   
--   <a>$sel:httpStatus:UpdateResolverResponse'</a>,
--   <a>updateResolverResponse_httpStatus</a> - The response's http status
--   code.
newUpdateResolverResponse :: Int -> UpdateResolverResponse

-- | <i>See:</i> <a>newDeleteResolver</a> smart constructor.
data DeleteResolver
DeleteResolver' :: Text -> Text -> Text -> DeleteResolver

-- | Create a value of <a>DeleteResolver</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiId:DeleteResolver'</a>, <a>deleteResolver_apiId</a> - The
--   API ID.
--   
--   <a>$sel:typeName:DeleteResolver'</a>, <a>deleteResolver_typeName</a> -
--   The name of the resolver type.
--   
--   <a>$sel:fieldName:DeleteResolver'</a>, <a>deleteResolver_fieldName</a>
--   - The resolver field name.
newDeleteResolver :: Text -> Text -> Text -> DeleteResolver

-- | <i>See:</i> <a>newDeleteResolverResponse</a> smart constructor.
data DeleteResolverResponse
DeleteResolverResponse' :: Int -> DeleteResolverResponse

-- | Create a value of <a>DeleteResolverResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteResolverResponse'</a>,
--   <a>deleteResolverResponse_httpStatus</a> - The response's http status
--   code.
newDeleteResolverResponse :: Int -> DeleteResolverResponse

-- | <i>See:</i> <a>newListTypes</a> smart constructor.
data ListTypes
ListTypes' :: Maybe Text -> Maybe Natural -> Text -> TypeDefinitionFormat -> ListTypes

-- | Create a value of <a>ListTypes</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListTypes'</a>, <a>listTypes_nextToken</a> - An
--   identifier that was returned from the previous call to this operation,
--   which can be used to return the next set of items in the list.
--   
--   <a>$sel:maxResults:ListTypes'</a>, <a>listTypes_maxResults</a> - The
--   maximum number of results you want the request to return.
--   
--   <a>$sel:apiId:ListTypes'</a>, <a>listTypes_apiId</a> - The API ID.
--   
--   <a>$sel:format:ListTypes'</a>, <a>listTypes_format</a> - The type
--   format: SDL or JSON.
newListTypes :: Text -> TypeDefinitionFormat -> ListTypes

-- | <i>See:</i> <a>newListTypesResponse</a> smart constructor.
data ListTypesResponse
ListTypesResponse' :: Maybe Text -> Maybe [Type] -> Int -> ListTypesResponse

-- | Create a value of <a>ListTypesResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListTypes'</a>, <a>listTypesResponse_nextToken</a> -
--   An identifier to be passed in the next request to this operation to
--   return the next set of items in the list.
--   
--   <a>$sel:types:ListTypesResponse'</a>, <a>listTypesResponse_types</a> -
--   The <tt>Type</tt> objects.
--   
--   <a>$sel:httpStatus:ListTypesResponse'</a>,
--   <a>listTypesResponse_httpStatus</a> - The response's http status code.
newListTypesResponse :: Int -> ListTypesResponse

-- | <i>See:</i> <a>newGetType</a> smart constructor.
data GetType
GetType' :: Text -> Text -> TypeDefinitionFormat -> GetType

-- | Create a value of <a>GetType</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiId:GetType'</a>, <a>getType_apiId</a> - The API ID.
--   
--   <a>$sel:typeName:GetType'</a>, <a>getType_typeName</a> - The type
--   name.
--   
--   <a>$sel:format:GetType'</a>, <a>getType_format</a> - The type format:
--   SDL or JSON.
newGetType :: Text -> Text -> TypeDefinitionFormat -> GetType

-- | <i>See:</i> <a>newGetTypeResponse</a> smart constructor.
data GetTypeResponse
GetTypeResponse' :: Maybe Type -> Int -> GetTypeResponse

-- | Create a value of <a>GetTypeResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:type':GetTypeResponse'</a>, <a>getTypeResponse_type</a> - The
--   <tt>Type</tt> object.
--   
--   <a>$sel:httpStatus:GetTypeResponse'</a>,
--   <a>getTypeResponse_httpStatus</a> - The response's http status code.
newGetTypeResponse :: Int -> GetTypeResponse

-- | <i>See:</i> <a>newCreateFunction</a> smart constructor.
data CreateFunction
CreateFunction' :: Maybe Text -> Maybe SyncConfig -> Maybe Text -> Maybe Text -> Text -> Text -> Text -> Text -> CreateFunction

-- | Create a value of <a>CreateFunction</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:responseMappingTemplate:CreateFunction'</a>,
--   <a>createFunction_responseMappingTemplate</a> - The <tt>Function</tt>
--   response mapping template.
--   
--   <a>$sel:syncConfig:CreateFunction'</a>,
--   <a>createFunction_syncConfig</a> - Undocumented member.
--   
--   <a>$sel:description:CreateFunction'</a>,
--   <a>createFunction_description</a> - The <tt>Function</tt> description.
--   
--   <a>$sel:requestMappingTemplate:CreateFunction'</a>,
--   <a>createFunction_requestMappingTemplate</a> - The <tt>Function</tt>
--   request mapping template. Functions support only the 2018-05-29
--   version of the request mapping template.
--   
--   <a>$sel:apiId:CreateFunction'</a>, <a>createFunction_apiId</a> - The
--   GraphQL API ID.
--   
--   <a>$sel:name:CreateFunction'</a>, <a>createFunction_name</a> - The
--   <tt>Function</tt> name. The function name does not have to be unique.
--   
--   <a>$sel:dataSourceName:CreateFunction'</a>,
--   <a>createFunction_dataSourceName</a> - The <tt>Function</tt>
--   <tt>DataSource</tt> name.
--   
--   <a>$sel:functionVersion:CreateFunction'</a>,
--   <a>createFunction_functionVersion</a> - The <tt>version</tt> of the
--   request mapping template. Currently the supported value is 2018-05-29.
newCreateFunction :: Text -> Text -> Text -> Text -> CreateFunction

-- | <i>See:</i> <a>newCreateFunctionResponse</a> smart constructor.
data CreateFunctionResponse
CreateFunctionResponse' :: Maybe FunctionConfiguration -> Int -> CreateFunctionResponse

-- | Create a value of <a>CreateFunctionResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:functionConfiguration:CreateFunctionResponse'</a>,
--   <a>createFunctionResponse_functionConfiguration</a> - The
--   <tt>Function</tt> object.
--   
--   <a>$sel:httpStatus:CreateFunctionResponse'</a>,
--   <a>createFunctionResponse_httpStatus</a> - The response's http status
--   code.
newCreateFunctionResponse :: Int -> CreateFunctionResponse

-- | <i>See:</i> <a>newDeleteApiKey</a> smart constructor.
data DeleteApiKey
DeleteApiKey' :: Text -> Text -> DeleteApiKey

-- | Create a value of <a>DeleteApiKey</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiId:DeleteApiKey'</a>, <a>deleteApiKey_apiId</a> - The API
--   ID.
--   
--   <a>$sel:id:DeleteApiKey'</a>, <a>deleteApiKey_id</a> - The ID for the
--   API key.
newDeleteApiKey :: Text -> Text -> DeleteApiKey

-- | <i>See:</i> <a>newDeleteApiKeyResponse</a> smart constructor.
data DeleteApiKeyResponse
DeleteApiKeyResponse' :: Int -> DeleteApiKeyResponse

-- | Create a value of <a>DeleteApiKeyResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteApiKeyResponse'</a>,
--   <a>deleteApiKeyResponse_httpStatus</a> - The response's http status
--   code.
newDeleteApiKeyResponse :: Int -> DeleteApiKeyResponse

-- | <i>See:</i> <a>newListApiKeys</a> smart constructor.
data ListApiKeys
ListApiKeys' :: Maybe Text -> Maybe Natural -> Text -> ListApiKeys

-- | Create a value of <a>ListApiKeys</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListApiKeys'</a>, <a>listApiKeys_nextToken</a> - An
--   identifier that was returned from the previous call to this operation,
--   which can be used to return the next set of items in the list.
--   
--   <a>$sel:maxResults:ListApiKeys'</a>, <a>listApiKeys_maxResults</a> -
--   The maximum number of results you want the request to return.
--   
--   <a>$sel:apiId:ListApiKeys'</a>, <a>listApiKeys_apiId</a> - The API ID.
newListApiKeys :: Text -> ListApiKeys

-- | <i>See:</i> <a>newListApiKeysResponse</a> smart constructor.
data ListApiKeysResponse
ListApiKeysResponse' :: Maybe Text -> Maybe [ApiKey] -> Int -> ListApiKeysResponse

-- | Create a value of <a>ListApiKeysResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListApiKeys'</a>,
--   <a>listApiKeysResponse_nextToken</a> - An identifier to be passed in
--   the next request to this operation to return the next set of items in
--   the list.
--   
--   <a>$sel:apiKeys:ListApiKeysResponse'</a>,
--   <a>listApiKeysResponse_apiKeys</a> - The <tt>ApiKey</tt> objects.
--   
--   <a>$sel:httpStatus:ListApiKeysResponse'</a>,
--   <a>listApiKeysResponse_httpStatus</a> - The response's http status
--   code.
newListApiKeysResponse :: Int -> ListApiKeysResponse

-- | <i>See:</i> <a>newUpdateApiKey</a> smart constructor.
data UpdateApiKey
UpdateApiKey' :: Maybe Text -> Maybe Integer -> Text -> Text -> UpdateApiKey

-- | Create a value of <a>UpdateApiKey</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:description:UpdateApiKey'</a>, <a>updateApiKey_description</a>
--   - A description of the purpose of the API key.
--   
--   <a>$sel:expires:UpdateApiKey'</a>, <a>updateApiKey_expires</a> - The
--   time from update time after which the API key expires. The date is
--   represented as seconds since the epoch. For more information, see .
--   
--   <a>$sel:apiId:UpdateApiKey'</a>, <a>updateApiKey_apiId</a> - The ID
--   for the GraphQL API.
--   
--   <a>$sel:id:UpdateApiKey'</a>, <a>updateApiKey_id</a> - The API key ID.
newUpdateApiKey :: Text -> Text -> UpdateApiKey

-- | <i>See:</i> <a>newUpdateApiKeyResponse</a> smart constructor.
data UpdateApiKeyResponse
UpdateApiKeyResponse' :: Maybe ApiKey -> Int -> UpdateApiKeyResponse

-- | Create a value of <a>UpdateApiKeyResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiKey:UpdateApiKeyResponse'</a>,
--   <a>updateApiKeyResponse_apiKey</a> - The API key.
--   
--   <a>$sel:httpStatus:UpdateApiKeyResponse'</a>,
--   <a>updateApiKeyResponse_httpStatus</a> - The response's http status
--   code.
newUpdateApiKeyResponse :: Int -> UpdateApiKeyResponse

-- | <i>See:</i> <a>newCreateApiKey</a> smart constructor.
data CreateApiKey
CreateApiKey' :: Maybe Text -> Maybe Integer -> Text -> CreateApiKey

-- | Create a value of <a>CreateApiKey</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:description:CreateApiKey'</a>, <a>createApiKey_description</a>
--   - A description of the purpose of the API key.
--   
--   <a>$sel:expires:CreateApiKey'</a>, <a>createApiKey_expires</a> - The
--   time from creation time after which the API key expires. The date is
--   represented as seconds since the epoch, rounded down to the nearest
--   hour. The default value for this parameter is 7 days from creation
--   time. For more information, see .
--   
--   <a>$sel:apiId:CreateApiKey'</a>, <a>createApiKey_apiId</a> - The ID
--   for your GraphQL API.
newCreateApiKey :: Text -> CreateApiKey

-- | <i>See:</i> <a>newCreateApiKeyResponse</a> smart constructor.
data CreateApiKeyResponse
CreateApiKeyResponse' :: Maybe ApiKey -> Int -> CreateApiKeyResponse

-- | Create a value of <a>CreateApiKeyResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiKey:CreateApiKeyResponse'</a>,
--   <a>createApiKeyResponse_apiKey</a> - The API key.
--   
--   <a>$sel:httpStatus:CreateApiKeyResponse'</a>,
--   <a>createApiKeyResponse_httpStatus</a> - The response's http status
--   code.
newCreateApiKeyResponse :: Int -> CreateApiKeyResponse

-- | <i>See:</i> <a>newDeleteFunction</a> smart constructor.
data DeleteFunction
DeleteFunction' :: Text -> Text -> DeleteFunction

-- | Create a value of <a>DeleteFunction</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiId:DeleteFunction'</a>, <a>deleteFunction_apiId</a> - The
--   GraphQL API ID.
--   
--   <a>$sel:functionId:DeleteFunction'</a>,
--   <a>deleteFunction_functionId</a> - The <tt>Function</tt> ID.
newDeleteFunction :: Text -> Text -> DeleteFunction

-- | <i>See:</i> <a>newDeleteFunctionResponse</a> smart constructor.
data DeleteFunctionResponse
DeleteFunctionResponse' :: Int -> DeleteFunctionResponse

-- | Create a value of <a>DeleteFunctionResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteFunctionResponse'</a>,
--   <a>deleteFunctionResponse_httpStatus</a> - The response's http status
--   code.
newDeleteFunctionResponse :: Int -> DeleteFunctionResponse

-- | <i>See:</i> <a>newUpdateFunction</a> smart constructor.
data UpdateFunction
UpdateFunction' :: Maybe Text -> Maybe SyncConfig -> Maybe Text -> Maybe Text -> Text -> Text -> Text -> Text -> Text -> UpdateFunction

-- | Create a value of <a>UpdateFunction</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:responseMappingTemplate:UpdateFunction'</a>,
--   <a>updateFunction_responseMappingTemplate</a> - The <tt>Function</tt>
--   request mapping template.
--   
--   <a>$sel:syncConfig:UpdateFunction'</a>,
--   <a>updateFunction_syncConfig</a> - Undocumented member.
--   
--   <a>$sel:description:UpdateFunction'</a>,
--   <a>updateFunction_description</a> - The <tt>Function</tt> description.
--   
--   <a>$sel:requestMappingTemplate:UpdateFunction'</a>,
--   <a>updateFunction_requestMappingTemplate</a> - The <tt>Function</tt>
--   request mapping template. Functions support only the 2018-05-29
--   version of the request mapping template.
--   
--   <a>$sel:apiId:UpdateFunction'</a>, <a>updateFunction_apiId</a> - The
--   GraphQL API ID.
--   
--   <a>$sel:name:UpdateFunction'</a>, <a>updateFunction_name</a> - The
--   <tt>Function</tt> name.
--   
--   <a>$sel:functionId:UpdateFunction'</a>,
--   <a>updateFunction_functionId</a> - The function ID.
--   
--   <a>$sel:dataSourceName:UpdateFunction'</a>,
--   <a>updateFunction_dataSourceName</a> - The <tt>Function</tt>
--   <tt>DataSource</tt> name.
--   
--   <a>$sel:functionVersion:UpdateFunction'</a>,
--   <a>updateFunction_functionVersion</a> - The <tt>version</tt> of the
--   request mapping template. Currently the supported value is 2018-05-29.
newUpdateFunction :: Text -> Text -> Text -> Text -> Text -> UpdateFunction

-- | <i>See:</i> <a>newUpdateFunctionResponse</a> smart constructor.
data UpdateFunctionResponse
UpdateFunctionResponse' :: Maybe FunctionConfiguration -> Int -> UpdateFunctionResponse

-- | Create a value of <a>UpdateFunctionResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:functionConfiguration:UpdateFunctionResponse'</a>,
--   <a>updateFunctionResponse_functionConfiguration</a> - The
--   <tt>Function</tt> object.
--   
--   <a>$sel:httpStatus:UpdateFunctionResponse'</a>,
--   <a>updateFunctionResponse_httpStatus</a> - The response's http status
--   code.
newUpdateFunctionResponse :: Int -> UpdateFunctionResponse

-- | <i>See:</i> <a>newGetDataSource</a> smart constructor.
data GetDataSource
GetDataSource' :: Text -> Text -> GetDataSource

-- | Create a value of <a>GetDataSource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiId:GetDataSource'</a>, <a>getDataSource_apiId</a> - The API
--   ID.
--   
--   <a>$sel:name:GetDataSource'</a>, <a>getDataSource_name</a> - The name
--   of the data source.
newGetDataSource :: Text -> Text -> GetDataSource

-- | <i>See:</i> <a>newGetDataSourceResponse</a> smart constructor.
data GetDataSourceResponse
GetDataSourceResponse' :: Maybe DataSource -> Int -> GetDataSourceResponse

-- | Create a value of <a>GetDataSourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dataSource:GetDataSourceResponse'</a>,
--   <a>getDataSourceResponse_dataSource</a> - The <tt>DataSource</tt>
--   object.
--   
--   <a>$sel:httpStatus:GetDataSourceResponse'</a>,
--   <a>getDataSourceResponse_httpStatus</a> - The response's http status
--   code.
newGetDataSourceResponse :: Int -> GetDataSourceResponse

-- | <i>See:</i> <a>newStartSchemaCreation</a> smart constructor.
data StartSchemaCreation
StartSchemaCreation' :: Text -> Base64 -> StartSchemaCreation

-- | Create a value of <a>StartSchemaCreation</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiId:StartSchemaCreation'</a>,
--   <a>startSchemaCreation_apiId</a> - The API ID.
--   
--   <a>$sel:definition:StartSchemaCreation'</a>,
--   <a>startSchemaCreation_definition</a> - The schema definition, in
--   GraphQL schema language format.-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
newStartSchemaCreation :: Text -> ByteString -> StartSchemaCreation

-- | <i>See:</i> <a>newStartSchemaCreationResponse</a> smart constructor.
data StartSchemaCreationResponse
StartSchemaCreationResponse' :: Maybe SchemaStatus -> Int -> StartSchemaCreationResponse

-- | Create a value of <a>StartSchemaCreationResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:StartSchemaCreationResponse'</a>,
--   <a>startSchemaCreationResponse_status</a> - The current state of the
--   schema (PROCESSING, FAILED, SUCCESS, or NOT_APPLICABLE). When the
--   schema is in the ACTIVE state, you can add data.
--   
--   <a>$sel:httpStatus:StartSchemaCreationResponse'</a>,
--   <a>startSchemaCreationResponse_httpStatus</a> - The response's http
--   status code.
newStartSchemaCreationResponse :: Int -> StartSchemaCreationResponse

-- | Represents the input of a <tt>CreateApiCache</tt> operation.
--   
--   <i>See:</i> <a>newCreateApiCache</a> smart constructor.
data CreateApiCache
CreateApiCache' :: Maybe Bool -> Maybe Bool -> Text -> Integer -> ApiCachingBehavior -> ApiCacheType -> CreateApiCache

-- | Create a value of <a>CreateApiCache</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:atRestEncryptionEnabled:CreateApiCache'</a>,
--   <a>createApiCache_atRestEncryptionEnabled</a> - At rest encryption
--   flag for cache. This setting cannot be updated after creation.
--   
--   <a>$sel:transitEncryptionEnabled:CreateApiCache'</a>,
--   <a>createApiCache_transitEncryptionEnabled</a> - Transit encryption
--   flag when connecting to cache. This setting cannot be updated after
--   creation.
--   
--   <a>$sel:apiId:CreateApiCache'</a>, <a>createApiCache_apiId</a> - The
--   GraphQL API Id.
--   
--   <a>$sel:ttl:CreateApiCache'</a>, <a>createApiCache_ttl</a> - TTL in
--   seconds for cache entries.
--   
--   Valid values are between 1 and 3600 seconds.
--   
--   <a>$sel:apiCachingBehavior:CreateApiCache'</a>,
--   <a>createApiCache_apiCachingBehavior</a> - Caching behavior.
--   
--   <ul>
--   <li><b>FULL_REQUEST_CACHING</b>: All requests are fully cached.</li>
--   <li><b>PER_RESOLVER_CACHING</b>: Individual resolvers that you specify
--   are cached.</li>
--   </ul>
--   
--   <a>$sel:type':CreateApiCache'</a>, <a>createApiCache_type</a> - The
--   cache instance type. Valid values are
--   
--   <ul>
--   <li><pre>SMALL</pre></li>
--   <li><pre>MEDIUM</pre></li>
--   <li><pre>LARGE</pre></li>
--   <li><pre>XLARGE</pre></li>
--   <li><pre>LARGE_2X</pre></li>
--   <li><pre>LARGE_4X</pre></li>
--   <li><tt>LARGE_8X</tt> (not available in all regions)</li>
--   <li><pre>LARGE_12X</pre></li>
--   </ul>
--   
--   Historically, instance types were identified by an EC2-style value. As
--   of July 2020, this is deprecated, and the generic identifiers above
--   should be used.
--   
--   The following legacy instance types are available, but their use is
--   discouraged:
--   
--   <ul>
--   <li><b>T2_SMALL</b>: A t2.small instance type.</li>
--   <li><b>T2_MEDIUM</b>: A t2.medium instance type.</li>
--   <li><b>R4_LARGE</b>: A r4.large instance type.</li>
--   <li><b>R4_XLARGE</b>: A r4.xlarge instance type.</li>
--   <li><b>R4_2XLARGE</b>: A r4.2xlarge instance type.</li>
--   <li><b>R4_4XLARGE</b>: A r4.4xlarge instance type.</li>
--   <li><b>R4_8XLARGE</b>: A r4.8xlarge instance type.</li>
--   </ul>
newCreateApiCache :: Text -> Integer -> ApiCachingBehavior -> ApiCacheType -> CreateApiCache

-- | Represents the output of a <tt>CreateApiCache</tt> operation.
--   
--   <i>See:</i> <a>newCreateApiCacheResponse</a> smart constructor.
data CreateApiCacheResponse
CreateApiCacheResponse' :: Maybe ApiCache -> Int -> CreateApiCacheResponse

-- | Create a value of <a>CreateApiCacheResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiCache:CreateApiCacheResponse'</a>,
--   <a>createApiCacheResponse_apiCache</a> - The <tt>ApiCache</tt> object.
--   
--   <a>$sel:httpStatus:CreateApiCacheResponse'</a>,
--   <a>createApiCacheResponse_httpStatus</a> - The response's http status
--   code.
newCreateApiCacheResponse :: Int -> CreateApiCacheResponse

-- | Represents the input of a <tt>FlushApiCache</tt> operation.
--   
--   <i>See:</i> <a>newFlushApiCache</a> smart constructor.
data FlushApiCache
FlushApiCache' :: Text -> FlushApiCache

-- | Create a value of <a>FlushApiCache</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:apiId:FlushApiCache'</a>, <a>flushApiCache_apiId</a> - The API
--   ID.
newFlushApiCache :: Text -> FlushApiCache

-- | Represents the output of a <tt>FlushApiCache</tt> operation.
--   
--   <i>See:</i> <a>newFlushApiCacheResponse</a> smart constructor.
data FlushApiCacheResponse
FlushApiCacheResponse' :: Int -> FlushApiCacheResponse

-- | Create a value of <a>FlushApiCacheResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:FlushApiCacheResponse'</a>,
--   <a>flushApiCacheResponse_httpStatus</a> - The response's http status
--   code.
newFlushApiCacheResponse :: Int -> FlushApiCacheResponse

-- | <i>See:</i> <a>newCreateGraphqlApi</a> smart constructor.
data CreateGraphqlApi
CreateGraphqlApi' :: Maybe OpenIDConnectConfig -> Maybe UserPoolConfig -> Maybe Bool -> Maybe LambdaAuthorizerConfig -> Maybe (HashMap Text Text) -> Maybe LogConfig -> Maybe [AdditionalAuthenticationProvider] -> Text -> AuthenticationType -> CreateGraphqlApi

-- | Create a value of <a>CreateGraphqlApi</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:openIDConnectConfig:CreateGraphqlApi'</a>,
--   <a>createGraphqlApi_openIDConnectConfig</a> - The OpenID Connect
--   configuration.
--   
--   <a>$sel:userPoolConfig:CreateGraphqlApi'</a>,
--   <a>createGraphqlApi_userPoolConfig</a> - The Amazon Cognito user pool
--   configuration.
--   
--   <a>$sel:xrayEnabled:CreateGraphqlApi'</a>,
--   <a>createGraphqlApi_xrayEnabled</a> - A flag indicating whether to
--   enable X-Ray tracing for the <tt>GraphqlApi</tt>.
--   
--   <a>$sel:lambdaAuthorizerConfig:CreateGraphqlApi'</a>,
--   <a>createGraphqlApi_lambdaAuthorizerConfig</a> - Configuration for
--   Amazon Web Services Lambda function authorization.
--   
--   <a>$sel:tags:CreateGraphqlApi'</a>, <a>createGraphqlApi_tags</a> - A
--   <tt>TagMap</tt> object.
--   
--   <a>$sel:logConfig:CreateGraphqlApi'</a>,
--   <a>createGraphqlApi_logConfig</a> - The Amazon CloudWatch Logs
--   configuration.
--   
--   <a>$sel:additionalAuthenticationProviders:CreateGraphqlApi'</a>,
--   <a>createGraphqlApi_additionalAuthenticationProviders</a> - A list of
--   additional authentication providers for the <tt>GraphqlApi</tt> API.
--   
--   <a>$sel:name:CreateGraphqlApi'</a>, <a>createGraphqlApi_name</a> - A
--   user-supplied name for the <tt>GraphqlApi</tt>.
--   
--   <a>$sel:authenticationType:CreateGraphqlApi'</a>,
--   <a>createGraphqlApi_authenticationType</a> - The authentication type:
--   API key, Identity and Access Management, OIDC, Amazon Cognito user
--   pools, or Amazon Web Services Lambda.
newCreateGraphqlApi :: Text -> AuthenticationType -> CreateGraphqlApi

-- | <i>See:</i> <a>newCreateGraphqlApiResponse</a> smart constructor.
data CreateGraphqlApiResponse
CreateGraphqlApiResponse' :: Maybe GraphqlApi -> Int -> CreateGraphqlApiResponse

-- | Create a value of <a>CreateGraphqlApiResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:graphqlApi:CreateGraphqlApiResponse'</a>,
--   <a>createGraphqlApiResponse_graphqlApi</a> - The <tt>GraphqlApi</tt>.
--   
--   <a>$sel:httpStatus:CreateGraphqlApiResponse'</a>,
--   <a>createGraphqlApiResponse_httpStatus</a> - The response's http
--   status code.
newCreateGraphqlApiResponse :: Int -> CreateGraphqlApiResponse

-- | <i>See:</i> <a>newListTagsForResource</a> smart constructor.
data ListTagsForResource
ListTagsForResource' :: Text -> ListTagsForResource

-- | Create a value of <a>ListTagsForResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:ListTagsForResource'</a>,
--   <a>listTagsForResource_resourceArn</a> - The <tt>GraphqlApi</tt> ARN.
newListTagsForResource :: Text -> ListTagsForResource

-- | <i>See:</i> <a>newListTagsForResourceResponse</a> smart constructor.
data ListTagsForResourceResponse
ListTagsForResourceResponse' :: Maybe (HashMap Text Text) -> Int -> ListTagsForResourceResponse

-- | Create a value of <a>ListTagsForResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tags:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_tags</a> - A <tt>TagMap</tt> object.
--   
--   <a>$sel:httpStatus:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_httpStatus</a> - The response's http
--   status code.
newListTagsForResourceResponse :: Int -> ListTagsForResourceResponse

-- | <i>See:</i> <a>newCreateResolver</a> smart constructor.
data CreateResolver
CreateResolver' :: Maybe Text -> Maybe ResolverKind -> Maybe SyncConfig -> Maybe Text -> Maybe CachingConfig -> Maybe PipelineConfig -> Maybe Text -> Text -> Text -> Text -> CreateResolver

-- | Create a value of <a>CreateResolver</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:responseMappingTemplate:CreateResolver'</a>,
--   <a>createResolver_responseMappingTemplate</a> - The mapping template
--   to be used for responses from the data source.
--   
--   <a>$sel:kind:CreateResolver'</a>, <a>createResolver_kind</a> - The
--   resolver type.
--   
--   <ul>
--   <li><b>UNIT</b>: A UNIT resolver type. A UNIT resolver is the default
--   resolver type. A UNIT resolver enables you to execute a GraphQL query
--   against a single data source.</li>
--   <li><b>PIPELINE</b>: A PIPELINE resolver type. A PIPELINE resolver
--   enables you to execute a series of <tt>Function</tt> in a serial
--   manner. You can use a pipeline resolver to execute a GraphQL query
--   against multiple data sources.</li>
--   </ul>
--   
--   <a>$sel:syncConfig:CreateResolver'</a>,
--   <a>createResolver_syncConfig</a> - The <tt>SyncConfig</tt> for a
--   resolver attached to a versioned datasource.
--   
--   <a>$sel:dataSourceName:CreateResolver'</a>,
--   <a>createResolver_dataSourceName</a> - The name of the data source for
--   which the resolver is being created.
--   
--   <a>$sel:cachingConfig:CreateResolver'</a>,
--   <a>createResolver_cachingConfig</a> - The caching configuration for
--   the resolver.
--   
--   <a>$sel:pipelineConfig:CreateResolver'</a>,
--   <a>createResolver_pipelineConfig</a> - The <tt>PipelineConfig</tt>.
--   
--   <a>$sel:requestMappingTemplate:CreateResolver'</a>,
--   <a>createResolver_requestMappingTemplate</a> - The mapping template to
--   be used for requests.
--   
--   A resolver uses a request mapping template to convert a GraphQL
--   expression into a format that a data source can understand. Mapping
--   templates are written in Apache Velocity Template Language (VTL).
--   
--   VTL request mapping templates are optional when using a Lambda data
--   source. For all other data sources, VTL request and response mapping
--   templates are required.
--   
--   <a>$sel:apiId:CreateResolver'</a>, <a>createResolver_apiId</a> - The
--   ID for the GraphQL API for which the resolver is being created.
--   
--   <a>$sel:typeName:CreateResolver'</a>, <a>createResolver_typeName</a> -
--   The name of the <tt>Type</tt>.
--   
--   <a>$sel:fieldName:CreateResolver'</a>, <a>createResolver_fieldName</a>
--   - The name of the field to attach the resolver to.
newCreateResolver :: Text -> Text -> Text -> CreateResolver

-- | <i>See:</i> <a>newCreateResolverResponse</a> smart constructor.
data CreateResolverResponse
CreateResolverResponse' :: Maybe Resolver -> Int -> CreateResolverResponse

-- | Create a value of <a>CreateResolverResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resolver:CreateResolverResponse'</a>,
--   <a>createResolverResponse_resolver</a> - The <tt>Resolver</tt> object.
--   
--   <a>$sel:httpStatus:CreateResolverResponse'</a>,
--   <a>createResolverResponse_httpStatus</a> - The response's http status
--   code.
newCreateResolverResponse :: Int -> CreateResolverResponse
newtype ApiCacheStatus
ApiCacheStatus' :: Text -> ApiCacheStatus
[fromApiCacheStatus] :: ApiCacheStatus -> Text
pattern ApiCacheStatus_AVAILABLE :: ApiCacheStatus
pattern ApiCacheStatus_CREATING :: ApiCacheStatus
pattern ApiCacheStatus_DELETING :: ApiCacheStatus
pattern ApiCacheStatus_FAILED :: ApiCacheStatus
pattern ApiCacheStatus_MODIFYING :: ApiCacheStatus
newtype ApiCacheType
ApiCacheType' :: Text -> ApiCacheType
[fromApiCacheType] :: ApiCacheType -> Text
pattern ApiCacheType_LARGE :: ApiCacheType
pattern ApiCacheType_LARGE_12X :: ApiCacheType
pattern ApiCacheType_LARGE_2X :: ApiCacheType
pattern ApiCacheType_LARGE_4X :: ApiCacheType
pattern ApiCacheType_LARGE_8X :: ApiCacheType
pattern ApiCacheType_MEDIUM :: ApiCacheType
pattern ApiCacheType_R4_2XLARGE :: ApiCacheType
pattern ApiCacheType_R4_4XLARGE :: ApiCacheType
pattern ApiCacheType_R4_8XLARGE :: ApiCacheType
pattern ApiCacheType_R4_LARGE :: ApiCacheType
pattern ApiCacheType_R4_XLARGE :: ApiCacheType
pattern ApiCacheType_SMALL :: ApiCacheType
pattern ApiCacheType_T2_MEDIUM :: ApiCacheType
pattern ApiCacheType_T2_SMALL :: ApiCacheType
pattern ApiCacheType_XLARGE :: ApiCacheType
newtype ApiCachingBehavior
ApiCachingBehavior' :: Text -> ApiCachingBehavior
[fromApiCachingBehavior] :: ApiCachingBehavior -> Text
pattern ApiCachingBehavior_FULL_REQUEST_CACHING :: ApiCachingBehavior
pattern ApiCachingBehavior_PER_RESOLVER_CACHING :: ApiCachingBehavior
newtype AuthenticationType
AuthenticationType' :: Text -> AuthenticationType
[fromAuthenticationType] :: AuthenticationType -> Text
pattern AuthenticationType_AMAZON_COGNITO_USER_POOLS :: AuthenticationType
pattern AuthenticationType_API_KEY :: AuthenticationType
pattern AuthenticationType_AWS_IAM :: AuthenticationType
pattern AuthenticationType_AWS_LAMBDA :: AuthenticationType
pattern AuthenticationType_OPENID_CONNECT :: AuthenticationType
newtype AuthorizationType
AuthorizationType' :: Text -> AuthorizationType
[fromAuthorizationType] :: AuthorizationType -> Text
pattern AuthorizationType_AWS_IAM :: AuthorizationType
newtype ConflictDetectionType
ConflictDetectionType' :: Text -> ConflictDetectionType
[fromConflictDetectionType] :: ConflictDetectionType -> Text
pattern ConflictDetectionType_NONE :: ConflictDetectionType
pattern ConflictDetectionType_VERSION :: ConflictDetectionType
newtype ConflictHandlerType
ConflictHandlerType' :: Text -> ConflictHandlerType
[fromConflictHandlerType] :: ConflictHandlerType -> Text
pattern ConflictHandlerType_AUTOMERGE :: ConflictHandlerType
pattern ConflictHandlerType_LAMBDA :: ConflictHandlerType
pattern ConflictHandlerType_NONE :: ConflictHandlerType
pattern ConflictHandlerType_OPTIMISTIC_CONCURRENCY :: ConflictHandlerType
newtype DataSourceType
DataSourceType' :: Text -> DataSourceType
[fromDataSourceType] :: DataSourceType -> Text
pattern DataSourceType_AMAZON_DYNAMODB :: DataSourceType
pattern DataSourceType_AMAZON_ELASTICSEARCH :: DataSourceType
pattern DataSourceType_AMAZON_OPENSEARCH_SERVICE :: DataSourceType
pattern DataSourceType_AWS_LAMBDA :: DataSourceType
pattern DataSourceType_HTTP :: DataSourceType
pattern DataSourceType_NONE :: DataSourceType
pattern DataSourceType_RELATIONAL_DATABASE :: DataSourceType
newtype DefaultAction
DefaultAction' :: Text -> DefaultAction
[fromDefaultAction] :: DefaultAction -> Text
pattern DefaultAction_ALLOW :: DefaultAction
pattern DefaultAction_DENY :: DefaultAction
newtype FieldLogLevel
FieldLogLevel' :: Text -> FieldLogLevel
[fromFieldLogLevel] :: FieldLogLevel -> Text
pattern FieldLogLevel_ALL :: FieldLogLevel
pattern FieldLogLevel_ERROR :: FieldLogLevel
pattern FieldLogLevel_NONE :: FieldLogLevel
newtype OutputType
OutputType' :: Text -> OutputType
[fromOutputType] :: OutputType -> Text
pattern OutputType_JSON :: OutputType
pattern OutputType_SDL :: OutputType
newtype RelationalDatabaseSourceType
RelationalDatabaseSourceType' :: Text -> RelationalDatabaseSourceType
[fromRelationalDatabaseSourceType] :: RelationalDatabaseSourceType -> Text
pattern RelationalDatabaseSourceType_RDS_HTTP_ENDPOINT :: RelationalDatabaseSourceType
newtype ResolverKind
ResolverKind' :: Text -> ResolverKind
[fromResolverKind] :: ResolverKind -> Text
pattern ResolverKind_PIPELINE :: ResolverKind
pattern ResolverKind_UNIT :: ResolverKind
newtype SchemaStatus
SchemaStatus' :: Text -> SchemaStatus
[fromSchemaStatus] :: SchemaStatus -> Text
pattern SchemaStatus_ACTIVE :: SchemaStatus
pattern SchemaStatus_DELETING :: SchemaStatus
pattern SchemaStatus_FAILED :: SchemaStatus
pattern SchemaStatus_NOT_APPLICABLE :: SchemaStatus
pattern SchemaStatus_PROCESSING :: SchemaStatus
pattern SchemaStatus_SUCCESS :: SchemaStatus
newtype TypeDefinitionFormat
TypeDefinitionFormat' :: Text -> TypeDefinitionFormat
[fromTypeDefinitionFormat] :: TypeDefinitionFormat -> Text
pattern TypeDefinitionFormat_JSON :: TypeDefinitionFormat
pattern TypeDefinitionFormat_SDL :: TypeDefinitionFormat

-- | Describes an additional authentication provider.
--   
--   <i>See:</i> <a>newAdditionalAuthenticationProvider</a> smart
--   constructor.
data AdditionalAuthenticationProvider
AdditionalAuthenticationProvider' :: Maybe OpenIDConnectConfig -> Maybe CognitoUserPoolConfig -> Maybe LambdaAuthorizerConfig -> Maybe AuthenticationType -> AdditionalAuthenticationProvider

-- | Create a value of <a>AdditionalAuthenticationProvider</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:openIDConnectConfig:AdditionalAuthenticationProvider'</a>,
--   <a>additionalAuthenticationProvider_openIDConnectConfig</a> - The
--   OpenID Connect configuration.
--   
--   <a>$sel:userPoolConfig:AdditionalAuthenticationProvider'</a>,
--   <a>additionalAuthenticationProvider_userPoolConfig</a> - The Amazon
--   Cognito user pool configuration.
--   
--   <a>$sel:lambdaAuthorizerConfig:AdditionalAuthenticationProvider'</a>,
--   <a>additionalAuthenticationProvider_lambdaAuthorizerConfig</a> -
--   Configuration for Amazon Web Services Lambda function authorization.
--   
--   <a>$sel:authenticationType:AdditionalAuthenticationProvider'</a>,
--   <a>additionalAuthenticationProvider_authenticationType</a> - The
--   authentication type: API key, Identity and Access Management, OIDC,
--   Amazon Cognito user pools, or Amazon Web Services Lambda.
newAdditionalAuthenticationProvider :: AdditionalAuthenticationProvider

-- | The <tt>ApiCache</tt> object.
--   
--   <i>See:</i> <a>newApiCache</a> smart constructor.
data ApiCache
ApiCache' :: Maybe ApiCacheStatus -> Maybe Bool -> Maybe Integer -> Maybe ApiCacheType -> Maybe Bool -> Maybe ApiCachingBehavior -> ApiCache

-- | Create a value of <a>ApiCache</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:ApiCache'</a>, <a>apiCache_status</a> - The cache
--   instance status.
--   
--   <ul>
--   <li><b>AVAILABLE</b>: The instance is available for use.</li>
--   <li><b>CREATING</b>: The instance is currently creating.</li>
--   <li><b>DELETING</b>: The instance is currently deleting.</li>
--   <li><b>MODIFYING</b>: The instance is currently modifying.</li>
--   <li><b>FAILED</b>: The instance has failed creation.</li>
--   </ul>
--   
--   <a>$sel:atRestEncryptionEnabled:ApiCache'</a>,
--   <a>apiCache_atRestEncryptionEnabled</a> - At rest encryption flag for
--   cache. This setting cannot be updated after creation.
--   
--   <a>$sel:ttl:ApiCache'</a>, <a>apiCache_ttl</a> - TTL in seconds for
--   cache entries.
--   
--   Valid values are between 1 and 3600 seconds.
--   
--   <a>$sel:type':ApiCache'</a>, <a>apiCache_type</a> - The cache instance
--   type. Valid values are
--   
--   <ul>
--   <li><pre>SMALL</pre></li>
--   <li><pre>MEDIUM</pre></li>
--   <li><pre>LARGE</pre></li>
--   <li><pre>XLARGE</pre></li>
--   <li><pre>LARGE_2X</pre></li>
--   <li><pre>LARGE_4X</pre></li>
--   <li><tt>LARGE_8X</tt> (not available in all regions)</li>
--   <li><pre>LARGE_12X</pre></li>
--   </ul>
--   
--   Historically, instance types were identified by an EC2-style value. As
--   of July 2020, this is deprecated, and the generic identifiers above
--   should be used.
--   
--   The following legacy instance types are available, but their use is
--   discouraged:
--   
--   <ul>
--   <li><b>T2_SMALL</b>: A t2.small instance type.</li>
--   <li><b>T2_MEDIUM</b>: A t2.medium instance type.</li>
--   <li><b>R4_LARGE</b>: A r4.large instance type.</li>
--   <li><b>R4_XLARGE</b>: A r4.xlarge instance type.</li>
--   <li><b>R4_2XLARGE</b>: A r4.2xlarge instance type.</li>
--   <li><b>R4_4XLARGE</b>: A r4.4xlarge instance type.</li>
--   <li><b>R4_8XLARGE</b>: A r4.8xlarge instance type.</li>
--   </ul>
--   
--   <a>$sel:transitEncryptionEnabled:ApiCache'</a>,
--   <a>apiCache_transitEncryptionEnabled</a> - Transit encryption flag
--   when connecting to cache. This setting cannot be updated after
--   creation.
--   
--   <a>$sel:apiCachingBehavior:ApiCache'</a>,
--   <a>apiCache_apiCachingBehavior</a> - Caching behavior.
--   
--   <ul>
--   <li><b>FULL_REQUEST_CACHING</b>: All requests are fully cached.</li>
--   <li><b>PER_RESOLVER_CACHING</b>: Individual resolvers that you specify
--   are cached.</li>
--   </ul>
newApiCache :: ApiCache

-- | Describes an API key.
--   
--   Customers invoke AppSync GraphQL API operations with API keys as an
--   identity mechanism. There are two key versions:
--   
--   <b>da1</b>: This version was introduced at launch in November 2017.
--   These keys always expire after 7 days. Key expiration is managed by
--   Amazon DynamoDB TTL. The keys ceased to be valid after February 21,
--   2018 and should not be used after that date.
--   
--   <ul>
--   <li><tt>ListApiKeys</tt> returns the expiration time in
--   milliseconds.</li>
--   <li><tt>CreateApiKey</tt> returns the expiration time in
--   milliseconds.</li>
--   <li><tt>UpdateApiKey</tt> is not available for this key version.</li>
--   <li><tt>DeleteApiKey</tt> deletes the item from the table.</li>
--   <li>Expiration is stored in Amazon DynamoDB as milliseconds. This
--   results in a bug where keys are not automatically deleted because
--   DynamoDB expects the TTL to be stored in seconds. As a one-time
--   action, we will delete these keys from the table after February 21,
--   2018.</li>
--   </ul>
--   
--   <b>da2</b>: This version was introduced in February 2018 when AppSync
--   added support to extend key expiration.
--   
--   <ul>
--   <li><tt>ListApiKeys</tt> returns the expiration time and deletion time
--   in seconds.</li>
--   <li><tt>CreateApiKey</tt> returns the expiration time and deletion
--   time in seconds and accepts a user-provided expiration time in
--   seconds.</li>
--   <li><tt>UpdateApiKey</tt> returns the expiration time and and deletion
--   time in seconds and accepts a user-provided expiration time in
--   seconds. Expired API keys are kept for 60 days after the expiration
--   time. Key expiration time can be updated while the key is not
--   deleted.</li>
--   <li><tt>DeleteApiKey</tt> deletes the item from the table.</li>
--   <li>Expiration is stored in Amazon DynamoDB as seconds. After the
--   expiration time, using the key to authenticate will fail. But the key
--   can be reinstated before deletion.</li>
--   <li>Deletion is stored in Amazon DynamoDB as seconds. The key will be
--   deleted after deletion time.</li>
--   </ul>
--   
--   <i>See:</i> <a>newApiKey</a> smart constructor.
data ApiKey
ApiKey' :: Maybe Text -> Maybe Integer -> Maybe Text -> Maybe Integer -> ApiKey

-- | Create a value of <a>ApiKey</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:id:ApiKey'</a>, <a>apiKey_id</a> - The API key ID.
--   
--   <a>$sel:deletes:ApiKey'</a>, <a>apiKey_deletes</a> - The time after
--   which the API key is deleted. The date is represented as seconds since
--   the epoch, rounded down to the nearest hour.
--   
--   <a>$sel:description:ApiKey'</a>, <a>apiKey_description</a> - A
--   description of the purpose of the API key.
--   
--   <a>$sel:expires:ApiKey'</a>, <a>apiKey_expires</a> - The time after
--   which the API key expires. The date is represented as seconds since
--   the epoch, rounded down to the nearest hour.
newApiKey :: ApiKey

-- | The authorization config in case the HTTP endpoint requires
--   authorization.
--   
--   <i>See:</i> <a>newAuthorizationConfig</a> smart constructor.
data AuthorizationConfig
AuthorizationConfig' :: Maybe AwsIamConfig -> AuthorizationType -> AuthorizationConfig

-- | Create a value of <a>AuthorizationConfig</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:awsIamConfig:AuthorizationConfig'</a>,
--   <a>authorizationConfig_awsIamConfig</a> - The Identity and Access
--   Management settings.
--   
--   <a>$sel:authorizationType:AuthorizationConfig'</a>,
--   <a>authorizationConfig_authorizationType</a> - The authorization type
--   required by the HTTP endpoint.
--   
--   <ul>
--   <li><b>AWS_IAM</b>: The authorization type is Sigv4.</li>
--   </ul>
newAuthorizationConfig :: AuthorizationType -> AuthorizationConfig

-- | The Identity and Access Management configuration.
--   
--   <i>See:</i> <a>newAwsIamConfig</a> smart constructor.
data AwsIamConfig
AwsIamConfig' :: Maybe Text -> Maybe Text -> AwsIamConfig

-- | Create a value of <a>AwsIamConfig</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:signingServiceName:AwsIamConfig'</a>,
--   <a>awsIamConfig_signingServiceName</a> - The signing service name for
--   Identity and Access Management authorization.
--   
--   <a>$sel:signingRegion:AwsIamConfig'</a>,
--   <a>awsIamConfig_signingRegion</a> - The signing region for Identity
--   and Access Management authorization.
newAwsIamConfig :: AwsIamConfig

-- | The caching configuration for a resolver that has caching enabled.
--   
--   <i>See:</i> <a>newCachingConfig</a> smart constructor.
data CachingConfig
CachingConfig' :: Maybe Integer -> Maybe [Text] -> CachingConfig

-- | Create a value of <a>CachingConfig</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:ttl:CachingConfig'</a>, <a>cachingConfig_ttl</a> - The TTL in
--   seconds for a resolver that has caching enabled.
--   
--   Valid values are between 1 and 3600 seconds.
--   
--   <a>$sel:cachingKeys:CachingConfig'</a>,
--   <a>cachingConfig_cachingKeys</a> - The caching keys for a resolver
--   that has caching enabled.
--   
--   Valid values are entries from the <tt>$context.arguments</tt>,
--   <tt>$context.source</tt>, and <tt>$context.identity</tt> maps.
newCachingConfig :: CachingConfig

-- | Describes an Amazon Cognito user pool configuration.
--   
--   <i>See:</i> <a>newCognitoUserPoolConfig</a> smart constructor.
data CognitoUserPoolConfig
CognitoUserPoolConfig' :: Maybe Text -> Text -> Text -> CognitoUserPoolConfig

-- | Create a value of <a>CognitoUserPoolConfig</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:appIdClientRegex:CognitoUserPoolConfig'</a>,
--   <a>cognitoUserPoolConfig_appIdClientRegex</a> - A regular expression
--   for validating the incoming Amazon Cognito user pool app client ID.
--   
--   <a>$sel:userPoolId:CognitoUserPoolConfig'</a>,
--   <a>cognitoUserPoolConfig_userPoolId</a> - The user pool ID.
--   
--   <a>$sel:awsRegion:CognitoUserPoolConfig'</a>,
--   <a>cognitoUserPoolConfig_awsRegion</a> - The Amazon Web Services
--   Region in which the user pool was created.
newCognitoUserPoolConfig :: Text -> Text -> CognitoUserPoolConfig

-- | Describes a data source.
--   
--   <i>See:</i> <a>newDataSource</a> smart constructor.
data DataSource
DataSource' :: Maybe Text -> Maybe RelationalDatabaseDataSourceConfig -> Maybe ElasticsearchDataSourceConfig -> Maybe LambdaDataSourceConfig -> Maybe Text -> Maybe DynamodbDataSourceConfig -> Maybe Text -> Maybe Text -> Maybe DataSourceType -> Maybe OpenSearchServiceDataSourceConfig -> Maybe HttpDataSourceConfig -> DataSource

-- | Create a value of <a>DataSource</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:serviceRoleArn:DataSource'</a>,
--   <a>dataSource_serviceRoleArn</a> - The Identity and Access Management
--   service role ARN for the data source. The system assumes this role
--   when accessing the data source.
--   
--   <a>$sel:relationalDatabaseConfig:DataSource'</a>,
--   <a>dataSource_relationalDatabaseConfig</a> - Relational database
--   settings.
--   
--   <a>$sel:elasticsearchConfig:DataSource'</a>,
--   <a>dataSource_elasticsearchConfig</a> - Amazon OpenSearch Service
--   settings.
--   
--   <a>$sel:lambdaConfig:DataSource'</a>, <a>dataSource_lambdaConfig</a> -
--   Amazon Web Services Lambda settings.
--   
--   <a>$sel:name:DataSource'</a>, <a>dataSource_name</a> - The name of the
--   data source.
--   
--   <a>$sel:dynamodbConfig:DataSource'</a>,
--   <a>dataSource_dynamodbConfig</a> - Amazon DynamoDB settings.
--   
--   <a>$sel:description:DataSource'</a>, <a>dataSource_description</a> -
--   The description of the data source.
--   
--   <a>$sel:dataSourceArn:DataSource'</a>, <a>dataSource_dataSourceArn</a>
--   - The data source ARN.
--   
--   <a>$sel:type':DataSource'</a>, <a>dataSource_type</a> - The type of
--   the data source.
--   
--   <ul>
--   <li><b>AWS_LAMBDA</b>: The data source is an Amazon Web Services
--   Lambda function.</li>
--   <li><b>AMAZON_DYNAMODB</b>: The data source is an Amazon DynamoDB
--   table.</li>
--   <li><b>AMAZON_ELASTICSEARCH</b>: The data source is an Amazon
--   OpenSearch Service domain.</li>
--   <li><b>AMAZON_OPENSEARCH_SERVICE</b>: The data source is an Amazon
--   OpenSearch Service domain.</li>
--   <li><b>NONE</b>: There is no data source. This type is used when you
--   wish to invoke a GraphQL operation without connecting to a data
--   source, such as performing data transformation with resolvers or
--   triggering a subscription to be invoked from a mutation.</li>
--   <li><b>HTTP</b>: The data source is an HTTP endpoint.</li>
--   <li><b>RELATIONAL_DATABASE</b>: The data source is a relational
--   database.</li>
--   </ul>
--   
--   <a>$sel:openSearchServiceConfig:DataSource'</a>,
--   <a>dataSource_openSearchServiceConfig</a> - Amazon OpenSearch Service
--   settings.
--   
--   <a>$sel:httpConfig:DataSource'</a>, <a>dataSource_httpConfig</a> -
--   HTTP endpoint settings.
newDataSource :: DataSource

-- | Describes a Delta Sync configuration.
--   
--   <i>See:</i> <a>newDeltaSyncConfig</a> smart constructor.
data DeltaSyncConfig
DeltaSyncConfig' :: Maybe Integer -> Maybe Text -> Maybe Integer -> DeltaSyncConfig

-- | Create a value of <a>DeltaSyncConfig</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:baseTableTTL:DeltaSyncConfig'</a>,
--   <a>deltaSyncConfig_baseTableTTL</a> - The number of minutes an Item is
--   stored in the datasource.
--   
--   <a>$sel:deltaSyncTableName:DeltaSyncConfig'</a>,
--   <a>deltaSyncConfig_deltaSyncTableName</a> - The Delta Sync table name.
--   
--   <a>$sel:deltaSyncTableTTL:DeltaSyncConfig'</a>,
--   <a>deltaSyncConfig_deltaSyncTableTTL</a> - The number of minutes a
--   Delta Sync log entry is stored in the Delta Sync table.
newDeltaSyncConfig :: DeltaSyncConfig

-- | Describes an Amazon DynamoDB data source configuration.
--   
--   <i>See:</i> <a>newDynamodbDataSourceConfig</a> smart constructor.
data DynamodbDataSourceConfig
DynamodbDataSourceConfig' :: Maybe Bool -> Maybe Bool -> Maybe DeltaSyncConfig -> Text -> Text -> DynamodbDataSourceConfig

-- | Create a value of <a>DynamodbDataSourceConfig</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:useCallerCredentials:DynamodbDataSourceConfig'</a>,
--   <a>dynamodbDataSourceConfig_useCallerCredentials</a> - Set to TRUE to
--   use Amazon Cognito credentials with this data source.
--   
--   <a>$sel:versioned:DynamodbDataSourceConfig'</a>,
--   <a>dynamodbDataSourceConfig_versioned</a> - Set to TRUE to use
--   Conflict Detection and Resolution with this data source.
--   
--   <a>$sel:deltaSyncConfig:DynamodbDataSourceConfig'</a>,
--   <a>dynamodbDataSourceConfig_deltaSyncConfig</a> - The
--   <tt>DeltaSyncConfig</tt> for a versioned datasource.
--   
--   <a>$sel:tableName:DynamodbDataSourceConfig'</a>,
--   <a>dynamodbDataSourceConfig_tableName</a> - The table name.
--   
--   <a>$sel:awsRegion:DynamodbDataSourceConfig'</a>,
--   <a>dynamodbDataSourceConfig_awsRegion</a> - The Amazon Web Services
--   Region.
newDynamodbDataSourceConfig :: Text -> Text -> DynamodbDataSourceConfig

-- | Describes an OpenSearch data source configuration.
--   
--   As of September 2021, Amazon Elasticsearch service is Amazon
--   OpenSearch Service. This configuration is deprecated. For new data
--   sources, use OpenSearchServiceDataSourceConfig to specify an
--   OpenSearch data source.
--   
--   <i>See:</i> <a>newElasticsearchDataSourceConfig</a> smart constructor.
data ElasticsearchDataSourceConfig
ElasticsearchDataSourceConfig' :: Text -> Text -> ElasticsearchDataSourceConfig

-- | Create a value of <a>ElasticsearchDataSourceConfig</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:endpoint:ElasticsearchDataSourceConfig'</a>,
--   <a>elasticsearchDataSourceConfig_endpoint</a> - The endpoint.
--   
--   <a>$sel:awsRegion:ElasticsearchDataSourceConfig'</a>,
--   <a>elasticsearchDataSourceConfig_awsRegion</a> - The Amazon Web
--   Services Region.
newElasticsearchDataSourceConfig :: Text -> Text -> ElasticsearchDataSourceConfig

-- | A function is a reusable entity. Multiple functions can be used to
--   compose the resolver logic.
--   
--   <i>See:</i> <a>newFunctionConfiguration</a> smart constructor.
data FunctionConfiguration
FunctionConfiguration' :: Maybe Text -> Maybe Text -> Maybe SyncConfig -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> FunctionConfiguration

-- | Create a value of <a>FunctionConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:responseMappingTemplate:FunctionConfiguration'</a>,
--   <a>functionConfiguration_responseMappingTemplate</a> - The
--   <tt>Function</tt> response mapping template.
--   
--   <a>$sel:functionVersion:FunctionConfiguration'</a>,
--   <a>functionConfiguration_functionVersion</a> - The version of the
--   request mapping template. Currently only the 2018-05-29 version of the
--   template is supported.
--   
--   <a>$sel:syncConfig:FunctionConfiguration'</a>,
--   <a>functionConfiguration_syncConfig</a> - Undocumented member.
--   
--   <a>$sel:dataSourceName:FunctionConfiguration'</a>,
--   <a>functionConfiguration_dataSourceName</a> - The name of the
--   <tt>DataSource</tt>.
--   
--   <a>$sel:functionArn:FunctionConfiguration'</a>,
--   <a>functionConfiguration_functionArn</a> - The ARN of the
--   <tt>Function</tt> object.
--   
--   <a>$sel:name:FunctionConfiguration'</a>,
--   <a>functionConfiguration_name</a> - The name of the <tt>Function</tt>
--   object.
--   
--   <a>$sel:functionId:FunctionConfiguration'</a>,
--   <a>functionConfiguration_functionId</a> - A unique ID representing the
--   <tt>Function</tt> object.
--   
--   <a>$sel:description:FunctionConfiguration'</a>,
--   <a>functionConfiguration_description</a> - The <tt>Function</tt>
--   description.
--   
--   <a>$sel:requestMappingTemplate:FunctionConfiguration'</a>,
--   <a>functionConfiguration_requestMappingTemplate</a> - The
--   <tt>Function</tt> request mapping template. Functions support only the
--   2018-05-29 version of the request mapping template.
newFunctionConfiguration :: FunctionConfiguration

-- | Describes a GraphQL API.
--   
--   <i>See:</i> <a>newGraphqlApi</a> smart constructor.
data GraphqlApi
GraphqlApi' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe OpenIDConnectConfig -> Maybe UserPoolConfig -> Maybe Bool -> Maybe Text -> Maybe LambdaAuthorizerConfig -> Maybe (HashMap Text Text) -> Maybe LogConfig -> Maybe [AdditionalAuthenticationProvider] -> Maybe AuthenticationType -> Maybe (HashMap Text Text) -> GraphqlApi

-- | Create a value of <a>GraphqlApi</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:wafWebAclArn:GraphqlApi'</a>, <a>graphqlApi_wafWebAclArn</a> -
--   The ARN of the WAF ACL associated with this <tt>GraphqlApi</tt>, if
--   one exists.
--   
--   <a>$sel:apiId:GraphqlApi'</a>, <a>graphqlApi_apiId</a> - The API ID.
--   
--   <a>$sel:arn:GraphqlApi'</a>, <a>graphqlApi_arn</a> - The ARN.
--   
--   <a>$sel:openIDConnectConfig:GraphqlApi'</a>,
--   <a>graphqlApi_openIDConnectConfig</a> - The OpenID Connect
--   configuration.
--   
--   <a>$sel:userPoolConfig:GraphqlApi'</a>,
--   <a>graphqlApi_userPoolConfig</a> - The Amazon Cognito user pool
--   configuration.
--   
--   <a>$sel:xrayEnabled:GraphqlApi'</a>, <a>graphqlApi_xrayEnabled</a> - A
--   flag representing whether X-Ray tracing is enabled for this
--   <tt>GraphqlApi</tt>.
--   
--   <a>$sel:name:GraphqlApi'</a>, <a>graphqlApi_name</a> - The API name.
--   
--   <a>$sel:lambdaAuthorizerConfig:GraphqlApi'</a>,
--   <a>graphqlApi_lambdaAuthorizerConfig</a> - Configuration for Amazon
--   Web Services Lambda function authorization.
--   
--   <a>$sel:tags:GraphqlApi'</a>, <a>graphqlApi_tags</a> - The tags.
--   
--   <a>$sel:logConfig:GraphqlApi'</a>, <a>graphqlApi_logConfig</a> - The
--   Amazon CloudWatch Logs configuration.
--   
--   <a>$sel:additionalAuthenticationProviders:GraphqlApi'</a>,
--   <a>graphqlApi_additionalAuthenticationProviders</a> - A list of
--   additional authentication providers for the <tt>GraphqlApi</tt> API.
--   
--   <a>$sel:authenticationType:GraphqlApi'</a>,
--   <a>graphqlApi_authenticationType</a> - The authentication type.
--   
--   <a>$sel:uris:GraphqlApi'</a>, <a>graphqlApi_uris</a> - The URIs.
newGraphqlApi :: GraphqlApi

-- | Describes an HTTP data source configuration.
--   
--   <i>See:</i> <a>newHttpDataSourceConfig</a> smart constructor.
data HttpDataSourceConfig
HttpDataSourceConfig' :: Maybe AuthorizationConfig -> Maybe Text -> HttpDataSourceConfig

-- | Create a value of <a>HttpDataSourceConfig</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:authorizationConfig:HttpDataSourceConfig'</a>,
--   <a>httpDataSourceConfig_authorizationConfig</a> - The authorization
--   config in case the HTTP endpoint requires authorization.
--   
--   <a>$sel:endpoint:HttpDataSourceConfig'</a>,
--   <a>httpDataSourceConfig_endpoint</a> - The HTTP URL endpoint. You can
--   either specify the domain name or IP, and port combination, and the
--   URL scheme must be HTTP or HTTPS. If the port is not specified,
--   AppSync uses the default port 80 for the HTTP endpoint and port 443
--   for HTTPS endpoints.
newHttpDataSourceConfig :: HttpDataSourceConfig

-- | A <tt>LambdaAuthorizerConfig</tt> holds configuration on how to
--   authorize AppSync API access when using the <tt>AWS_LAMBDA</tt>
--   authorizer mode. Be aware that an AppSync API may have only one Lambda
--   authorizer configured at a time.
--   
--   <i>See:</i> <a>newLambdaAuthorizerConfig</a> smart constructor.
data LambdaAuthorizerConfig
LambdaAuthorizerConfig' :: Maybe Text -> Maybe Natural -> Text -> LambdaAuthorizerConfig

-- | Create a value of <a>LambdaAuthorizerConfig</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:identityValidationExpression:LambdaAuthorizerConfig'</a>,
--   <a>lambdaAuthorizerConfig_identityValidationExpression</a> - A regular
--   expression for validation of tokens before the Lambda function is
--   called.
--   
--   <a>$sel:authorizerResultTtlInSeconds:LambdaAuthorizerConfig'</a>,
--   <a>lambdaAuthorizerConfig_authorizerResultTtlInSeconds</a> - The
--   number of seconds a response should be cached for. The default is 5
--   minutes (300 seconds). The Lambda function can override this by
--   returning a <tt>ttlOverride</tt> key in its response. A value of 0
--   disables caching of responses.
--   
--   <a>$sel:authorizerUri:LambdaAuthorizerConfig'</a>,
--   <a>lambdaAuthorizerConfig_authorizerUri</a> - The ARN of the Lambda
--   function to be called for authorization. This may be a standard Lambda
--   ARN, a version ARN (<tt>.../v3</tt>) or alias ARN.
--   
--   <i>Note</i>: This Lambda function must have the following
--   resource-based policy assigned to it. When configuring Lambda
--   authorizers in the Console, this is done for you. To do so with the
--   Amazon Web Services CLI, run the following:
--   
--   <pre>
--   aws lambda add-permission --function-name "arn:aws:lambda:us-east-2:111122223333:function:my-function" --statement-id "appsync" --principal appsync.amazonaws.com --action lambda:InvokeFunction
--   </pre>
newLambdaAuthorizerConfig :: Text -> LambdaAuthorizerConfig

-- | The <tt>LambdaConflictHandlerConfig</tt> object when configuring
--   LAMBDA as the Conflict Handler.
--   
--   <i>See:</i> <a>newLambdaConflictHandlerConfig</a> smart constructor.
data LambdaConflictHandlerConfig
LambdaConflictHandlerConfig' :: Maybe Text -> LambdaConflictHandlerConfig

-- | Create a value of <a>LambdaConflictHandlerConfig</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:lambdaConflictHandlerArn:LambdaConflictHandlerConfig'</a>,
--   <a>lambdaConflictHandlerConfig_lambdaConflictHandlerArn</a> - The Arn
--   for the Lambda function to use as the Conflict Handler.
newLambdaConflictHandlerConfig :: LambdaConflictHandlerConfig

-- | Describes an Amazon Web Services Lambda data source configuration.
--   
--   <i>See:</i> <a>newLambdaDataSourceConfig</a> smart constructor.
data LambdaDataSourceConfig
LambdaDataSourceConfig' :: Text -> LambdaDataSourceConfig

-- | Create a value of <a>LambdaDataSourceConfig</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:lambdaFunctionArn:LambdaDataSourceConfig'</a>,
--   <a>lambdaDataSourceConfig_lambdaFunctionArn</a> - The ARN for the
--   Lambda function.
newLambdaDataSourceConfig :: Text -> LambdaDataSourceConfig

-- | The CloudWatch Logs configuration.
--   
--   <i>See:</i> <a>newLogConfig</a> smart constructor.
data LogConfig
LogConfig' :: Maybe Bool -> FieldLogLevel -> Text -> LogConfig

-- | Create a value of <a>LogConfig</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:excludeVerboseContent:LogConfig'</a>,
--   <a>logConfig_excludeVerboseContent</a> - Set to TRUE to exclude
--   sections that contain information such as headers, context, and
--   evaluated mapping templates, regardless of logging level.
--   
--   <a>$sel:fieldLogLevel:LogConfig'</a>, <a>logConfig_fieldLogLevel</a> -
--   The field logging level. Values can be NONE, ERROR, or ALL.
--   
--   <ul>
--   <li><b>NONE</b>: No field-level logs are captured.</li>
--   <li><b>ERROR</b>: Logs the following information only for the fields
--   that are in error:<ul><li>The error section in the server
--   response.</li><li>Field-level errors.</li><li>The generated
--   request/response functions that got resolved for error
--   fields.</li></ul></li>
--   <li><b>ALL</b>: The following information is logged for all fields in
--   the query:<ul><li>Field-level tracing information.</li><li>The
--   generated request/response functions that got resolved for each
--   field.</li></ul></li>
--   </ul>
--   
--   <a>$sel:cloudWatchLogsRoleArn:LogConfig'</a>,
--   <a>logConfig_cloudWatchLogsRoleArn</a> - The service role that AppSync
--   will assume to publish to Amazon CloudWatch logs in your account.
newLogConfig :: FieldLogLevel -> Text -> LogConfig

-- | Describes an OpenID Connect configuration.
--   
--   <i>See:</i> <a>newOpenIDConnectConfig</a> smart constructor.
data OpenIDConnectConfig
OpenIDConnectConfig' :: Maybe Text -> Maybe Integer -> Maybe Integer -> Text -> OpenIDConnectConfig

-- | Create a value of <a>OpenIDConnectConfig</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:clientId:OpenIDConnectConfig'</a>,
--   <a>openIDConnectConfig_clientId</a> - The client identifier of the
--   Relying party at the OpenID identity provider. This identifier is
--   typically obtained when the Relying party is registered with the
--   OpenID identity provider. You can specify a regular expression so the
--   AppSync can validate against multiple client identifiers at a time.
--   
--   <a>$sel:authTTL:OpenIDConnectConfig'</a>,
--   <a>openIDConnectConfig_authTTL</a> - The number of milliseconds a
--   token is valid after being authenticated.
--   
--   <a>$sel:iatTTL:OpenIDConnectConfig'</a>,
--   <a>openIDConnectConfig_iatTTL</a> - The number of milliseconds a token
--   is valid after being issued to a user.
--   
--   <a>$sel:issuer:OpenIDConnectConfig'</a>,
--   <a>openIDConnectConfig_issuer</a> - The issuer for the OpenID Connect
--   configuration. The issuer returned by discovery must exactly match the
--   value of <tt>iss</tt> in the ID token.
newOpenIDConnectConfig :: Text -> OpenIDConnectConfig

-- | Describes an OpenSearch data source configuration.
--   
--   <i>See:</i> <a>newOpenSearchServiceDataSourceConfig</a> smart
--   constructor.
data OpenSearchServiceDataSourceConfig
OpenSearchServiceDataSourceConfig' :: Text -> Text -> OpenSearchServiceDataSourceConfig

-- | Create a value of <a>OpenSearchServiceDataSourceConfig</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:endpoint:OpenSearchServiceDataSourceConfig'</a>,
--   <a>openSearchServiceDataSourceConfig_endpoint</a> - The endpoint.
--   
--   <a>$sel:awsRegion:OpenSearchServiceDataSourceConfig'</a>,
--   <a>openSearchServiceDataSourceConfig_awsRegion</a> - The Amazon Web
--   Services Region.
newOpenSearchServiceDataSourceConfig :: Text -> Text -> OpenSearchServiceDataSourceConfig

-- | The pipeline configuration for a resolver of kind <tt>PIPELINE</tt>.
--   
--   <i>See:</i> <a>newPipelineConfig</a> smart constructor.
data PipelineConfig
PipelineConfig' :: Maybe [Text] -> PipelineConfig

-- | Create a value of <a>PipelineConfig</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:functions:PipelineConfig'</a>, <a>pipelineConfig_functions</a>
--   - A list of <tt>Function</tt> objects.
newPipelineConfig :: PipelineConfig

-- | The Amazon RDS HTTP endpoint configuration.
--   
--   <i>See:</i> <a>newRdsHttpEndpointConfig</a> smart constructor.
data RdsHttpEndpointConfig
RdsHttpEndpointConfig' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> RdsHttpEndpointConfig

-- | Create a value of <a>RdsHttpEndpointConfig</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:schema:RdsHttpEndpointConfig'</a>,
--   <a>rdsHttpEndpointConfig_schema</a> - Logical schema name.
--   
--   <a>$sel:awsSecretStoreArn:RdsHttpEndpointConfig'</a>,
--   <a>rdsHttpEndpointConfig_awsSecretStoreArn</a> - Amazon Web Services
--   secret store ARN for database credentials.
--   
--   <a>$sel:dbClusterIdentifier:RdsHttpEndpointConfig'</a>,
--   <a>rdsHttpEndpointConfig_dbClusterIdentifier</a> - Amazon RDS cluster
--   ARN.
--   
--   <a>$sel:awsRegion:RdsHttpEndpointConfig'</a>,
--   <a>rdsHttpEndpointConfig_awsRegion</a> - Amazon Web Services Region
--   for RDS HTTP endpoint.
--   
--   <a>$sel:databaseName:RdsHttpEndpointConfig'</a>,
--   <a>rdsHttpEndpointConfig_databaseName</a> - Logical database name.
newRdsHttpEndpointConfig :: RdsHttpEndpointConfig

-- | Describes a relational database data source configuration.
--   
--   <i>See:</i> <a>newRelationalDatabaseDataSourceConfig</a> smart
--   constructor.
data RelationalDatabaseDataSourceConfig
RelationalDatabaseDataSourceConfig' :: Maybe RdsHttpEndpointConfig -> Maybe RelationalDatabaseSourceType -> RelationalDatabaseDataSourceConfig

-- | Create a value of <a>RelationalDatabaseDataSourceConfig</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rdsHttpEndpointConfig:RelationalDatabaseDataSourceConfig'</a>,
--   <a>relationalDatabaseDataSourceConfig_rdsHttpEndpointConfig</a> -
--   Amazon RDS HTTP endpoint settings.
--   
--   
--   <a>$sel:relationalDatabaseSourceType:RelationalDatabaseDataSourceConfig'</a>,
--   <a>relationalDatabaseDataSourceConfig_relationalDatabaseSourceType</a>
--   - Source type for the relational database.
--   
--   <ul>
--   <li><b>RDS_HTTP_ENDPOINT</b>: The relational database source type is
--   an Amazon RDS HTTP endpoint.</li>
--   </ul>
newRelationalDatabaseDataSourceConfig :: RelationalDatabaseDataSourceConfig

-- | Describes a resolver.
--   
--   <i>See:</i> <a>newResolver</a> smart constructor.
data Resolver
Resolver' :: Maybe Text -> Maybe Text -> Maybe ResolverKind -> Maybe SyncConfig -> Maybe Text -> Maybe Text -> Maybe CachingConfig -> Maybe PipelineConfig -> Maybe Text -> Maybe Text -> Resolver

-- | Create a value of <a>Resolver</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:responseMappingTemplate:Resolver'</a>,
--   <a>resolver_responseMappingTemplate</a> - The response mapping
--   template.
--   
--   <a>$sel:typeName:Resolver'</a>, <a>resolver_typeName</a> - The
--   resolver type name.
--   
--   <a>$sel:kind:Resolver'</a>, <a>resolver_kind</a> - The resolver type.
--   
--   <ul>
--   <li><b>UNIT</b>: A UNIT resolver type. A UNIT resolver is the default
--   resolver type. A UNIT resolver enables you to execute a GraphQL query
--   against a single data source.</li>
--   <li><b>PIPELINE</b>: A PIPELINE resolver type. A PIPELINE resolver
--   enables you to execute a series of <tt>Function</tt> in a serial
--   manner. You can use a pipeline resolver to execute a GraphQL query
--   against multiple data sources.</li>
--   </ul>
--   
--   <a>$sel:syncConfig:Resolver'</a>, <a>resolver_syncConfig</a> - The
--   <tt>SyncConfig</tt> for a resolver attached to a versioned datasource.
--   
--   <a>$sel:dataSourceName:Resolver'</a>, <a>resolver_dataSourceName</a> -
--   The resolver data source name.
--   
--   <a>$sel:resolverArn:Resolver'</a>, <a>resolver_resolverArn</a> - The
--   resolver ARN.
--   
--   <a>$sel:cachingConfig:Resolver'</a>, <a>resolver_cachingConfig</a> -
--   The caching configuration for the resolver.
--   
--   <a>$sel:pipelineConfig:Resolver'</a>, <a>resolver_pipelineConfig</a> -
--   The <tt>PipelineConfig</tt>.
--   
--   <a>$sel:requestMappingTemplate:Resolver'</a>,
--   <a>resolver_requestMappingTemplate</a> - The request mapping template.
--   
--   <a>$sel:fieldName:Resolver'</a>, <a>resolver_fieldName</a> - The
--   resolver field name.
newResolver :: Resolver

-- | Describes a Sync configuration for a resolver.
--   
--   Contains information on which Conflict Detection as well as Resolution
--   strategy should be performed when the resolver is invoked.
--   
--   <i>See:</i> <a>newSyncConfig</a> smart constructor.
data SyncConfig
SyncConfig' :: Maybe ConflictHandlerType -> Maybe LambdaConflictHandlerConfig -> Maybe ConflictDetectionType -> SyncConfig

-- | Create a value of <a>SyncConfig</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:conflictHandler:SyncConfig'</a>,
--   <a>syncConfig_conflictHandler</a> - The Conflict Resolution strategy
--   to perform in the event of a conflict.
--   
--   <ul>
--   <li><b>OPTIMISTIC_CONCURRENCY</b>: Resolve conflicts by rejecting
--   mutations when versions do not match the latest version at the
--   server.</li>
--   <li><b>AUTOMERGE</b>: Resolve conflicts with the Automerge conflict
--   resolution strategy.</li>
--   <li><b>LAMBDA</b>: Resolve conflicts with a Lambda function supplied
--   in the LambdaConflictHandlerConfig.</li>
--   </ul>
--   
--   <a>$sel:lambdaConflictHandlerConfig:SyncConfig'</a>,
--   <a>syncConfig_lambdaConflictHandlerConfig</a> - The
--   <tt>LambdaConflictHandlerConfig</tt> when configuring LAMBDA as the
--   Conflict Handler.
--   
--   <a>$sel:conflictDetection:SyncConfig'</a>,
--   <a>syncConfig_conflictDetection</a> - The Conflict Detection strategy
--   to use.
--   
--   <ul>
--   <li><b>VERSION</b>: Detect conflicts based on object versions for this
--   resolver.</li>
--   <li><b>NONE</b>: Do not detect conflicts when executing this
--   resolver.</li>
--   </ul>
newSyncConfig :: SyncConfig

-- | Describes a type.
--   
--   <i>See:</i> <a>newType</a> smart constructor.
data Type
Type' :: Maybe TypeDefinitionFormat -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Type

-- | Create a value of <a>Type</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:format:Type'</a>, <a>type_format</a> - The type format: SDL or
--   JSON.
--   
--   <a>$sel:arn:Type'</a>, <a>type_arn</a> - The type ARN.
--   
--   <a>$sel:name:Type'</a>, <a>type_name</a> - The type name.
--   
--   <a>$sel:description:Type'</a>, <a>type_description</a> - The type
--   description.
--   
--   <a>$sel:definition:Type'</a>, <a>type_definition</a> - The type
--   definition.
newType :: Type

-- | Describes an Amazon Cognito user pool configuration.
--   
--   <i>See:</i> <a>newUserPoolConfig</a> smart constructor.
data UserPoolConfig
UserPoolConfig' :: Maybe Text -> Text -> Text -> DefaultAction -> UserPoolConfig

-- | Create a value of <a>UserPoolConfig</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:appIdClientRegex:UserPoolConfig'</a>,
--   <a>userPoolConfig_appIdClientRegex</a> - A regular expression for
--   validating the incoming Amazon Cognito user pool app client ID.
--   
--   <a>$sel:userPoolId:UserPoolConfig'</a>,
--   <a>userPoolConfig_userPoolId</a> - The user pool ID.
--   
--   <a>$sel:awsRegion:UserPoolConfig'</a>, <a>userPoolConfig_awsRegion</a>
--   - The Amazon Web Services Region in which the user pool was created.
--   
--   <a>$sel:defaultAction:UserPoolConfig'</a>,
--   <a>userPoolConfig_defaultAction</a> - The action that you want your
--   GraphQL API to take when a request that uses Amazon Cognito user pool
--   authentication doesn't match the Amazon Cognito user pool
--   configuration.
newUserPoolConfig :: Text -> Text -> DefaultAction -> UserPoolConfig
