-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/

@package libZSservicesZSamazonka-lookoutvisionZSamazonka-lookoutvision
@version 2.0


module Amazonka.LookoutVision.Types.DatasetImageStats

-- | Statistics about the images in a dataset.
--   
--   <i>See:</i> <a>newDatasetImageStats</a> smart constructor.
data DatasetImageStats
DatasetImageStats' :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> DatasetImageStats

-- | The total number of images labeled as normal.
[$sel:normal:DatasetImageStats'] :: DatasetImageStats -> Maybe Int

-- | the total number of images labeled as an anomaly.
[$sel:anomaly:DatasetImageStats'] :: DatasetImageStats -> Maybe Int

-- | The total number of labeled images.
[$sel:labeled:DatasetImageStats'] :: DatasetImageStats -> Maybe Int

-- | The total number of images in the dataset.
[$sel:total:DatasetImageStats'] :: DatasetImageStats -> Maybe Int

-- | Create a value of <a>DatasetImageStats</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:normal:DatasetImageStats'</a>, <a>datasetImageStats_normal</a>
--   - The total number of images labeled as normal.
--   
--   <a>$sel:anomaly:DatasetImageStats'</a>,
--   <a>datasetImageStats_anomaly</a> - the total number of images labeled
--   as an anomaly.
--   
--   <a>$sel:labeled:DatasetImageStats'</a>,
--   <a>datasetImageStats_labeled</a> - The total number of labeled images.
--   
--   <a>$sel:total:DatasetImageStats'</a>, <a>datasetImageStats_total</a> -
--   The total number of images in the dataset.
newDatasetImageStats :: DatasetImageStats

-- | The total number of images labeled as normal.
datasetImageStats_normal :: Lens' DatasetImageStats (Maybe Int)

-- | the total number of images labeled as an anomaly.
datasetImageStats_anomaly :: Lens' DatasetImageStats (Maybe Int)

-- | The total number of labeled images.
datasetImageStats_labeled :: Lens' DatasetImageStats (Maybe Int)

-- | The total number of images in the dataset.
datasetImageStats_total :: Lens' DatasetImageStats (Maybe Int)
instance GHC.Generics.Generic Amazonka.LookoutVision.Types.DatasetImageStats.DatasetImageStats
instance GHC.Show.Show Amazonka.LookoutVision.Types.DatasetImageStats.DatasetImageStats
instance GHC.Read.Read Amazonka.LookoutVision.Types.DatasetImageStats.DatasetImageStats
instance GHC.Classes.Eq Amazonka.LookoutVision.Types.DatasetImageStats.DatasetImageStats
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LookoutVision.Types.DatasetImageStats.DatasetImageStats
instance Data.Hashable.Class.Hashable Amazonka.LookoutVision.Types.DatasetImageStats.DatasetImageStats
instance Control.DeepSeq.NFData Amazonka.LookoutVision.Types.DatasetImageStats.DatasetImageStats


module Amazonka.LookoutVision.Types.DatasetStatus
newtype DatasetStatus
DatasetStatus' :: Text -> DatasetStatus
[fromDatasetStatus] :: DatasetStatus -> Text
pattern DatasetStatus_CREATE_COMPLETE :: DatasetStatus
pattern DatasetStatus_CREATE_FAILED :: DatasetStatus
pattern DatasetStatus_CREATE_IN_PROGRESS :: DatasetStatus
pattern DatasetStatus_DELETE_COMPLETE :: DatasetStatus
pattern DatasetStatus_DELETE_FAILED :: DatasetStatus
pattern DatasetStatus_DELETE_IN_PROGRESS :: DatasetStatus
pattern DatasetStatus_UPDATE_COMPLETE :: DatasetStatus
pattern DatasetStatus_UPDATE_FAILED_ROLLBACK_COMPLETE :: DatasetStatus
pattern DatasetStatus_UPDATE_FAILED_ROLLBACK_IN_PROGRESS :: DatasetStatus
pattern DatasetStatus_UPDATE_IN_PROGRESS :: DatasetStatus
instance Amazonka.Data.XML.ToXML Amazonka.LookoutVision.Types.DatasetStatus.DatasetStatus
instance Amazonka.Data.XML.FromXML Amazonka.LookoutVision.Types.DatasetStatus.DatasetStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.LookoutVision.Types.DatasetStatus.DatasetStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LookoutVision.Types.DatasetStatus.DatasetStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.LookoutVision.Types.DatasetStatus.DatasetStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LookoutVision.Types.DatasetStatus.DatasetStatus
instance Amazonka.Data.Query.ToQuery Amazonka.LookoutVision.Types.DatasetStatus.DatasetStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.LookoutVision.Types.DatasetStatus.DatasetStatus
instance Amazonka.Data.Log.ToLog Amazonka.LookoutVision.Types.DatasetStatus.DatasetStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.LookoutVision.Types.DatasetStatus.DatasetStatus
instance Amazonka.Data.Text.ToText Amazonka.LookoutVision.Types.DatasetStatus.DatasetStatus
instance Amazonka.Data.Text.FromText Amazonka.LookoutVision.Types.DatasetStatus.DatasetStatus
instance Control.DeepSeq.NFData Amazonka.LookoutVision.Types.DatasetStatus.DatasetStatus
instance Data.Hashable.Class.Hashable Amazonka.LookoutVision.Types.DatasetStatus.DatasetStatus
instance GHC.Generics.Generic Amazonka.LookoutVision.Types.DatasetStatus.DatasetStatus
instance GHC.Classes.Ord Amazonka.LookoutVision.Types.DatasetStatus.DatasetStatus
instance GHC.Classes.Eq Amazonka.LookoutVision.Types.DatasetStatus.DatasetStatus
instance GHC.Read.Read Amazonka.LookoutVision.Types.DatasetStatus.DatasetStatus
instance GHC.Show.Show Amazonka.LookoutVision.Types.DatasetStatus.DatasetStatus


module Amazonka.LookoutVision.Types.DatasetMetadata

-- | Sumary information for an Amazon Lookout for Vision dataset.
--   
--   <i>See:</i> <a>newDatasetMetadata</a> smart constructor.
data DatasetMetadata
DatasetMetadata' :: Maybe DatasetStatus -> Maybe Text -> Maybe POSIX -> Maybe Text -> DatasetMetadata

-- | The status for the dataset.
[$sel:status:DatasetMetadata'] :: DatasetMetadata -> Maybe DatasetStatus

-- | The status message for the dataset.
[$sel:statusMessage:DatasetMetadata'] :: DatasetMetadata -> Maybe Text

-- | The Unix timestamp for the date and time that the dataset was created.
[$sel:creationTimestamp:DatasetMetadata'] :: DatasetMetadata -> Maybe POSIX

-- | The type of the dataset.
[$sel:datasetType:DatasetMetadata'] :: DatasetMetadata -> Maybe Text

-- | Create a value of <a>DatasetMetadata</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:DatasetMetadata'</a>, <a>datasetMetadata_status</a> -
--   The status for the dataset.
--   
--   <a>$sel:statusMessage:DatasetMetadata'</a>,
--   <a>datasetMetadata_statusMessage</a> - The status message for the
--   dataset.
--   
--   <a>$sel:creationTimestamp:DatasetMetadata'</a>,
--   <a>datasetMetadata_creationTimestamp</a> - The Unix timestamp for the
--   date and time that the dataset was created.
--   
--   <a>$sel:datasetType:DatasetMetadata'</a>,
--   <a>datasetMetadata_datasetType</a> - The type of the dataset.
newDatasetMetadata :: DatasetMetadata

-- | The status for the dataset.
datasetMetadata_status :: Lens' DatasetMetadata (Maybe DatasetStatus)

-- | The status message for the dataset.
datasetMetadata_statusMessage :: Lens' DatasetMetadata (Maybe Text)

-- | The Unix timestamp for the date and time that the dataset was created.
datasetMetadata_creationTimestamp :: Lens' DatasetMetadata (Maybe UTCTime)

-- | The type of the dataset.
datasetMetadata_datasetType :: Lens' DatasetMetadata (Maybe Text)
instance GHC.Generics.Generic Amazonka.LookoutVision.Types.DatasetMetadata.DatasetMetadata
instance GHC.Show.Show Amazonka.LookoutVision.Types.DatasetMetadata.DatasetMetadata
instance GHC.Read.Read Amazonka.LookoutVision.Types.DatasetMetadata.DatasetMetadata
instance GHC.Classes.Eq Amazonka.LookoutVision.Types.DatasetMetadata.DatasetMetadata
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LookoutVision.Types.DatasetMetadata.DatasetMetadata
instance Data.Hashable.Class.Hashable Amazonka.LookoutVision.Types.DatasetMetadata.DatasetMetadata
instance Control.DeepSeq.NFData Amazonka.LookoutVision.Types.DatasetMetadata.DatasetMetadata


module Amazonka.LookoutVision.Types.DatasetDescription

-- | The description for a dataset. For more information, see
--   DescribeDataset.
--   
--   <i>See:</i> <a>newDatasetDescription</a> smart constructor.
data DatasetDescription
DatasetDescription' :: Maybe DatasetStatus -> Maybe DatasetImageStats -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe POSIX -> DatasetDescription

-- | The status of the dataset.
[$sel:status:DatasetDescription'] :: DatasetDescription -> Maybe DatasetStatus
[$sel:imageStats:DatasetDescription'] :: DatasetDescription -> Maybe DatasetImageStats

-- | The status message for the dataset.
[$sel:statusMessage:DatasetDescription'] :: DatasetDescription -> Maybe Text

-- | The Unix timestamp for the time and date that the dataset was created.
[$sel:creationTimestamp:DatasetDescription'] :: DatasetDescription -> Maybe POSIX

-- | The type of the dataset. The value <tt>train</tt> represents a
--   training dataset or single dataset project. The value <tt>test</tt>
--   represents a test dataset.
[$sel:datasetType:DatasetDescription'] :: DatasetDescription -> Maybe Text

-- | The name of the project that contains the dataset.
[$sel:projectName:DatasetDescription'] :: DatasetDescription -> Maybe Text

-- | The Unix timestamp for the date and time that the dataset was last
--   updated.
[$sel:lastUpdatedTimestamp:DatasetDescription'] :: DatasetDescription -> Maybe POSIX

-- | Create a value of <a>DatasetDescription</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:DatasetDescription'</a>,
--   <a>datasetDescription_status</a> - The status of the dataset.
--   
--   <a>$sel:imageStats:DatasetDescription'</a>,
--   <a>datasetDescription_imageStats</a> -
--   
--   <a>$sel:statusMessage:DatasetDescription'</a>,
--   <a>datasetDescription_statusMessage</a> - The status message for the
--   dataset.
--   
--   <a>$sel:creationTimestamp:DatasetDescription'</a>,
--   <a>datasetDescription_creationTimestamp</a> - The Unix timestamp for
--   the time and date that the dataset was created.
--   
--   <a>$sel:datasetType:DatasetDescription'</a>,
--   <a>datasetDescription_datasetType</a> - The type of the dataset. The
--   value <tt>train</tt> represents a training dataset or single dataset
--   project. The value <tt>test</tt> represents a test dataset.
--   
--   <a>$sel:projectName:DatasetDescription'</a>,
--   <a>datasetDescription_projectName</a> - The name of the project that
--   contains the dataset.
--   
--   <a>$sel:lastUpdatedTimestamp:DatasetDescription'</a>,
--   <a>datasetDescription_lastUpdatedTimestamp</a> - The Unix timestamp
--   for the date and time that the dataset was last updated.
newDatasetDescription :: DatasetDescription

-- | The status of the dataset.
datasetDescription_status :: Lens' DatasetDescription (Maybe DatasetStatus)

datasetDescription_imageStats :: Lens' DatasetDescription (Maybe DatasetImageStats)

-- | The status message for the dataset.
datasetDescription_statusMessage :: Lens' DatasetDescription (Maybe Text)

-- | The Unix timestamp for the time and date that the dataset was created.
datasetDescription_creationTimestamp :: Lens' DatasetDescription (Maybe UTCTime)

-- | The type of the dataset. The value <tt>train</tt> represents a
--   training dataset or single dataset project. The value <tt>test</tt>
--   represents a test dataset.
datasetDescription_datasetType :: Lens' DatasetDescription (Maybe Text)

-- | The name of the project that contains the dataset.
datasetDescription_projectName :: Lens' DatasetDescription (Maybe Text)

-- | The Unix timestamp for the date and time that the dataset was last
--   updated.
datasetDescription_lastUpdatedTimestamp :: Lens' DatasetDescription (Maybe UTCTime)
instance GHC.Generics.Generic Amazonka.LookoutVision.Types.DatasetDescription.DatasetDescription
instance GHC.Show.Show Amazonka.LookoutVision.Types.DatasetDescription.DatasetDescription
instance GHC.Read.Read Amazonka.LookoutVision.Types.DatasetDescription.DatasetDescription
instance GHC.Classes.Eq Amazonka.LookoutVision.Types.DatasetDescription.DatasetDescription
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LookoutVision.Types.DatasetDescription.DatasetDescription
instance Data.Hashable.Class.Hashable Amazonka.LookoutVision.Types.DatasetDescription.DatasetDescription
instance Control.DeepSeq.NFData Amazonka.LookoutVision.Types.DatasetDescription.DatasetDescription


module Amazonka.LookoutVision.Types.ImageSource

-- | The source for an image.
--   
--   <i>See:</i> <a>newImageSource</a> smart constructor.
data ImageSource
ImageSource' :: Maybe Text -> ImageSource

-- | The type of the image.
[$sel:type':ImageSource'] :: ImageSource -> Maybe Text

-- | Create a value of <a>ImageSource</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:type':ImageSource'</a>, <a>imageSource_type</a> - The type of
--   the image.
newImageSource :: ImageSource

-- | The type of the image.
imageSource_type :: Lens' ImageSource (Maybe Text)
instance GHC.Generics.Generic Amazonka.LookoutVision.Types.ImageSource.ImageSource
instance GHC.Show.Show Amazonka.LookoutVision.Types.ImageSource.ImageSource
instance GHC.Read.Read Amazonka.LookoutVision.Types.ImageSource.ImageSource
instance GHC.Classes.Eq Amazonka.LookoutVision.Types.ImageSource.ImageSource
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LookoutVision.Types.ImageSource.ImageSource
instance Data.Hashable.Class.Hashable Amazonka.LookoutVision.Types.ImageSource.ImageSource
instance Control.DeepSeq.NFData Amazonka.LookoutVision.Types.ImageSource.ImageSource


module Amazonka.LookoutVision.Types.DetectAnomalyResult

-- | The prediction results from a call to DetectAnomalies.
--   
--   <i>See:</i> <a>newDetectAnomalyResult</a> smart constructor.
data DetectAnomalyResult
DetectAnomalyResult' :: Maybe Bool -> Maybe Double -> Maybe ImageSource -> DetectAnomalyResult

-- | True if the image contains an anomaly, otherwise false.
[$sel:isAnomalous:DetectAnomalyResult'] :: DetectAnomalyResult -> Maybe Bool

-- | The confidence that Amazon Lookout for Vision has in the accuracy of
--   the prediction.
[$sel:confidence:DetectAnomalyResult'] :: DetectAnomalyResult -> Maybe Double

-- | The source of the image that was analyzed. <tt>direct</tt> means that
--   the images was supplied from the local computer. No other values are
--   supported.
[$sel:source:DetectAnomalyResult'] :: DetectAnomalyResult -> Maybe ImageSource

-- | Create a value of <a>DetectAnomalyResult</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:isAnomalous:DetectAnomalyResult'</a>,
--   <a>detectAnomalyResult_isAnomalous</a> - True if the image contains an
--   anomaly, otherwise false.
--   
--   <a>$sel:confidence:DetectAnomalyResult'</a>,
--   <a>detectAnomalyResult_confidence</a> - The confidence that Amazon
--   Lookout for Vision has in the accuracy of the prediction.
--   
--   <a>$sel:source:DetectAnomalyResult'</a>,
--   <a>detectAnomalyResult_source</a> - The source of the image that was
--   analyzed. <tt>direct</tt> means that the images was supplied from the
--   local computer. No other values are supported.
newDetectAnomalyResult :: DetectAnomalyResult

-- | True if the image contains an anomaly, otherwise false.
detectAnomalyResult_isAnomalous :: Lens' DetectAnomalyResult (Maybe Bool)

-- | The confidence that Amazon Lookout for Vision has in the accuracy of
--   the prediction.
detectAnomalyResult_confidence :: Lens' DetectAnomalyResult (Maybe Double)

-- | The source of the image that was analyzed. <tt>direct</tt> means that
--   the images was supplied from the local computer. No other values are
--   supported.
detectAnomalyResult_source :: Lens' DetectAnomalyResult (Maybe ImageSource)
instance GHC.Generics.Generic Amazonka.LookoutVision.Types.DetectAnomalyResult.DetectAnomalyResult
instance GHC.Show.Show Amazonka.LookoutVision.Types.DetectAnomalyResult.DetectAnomalyResult
instance GHC.Read.Read Amazonka.LookoutVision.Types.DetectAnomalyResult.DetectAnomalyResult
instance GHC.Classes.Eq Amazonka.LookoutVision.Types.DetectAnomalyResult.DetectAnomalyResult
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LookoutVision.Types.DetectAnomalyResult.DetectAnomalyResult
instance Data.Hashable.Class.Hashable Amazonka.LookoutVision.Types.DetectAnomalyResult.DetectAnomalyResult
instance Control.DeepSeq.NFData Amazonka.LookoutVision.Types.DetectAnomalyResult.DetectAnomalyResult


module Amazonka.LookoutVision.Types.InputS3Object

-- | Amazon S3 Location information for an input manifest file.
--   
--   <i>See:</i> <a>newInputS3Object</a> smart constructor.
data InputS3Object
InputS3Object' :: Maybe Text -> Text -> Text -> InputS3Object

-- | The version ID of the bucket.
[$sel:versionId:InputS3Object'] :: InputS3Object -> Maybe Text

-- | The Amazon S3 bucket that contains the manifest.
[$sel:bucket:InputS3Object'] :: InputS3Object -> Text

-- | The name and location of the manifest file withiin the bucket.
[$sel:key:InputS3Object'] :: InputS3Object -> Text

-- | Create a value of <a>InputS3Object</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:versionId:InputS3Object'</a>, <a>inputS3Object_versionId</a> -
--   The version ID of the bucket.
--   
--   <a>$sel:bucket:InputS3Object'</a>, <a>inputS3Object_bucket</a> - The
--   Amazon S3 bucket that contains the manifest.
--   
--   <a>$sel:key:InputS3Object'</a>, <a>inputS3Object_key</a> - The name
--   and location of the manifest file withiin the bucket.
newInputS3Object :: Text -> Text -> InputS3Object

-- | The version ID of the bucket.
inputS3Object_versionId :: Lens' InputS3Object (Maybe Text)

-- | The Amazon S3 bucket that contains the manifest.
inputS3Object_bucket :: Lens' InputS3Object Text

-- | The name and location of the manifest file withiin the bucket.
inputS3Object_key :: Lens' InputS3Object Text
instance GHC.Generics.Generic Amazonka.LookoutVision.Types.InputS3Object.InputS3Object
instance GHC.Show.Show Amazonka.LookoutVision.Types.InputS3Object.InputS3Object
instance GHC.Read.Read Amazonka.LookoutVision.Types.InputS3Object.InputS3Object
instance GHC.Classes.Eq Amazonka.LookoutVision.Types.InputS3Object.InputS3Object
instance Data.Hashable.Class.Hashable Amazonka.LookoutVision.Types.InputS3Object.InputS3Object
instance Control.DeepSeq.NFData Amazonka.LookoutVision.Types.InputS3Object.InputS3Object
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LookoutVision.Types.InputS3Object.InputS3Object


module Amazonka.LookoutVision.Types.DatasetGroundTruthManifest

-- | Location information about a manifest file. You can use a manifest
--   file to create a dataset.
--   
--   <i>See:</i> <a>newDatasetGroundTruthManifest</a> smart constructor.
data DatasetGroundTruthManifest
DatasetGroundTruthManifest' :: Maybe InputS3Object -> DatasetGroundTruthManifest

-- | The S3 bucket location for the manifest file.
[$sel:s3Object:DatasetGroundTruthManifest'] :: DatasetGroundTruthManifest -> Maybe InputS3Object

-- | Create a value of <a>DatasetGroundTruthManifest</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:s3Object:DatasetGroundTruthManifest'</a>,
--   <a>datasetGroundTruthManifest_s3Object</a> - The S3 bucket location
--   for the manifest file.
newDatasetGroundTruthManifest :: DatasetGroundTruthManifest

-- | The S3 bucket location for the manifest file.
datasetGroundTruthManifest_s3Object :: Lens' DatasetGroundTruthManifest (Maybe InputS3Object)
instance GHC.Generics.Generic Amazonka.LookoutVision.Types.DatasetGroundTruthManifest.DatasetGroundTruthManifest
instance GHC.Show.Show Amazonka.LookoutVision.Types.DatasetGroundTruthManifest.DatasetGroundTruthManifest
instance GHC.Read.Read Amazonka.LookoutVision.Types.DatasetGroundTruthManifest.DatasetGroundTruthManifest
instance GHC.Classes.Eq Amazonka.LookoutVision.Types.DatasetGroundTruthManifest.DatasetGroundTruthManifest
instance Data.Hashable.Class.Hashable Amazonka.LookoutVision.Types.DatasetGroundTruthManifest.DatasetGroundTruthManifest
instance Control.DeepSeq.NFData Amazonka.LookoutVision.Types.DatasetGroundTruthManifest.DatasetGroundTruthManifest
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LookoutVision.Types.DatasetGroundTruthManifest.DatasetGroundTruthManifest


module Amazonka.LookoutVision.Types.DatasetSource

-- | Information about the location of a manifest file that Amazon Lookout
--   for Vision uses to to create a dataset.
--   
--   <i>See:</i> <a>newDatasetSource</a> smart constructor.
data DatasetSource
DatasetSource' :: Maybe DatasetGroundTruthManifest -> DatasetSource

-- | Location information for the manifest file.
[$sel:groundTruthManifest:DatasetSource'] :: DatasetSource -> Maybe DatasetGroundTruthManifest

-- | Create a value of <a>DatasetSource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:groundTruthManifest:DatasetSource'</a>,
--   <a>datasetSource_groundTruthManifest</a> - Location information for
--   the manifest file.
newDatasetSource :: DatasetSource

-- | Location information for the manifest file.
datasetSource_groundTruthManifest :: Lens' DatasetSource (Maybe DatasetGroundTruthManifest)
instance GHC.Generics.Generic Amazonka.LookoutVision.Types.DatasetSource.DatasetSource
instance GHC.Show.Show Amazonka.LookoutVision.Types.DatasetSource.DatasetSource
instance GHC.Read.Read Amazonka.LookoutVision.Types.DatasetSource.DatasetSource
instance GHC.Classes.Eq Amazonka.LookoutVision.Types.DatasetSource.DatasetSource
instance Data.Hashable.Class.Hashable Amazonka.LookoutVision.Types.DatasetSource.DatasetSource
instance Control.DeepSeq.NFData Amazonka.LookoutVision.Types.DatasetSource.DatasetSource
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LookoutVision.Types.DatasetSource.DatasetSource


module Amazonka.LookoutVision.Types.ModelHostingStatus
newtype ModelHostingStatus
ModelHostingStatus' :: Text -> ModelHostingStatus
[fromModelHostingStatus] :: ModelHostingStatus -> Text
pattern ModelHostingStatus_HOSTED :: ModelHostingStatus
pattern ModelHostingStatus_HOSTING_FAILED :: ModelHostingStatus
pattern ModelHostingStatus_STARTING_HOSTING :: ModelHostingStatus
pattern ModelHostingStatus_STOPPING_HOSTING :: ModelHostingStatus
pattern ModelHostingStatus_SYSTEM_UPDATING :: ModelHostingStatus
instance Amazonka.Data.XML.ToXML Amazonka.LookoutVision.Types.ModelHostingStatus.ModelHostingStatus
instance Amazonka.Data.XML.FromXML Amazonka.LookoutVision.Types.ModelHostingStatus.ModelHostingStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.LookoutVision.Types.ModelHostingStatus.ModelHostingStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LookoutVision.Types.ModelHostingStatus.ModelHostingStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.LookoutVision.Types.ModelHostingStatus.ModelHostingStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LookoutVision.Types.ModelHostingStatus.ModelHostingStatus
instance Amazonka.Data.Query.ToQuery Amazonka.LookoutVision.Types.ModelHostingStatus.ModelHostingStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.LookoutVision.Types.ModelHostingStatus.ModelHostingStatus
instance Amazonka.Data.Log.ToLog Amazonka.LookoutVision.Types.ModelHostingStatus.ModelHostingStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.LookoutVision.Types.ModelHostingStatus.ModelHostingStatus
instance Amazonka.Data.Text.ToText Amazonka.LookoutVision.Types.ModelHostingStatus.ModelHostingStatus
instance Amazonka.Data.Text.FromText Amazonka.LookoutVision.Types.ModelHostingStatus.ModelHostingStatus
instance Control.DeepSeq.NFData Amazonka.LookoutVision.Types.ModelHostingStatus.ModelHostingStatus
instance Data.Hashable.Class.Hashable Amazonka.LookoutVision.Types.ModelHostingStatus.ModelHostingStatus
instance GHC.Generics.Generic Amazonka.LookoutVision.Types.ModelHostingStatus.ModelHostingStatus
instance GHC.Classes.Ord Amazonka.LookoutVision.Types.ModelHostingStatus.ModelHostingStatus
instance GHC.Classes.Eq Amazonka.LookoutVision.Types.ModelHostingStatus.ModelHostingStatus
instance GHC.Read.Read Amazonka.LookoutVision.Types.ModelHostingStatus.ModelHostingStatus
instance GHC.Show.Show Amazonka.LookoutVision.Types.ModelHostingStatus.ModelHostingStatus


module Amazonka.LookoutVision.Types.ModelPerformance

-- | Information about the evaluation performance of a trained model.
--   
--   <i>See:</i> <a>newModelPerformance</a> smart constructor.
data ModelPerformance
ModelPerformance' :: Maybe Double -> Maybe Double -> Maybe Double -> ModelPerformance

-- | The overall recall metric value for the trained model.
[$sel:recall:ModelPerformance'] :: ModelPerformance -> Maybe Double

-- | The overall precision metric value for the trained model.
[$sel:precision:ModelPerformance'] :: ModelPerformance -> Maybe Double

-- | The overall F1 score metric for the trained model.
[$sel:f1Score:ModelPerformance'] :: ModelPerformance -> Maybe Double

-- | Create a value of <a>ModelPerformance</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:recall:ModelPerformance'</a>, <a>modelPerformance_recall</a> -
--   The overall recall metric value for the trained model.
--   
--   <a>$sel:precision:ModelPerformance'</a>,
--   <a>modelPerformance_precision</a> - The overall precision metric value
--   for the trained model.
--   
--   <a>$sel:f1Score:ModelPerformance'</a>, <a>modelPerformance_f1Score</a>
--   - The overall F1 score metric for the trained model.
newModelPerformance :: ModelPerformance

-- | The overall recall metric value for the trained model.
modelPerformance_recall :: Lens' ModelPerformance (Maybe Double)

-- | The overall precision metric value for the trained model.
modelPerformance_precision :: Lens' ModelPerformance (Maybe Double)

-- | The overall F1 score metric for the trained model.
modelPerformance_f1Score :: Lens' ModelPerformance (Maybe Double)
instance GHC.Generics.Generic Amazonka.LookoutVision.Types.ModelPerformance.ModelPerformance
instance GHC.Show.Show Amazonka.LookoutVision.Types.ModelPerformance.ModelPerformance
instance GHC.Read.Read Amazonka.LookoutVision.Types.ModelPerformance.ModelPerformance
instance GHC.Classes.Eq Amazonka.LookoutVision.Types.ModelPerformance.ModelPerformance
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LookoutVision.Types.ModelPerformance.ModelPerformance
instance Data.Hashable.Class.Hashable Amazonka.LookoutVision.Types.ModelPerformance.ModelPerformance
instance Control.DeepSeq.NFData Amazonka.LookoutVision.Types.ModelPerformance.ModelPerformance


module Amazonka.LookoutVision.Types.ModelStatus
newtype ModelStatus
ModelStatus' :: Text -> ModelStatus
[fromModelStatus] :: ModelStatus -> Text
pattern ModelStatus_DELETING :: ModelStatus
pattern ModelStatus_HOSTED :: ModelStatus
pattern ModelStatus_HOSTING_FAILED :: ModelStatus
pattern ModelStatus_STARTING_HOSTING :: ModelStatus
pattern ModelStatus_STOPPING_HOSTING :: ModelStatus
pattern ModelStatus_SYSTEM_UPDATING :: ModelStatus
pattern ModelStatus_TRAINED :: ModelStatus
pattern ModelStatus_TRAINING :: ModelStatus
pattern ModelStatus_TRAINING_FAILED :: ModelStatus
instance Amazonka.Data.XML.ToXML Amazonka.LookoutVision.Types.ModelStatus.ModelStatus
instance Amazonka.Data.XML.FromXML Amazonka.LookoutVision.Types.ModelStatus.ModelStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.LookoutVision.Types.ModelStatus.ModelStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LookoutVision.Types.ModelStatus.ModelStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.LookoutVision.Types.ModelStatus.ModelStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LookoutVision.Types.ModelStatus.ModelStatus
instance Amazonka.Data.Query.ToQuery Amazonka.LookoutVision.Types.ModelStatus.ModelStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.LookoutVision.Types.ModelStatus.ModelStatus
instance Amazonka.Data.Log.ToLog Amazonka.LookoutVision.Types.ModelStatus.ModelStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.LookoutVision.Types.ModelStatus.ModelStatus
instance Amazonka.Data.Text.ToText Amazonka.LookoutVision.Types.ModelStatus.ModelStatus
instance Amazonka.Data.Text.FromText Amazonka.LookoutVision.Types.ModelStatus.ModelStatus
instance Control.DeepSeq.NFData Amazonka.LookoutVision.Types.ModelStatus.ModelStatus
instance Data.Hashable.Class.Hashable Amazonka.LookoutVision.Types.ModelStatus.ModelStatus
instance GHC.Generics.Generic Amazonka.LookoutVision.Types.ModelStatus.ModelStatus
instance GHC.Classes.Ord Amazonka.LookoutVision.Types.ModelStatus.ModelStatus
instance GHC.Classes.Eq Amazonka.LookoutVision.Types.ModelStatus.ModelStatus
instance GHC.Read.Read Amazonka.LookoutVision.Types.ModelStatus.ModelStatus
instance GHC.Show.Show Amazonka.LookoutVision.Types.ModelStatus.ModelStatus


module Amazonka.LookoutVision.Types.ModelMetadata

-- | Describes an Amazon Lookout for Vision model.
--   
--   <i>See:</i> <a>newModelMetadata</a> smart constructor.
data ModelMetadata
ModelMetadata' :: Maybe ModelStatus -> Maybe Text -> Maybe ModelPerformance -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe Text -> ModelMetadata

-- | The status of the model.
[$sel:status:ModelMetadata'] :: ModelMetadata -> Maybe ModelStatus

-- | The Amazon Resource Name (ARN) of the model.
[$sel:modelArn:ModelMetadata'] :: ModelMetadata -> Maybe Text

-- | Performance metrics for the model. Not available until training has
--   successfully completed.
[$sel:performance:ModelMetadata'] :: ModelMetadata -> Maybe ModelPerformance

-- | The status message for the model.
[$sel:statusMessage:ModelMetadata'] :: ModelMetadata -> Maybe Text

-- | The unix timestamp for the date and time that the model was created.
[$sel:creationTimestamp:ModelMetadata'] :: ModelMetadata -> Maybe POSIX

-- | The version of the model.
[$sel:modelVersion:ModelMetadata'] :: ModelMetadata -> Maybe Text

-- | The description for the model.
[$sel:description:ModelMetadata'] :: ModelMetadata -> Maybe Text

-- | Create a value of <a>ModelMetadata</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:ModelMetadata'</a>, <a>modelMetadata_status</a> - The
--   status of the model.
--   
--   <a>$sel:modelArn:ModelMetadata'</a>, <a>modelMetadata_modelArn</a> -
--   The Amazon Resource Name (ARN) of the model.
--   
--   <a>$sel:performance:ModelMetadata'</a>,
--   <a>modelMetadata_performance</a> - Performance metrics for the model.
--   Not available until training has successfully completed.
--   
--   <a>$sel:statusMessage:ModelMetadata'</a>,
--   <a>modelMetadata_statusMessage</a> - The status message for the model.
--   
--   <a>$sel:creationTimestamp:ModelMetadata'</a>,
--   <a>modelMetadata_creationTimestamp</a> - The unix timestamp for the
--   date and time that the model was created.
--   
--   <a>$sel:modelVersion:ModelMetadata'</a>,
--   <a>modelMetadata_modelVersion</a> - The version of the model.
--   
--   <a>$sel:description:ModelMetadata'</a>,
--   <a>modelMetadata_description</a> - The description for the model.
newModelMetadata :: ModelMetadata

-- | The status of the model.
modelMetadata_status :: Lens' ModelMetadata (Maybe ModelStatus)

-- | The Amazon Resource Name (ARN) of the model.
modelMetadata_modelArn :: Lens' ModelMetadata (Maybe Text)

-- | Performance metrics for the model. Not available until training has
--   successfully completed.
modelMetadata_performance :: Lens' ModelMetadata (Maybe ModelPerformance)

-- | The status message for the model.
modelMetadata_statusMessage :: Lens' ModelMetadata (Maybe Text)

-- | The unix timestamp for the date and time that the model was created.
modelMetadata_creationTimestamp :: Lens' ModelMetadata (Maybe UTCTime)

-- | The version of the model.
modelMetadata_modelVersion :: Lens' ModelMetadata (Maybe Text)

-- | The description for the model.
modelMetadata_description :: Lens' ModelMetadata (Maybe Text)
instance GHC.Generics.Generic Amazonka.LookoutVision.Types.ModelMetadata.ModelMetadata
instance GHC.Show.Show Amazonka.LookoutVision.Types.ModelMetadata.ModelMetadata
instance GHC.Read.Read Amazonka.LookoutVision.Types.ModelMetadata.ModelMetadata
instance GHC.Classes.Eq Amazonka.LookoutVision.Types.ModelMetadata.ModelMetadata
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LookoutVision.Types.ModelMetadata.ModelMetadata
instance Data.Hashable.Class.Hashable Amazonka.LookoutVision.Types.ModelMetadata.ModelMetadata
instance Control.DeepSeq.NFData Amazonka.LookoutVision.Types.ModelMetadata.ModelMetadata


module Amazonka.LookoutVision.Types.OutputS3Object

-- | The S3 location where Amazon Lookout for Vision saves training output.
--   
--   <i>See:</i> <a>newOutputS3Object</a> smart constructor.
data OutputS3Object
OutputS3Object' :: Text -> Text -> OutputS3Object

-- | The bucket that contains the training output.
[$sel:bucket:OutputS3Object'] :: OutputS3Object -> Text

-- | The location of the training output in the bucket.
[$sel:key:OutputS3Object'] :: OutputS3Object -> Text

-- | Create a value of <a>OutputS3Object</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:bucket:OutputS3Object'</a>, <a>outputS3Object_bucket</a> - The
--   bucket that contains the training output.
--   
--   <a>$sel:key:OutputS3Object'</a>, <a>outputS3Object_key</a> - The
--   location of the training output in the bucket.
newOutputS3Object :: Text -> Text -> OutputS3Object

-- | The bucket that contains the training output.
outputS3Object_bucket :: Lens' OutputS3Object Text

-- | The location of the training output in the bucket.
outputS3Object_key :: Lens' OutputS3Object Text
instance GHC.Generics.Generic Amazonka.LookoutVision.Types.OutputS3Object.OutputS3Object
instance GHC.Show.Show Amazonka.LookoutVision.Types.OutputS3Object.OutputS3Object
instance GHC.Read.Read Amazonka.LookoutVision.Types.OutputS3Object.OutputS3Object
instance GHC.Classes.Eq Amazonka.LookoutVision.Types.OutputS3Object.OutputS3Object
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LookoutVision.Types.OutputS3Object.OutputS3Object
instance Data.Hashable.Class.Hashable Amazonka.LookoutVision.Types.OutputS3Object.OutputS3Object
instance Control.DeepSeq.NFData Amazonka.LookoutVision.Types.OutputS3Object.OutputS3Object


module Amazonka.LookoutVision.Types.ProjectDescription

-- | Describe an Amazon Lookout for Vision project. For more information,
--   see DescribeProject.
--   
--   <i>See:</i> <a>newProjectDescription</a> smart constructor.
data ProjectDescription
ProjectDescription' :: Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe [DatasetMetadata] -> ProjectDescription

-- | The unix timestamp for the date and time that the project was created.
[$sel:creationTimestamp:ProjectDescription'] :: ProjectDescription -> Maybe POSIX

-- | The name of the project.
[$sel:projectName:ProjectDescription'] :: ProjectDescription -> Maybe Text

-- | The Amazon Resource Name (ARN) of the project.
[$sel:projectArn:ProjectDescription'] :: ProjectDescription -> Maybe Text

-- | A list of datasets in the project.
[$sel:datasets:ProjectDescription'] :: ProjectDescription -> Maybe [DatasetMetadata]

-- | Create a value of <a>ProjectDescription</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:creationTimestamp:ProjectDescription'</a>,
--   <a>projectDescription_creationTimestamp</a> - The unix timestamp for
--   the date and time that the project was created.
--   
--   <a>$sel:projectName:ProjectDescription'</a>,
--   <a>projectDescription_projectName</a> - The name of the project.
--   
--   <a>$sel:projectArn:ProjectDescription'</a>,
--   <a>projectDescription_projectArn</a> - The Amazon Resource Name (ARN)
--   of the project.
--   
--   <a>$sel:datasets:ProjectDescription'</a>,
--   <a>projectDescription_datasets</a> - A list of datasets in the
--   project.
newProjectDescription :: ProjectDescription

-- | The unix timestamp for the date and time that the project was created.
projectDescription_creationTimestamp :: Lens' ProjectDescription (Maybe UTCTime)

-- | The name of the project.
projectDescription_projectName :: Lens' ProjectDescription (Maybe Text)

-- | The Amazon Resource Name (ARN) of the project.
projectDescription_projectArn :: Lens' ProjectDescription (Maybe Text)

-- | A list of datasets in the project.
projectDescription_datasets :: Lens' ProjectDescription (Maybe [DatasetMetadata])
instance GHC.Generics.Generic Amazonka.LookoutVision.Types.ProjectDescription.ProjectDescription
instance GHC.Show.Show Amazonka.LookoutVision.Types.ProjectDescription.ProjectDescription
instance GHC.Read.Read Amazonka.LookoutVision.Types.ProjectDescription.ProjectDescription
instance GHC.Classes.Eq Amazonka.LookoutVision.Types.ProjectDescription.ProjectDescription
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LookoutVision.Types.ProjectDescription.ProjectDescription
instance Data.Hashable.Class.Hashable Amazonka.LookoutVision.Types.ProjectDescription.ProjectDescription
instance Control.DeepSeq.NFData Amazonka.LookoutVision.Types.ProjectDescription.ProjectDescription


module Amazonka.LookoutVision.Types.ProjectMetadata

-- | Metadata about an Amazon Lookout for Vision project.
--   
--   <i>See:</i> <a>newProjectMetadata</a> smart constructor.
data ProjectMetadata
ProjectMetadata' :: Maybe POSIX -> Maybe Text -> Maybe Text -> ProjectMetadata

-- | The unix timestamp for the date and time that the project was created.
[$sel:creationTimestamp:ProjectMetadata'] :: ProjectMetadata -> Maybe POSIX

-- | The name of the project.
[$sel:projectName:ProjectMetadata'] :: ProjectMetadata -> Maybe Text

-- | The Amazon Resource Name (ARN) of the project.
[$sel:projectArn:ProjectMetadata'] :: ProjectMetadata -> Maybe Text

-- | Create a value of <a>ProjectMetadata</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:creationTimestamp:ProjectMetadata'</a>,
--   <a>projectMetadata_creationTimestamp</a> - The unix timestamp for the
--   date and time that the project was created.
--   
--   <a>$sel:projectName:ProjectMetadata'</a>,
--   <a>projectMetadata_projectName</a> - The name of the project.
--   
--   <a>$sel:projectArn:ProjectMetadata'</a>,
--   <a>projectMetadata_projectArn</a> - The Amazon Resource Name (ARN) of
--   the project.
newProjectMetadata :: ProjectMetadata

-- | The unix timestamp for the date and time that the project was created.
projectMetadata_creationTimestamp :: Lens' ProjectMetadata (Maybe UTCTime)

-- | The name of the project.
projectMetadata_projectName :: Lens' ProjectMetadata (Maybe Text)

-- | The Amazon Resource Name (ARN) of the project.
projectMetadata_projectArn :: Lens' ProjectMetadata (Maybe Text)
instance GHC.Generics.Generic Amazonka.LookoutVision.Types.ProjectMetadata.ProjectMetadata
instance GHC.Show.Show Amazonka.LookoutVision.Types.ProjectMetadata.ProjectMetadata
instance GHC.Read.Read Amazonka.LookoutVision.Types.ProjectMetadata.ProjectMetadata
instance GHC.Classes.Eq Amazonka.LookoutVision.Types.ProjectMetadata.ProjectMetadata
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LookoutVision.Types.ProjectMetadata.ProjectMetadata
instance Data.Hashable.Class.Hashable Amazonka.LookoutVision.Types.ProjectMetadata.ProjectMetadata
instance Control.DeepSeq.NFData Amazonka.LookoutVision.Types.ProjectMetadata.ProjectMetadata


module Amazonka.LookoutVision.Types.S3Location

-- | Information about the location training output.
--   
--   <i>See:</i> <a>newS3Location</a> smart constructor.
data S3Location
S3Location' :: Maybe Text -> Text -> S3Location

-- | The path of the folder, within the S3 bucket, that contains the
--   training output.
[$sel:prefix:S3Location'] :: S3Location -> Maybe Text

-- | The S3 bucket that contains the training output.
[$sel:bucket:S3Location'] :: S3Location -> Text

-- | Create a value of <a>S3Location</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:prefix:S3Location'</a>, <a>s3Location_prefix</a> - The path of
--   the folder, within the S3 bucket, that contains the training output.
--   
--   <a>$sel:bucket:S3Location'</a>, <a>s3Location_bucket</a> - The S3
--   bucket that contains the training output.
newS3Location :: Text -> S3Location

-- | The path of the folder, within the S3 bucket, that contains the
--   training output.
s3Location_prefix :: Lens' S3Location (Maybe Text)

-- | The S3 bucket that contains the training output.
s3Location_bucket :: Lens' S3Location Text
instance GHC.Generics.Generic Amazonka.LookoutVision.Types.S3Location.S3Location
instance GHC.Show.Show Amazonka.LookoutVision.Types.S3Location.S3Location
instance GHC.Read.Read Amazonka.LookoutVision.Types.S3Location.S3Location
instance GHC.Classes.Eq Amazonka.LookoutVision.Types.S3Location.S3Location
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LookoutVision.Types.S3Location.S3Location
instance Data.Hashable.Class.Hashable Amazonka.LookoutVision.Types.S3Location.S3Location
instance Control.DeepSeq.NFData Amazonka.LookoutVision.Types.S3Location.S3Location
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LookoutVision.Types.S3Location.S3Location


module Amazonka.LookoutVision.Types.OutputConfig

-- | The S3 location where Amazon Lookout for Vision saves model training
--   files.
--   
--   <i>See:</i> <a>newOutputConfig</a> smart constructor.
data OutputConfig
OutputConfig' :: S3Location -> OutputConfig

-- | The S3 location for the output.
[$sel:s3Location:OutputConfig'] :: OutputConfig -> S3Location

-- | Create a value of <a>OutputConfig</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:s3Location:OutputConfig'</a>, <a>outputConfig_s3Location</a> -
--   The S3 location for the output.
newOutputConfig :: S3Location -> OutputConfig

-- | The S3 location for the output.
outputConfig_s3Location :: Lens' OutputConfig S3Location
instance GHC.Generics.Generic Amazonka.LookoutVision.Types.OutputConfig.OutputConfig
instance GHC.Show.Show Amazonka.LookoutVision.Types.OutputConfig.OutputConfig
instance GHC.Read.Read Amazonka.LookoutVision.Types.OutputConfig.OutputConfig
instance GHC.Classes.Eq Amazonka.LookoutVision.Types.OutputConfig.OutputConfig
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LookoutVision.Types.OutputConfig.OutputConfig
instance Data.Hashable.Class.Hashable Amazonka.LookoutVision.Types.OutputConfig.OutputConfig
instance Control.DeepSeq.NFData Amazonka.LookoutVision.Types.OutputConfig.OutputConfig
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LookoutVision.Types.OutputConfig.OutputConfig


module Amazonka.LookoutVision.Types.ModelDescription

-- | Describes an Amazon Lookout for Vision model.
--   
--   <i>See:</i> <a>newModelDescription</a> smart constructor.
data ModelDescription
ModelDescription' :: Maybe ModelStatus -> Maybe OutputS3Object -> Maybe POSIX -> Maybe Text -> Maybe ModelPerformance -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe OutputConfig -> Maybe Text -> Maybe Text -> Maybe OutputS3Object -> ModelDescription

-- | The status of the model.
[$sel:status:ModelDescription'] :: ModelDescription -> Maybe ModelStatus

-- | The S3 location where Amazon Lookout for Vision saves the performance
--   metrics.
[$sel:evaluationResult:ModelDescription'] :: ModelDescription -> Maybe OutputS3Object

-- | The unix timestamp for the date and time that the evaluation ended.
[$sel:evaluationEndTimestamp:ModelDescription'] :: ModelDescription -> Maybe POSIX

-- | The Amazon Resource Name (ARN) of the model.
[$sel:modelArn:ModelDescription'] :: ModelDescription -> Maybe Text

-- | Performance metrics for the model. Created during training.
[$sel:performance:ModelDescription'] :: ModelDescription -> Maybe ModelPerformance

-- | The identifer for the AWS Key Management Service (AWS KMS) key that
--   was used to encrypt the model during training.
[$sel:kmsKeyId:ModelDescription'] :: ModelDescription -> Maybe Text

-- | The status message for the model.
[$sel:statusMessage:ModelDescription'] :: ModelDescription -> Maybe Text

-- | The unix timestamp for the date and time that the model was created.
[$sel:creationTimestamp:ModelDescription'] :: ModelDescription -> Maybe POSIX

-- | The S3 location where Amazon Lookout for Vision saves model training
--   files.
[$sel:outputConfig:ModelDescription'] :: ModelDescription -> Maybe OutputConfig

-- | The version of the model
[$sel:modelVersion:ModelDescription'] :: ModelDescription -> Maybe Text

-- | The description for the model.
[$sel:description:ModelDescription'] :: ModelDescription -> Maybe Text

-- | The S3 location where Amazon Lookout for Vision saves the manifest
--   file that was used to test the trained model and generate the
--   performance scores.
[$sel:evaluationManifest:ModelDescription'] :: ModelDescription -> Maybe OutputS3Object

-- | Create a value of <a>ModelDescription</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:ModelDescription'</a>, <a>modelDescription_status</a> -
--   The status of the model.
--   
--   <a>$sel:evaluationResult:ModelDescription'</a>,
--   <a>modelDescription_evaluationResult</a> - The S3 location where
--   Amazon Lookout for Vision saves the performance metrics.
--   
--   <a>$sel:evaluationEndTimestamp:ModelDescription'</a>,
--   <a>modelDescription_evaluationEndTimestamp</a> - The unix timestamp
--   for the date and time that the evaluation ended.
--   
--   <a>$sel:modelArn:ModelDescription'</a>,
--   <a>modelDescription_modelArn</a> - The Amazon Resource Name (ARN) of
--   the model.
--   
--   <a>$sel:performance:ModelDescription'</a>,
--   <a>modelDescription_performance</a> - Performance metrics for the
--   model. Created during training.
--   
--   <a>$sel:kmsKeyId:ModelDescription'</a>,
--   <a>modelDescription_kmsKeyId</a> - The identifer for the AWS Key
--   Management Service (AWS KMS) key that was used to encrypt the model
--   during training.
--   
--   <a>$sel:statusMessage:ModelDescription'</a>,
--   <a>modelDescription_statusMessage</a> - The status message for the
--   model.
--   
--   <a>$sel:creationTimestamp:ModelDescription'</a>,
--   <a>modelDescription_creationTimestamp</a> - The unix timestamp for the
--   date and time that the model was created.
--   
--   <a>$sel:outputConfig:ModelDescription'</a>,
--   <a>modelDescription_outputConfig</a> - The S3 location where Amazon
--   Lookout for Vision saves model training files.
--   
--   <a>$sel:modelVersion:ModelDescription'</a>,
--   <a>modelDescription_modelVersion</a> - The version of the model
--   
--   <a>$sel:description:ModelDescription'</a>,
--   <a>modelDescription_description</a> - The description for the model.
--   
--   <a>$sel:evaluationManifest:ModelDescription'</a>,
--   <a>modelDescription_evaluationManifest</a> - The S3 location where
--   Amazon Lookout for Vision saves the manifest file that was used to
--   test the trained model and generate the performance scores.
newModelDescription :: ModelDescription

-- | The status of the model.
modelDescription_status :: Lens' ModelDescription (Maybe ModelStatus)

-- | The S3 location where Amazon Lookout for Vision saves the performance
--   metrics.
modelDescription_evaluationResult :: Lens' ModelDescription (Maybe OutputS3Object)

-- | The unix timestamp for the date and time that the evaluation ended.
modelDescription_evaluationEndTimestamp :: Lens' ModelDescription (Maybe UTCTime)

-- | The Amazon Resource Name (ARN) of the model.
modelDescription_modelArn :: Lens' ModelDescription (Maybe Text)

-- | Performance metrics for the model. Created during training.
modelDescription_performance :: Lens' ModelDescription (Maybe ModelPerformance)

-- | The identifer for the AWS Key Management Service (AWS KMS) key that
--   was used to encrypt the model during training.
modelDescription_kmsKeyId :: Lens' ModelDescription (Maybe Text)

-- | The status message for the model.
modelDescription_statusMessage :: Lens' ModelDescription (Maybe Text)

-- | The unix timestamp for the date and time that the model was created.
modelDescription_creationTimestamp :: Lens' ModelDescription (Maybe UTCTime)

-- | The S3 location where Amazon Lookout for Vision saves model training
--   files.
modelDescription_outputConfig :: Lens' ModelDescription (Maybe OutputConfig)

-- | The version of the model
modelDescription_modelVersion :: Lens' ModelDescription (Maybe Text)

-- | The description for the model.
modelDescription_description :: Lens' ModelDescription (Maybe Text)

-- | The S3 location where Amazon Lookout for Vision saves the manifest
--   file that was used to test the trained model and generate the
--   performance scores.
modelDescription_evaluationManifest :: Lens' ModelDescription (Maybe OutputS3Object)
instance GHC.Generics.Generic Amazonka.LookoutVision.Types.ModelDescription.ModelDescription
instance GHC.Show.Show Amazonka.LookoutVision.Types.ModelDescription.ModelDescription
instance GHC.Read.Read Amazonka.LookoutVision.Types.ModelDescription.ModelDescription
instance GHC.Classes.Eq Amazonka.LookoutVision.Types.ModelDescription.ModelDescription
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LookoutVision.Types.ModelDescription.ModelDescription
instance Data.Hashable.Class.Hashable Amazonka.LookoutVision.Types.ModelDescription.ModelDescription
instance Control.DeepSeq.NFData Amazonka.LookoutVision.Types.ModelDescription.ModelDescription


module Amazonka.LookoutVision.Types.Tag

-- | A key and value pair that is attached to the specified Amazon Lookout
--   for Vision model.
--   
--   <i>See:</i> <a>newTag</a> smart constructor.
data Tag
Tag' :: Text -> Text -> Tag

-- | The key of the tag that is attached to the specified model.
[$sel:key:Tag'] :: Tag -> Text

-- | The value of the tag that is attached to the specified model.
[$sel:value:Tag'] :: Tag -> Text

-- | Create a value of <a>Tag</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:key:Tag'</a>, <a>tag_key</a> - The key of the tag that is
--   attached to the specified model.
--   
--   <a>$sel:value:Tag'</a>, <a>tag_value</a> - The value of the tag that
--   is attached to the specified model.
newTag :: Text -> Text -> Tag

-- | The key of the tag that is attached to the specified model.
tag_key :: Lens' Tag Text

-- | The value of the tag that is attached to the specified model.
tag_value :: Lens' Tag Text
instance GHC.Generics.Generic Amazonka.LookoutVision.Types.Tag.Tag
instance GHC.Show.Show Amazonka.LookoutVision.Types.Tag.Tag
instance GHC.Read.Read Amazonka.LookoutVision.Types.Tag.Tag
instance GHC.Classes.Eq Amazonka.LookoutVision.Types.Tag.Tag
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LookoutVision.Types.Tag.Tag
instance Data.Hashable.Class.Hashable Amazonka.LookoutVision.Types.Tag.Tag
instance Control.DeepSeq.NFData Amazonka.LookoutVision.Types.Tag.Tag
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LookoutVision.Types.Tag.Tag


module Amazonka.LookoutVision.Types

-- | API version <tt>2020-11-20</tt> of the Amazon Lookout for Vision SDK
--   configuration.
defaultService :: Service

-- | An input validation error occured. For example, invalid characters in
--   a project name, or if a pagination token is invalid.
_ValidationException :: AsError a => Getting (First ServiceError) a ServiceError

-- | You are not authorized to perform the action.
_AccessDeniedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The update or deletion of a resource caused an inconsistent state.
_ConflictException :: AsError a => Getting (First ServiceError) a ServiceError

-- | A service quota was exceeded the allowed limit. For more information,
--   see Limits in Amazon Lookout for Vision in the Amazon Lookout for
--   Vision Developer Guide.
_ServiceQuotaExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Amazon Lookout for Vision is temporarily unable to process the
--   request. Try your call again.
_ThrottlingException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Amazon Lookout for Vision experienced a service issue. Try your call
--   again.
_InternalServerException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The resource could not be found.
_ResourceNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError
newtype DatasetStatus
DatasetStatus' :: Text -> DatasetStatus
[fromDatasetStatus] :: DatasetStatus -> Text
pattern DatasetStatus_CREATE_COMPLETE :: DatasetStatus
pattern DatasetStatus_CREATE_FAILED :: DatasetStatus
pattern DatasetStatus_CREATE_IN_PROGRESS :: DatasetStatus
pattern DatasetStatus_DELETE_COMPLETE :: DatasetStatus
pattern DatasetStatus_DELETE_FAILED :: DatasetStatus
pattern DatasetStatus_DELETE_IN_PROGRESS :: DatasetStatus
pattern DatasetStatus_UPDATE_COMPLETE :: DatasetStatus
pattern DatasetStatus_UPDATE_FAILED_ROLLBACK_COMPLETE :: DatasetStatus
pattern DatasetStatus_UPDATE_FAILED_ROLLBACK_IN_PROGRESS :: DatasetStatus
pattern DatasetStatus_UPDATE_IN_PROGRESS :: DatasetStatus
newtype ModelHostingStatus
ModelHostingStatus' :: Text -> ModelHostingStatus
[fromModelHostingStatus] :: ModelHostingStatus -> Text
pattern ModelHostingStatus_HOSTED :: ModelHostingStatus
pattern ModelHostingStatus_HOSTING_FAILED :: ModelHostingStatus
pattern ModelHostingStatus_STARTING_HOSTING :: ModelHostingStatus
pattern ModelHostingStatus_STOPPING_HOSTING :: ModelHostingStatus
pattern ModelHostingStatus_SYSTEM_UPDATING :: ModelHostingStatus
newtype ModelStatus
ModelStatus' :: Text -> ModelStatus
[fromModelStatus] :: ModelStatus -> Text
pattern ModelStatus_DELETING :: ModelStatus
pattern ModelStatus_HOSTED :: ModelStatus
pattern ModelStatus_HOSTING_FAILED :: ModelStatus
pattern ModelStatus_STARTING_HOSTING :: ModelStatus
pattern ModelStatus_STOPPING_HOSTING :: ModelStatus
pattern ModelStatus_SYSTEM_UPDATING :: ModelStatus
pattern ModelStatus_TRAINED :: ModelStatus
pattern ModelStatus_TRAINING :: ModelStatus
pattern ModelStatus_TRAINING_FAILED :: ModelStatus

-- | The description for a dataset. For more information, see
--   DescribeDataset.
--   
--   <i>See:</i> <a>newDatasetDescription</a> smart constructor.
data DatasetDescription
DatasetDescription' :: Maybe DatasetStatus -> Maybe DatasetImageStats -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe POSIX -> DatasetDescription

-- | The status of the dataset.
[$sel:status:DatasetDescription'] :: DatasetDescription -> Maybe DatasetStatus
[$sel:imageStats:DatasetDescription'] :: DatasetDescription -> Maybe DatasetImageStats

-- | The status message for the dataset.
[$sel:statusMessage:DatasetDescription'] :: DatasetDescription -> Maybe Text

-- | The Unix timestamp for the time and date that the dataset was created.
[$sel:creationTimestamp:DatasetDescription'] :: DatasetDescription -> Maybe POSIX

-- | The type of the dataset. The value <tt>train</tt> represents a
--   training dataset or single dataset project. The value <tt>test</tt>
--   represents a test dataset.
[$sel:datasetType:DatasetDescription'] :: DatasetDescription -> Maybe Text

-- | The name of the project that contains the dataset.
[$sel:projectName:DatasetDescription'] :: DatasetDescription -> Maybe Text

-- | The Unix timestamp for the date and time that the dataset was last
--   updated.
[$sel:lastUpdatedTimestamp:DatasetDescription'] :: DatasetDescription -> Maybe POSIX

-- | Create a value of <a>DatasetDescription</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:DatasetDescription'</a>,
--   <a>datasetDescription_status</a> - The status of the dataset.
--   
--   <a>$sel:imageStats:DatasetDescription'</a>,
--   <a>datasetDescription_imageStats</a> -
--   
--   <a>$sel:statusMessage:DatasetDescription'</a>,
--   <a>datasetDescription_statusMessage</a> - The status message for the
--   dataset.
--   
--   <a>$sel:creationTimestamp:DatasetDescription'</a>,
--   <a>datasetDescription_creationTimestamp</a> - The Unix timestamp for
--   the time and date that the dataset was created.
--   
--   <a>$sel:datasetType:DatasetDescription'</a>,
--   <a>datasetDescription_datasetType</a> - The type of the dataset. The
--   value <tt>train</tt> represents a training dataset or single dataset
--   project. The value <tt>test</tt> represents a test dataset.
--   
--   <a>$sel:projectName:DatasetDescription'</a>,
--   <a>datasetDescription_projectName</a> - The name of the project that
--   contains the dataset.
--   
--   <a>$sel:lastUpdatedTimestamp:DatasetDescription'</a>,
--   <a>datasetDescription_lastUpdatedTimestamp</a> - The Unix timestamp
--   for the date and time that the dataset was last updated.
newDatasetDescription :: DatasetDescription

-- | The status of the dataset.
datasetDescription_status :: Lens' DatasetDescription (Maybe DatasetStatus)

datasetDescription_imageStats :: Lens' DatasetDescription (Maybe DatasetImageStats)

-- | The status message for the dataset.
datasetDescription_statusMessage :: Lens' DatasetDescription (Maybe Text)

-- | The Unix timestamp for the time and date that the dataset was created.
datasetDescription_creationTimestamp :: Lens' DatasetDescription (Maybe UTCTime)

-- | The type of the dataset. The value <tt>train</tt> represents a
--   training dataset or single dataset project. The value <tt>test</tt>
--   represents a test dataset.
datasetDescription_datasetType :: Lens' DatasetDescription (Maybe Text)

-- | The name of the project that contains the dataset.
datasetDescription_projectName :: Lens' DatasetDescription (Maybe Text)

-- | The Unix timestamp for the date and time that the dataset was last
--   updated.
datasetDescription_lastUpdatedTimestamp :: Lens' DatasetDescription (Maybe UTCTime)

-- | Location information about a manifest file. You can use a manifest
--   file to create a dataset.
--   
--   <i>See:</i> <a>newDatasetGroundTruthManifest</a> smart constructor.
data DatasetGroundTruthManifest
DatasetGroundTruthManifest' :: Maybe InputS3Object -> DatasetGroundTruthManifest

-- | The S3 bucket location for the manifest file.
[$sel:s3Object:DatasetGroundTruthManifest'] :: DatasetGroundTruthManifest -> Maybe InputS3Object

-- | Create a value of <a>DatasetGroundTruthManifest</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:s3Object:DatasetGroundTruthManifest'</a>,
--   <a>datasetGroundTruthManifest_s3Object</a> - The S3 bucket location
--   for the manifest file.
newDatasetGroundTruthManifest :: DatasetGroundTruthManifest

-- | The S3 bucket location for the manifest file.
datasetGroundTruthManifest_s3Object :: Lens' DatasetGroundTruthManifest (Maybe InputS3Object)

-- | Statistics about the images in a dataset.
--   
--   <i>See:</i> <a>newDatasetImageStats</a> smart constructor.
data DatasetImageStats
DatasetImageStats' :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> DatasetImageStats

-- | The total number of images labeled as normal.
[$sel:normal:DatasetImageStats'] :: DatasetImageStats -> Maybe Int

-- | the total number of images labeled as an anomaly.
[$sel:anomaly:DatasetImageStats'] :: DatasetImageStats -> Maybe Int

-- | The total number of labeled images.
[$sel:labeled:DatasetImageStats'] :: DatasetImageStats -> Maybe Int

-- | The total number of images in the dataset.
[$sel:total:DatasetImageStats'] :: DatasetImageStats -> Maybe Int

-- | Create a value of <a>DatasetImageStats</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:normal:DatasetImageStats'</a>, <a>datasetImageStats_normal</a>
--   - The total number of images labeled as normal.
--   
--   <a>$sel:anomaly:DatasetImageStats'</a>,
--   <a>datasetImageStats_anomaly</a> - the total number of images labeled
--   as an anomaly.
--   
--   <a>$sel:labeled:DatasetImageStats'</a>,
--   <a>datasetImageStats_labeled</a> - The total number of labeled images.
--   
--   <a>$sel:total:DatasetImageStats'</a>, <a>datasetImageStats_total</a> -
--   The total number of images in the dataset.
newDatasetImageStats :: DatasetImageStats

-- | The total number of images labeled as normal.
datasetImageStats_normal :: Lens' DatasetImageStats (Maybe Int)

-- | the total number of images labeled as an anomaly.
datasetImageStats_anomaly :: Lens' DatasetImageStats (Maybe Int)

-- | The total number of labeled images.
datasetImageStats_labeled :: Lens' DatasetImageStats (Maybe Int)

-- | The total number of images in the dataset.
datasetImageStats_total :: Lens' DatasetImageStats (Maybe Int)

-- | Sumary information for an Amazon Lookout for Vision dataset.
--   
--   <i>See:</i> <a>newDatasetMetadata</a> smart constructor.
data DatasetMetadata
DatasetMetadata' :: Maybe DatasetStatus -> Maybe Text -> Maybe POSIX -> Maybe Text -> DatasetMetadata

-- | The status for the dataset.
[$sel:status:DatasetMetadata'] :: DatasetMetadata -> Maybe DatasetStatus

-- | The status message for the dataset.
[$sel:statusMessage:DatasetMetadata'] :: DatasetMetadata -> Maybe Text

-- | The Unix timestamp for the date and time that the dataset was created.
[$sel:creationTimestamp:DatasetMetadata'] :: DatasetMetadata -> Maybe POSIX

-- | The type of the dataset.
[$sel:datasetType:DatasetMetadata'] :: DatasetMetadata -> Maybe Text

-- | Create a value of <a>DatasetMetadata</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:DatasetMetadata'</a>, <a>datasetMetadata_status</a> -
--   The status for the dataset.
--   
--   <a>$sel:statusMessage:DatasetMetadata'</a>,
--   <a>datasetMetadata_statusMessage</a> - The status message for the
--   dataset.
--   
--   <a>$sel:creationTimestamp:DatasetMetadata'</a>,
--   <a>datasetMetadata_creationTimestamp</a> - The Unix timestamp for the
--   date and time that the dataset was created.
--   
--   <a>$sel:datasetType:DatasetMetadata'</a>,
--   <a>datasetMetadata_datasetType</a> - The type of the dataset.
newDatasetMetadata :: DatasetMetadata

-- | The status for the dataset.
datasetMetadata_status :: Lens' DatasetMetadata (Maybe DatasetStatus)

-- | The status message for the dataset.
datasetMetadata_statusMessage :: Lens' DatasetMetadata (Maybe Text)

-- | The Unix timestamp for the date and time that the dataset was created.
datasetMetadata_creationTimestamp :: Lens' DatasetMetadata (Maybe UTCTime)

-- | The type of the dataset.
datasetMetadata_datasetType :: Lens' DatasetMetadata (Maybe Text)

-- | Information about the location of a manifest file that Amazon Lookout
--   for Vision uses to to create a dataset.
--   
--   <i>See:</i> <a>newDatasetSource</a> smart constructor.
data DatasetSource
DatasetSource' :: Maybe DatasetGroundTruthManifest -> DatasetSource

-- | Location information for the manifest file.
[$sel:groundTruthManifest:DatasetSource'] :: DatasetSource -> Maybe DatasetGroundTruthManifest

-- | Create a value of <a>DatasetSource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:groundTruthManifest:DatasetSource'</a>,
--   <a>datasetSource_groundTruthManifest</a> - Location information for
--   the manifest file.
newDatasetSource :: DatasetSource

-- | Location information for the manifest file.
datasetSource_groundTruthManifest :: Lens' DatasetSource (Maybe DatasetGroundTruthManifest)

-- | The prediction results from a call to DetectAnomalies.
--   
--   <i>See:</i> <a>newDetectAnomalyResult</a> smart constructor.
data DetectAnomalyResult
DetectAnomalyResult' :: Maybe Bool -> Maybe Double -> Maybe ImageSource -> DetectAnomalyResult

-- | True if the image contains an anomaly, otherwise false.
[$sel:isAnomalous:DetectAnomalyResult'] :: DetectAnomalyResult -> Maybe Bool

-- | The confidence that Amazon Lookout for Vision has in the accuracy of
--   the prediction.
[$sel:confidence:DetectAnomalyResult'] :: DetectAnomalyResult -> Maybe Double

-- | The source of the image that was analyzed. <tt>direct</tt> means that
--   the images was supplied from the local computer. No other values are
--   supported.
[$sel:source:DetectAnomalyResult'] :: DetectAnomalyResult -> Maybe ImageSource

-- | Create a value of <a>DetectAnomalyResult</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:isAnomalous:DetectAnomalyResult'</a>,
--   <a>detectAnomalyResult_isAnomalous</a> - True if the image contains an
--   anomaly, otherwise false.
--   
--   <a>$sel:confidence:DetectAnomalyResult'</a>,
--   <a>detectAnomalyResult_confidence</a> - The confidence that Amazon
--   Lookout for Vision has in the accuracy of the prediction.
--   
--   <a>$sel:source:DetectAnomalyResult'</a>,
--   <a>detectAnomalyResult_source</a> - The source of the image that was
--   analyzed. <tt>direct</tt> means that the images was supplied from the
--   local computer. No other values are supported.
newDetectAnomalyResult :: DetectAnomalyResult

-- | True if the image contains an anomaly, otherwise false.
detectAnomalyResult_isAnomalous :: Lens' DetectAnomalyResult (Maybe Bool)

-- | The confidence that Amazon Lookout for Vision has in the accuracy of
--   the prediction.
detectAnomalyResult_confidence :: Lens' DetectAnomalyResult (Maybe Double)

-- | The source of the image that was analyzed. <tt>direct</tt> means that
--   the images was supplied from the local computer. No other values are
--   supported.
detectAnomalyResult_source :: Lens' DetectAnomalyResult (Maybe ImageSource)

-- | The source for an image.
--   
--   <i>See:</i> <a>newImageSource</a> smart constructor.
data ImageSource
ImageSource' :: Maybe Text -> ImageSource

-- | The type of the image.
[$sel:type':ImageSource'] :: ImageSource -> Maybe Text

-- | Create a value of <a>ImageSource</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:type':ImageSource'</a>, <a>imageSource_type</a> - The type of
--   the image.
newImageSource :: ImageSource

-- | The type of the image.
imageSource_type :: Lens' ImageSource (Maybe Text)

-- | Amazon S3 Location information for an input manifest file.
--   
--   <i>See:</i> <a>newInputS3Object</a> smart constructor.
data InputS3Object
InputS3Object' :: Maybe Text -> Text -> Text -> InputS3Object

-- | The version ID of the bucket.
[$sel:versionId:InputS3Object'] :: InputS3Object -> Maybe Text

-- | The Amazon S3 bucket that contains the manifest.
[$sel:bucket:InputS3Object'] :: InputS3Object -> Text

-- | The name and location of the manifest file withiin the bucket.
[$sel:key:InputS3Object'] :: InputS3Object -> Text

-- | Create a value of <a>InputS3Object</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:versionId:InputS3Object'</a>, <a>inputS3Object_versionId</a> -
--   The version ID of the bucket.
--   
--   <a>$sel:bucket:InputS3Object'</a>, <a>inputS3Object_bucket</a> - The
--   Amazon S3 bucket that contains the manifest.
--   
--   <a>$sel:key:InputS3Object'</a>, <a>inputS3Object_key</a> - The name
--   and location of the manifest file withiin the bucket.
newInputS3Object :: Text -> Text -> InputS3Object

-- | The version ID of the bucket.
inputS3Object_versionId :: Lens' InputS3Object (Maybe Text)

-- | The Amazon S3 bucket that contains the manifest.
inputS3Object_bucket :: Lens' InputS3Object Text

-- | The name and location of the manifest file withiin the bucket.
inputS3Object_key :: Lens' InputS3Object Text

-- | Describes an Amazon Lookout for Vision model.
--   
--   <i>See:</i> <a>newModelDescription</a> smart constructor.
data ModelDescription
ModelDescription' :: Maybe ModelStatus -> Maybe OutputS3Object -> Maybe POSIX -> Maybe Text -> Maybe ModelPerformance -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe OutputConfig -> Maybe Text -> Maybe Text -> Maybe OutputS3Object -> ModelDescription

-- | The status of the model.
[$sel:status:ModelDescription'] :: ModelDescription -> Maybe ModelStatus

-- | The S3 location where Amazon Lookout for Vision saves the performance
--   metrics.
[$sel:evaluationResult:ModelDescription'] :: ModelDescription -> Maybe OutputS3Object

-- | The unix timestamp for the date and time that the evaluation ended.
[$sel:evaluationEndTimestamp:ModelDescription'] :: ModelDescription -> Maybe POSIX

-- | The Amazon Resource Name (ARN) of the model.
[$sel:modelArn:ModelDescription'] :: ModelDescription -> Maybe Text

-- | Performance metrics for the model. Created during training.
[$sel:performance:ModelDescription'] :: ModelDescription -> Maybe ModelPerformance

-- | The identifer for the AWS Key Management Service (AWS KMS) key that
--   was used to encrypt the model during training.
[$sel:kmsKeyId:ModelDescription'] :: ModelDescription -> Maybe Text

-- | The status message for the model.
[$sel:statusMessage:ModelDescription'] :: ModelDescription -> Maybe Text

-- | The unix timestamp for the date and time that the model was created.
[$sel:creationTimestamp:ModelDescription'] :: ModelDescription -> Maybe POSIX

-- | The S3 location where Amazon Lookout for Vision saves model training
--   files.
[$sel:outputConfig:ModelDescription'] :: ModelDescription -> Maybe OutputConfig

-- | The version of the model
[$sel:modelVersion:ModelDescription'] :: ModelDescription -> Maybe Text

-- | The description for the model.
[$sel:description:ModelDescription'] :: ModelDescription -> Maybe Text

-- | The S3 location where Amazon Lookout for Vision saves the manifest
--   file that was used to test the trained model and generate the
--   performance scores.
[$sel:evaluationManifest:ModelDescription'] :: ModelDescription -> Maybe OutputS3Object

-- | Create a value of <a>ModelDescription</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:ModelDescription'</a>, <a>modelDescription_status</a> -
--   The status of the model.
--   
--   <a>$sel:evaluationResult:ModelDescription'</a>,
--   <a>modelDescription_evaluationResult</a> - The S3 location where
--   Amazon Lookout for Vision saves the performance metrics.
--   
--   <a>$sel:evaluationEndTimestamp:ModelDescription'</a>,
--   <a>modelDescription_evaluationEndTimestamp</a> - The unix timestamp
--   for the date and time that the evaluation ended.
--   
--   <a>$sel:modelArn:ModelDescription'</a>,
--   <a>modelDescription_modelArn</a> - The Amazon Resource Name (ARN) of
--   the model.
--   
--   <a>$sel:performance:ModelDescription'</a>,
--   <a>modelDescription_performance</a> - Performance metrics for the
--   model. Created during training.
--   
--   <a>$sel:kmsKeyId:ModelDescription'</a>,
--   <a>modelDescription_kmsKeyId</a> - The identifer for the AWS Key
--   Management Service (AWS KMS) key that was used to encrypt the model
--   during training.
--   
--   <a>$sel:statusMessage:ModelDescription'</a>,
--   <a>modelDescription_statusMessage</a> - The status message for the
--   model.
--   
--   <a>$sel:creationTimestamp:ModelDescription'</a>,
--   <a>modelDescription_creationTimestamp</a> - The unix timestamp for the
--   date and time that the model was created.
--   
--   <a>$sel:outputConfig:ModelDescription'</a>,
--   <a>modelDescription_outputConfig</a> - The S3 location where Amazon
--   Lookout for Vision saves model training files.
--   
--   <a>$sel:modelVersion:ModelDescription'</a>,
--   <a>modelDescription_modelVersion</a> - The version of the model
--   
--   <a>$sel:description:ModelDescription'</a>,
--   <a>modelDescription_description</a> - The description for the model.
--   
--   <a>$sel:evaluationManifest:ModelDescription'</a>,
--   <a>modelDescription_evaluationManifest</a> - The S3 location where
--   Amazon Lookout for Vision saves the manifest file that was used to
--   test the trained model and generate the performance scores.
newModelDescription :: ModelDescription

-- | The status of the model.
modelDescription_status :: Lens' ModelDescription (Maybe ModelStatus)

-- | The S3 location where Amazon Lookout for Vision saves the performance
--   metrics.
modelDescription_evaluationResult :: Lens' ModelDescription (Maybe OutputS3Object)

-- | The unix timestamp for the date and time that the evaluation ended.
modelDescription_evaluationEndTimestamp :: Lens' ModelDescription (Maybe UTCTime)

-- | The Amazon Resource Name (ARN) of the model.
modelDescription_modelArn :: Lens' ModelDescription (Maybe Text)

-- | Performance metrics for the model. Created during training.
modelDescription_performance :: Lens' ModelDescription (Maybe ModelPerformance)

-- | The identifer for the AWS Key Management Service (AWS KMS) key that
--   was used to encrypt the model during training.
modelDescription_kmsKeyId :: Lens' ModelDescription (Maybe Text)

-- | The status message for the model.
modelDescription_statusMessage :: Lens' ModelDescription (Maybe Text)

-- | The unix timestamp for the date and time that the model was created.
modelDescription_creationTimestamp :: Lens' ModelDescription (Maybe UTCTime)

-- | The S3 location where Amazon Lookout for Vision saves model training
--   files.
modelDescription_outputConfig :: Lens' ModelDescription (Maybe OutputConfig)

-- | The version of the model
modelDescription_modelVersion :: Lens' ModelDescription (Maybe Text)

-- | The description for the model.
modelDescription_description :: Lens' ModelDescription (Maybe Text)

-- | The S3 location where Amazon Lookout for Vision saves the manifest
--   file that was used to test the trained model and generate the
--   performance scores.
modelDescription_evaluationManifest :: Lens' ModelDescription (Maybe OutputS3Object)

-- | Describes an Amazon Lookout for Vision model.
--   
--   <i>See:</i> <a>newModelMetadata</a> smart constructor.
data ModelMetadata
ModelMetadata' :: Maybe ModelStatus -> Maybe Text -> Maybe ModelPerformance -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe Text -> ModelMetadata

-- | The status of the model.
[$sel:status:ModelMetadata'] :: ModelMetadata -> Maybe ModelStatus

-- | The Amazon Resource Name (ARN) of the model.
[$sel:modelArn:ModelMetadata'] :: ModelMetadata -> Maybe Text

-- | Performance metrics for the model. Not available until training has
--   successfully completed.
[$sel:performance:ModelMetadata'] :: ModelMetadata -> Maybe ModelPerformance

-- | The status message for the model.
[$sel:statusMessage:ModelMetadata'] :: ModelMetadata -> Maybe Text

-- | The unix timestamp for the date and time that the model was created.
[$sel:creationTimestamp:ModelMetadata'] :: ModelMetadata -> Maybe POSIX

-- | The version of the model.
[$sel:modelVersion:ModelMetadata'] :: ModelMetadata -> Maybe Text

-- | The description for the model.
[$sel:description:ModelMetadata'] :: ModelMetadata -> Maybe Text

-- | Create a value of <a>ModelMetadata</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:ModelMetadata'</a>, <a>modelMetadata_status</a> - The
--   status of the model.
--   
--   <a>$sel:modelArn:ModelMetadata'</a>, <a>modelMetadata_modelArn</a> -
--   The Amazon Resource Name (ARN) of the model.
--   
--   <a>$sel:performance:ModelMetadata'</a>,
--   <a>modelMetadata_performance</a> - Performance metrics for the model.
--   Not available until training has successfully completed.
--   
--   <a>$sel:statusMessage:ModelMetadata'</a>,
--   <a>modelMetadata_statusMessage</a> - The status message for the model.
--   
--   <a>$sel:creationTimestamp:ModelMetadata'</a>,
--   <a>modelMetadata_creationTimestamp</a> - The unix timestamp for the
--   date and time that the model was created.
--   
--   <a>$sel:modelVersion:ModelMetadata'</a>,
--   <a>modelMetadata_modelVersion</a> - The version of the model.
--   
--   <a>$sel:description:ModelMetadata'</a>,
--   <a>modelMetadata_description</a> - The description for the model.
newModelMetadata :: ModelMetadata

-- | The status of the model.
modelMetadata_status :: Lens' ModelMetadata (Maybe ModelStatus)

-- | The Amazon Resource Name (ARN) of the model.
modelMetadata_modelArn :: Lens' ModelMetadata (Maybe Text)

-- | Performance metrics for the model. Not available until training has
--   successfully completed.
modelMetadata_performance :: Lens' ModelMetadata (Maybe ModelPerformance)

-- | The status message for the model.
modelMetadata_statusMessage :: Lens' ModelMetadata (Maybe Text)

-- | The unix timestamp for the date and time that the model was created.
modelMetadata_creationTimestamp :: Lens' ModelMetadata (Maybe UTCTime)

-- | The version of the model.
modelMetadata_modelVersion :: Lens' ModelMetadata (Maybe Text)

-- | The description for the model.
modelMetadata_description :: Lens' ModelMetadata (Maybe Text)

-- | Information about the evaluation performance of a trained model.
--   
--   <i>See:</i> <a>newModelPerformance</a> smart constructor.
data ModelPerformance
ModelPerformance' :: Maybe Double -> Maybe Double -> Maybe Double -> ModelPerformance

-- | The overall recall metric value for the trained model.
[$sel:recall:ModelPerformance'] :: ModelPerformance -> Maybe Double

-- | The overall precision metric value for the trained model.
[$sel:precision:ModelPerformance'] :: ModelPerformance -> Maybe Double

-- | The overall F1 score metric for the trained model.
[$sel:f1Score:ModelPerformance'] :: ModelPerformance -> Maybe Double

-- | Create a value of <a>ModelPerformance</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:recall:ModelPerformance'</a>, <a>modelPerformance_recall</a> -
--   The overall recall metric value for the trained model.
--   
--   <a>$sel:precision:ModelPerformance'</a>,
--   <a>modelPerformance_precision</a> - The overall precision metric value
--   for the trained model.
--   
--   <a>$sel:f1Score:ModelPerformance'</a>, <a>modelPerformance_f1Score</a>
--   - The overall F1 score metric for the trained model.
newModelPerformance :: ModelPerformance

-- | The overall recall metric value for the trained model.
modelPerformance_recall :: Lens' ModelPerformance (Maybe Double)

-- | The overall precision metric value for the trained model.
modelPerformance_precision :: Lens' ModelPerformance (Maybe Double)

-- | The overall F1 score metric for the trained model.
modelPerformance_f1Score :: Lens' ModelPerformance (Maybe Double)

-- | The S3 location where Amazon Lookout for Vision saves model training
--   files.
--   
--   <i>See:</i> <a>newOutputConfig</a> smart constructor.
data OutputConfig
OutputConfig' :: S3Location -> OutputConfig

-- | The S3 location for the output.
[$sel:s3Location:OutputConfig'] :: OutputConfig -> S3Location

-- | Create a value of <a>OutputConfig</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:s3Location:OutputConfig'</a>, <a>outputConfig_s3Location</a> -
--   The S3 location for the output.
newOutputConfig :: S3Location -> OutputConfig

-- | The S3 location for the output.
outputConfig_s3Location :: Lens' OutputConfig S3Location

-- | The S3 location where Amazon Lookout for Vision saves training output.
--   
--   <i>See:</i> <a>newOutputS3Object</a> smart constructor.
data OutputS3Object
OutputS3Object' :: Text -> Text -> OutputS3Object

-- | The bucket that contains the training output.
[$sel:bucket:OutputS3Object'] :: OutputS3Object -> Text

-- | The location of the training output in the bucket.
[$sel:key:OutputS3Object'] :: OutputS3Object -> Text

-- | Create a value of <a>OutputS3Object</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:bucket:OutputS3Object'</a>, <a>outputS3Object_bucket</a> - The
--   bucket that contains the training output.
--   
--   <a>$sel:key:OutputS3Object'</a>, <a>outputS3Object_key</a> - The
--   location of the training output in the bucket.
newOutputS3Object :: Text -> Text -> OutputS3Object

-- | The bucket that contains the training output.
outputS3Object_bucket :: Lens' OutputS3Object Text

-- | The location of the training output in the bucket.
outputS3Object_key :: Lens' OutputS3Object Text

-- | Describe an Amazon Lookout for Vision project. For more information,
--   see DescribeProject.
--   
--   <i>See:</i> <a>newProjectDescription</a> smart constructor.
data ProjectDescription
ProjectDescription' :: Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe [DatasetMetadata] -> ProjectDescription

-- | The unix timestamp for the date and time that the project was created.
[$sel:creationTimestamp:ProjectDescription'] :: ProjectDescription -> Maybe POSIX

-- | The name of the project.
[$sel:projectName:ProjectDescription'] :: ProjectDescription -> Maybe Text

-- | The Amazon Resource Name (ARN) of the project.
[$sel:projectArn:ProjectDescription'] :: ProjectDescription -> Maybe Text

-- | A list of datasets in the project.
[$sel:datasets:ProjectDescription'] :: ProjectDescription -> Maybe [DatasetMetadata]

-- | Create a value of <a>ProjectDescription</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:creationTimestamp:ProjectDescription'</a>,
--   <a>projectDescription_creationTimestamp</a> - The unix timestamp for
--   the date and time that the project was created.
--   
--   <a>$sel:projectName:ProjectDescription'</a>,
--   <a>projectDescription_projectName</a> - The name of the project.
--   
--   <a>$sel:projectArn:ProjectDescription'</a>,
--   <a>projectDescription_projectArn</a> - The Amazon Resource Name (ARN)
--   of the project.
--   
--   <a>$sel:datasets:ProjectDescription'</a>,
--   <a>projectDescription_datasets</a> - A list of datasets in the
--   project.
newProjectDescription :: ProjectDescription

-- | The unix timestamp for the date and time that the project was created.
projectDescription_creationTimestamp :: Lens' ProjectDescription (Maybe UTCTime)

-- | The name of the project.
projectDescription_projectName :: Lens' ProjectDescription (Maybe Text)

-- | The Amazon Resource Name (ARN) of the project.
projectDescription_projectArn :: Lens' ProjectDescription (Maybe Text)

-- | A list of datasets in the project.
projectDescription_datasets :: Lens' ProjectDescription (Maybe [DatasetMetadata])

-- | Metadata about an Amazon Lookout for Vision project.
--   
--   <i>See:</i> <a>newProjectMetadata</a> smart constructor.
data ProjectMetadata
ProjectMetadata' :: Maybe POSIX -> Maybe Text -> Maybe Text -> ProjectMetadata

-- | The unix timestamp for the date and time that the project was created.
[$sel:creationTimestamp:ProjectMetadata'] :: ProjectMetadata -> Maybe POSIX

-- | The name of the project.
[$sel:projectName:ProjectMetadata'] :: ProjectMetadata -> Maybe Text

-- | The Amazon Resource Name (ARN) of the project.
[$sel:projectArn:ProjectMetadata'] :: ProjectMetadata -> Maybe Text

-- | Create a value of <a>ProjectMetadata</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:creationTimestamp:ProjectMetadata'</a>,
--   <a>projectMetadata_creationTimestamp</a> - The unix timestamp for the
--   date and time that the project was created.
--   
--   <a>$sel:projectName:ProjectMetadata'</a>,
--   <a>projectMetadata_projectName</a> - The name of the project.
--   
--   <a>$sel:projectArn:ProjectMetadata'</a>,
--   <a>projectMetadata_projectArn</a> - The Amazon Resource Name (ARN) of
--   the project.
newProjectMetadata :: ProjectMetadata

-- | The unix timestamp for the date and time that the project was created.
projectMetadata_creationTimestamp :: Lens' ProjectMetadata (Maybe UTCTime)

-- | The name of the project.
projectMetadata_projectName :: Lens' ProjectMetadata (Maybe Text)

-- | The Amazon Resource Name (ARN) of the project.
projectMetadata_projectArn :: Lens' ProjectMetadata (Maybe Text)

-- | Information about the location training output.
--   
--   <i>See:</i> <a>newS3Location</a> smart constructor.
data S3Location
S3Location' :: Maybe Text -> Text -> S3Location

-- | The path of the folder, within the S3 bucket, that contains the
--   training output.
[$sel:prefix:S3Location'] :: S3Location -> Maybe Text

-- | The S3 bucket that contains the training output.
[$sel:bucket:S3Location'] :: S3Location -> Text

-- | Create a value of <a>S3Location</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:prefix:S3Location'</a>, <a>s3Location_prefix</a> - The path of
--   the folder, within the S3 bucket, that contains the training output.
--   
--   <a>$sel:bucket:S3Location'</a>, <a>s3Location_bucket</a> - The S3
--   bucket that contains the training output.
newS3Location :: Text -> S3Location

-- | The path of the folder, within the S3 bucket, that contains the
--   training output.
s3Location_prefix :: Lens' S3Location (Maybe Text)

-- | The S3 bucket that contains the training output.
s3Location_bucket :: Lens' S3Location Text

-- | A key and value pair that is attached to the specified Amazon Lookout
--   for Vision model.
--   
--   <i>See:</i> <a>newTag</a> smart constructor.
data Tag
Tag' :: Text -> Text -> Tag

-- | The key of the tag that is attached to the specified model.
[$sel:key:Tag'] :: Tag -> Text

-- | The value of the tag that is attached to the specified model.
[$sel:value:Tag'] :: Tag -> Text

-- | Create a value of <a>Tag</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:key:Tag'</a>, <a>tag_key</a> - The key of the tag that is
--   attached to the specified model.
--   
--   <a>$sel:value:Tag'</a>, <a>tag_value</a> - The value of the tag that
--   is attached to the specified model.
newTag :: Text -> Text -> Tag

-- | The key of the tag that is attached to the specified model.
tag_key :: Lens' Tag Text

-- | The value of the tag that is attached to the specified model.
tag_value :: Lens' Tag Text


-- | Adds one or more key-value tags to an Amazon Lookout for Vision model.
--   For more information, see <i>Tagging a model</i> in the /Amazon
--   Lookout for Vision Developer Guide/.
--   
--   This operation requires permissions to perform the
--   <tt>lookoutvision:TagResource</tt> operation.
module Amazonka.LookoutVision.TagResource

-- | <i>See:</i> <a>newTagResource</a> smart constructor.
data TagResource
TagResource' :: Text -> [Tag] -> TagResource

-- | The Amazon Resource Name (ARN) of the model to assign the tags.
[$sel:resourceArn:TagResource'] :: TagResource -> Text

-- | The key-value tags to assign to the model.
[$sel:tags:TagResource'] :: TagResource -> [Tag]

-- | Create a value of <a>TagResource</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:TagResource'</a>, <a>tagResource_resourceArn</a> -
--   The Amazon Resource Name (ARN) of the model to assign the tags.
--   
--   <a>$sel:tags:TagResource'</a>, <a>tagResource_tags</a> - The key-value
--   tags to assign to the model.
newTagResource :: Text -> TagResource

-- | The Amazon Resource Name (ARN) of the model to assign the tags.
tagResource_resourceArn :: Lens' TagResource Text

-- | The key-value tags to assign to the model.
tagResource_tags :: Lens' TagResource [Tag]

-- | <i>See:</i> <a>newTagResourceResponse</a> smart constructor.
data TagResourceResponse
TagResourceResponse' :: Int -> TagResourceResponse

-- | The response's http status code.
[$sel:httpStatus:TagResourceResponse'] :: TagResourceResponse -> Int

-- | Create a value of <a>TagResourceResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:TagResourceResponse'</a>,
--   <a>tagResourceResponse_httpStatus</a> - The response's http status
--   code.
newTagResourceResponse :: Int -> TagResourceResponse

-- | The response's http status code.
tagResourceResponse_httpStatus :: Lens' TagResourceResponse Int
instance GHC.Generics.Generic Amazonka.LookoutVision.TagResource.TagResource
instance GHC.Show.Show Amazonka.LookoutVision.TagResource.TagResource
instance GHC.Read.Read Amazonka.LookoutVision.TagResource.TagResource
instance GHC.Classes.Eq Amazonka.LookoutVision.TagResource.TagResource
instance GHC.Generics.Generic Amazonka.LookoutVision.TagResource.TagResourceResponse
instance GHC.Show.Show Amazonka.LookoutVision.TagResource.TagResourceResponse
instance GHC.Read.Read Amazonka.LookoutVision.TagResource.TagResourceResponse
instance GHC.Classes.Eq Amazonka.LookoutVision.TagResource.TagResourceResponse
instance Amazonka.Types.AWSRequest Amazonka.LookoutVision.TagResource.TagResource
instance Control.DeepSeq.NFData Amazonka.LookoutVision.TagResource.TagResourceResponse
instance Data.Hashable.Class.Hashable Amazonka.LookoutVision.TagResource.TagResource
instance Control.DeepSeq.NFData Amazonka.LookoutVision.TagResource.TagResource
instance Amazonka.Data.Headers.ToHeaders Amazonka.LookoutVision.TagResource.TagResource
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LookoutVision.TagResource.TagResource
instance Amazonka.Data.Path.ToPath Amazonka.LookoutVision.TagResource.TagResource
instance Amazonka.Data.Query.ToQuery Amazonka.LookoutVision.TagResource.TagResource


-- | Stops the hosting of a running model. The operation might take a while
--   to complete. To check the current status, call DescribeModel.
--   
--   After the model hosting stops, the <tt>Status</tt> of the model is
--   <tt>TRAINED</tt>.
--   
--   This operation requires permissions to perform the
--   <tt>lookoutvision:StopModel</tt> operation.
module Amazonka.LookoutVision.StopModel

-- | <i>See:</i> <a>newStopModel</a> smart constructor.
data StopModel
StopModel' :: Maybe Text -> Text -> Text -> StopModel

-- | ClientToken is an idempotency token that ensures a call to
--   <tt>StopModel</tt> completes only once. You choose the value to pass.
--   For example, An issue, such as an network outage, might prevent you
--   from getting a response from <tt>StopModel</tt>. In this case, safely
--   retry your call to <tt>StopModel</tt> by using the same
--   <tt>ClientToken</tt> parameter value. An error occurs if the other
--   input parameters are not the same as in the first request. Using a
--   different value for <tt>ClientToken</tt> is considered a new call to
--   <tt>StopModel</tt>. An idempotency token is active for 8 hours.
[$sel:clientToken:StopModel'] :: StopModel -> Maybe Text

-- | The name of the project that contains the model that you want to stop.
[$sel:projectName:StopModel'] :: StopModel -> Text

-- | The version of the model that you want to stop.
[$sel:modelVersion:StopModel'] :: StopModel -> Text

-- | Create a value of <a>StopModel</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:clientToken:StopModel'</a>, <a>stopModel_clientToken</a> -
--   ClientToken is an idempotency token that ensures a call to
--   <tt>StopModel</tt> completes only once. You choose the value to pass.
--   For example, An issue, such as an network outage, might prevent you
--   from getting a response from <tt>StopModel</tt>. In this case, safely
--   retry your call to <tt>StopModel</tt> by using the same
--   <tt>ClientToken</tt> parameter value. An error occurs if the other
--   input parameters are not the same as in the first request. Using a
--   different value for <tt>ClientToken</tt> is considered a new call to
--   <tt>StopModel</tt>. An idempotency token is active for 8 hours.
--   
--   <a>$sel:projectName:StopModel'</a>, <a>stopModel_projectName</a> - The
--   name of the project that contains the model that you want to stop.
--   
--   <a>$sel:modelVersion:StopModel'</a>, <a>stopModel_modelVersion</a> -
--   The version of the model that you want to stop.
newStopModel :: Text -> Text -> StopModel

-- | ClientToken is an idempotency token that ensures a call to
--   <tt>StopModel</tt> completes only once. You choose the value to pass.
--   For example, An issue, such as an network outage, might prevent you
--   from getting a response from <tt>StopModel</tt>. In this case, safely
--   retry your call to <tt>StopModel</tt> by using the same
--   <tt>ClientToken</tt> parameter value. An error occurs if the other
--   input parameters are not the same as in the first request. Using a
--   different value for <tt>ClientToken</tt> is considered a new call to
--   <tt>StopModel</tt>. An idempotency token is active for 8 hours.
stopModel_clientToken :: Lens' StopModel (Maybe Text)

-- | The name of the project that contains the model that you want to stop.
stopModel_projectName :: Lens' StopModel Text

-- | The version of the model that you want to stop.
stopModel_modelVersion :: Lens' StopModel Text

-- | <i>See:</i> <a>newStopModelResponse</a> smart constructor.
data StopModelResponse
StopModelResponse' :: Maybe ModelHostingStatus -> Int -> StopModelResponse

-- | The status of the model.
[$sel:status:StopModelResponse'] :: StopModelResponse -> Maybe ModelHostingStatus

-- | The response's http status code.
[$sel:httpStatus:StopModelResponse'] :: StopModelResponse -> Int

-- | Create a value of <a>StopModelResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:StopModelResponse'</a>, <a>stopModelResponse_status</a>
--   - The status of the model.
--   
--   <a>$sel:httpStatus:StopModelResponse'</a>,
--   <a>stopModelResponse_httpStatus</a> - The response's http status code.
newStopModelResponse :: Int -> StopModelResponse

-- | The status of the model.
stopModelResponse_status :: Lens' StopModelResponse (Maybe ModelHostingStatus)

-- | The response's http status code.
stopModelResponse_httpStatus :: Lens' StopModelResponse Int
instance GHC.Generics.Generic Amazonka.LookoutVision.StopModel.StopModel
instance GHC.Show.Show Amazonka.LookoutVision.StopModel.StopModel
instance GHC.Read.Read Amazonka.LookoutVision.StopModel.StopModel
instance GHC.Classes.Eq Amazonka.LookoutVision.StopModel.StopModel
instance GHC.Generics.Generic Amazonka.LookoutVision.StopModel.StopModelResponse
instance GHC.Show.Show Amazonka.LookoutVision.StopModel.StopModelResponse
instance GHC.Read.Read Amazonka.LookoutVision.StopModel.StopModelResponse
instance GHC.Classes.Eq Amazonka.LookoutVision.StopModel.StopModelResponse
instance Amazonka.Types.AWSRequest Amazonka.LookoutVision.StopModel.StopModel
instance Control.DeepSeq.NFData Amazonka.LookoutVision.StopModel.StopModelResponse
instance Data.Hashable.Class.Hashable Amazonka.LookoutVision.StopModel.StopModel
instance Control.DeepSeq.NFData Amazonka.LookoutVision.StopModel.StopModel
instance Amazonka.Data.Headers.ToHeaders Amazonka.LookoutVision.StopModel.StopModel
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LookoutVision.StopModel.StopModel
instance Amazonka.Data.Path.ToPath Amazonka.LookoutVision.StopModel.StopModel
instance Amazonka.Data.Query.ToQuery Amazonka.LookoutVision.StopModel.StopModel


-- | Starts the running of the version of an Amazon Lookout for Vision
--   model. Starting a model takes a while to complete. To check the
--   current state of the model, use DescribeModel.
--   
--   A model is ready to use when its status is <tt>HOSTED</tt>.
--   
--   Once the model is running, you can detect custom labels in new images
--   by calling DetectAnomalies.
--   
--   You are charged for the amount of time that the model is running. To
--   stop a running model, call StopModel.
--   
--   This operation requires permissions to perform the
--   <tt>lookoutvision:StartModel</tt> operation.
module Amazonka.LookoutVision.StartModel

-- | <i>See:</i> <a>newStartModel</a> smart constructor.
data StartModel
StartModel' :: Maybe Text -> Text -> Text -> Natural -> StartModel

-- | ClientToken is an idempotency token that ensures a call to
--   <tt>StartModel</tt> completes only once. You choose the value to pass.
--   For example, An issue, such as an network outage, might prevent you
--   from getting a response from <tt>StartModel</tt>. In this case, safely
--   retry your call to <tt>StartModel</tt> by using the same
--   <tt>ClientToken</tt> parameter value. An error occurs if the other
--   input parameters are not the same as in the first request. Using a
--   different value for <tt>ClientToken</tt> is considered a new call to
--   <tt>StartModel</tt>. An idempotency token is active for 8 hours.
[$sel:clientToken:StartModel'] :: StartModel -> Maybe Text

-- | The name of the project that contains the model that you want to
--   start.
[$sel:projectName:StartModel'] :: StartModel -> Text

-- | The version of the model that you want to start.
[$sel:modelVersion:StartModel'] :: StartModel -> Text

-- | The minimum number of inference units to use. A single inference unit
--   represents 1 hour of processing and can support up to 5 Transaction
--   Pers Second (TPS). Use a higher number to increase the TPS throughput
--   of your model. You are charged for the number of inference units that
--   you use.
[$sel:minInferenceUnits:StartModel'] :: StartModel -> Natural

-- | Create a value of <a>StartModel</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:clientToken:StartModel'</a>, <a>startModel_clientToken</a> -
--   ClientToken is an idempotency token that ensures a call to
--   <tt>StartModel</tt> completes only once. You choose the value to pass.
--   For example, An issue, such as an network outage, might prevent you
--   from getting a response from <tt>StartModel</tt>. In this case, safely
--   retry your call to <tt>StartModel</tt> by using the same
--   <tt>ClientToken</tt> parameter value. An error occurs if the other
--   input parameters are not the same as in the first request. Using a
--   different value for <tt>ClientToken</tt> is considered a new call to
--   <tt>StartModel</tt>. An idempotency token is active for 8 hours.
--   
--   <a>$sel:projectName:StartModel'</a>, <a>startModel_projectName</a> -
--   The name of the project that contains the model that you want to
--   start.
--   
--   <a>$sel:modelVersion:StartModel'</a>, <a>startModel_modelVersion</a> -
--   The version of the model that you want to start.
--   
--   <a>$sel:minInferenceUnits:StartModel'</a>,
--   <a>startModel_minInferenceUnits</a> - The minimum number of inference
--   units to use. A single inference unit represents 1 hour of processing
--   and can support up to 5 Transaction Pers Second (TPS). Use a higher
--   number to increase the TPS throughput of your model. You are charged
--   for the number of inference units that you use.
newStartModel :: Text -> Text -> Natural -> StartModel

-- | ClientToken is an idempotency token that ensures a call to
--   <tt>StartModel</tt> completes only once. You choose the value to pass.
--   For example, An issue, such as an network outage, might prevent you
--   from getting a response from <tt>StartModel</tt>. In this case, safely
--   retry your call to <tt>StartModel</tt> by using the same
--   <tt>ClientToken</tt> parameter value. An error occurs if the other
--   input parameters are not the same as in the first request. Using a
--   different value for <tt>ClientToken</tt> is considered a new call to
--   <tt>StartModel</tt>. An idempotency token is active for 8 hours.
startModel_clientToken :: Lens' StartModel (Maybe Text)

-- | The name of the project that contains the model that you want to
--   start.
startModel_projectName :: Lens' StartModel Text

-- | The version of the model that you want to start.
startModel_modelVersion :: Lens' StartModel Text

-- | The minimum number of inference units to use. A single inference unit
--   represents 1 hour of processing and can support up to 5 Transaction
--   Pers Second (TPS). Use a higher number to increase the TPS throughput
--   of your model. You are charged for the number of inference units that
--   you use.
startModel_minInferenceUnits :: Lens' StartModel Natural

-- | <i>See:</i> <a>newStartModelResponse</a> smart constructor.
data StartModelResponse
StartModelResponse' :: Maybe ModelHostingStatus -> Int -> StartModelResponse

-- | The current running status of the model.
[$sel:status:StartModelResponse'] :: StartModelResponse -> Maybe ModelHostingStatus

-- | The response's http status code.
[$sel:httpStatus:StartModelResponse'] :: StartModelResponse -> Int

-- | Create a value of <a>StartModelResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:StartModelResponse'</a>,
--   <a>startModelResponse_status</a> - The current running status of the
--   model.
--   
--   <a>$sel:httpStatus:StartModelResponse'</a>,
--   <a>startModelResponse_httpStatus</a> - The response's http status
--   code.
newStartModelResponse :: Int -> StartModelResponse

-- | The current running status of the model.
startModelResponse_status :: Lens' StartModelResponse (Maybe ModelHostingStatus)

-- | The response's http status code.
startModelResponse_httpStatus :: Lens' StartModelResponse Int
instance GHC.Generics.Generic Amazonka.LookoutVision.StartModel.StartModel
instance GHC.Show.Show Amazonka.LookoutVision.StartModel.StartModel
instance GHC.Read.Read Amazonka.LookoutVision.StartModel.StartModel
instance GHC.Classes.Eq Amazonka.LookoutVision.StartModel.StartModel
instance GHC.Generics.Generic Amazonka.LookoutVision.StartModel.StartModelResponse
instance GHC.Show.Show Amazonka.LookoutVision.StartModel.StartModelResponse
instance GHC.Read.Read Amazonka.LookoutVision.StartModel.StartModelResponse
instance GHC.Classes.Eq Amazonka.LookoutVision.StartModel.StartModelResponse
instance Amazonka.Types.AWSRequest Amazonka.LookoutVision.StartModel.StartModel
instance Control.DeepSeq.NFData Amazonka.LookoutVision.StartModel.StartModelResponse
instance Data.Hashable.Class.Hashable Amazonka.LookoutVision.StartModel.StartModel
instance Control.DeepSeq.NFData Amazonka.LookoutVision.StartModel.StartModel
instance Amazonka.Data.Headers.ToHeaders Amazonka.LookoutVision.StartModel.StartModel
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LookoutVision.StartModel.StartModel
instance Amazonka.Data.Path.ToPath Amazonka.LookoutVision.StartModel.StartModel
instance Amazonka.Data.Query.ToQuery Amazonka.LookoutVision.StartModel.StartModel


-- | Returns a list of tags attached to the specified Amazon Lookout for
--   Vision model.
--   
--   This operation requires permissions to perform the
--   <tt>lookoutvision:ListTagsForResource</tt> operation.
module Amazonka.LookoutVision.ListTagsForResource

-- | <i>See:</i> <a>newListTagsForResource</a> smart constructor.
data ListTagsForResource
ListTagsForResource' :: Text -> ListTagsForResource

-- | The Amazon Resource Name (ARN) of the model for which you want to list
--   tags.
[$sel:resourceArn:ListTagsForResource'] :: ListTagsForResource -> Text

-- | Create a value of <a>ListTagsForResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:ListTagsForResource'</a>,
--   <a>listTagsForResource_resourceArn</a> - The Amazon Resource Name
--   (ARN) of the model for which you want to list tags.
newListTagsForResource :: Text -> ListTagsForResource

-- | The Amazon Resource Name (ARN) of the model for which you want to list
--   tags.
listTagsForResource_resourceArn :: Lens' ListTagsForResource Text

-- | <i>See:</i> <a>newListTagsForResourceResponse</a> smart constructor.
data ListTagsForResourceResponse
ListTagsForResourceResponse' :: Maybe [Tag] -> Int -> ListTagsForResourceResponse

-- | A map of tag keys and values attached to the specified model.
[$sel:tags:ListTagsForResourceResponse'] :: ListTagsForResourceResponse -> Maybe [Tag]

-- | The response's http status code.
[$sel:httpStatus:ListTagsForResourceResponse'] :: ListTagsForResourceResponse -> Int

-- | Create a value of <a>ListTagsForResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tags:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_tags</a> - A map of tag keys and values
--   attached to the specified model.
--   
--   <a>$sel:httpStatus:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_httpStatus</a> - The response's http
--   status code.
newListTagsForResourceResponse :: Int -> ListTagsForResourceResponse

-- | A map of tag keys and values attached to the specified model.
listTagsForResourceResponse_tags :: Lens' ListTagsForResourceResponse (Maybe [Tag])

-- | The response's http status code.
listTagsForResourceResponse_httpStatus :: Lens' ListTagsForResourceResponse Int
instance GHC.Generics.Generic Amazonka.LookoutVision.ListTagsForResource.ListTagsForResource
instance GHC.Show.Show Amazonka.LookoutVision.ListTagsForResource.ListTagsForResource
instance GHC.Read.Read Amazonka.LookoutVision.ListTagsForResource.ListTagsForResource
instance GHC.Classes.Eq Amazonka.LookoutVision.ListTagsForResource.ListTagsForResource
instance GHC.Generics.Generic Amazonka.LookoutVision.ListTagsForResource.ListTagsForResourceResponse
instance GHC.Show.Show Amazonka.LookoutVision.ListTagsForResource.ListTagsForResourceResponse
instance GHC.Read.Read Amazonka.LookoutVision.ListTagsForResource.ListTagsForResourceResponse
instance GHC.Classes.Eq Amazonka.LookoutVision.ListTagsForResource.ListTagsForResourceResponse
instance Amazonka.Types.AWSRequest Amazonka.LookoutVision.ListTagsForResource.ListTagsForResource
instance Control.DeepSeq.NFData Amazonka.LookoutVision.ListTagsForResource.ListTagsForResourceResponse
instance Data.Hashable.Class.Hashable Amazonka.LookoutVision.ListTagsForResource.ListTagsForResource
instance Control.DeepSeq.NFData Amazonka.LookoutVision.ListTagsForResource.ListTagsForResource
instance Amazonka.Data.Headers.ToHeaders Amazonka.LookoutVision.ListTagsForResource.ListTagsForResource
instance Amazonka.Data.Path.ToPath Amazonka.LookoutVision.ListTagsForResource.ListTagsForResource
instance Amazonka.Data.Query.ToQuery Amazonka.LookoutVision.ListTagsForResource.ListTagsForResource


-- | Lists the Amazon Lookout for Vision projects in your AWS account.
--   
--   This operation requires permissions to perform the
--   <tt>lookoutvision:ListProjects</tt> operation.
--   
--   This operation returns paginated results.
module Amazonka.LookoutVision.ListProjects

-- | <i>See:</i> <a>newListProjects</a> smart constructor.
data ListProjects
ListProjects' :: Maybe Text -> Maybe Natural -> ListProjects

-- | If the previous response was incomplete (because there is more data to
--   retrieve), Amazon Lookout for Vision returns a pagination token in the
--   response. You can use this pagination token to retrieve the next set
--   of projects.
[$sel:nextToken:ListProjects'] :: ListProjects -> Maybe Text

-- | The maximum number of results to return per paginated call. The
--   largest value you can specify is 100. If you specify a value greater
--   than 100, a ValidationException error occurs. The default value is
--   100.
[$sel:maxResults:ListProjects'] :: ListProjects -> Maybe Natural

-- | Create a value of <a>ListProjects</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListProjects'</a>, <a>listProjects_nextToken</a> -
--   If the previous response was incomplete (because there is more data to
--   retrieve), Amazon Lookout for Vision returns a pagination token in the
--   response. You can use this pagination token to retrieve the next set
--   of projects.
--   
--   <a>$sel:maxResults:ListProjects'</a>, <a>listProjects_maxResults</a> -
--   The maximum number of results to return per paginated call. The
--   largest value you can specify is 100. If you specify a value greater
--   than 100, a ValidationException error occurs. The default value is
--   100.
newListProjects :: ListProjects

-- | If the previous response was incomplete (because there is more data to
--   retrieve), Amazon Lookout for Vision returns a pagination token in the
--   response. You can use this pagination token to retrieve the next set
--   of projects.
listProjects_nextToken :: Lens' ListProjects (Maybe Text)

-- | The maximum number of results to return per paginated call. The
--   largest value you can specify is 100. If you specify a value greater
--   than 100, a ValidationException error occurs. The default value is
--   100.
listProjects_maxResults :: Lens' ListProjects (Maybe Natural)

-- | <i>See:</i> <a>newListProjectsResponse</a> smart constructor.
data ListProjectsResponse
ListProjectsResponse' :: Maybe Text -> Maybe [ProjectMetadata] -> Int -> ListProjectsResponse

-- | If the response is truncated, Amazon Lookout for Vision returns this
--   token that you can use in the subsequent request to retrieve the next
--   set of projects.
[$sel:nextToken:ListProjectsResponse'] :: ListProjectsResponse -> Maybe Text

-- | A list of projects in your AWS account.
[$sel:projects:ListProjectsResponse'] :: ListProjectsResponse -> Maybe [ProjectMetadata]

-- | The response's http status code.
[$sel:httpStatus:ListProjectsResponse'] :: ListProjectsResponse -> Int

-- | Create a value of <a>ListProjectsResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListProjects'</a>,
--   <a>listProjectsResponse_nextToken</a> - If the response is truncated,
--   Amazon Lookout for Vision returns this token that you can use in the
--   subsequent request to retrieve the next set of projects.
--   
--   <a>$sel:projects:ListProjectsResponse'</a>,
--   <a>listProjectsResponse_projects</a> - A list of projects in your AWS
--   account.
--   
--   <a>$sel:httpStatus:ListProjectsResponse'</a>,
--   <a>listProjectsResponse_httpStatus</a> - The response's http status
--   code.
newListProjectsResponse :: Int -> ListProjectsResponse

-- | If the response is truncated, Amazon Lookout for Vision returns this
--   token that you can use in the subsequent request to retrieve the next
--   set of projects.
listProjectsResponse_nextToken :: Lens' ListProjectsResponse (Maybe Text)

-- | A list of projects in your AWS account.
listProjectsResponse_projects :: Lens' ListProjectsResponse (Maybe [ProjectMetadata])

-- | The response's http status code.
listProjectsResponse_httpStatus :: Lens' ListProjectsResponse Int
instance GHC.Generics.Generic Amazonka.LookoutVision.ListProjects.ListProjects
instance GHC.Show.Show Amazonka.LookoutVision.ListProjects.ListProjects
instance GHC.Read.Read Amazonka.LookoutVision.ListProjects.ListProjects
instance GHC.Classes.Eq Amazonka.LookoutVision.ListProjects.ListProjects
instance GHC.Generics.Generic Amazonka.LookoutVision.ListProjects.ListProjectsResponse
instance GHC.Show.Show Amazonka.LookoutVision.ListProjects.ListProjectsResponse
instance GHC.Read.Read Amazonka.LookoutVision.ListProjects.ListProjectsResponse
instance GHC.Classes.Eq Amazonka.LookoutVision.ListProjects.ListProjectsResponse
instance Amazonka.Types.AWSRequest Amazonka.LookoutVision.ListProjects.ListProjects
instance Control.DeepSeq.NFData Amazonka.LookoutVision.ListProjects.ListProjectsResponse
instance Amazonka.Pager.AWSPager Amazonka.LookoutVision.ListProjects.ListProjects
instance Data.Hashable.Class.Hashable Amazonka.LookoutVision.ListProjects.ListProjects
instance Control.DeepSeq.NFData Amazonka.LookoutVision.ListProjects.ListProjects
instance Amazonka.Data.Headers.ToHeaders Amazonka.LookoutVision.ListProjects.ListProjects
instance Amazonka.Data.Path.ToPath Amazonka.LookoutVision.ListProjects.ListProjects
instance Amazonka.Data.Query.ToQuery Amazonka.LookoutVision.ListProjects.ListProjects


-- | Lists the versions of a model in an Amazon Lookout for Vision project.
--   
--   This operation requires permissions to perform the
--   <tt>lookoutvision:ListModels</tt> operation.
--   
--   This operation returns paginated results.
module Amazonka.LookoutVision.ListModels

-- | <i>See:</i> <a>newListModels</a> smart constructor.
data ListModels
ListModels' :: Maybe Text -> Maybe Natural -> Text -> ListModels

-- | If the previous response was incomplete (because there is more data to
--   retrieve), Amazon Lookout for Vision returns a pagination token in the
--   response. You can use this pagination token to retrieve the next set
--   of models.
[$sel:nextToken:ListModels'] :: ListModels -> Maybe Text

-- | The maximum number of results to return per paginated call. The
--   largest value you can specify is 100. If you specify a value greater
--   than 100, a ValidationException error occurs. The default value is
--   100.
[$sel:maxResults:ListModels'] :: ListModels -> Maybe Natural

-- | The name of the project that contains the model versions that you want
--   to list.
[$sel:projectName:ListModels'] :: ListModels -> Text

-- | Create a value of <a>ListModels</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListModels'</a>, <a>listModels_nextToken</a> - If
--   the previous response was incomplete (because there is more data to
--   retrieve), Amazon Lookout for Vision returns a pagination token in the
--   response. You can use this pagination token to retrieve the next set
--   of models.
--   
--   <a>$sel:maxResults:ListModels'</a>, <a>listModels_maxResults</a> - The
--   maximum number of results to return per paginated call. The largest
--   value you can specify is 100. If you specify a value greater than 100,
--   a ValidationException error occurs. The default value is 100.
--   
--   <a>$sel:projectName:ListModels'</a>, <a>listModels_projectName</a> -
--   The name of the project that contains the model versions that you want
--   to list.
newListModels :: Text -> ListModels

-- | If the previous response was incomplete (because there is more data to
--   retrieve), Amazon Lookout for Vision returns a pagination token in the
--   response. You can use this pagination token to retrieve the next set
--   of models.
listModels_nextToken :: Lens' ListModels (Maybe Text)

-- | The maximum number of results to return per paginated call. The
--   largest value you can specify is 100. If you specify a value greater
--   than 100, a ValidationException error occurs. The default value is
--   100.
listModels_maxResults :: Lens' ListModels (Maybe Natural)

-- | The name of the project that contains the model versions that you want
--   to list.
listModels_projectName :: Lens' ListModels Text

-- | <i>See:</i> <a>newListModelsResponse</a> smart constructor.
data ListModelsResponse
ListModelsResponse' :: Maybe Text -> Maybe [ModelMetadata] -> Int -> ListModelsResponse

-- | If the response is truncated, Amazon Lookout for Vision returns this
--   token that you can use in the subsequent request to retrieve the next
--   set of models.
[$sel:nextToken:ListModelsResponse'] :: ListModelsResponse -> Maybe Text

-- | A list of model versions in the specified project.
[$sel:models:ListModelsResponse'] :: ListModelsResponse -> Maybe [ModelMetadata]

-- | The response's http status code.
[$sel:httpStatus:ListModelsResponse'] :: ListModelsResponse -> Int

-- | Create a value of <a>ListModelsResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListModels'</a>, <a>listModelsResponse_nextToken</a>
--   - If the response is truncated, Amazon Lookout for Vision returns this
--   token that you can use in the subsequent request to retrieve the next
--   set of models.
--   
--   <a>$sel:models:ListModelsResponse'</a>,
--   <a>listModelsResponse_models</a> - A list of model versions in the
--   specified project.
--   
--   <a>$sel:httpStatus:ListModelsResponse'</a>,
--   <a>listModelsResponse_httpStatus</a> - The response's http status
--   code.
newListModelsResponse :: Int -> ListModelsResponse

-- | If the response is truncated, Amazon Lookout for Vision returns this
--   token that you can use in the subsequent request to retrieve the next
--   set of models.
listModelsResponse_nextToken :: Lens' ListModelsResponse (Maybe Text)

-- | A list of model versions in the specified project.
listModelsResponse_models :: Lens' ListModelsResponse (Maybe [ModelMetadata])

-- | The response's http status code.
listModelsResponse_httpStatus :: Lens' ListModelsResponse Int
instance GHC.Generics.Generic Amazonka.LookoutVision.ListModels.ListModels
instance GHC.Show.Show Amazonka.LookoutVision.ListModels.ListModels
instance GHC.Read.Read Amazonka.LookoutVision.ListModels.ListModels
instance GHC.Classes.Eq Amazonka.LookoutVision.ListModels.ListModels
instance GHC.Generics.Generic Amazonka.LookoutVision.ListModels.ListModelsResponse
instance GHC.Show.Show Amazonka.LookoutVision.ListModels.ListModelsResponse
instance GHC.Read.Read Amazonka.LookoutVision.ListModels.ListModelsResponse
instance GHC.Classes.Eq Amazonka.LookoutVision.ListModels.ListModelsResponse
instance Amazonka.Types.AWSRequest Amazonka.LookoutVision.ListModels.ListModels
instance Control.DeepSeq.NFData Amazonka.LookoutVision.ListModels.ListModelsResponse
instance Amazonka.Pager.AWSPager Amazonka.LookoutVision.ListModels.ListModels
instance Data.Hashable.Class.Hashable Amazonka.LookoutVision.ListModels.ListModels
instance Control.DeepSeq.NFData Amazonka.LookoutVision.ListModels.ListModels
instance Amazonka.Data.Headers.ToHeaders Amazonka.LookoutVision.ListModels.ListModels
instance Amazonka.Data.Path.ToPath Amazonka.LookoutVision.ListModels.ListModels
instance Amazonka.Data.Query.ToQuery Amazonka.LookoutVision.ListModels.ListModels


-- | Lists the JSON Lines within a dataset. An Amazon Lookout for Vision
--   JSON Line contains the anomaly information for a single image,
--   including the image location and the assigned label.
--   
--   This operation requires permissions to perform the
--   <tt>lookoutvision:ListDatasetEntries</tt> operation.
--   
--   This operation returns paginated results.
module Amazonka.LookoutVision.ListDatasetEntries

-- | <i>See:</i> <a>newListDatasetEntries</a> smart constructor.
data ListDatasetEntries
ListDatasetEntries' :: Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Text -> Maybe Natural -> Maybe POSIX -> Text -> Text -> ListDatasetEntries

-- | Only includes entries before the specified date in the response. For
--   example, <tt>2020-06-23T00:00:00</tt>.
[$sel:beforeCreationDate:ListDatasetEntries'] :: ListDatasetEntries -> Maybe POSIX

-- | Perform a "contains" search on the values of the <tt>source-ref</tt>
--   key within the dataset. For example a value of "IMG_17" returns all
--   JSON Lines where the <tt>source-ref</tt> key value matches
--   <i>*IMG_17*</i>.
[$sel:sourceRefContains:ListDatasetEntries'] :: ListDatasetEntries -> Maybe Text

-- | If the previous response was incomplete (because there is more data to
--   retrieve), Amazon Lookout for Vision returns a pagination token in the
--   response. You can use this pagination token to retrieve the next set
--   of dataset entries.
[$sel:nextToken:ListDatasetEntries'] :: ListDatasetEntries -> Maybe Text

-- | Specify <tt>true</tt> to include labeled entries, otherwise specify
--   <tt>false</tt>. If you don't specify a value, Lookout for Vision
--   returns all entries.
[$sel:labeled:ListDatasetEntries'] :: ListDatasetEntries -> Maybe Bool

-- | Specify <tt>normal</tt> to include only normal images. Specify
--   <tt>anomaly</tt> to only include anomalous entries. If you don't
--   specify a value, Amazon Lookout for Vision returns normal and
--   anomalous images.
[$sel:anomalyClass:ListDatasetEntries'] :: ListDatasetEntries -> Maybe Text

-- | The maximum number of results to return per paginated call. The
--   largest value you can specify is 100. If you specify a value greater
--   than 100, a ValidationException error occurs. The default value is
--   100.
[$sel:maxResults:ListDatasetEntries'] :: ListDatasetEntries -> Maybe Natural

-- | Only includes entries after the specified date in the response. For
--   example, <tt>2020-06-23T00:00:00</tt>.
[$sel:afterCreationDate:ListDatasetEntries'] :: ListDatasetEntries -> Maybe POSIX

-- | The name of the project that contains the dataset that you want to
--   list.
[$sel:projectName:ListDatasetEntries'] :: ListDatasetEntries -> Text

-- | The type of the dataset that you want to list. Specify <tt>train</tt>
--   to list the training dataset. Specify <tt>test</tt> to list the test
--   dataset. If you have a single dataset project, specify <tt>train</tt>.
[$sel:datasetType:ListDatasetEntries'] :: ListDatasetEntries -> Text

-- | Create a value of <a>ListDatasetEntries</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:beforeCreationDate:ListDatasetEntries'</a>,
--   <a>listDatasetEntries_beforeCreationDate</a> - Only includes entries
--   before the specified date in the response. For example,
--   <tt>2020-06-23T00:00:00</tt>.
--   
--   <a>$sel:sourceRefContains:ListDatasetEntries'</a>,
--   <a>listDatasetEntries_sourceRefContains</a> - Perform a "contains"
--   search on the values of the <tt>source-ref</tt> key within the
--   dataset. For example a value of "IMG_17" returns all JSON Lines where
--   the <tt>source-ref</tt> key value matches <i>*IMG_17*</i>.
--   
--   <a>$sel:nextToken:ListDatasetEntries'</a>,
--   <a>listDatasetEntries_nextToken</a> - If the previous response was
--   incomplete (because there is more data to retrieve), Amazon Lookout
--   for Vision returns a pagination token in the response. You can use
--   this pagination token to retrieve the next set of dataset entries.
--   
--   <a>$sel:labeled:ListDatasetEntries'</a>,
--   <a>listDatasetEntries_labeled</a> - Specify <tt>true</tt> to include
--   labeled entries, otherwise specify <tt>false</tt>. If you don't
--   specify a value, Lookout for Vision returns all entries.
--   
--   <a>$sel:anomalyClass:ListDatasetEntries'</a>,
--   <a>listDatasetEntries_anomalyClass</a> - Specify <tt>normal</tt> to
--   include only normal images. Specify <tt>anomaly</tt> to only include
--   anomalous entries. If you don't specify a value, Amazon Lookout for
--   Vision returns normal and anomalous images.
--   
--   <a>$sel:maxResults:ListDatasetEntries'</a>,
--   <a>listDatasetEntries_maxResults</a> - The maximum number of results
--   to return per paginated call. The largest value you can specify is
--   100. If you specify a value greater than 100, a ValidationException
--   error occurs. The default value is 100.
--   
--   <a>$sel:afterCreationDate:ListDatasetEntries'</a>,
--   <a>listDatasetEntries_afterCreationDate</a> - Only includes entries
--   after the specified date in the response. For example,
--   <tt>2020-06-23T00:00:00</tt>.
--   
--   <a>$sel:projectName:ListDatasetEntries'</a>,
--   <a>listDatasetEntries_projectName</a> - The name of the project that
--   contains the dataset that you want to list.
--   
--   <a>$sel:datasetType:ListDatasetEntries'</a>,
--   <a>listDatasetEntries_datasetType</a> - The type of the dataset that
--   you want to list. Specify <tt>train</tt> to list the training dataset.
--   Specify <tt>test</tt> to list the test dataset. If you have a single
--   dataset project, specify <tt>train</tt>.
newListDatasetEntries :: Text -> Text -> ListDatasetEntries

-- | Only includes entries before the specified date in the response. For
--   example, <tt>2020-06-23T00:00:00</tt>.
listDatasetEntries_beforeCreationDate :: Lens' ListDatasetEntries (Maybe UTCTime)

-- | Perform a "contains" search on the values of the <tt>source-ref</tt>
--   key within the dataset. For example a value of "IMG_17" returns all
--   JSON Lines where the <tt>source-ref</tt> key value matches
--   <i>*IMG_17*</i>.
listDatasetEntries_sourceRefContains :: Lens' ListDatasetEntries (Maybe Text)

-- | If the previous response was incomplete (because there is more data to
--   retrieve), Amazon Lookout for Vision returns a pagination token in the
--   response. You can use this pagination token to retrieve the next set
--   of dataset entries.
listDatasetEntries_nextToken :: Lens' ListDatasetEntries (Maybe Text)

-- | Specify <tt>true</tt> to include labeled entries, otherwise specify
--   <tt>false</tt>. If you don't specify a value, Lookout for Vision
--   returns all entries.
listDatasetEntries_labeled :: Lens' ListDatasetEntries (Maybe Bool)

-- | Specify <tt>normal</tt> to include only normal images. Specify
--   <tt>anomaly</tt> to only include anomalous entries. If you don't
--   specify a value, Amazon Lookout for Vision returns normal and
--   anomalous images.
listDatasetEntries_anomalyClass :: Lens' ListDatasetEntries (Maybe Text)

-- | The maximum number of results to return per paginated call. The
--   largest value you can specify is 100. If you specify a value greater
--   than 100, a ValidationException error occurs. The default value is
--   100.
listDatasetEntries_maxResults :: Lens' ListDatasetEntries (Maybe Natural)

-- | Only includes entries after the specified date in the response. For
--   example, <tt>2020-06-23T00:00:00</tt>.
listDatasetEntries_afterCreationDate :: Lens' ListDatasetEntries (Maybe UTCTime)

-- | The name of the project that contains the dataset that you want to
--   list.
listDatasetEntries_projectName :: Lens' ListDatasetEntries Text

-- | The type of the dataset that you want to list. Specify <tt>train</tt>
--   to list the training dataset. Specify <tt>test</tt> to list the test
--   dataset. If you have a single dataset project, specify <tt>train</tt>.
listDatasetEntries_datasetType :: Lens' ListDatasetEntries Text

-- | <i>See:</i> <a>newListDatasetEntriesResponse</a> smart constructor.
data ListDatasetEntriesResponse
ListDatasetEntriesResponse' :: Maybe [Text] -> Maybe Text -> Int -> ListDatasetEntriesResponse

-- | A list of the entries (JSON Lines) within the dataset.
[$sel:datasetEntries:ListDatasetEntriesResponse'] :: ListDatasetEntriesResponse -> Maybe [Text]

-- | If the response is truncated, Amazon Lookout for Vision returns this
--   token that you can use in the subsequent request to retrieve the next
--   set ofdataset entries.
[$sel:nextToken:ListDatasetEntriesResponse'] :: ListDatasetEntriesResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:ListDatasetEntriesResponse'] :: ListDatasetEntriesResponse -> Int

-- | Create a value of <a>ListDatasetEntriesResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:datasetEntries:ListDatasetEntriesResponse'</a>,
--   <a>listDatasetEntriesResponse_datasetEntries</a> - A list of the
--   entries (JSON Lines) within the dataset.
--   
--   <a>$sel:nextToken:ListDatasetEntries'</a>,
--   <a>listDatasetEntriesResponse_nextToken</a> - If the response is
--   truncated, Amazon Lookout for Vision returns this token that you can
--   use in the subsequent request to retrieve the next set ofdataset
--   entries.
--   
--   <a>$sel:httpStatus:ListDatasetEntriesResponse'</a>,
--   <a>listDatasetEntriesResponse_httpStatus</a> - The response's http
--   status code.
newListDatasetEntriesResponse :: Int -> ListDatasetEntriesResponse

-- | A list of the entries (JSON Lines) within the dataset.
listDatasetEntriesResponse_datasetEntries :: Lens' ListDatasetEntriesResponse (Maybe [Text])

-- | If the response is truncated, Amazon Lookout for Vision returns this
--   token that you can use in the subsequent request to retrieve the next
--   set ofdataset entries.
listDatasetEntriesResponse_nextToken :: Lens' ListDatasetEntriesResponse (Maybe Text)

-- | The response's http status code.
listDatasetEntriesResponse_httpStatus :: Lens' ListDatasetEntriesResponse Int
instance GHC.Generics.Generic Amazonka.LookoutVision.ListDatasetEntries.ListDatasetEntries
instance GHC.Show.Show Amazonka.LookoutVision.ListDatasetEntries.ListDatasetEntries
instance GHC.Read.Read Amazonka.LookoutVision.ListDatasetEntries.ListDatasetEntries
instance GHC.Classes.Eq Amazonka.LookoutVision.ListDatasetEntries.ListDatasetEntries
instance GHC.Generics.Generic Amazonka.LookoutVision.ListDatasetEntries.ListDatasetEntriesResponse
instance GHC.Show.Show Amazonka.LookoutVision.ListDatasetEntries.ListDatasetEntriesResponse
instance GHC.Read.Read Amazonka.LookoutVision.ListDatasetEntries.ListDatasetEntriesResponse
instance GHC.Classes.Eq Amazonka.LookoutVision.ListDatasetEntries.ListDatasetEntriesResponse
instance Amazonka.Types.AWSRequest Amazonka.LookoutVision.ListDatasetEntries.ListDatasetEntries
instance Control.DeepSeq.NFData Amazonka.LookoutVision.ListDatasetEntries.ListDatasetEntriesResponse
instance Amazonka.Pager.AWSPager Amazonka.LookoutVision.ListDatasetEntries.ListDatasetEntries
instance Data.Hashable.Class.Hashable Amazonka.LookoutVision.ListDatasetEntries.ListDatasetEntries
instance Control.DeepSeq.NFData Amazonka.LookoutVision.ListDatasetEntries.ListDatasetEntries
instance Amazonka.Data.Headers.ToHeaders Amazonka.LookoutVision.ListDatasetEntries.ListDatasetEntries
instance Amazonka.Data.Path.ToPath Amazonka.LookoutVision.ListDatasetEntries.ListDatasetEntries
instance Amazonka.Data.Query.ToQuery Amazonka.LookoutVision.ListDatasetEntries.ListDatasetEntries


-- | Detects anomalies in an image that you supply.
--   
--   The response from <tt>DetectAnomalies</tt> includes a boolean
--   prediction that the image contains one or more anomalies and a
--   confidence value for the prediction.
--   
--   Before calling <tt>DetectAnomalies</tt>, you must first start your
--   model with the StartModel operation. You are charged for the amount of
--   time, in minutes, that a model runs and for the number of anomaly
--   detection units that your model uses. If you are not using a model,
--   use the StopModel operation to stop your model.
--   
--   This operation requires permissions to perform the
--   <tt>lookoutvision:DetectAnomalies</tt> operation.
module Amazonka.LookoutVision.DetectAnomalies

-- | <i>See:</i> <a>newDetectAnomalies</a> smart constructor.
data DetectAnomalies
DetectAnomalies' :: Text -> Text -> Text -> HashedBody -> DetectAnomalies

-- | The name of the project that contains the model version that you want
--   to use.
[$sel:projectName:DetectAnomalies'] :: DetectAnomalies -> Text

-- | The version of the model that you want to use.
[$sel:modelVersion:DetectAnomalies'] :: DetectAnomalies -> Text

-- | The type of the image passed in <tt>Body</tt>. Valid values are
--   <tt>image/png</tt> (PNG format images) and <tt>image/jpeg</tt> (JPG
--   format images).
[$sel:contentType:DetectAnomalies'] :: DetectAnomalies -> Text

-- | The unencrypted image bytes that you want to analyze.
[$sel:body:DetectAnomalies'] :: DetectAnomalies -> HashedBody

-- | Create a value of <a>DetectAnomalies</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:projectName:DetectAnomalies'</a>,
--   <a>detectAnomalies_projectName</a> - The name of the project that
--   contains the model version that you want to use.
--   
--   <a>$sel:modelVersion:DetectAnomalies'</a>,
--   <a>detectAnomalies_modelVersion</a> - The version of the model that
--   you want to use.
--   
--   <a>$sel:contentType:DetectAnomalies'</a>,
--   <a>detectAnomalies_contentType</a> - The type of the image passed in
--   <tt>Body</tt>. Valid values are <tt>image/png</tt> (PNG format images)
--   and <tt>image/jpeg</tt> (JPG format images).
--   
--   <a>$sel:body:DetectAnomalies'</a>, <a>detectAnomalies_body</a> - The
--   unencrypted image bytes that you want to analyze.
newDetectAnomalies :: Text -> Text -> Text -> HashedBody -> DetectAnomalies

-- | The name of the project that contains the model version that you want
--   to use.
detectAnomalies_projectName :: Lens' DetectAnomalies Text

-- | The version of the model that you want to use.
detectAnomalies_modelVersion :: Lens' DetectAnomalies Text

-- | The type of the image passed in <tt>Body</tt>. Valid values are
--   <tt>image/png</tt> (PNG format images) and <tt>image/jpeg</tt> (JPG
--   format images).
detectAnomalies_contentType :: Lens' DetectAnomalies Text

-- | The unencrypted image bytes that you want to analyze.
detectAnomalies_body :: Lens' DetectAnomalies HashedBody

-- | <i>See:</i> <a>newDetectAnomaliesResponse</a> smart constructor.
data DetectAnomaliesResponse
DetectAnomaliesResponse' :: Maybe DetectAnomalyResult -> Int -> DetectAnomaliesResponse

-- | The results of the <tt>DetectAnomalies</tt> operation.
[$sel:detectAnomalyResult:DetectAnomaliesResponse'] :: DetectAnomaliesResponse -> Maybe DetectAnomalyResult

-- | The response's http status code.
[$sel:httpStatus:DetectAnomaliesResponse'] :: DetectAnomaliesResponse -> Int

-- | Create a value of <a>DetectAnomaliesResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:detectAnomalyResult:DetectAnomaliesResponse'</a>,
--   <a>detectAnomaliesResponse_detectAnomalyResult</a> - The results of
--   the <tt>DetectAnomalies</tt> operation.
--   
--   <a>$sel:httpStatus:DetectAnomaliesResponse'</a>,
--   <a>detectAnomaliesResponse_httpStatus</a> - The response's http status
--   code.
newDetectAnomaliesResponse :: Int -> DetectAnomaliesResponse

-- | The results of the <tt>DetectAnomalies</tt> operation.
detectAnomaliesResponse_detectAnomalyResult :: Lens' DetectAnomaliesResponse (Maybe DetectAnomalyResult)

-- | The response's http status code.
detectAnomaliesResponse_httpStatus :: Lens' DetectAnomaliesResponse Int
instance GHC.Generics.Generic Amazonka.LookoutVision.DetectAnomalies.DetectAnomalies
instance GHC.Show.Show Amazonka.LookoutVision.DetectAnomalies.DetectAnomalies
instance GHC.Generics.Generic Amazonka.LookoutVision.DetectAnomalies.DetectAnomaliesResponse
instance GHC.Show.Show Amazonka.LookoutVision.DetectAnomalies.DetectAnomaliesResponse
instance GHC.Read.Read Amazonka.LookoutVision.DetectAnomalies.DetectAnomaliesResponse
instance GHC.Classes.Eq Amazonka.LookoutVision.DetectAnomalies.DetectAnomaliesResponse
instance Amazonka.Types.AWSRequest Amazonka.LookoutVision.DetectAnomalies.DetectAnomalies
instance Control.DeepSeq.NFData Amazonka.LookoutVision.DetectAnomalies.DetectAnomaliesResponse
instance Amazonka.Data.Body.ToBody Amazonka.LookoutVision.DetectAnomalies.DetectAnomalies
instance Amazonka.Data.Headers.ToHeaders Amazonka.LookoutVision.DetectAnomalies.DetectAnomalies
instance Amazonka.Data.Path.ToPath Amazonka.LookoutVision.DetectAnomalies.DetectAnomalies
instance Amazonka.Data.Query.ToQuery Amazonka.LookoutVision.DetectAnomalies.DetectAnomalies


-- | Describes an Amazon Lookout for Vision project.
--   
--   This operation requires permissions to perform the
--   <tt>lookoutvision:DescribeProject</tt> operation.
module Amazonka.LookoutVision.DescribeProject

-- | <i>See:</i> <a>newDescribeProject</a> smart constructor.
data DescribeProject
DescribeProject' :: Text -> DescribeProject

-- | The name of the project that you want to describe.
[$sel:projectName:DescribeProject'] :: DescribeProject -> Text

-- | Create a value of <a>DescribeProject</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:projectName:DescribeProject'</a>,
--   <a>describeProject_projectName</a> - The name of the project that you
--   want to describe.
newDescribeProject :: Text -> DescribeProject

-- | The name of the project that you want to describe.
describeProject_projectName :: Lens' DescribeProject Text

-- | <i>See:</i> <a>newDescribeProjectResponse</a> smart constructor.
data DescribeProjectResponse
DescribeProjectResponse' :: Maybe ProjectDescription -> Int -> DescribeProjectResponse

-- | The description of the project.
[$sel:projectDescription:DescribeProjectResponse'] :: DescribeProjectResponse -> Maybe ProjectDescription

-- | The response's http status code.
[$sel:httpStatus:DescribeProjectResponse'] :: DescribeProjectResponse -> Int

-- | Create a value of <a>DescribeProjectResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:projectDescription:DescribeProjectResponse'</a>,
--   <a>describeProjectResponse_projectDescription</a> - The description of
--   the project.
--   
--   <a>$sel:httpStatus:DescribeProjectResponse'</a>,
--   <a>describeProjectResponse_httpStatus</a> - The response's http status
--   code.
newDescribeProjectResponse :: Int -> DescribeProjectResponse

-- | The description of the project.
describeProjectResponse_projectDescription :: Lens' DescribeProjectResponse (Maybe ProjectDescription)

-- | The response's http status code.
describeProjectResponse_httpStatus :: Lens' DescribeProjectResponse Int
instance GHC.Generics.Generic Amazonka.LookoutVision.DescribeProject.DescribeProject
instance GHC.Show.Show Amazonka.LookoutVision.DescribeProject.DescribeProject
instance GHC.Read.Read Amazonka.LookoutVision.DescribeProject.DescribeProject
instance GHC.Classes.Eq Amazonka.LookoutVision.DescribeProject.DescribeProject
instance GHC.Generics.Generic Amazonka.LookoutVision.DescribeProject.DescribeProjectResponse
instance GHC.Show.Show Amazonka.LookoutVision.DescribeProject.DescribeProjectResponse
instance GHC.Read.Read Amazonka.LookoutVision.DescribeProject.DescribeProjectResponse
instance GHC.Classes.Eq Amazonka.LookoutVision.DescribeProject.DescribeProjectResponse
instance Amazonka.Types.AWSRequest Amazonka.LookoutVision.DescribeProject.DescribeProject
instance Control.DeepSeq.NFData Amazonka.LookoutVision.DescribeProject.DescribeProjectResponse
instance Data.Hashable.Class.Hashable Amazonka.LookoutVision.DescribeProject.DescribeProject
instance Control.DeepSeq.NFData Amazonka.LookoutVision.DescribeProject.DescribeProject
instance Amazonka.Data.Headers.ToHeaders Amazonka.LookoutVision.DescribeProject.DescribeProject
instance Amazonka.Data.Path.ToPath Amazonka.LookoutVision.DescribeProject.DescribeProject
instance Amazonka.Data.Query.ToQuery Amazonka.LookoutVision.DescribeProject.DescribeProject


-- | Describes a version of an Amazon Lookout for Vision model.
--   
--   This operation requires permissions to perform the
--   <tt>lookoutvision:DescribeModel</tt> operation.
module Amazonka.LookoutVision.DescribeModel

-- | <i>See:</i> <a>newDescribeModel</a> smart constructor.
data DescribeModel
DescribeModel' :: Text -> Text -> DescribeModel

-- | The project that contains the version of a model that you want to
--   describe.
[$sel:projectName:DescribeModel'] :: DescribeModel -> Text

-- | The version of the model that you want to describe.
[$sel:modelVersion:DescribeModel'] :: DescribeModel -> Text

-- | Create a value of <a>DescribeModel</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:projectName:DescribeModel'</a>,
--   <a>describeModel_projectName</a> - The project that contains the
--   version of a model that you want to describe.
--   
--   <a>$sel:modelVersion:DescribeModel'</a>,
--   <a>describeModel_modelVersion</a> - The version of the model that you
--   want to describe.
newDescribeModel :: Text -> Text -> DescribeModel

-- | The project that contains the version of a model that you want to
--   describe.
describeModel_projectName :: Lens' DescribeModel Text

-- | The version of the model that you want to describe.
describeModel_modelVersion :: Lens' DescribeModel Text

-- | <i>See:</i> <a>newDescribeModelResponse</a> smart constructor.
data DescribeModelResponse
DescribeModelResponse' :: Maybe ModelDescription -> Int -> DescribeModelResponse

-- | Contains the description of the model.
[$sel:modelDescription:DescribeModelResponse'] :: DescribeModelResponse -> Maybe ModelDescription

-- | The response's http status code.
[$sel:httpStatus:DescribeModelResponse'] :: DescribeModelResponse -> Int

-- | Create a value of <a>DescribeModelResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:modelDescription:DescribeModelResponse'</a>,
--   <a>describeModelResponse_modelDescription</a> - Contains the
--   description of the model.
--   
--   <a>$sel:httpStatus:DescribeModelResponse'</a>,
--   <a>describeModelResponse_httpStatus</a> - The response's http status
--   code.
newDescribeModelResponse :: Int -> DescribeModelResponse

-- | Contains the description of the model.
describeModelResponse_modelDescription :: Lens' DescribeModelResponse (Maybe ModelDescription)

-- | The response's http status code.
describeModelResponse_httpStatus :: Lens' DescribeModelResponse Int
instance GHC.Generics.Generic Amazonka.LookoutVision.DescribeModel.DescribeModel
instance GHC.Show.Show Amazonka.LookoutVision.DescribeModel.DescribeModel
instance GHC.Read.Read Amazonka.LookoutVision.DescribeModel.DescribeModel
instance GHC.Classes.Eq Amazonka.LookoutVision.DescribeModel.DescribeModel
instance GHC.Generics.Generic Amazonka.LookoutVision.DescribeModel.DescribeModelResponse
instance GHC.Show.Show Amazonka.LookoutVision.DescribeModel.DescribeModelResponse
instance GHC.Read.Read Amazonka.LookoutVision.DescribeModel.DescribeModelResponse
instance GHC.Classes.Eq Amazonka.LookoutVision.DescribeModel.DescribeModelResponse
instance Amazonka.Types.AWSRequest Amazonka.LookoutVision.DescribeModel.DescribeModel
instance Control.DeepSeq.NFData Amazonka.LookoutVision.DescribeModel.DescribeModelResponse
instance Data.Hashable.Class.Hashable Amazonka.LookoutVision.DescribeModel.DescribeModel
instance Control.DeepSeq.NFData Amazonka.LookoutVision.DescribeModel.DescribeModel
instance Amazonka.Data.Headers.ToHeaders Amazonka.LookoutVision.DescribeModel.DescribeModel
instance Amazonka.Data.Path.ToPath Amazonka.LookoutVision.DescribeModel.DescribeModel
instance Amazonka.Data.Query.ToQuery Amazonka.LookoutVision.DescribeModel.DescribeModel


-- | Describe an Amazon Lookout for Vision dataset.
--   
--   This operation requires permissions to perform the
--   <tt>lookoutvision:DescribeDataset</tt> operation.
module Amazonka.LookoutVision.DescribeDataset

-- | <i>See:</i> <a>newDescribeDataset</a> smart constructor.
data DescribeDataset
DescribeDataset' :: Text -> Text -> DescribeDataset

-- | The name of the project that contains the dataset that you want to
--   describe.
[$sel:projectName:DescribeDataset'] :: DescribeDataset -> Text

-- | The type of the dataset to describe. Specify <tt>train</tt> to
--   describe the training dataset. Specify <tt>test</tt> to describe the
--   test dataset. If you have a single dataset project, specify
--   <tt>train</tt>
[$sel:datasetType:DescribeDataset'] :: DescribeDataset -> Text

-- | Create a value of <a>DescribeDataset</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:projectName:DescribeDataset'</a>,
--   <a>describeDataset_projectName</a> - The name of the project that
--   contains the dataset that you want to describe.
--   
--   <a>$sel:datasetType:DescribeDataset'</a>,
--   <a>describeDataset_datasetType</a> - The type of the dataset to
--   describe. Specify <tt>train</tt> to describe the training dataset.
--   Specify <tt>test</tt> to describe the test dataset. If you have a
--   single dataset project, specify <tt>train</tt>
newDescribeDataset :: Text -> Text -> DescribeDataset

-- | The name of the project that contains the dataset that you want to
--   describe.
describeDataset_projectName :: Lens' DescribeDataset Text

-- | The type of the dataset to describe. Specify <tt>train</tt> to
--   describe the training dataset. Specify <tt>test</tt> to describe the
--   test dataset. If you have a single dataset project, specify
--   <tt>train</tt>
describeDataset_datasetType :: Lens' DescribeDataset Text

-- | <i>See:</i> <a>newDescribeDatasetResponse</a> smart constructor.
data DescribeDatasetResponse
DescribeDatasetResponse' :: Maybe DatasetDescription -> Int -> DescribeDatasetResponse

-- | The description of the requested dataset.
[$sel:datasetDescription:DescribeDatasetResponse'] :: DescribeDatasetResponse -> Maybe DatasetDescription

-- | The response's http status code.
[$sel:httpStatus:DescribeDatasetResponse'] :: DescribeDatasetResponse -> Int

-- | Create a value of <a>DescribeDatasetResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:datasetDescription:DescribeDatasetResponse'</a>,
--   <a>describeDatasetResponse_datasetDescription</a> - The description of
--   the requested dataset.
--   
--   <a>$sel:httpStatus:DescribeDatasetResponse'</a>,
--   <a>describeDatasetResponse_httpStatus</a> - The response's http status
--   code.
newDescribeDatasetResponse :: Int -> DescribeDatasetResponse

-- | The description of the requested dataset.
describeDatasetResponse_datasetDescription :: Lens' DescribeDatasetResponse (Maybe DatasetDescription)

-- | The response's http status code.
describeDatasetResponse_httpStatus :: Lens' DescribeDatasetResponse Int
instance GHC.Generics.Generic Amazonka.LookoutVision.DescribeDataset.DescribeDataset
instance GHC.Show.Show Amazonka.LookoutVision.DescribeDataset.DescribeDataset
instance GHC.Read.Read Amazonka.LookoutVision.DescribeDataset.DescribeDataset
instance GHC.Classes.Eq Amazonka.LookoutVision.DescribeDataset.DescribeDataset
instance GHC.Generics.Generic Amazonka.LookoutVision.DescribeDataset.DescribeDatasetResponse
instance GHC.Show.Show Amazonka.LookoutVision.DescribeDataset.DescribeDatasetResponse
instance GHC.Read.Read Amazonka.LookoutVision.DescribeDataset.DescribeDatasetResponse
instance GHC.Classes.Eq Amazonka.LookoutVision.DescribeDataset.DescribeDatasetResponse
instance Amazonka.Types.AWSRequest Amazonka.LookoutVision.DescribeDataset.DescribeDataset
instance Control.DeepSeq.NFData Amazonka.LookoutVision.DescribeDataset.DescribeDatasetResponse
instance Data.Hashable.Class.Hashable Amazonka.LookoutVision.DescribeDataset.DescribeDataset
instance Control.DeepSeq.NFData Amazonka.LookoutVision.DescribeDataset.DescribeDataset
instance Amazonka.Data.Headers.ToHeaders Amazonka.LookoutVision.DescribeDataset.DescribeDataset
instance Amazonka.Data.Path.ToPath Amazonka.LookoutVision.DescribeDataset.DescribeDataset
instance Amazonka.Data.Query.ToQuery Amazonka.LookoutVision.DescribeDataset.DescribeDataset


-- | Deletes an Amazon Lookout for Vision project.
--   
--   To delete a project, you must first delete each version of the model
--   associated with the project. To delete a model use the DeleteModel
--   operation.
--   
--   You also have to delete the dataset(s) associated with the model. For
--   more information, see DeleteDataset. The images referenced by the
--   training and test datasets aren't deleted.
--   
--   This operation requires permissions to perform the
--   <tt>lookoutvision:DeleteProject</tt> operation.
module Amazonka.LookoutVision.DeleteProject

-- | <i>See:</i> <a>newDeleteProject</a> smart constructor.
data DeleteProject
DeleteProject' :: Maybe Text -> Text -> DeleteProject

-- | ClientToken is an idempotency token that ensures a call to
--   <tt>DeleteProject</tt> completes only once. You choose the value to
--   pass. For example, An issue, such as an network outage, might prevent
--   you from getting a response from <tt>DeleteProject</tt>. In this case,
--   safely retry your call to <tt>DeleteProject</tt> by using the same
--   <tt>ClientToken</tt> parameter value. An error occurs if the other
--   input parameters are not the same as in the first request. Using a
--   different value for <tt>ClientToken</tt> is considered a new call to
--   <tt>DeleteProject</tt>. An idempotency token is active for 8 hours.
[$sel:clientToken:DeleteProject'] :: DeleteProject -> Maybe Text

-- | The name of the project to delete.
[$sel:projectName:DeleteProject'] :: DeleteProject -> Text

-- | Create a value of <a>DeleteProject</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:clientToken:DeleteProject'</a>,
--   <a>deleteProject_clientToken</a> - ClientToken is an idempotency token
--   that ensures a call to <tt>DeleteProject</tt> completes only once. You
--   choose the value to pass. For example, An issue, such as an network
--   outage, might prevent you from getting a response from
--   <tt>DeleteProject</tt>. In this case, safely retry your call to
--   <tt>DeleteProject</tt> by using the same <tt>ClientToken</tt>
--   parameter value. An error occurs if the other input parameters are not
--   the same as in the first request. Using a different value for
--   <tt>ClientToken</tt> is considered a new call to
--   <tt>DeleteProject</tt>. An idempotency token is active for 8 hours.
--   
--   <a>$sel:projectName:DeleteProject'</a>,
--   <a>deleteProject_projectName</a> - The name of the project to delete.
newDeleteProject :: Text -> DeleteProject

-- | ClientToken is an idempotency token that ensures a call to
--   <tt>DeleteProject</tt> completes only once. You choose the value to
--   pass. For example, An issue, such as an network outage, might prevent
--   you from getting a response from <tt>DeleteProject</tt>. In this case,
--   safely retry your call to <tt>DeleteProject</tt> by using the same
--   <tt>ClientToken</tt> parameter value. An error occurs if the other
--   input parameters are not the same as in the first request. Using a
--   different value for <tt>ClientToken</tt> is considered a new call to
--   <tt>DeleteProject</tt>. An idempotency token is active for 8 hours.
deleteProject_clientToken :: Lens' DeleteProject (Maybe Text)

-- | The name of the project to delete.
deleteProject_projectName :: Lens' DeleteProject Text

-- | <i>See:</i> <a>newDeleteProjectResponse</a> smart constructor.
data DeleteProjectResponse
DeleteProjectResponse' :: Maybe Text -> Int -> DeleteProjectResponse

-- | The Amazon Resource Name (ARN) of the project that was deleted.
[$sel:projectArn:DeleteProjectResponse'] :: DeleteProjectResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:DeleteProjectResponse'] :: DeleteProjectResponse -> Int

-- | Create a value of <a>DeleteProjectResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:projectArn:DeleteProjectResponse'</a>,
--   <a>deleteProjectResponse_projectArn</a> - The Amazon Resource Name
--   (ARN) of the project that was deleted.
--   
--   <a>$sel:httpStatus:DeleteProjectResponse'</a>,
--   <a>deleteProjectResponse_httpStatus</a> - The response's http status
--   code.
newDeleteProjectResponse :: Int -> DeleteProjectResponse

-- | The Amazon Resource Name (ARN) of the project that was deleted.
deleteProjectResponse_projectArn :: Lens' DeleteProjectResponse (Maybe Text)

-- | The response's http status code.
deleteProjectResponse_httpStatus :: Lens' DeleteProjectResponse Int
instance GHC.Generics.Generic Amazonka.LookoutVision.DeleteProject.DeleteProject
instance GHC.Show.Show Amazonka.LookoutVision.DeleteProject.DeleteProject
instance GHC.Read.Read Amazonka.LookoutVision.DeleteProject.DeleteProject
instance GHC.Classes.Eq Amazonka.LookoutVision.DeleteProject.DeleteProject
instance GHC.Generics.Generic Amazonka.LookoutVision.DeleteProject.DeleteProjectResponse
instance GHC.Show.Show Amazonka.LookoutVision.DeleteProject.DeleteProjectResponse
instance GHC.Read.Read Amazonka.LookoutVision.DeleteProject.DeleteProjectResponse
instance GHC.Classes.Eq Amazonka.LookoutVision.DeleteProject.DeleteProjectResponse
instance Amazonka.Types.AWSRequest Amazonka.LookoutVision.DeleteProject.DeleteProject
instance Control.DeepSeq.NFData Amazonka.LookoutVision.DeleteProject.DeleteProjectResponse
instance Data.Hashable.Class.Hashable Amazonka.LookoutVision.DeleteProject.DeleteProject
instance Control.DeepSeq.NFData Amazonka.LookoutVision.DeleteProject.DeleteProject
instance Amazonka.Data.Headers.ToHeaders Amazonka.LookoutVision.DeleteProject.DeleteProject
instance Amazonka.Data.Path.ToPath Amazonka.LookoutVision.DeleteProject.DeleteProject
instance Amazonka.Data.Query.ToQuery Amazonka.LookoutVision.DeleteProject.DeleteProject


-- | Deletes an Amazon Lookout for Vision model. You can't delete a running
--   model. To stop a running model, use the StopModel operation.
--   
--   It might take a few seconds to delete a model. To determine if a model
--   has been deleted, call ListProjects and check if the version of the
--   model (<tt>ModelVersion</tt>) is in the <tt>Models</tt> array.
--   
--   This operation requires permissions to perform the
--   <tt>lookoutvision:DeleteModel</tt> operation.
module Amazonka.LookoutVision.DeleteModel

-- | <i>See:</i> <a>newDeleteModel</a> smart constructor.
data DeleteModel
DeleteModel' :: Maybe Text -> Text -> Text -> DeleteModel

-- | ClientToken is an idempotency token that ensures a call to
--   <tt>DeleteModel</tt> completes only once. You choose the value to
--   pass. For example, An issue, such as an network outage, might prevent
--   you from getting a response from <tt>DeleteModel</tt>. In this case,
--   safely retry your call to <tt>DeleteModel</tt> by using the same
--   <tt>ClientToken</tt> parameter value. An error occurs if the other
--   input parameters are not the same as in the first request. Using a
--   different value for <tt>ClientToken</tt> is considered a new call to
--   <tt>DeleteModel</tt>. An idempotency token is active for 8 hours.
[$sel:clientToken:DeleteModel'] :: DeleteModel -> Maybe Text

-- | The name of the project that contains the model that you want to
--   delete.
[$sel:projectName:DeleteModel'] :: DeleteModel -> Text

-- | The version of the model that you want to delete.
[$sel:modelVersion:DeleteModel'] :: DeleteModel -> Text

-- | Create a value of <a>DeleteModel</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:clientToken:DeleteModel'</a>, <a>deleteModel_clientToken</a> -
--   ClientToken is an idempotency token that ensures a call to
--   <tt>DeleteModel</tt> completes only once. You choose the value to
--   pass. For example, An issue, such as an network outage, might prevent
--   you from getting a response from <tt>DeleteModel</tt>. In this case,
--   safely retry your call to <tt>DeleteModel</tt> by using the same
--   <tt>ClientToken</tt> parameter value. An error occurs if the other
--   input parameters are not the same as in the first request. Using a
--   different value for <tt>ClientToken</tt> is considered a new call to
--   <tt>DeleteModel</tt>. An idempotency token is active for 8 hours.
--   
--   <a>$sel:projectName:DeleteModel'</a>, <a>deleteModel_projectName</a> -
--   The name of the project that contains the model that you want to
--   delete.
--   
--   <a>$sel:modelVersion:DeleteModel'</a>, <a>deleteModel_modelVersion</a>
--   - The version of the model that you want to delete.
newDeleteModel :: Text -> Text -> DeleteModel

-- | ClientToken is an idempotency token that ensures a call to
--   <tt>DeleteModel</tt> completes only once. You choose the value to
--   pass. For example, An issue, such as an network outage, might prevent
--   you from getting a response from <tt>DeleteModel</tt>. In this case,
--   safely retry your call to <tt>DeleteModel</tt> by using the same
--   <tt>ClientToken</tt> parameter value. An error occurs if the other
--   input parameters are not the same as in the first request. Using a
--   different value for <tt>ClientToken</tt> is considered a new call to
--   <tt>DeleteModel</tt>. An idempotency token is active for 8 hours.
deleteModel_clientToken :: Lens' DeleteModel (Maybe Text)

-- | The name of the project that contains the model that you want to
--   delete.
deleteModel_projectName :: Lens' DeleteModel Text

-- | The version of the model that you want to delete.
deleteModel_modelVersion :: Lens' DeleteModel Text

-- | <i>See:</i> <a>newDeleteModelResponse</a> smart constructor.
data DeleteModelResponse
DeleteModelResponse' :: Maybe Text -> Int -> DeleteModelResponse

-- | The Amazon Resource Name (ARN) of the model that was deleted.
[$sel:modelArn:DeleteModelResponse'] :: DeleteModelResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:DeleteModelResponse'] :: DeleteModelResponse -> Int

-- | Create a value of <a>DeleteModelResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:modelArn:DeleteModelResponse'</a>,
--   <a>deleteModelResponse_modelArn</a> - The Amazon Resource Name (ARN)
--   of the model that was deleted.
--   
--   <a>$sel:httpStatus:DeleteModelResponse'</a>,
--   <a>deleteModelResponse_httpStatus</a> - The response's http status
--   code.
newDeleteModelResponse :: Int -> DeleteModelResponse

-- | The Amazon Resource Name (ARN) of the model that was deleted.
deleteModelResponse_modelArn :: Lens' DeleteModelResponse (Maybe Text)

-- | The response's http status code.
deleteModelResponse_httpStatus :: Lens' DeleteModelResponse Int
instance GHC.Generics.Generic Amazonka.LookoutVision.DeleteModel.DeleteModel
instance GHC.Show.Show Amazonka.LookoutVision.DeleteModel.DeleteModel
instance GHC.Read.Read Amazonka.LookoutVision.DeleteModel.DeleteModel
instance GHC.Classes.Eq Amazonka.LookoutVision.DeleteModel.DeleteModel
instance GHC.Generics.Generic Amazonka.LookoutVision.DeleteModel.DeleteModelResponse
instance GHC.Show.Show Amazonka.LookoutVision.DeleteModel.DeleteModelResponse
instance GHC.Read.Read Amazonka.LookoutVision.DeleteModel.DeleteModelResponse
instance GHC.Classes.Eq Amazonka.LookoutVision.DeleteModel.DeleteModelResponse
instance Amazonka.Types.AWSRequest Amazonka.LookoutVision.DeleteModel.DeleteModel
instance Control.DeepSeq.NFData Amazonka.LookoutVision.DeleteModel.DeleteModelResponse
instance Data.Hashable.Class.Hashable Amazonka.LookoutVision.DeleteModel.DeleteModel
instance Control.DeepSeq.NFData Amazonka.LookoutVision.DeleteModel.DeleteModel
instance Amazonka.Data.Headers.ToHeaders Amazonka.LookoutVision.DeleteModel.DeleteModel
instance Amazonka.Data.Path.ToPath Amazonka.LookoutVision.DeleteModel.DeleteModel
instance Amazonka.Data.Query.ToQuery Amazonka.LookoutVision.DeleteModel.DeleteModel


-- | Deletes an existing Amazon Lookout for Vision <tt>dataset</tt>.
--   
--   If your the project has a single dataset, you must create a new
--   dataset before you can create a model.
--   
--   If you project has a training dataset and a test dataset consider the
--   following.
--   
--   <ul>
--   <li>If you delete the test dataset, your project reverts to a single
--   dataset project. If you then train the model, Amazon Lookout for
--   Vision internally splits the remaining dataset into a training and
--   test dataset.</li>
--   <li>If you delete the training dataset, you must create a training
--   dataset before you can create a model.</li>
--   </ul>
--   
--   This operation requires permissions to perform the
--   <tt>lookoutvision:DeleteDataset</tt> operation.
module Amazonka.LookoutVision.DeleteDataset

-- | <i>See:</i> <a>newDeleteDataset</a> smart constructor.
data DeleteDataset
DeleteDataset' :: Maybe Text -> Text -> Text -> DeleteDataset

-- | ClientToken is an idempotency token that ensures a call to
--   <tt>DeleteDataset</tt> completes only once. You choose the value to
--   pass. For example, An issue, such as an network outage, might prevent
--   you from getting a response from <tt>DeleteDataset</tt>. In this case,
--   safely retry your call to <tt>DeleteDataset</tt> by using the same
--   <tt>ClientToken</tt> parameter value. An error occurs if the other
--   input parameters are not the same as in the first request. Using a
--   different value for <tt>ClientToken</tt> is considered a new call to
--   <tt>DeleteDataset</tt>. An idempotency token is active for 8 hours.
[$sel:clientToken:DeleteDataset'] :: DeleteDataset -> Maybe Text

-- | The name of the project that contains the dataset that you want to
--   delete.
[$sel:projectName:DeleteDataset'] :: DeleteDataset -> Text

-- | The type of the dataset to delete. Specify <tt>train</tt> to delete
--   the training dataset. Specify <tt>test</tt> to delete the test
--   dataset. To delete the dataset in a single dataset project, specify
--   <tt>train</tt>.
[$sel:datasetType:DeleteDataset'] :: DeleteDataset -> Text

-- | Create a value of <a>DeleteDataset</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:clientToken:DeleteDataset'</a>,
--   <a>deleteDataset_clientToken</a> - ClientToken is an idempotency token
--   that ensures a call to <tt>DeleteDataset</tt> completes only once. You
--   choose the value to pass. For example, An issue, such as an network
--   outage, might prevent you from getting a response from
--   <tt>DeleteDataset</tt>. In this case, safely retry your call to
--   <tt>DeleteDataset</tt> by using the same <tt>ClientToken</tt>
--   parameter value. An error occurs if the other input parameters are not
--   the same as in the first request. Using a different value for
--   <tt>ClientToken</tt> is considered a new call to
--   <tt>DeleteDataset</tt>. An idempotency token is active for 8 hours.
--   
--   <a>$sel:projectName:DeleteDataset'</a>,
--   <a>deleteDataset_projectName</a> - The name of the project that
--   contains the dataset that you want to delete.
--   
--   <a>$sel:datasetType:DeleteDataset'</a>,
--   <a>deleteDataset_datasetType</a> - The type of the dataset to delete.
--   Specify <tt>train</tt> to delete the training dataset. Specify
--   <tt>test</tt> to delete the test dataset. To delete the dataset in a
--   single dataset project, specify <tt>train</tt>.
newDeleteDataset :: Text -> Text -> DeleteDataset

-- | ClientToken is an idempotency token that ensures a call to
--   <tt>DeleteDataset</tt> completes only once. You choose the value to
--   pass. For example, An issue, such as an network outage, might prevent
--   you from getting a response from <tt>DeleteDataset</tt>. In this case,
--   safely retry your call to <tt>DeleteDataset</tt> by using the same
--   <tt>ClientToken</tt> parameter value. An error occurs if the other
--   input parameters are not the same as in the first request. Using a
--   different value for <tt>ClientToken</tt> is considered a new call to
--   <tt>DeleteDataset</tt>. An idempotency token is active for 8 hours.
deleteDataset_clientToken :: Lens' DeleteDataset (Maybe Text)

-- | The name of the project that contains the dataset that you want to
--   delete.
deleteDataset_projectName :: Lens' DeleteDataset Text

-- | The type of the dataset to delete. Specify <tt>train</tt> to delete
--   the training dataset. Specify <tt>test</tt> to delete the test
--   dataset. To delete the dataset in a single dataset project, specify
--   <tt>train</tt>.
deleteDataset_datasetType :: Lens' DeleteDataset Text

-- | <i>See:</i> <a>newDeleteDatasetResponse</a> smart constructor.
data DeleteDatasetResponse
DeleteDatasetResponse' :: Int -> DeleteDatasetResponse

-- | The response's http status code.
[$sel:httpStatus:DeleteDatasetResponse'] :: DeleteDatasetResponse -> Int

-- | Create a value of <a>DeleteDatasetResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteDatasetResponse'</a>,
--   <a>deleteDatasetResponse_httpStatus</a> - The response's http status
--   code.
newDeleteDatasetResponse :: Int -> DeleteDatasetResponse

-- | The response's http status code.
deleteDatasetResponse_httpStatus :: Lens' DeleteDatasetResponse Int
instance GHC.Generics.Generic Amazonka.LookoutVision.DeleteDataset.DeleteDataset
instance GHC.Show.Show Amazonka.LookoutVision.DeleteDataset.DeleteDataset
instance GHC.Read.Read Amazonka.LookoutVision.DeleteDataset.DeleteDataset
instance GHC.Classes.Eq Amazonka.LookoutVision.DeleteDataset.DeleteDataset
instance GHC.Generics.Generic Amazonka.LookoutVision.DeleteDataset.DeleteDatasetResponse
instance GHC.Show.Show Amazonka.LookoutVision.DeleteDataset.DeleteDatasetResponse
instance GHC.Read.Read Amazonka.LookoutVision.DeleteDataset.DeleteDatasetResponse
instance GHC.Classes.Eq Amazonka.LookoutVision.DeleteDataset.DeleteDatasetResponse
instance Amazonka.Types.AWSRequest Amazonka.LookoutVision.DeleteDataset.DeleteDataset
instance Control.DeepSeq.NFData Amazonka.LookoutVision.DeleteDataset.DeleteDatasetResponse
instance Data.Hashable.Class.Hashable Amazonka.LookoutVision.DeleteDataset.DeleteDataset
instance Control.DeepSeq.NFData Amazonka.LookoutVision.DeleteDataset.DeleteDataset
instance Amazonka.Data.Headers.ToHeaders Amazonka.LookoutVision.DeleteDataset.DeleteDataset
instance Amazonka.Data.Path.ToPath Amazonka.LookoutVision.DeleteDataset.DeleteDataset
instance Amazonka.Data.Query.ToQuery Amazonka.LookoutVision.DeleteDataset.DeleteDataset


-- | Creates an empty Amazon Lookout for Vision project. After you create
--   the project, add a dataset by calling CreateDataset.
--   
--   This operation requires permissions to perform the
--   <tt>lookoutvision:CreateProject</tt> operation.
module Amazonka.LookoutVision.CreateProject

-- | <i>See:</i> <a>newCreateProject</a> smart constructor.
data CreateProject
CreateProject' :: Maybe Text -> Text -> CreateProject

-- | ClientToken is an idempotency token that ensures a call to
--   <tt>CreateProject</tt> completes only once. You choose the value to
--   pass. For example, An issue, such as an network outage, might prevent
--   you from getting a response from <tt>CreateProject</tt>. In this case,
--   safely retry your call to <tt>CreateProject</tt> by using the same
--   <tt>ClientToken</tt> parameter value. An error occurs if the other
--   input parameters are not the same as in the first request. Using a
--   different value for <tt>ClientToken</tt> is considered a new call to
--   <tt>CreateProject</tt>. An idempotency token is active for 8 hours.
[$sel:clientToken:CreateProject'] :: CreateProject -> Maybe Text

-- | The name for the project.
[$sel:projectName:CreateProject'] :: CreateProject -> Text

-- | Create a value of <a>CreateProject</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:clientToken:CreateProject'</a>,
--   <a>createProject_clientToken</a> - ClientToken is an idempotency token
--   that ensures a call to <tt>CreateProject</tt> completes only once. You
--   choose the value to pass. For example, An issue, such as an network
--   outage, might prevent you from getting a response from
--   <tt>CreateProject</tt>. In this case, safely retry your call to
--   <tt>CreateProject</tt> by using the same <tt>ClientToken</tt>
--   parameter value. An error occurs if the other input parameters are not
--   the same as in the first request. Using a different value for
--   <tt>ClientToken</tt> is considered a new call to
--   <tt>CreateProject</tt>. An idempotency token is active for 8 hours.
--   
--   <a>$sel:projectName:CreateProject'</a>,
--   <a>createProject_projectName</a> - The name for the project.
newCreateProject :: Text -> CreateProject

-- | ClientToken is an idempotency token that ensures a call to
--   <tt>CreateProject</tt> completes only once. You choose the value to
--   pass. For example, An issue, such as an network outage, might prevent
--   you from getting a response from <tt>CreateProject</tt>. In this case,
--   safely retry your call to <tt>CreateProject</tt> by using the same
--   <tt>ClientToken</tt> parameter value. An error occurs if the other
--   input parameters are not the same as in the first request. Using a
--   different value for <tt>ClientToken</tt> is considered a new call to
--   <tt>CreateProject</tt>. An idempotency token is active for 8 hours.
createProject_clientToken :: Lens' CreateProject (Maybe Text)

-- | The name for the project.
createProject_projectName :: Lens' CreateProject Text

-- | <i>See:</i> <a>newCreateProjectResponse</a> smart constructor.
data CreateProjectResponse
CreateProjectResponse' :: Maybe ProjectMetadata -> Int -> CreateProjectResponse

-- | Information about the project.
[$sel:projectMetadata:CreateProjectResponse'] :: CreateProjectResponse -> Maybe ProjectMetadata

-- | The response's http status code.
[$sel:httpStatus:CreateProjectResponse'] :: CreateProjectResponse -> Int

-- | Create a value of <a>CreateProjectResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:projectMetadata:CreateProjectResponse'</a>,
--   <a>createProjectResponse_projectMetadata</a> - Information about the
--   project.
--   
--   <a>$sel:httpStatus:CreateProjectResponse'</a>,
--   <a>createProjectResponse_httpStatus</a> - The response's http status
--   code.
newCreateProjectResponse :: Int -> CreateProjectResponse

-- | Information about the project.
createProjectResponse_projectMetadata :: Lens' CreateProjectResponse (Maybe ProjectMetadata)

-- | The response's http status code.
createProjectResponse_httpStatus :: Lens' CreateProjectResponse Int
instance GHC.Generics.Generic Amazonka.LookoutVision.CreateProject.CreateProject
instance GHC.Show.Show Amazonka.LookoutVision.CreateProject.CreateProject
instance GHC.Read.Read Amazonka.LookoutVision.CreateProject.CreateProject
instance GHC.Classes.Eq Amazonka.LookoutVision.CreateProject.CreateProject
instance GHC.Generics.Generic Amazonka.LookoutVision.CreateProject.CreateProjectResponse
instance GHC.Show.Show Amazonka.LookoutVision.CreateProject.CreateProjectResponse
instance GHC.Read.Read Amazonka.LookoutVision.CreateProject.CreateProjectResponse
instance GHC.Classes.Eq Amazonka.LookoutVision.CreateProject.CreateProjectResponse
instance Amazonka.Types.AWSRequest Amazonka.LookoutVision.CreateProject.CreateProject
instance Control.DeepSeq.NFData Amazonka.LookoutVision.CreateProject.CreateProjectResponse
instance Data.Hashable.Class.Hashable Amazonka.LookoutVision.CreateProject.CreateProject
instance Control.DeepSeq.NFData Amazonka.LookoutVision.CreateProject.CreateProject
instance Amazonka.Data.Headers.ToHeaders Amazonka.LookoutVision.CreateProject.CreateProject
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LookoutVision.CreateProject.CreateProject
instance Amazonka.Data.Path.ToPath Amazonka.LookoutVision.CreateProject.CreateProject
instance Amazonka.Data.Query.ToQuery Amazonka.LookoutVision.CreateProject.CreateProject


-- | Creates a new version of a model within an an Amazon Lookout for
--   Vision project. <tt>CreateModel</tt> is an asynchronous operation in
--   which Amazon Lookout for Vision trains, tests, and evaluates a new
--   version of a model.
--   
--   To get the current status, check the <tt>Status</tt> field returned in
--   the response from DescribeModel.
--   
--   If the project has a single dataset, Amazon Lookout for Vision
--   internally splits the dataset to create a training and a test dataset.
--   If the project has a training and a test dataset, Lookout for Vision
--   uses the respective datasets to train and test the model.
--   
--   After training completes, the evaluation metrics are stored at the
--   location specified in <tt>OutputConfig</tt>.
--   
--   This operation requires permissions to perform the
--   <tt>lookoutvision:CreateModel</tt> operation. If you want to tag your
--   model, you also require permission to the
--   <tt>lookoutvision:TagResource</tt> operation.
module Amazonka.LookoutVision.CreateModel

-- | <i>See:</i> <a>newCreateModel</a> smart constructor.
data CreateModel
CreateModel' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe [Tag] -> Text -> OutputConfig -> CreateModel

-- | ClientToken is an idempotency token that ensures a call to
--   <tt>CreateModel</tt> completes only once. You choose the value to
--   pass. For example, An issue, such as an network outage, might prevent
--   you from getting a response from <tt>CreateModel</tt>. In this case,
--   safely retry your call to <tt>CreateModel</tt> by using the same
--   <tt>ClientToken</tt> parameter value. An error occurs if the other
--   input parameters are not the same as in the first request. Using a
--   different value for <tt>ClientToken</tt> is considered a new call to
--   <tt>CreateModel</tt>. An idempotency token is active for 8 hours.
[$sel:clientToken:CreateModel'] :: CreateModel -> Maybe Text

-- | The identifier for your AWS Key Management Service (AWS KMS) customer
--   master key (CMK). The key is used to encrypt training and test images
--   copied into the service for model training. Your source images are
--   unaffected. If this parameter is not specified, the copied images are
--   encrypted by a key that AWS owns and manages.
[$sel:kmsKeyId:CreateModel'] :: CreateModel -> Maybe Text

-- | A description for the version of the model.
[$sel:description:CreateModel'] :: CreateModel -> Maybe Text

-- | A set of tags (key-value pairs) that you want to attach to the model.
[$sel:tags:CreateModel'] :: CreateModel -> Maybe [Tag]

-- | The name of the project in which you want to create a model version.
[$sel:projectName:CreateModel'] :: CreateModel -> Text

-- | The location where Amazon Lookout for Vision saves the training
--   results.
[$sel:outputConfig:CreateModel'] :: CreateModel -> OutputConfig

-- | Create a value of <a>CreateModel</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:clientToken:CreateModel'</a>, <a>createModel_clientToken</a> -
--   ClientToken is an idempotency token that ensures a call to
--   <tt>CreateModel</tt> completes only once. You choose the value to
--   pass. For example, An issue, such as an network outage, might prevent
--   you from getting a response from <tt>CreateModel</tt>. In this case,
--   safely retry your call to <tt>CreateModel</tt> by using the same
--   <tt>ClientToken</tt> parameter value. An error occurs if the other
--   input parameters are not the same as in the first request. Using a
--   different value for <tt>ClientToken</tt> is considered a new call to
--   <tt>CreateModel</tt>. An idempotency token is active for 8 hours.
--   
--   <a>$sel:kmsKeyId:CreateModel'</a>, <a>createModel_kmsKeyId</a> - The
--   identifier for your AWS Key Management Service (AWS KMS) customer
--   master key (CMK). The key is used to encrypt training and test images
--   copied into the service for model training. Your source images are
--   unaffected. If this parameter is not specified, the copied images are
--   encrypted by a key that AWS owns and manages.
--   
--   <a>$sel:description:CreateModel'</a>, <a>createModel_description</a> -
--   A description for the version of the model.
--   
--   <a>$sel:tags:CreateModel'</a>, <a>createModel_tags</a> - A set of tags
--   (key-value pairs) that you want to attach to the model.
--   
--   <a>$sel:projectName:CreateModel'</a>, <a>createModel_projectName</a> -
--   The name of the project in which you want to create a model version.
--   
--   <a>$sel:outputConfig:CreateModel'</a>, <a>createModel_outputConfig</a>
--   - The location where Amazon Lookout for Vision saves the training
--   results.
newCreateModel :: Text -> OutputConfig -> CreateModel

-- | ClientToken is an idempotency token that ensures a call to
--   <tt>CreateModel</tt> completes only once. You choose the value to
--   pass. For example, An issue, such as an network outage, might prevent
--   you from getting a response from <tt>CreateModel</tt>. In this case,
--   safely retry your call to <tt>CreateModel</tt> by using the same
--   <tt>ClientToken</tt> parameter value. An error occurs if the other
--   input parameters are not the same as in the first request. Using a
--   different value for <tt>ClientToken</tt> is considered a new call to
--   <tt>CreateModel</tt>. An idempotency token is active for 8 hours.
createModel_clientToken :: Lens' CreateModel (Maybe Text)

-- | The identifier for your AWS Key Management Service (AWS KMS) customer
--   master key (CMK). The key is used to encrypt training and test images
--   copied into the service for model training. Your source images are
--   unaffected. If this parameter is not specified, the copied images are
--   encrypted by a key that AWS owns and manages.
createModel_kmsKeyId :: Lens' CreateModel (Maybe Text)

-- | A description for the version of the model.
createModel_description :: Lens' CreateModel (Maybe Text)

-- | A set of tags (key-value pairs) that you want to attach to the model.
createModel_tags :: Lens' CreateModel (Maybe [Tag])

-- | The name of the project in which you want to create a model version.
createModel_projectName :: Lens' CreateModel Text

-- | The location where Amazon Lookout for Vision saves the training
--   results.
createModel_outputConfig :: Lens' CreateModel OutputConfig

-- | <i>See:</i> <a>newCreateModelResponse</a> smart constructor.
data CreateModelResponse
CreateModelResponse' :: Maybe ModelMetadata -> Int -> CreateModelResponse

-- | The response from a call to <tt>CreateModel</tt>.
[$sel:modelMetadata:CreateModelResponse'] :: CreateModelResponse -> Maybe ModelMetadata

-- | The response's http status code.
[$sel:httpStatus:CreateModelResponse'] :: CreateModelResponse -> Int

-- | Create a value of <a>CreateModelResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:modelMetadata:CreateModelResponse'</a>,
--   <a>createModelResponse_modelMetadata</a> - The response from a call to
--   <tt>CreateModel</tt>.
--   
--   <a>$sel:httpStatus:CreateModelResponse'</a>,
--   <a>createModelResponse_httpStatus</a> - The response's http status
--   code.
newCreateModelResponse :: Int -> CreateModelResponse

-- | The response from a call to <tt>CreateModel</tt>.
createModelResponse_modelMetadata :: Lens' CreateModelResponse (Maybe ModelMetadata)

-- | The response's http status code.
createModelResponse_httpStatus :: Lens' CreateModelResponse Int
instance GHC.Generics.Generic Amazonka.LookoutVision.CreateModel.CreateModel
instance GHC.Show.Show Amazonka.LookoutVision.CreateModel.CreateModel
instance GHC.Read.Read Amazonka.LookoutVision.CreateModel.CreateModel
instance GHC.Classes.Eq Amazonka.LookoutVision.CreateModel.CreateModel
instance GHC.Generics.Generic Amazonka.LookoutVision.CreateModel.CreateModelResponse
instance GHC.Show.Show Amazonka.LookoutVision.CreateModel.CreateModelResponse
instance GHC.Read.Read Amazonka.LookoutVision.CreateModel.CreateModelResponse
instance GHC.Classes.Eq Amazonka.LookoutVision.CreateModel.CreateModelResponse
instance Amazonka.Types.AWSRequest Amazonka.LookoutVision.CreateModel.CreateModel
instance Control.DeepSeq.NFData Amazonka.LookoutVision.CreateModel.CreateModelResponse
instance Data.Hashable.Class.Hashable Amazonka.LookoutVision.CreateModel.CreateModel
instance Control.DeepSeq.NFData Amazonka.LookoutVision.CreateModel.CreateModel
instance Amazonka.Data.Headers.ToHeaders Amazonka.LookoutVision.CreateModel.CreateModel
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LookoutVision.CreateModel.CreateModel
instance Amazonka.Data.Path.ToPath Amazonka.LookoutVision.CreateModel.CreateModel
instance Amazonka.Data.Query.ToQuery Amazonka.LookoutVision.CreateModel.CreateModel


-- | Creates a new dataset in an Amazon Lookout for Vision project.
--   <tt>CreateDataset</tt> can create a training or a test dataset from a
--   valid dataset source (<tt>DatasetSource</tt>).
--   
--   If you want a single dataset project, specify <tt>train</tt> for the
--   value of <tt>DatasetType</tt>.
--   
--   To have a project with separate training and test datasets, call
--   <tt>CreateDataset</tt> twice. On the first call, specify
--   <tt>train</tt> for the value of <tt>DatasetType</tt>. On the second
--   call, specify <tt>test</tt> for the value of <tt>DatasetType</tt>.
--   
--   This operation requires permissions to perform the
--   <tt>lookoutvision:CreateDataset</tt> operation.
module Amazonka.LookoutVision.CreateDataset

-- | <i>See:</i> <a>newCreateDataset</a> smart constructor.
data CreateDataset
CreateDataset' :: Maybe Text -> Maybe DatasetSource -> Text -> Text -> CreateDataset

-- | ClientToken is an idempotency token that ensures a call to
--   <tt>CreateDataset</tt> completes only once. You choose the value to
--   pass. For example, An issue, such as an network outage, might prevent
--   you from getting a response from <tt>CreateDataset</tt>. In this case,
--   safely retry your call to <tt>CreateDataset</tt> by using the same
--   <tt>ClientToken</tt> parameter value. An error occurs if the other
--   input parameters are not the same as in the first request. Using a
--   different value for <tt>ClientToken</tt> is considered a new call to
--   <tt>CreateDataset</tt>. An idempotency token is active for 8 hours.
[$sel:clientToken:CreateDataset'] :: CreateDataset -> Maybe Text

-- | The location of the manifest file that Amazon Lookout for Vision uses
--   to create the dataset.
--   
--   If you don't specify <tt>DatasetSource</tt>, an empty dataset is
--   created and the operation synchronously returns. Later, you can add
--   JSON Lines by calling UpdateDatasetEntries.
--   
--   If you specify a value for <tt>DataSource</tt>, the manifest at the S3
--   location is validated and used to create the dataset. The call to
--   <tt>CreateDataset</tt> is asynchronous and might take a while to
--   complete. To find out the current status, Check the value of
--   <tt>Status</tt> returned in a call to DescribeDataset.
[$sel:datasetSource:CreateDataset'] :: CreateDataset -> Maybe DatasetSource

-- | The name of the project in which you want to create a dataset.
[$sel:projectName:CreateDataset'] :: CreateDataset -> Text

-- | The type of the dataset. Specify <tt>train</tt> for a training
--   dataset. Specify <tt>test</tt> for a test dataset.
[$sel:datasetType:CreateDataset'] :: CreateDataset -> Text

-- | Create a value of <a>CreateDataset</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:clientToken:CreateDataset'</a>,
--   <a>createDataset_clientToken</a> - ClientToken is an idempotency token
--   that ensures a call to <tt>CreateDataset</tt> completes only once. You
--   choose the value to pass. For example, An issue, such as an network
--   outage, might prevent you from getting a response from
--   <tt>CreateDataset</tt>. In this case, safely retry your call to
--   <tt>CreateDataset</tt> by using the same <tt>ClientToken</tt>
--   parameter value. An error occurs if the other input parameters are not
--   the same as in the first request. Using a different value for
--   <tt>ClientToken</tt> is considered a new call to
--   <tt>CreateDataset</tt>. An idempotency token is active for 8 hours.
--   
--   <a>$sel:datasetSource:CreateDataset'</a>,
--   <a>createDataset_datasetSource</a> - The location of the manifest file
--   that Amazon Lookout for Vision uses to create the dataset.
--   
--   If you don't specify <tt>DatasetSource</tt>, an empty dataset is
--   created and the operation synchronously returns. Later, you can add
--   JSON Lines by calling UpdateDatasetEntries.
--   
--   If you specify a value for <tt>DataSource</tt>, the manifest at the S3
--   location is validated and used to create the dataset. The call to
--   <tt>CreateDataset</tt> is asynchronous and might take a while to
--   complete. To find out the current status, Check the value of
--   <tt>Status</tt> returned in a call to DescribeDataset.
--   
--   <a>$sel:projectName:CreateDataset'</a>,
--   <a>createDataset_projectName</a> - The name of the project in which
--   you want to create a dataset.
--   
--   <a>$sel:datasetType:CreateDataset'</a>,
--   <a>createDataset_datasetType</a> - The type of the dataset. Specify
--   <tt>train</tt> for a training dataset. Specify <tt>test</tt> for a
--   test dataset.
newCreateDataset :: Text -> Text -> CreateDataset

-- | ClientToken is an idempotency token that ensures a call to
--   <tt>CreateDataset</tt> completes only once. You choose the value to
--   pass. For example, An issue, such as an network outage, might prevent
--   you from getting a response from <tt>CreateDataset</tt>. In this case,
--   safely retry your call to <tt>CreateDataset</tt> by using the same
--   <tt>ClientToken</tt> parameter value. An error occurs if the other
--   input parameters are not the same as in the first request. Using a
--   different value for <tt>ClientToken</tt> is considered a new call to
--   <tt>CreateDataset</tt>. An idempotency token is active for 8 hours.
createDataset_clientToken :: Lens' CreateDataset (Maybe Text)

-- | The location of the manifest file that Amazon Lookout for Vision uses
--   to create the dataset.
--   
--   If you don't specify <tt>DatasetSource</tt>, an empty dataset is
--   created and the operation synchronously returns. Later, you can add
--   JSON Lines by calling UpdateDatasetEntries.
--   
--   If you specify a value for <tt>DataSource</tt>, the manifest at the S3
--   location is validated and used to create the dataset. The call to
--   <tt>CreateDataset</tt> is asynchronous and might take a while to
--   complete. To find out the current status, Check the value of
--   <tt>Status</tt> returned in a call to DescribeDataset.
createDataset_datasetSource :: Lens' CreateDataset (Maybe DatasetSource)

-- | The name of the project in which you want to create a dataset.
createDataset_projectName :: Lens' CreateDataset Text

-- | The type of the dataset. Specify <tt>train</tt> for a training
--   dataset. Specify <tt>test</tt> for a test dataset.
createDataset_datasetType :: Lens' CreateDataset Text

-- | <i>See:</i> <a>newCreateDatasetResponse</a> smart constructor.
data CreateDatasetResponse
CreateDatasetResponse' :: Maybe DatasetMetadata -> Int -> CreateDatasetResponse

-- | Information about the dataset.
[$sel:datasetMetadata:CreateDatasetResponse'] :: CreateDatasetResponse -> Maybe DatasetMetadata

-- | The response's http status code.
[$sel:httpStatus:CreateDatasetResponse'] :: CreateDatasetResponse -> Int

-- | Create a value of <a>CreateDatasetResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:datasetMetadata:CreateDatasetResponse'</a>,
--   <a>createDatasetResponse_datasetMetadata</a> - Information about the
--   dataset.
--   
--   <a>$sel:httpStatus:CreateDatasetResponse'</a>,
--   <a>createDatasetResponse_httpStatus</a> - The response's http status
--   code.
newCreateDatasetResponse :: Int -> CreateDatasetResponse

-- | Information about the dataset.
createDatasetResponse_datasetMetadata :: Lens' CreateDatasetResponse (Maybe DatasetMetadata)

-- | The response's http status code.
createDatasetResponse_httpStatus :: Lens' CreateDatasetResponse Int
instance GHC.Generics.Generic Amazonka.LookoutVision.CreateDataset.CreateDataset
instance GHC.Show.Show Amazonka.LookoutVision.CreateDataset.CreateDataset
instance GHC.Read.Read Amazonka.LookoutVision.CreateDataset.CreateDataset
instance GHC.Classes.Eq Amazonka.LookoutVision.CreateDataset.CreateDataset
instance GHC.Generics.Generic Amazonka.LookoutVision.CreateDataset.CreateDatasetResponse
instance GHC.Show.Show Amazonka.LookoutVision.CreateDataset.CreateDatasetResponse
instance GHC.Read.Read Amazonka.LookoutVision.CreateDataset.CreateDatasetResponse
instance GHC.Classes.Eq Amazonka.LookoutVision.CreateDataset.CreateDatasetResponse
instance Amazonka.Types.AWSRequest Amazonka.LookoutVision.CreateDataset.CreateDataset
instance Control.DeepSeq.NFData Amazonka.LookoutVision.CreateDataset.CreateDatasetResponse
instance Data.Hashable.Class.Hashable Amazonka.LookoutVision.CreateDataset.CreateDataset
instance Control.DeepSeq.NFData Amazonka.LookoutVision.CreateDataset.CreateDataset
instance Amazonka.Data.Headers.ToHeaders Amazonka.LookoutVision.CreateDataset.CreateDataset
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LookoutVision.CreateDataset.CreateDataset
instance Amazonka.Data.Path.ToPath Amazonka.LookoutVision.CreateDataset.CreateDataset
instance Amazonka.Data.Query.ToQuery Amazonka.LookoutVision.CreateDataset.CreateDataset


-- | Removes one or more tags from an Amazon Lookout for Vision model. For
--   more information, see <i>Tagging a model</i> in the /Amazon Lookout
--   for Vision Developer Guide/.
--   
--   This operation requires permissions to perform the
--   <tt>lookoutvision:UntagResource</tt> operation.
module Amazonka.LookoutVision.UntagResource

-- | <i>See:</i> <a>newUntagResource</a> smart constructor.
data UntagResource
UntagResource' :: Text -> [Text] -> UntagResource

-- | The Amazon Resource Name (ARN) of the model from which you want to
--   remove tags.
[$sel:resourceArn:UntagResource'] :: UntagResource -> Text

-- | A list of the keys of the tags that you want to remove.
[$sel:tagKeys:UntagResource'] :: UntagResource -> [Text]

-- | Create a value of <a>UntagResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:UntagResource'</a>,
--   <a>untagResource_resourceArn</a> - The Amazon Resource Name (ARN) of
--   the model from which you want to remove tags.
--   
--   <a>$sel:tagKeys:UntagResource'</a>, <a>untagResource_tagKeys</a> - A
--   list of the keys of the tags that you want to remove.
newUntagResource :: Text -> UntagResource

-- | The Amazon Resource Name (ARN) of the model from which you want to
--   remove tags.
untagResource_resourceArn :: Lens' UntagResource Text

-- | A list of the keys of the tags that you want to remove.
untagResource_tagKeys :: Lens' UntagResource [Text]

-- | <i>See:</i> <a>newUntagResourceResponse</a> smart constructor.
data UntagResourceResponse
UntagResourceResponse' :: Int -> UntagResourceResponse

-- | The response's http status code.
[$sel:httpStatus:UntagResourceResponse'] :: UntagResourceResponse -> Int

-- | Create a value of <a>UntagResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UntagResourceResponse'</a>,
--   <a>untagResourceResponse_httpStatus</a> - The response's http status
--   code.
newUntagResourceResponse :: Int -> UntagResourceResponse

-- | The response's http status code.
untagResourceResponse_httpStatus :: Lens' UntagResourceResponse Int
instance GHC.Generics.Generic Amazonka.LookoutVision.UntagResource.UntagResource
instance GHC.Show.Show Amazonka.LookoutVision.UntagResource.UntagResource
instance GHC.Read.Read Amazonka.LookoutVision.UntagResource.UntagResource
instance GHC.Classes.Eq Amazonka.LookoutVision.UntagResource.UntagResource
instance GHC.Generics.Generic Amazonka.LookoutVision.UntagResource.UntagResourceResponse
instance GHC.Show.Show Amazonka.LookoutVision.UntagResource.UntagResourceResponse
instance GHC.Read.Read Amazonka.LookoutVision.UntagResource.UntagResourceResponse
instance GHC.Classes.Eq Amazonka.LookoutVision.UntagResource.UntagResourceResponse
instance Amazonka.Types.AWSRequest Amazonka.LookoutVision.UntagResource.UntagResource
instance Control.DeepSeq.NFData Amazonka.LookoutVision.UntagResource.UntagResourceResponse
instance Data.Hashable.Class.Hashable Amazonka.LookoutVision.UntagResource.UntagResource
instance Control.DeepSeq.NFData Amazonka.LookoutVision.UntagResource.UntagResource
instance Amazonka.Data.Headers.ToHeaders Amazonka.LookoutVision.UntagResource.UntagResource
instance Amazonka.Data.Path.ToPath Amazonka.LookoutVision.UntagResource.UntagResource
instance Amazonka.Data.Query.ToQuery Amazonka.LookoutVision.UntagResource.UntagResource


-- | Adds one or more JSON Line entries to a dataset. A JSON Line includes
--   information about an image used for training or testing an Amazon
--   Lookout for Vision model. The following is an example JSON Line.
--   
--   Updating a dataset might take a while to complete. To check the
--   current status, call DescribeDataset and check the <tt>Status</tt>
--   field in the response.
--   
--   This operation requires permissions to perform the
--   <tt>lookoutvision:UpdateDatasetEntries</tt> operation.
module Amazonka.LookoutVision.UpdateDatasetEntries

-- | <i>See:</i> <a>newUpdateDatasetEntries</a> smart constructor.
data UpdateDatasetEntries
UpdateDatasetEntries' :: Maybe Text -> Text -> Text -> Base64 -> UpdateDatasetEntries

-- | ClientToken is an idempotency token that ensures a call to
--   <tt>UpdateDatasetEntries</tt> completes only once. You choose the
--   value to pass. For example, An issue, such as an network outage, might
--   prevent you from getting a response from
--   <tt>UpdateDatasetEntries</tt>. In this case, safely retry your call to
--   <tt>UpdateDatasetEntries</tt> by using the same <tt>ClientToken</tt>
--   parameter value. An error occurs if the other input parameters are not
--   the same as in the first request. Using a different value for
--   <tt>ClientToken</tt> is considered a new call to
--   <tt>UpdateDatasetEntries</tt>. An idempotency token is active for 8
--   hours.
[$sel:clientToken:UpdateDatasetEntries'] :: UpdateDatasetEntries -> Maybe Text

-- | The name of the project that contains the dataset that you want to
--   update.
[$sel:projectName:UpdateDatasetEntries'] :: UpdateDatasetEntries -> Text

-- | The type of the dataset that you want to update. Specify
--   <tt>train</tt> to update the training dataset. Specify <tt>test</tt>
--   to update the test dataset. If you have a single dataset project,
--   specify <tt>train</tt>.
[$sel:datasetType:UpdateDatasetEntries'] :: UpdateDatasetEntries -> Text

-- | The entries to add to the dataset.
[$sel:changes:UpdateDatasetEntries'] :: UpdateDatasetEntries -> Base64

-- | Create a value of <a>UpdateDatasetEntries</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:clientToken:UpdateDatasetEntries'</a>,
--   <a>updateDatasetEntries_clientToken</a> - ClientToken is an
--   idempotency token that ensures a call to <tt>UpdateDatasetEntries</tt>
--   completes only once. You choose the value to pass. For example, An
--   issue, such as an network outage, might prevent you from getting a
--   response from <tt>UpdateDatasetEntries</tt>. In this case, safely
--   retry your call to <tt>UpdateDatasetEntries</tt> by using the same
--   <tt>ClientToken</tt> parameter value. An error occurs if the other
--   input parameters are not the same as in the first request. Using a
--   different value for <tt>ClientToken</tt> is considered a new call to
--   <tt>UpdateDatasetEntries</tt>. An idempotency token is active for 8
--   hours.
--   
--   <a>$sel:projectName:UpdateDatasetEntries'</a>,
--   <a>updateDatasetEntries_projectName</a> - The name of the project that
--   contains the dataset that you want to update.
--   
--   <a>$sel:datasetType:UpdateDatasetEntries'</a>,
--   <a>updateDatasetEntries_datasetType</a> - The type of the dataset that
--   you want to update. Specify <tt>train</tt> to update the training
--   dataset. Specify <tt>test</tt> to update the test dataset. If you have
--   a single dataset project, specify <tt>train</tt>.
--   
--   <a>$sel:changes:UpdateDatasetEntries'</a>,
--   <a>updateDatasetEntries_changes</a> - The entries to add to the
--   dataset.-- -- <i>Note:</i> This <tt>Lens</tt> automatically encodes
--   and decodes Base64 data. -- The underlying isomorphism will encode to
--   Base64 representation during -- serialisation, and decode from Base64
--   representation during deserialisation. -- This <tt>Lens</tt> accepts
--   and returns only raw unencoded data.
newUpdateDatasetEntries :: Text -> Text -> ByteString -> UpdateDatasetEntries

-- | ClientToken is an idempotency token that ensures a call to
--   <tt>UpdateDatasetEntries</tt> completes only once. You choose the
--   value to pass. For example, An issue, such as an network outage, might
--   prevent you from getting a response from
--   <tt>UpdateDatasetEntries</tt>. In this case, safely retry your call to
--   <tt>UpdateDatasetEntries</tt> by using the same <tt>ClientToken</tt>
--   parameter value. An error occurs if the other input parameters are not
--   the same as in the first request. Using a different value for
--   <tt>ClientToken</tt> is considered a new call to
--   <tt>UpdateDatasetEntries</tt>. An idempotency token is active for 8
--   hours.
updateDatasetEntries_clientToken :: Lens' UpdateDatasetEntries (Maybe Text)

-- | The name of the project that contains the dataset that you want to
--   update.
updateDatasetEntries_projectName :: Lens' UpdateDatasetEntries Text

-- | The type of the dataset that you want to update. Specify
--   <tt>train</tt> to update the training dataset. Specify <tt>test</tt>
--   to update the test dataset. If you have a single dataset project,
--   specify <tt>train</tt>.
updateDatasetEntries_datasetType :: Lens' UpdateDatasetEntries Text

-- | The entries to add to the dataset.-- -- <i>Note:</i> This
--   <tt>Lens</tt> automatically encodes and decodes Base64 data. -- The
--   underlying isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
updateDatasetEntries_changes :: Lens' UpdateDatasetEntries ByteString

-- | <i>See:</i> <a>newUpdateDatasetEntriesResponse</a> smart constructor.
data UpdateDatasetEntriesResponse
UpdateDatasetEntriesResponse' :: Maybe DatasetStatus -> Int -> UpdateDatasetEntriesResponse

-- | The status of the dataset update.
[$sel:status:UpdateDatasetEntriesResponse'] :: UpdateDatasetEntriesResponse -> Maybe DatasetStatus

-- | The response's http status code.
[$sel:httpStatus:UpdateDatasetEntriesResponse'] :: UpdateDatasetEntriesResponse -> Int

-- | Create a value of <a>UpdateDatasetEntriesResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:UpdateDatasetEntriesResponse'</a>,
--   <a>updateDatasetEntriesResponse_status</a> - The status of the dataset
--   update.
--   
--   <a>$sel:httpStatus:UpdateDatasetEntriesResponse'</a>,
--   <a>updateDatasetEntriesResponse_httpStatus</a> - The response's http
--   status code.
newUpdateDatasetEntriesResponse :: Int -> UpdateDatasetEntriesResponse

-- | The status of the dataset update.
updateDatasetEntriesResponse_status :: Lens' UpdateDatasetEntriesResponse (Maybe DatasetStatus)

-- | The response's http status code.
updateDatasetEntriesResponse_httpStatus :: Lens' UpdateDatasetEntriesResponse Int
instance GHC.Generics.Generic Amazonka.LookoutVision.UpdateDatasetEntries.UpdateDatasetEntries
instance GHC.Show.Show Amazonka.LookoutVision.UpdateDatasetEntries.UpdateDatasetEntries
instance GHC.Read.Read Amazonka.LookoutVision.UpdateDatasetEntries.UpdateDatasetEntries
instance GHC.Classes.Eq Amazonka.LookoutVision.UpdateDatasetEntries.UpdateDatasetEntries
instance GHC.Generics.Generic Amazonka.LookoutVision.UpdateDatasetEntries.UpdateDatasetEntriesResponse
instance GHC.Show.Show Amazonka.LookoutVision.UpdateDatasetEntries.UpdateDatasetEntriesResponse
instance GHC.Read.Read Amazonka.LookoutVision.UpdateDatasetEntries.UpdateDatasetEntriesResponse
instance GHC.Classes.Eq Amazonka.LookoutVision.UpdateDatasetEntries.UpdateDatasetEntriesResponse
instance Amazonka.Types.AWSRequest Amazonka.LookoutVision.UpdateDatasetEntries.UpdateDatasetEntries
instance Control.DeepSeq.NFData Amazonka.LookoutVision.UpdateDatasetEntries.UpdateDatasetEntriesResponse
instance Data.Hashable.Class.Hashable Amazonka.LookoutVision.UpdateDatasetEntries.UpdateDatasetEntries
instance Control.DeepSeq.NFData Amazonka.LookoutVision.UpdateDatasetEntries.UpdateDatasetEntries
instance Amazonka.Data.Headers.ToHeaders Amazonka.LookoutVision.UpdateDatasetEntries.UpdateDatasetEntries
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LookoutVision.UpdateDatasetEntries.UpdateDatasetEntries
instance Amazonka.Data.Path.ToPath Amazonka.LookoutVision.UpdateDatasetEntries.UpdateDatasetEntries
instance Amazonka.Data.Query.ToQuery Amazonka.LookoutVision.UpdateDatasetEntries.UpdateDatasetEntries


module Amazonka.LookoutVision.Lens

-- | If the previous response was incomplete (because there is more data to
--   retrieve), Amazon Lookout for Vision returns a pagination token in the
--   response. You can use this pagination token to retrieve the next set
--   of projects.
listProjects_nextToken :: Lens' ListProjects (Maybe Text)

-- | The maximum number of results to return per paginated call. The
--   largest value you can specify is 100. If you specify a value greater
--   than 100, a ValidationException error occurs. The default value is
--   100.
listProjects_maxResults :: Lens' ListProjects (Maybe Natural)

-- | If the response is truncated, Amazon Lookout for Vision returns this
--   token that you can use in the subsequent request to retrieve the next
--   set of projects.
listProjectsResponse_nextToken :: Lens' ListProjectsResponse (Maybe Text)

-- | A list of projects in your AWS account.
listProjectsResponse_projects :: Lens' ListProjectsResponse (Maybe [ProjectMetadata])

-- | The response's http status code.
listProjectsResponse_httpStatus :: Lens' ListProjectsResponse Int

-- | ClientToken is an idempotency token that ensures a call to
--   <tt>DeleteProject</tt> completes only once. You choose the value to
--   pass. For example, An issue, such as an network outage, might prevent
--   you from getting a response from <tt>DeleteProject</tt>. In this case,
--   safely retry your call to <tt>DeleteProject</tt> by using the same
--   <tt>ClientToken</tt> parameter value. An error occurs if the other
--   input parameters are not the same as in the first request. Using a
--   different value for <tt>ClientToken</tt> is considered a new call to
--   <tt>DeleteProject</tt>. An idempotency token is active for 8 hours.
deleteProject_clientToken :: Lens' DeleteProject (Maybe Text)

-- | The name of the project to delete.
deleteProject_projectName :: Lens' DeleteProject Text

-- | The Amazon Resource Name (ARN) of the project that was deleted.
deleteProjectResponse_projectArn :: Lens' DeleteProjectResponse (Maybe Text)

-- | The response's http status code.
deleteProjectResponse_httpStatus :: Lens' DeleteProjectResponse Int

-- | The name of the project that contains the dataset that you want to
--   describe.
describeDataset_projectName :: Lens' DescribeDataset Text

-- | The type of the dataset to describe. Specify <tt>train</tt> to
--   describe the training dataset. Specify <tt>test</tt> to describe the
--   test dataset. If you have a single dataset project, specify
--   <tt>train</tt>
describeDataset_datasetType :: Lens' DescribeDataset Text

-- | The description of the requested dataset.
describeDatasetResponse_datasetDescription :: Lens' DescribeDatasetResponse (Maybe DatasetDescription)

-- | The response's http status code.
describeDatasetResponse_httpStatus :: Lens' DescribeDatasetResponse Int

-- | ClientToken is an idempotency token that ensures a call to
--   <tt>StopModel</tt> completes only once. You choose the value to pass.
--   For example, An issue, such as an network outage, might prevent you
--   from getting a response from <tt>StopModel</tt>. In this case, safely
--   retry your call to <tt>StopModel</tt> by using the same
--   <tt>ClientToken</tt> parameter value. An error occurs if the other
--   input parameters are not the same as in the first request. Using a
--   different value for <tt>ClientToken</tt> is considered a new call to
--   <tt>StopModel</tt>. An idempotency token is active for 8 hours.
stopModel_clientToken :: Lens' StopModel (Maybe Text)

-- | The name of the project that contains the model that you want to stop.
stopModel_projectName :: Lens' StopModel Text

-- | The version of the model that you want to stop.
stopModel_modelVersion :: Lens' StopModel Text

-- | The status of the model.
stopModelResponse_status :: Lens' StopModelResponse (Maybe ModelHostingStatus)

-- | The response's http status code.
stopModelResponse_httpStatus :: Lens' StopModelResponse Int

-- | Only includes entries before the specified date in the response. For
--   example, <tt>2020-06-23T00:00:00</tt>.
listDatasetEntries_beforeCreationDate :: Lens' ListDatasetEntries (Maybe UTCTime)

-- | Perform a "contains" search on the values of the <tt>source-ref</tt>
--   key within the dataset. For example a value of "IMG_17" returns all
--   JSON Lines where the <tt>source-ref</tt> key value matches
--   <i>*IMG_17*</i>.
listDatasetEntries_sourceRefContains :: Lens' ListDatasetEntries (Maybe Text)

-- | If the previous response was incomplete (because there is more data to
--   retrieve), Amazon Lookout for Vision returns a pagination token in the
--   response. You can use this pagination token to retrieve the next set
--   of dataset entries.
listDatasetEntries_nextToken :: Lens' ListDatasetEntries (Maybe Text)

-- | Specify <tt>true</tt> to include labeled entries, otherwise specify
--   <tt>false</tt>. If you don't specify a value, Lookout for Vision
--   returns all entries.
listDatasetEntries_labeled :: Lens' ListDatasetEntries (Maybe Bool)

-- | Specify <tt>normal</tt> to include only normal images. Specify
--   <tt>anomaly</tt> to only include anomalous entries. If you don't
--   specify a value, Amazon Lookout for Vision returns normal and
--   anomalous images.
listDatasetEntries_anomalyClass :: Lens' ListDatasetEntries (Maybe Text)

-- | The maximum number of results to return per paginated call. The
--   largest value you can specify is 100. If you specify a value greater
--   than 100, a ValidationException error occurs. The default value is
--   100.
listDatasetEntries_maxResults :: Lens' ListDatasetEntries (Maybe Natural)

-- | Only includes entries after the specified date in the response. For
--   example, <tt>2020-06-23T00:00:00</tt>.
listDatasetEntries_afterCreationDate :: Lens' ListDatasetEntries (Maybe UTCTime)

-- | The name of the project that contains the dataset that you want to
--   list.
listDatasetEntries_projectName :: Lens' ListDatasetEntries Text

-- | The type of the dataset that you want to list. Specify <tt>train</tt>
--   to list the training dataset. Specify <tt>test</tt> to list the test
--   dataset. If you have a single dataset project, specify <tt>train</tt>.
listDatasetEntries_datasetType :: Lens' ListDatasetEntries Text

-- | A list of the entries (JSON Lines) within the dataset.
listDatasetEntriesResponse_datasetEntries :: Lens' ListDatasetEntriesResponse (Maybe [Text])

-- | If the response is truncated, Amazon Lookout for Vision returns this
--   token that you can use in the subsequent request to retrieve the next
--   set ofdataset entries.
listDatasetEntriesResponse_nextToken :: Lens' ListDatasetEntriesResponse (Maybe Text)

-- | The response's http status code.
listDatasetEntriesResponse_httpStatus :: Lens' ListDatasetEntriesResponse Int

-- | The Amazon Resource Name (ARN) of the model for which you want to list
--   tags.
listTagsForResource_resourceArn :: Lens' ListTagsForResource Text

-- | A map of tag keys and values attached to the specified model.
listTagsForResourceResponse_tags :: Lens' ListTagsForResourceResponse (Maybe [Tag])

-- | The response's http status code.
listTagsForResourceResponse_httpStatus :: Lens' ListTagsForResourceResponse Int

-- | The name of the project that you want to describe.
describeProject_projectName :: Lens' DescribeProject Text

-- | The description of the project.
describeProjectResponse_projectDescription :: Lens' DescribeProjectResponse (Maybe ProjectDescription)

-- | The response's http status code.
describeProjectResponse_httpStatus :: Lens' DescribeProjectResponse Int

-- | ClientToken is an idempotency token that ensures a call to
--   <tt>CreateModel</tt> completes only once. You choose the value to
--   pass. For example, An issue, such as an network outage, might prevent
--   you from getting a response from <tt>CreateModel</tt>. In this case,
--   safely retry your call to <tt>CreateModel</tt> by using the same
--   <tt>ClientToken</tt> parameter value. An error occurs if the other
--   input parameters are not the same as in the first request. Using a
--   different value for <tt>ClientToken</tt> is considered a new call to
--   <tt>CreateModel</tt>. An idempotency token is active for 8 hours.
createModel_clientToken :: Lens' CreateModel (Maybe Text)

-- | The identifier for your AWS Key Management Service (AWS KMS) customer
--   master key (CMK). The key is used to encrypt training and test images
--   copied into the service for model training. Your source images are
--   unaffected. If this parameter is not specified, the copied images are
--   encrypted by a key that AWS owns and manages.
createModel_kmsKeyId :: Lens' CreateModel (Maybe Text)

-- | A description for the version of the model.
createModel_description :: Lens' CreateModel (Maybe Text)

-- | A set of tags (key-value pairs) that you want to attach to the model.
createModel_tags :: Lens' CreateModel (Maybe [Tag])

-- | The name of the project in which you want to create a model version.
createModel_projectName :: Lens' CreateModel Text

-- | The location where Amazon Lookout for Vision saves the training
--   results.
createModel_outputConfig :: Lens' CreateModel OutputConfig

-- | The response from a call to <tt>CreateModel</tt>.
createModelResponse_modelMetadata :: Lens' CreateModelResponse (Maybe ModelMetadata)

-- | The response's http status code.
createModelResponse_httpStatus :: Lens' CreateModelResponse Int

-- | ClientToken is an idempotency token that ensures a call to
--   <tt>DeleteDataset</tt> completes only once. You choose the value to
--   pass. For example, An issue, such as an network outage, might prevent
--   you from getting a response from <tt>DeleteDataset</tt>. In this case,
--   safely retry your call to <tt>DeleteDataset</tt> by using the same
--   <tt>ClientToken</tt> parameter value. An error occurs if the other
--   input parameters are not the same as in the first request. Using a
--   different value for <tt>ClientToken</tt> is considered a new call to
--   <tt>DeleteDataset</tt>. An idempotency token is active for 8 hours.
deleteDataset_clientToken :: Lens' DeleteDataset (Maybe Text)

-- | The name of the project that contains the dataset that you want to
--   delete.
deleteDataset_projectName :: Lens' DeleteDataset Text

-- | The type of the dataset to delete. Specify <tt>train</tt> to delete
--   the training dataset. Specify <tt>test</tt> to delete the test
--   dataset. To delete the dataset in a single dataset project, specify
--   <tt>train</tt>.
deleteDataset_datasetType :: Lens' DeleteDataset Text

-- | The response's http status code.
deleteDatasetResponse_httpStatus :: Lens' DeleteDatasetResponse Int

-- | ClientToken is an idempotency token that ensures a call to
--   <tt>CreateDataset</tt> completes only once. You choose the value to
--   pass. For example, An issue, such as an network outage, might prevent
--   you from getting a response from <tt>CreateDataset</tt>. In this case,
--   safely retry your call to <tt>CreateDataset</tt> by using the same
--   <tt>ClientToken</tt> parameter value. An error occurs if the other
--   input parameters are not the same as in the first request. Using a
--   different value for <tt>ClientToken</tt> is considered a new call to
--   <tt>CreateDataset</tt>. An idempotency token is active for 8 hours.
createDataset_clientToken :: Lens' CreateDataset (Maybe Text)

-- | The location of the manifest file that Amazon Lookout for Vision uses
--   to create the dataset.
--   
--   If you don't specify <tt>DatasetSource</tt>, an empty dataset is
--   created and the operation synchronously returns. Later, you can add
--   JSON Lines by calling UpdateDatasetEntries.
--   
--   If you specify a value for <tt>DataSource</tt>, the manifest at the S3
--   location is validated and used to create the dataset. The call to
--   <tt>CreateDataset</tt> is asynchronous and might take a while to
--   complete. To find out the current status, Check the value of
--   <tt>Status</tt> returned in a call to DescribeDataset.
createDataset_datasetSource :: Lens' CreateDataset (Maybe DatasetSource)

-- | The name of the project in which you want to create a dataset.
createDataset_projectName :: Lens' CreateDataset Text

-- | The type of the dataset. Specify <tt>train</tt> for a training
--   dataset. Specify <tt>test</tt> for a test dataset.
createDataset_datasetType :: Lens' CreateDataset Text

-- | Information about the dataset.
createDatasetResponse_datasetMetadata :: Lens' CreateDatasetResponse (Maybe DatasetMetadata)

-- | The response's http status code.
createDatasetResponse_httpStatus :: Lens' CreateDatasetResponse Int

-- | ClientToken is an idempotency token that ensures a call to
--   <tt>DeleteModel</tt> completes only once. You choose the value to
--   pass. For example, An issue, such as an network outage, might prevent
--   you from getting a response from <tt>DeleteModel</tt>. In this case,
--   safely retry your call to <tt>DeleteModel</tt> by using the same
--   <tt>ClientToken</tt> parameter value. An error occurs if the other
--   input parameters are not the same as in the first request. Using a
--   different value for <tt>ClientToken</tt> is considered a new call to
--   <tt>DeleteModel</tt>. An idempotency token is active for 8 hours.
deleteModel_clientToken :: Lens' DeleteModel (Maybe Text)

-- | The name of the project that contains the model that you want to
--   delete.
deleteModel_projectName :: Lens' DeleteModel Text

-- | The version of the model that you want to delete.
deleteModel_modelVersion :: Lens' DeleteModel Text

-- | The Amazon Resource Name (ARN) of the model that was deleted.
deleteModelResponse_modelArn :: Lens' DeleteModelResponse (Maybe Text)

-- | The response's http status code.
deleteModelResponse_httpStatus :: Lens' DeleteModelResponse Int

-- | If the previous response was incomplete (because there is more data to
--   retrieve), Amazon Lookout for Vision returns a pagination token in the
--   response. You can use this pagination token to retrieve the next set
--   of models.
listModels_nextToken :: Lens' ListModels (Maybe Text)

-- | The maximum number of results to return per paginated call. The
--   largest value you can specify is 100. If you specify a value greater
--   than 100, a ValidationException error occurs. The default value is
--   100.
listModels_maxResults :: Lens' ListModels (Maybe Natural)

-- | The name of the project that contains the model versions that you want
--   to list.
listModels_projectName :: Lens' ListModels Text

-- | If the response is truncated, Amazon Lookout for Vision returns this
--   token that you can use in the subsequent request to retrieve the next
--   set of models.
listModelsResponse_nextToken :: Lens' ListModelsResponse (Maybe Text)

-- | A list of model versions in the specified project.
listModelsResponse_models :: Lens' ListModelsResponse (Maybe [ModelMetadata])

-- | The response's http status code.
listModelsResponse_httpStatus :: Lens' ListModelsResponse Int

-- | ClientToken is an idempotency token that ensures a call to
--   <tt>StartModel</tt> completes only once. You choose the value to pass.
--   For example, An issue, such as an network outage, might prevent you
--   from getting a response from <tt>StartModel</tt>. In this case, safely
--   retry your call to <tt>StartModel</tt> by using the same
--   <tt>ClientToken</tt> parameter value. An error occurs if the other
--   input parameters are not the same as in the first request. Using a
--   different value for <tt>ClientToken</tt> is considered a new call to
--   <tt>StartModel</tt>. An idempotency token is active for 8 hours.
startModel_clientToken :: Lens' StartModel (Maybe Text)

-- | The name of the project that contains the model that you want to
--   start.
startModel_projectName :: Lens' StartModel Text

-- | The version of the model that you want to start.
startModel_modelVersion :: Lens' StartModel Text

-- | The minimum number of inference units to use. A single inference unit
--   represents 1 hour of processing and can support up to 5 Transaction
--   Pers Second (TPS). Use a higher number to increase the TPS throughput
--   of your model. You are charged for the number of inference units that
--   you use.
startModel_minInferenceUnits :: Lens' StartModel Natural

-- | The current running status of the model.
startModelResponse_status :: Lens' StartModelResponse (Maybe ModelHostingStatus)

-- | The response's http status code.
startModelResponse_httpStatus :: Lens' StartModelResponse Int

-- | The project that contains the version of a model that you want to
--   describe.
describeModel_projectName :: Lens' DescribeModel Text

-- | The version of the model that you want to describe.
describeModel_modelVersion :: Lens' DescribeModel Text

-- | Contains the description of the model.
describeModelResponse_modelDescription :: Lens' DescribeModelResponse (Maybe ModelDescription)

-- | The response's http status code.
describeModelResponse_httpStatus :: Lens' DescribeModelResponse Int

-- | The name of the project that contains the model version that you want
--   to use.
detectAnomalies_projectName :: Lens' DetectAnomalies Text

-- | The version of the model that you want to use.
detectAnomalies_modelVersion :: Lens' DetectAnomalies Text

-- | The type of the image passed in <tt>Body</tt>. Valid values are
--   <tt>image/png</tt> (PNG format images) and <tt>image/jpeg</tt> (JPG
--   format images).
detectAnomalies_contentType :: Lens' DetectAnomalies Text

-- | The unencrypted image bytes that you want to analyze.
detectAnomalies_body :: Lens' DetectAnomalies HashedBody

-- | The results of the <tt>DetectAnomalies</tt> operation.
detectAnomaliesResponse_detectAnomalyResult :: Lens' DetectAnomaliesResponse (Maybe DetectAnomalyResult)

-- | The response's http status code.
detectAnomaliesResponse_httpStatus :: Lens' DetectAnomaliesResponse Int

-- | The Amazon Resource Name (ARN) of the model to assign the tags.
tagResource_resourceArn :: Lens' TagResource Text

-- | The key-value tags to assign to the model.
tagResource_tags :: Lens' TagResource [Tag]

-- | The response's http status code.
tagResourceResponse_httpStatus :: Lens' TagResourceResponse Int

-- | The Amazon Resource Name (ARN) of the model from which you want to
--   remove tags.
untagResource_resourceArn :: Lens' UntagResource Text

-- | A list of the keys of the tags that you want to remove.
untagResource_tagKeys :: Lens' UntagResource [Text]

-- | The response's http status code.
untagResourceResponse_httpStatus :: Lens' UntagResourceResponse Int

-- | ClientToken is an idempotency token that ensures a call to
--   <tt>CreateProject</tt> completes only once. You choose the value to
--   pass. For example, An issue, such as an network outage, might prevent
--   you from getting a response from <tt>CreateProject</tt>. In this case,
--   safely retry your call to <tt>CreateProject</tt> by using the same
--   <tt>ClientToken</tt> parameter value. An error occurs if the other
--   input parameters are not the same as in the first request. Using a
--   different value for <tt>ClientToken</tt> is considered a new call to
--   <tt>CreateProject</tt>. An idempotency token is active for 8 hours.
createProject_clientToken :: Lens' CreateProject (Maybe Text)

-- | The name for the project.
createProject_projectName :: Lens' CreateProject Text

-- | Information about the project.
createProjectResponse_projectMetadata :: Lens' CreateProjectResponse (Maybe ProjectMetadata)

-- | The response's http status code.
createProjectResponse_httpStatus :: Lens' CreateProjectResponse Int

-- | ClientToken is an idempotency token that ensures a call to
--   <tt>UpdateDatasetEntries</tt> completes only once. You choose the
--   value to pass. For example, An issue, such as an network outage, might
--   prevent you from getting a response from
--   <tt>UpdateDatasetEntries</tt>. In this case, safely retry your call to
--   <tt>UpdateDatasetEntries</tt> by using the same <tt>ClientToken</tt>
--   parameter value. An error occurs if the other input parameters are not
--   the same as in the first request. Using a different value for
--   <tt>ClientToken</tt> is considered a new call to
--   <tt>UpdateDatasetEntries</tt>. An idempotency token is active for 8
--   hours.
updateDatasetEntries_clientToken :: Lens' UpdateDatasetEntries (Maybe Text)

-- | The name of the project that contains the dataset that you want to
--   update.
updateDatasetEntries_projectName :: Lens' UpdateDatasetEntries Text

-- | The type of the dataset that you want to update. Specify
--   <tt>train</tt> to update the training dataset. Specify <tt>test</tt>
--   to update the test dataset. If you have a single dataset project,
--   specify <tt>train</tt>.
updateDatasetEntries_datasetType :: Lens' UpdateDatasetEntries Text

-- | The entries to add to the dataset.-- -- <i>Note:</i> This
--   <tt>Lens</tt> automatically encodes and decodes Base64 data. -- The
--   underlying isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
updateDatasetEntries_changes :: Lens' UpdateDatasetEntries ByteString

-- | The status of the dataset update.
updateDatasetEntriesResponse_status :: Lens' UpdateDatasetEntriesResponse (Maybe DatasetStatus)

-- | The response's http status code.
updateDatasetEntriesResponse_httpStatus :: Lens' UpdateDatasetEntriesResponse Int

-- | The status of the dataset.
datasetDescription_status :: Lens' DatasetDescription (Maybe DatasetStatus)

datasetDescription_imageStats :: Lens' DatasetDescription (Maybe DatasetImageStats)

-- | The status message for the dataset.
datasetDescription_statusMessage :: Lens' DatasetDescription (Maybe Text)

-- | The Unix timestamp for the time and date that the dataset was created.
datasetDescription_creationTimestamp :: Lens' DatasetDescription (Maybe UTCTime)

-- | The type of the dataset. The value <tt>train</tt> represents a
--   training dataset or single dataset project. The value <tt>test</tt>
--   represents a test dataset.
datasetDescription_datasetType :: Lens' DatasetDescription (Maybe Text)

-- | The name of the project that contains the dataset.
datasetDescription_projectName :: Lens' DatasetDescription (Maybe Text)

-- | The Unix timestamp for the date and time that the dataset was last
--   updated.
datasetDescription_lastUpdatedTimestamp :: Lens' DatasetDescription (Maybe UTCTime)

-- | The S3 bucket location for the manifest file.
datasetGroundTruthManifest_s3Object :: Lens' DatasetGroundTruthManifest (Maybe InputS3Object)

-- | The total number of images labeled as normal.
datasetImageStats_normal :: Lens' DatasetImageStats (Maybe Int)

-- | the total number of images labeled as an anomaly.
datasetImageStats_anomaly :: Lens' DatasetImageStats (Maybe Int)

-- | The total number of labeled images.
datasetImageStats_labeled :: Lens' DatasetImageStats (Maybe Int)

-- | The total number of images in the dataset.
datasetImageStats_total :: Lens' DatasetImageStats (Maybe Int)

-- | The status for the dataset.
datasetMetadata_status :: Lens' DatasetMetadata (Maybe DatasetStatus)

-- | The status message for the dataset.
datasetMetadata_statusMessage :: Lens' DatasetMetadata (Maybe Text)

-- | The Unix timestamp for the date and time that the dataset was created.
datasetMetadata_creationTimestamp :: Lens' DatasetMetadata (Maybe UTCTime)

-- | The type of the dataset.
datasetMetadata_datasetType :: Lens' DatasetMetadata (Maybe Text)

-- | Location information for the manifest file.
datasetSource_groundTruthManifest :: Lens' DatasetSource (Maybe DatasetGroundTruthManifest)

-- | True if the image contains an anomaly, otherwise false.
detectAnomalyResult_isAnomalous :: Lens' DetectAnomalyResult (Maybe Bool)

-- | The confidence that Amazon Lookout for Vision has in the accuracy of
--   the prediction.
detectAnomalyResult_confidence :: Lens' DetectAnomalyResult (Maybe Double)

-- | The source of the image that was analyzed. <tt>direct</tt> means that
--   the images was supplied from the local computer. No other values are
--   supported.
detectAnomalyResult_source :: Lens' DetectAnomalyResult (Maybe ImageSource)

-- | The type of the image.
imageSource_type :: Lens' ImageSource (Maybe Text)

-- | The version ID of the bucket.
inputS3Object_versionId :: Lens' InputS3Object (Maybe Text)

-- | The Amazon S3 bucket that contains the manifest.
inputS3Object_bucket :: Lens' InputS3Object Text

-- | The name and location of the manifest file withiin the bucket.
inputS3Object_key :: Lens' InputS3Object Text

-- | The status of the model.
modelDescription_status :: Lens' ModelDescription (Maybe ModelStatus)

-- | The S3 location where Amazon Lookout for Vision saves the performance
--   metrics.
modelDescription_evaluationResult :: Lens' ModelDescription (Maybe OutputS3Object)

-- | The unix timestamp for the date and time that the evaluation ended.
modelDescription_evaluationEndTimestamp :: Lens' ModelDescription (Maybe UTCTime)

-- | The Amazon Resource Name (ARN) of the model.
modelDescription_modelArn :: Lens' ModelDescription (Maybe Text)

-- | Performance metrics for the model. Created during training.
modelDescription_performance :: Lens' ModelDescription (Maybe ModelPerformance)

-- | The identifer for the AWS Key Management Service (AWS KMS) key that
--   was used to encrypt the model during training.
modelDescription_kmsKeyId :: Lens' ModelDescription (Maybe Text)

-- | The status message for the model.
modelDescription_statusMessage :: Lens' ModelDescription (Maybe Text)

-- | The unix timestamp for the date and time that the model was created.
modelDescription_creationTimestamp :: Lens' ModelDescription (Maybe UTCTime)

-- | The S3 location where Amazon Lookout for Vision saves model training
--   files.
modelDescription_outputConfig :: Lens' ModelDescription (Maybe OutputConfig)

-- | The version of the model
modelDescription_modelVersion :: Lens' ModelDescription (Maybe Text)

-- | The description for the model.
modelDescription_description :: Lens' ModelDescription (Maybe Text)

-- | The S3 location where Amazon Lookout for Vision saves the manifest
--   file that was used to test the trained model and generate the
--   performance scores.
modelDescription_evaluationManifest :: Lens' ModelDescription (Maybe OutputS3Object)

-- | The status of the model.
modelMetadata_status :: Lens' ModelMetadata (Maybe ModelStatus)

-- | The Amazon Resource Name (ARN) of the model.
modelMetadata_modelArn :: Lens' ModelMetadata (Maybe Text)

-- | Performance metrics for the model. Not available until training has
--   successfully completed.
modelMetadata_performance :: Lens' ModelMetadata (Maybe ModelPerformance)

-- | The status message for the model.
modelMetadata_statusMessage :: Lens' ModelMetadata (Maybe Text)

-- | The unix timestamp for the date and time that the model was created.
modelMetadata_creationTimestamp :: Lens' ModelMetadata (Maybe UTCTime)

-- | The version of the model.
modelMetadata_modelVersion :: Lens' ModelMetadata (Maybe Text)

-- | The description for the model.
modelMetadata_description :: Lens' ModelMetadata (Maybe Text)

-- | The overall recall metric value for the trained model.
modelPerformance_recall :: Lens' ModelPerformance (Maybe Double)

-- | The overall precision metric value for the trained model.
modelPerformance_precision :: Lens' ModelPerformance (Maybe Double)

-- | The overall F1 score metric for the trained model.
modelPerformance_f1Score :: Lens' ModelPerformance (Maybe Double)

-- | The S3 location for the output.
outputConfig_s3Location :: Lens' OutputConfig S3Location

-- | The bucket that contains the training output.
outputS3Object_bucket :: Lens' OutputS3Object Text

-- | The location of the training output in the bucket.
outputS3Object_key :: Lens' OutputS3Object Text

-- | The unix timestamp for the date and time that the project was created.
projectDescription_creationTimestamp :: Lens' ProjectDescription (Maybe UTCTime)

-- | The name of the project.
projectDescription_projectName :: Lens' ProjectDescription (Maybe Text)

-- | The Amazon Resource Name (ARN) of the project.
projectDescription_projectArn :: Lens' ProjectDescription (Maybe Text)

-- | A list of datasets in the project.
projectDescription_datasets :: Lens' ProjectDescription (Maybe [DatasetMetadata])

-- | The unix timestamp for the date and time that the project was created.
projectMetadata_creationTimestamp :: Lens' ProjectMetadata (Maybe UTCTime)

-- | The name of the project.
projectMetadata_projectName :: Lens' ProjectMetadata (Maybe Text)

-- | The Amazon Resource Name (ARN) of the project.
projectMetadata_projectArn :: Lens' ProjectMetadata (Maybe Text)

-- | The path of the folder, within the S3 bucket, that contains the
--   training output.
s3Location_prefix :: Lens' S3Location (Maybe Text)

-- | The S3 bucket that contains the training output.
s3Location_bucket :: Lens' S3Location Text

-- | The key of the tag that is attached to the specified model.
tag_key :: Lens' Tag Text

-- | The value of the tag that is attached to the specified model.
tag_value :: Lens' Tag Text


module Amazonka.LookoutVision.Waiters


-- | Derived from API version <tt>2020-11-20</tt> of the AWS service
--   descriptions, licensed under Apache 2.0.
--   
--   This is the Amazon Lookout for Vision API Reference. It provides
--   descriptions of actions, data types, common parameters, and common
--   errors.
--   
--   Amazon Lookout for Vision enables you to find visual defects in
--   industrial products, accurately and at scale. It uses computer vision
--   to identify missing components in an industrial product, damage to
--   vehicles or structures, irregularities in production lines, and even
--   minuscule defects in silicon wafers — or any other physical item where
--   quality is important such as a missing capacitor on printed circuit
--   boards.
module Amazonka.LookoutVision

-- | API version <tt>2020-11-20</tt> of the Amazon Lookout for Vision SDK
--   configuration.
defaultService :: Service

-- | An input validation error occured. For example, invalid characters in
--   a project name, or if a pagination token is invalid.
_ValidationException :: AsError a => Getting (First ServiceError) a ServiceError

-- | You are not authorized to perform the action.
_AccessDeniedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The update or deletion of a resource caused an inconsistent state.
_ConflictException :: AsError a => Getting (First ServiceError) a ServiceError

-- | A service quota was exceeded the allowed limit. For more information,
--   see Limits in Amazon Lookout for Vision in the Amazon Lookout for
--   Vision Developer Guide.
_ServiceQuotaExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Amazon Lookout for Vision is temporarily unable to process the
--   request. Try your call again.
_ThrottlingException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Amazon Lookout for Vision experienced a service issue. Try your call
--   again.
_InternalServerException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The resource could not be found.
_ResourceNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | <i>See:</i> <a>newListProjects</a> smart constructor.
data ListProjects
ListProjects' :: Maybe Text -> Maybe Natural -> ListProjects

-- | Create a value of <a>ListProjects</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListProjects'</a>, <a>listProjects_nextToken</a> -
--   If the previous response was incomplete (because there is more data to
--   retrieve), Amazon Lookout for Vision returns a pagination token in the
--   response. You can use this pagination token to retrieve the next set
--   of projects.
--   
--   <a>$sel:maxResults:ListProjects'</a>, <a>listProjects_maxResults</a> -
--   The maximum number of results to return per paginated call. The
--   largest value you can specify is 100. If you specify a value greater
--   than 100, a ValidationException error occurs. The default value is
--   100.
newListProjects :: ListProjects

-- | <i>See:</i> <a>newListProjectsResponse</a> smart constructor.
data ListProjectsResponse
ListProjectsResponse' :: Maybe Text -> Maybe [ProjectMetadata] -> Int -> ListProjectsResponse

-- | Create a value of <a>ListProjectsResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListProjects'</a>,
--   <a>listProjectsResponse_nextToken</a> - If the response is truncated,
--   Amazon Lookout for Vision returns this token that you can use in the
--   subsequent request to retrieve the next set of projects.
--   
--   <a>$sel:projects:ListProjectsResponse'</a>,
--   <a>listProjectsResponse_projects</a> - A list of projects in your AWS
--   account.
--   
--   <a>$sel:httpStatus:ListProjectsResponse'</a>,
--   <a>listProjectsResponse_httpStatus</a> - The response's http status
--   code.
newListProjectsResponse :: Int -> ListProjectsResponse

-- | <i>See:</i> <a>newDeleteProject</a> smart constructor.
data DeleteProject
DeleteProject' :: Maybe Text -> Text -> DeleteProject

-- | Create a value of <a>DeleteProject</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:clientToken:DeleteProject'</a>,
--   <a>deleteProject_clientToken</a> - ClientToken is an idempotency token
--   that ensures a call to <tt>DeleteProject</tt> completes only once. You
--   choose the value to pass. For example, An issue, such as an network
--   outage, might prevent you from getting a response from
--   <tt>DeleteProject</tt>. In this case, safely retry your call to
--   <tt>DeleteProject</tt> by using the same <tt>ClientToken</tt>
--   parameter value. An error occurs if the other input parameters are not
--   the same as in the first request. Using a different value for
--   <tt>ClientToken</tt> is considered a new call to
--   <tt>DeleteProject</tt>. An idempotency token is active for 8 hours.
--   
--   <a>$sel:projectName:DeleteProject'</a>,
--   <a>deleteProject_projectName</a> - The name of the project to delete.
newDeleteProject :: Text -> DeleteProject

-- | <i>See:</i> <a>newDeleteProjectResponse</a> smart constructor.
data DeleteProjectResponse
DeleteProjectResponse' :: Maybe Text -> Int -> DeleteProjectResponse

-- | Create a value of <a>DeleteProjectResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:projectArn:DeleteProjectResponse'</a>,
--   <a>deleteProjectResponse_projectArn</a> - The Amazon Resource Name
--   (ARN) of the project that was deleted.
--   
--   <a>$sel:httpStatus:DeleteProjectResponse'</a>,
--   <a>deleteProjectResponse_httpStatus</a> - The response's http status
--   code.
newDeleteProjectResponse :: Int -> DeleteProjectResponse

-- | <i>See:</i> <a>newDescribeDataset</a> smart constructor.
data DescribeDataset
DescribeDataset' :: Text -> Text -> DescribeDataset

-- | Create a value of <a>DescribeDataset</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:projectName:DescribeDataset'</a>,
--   <a>describeDataset_projectName</a> - The name of the project that
--   contains the dataset that you want to describe.
--   
--   <a>$sel:datasetType:DescribeDataset'</a>,
--   <a>describeDataset_datasetType</a> - The type of the dataset to
--   describe. Specify <tt>train</tt> to describe the training dataset.
--   Specify <tt>test</tt> to describe the test dataset. If you have a
--   single dataset project, specify <tt>train</tt>
newDescribeDataset :: Text -> Text -> DescribeDataset

-- | <i>See:</i> <a>newDescribeDatasetResponse</a> smart constructor.
data DescribeDatasetResponse
DescribeDatasetResponse' :: Maybe DatasetDescription -> Int -> DescribeDatasetResponse

-- | Create a value of <a>DescribeDatasetResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:datasetDescription:DescribeDatasetResponse'</a>,
--   <a>describeDatasetResponse_datasetDescription</a> - The description of
--   the requested dataset.
--   
--   <a>$sel:httpStatus:DescribeDatasetResponse'</a>,
--   <a>describeDatasetResponse_httpStatus</a> - The response's http status
--   code.
newDescribeDatasetResponse :: Int -> DescribeDatasetResponse

-- | <i>See:</i> <a>newStopModel</a> smart constructor.
data StopModel
StopModel' :: Maybe Text -> Text -> Text -> StopModel

-- | Create a value of <a>StopModel</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:clientToken:StopModel'</a>, <a>stopModel_clientToken</a> -
--   ClientToken is an idempotency token that ensures a call to
--   <tt>StopModel</tt> completes only once. You choose the value to pass.
--   For example, An issue, such as an network outage, might prevent you
--   from getting a response from <tt>StopModel</tt>. In this case, safely
--   retry your call to <tt>StopModel</tt> by using the same
--   <tt>ClientToken</tt> parameter value. An error occurs if the other
--   input parameters are not the same as in the first request. Using a
--   different value for <tt>ClientToken</tt> is considered a new call to
--   <tt>StopModel</tt>. An idempotency token is active for 8 hours.
--   
--   <a>$sel:projectName:StopModel'</a>, <a>stopModel_projectName</a> - The
--   name of the project that contains the model that you want to stop.
--   
--   <a>$sel:modelVersion:StopModel'</a>, <a>stopModel_modelVersion</a> -
--   The version of the model that you want to stop.
newStopModel :: Text -> Text -> StopModel

-- | <i>See:</i> <a>newStopModelResponse</a> smart constructor.
data StopModelResponse
StopModelResponse' :: Maybe ModelHostingStatus -> Int -> StopModelResponse

-- | Create a value of <a>StopModelResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:StopModelResponse'</a>, <a>stopModelResponse_status</a>
--   - The status of the model.
--   
--   <a>$sel:httpStatus:StopModelResponse'</a>,
--   <a>stopModelResponse_httpStatus</a> - The response's http status code.
newStopModelResponse :: Int -> StopModelResponse

-- | <i>See:</i> <a>newListDatasetEntries</a> smart constructor.
data ListDatasetEntries
ListDatasetEntries' :: Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Text -> Maybe Natural -> Maybe POSIX -> Text -> Text -> ListDatasetEntries

-- | Create a value of <a>ListDatasetEntries</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:beforeCreationDate:ListDatasetEntries'</a>,
--   <a>listDatasetEntries_beforeCreationDate</a> - Only includes entries
--   before the specified date in the response. For example,
--   <tt>2020-06-23T00:00:00</tt>.
--   
--   <a>$sel:sourceRefContains:ListDatasetEntries'</a>,
--   <a>listDatasetEntries_sourceRefContains</a> - Perform a "contains"
--   search on the values of the <tt>source-ref</tt> key within the
--   dataset. For example a value of "IMG_17" returns all JSON Lines where
--   the <tt>source-ref</tt> key value matches <i>*IMG_17*</i>.
--   
--   <a>$sel:nextToken:ListDatasetEntries'</a>,
--   <a>listDatasetEntries_nextToken</a> - If the previous response was
--   incomplete (because there is more data to retrieve), Amazon Lookout
--   for Vision returns a pagination token in the response. You can use
--   this pagination token to retrieve the next set of dataset entries.
--   
--   <a>$sel:labeled:ListDatasetEntries'</a>,
--   <a>listDatasetEntries_labeled</a> - Specify <tt>true</tt> to include
--   labeled entries, otherwise specify <tt>false</tt>. If you don't
--   specify a value, Lookout for Vision returns all entries.
--   
--   <a>$sel:anomalyClass:ListDatasetEntries'</a>,
--   <a>listDatasetEntries_anomalyClass</a> - Specify <tt>normal</tt> to
--   include only normal images. Specify <tt>anomaly</tt> to only include
--   anomalous entries. If you don't specify a value, Amazon Lookout for
--   Vision returns normal and anomalous images.
--   
--   <a>$sel:maxResults:ListDatasetEntries'</a>,
--   <a>listDatasetEntries_maxResults</a> - The maximum number of results
--   to return per paginated call. The largest value you can specify is
--   100. If you specify a value greater than 100, a ValidationException
--   error occurs. The default value is 100.
--   
--   <a>$sel:afterCreationDate:ListDatasetEntries'</a>,
--   <a>listDatasetEntries_afterCreationDate</a> - Only includes entries
--   after the specified date in the response. For example,
--   <tt>2020-06-23T00:00:00</tt>.
--   
--   <a>$sel:projectName:ListDatasetEntries'</a>,
--   <a>listDatasetEntries_projectName</a> - The name of the project that
--   contains the dataset that you want to list.
--   
--   <a>$sel:datasetType:ListDatasetEntries'</a>,
--   <a>listDatasetEntries_datasetType</a> - The type of the dataset that
--   you want to list. Specify <tt>train</tt> to list the training dataset.
--   Specify <tt>test</tt> to list the test dataset. If you have a single
--   dataset project, specify <tt>train</tt>.
newListDatasetEntries :: Text -> Text -> ListDatasetEntries

-- | <i>See:</i> <a>newListDatasetEntriesResponse</a> smart constructor.
data ListDatasetEntriesResponse
ListDatasetEntriesResponse' :: Maybe [Text] -> Maybe Text -> Int -> ListDatasetEntriesResponse

-- | Create a value of <a>ListDatasetEntriesResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:datasetEntries:ListDatasetEntriesResponse'</a>,
--   <a>listDatasetEntriesResponse_datasetEntries</a> - A list of the
--   entries (JSON Lines) within the dataset.
--   
--   <a>$sel:nextToken:ListDatasetEntries'</a>,
--   <a>listDatasetEntriesResponse_nextToken</a> - If the response is
--   truncated, Amazon Lookout for Vision returns this token that you can
--   use in the subsequent request to retrieve the next set ofdataset
--   entries.
--   
--   <a>$sel:httpStatus:ListDatasetEntriesResponse'</a>,
--   <a>listDatasetEntriesResponse_httpStatus</a> - The response's http
--   status code.
newListDatasetEntriesResponse :: Int -> ListDatasetEntriesResponse

-- | <i>See:</i> <a>newListTagsForResource</a> smart constructor.
data ListTagsForResource
ListTagsForResource' :: Text -> ListTagsForResource

-- | Create a value of <a>ListTagsForResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:ListTagsForResource'</a>,
--   <a>listTagsForResource_resourceArn</a> - The Amazon Resource Name
--   (ARN) of the model for which you want to list tags.
newListTagsForResource :: Text -> ListTagsForResource

-- | <i>See:</i> <a>newListTagsForResourceResponse</a> smart constructor.
data ListTagsForResourceResponse
ListTagsForResourceResponse' :: Maybe [Tag] -> Int -> ListTagsForResourceResponse

-- | Create a value of <a>ListTagsForResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tags:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_tags</a> - A map of tag keys and values
--   attached to the specified model.
--   
--   <a>$sel:httpStatus:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_httpStatus</a> - The response's http
--   status code.
newListTagsForResourceResponse :: Int -> ListTagsForResourceResponse

-- | <i>See:</i> <a>newDescribeProject</a> smart constructor.
data DescribeProject
DescribeProject' :: Text -> DescribeProject

-- | Create a value of <a>DescribeProject</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:projectName:DescribeProject'</a>,
--   <a>describeProject_projectName</a> - The name of the project that you
--   want to describe.
newDescribeProject :: Text -> DescribeProject

-- | <i>See:</i> <a>newDescribeProjectResponse</a> smart constructor.
data DescribeProjectResponse
DescribeProjectResponse' :: Maybe ProjectDescription -> Int -> DescribeProjectResponse

-- | Create a value of <a>DescribeProjectResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:projectDescription:DescribeProjectResponse'</a>,
--   <a>describeProjectResponse_projectDescription</a> - The description of
--   the project.
--   
--   <a>$sel:httpStatus:DescribeProjectResponse'</a>,
--   <a>describeProjectResponse_httpStatus</a> - The response's http status
--   code.
newDescribeProjectResponse :: Int -> DescribeProjectResponse

-- | <i>See:</i> <a>newCreateModel</a> smart constructor.
data CreateModel
CreateModel' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe [Tag] -> Text -> OutputConfig -> CreateModel

-- | Create a value of <a>CreateModel</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:clientToken:CreateModel'</a>, <a>createModel_clientToken</a> -
--   ClientToken is an idempotency token that ensures a call to
--   <tt>CreateModel</tt> completes only once. You choose the value to
--   pass. For example, An issue, such as an network outage, might prevent
--   you from getting a response from <tt>CreateModel</tt>. In this case,
--   safely retry your call to <tt>CreateModel</tt> by using the same
--   <tt>ClientToken</tt> parameter value. An error occurs if the other
--   input parameters are not the same as in the first request. Using a
--   different value for <tt>ClientToken</tt> is considered a new call to
--   <tt>CreateModel</tt>. An idempotency token is active for 8 hours.
--   
--   <a>$sel:kmsKeyId:CreateModel'</a>, <a>createModel_kmsKeyId</a> - The
--   identifier for your AWS Key Management Service (AWS KMS) customer
--   master key (CMK). The key is used to encrypt training and test images
--   copied into the service for model training. Your source images are
--   unaffected. If this parameter is not specified, the copied images are
--   encrypted by a key that AWS owns and manages.
--   
--   <a>$sel:description:CreateModel'</a>, <a>createModel_description</a> -
--   A description for the version of the model.
--   
--   <a>$sel:tags:CreateModel'</a>, <a>createModel_tags</a> - A set of tags
--   (key-value pairs) that you want to attach to the model.
--   
--   <a>$sel:projectName:CreateModel'</a>, <a>createModel_projectName</a> -
--   The name of the project in which you want to create a model version.
--   
--   <a>$sel:outputConfig:CreateModel'</a>, <a>createModel_outputConfig</a>
--   - The location where Amazon Lookout for Vision saves the training
--   results.
newCreateModel :: Text -> OutputConfig -> CreateModel

-- | <i>See:</i> <a>newCreateModelResponse</a> smart constructor.
data CreateModelResponse
CreateModelResponse' :: Maybe ModelMetadata -> Int -> CreateModelResponse

-- | Create a value of <a>CreateModelResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:modelMetadata:CreateModelResponse'</a>,
--   <a>createModelResponse_modelMetadata</a> - The response from a call to
--   <tt>CreateModel</tt>.
--   
--   <a>$sel:httpStatus:CreateModelResponse'</a>,
--   <a>createModelResponse_httpStatus</a> - The response's http status
--   code.
newCreateModelResponse :: Int -> CreateModelResponse

-- | <i>See:</i> <a>newDeleteDataset</a> smart constructor.
data DeleteDataset
DeleteDataset' :: Maybe Text -> Text -> Text -> DeleteDataset

-- | Create a value of <a>DeleteDataset</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:clientToken:DeleteDataset'</a>,
--   <a>deleteDataset_clientToken</a> - ClientToken is an idempotency token
--   that ensures a call to <tt>DeleteDataset</tt> completes only once. You
--   choose the value to pass. For example, An issue, such as an network
--   outage, might prevent you from getting a response from
--   <tt>DeleteDataset</tt>. In this case, safely retry your call to
--   <tt>DeleteDataset</tt> by using the same <tt>ClientToken</tt>
--   parameter value. An error occurs if the other input parameters are not
--   the same as in the first request. Using a different value for
--   <tt>ClientToken</tt> is considered a new call to
--   <tt>DeleteDataset</tt>. An idempotency token is active for 8 hours.
--   
--   <a>$sel:projectName:DeleteDataset'</a>,
--   <a>deleteDataset_projectName</a> - The name of the project that
--   contains the dataset that you want to delete.
--   
--   <a>$sel:datasetType:DeleteDataset'</a>,
--   <a>deleteDataset_datasetType</a> - The type of the dataset to delete.
--   Specify <tt>train</tt> to delete the training dataset. Specify
--   <tt>test</tt> to delete the test dataset. To delete the dataset in a
--   single dataset project, specify <tt>train</tt>.
newDeleteDataset :: Text -> Text -> DeleteDataset

-- | <i>See:</i> <a>newDeleteDatasetResponse</a> smart constructor.
data DeleteDatasetResponse
DeleteDatasetResponse' :: Int -> DeleteDatasetResponse

-- | Create a value of <a>DeleteDatasetResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteDatasetResponse'</a>,
--   <a>deleteDatasetResponse_httpStatus</a> - The response's http status
--   code.
newDeleteDatasetResponse :: Int -> DeleteDatasetResponse

-- | <i>See:</i> <a>newCreateDataset</a> smart constructor.
data CreateDataset
CreateDataset' :: Maybe Text -> Maybe DatasetSource -> Text -> Text -> CreateDataset

-- | Create a value of <a>CreateDataset</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:clientToken:CreateDataset'</a>,
--   <a>createDataset_clientToken</a> - ClientToken is an idempotency token
--   that ensures a call to <tt>CreateDataset</tt> completes only once. You
--   choose the value to pass. For example, An issue, such as an network
--   outage, might prevent you from getting a response from
--   <tt>CreateDataset</tt>. In this case, safely retry your call to
--   <tt>CreateDataset</tt> by using the same <tt>ClientToken</tt>
--   parameter value. An error occurs if the other input parameters are not
--   the same as in the first request. Using a different value for
--   <tt>ClientToken</tt> is considered a new call to
--   <tt>CreateDataset</tt>. An idempotency token is active for 8 hours.
--   
--   <a>$sel:datasetSource:CreateDataset'</a>,
--   <a>createDataset_datasetSource</a> - The location of the manifest file
--   that Amazon Lookout for Vision uses to create the dataset.
--   
--   If you don't specify <tt>DatasetSource</tt>, an empty dataset is
--   created and the operation synchronously returns. Later, you can add
--   JSON Lines by calling UpdateDatasetEntries.
--   
--   If you specify a value for <tt>DataSource</tt>, the manifest at the S3
--   location is validated and used to create the dataset. The call to
--   <tt>CreateDataset</tt> is asynchronous and might take a while to
--   complete. To find out the current status, Check the value of
--   <tt>Status</tt> returned in a call to DescribeDataset.
--   
--   <a>$sel:projectName:CreateDataset'</a>,
--   <a>createDataset_projectName</a> - The name of the project in which
--   you want to create a dataset.
--   
--   <a>$sel:datasetType:CreateDataset'</a>,
--   <a>createDataset_datasetType</a> - The type of the dataset. Specify
--   <tt>train</tt> for a training dataset. Specify <tt>test</tt> for a
--   test dataset.
newCreateDataset :: Text -> Text -> CreateDataset

-- | <i>See:</i> <a>newCreateDatasetResponse</a> smart constructor.
data CreateDatasetResponse
CreateDatasetResponse' :: Maybe DatasetMetadata -> Int -> CreateDatasetResponse

-- | Create a value of <a>CreateDatasetResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:datasetMetadata:CreateDatasetResponse'</a>,
--   <a>createDatasetResponse_datasetMetadata</a> - Information about the
--   dataset.
--   
--   <a>$sel:httpStatus:CreateDatasetResponse'</a>,
--   <a>createDatasetResponse_httpStatus</a> - The response's http status
--   code.
newCreateDatasetResponse :: Int -> CreateDatasetResponse

-- | <i>See:</i> <a>newDeleteModel</a> smart constructor.
data DeleteModel
DeleteModel' :: Maybe Text -> Text -> Text -> DeleteModel

-- | Create a value of <a>DeleteModel</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:clientToken:DeleteModel'</a>, <a>deleteModel_clientToken</a> -
--   ClientToken is an idempotency token that ensures a call to
--   <tt>DeleteModel</tt> completes only once. You choose the value to
--   pass. For example, An issue, such as an network outage, might prevent
--   you from getting a response from <tt>DeleteModel</tt>. In this case,
--   safely retry your call to <tt>DeleteModel</tt> by using the same
--   <tt>ClientToken</tt> parameter value. An error occurs if the other
--   input parameters are not the same as in the first request. Using a
--   different value for <tt>ClientToken</tt> is considered a new call to
--   <tt>DeleteModel</tt>. An idempotency token is active for 8 hours.
--   
--   <a>$sel:projectName:DeleteModel'</a>, <a>deleteModel_projectName</a> -
--   The name of the project that contains the model that you want to
--   delete.
--   
--   <a>$sel:modelVersion:DeleteModel'</a>, <a>deleteModel_modelVersion</a>
--   - The version of the model that you want to delete.
newDeleteModel :: Text -> Text -> DeleteModel

-- | <i>See:</i> <a>newDeleteModelResponse</a> smart constructor.
data DeleteModelResponse
DeleteModelResponse' :: Maybe Text -> Int -> DeleteModelResponse

-- | Create a value of <a>DeleteModelResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:modelArn:DeleteModelResponse'</a>,
--   <a>deleteModelResponse_modelArn</a> - The Amazon Resource Name (ARN)
--   of the model that was deleted.
--   
--   <a>$sel:httpStatus:DeleteModelResponse'</a>,
--   <a>deleteModelResponse_httpStatus</a> - The response's http status
--   code.
newDeleteModelResponse :: Int -> DeleteModelResponse

-- | <i>See:</i> <a>newListModels</a> smart constructor.
data ListModels
ListModels' :: Maybe Text -> Maybe Natural -> Text -> ListModels

-- | Create a value of <a>ListModels</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListModels'</a>, <a>listModels_nextToken</a> - If
--   the previous response was incomplete (because there is more data to
--   retrieve), Amazon Lookout for Vision returns a pagination token in the
--   response. You can use this pagination token to retrieve the next set
--   of models.
--   
--   <a>$sel:maxResults:ListModels'</a>, <a>listModels_maxResults</a> - The
--   maximum number of results to return per paginated call. The largest
--   value you can specify is 100. If you specify a value greater than 100,
--   a ValidationException error occurs. The default value is 100.
--   
--   <a>$sel:projectName:ListModels'</a>, <a>listModels_projectName</a> -
--   The name of the project that contains the model versions that you want
--   to list.
newListModels :: Text -> ListModels

-- | <i>See:</i> <a>newListModelsResponse</a> smart constructor.
data ListModelsResponse
ListModelsResponse' :: Maybe Text -> Maybe [ModelMetadata] -> Int -> ListModelsResponse

-- | Create a value of <a>ListModelsResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListModels'</a>, <a>listModelsResponse_nextToken</a>
--   - If the response is truncated, Amazon Lookout for Vision returns this
--   token that you can use in the subsequent request to retrieve the next
--   set of models.
--   
--   <a>$sel:models:ListModelsResponse'</a>,
--   <a>listModelsResponse_models</a> - A list of model versions in the
--   specified project.
--   
--   <a>$sel:httpStatus:ListModelsResponse'</a>,
--   <a>listModelsResponse_httpStatus</a> - The response's http status
--   code.
newListModelsResponse :: Int -> ListModelsResponse

-- | <i>See:</i> <a>newStartModel</a> smart constructor.
data StartModel
StartModel' :: Maybe Text -> Text -> Text -> Natural -> StartModel

-- | Create a value of <a>StartModel</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:clientToken:StartModel'</a>, <a>startModel_clientToken</a> -
--   ClientToken is an idempotency token that ensures a call to
--   <tt>StartModel</tt> completes only once. You choose the value to pass.
--   For example, An issue, such as an network outage, might prevent you
--   from getting a response from <tt>StartModel</tt>. In this case, safely
--   retry your call to <tt>StartModel</tt> by using the same
--   <tt>ClientToken</tt> parameter value. An error occurs if the other
--   input parameters are not the same as in the first request. Using a
--   different value for <tt>ClientToken</tt> is considered a new call to
--   <tt>StartModel</tt>. An idempotency token is active for 8 hours.
--   
--   <a>$sel:projectName:StartModel'</a>, <a>startModel_projectName</a> -
--   The name of the project that contains the model that you want to
--   start.
--   
--   <a>$sel:modelVersion:StartModel'</a>, <a>startModel_modelVersion</a> -
--   The version of the model that you want to start.
--   
--   <a>$sel:minInferenceUnits:StartModel'</a>,
--   <a>startModel_minInferenceUnits</a> - The minimum number of inference
--   units to use. A single inference unit represents 1 hour of processing
--   and can support up to 5 Transaction Pers Second (TPS). Use a higher
--   number to increase the TPS throughput of your model. You are charged
--   for the number of inference units that you use.
newStartModel :: Text -> Text -> Natural -> StartModel

-- | <i>See:</i> <a>newStartModelResponse</a> smart constructor.
data StartModelResponse
StartModelResponse' :: Maybe ModelHostingStatus -> Int -> StartModelResponse

-- | Create a value of <a>StartModelResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:StartModelResponse'</a>,
--   <a>startModelResponse_status</a> - The current running status of the
--   model.
--   
--   <a>$sel:httpStatus:StartModelResponse'</a>,
--   <a>startModelResponse_httpStatus</a> - The response's http status
--   code.
newStartModelResponse :: Int -> StartModelResponse

-- | <i>See:</i> <a>newDescribeModel</a> smart constructor.
data DescribeModel
DescribeModel' :: Text -> Text -> DescribeModel

-- | Create a value of <a>DescribeModel</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:projectName:DescribeModel'</a>,
--   <a>describeModel_projectName</a> - The project that contains the
--   version of a model that you want to describe.
--   
--   <a>$sel:modelVersion:DescribeModel'</a>,
--   <a>describeModel_modelVersion</a> - The version of the model that you
--   want to describe.
newDescribeModel :: Text -> Text -> DescribeModel

-- | <i>See:</i> <a>newDescribeModelResponse</a> smart constructor.
data DescribeModelResponse
DescribeModelResponse' :: Maybe ModelDescription -> Int -> DescribeModelResponse

-- | Create a value of <a>DescribeModelResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:modelDescription:DescribeModelResponse'</a>,
--   <a>describeModelResponse_modelDescription</a> - Contains the
--   description of the model.
--   
--   <a>$sel:httpStatus:DescribeModelResponse'</a>,
--   <a>describeModelResponse_httpStatus</a> - The response's http status
--   code.
newDescribeModelResponse :: Int -> DescribeModelResponse

-- | <i>See:</i> <a>newDetectAnomalies</a> smart constructor.
data DetectAnomalies
DetectAnomalies' :: Text -> Text -> Text -> HashedBody -> DetectAnomalies

-- | Create a value of <a>DetectAnomalies</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:projectName:DetectAnomalies'</a>,
--   <a>detectAnomalies_projectName</a> - The name of the project that
--   contains the model version that you want to use.
--   
--   <a>$sel:modelVersion:DetectAnomalies'</a>,
--   <a>detectAnomalies_modelVersion</a> - The version of the model that
--   you want to use.
--   
--   <a>$sel:contentType:DetectAnomalies'</a>,
--   <a>detectAnomalies_contentType</a> - The type of the image passed in
--   <tt>Body</tt>. Valid values are <tt>image/png</tt> (PNG format images)
--   and <tt>image/jpeg</tt> (JPG format images).
--   
--   <a>$sel:body:DetectAnomalies'</a>, <a>detectAnomalies_body</a> - The
--   unencrypted image bytes that you want to analyze.
newDetectAnomalies :: Text -> Text -> Text -> HashedBody -> DetectAnomalies

-- | <i>See:</i> <a>newDetectAnomaliesResponse</a> smart constructor.
data DetectAnomaliesResponse
DetectAnomaliesResponse' :: Maybe DetectAnomalyResult -> Int -> DetectAnomaliesResponse

-- | Create a value of <a>DetectAnomaliesResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:detectAnomalyResult:DetectAnomaliesResponse'</a>,
--   <a>detectAnomaliesResponse_detectAnomalyResult</a> - The results of
--   the <tt>DetectAnomalies</tt> operation.
--   
--   <a>$sel:httpStatus:DetectAnomaliesResponse'</a>,
--   <a>detectAnomaliesResponse_httpStatus</a> - The response's http status
--   code.
newDetectAnomaliesResponse :: Int -> DetectAnomaliesResponse

-- | <i>See:</i> <a>newTagResource</a> smart constructor.
data TagResource
TagResource' :: Text -> [Tag] -> TagResource

-- | Create a value of <a>TagResource</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:TagResource'</a>, <a>tagResource_resourceArn</a> -
--   The Amazon Resource Name (ARN) of the model to assign the tags.
--   
--   <a>$sel:tags:TagResource'</a>, <a>tagResource_tags</a> - The key-value
--   tags to assign to the model.
newTagResource :: Text -> TagResource

-- | <i>See:</i> <a>newTagResourceResponse</a> smart constructor.
data TagResourceResponse
TagResourceResponse' :: Int -> TagResourceResponse

-- | Create a value of <a>TagResourceResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:TagResourceResponse'</a>,
--   <a>tagResourceResponse_httpStatus</a> - The response's http status
--   code.
newTagResourceResponse :: Int -> TagResourceResponse

-- | <i>See:</i> <a>newUntagResource</a> smart constructor.
data UntagResource
UntagResource' :: Text -> [Text] -> UntagResource

-- | Create a value of <a>UntagResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:UntagResource'</a>,
--   <a>untagResource_resourceArn</a> - The Amazon Resource Name (ARN) of
--   the model from which you want to remove tags.
--   
--   <a>$sel:tagKeys:UntagResource'</a>, <a>untagResource_tagKeys</a> - A
--   list of the keys of the tags that you want to remove.
newUntagResource :: Text -> UntagResource

-- | <i>See:</i> <a>newUntagResourceResponse</a> smart constructor.
data UntagResourceResponse
UntagResourceResponse' :: Int -> UntagResourceResponse

-- | Create a value of <a>UntagResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UntagResourceResponse'</a>,
--   <a>untagResourceResponse_httpStatus</a> - The response's http status
--   code.
newUntagResourceResponse :: Int -> UntagResourceResponse

-- | <i>See:</i> <a>newCreateProject</a> smart constructor.
data CreateProject
CreateProject' :: Maybe Text -> Text -> CreateProject

-- | Create a value of <a>CreateProject</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:clientToken:CreateProject'</a>,
--   <a>createProject_clientToken</a> - ClientToken is an idempotency token
--   that ensures a call to <tt>CreateProject</tt> completes only once. You
--   choose the value to pass. For example, An issue, such as an network
--   outage, might prevent you from getting a response from
--   <tt>CreateProject</tt>. In this case, safely retry your call to
--   <tt>CreateProject</tt> by using the same <tt>ClientToken</tt>
--   parameter value. An error occurs if the other input parameters are not
--   the same as in the first request. Using a different value for
--   <tt>ClientToken</tt> is considered a new call to
--   <tt>CreateProject</tt>. An idempotency token is active for 8 hours.
--   
--   <a>$sel:projectName:CreateProject'</a>,
--   <a>createProject_projectName</a> - The name for the project.
newCreateProject :: Text -> CreateProject

-- | <i>See:</i> <a>newCreateProjectResponse</a> smart constructor.
data CreateProjectResponse
CreateProjectResponse' :: Maybe ProjectMetadata -> Int -> CreateProjectResponse

-- | Create a value of <a>CreateProjectResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:projectMetadata:CreateProjectResponse'</a>,
--   <a>createProjectResponse_projectMetadata</a> - Information about the
--   project.
--   
--   <a>$sel:httpStatus:CreateProjectResponse'</a>,
--   <a>createProjectResponse_httpStatus</a> - The response's http status
--   code.
newCreateProjectResponse :: Int -> CreateProjectResponse

-- | <i>See:</i> <a>newUpdateDatasetEntries</a> smart constructor.
data UpdateDatasetEntries
UpdateDatasetEntries' :: Maybe Text -> Text -> Text -> Base64 -> UpdateDatasetEntries

-- | Create a value of <a>UpdateDatasetEntries</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:clientToken:UpdateDatasetEntries'</a>,
--   <a>updateDatasetEntries_clientToken</a> - ClientToken is an
--   idempotency token that ensures a call to <tt>UpdateDatasetEntries</tt>
--   completes only once. You choose the value to pass. For example, An
--   issue, such as an network outage, might prevent you from getting a
--   response from <tt>UpdateDatasetEntries</tt>. In this case, safely
--   retry your call to <tt>UpdateDatasetEntries</tt> by using the same
--   <tt>ClientToken</tt> parameter value. An error occurs if the other
--   input parameters are not the same as in the first request. Using a
--   different value for <tt>ClientToken</tt> is considered a new call to
--   <tt>UpdateDatasetEntries</tt>. An idempotency token is active for 8
--   hours.
--   
--   <a>$sel:projectName:UpdateDatasetEntries'</a>,
--   <a>updateDatasetEntries_projectName</a> - The name of the project that
--   contains the dataset that you want to update.
--   
--   <a>$sel:datasetType:UpdateDatasetEntries'</a>,
--   <a>updateDatasetEntries_datasetType</a> - The type of the dataset that
--   you want to update. Specify <tt>train</tt> to update the training
--   dataset. Specify <tt>test</tt> to update the test dataset. If you have
--   a single dataset project, specify <tt>train</tt>.
--   
--   <a>$sel:changes:UpdateDatasetEntries'</a>,
--   <a>updateDatasetEntries_changes</a> - The entries to add to the
--   dataset.-- -- <i>Note:</i> This <tt>Lens</tt> automatically encodes
--   and decodes Base64 data. -- The underlying isomorphism will encode to
--   Base64 representation during -- serialisation, and decode from Base64
--   representation during deserialisation. -- This <tt>Lens</tt> accepts
--   and returns only raw unencoded data.
newUpdateDatasetEntries :: Text -> Text -> ByteString -> UpdateDatasetEntries

-- | <i>See:</i> <a>newUpdateDatasetEntriesResponse</a> smart constructor.
data UpdateDatasetEntriesResponse
UpdateDatasetEntriesResponse' :: Maybe DatasetStatus -> Int -> UpdateDatasetEntriesResponse

-- | Create a value of <a>UpdateDatasetEntriesResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:UpdateDatasetEntriesResponse'</a>,
--   <a>updateDatasetEntriesResponse_status</a> - The status of the dataset
--   update.
--   
--   <a>$sel:httpStatus:UpdateDatasetEntriesResponse'</a>,
--   <a>updateDatasetEntriesResponse_httpStatus</a> - The response's http
--   status code.
newUpdateDatasetEntriesResponse :: Int -> UpdateDatasetEntriesResponse
newtype DatasetStatus
DatasetStatus' :: Text -> DatasetStatus
[fromDatasetStatus] :: DatasetStatus -> Text
pattern DatasetStatus_CREATE_COMPLETE :: DatasetStatus
pattern DatasetStatus_CREATE_FAILED :: DatasetStatus
pattern DatasetStatus_CREATE_IN_PROGRESS :: DatasetStatus
pattern DatasetStatus_DELETE_COMPLETE :: DatasetStatus
pattern DatasetStatus_DELETE_FAILED :: DatasetStatus
pattern DatasetStatus_DELETE_IN_PROGRESS :: DatasetStatus
pattern DatasetStatus_UPDATE_COMPLETE :: DatasetStatus
pattern DatasetStatus_UPDATE_FAILED_ROLLBACK_COMPLETE :: DatasetStatus
pattern DatasetStatus_UPDATE_FAILED_ROLLBACK_IN_PROGRESS :: DatasetStatus
pattern DatasetStatus_UPDATE_IN_PROGRESS :: DatasetStatus
newtype ModelHostingStatus
ModelHostingStatus' :: Text -> ModelHostingStatus
[fromModelHostingStatus] :: ModelHostingStatus -> Text
pattern ModelHostingStatus_HOSTED :: ModelHostingStatus
pattern ModelHostingStatus_HOSTING_FAILED :: ModelHostingStatus
pattern ModelHostingStatus_STARTING_HOSTING :: ModelHostingStatus
pattern ModelHostingStatus_STOPPING_HOSTING :: ModelHostingStatus
pattern ModelHostingStatus_SYSTEM_UPDATING :: ModelHostingStatus
newtype ModelStatus
ModelStatus' :: Text -> ModelStatus
[fromModelStatus] :: ModelStatus -> Text
pattern ModelStatus_DELETING :: ModelStatus
pattern ModelStatus_HOSTED :: ModelStatus
pattern ModelStatus_HOSTING_FAILED :: ModelStatus
pattern ModelStatus_STARTING_HOSTING :: ModelStatus
pattern ModelStatus_STOPPING_HOSTING :: ModelStatus
pattern ModelStatus_SYSTEM_UPDATING :: ModelStatus
pattern ModelStatus_TRAINED :: ModelStatus
pattern ModelStatus_TRAINING :: ModelStatus
pattern ModelStatus_TRAINING_FAILED :: ModelStatus

-- | The description for a dataset. For more information, see
--   DescribeDataset.
--   
--   <i>See:</i> <a>newDatasetDescription</a> smart constructor.
data DatasetDescription
DatasetDescription' :: Maybe DatasetStatus -> Maybe DatasetImageStats -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe POSIX -> DatasetDescription

-- | Create a value of <a>DatasetDescription</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:DatasetDescription'</a>,
--   <a>datasetDescription_status</a> - The status of the dataset.
--   
--   <a>$sel:imageStats:DatasetDescription'</a>,
--   <a>datasetDescription_imageStats</a> -
--   
--   <a>$sel:statusMessage:DatasetDescription'</a>,
--   <a>datasetDescription_statusMessage</a> - The status message for the
--   dataset.
--   
--   <a>$sel:creationTimestamp:DatasetDescription'</a>,
--   <a>datasetDescription_creationTimestamp</a> - The Unix timestamp for
--   the time and date that the dataset was created.
--   
--   <a>$sel:datasetType:DatasetDescription'</a>,
--   <a>datasetDescription_datasetType</a> - The type of the dataset. The
--   value <tt>train</tt> represents a training dataset or single dataset
--   project. The value <tt>test</tt> represents a test dataset.
--   
--   <a>$sel:projectName:DatasetDescription'</a>,
--   <a>datasetDescription_projectName</a> - The name of the project that
--   contains the dataset.
--   
--   <a>$sel:lastUpdatedTimestamp:DatasetDescription'</a>,
--   <a>datasetDescription_lastUpdatedTimestamp</a> - The Unix timestamp
--   for the date and time that the dataset was last updated.
newDatasetDescription :: DatasetDescription

-- | Location information about a manifest file. You can use a manifest
--   file to create a dataset.
--   
--   <i>See:</i> <a>newDatasetGroundTruthManifest</a> smart constructor.
data DatasetGroundTruthManifest
DatasetGroundTruthManifest' :: Maybe InputS3Object -> DatasetGroundTruthManifest

-- | Create a value of <a>DatasetGroundTruthManifest</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:s3Object:DatasetGroundTruthManifest'</a>,
--   <a>datasetGroundTruthManifest_s3Object</a> - The S3 bucket location
--   for the manifest file.
newDatasetGroundTruthManifest :: DatasetGroundTruthManifest

-- | Statistics about the images in a dataset.
--   
--   <i>See:</i> <a>newDatasetImageStats</a> smart constructor.
data DatasetImageStats
DatasetImageStats' :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> DatasetImageStats

-- | Create a value of <a>DatasetImageStats</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:normal:DatasetImageStats'</a>, <a>datasetImageStats_normal</a>
--   - The total number of images labeled as normal.
--   
--   <a>$sel:anomaly:DatasetImageStats'</a>,
--   <a>datasetImageStats_anomaly</a> - the total number of images labeled
--   as an anomaly.
--   
--   <a>$sel:labeled:DatasetImageStats'</a>,
--   <a>datasetImageStats_labeled</a> - The total number of labeled images.
--   
--   <a>$sel:total:DatasetImageStats'</a>, <a>datasetImageStats_total</a> -
--   The total number of images in the dataset.
newDatasetImageStats :: DatasetImageStats

-- | Sumary information for an Amazon Lookout for Vision dataset.
--   
--   <i>See:</i> <a>newDatasetMetadata</a> smart constructor.
data DatasetMetadata
DatasetMetadata' :: Maybe DatasetStatus -> Maybe Text -> Maybe POSIX -> Maybe Text -> DatasetMetadata

-- | Create a value of <a>DatasetMetadata</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:DatasetMetadata'</a>, <a>datasetMetadata_status</a> -
--   The status for the dataset.
--   
--   <a>$sel:statusMessage:DatasetMetadata'</a>,
--   <a>datasetMetadata_statusMessage</a> - The status message for the
--   dataset.
--   
--   <a>$sel:creationTimestamp:DatasetMetadata'</a>,
--   <a>datasetMetadata_creationTimestamp</a> - The Unix timestamp for the
--   date and time that the dataset was created.
--   
--   <a>$sel:datasetType:DatasetMetadata'</a>,
--   <a>datasetMetadata_datasetType</a> - The type of the dataset.
newDatasetMetadata :: DatasetMetadata

-- | Information about the location of a manifest file that Amazon Lookout
--   for Vision uses to to create a dataset.
--   
--   <i>See:</i> <a>newDatasetSource</a> smart constructor.
data DatasetSource
DatasetSource' :: Maybe DatasetGroundTruthManifest -> DatasetSource

-- | Create a value of <a>DatasetSource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:groundTruthManifest:DatasetSource'</a>,
--   <a>datasetSource_groundTruthManifest</a> - Location information for
--   the manifest file.
newDatasetSource :: DatasetSource

-- | The prediction results from a call to DetectAnomalies.
--   
--   <i>See:</i> <a>newDetectAnomalyResult</a> smart constructor.
data DetectAnomalyResult
DetectAnomalyResult' :: Maybe Bool -> Maybe Double -> Maybe ImageSource -> DetectAnomalyResult

-- | Create a value of <a>DetectAnomalyResult</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:isAnomalous:DetectAnomalyResult'</a>,
--   <a>detectAnomalyResult_isAnomalous</a> - True if the image contains an
--   anomaly, otherwise false.
--   
--   <a>$sel:confidence:DetectAnomalyResult'</a>,
--   <a>detectAnomalyResult_confidence</a> - The confidence that Amazon
--   Lookout for Vision has in the accuracy of the prediction.
--   
--   <a>$sel:source:DetectAnomalyResult'</a>,
--   <a>detectAnomalyResult_source</a> - The source of the image that was
--   analyzed. <tt>direct</tt> means that the images was supplied from the
--   local computer. No other values are supported.
newDetectAnomalyResult :: DetectAnomalyResult

-- | The source for an image.
--   
--   <i>See:</i> <a>newImageSource</a> smart constructor.
data ImageSource
ImageSource' :: Maybe Text -> ImageSource

-- | Create a value of <a>ImageSource</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:type':ImageSource'</a>, <a>imageSource_type</a> - The type of
--   the image.
newImageSource :: ImageSource

-- | Amazon S3 Location information for an input manifest file.
--   
--   <i>See:</i> <a>newInputS3Object</a> smart constructor.
data InputS3Object
InputS3Object' :: Maybe Text -> Text -> Text -> InputS3Object

-- | Create a value of <a>InputS3Object</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:versionId:InputS3Object'</a>, <a>inputS3Object_versionId</a> -
--   The version ID of the bucket.
--   
--   <a>$sel:bucket:InputS3Object'</a>, <a>inputS3Object_bucket</a> - The
--   Amazon S3 bucket that contains the manifest.
--   
--   <a>$sel:key:InputS3Object'</a>, <a>inputS3Object_key</a> - The name
--   and location of the manifest file withiin the bucket.
newInputS3Object :: Text -> Text -> InputS3Object

-- | Describes an Amazon Lookout for Vision model.
--   
--   <i>See:</i> <a>newModelDescription</a> smart constructor.
data ModelDescription
ModelDescription' :: Maybe ModelStatus -> Maybe OutputS3Object -> Maybe POSIX -> Maybe Text -> Maybe ModelPerformance -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe OutputConfig -> Maybe Text -> Maybe Text -> Maybe OutputS3Object -> ModelDescription

-- | Create a value of <a>ModelDescription</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:ModelDescription'</a>, <a>modelDescription_status</a> -
--   The status of the model.
--   
--   <a>$sel:evaluationResult:ModelDescription'</a>,
--   <a>modelDescription_evaluationResult</a> - The S3 location where
--   Amazon Lookout for Vision saves the performance metrics.
--   
--   <a>$sel:evaluationEndTimestamp:ModelDescription'</a>,
--   <a>modelDescription_evaluationEndTimestamp</a> - The unix timestamp
--   for the date and time that the evaluation ended.
--   
--   <a>$sel:modelArn:ModelDescription'</a>,
--   <a>modelDescription_modelArn</a> - The Amazon Resource Name (ARN) of
--   the model.
--   
--   <a>$sel:performance:ModelDescription'</a>,
--   <a>modelDescription_performance</a> - Performance metrics for the
--   model. Created during training.
--   
--   <a>$sel:kmsKeyId:ModelDescription'</a>,
--   <a>modelDescription_kmsKeyId</a> - The identifer for the AWS Key
--   Management Service (AWS KMS) key that was used to encrypt the model
--   during training.
--   
--   <a>$sel:statusMessage:ModelDescription'</a>,
--   <a>modelDescription_statusMessage</a> - The status message for the
--   model.
--   
--   <a>$sel:creationTimestamp:ModelDescription'</a>,
--   <a>modelDescription_creationTimestamp</a> - The unix timestamp for the
--   date and time that the model was created.
--   
--   <a>$sel:outputConfig:ModelDescription'</a>,
--   <a>modelDescription_outputConfig</a> - The S3 location where Amazon
--   Lookout for Vision saves model training files.
--   
--   <a>$sel:modelVersion:ModelDescription'</a>,
--   <a>modelDescription_modelVersion</a> - The version of the model
--   
--   <a>$sel:description:ModelDescription'</a>,
--   <a>modelDescription_description</a> - The description for the model.
--   
--   <a>$sel:evaluationManifest:ModelDescription'</a>,
--   <a>modelDescription_evaluationManifest</a> - The S3 location where
--   Amazon Lookout for Vision saves the manifest file that was used to
--   test the trained model and generate the performance scores.
newModelDescription :: ModelDescription

-- | Describes an Amazon Lookout for Vision model.
--   
--   <i>See:</i> <a>newModelMetadata</a> smart constructor.
data ModelMetadata
ModelMetadata' :: Maybe ModelStatus -> Maybe Text -> Maybe ModelPerformance -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe Text -> ModelMetadata

-- | Create a value of <a>ModelMetadata</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:ModelMetadata'</a>, <a>modelMetadata_status</a> - The
--   status of the model.
--   
--   <a>$sel:modelArn:ModelMetadata'</a>, <a>modelMetadata_modelArn</a> -
--   The Amazon Resource Name (ARN) of the model.
--   
--   <a>$sel:performance:ModelMetadata'</a>,
--   <a>modelMetadata_performance</a> - Performance metrics for the model.
--   Not available until training has successfully completed.
--   
--   <a>$sel:statusMessage:ModelMetadata'</a>,
--   <a>modelMetadata_statusMessage</a> - The status message for the model.
--   
--   <a>$sel:creationTimestamp:ModelMetadata'</a>,
--   <a>modelMetadata_creationTimestamp</a> - The unix timestamp for the
--   date and time that the model was created.
--   
--   <a>$sel:modelVersion:ModelMetadata'</a>,
--   <a>modelMetadata_modelVersion</a> - The version of the model.
--   
--   <a>$sel:description:ModelMetadata'</a>,
--   <a>modelMetadata_description</a> - The description for the model.
newModelMetadata :: ModelMetadata

-- | Information about the evaluation performance of a trained model.
--   
--   <i>See:</i> <a>newModelPerformance</a> smart constructor.
data ModelPerformance
ModelPerformance' :: Maybe Double -> Maybe Double -> Maybe Double -> ModelPerformance

-- | Create a value of <a>ModelPerformance</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:recall:ModelPerformance'</a>, <a>modelPerformance_recall</a> -
--   The overall recall metric value for the trained model.
--   
--   <a>$sel:precision:ModelPerformance'</a>,
--   <a>modelPerformance_precision</a> - The overall precision metric value
--   for the trained model.
--   
--   <a>$sel:f1Score:ModelPerformance'</a>, <a>modelPerformance_f1Score</a>
--   - The overall F1 score metric for the trained model.
newModelPerformance :: ModelPerformance

-- | The S3 location where Amazon Lookout for Vision saves model training
--   files.
--   
--   <i>See:</i> <a>newOutputConfig</a> smart constructor.
data OutputConfig
OutputConfig' :: S3Location -> OutputConfig

-- | Create a value of <a>OutputConfig</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:s3Location:OutputConfig'</a>, <a>outputConfig_s3Location</a> -
--   The S3 location for the output.
newOutputConfig :: S3Location -> OutputConfig

-- | The S3 location where Amazon Lookout for Vision saves training output.
--   
--   <i>See:</i> <a>newOutputS3Object</a> smart constructor.
data OutputS3Object
OutputS3Object' :: Text -> Text -> OutputS3Object

-- | Create a value of <a>OutputS3Object</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:bucket:OutputS3Object'</a>, <a>outputS3Object_bucket</a> - The
--   bucket that contains the training output.
--   
--   <a>$sel:key:OutputS3Object'</a>, <a>outputS3Object_key</a> - The
--   location of the training output in the bucket.
newOutputS3Object :: Text -> Text -> OutputS3Object

-- | Describe an Amazon Lookout for Vision project. For more information,
--   see DescribeProject.
--   
--   <i>See:</i> <a>newProjectDescription</a> smart constructor.
data ProjectDescription
ProjectDescription' :: Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe [DatasetMetadata] -> ProjectDescription

-- | Create a value of <a>ProjectDescription</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:creationTimestamp:ProjectDescription'</a>,
--   <a>projectDescription_creationTimestamp</a> - The unix timestamp for
--   the date and time that the project was created.
--   
--   <a>$sel:projectName:ProjectDescription'</a>,
--   <a>projectDescription_projectName</a> - The name of the project.
--   
--   <a>$sel:projectArn:ProjectDescription'</a>,
--   <a>projectDescription_projectArn</a> - The Amazon Resource Name (ARN)
--   of the project.
--   
--   <a>$sel:datasets:ProjectDescription'</a>,
--   <a>projectDescription_datasets</a> - A list of datasets in the
--   project.
newProjectDescription :: ProjectDescription

-- | Metadata about an Amazon Lookout for Vision project.
--   
--   <i>See:</i> <a>newProjectMetadata</a> smart constructor.
data ProjectMetadata
ProjectMetadata' :: Maybe POSIX -> Maybe Text -> Maybe Text -> ProjectMetadata

-- | Create a value of <a>ProjectMetadata</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:creationTimestamp:ProjectMetadata'</a>,
--   <a>projectMetadata_creationTimestamp</a> - The unix timestamp for the
--   date and time that the project was created.
--   
--   <a>$sel:projectName:ProjectMetadata'</a>,
--   <a>projectMetadata_projectName</a> - The name of the project.
--   
--   <a>$sel:projectArn:ProjectMetadata'</a>,
--   <a>projectMetadata_projectArn</a> - The Amazon Resource Name (ARN) of
--   the project.
newProjectMetadata :: ProjectMetadata

-- | Information about the location training output.
--   
--   <i>See:</i> <a>newS3Location</a> smart constructor.
data S3Location
S3Location' :: Maybe Text -> Text -> S3Location

-- | Create a value of <a>S3Location</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:prefix:S3Location'</a>, <a>s3Location_prefix</a> - The path of
--   the folder, within the S3 bucket, that contains the training output.
--   
--   <a>$sel:bucket:S3Location'</a>, <a>s3Location_bucket</a> - The S3
--   bucket that contains the training output.
newS3Location :: Text -> S3Location

-- | A key and value pair that is attached to the specified Amazon Lookout
--   for Vision model.
--   
--   <i>See:</i> <a>newTag</a> smart constructor.
data Tag
Tag' :: Text -> Text -> Tag

-- | Create a value of <a>Tag</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:key:Tag'</a>, <a>tag_key</a> - The key of the tag that is
--   attached to the specified model.
--   
--   <a>$sel:value:Tag'</a>, <a>tag_value</a> - The value of the tag that
--   is attached to the specified model.
newTag :: Text -> Text -> Tag
