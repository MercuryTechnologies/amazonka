-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/

@package libZSservicesZSamazonka-marketplace-meteringZSamazonka-marketplace-metering
@version 2.0


module Amazonka.MarketplaceMetering.Types.Tag

-- | Metadata assigned to an allocation. Each tag is made up of a key and a
--   value.
--   
--   <i>See:</i> <a>newTag</a> smart constructor.
data Tag
Tag' :: Text -> Text -> Tag

-- | One part of a key-value pair that makes up a tag. A key is a label
--   that acts like a category for the specific tag values.
[$sel:key:Tag'] :: Tag -> Text

-- | One part of a key-value pair that makes up a tag. A value acts as a
--   descriptor within a tag category (key). The value can be empty or
--   null.
[$sel:value:Tag'] :: Tag -> Text

-- | Create a value of <a>Tag</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:key:Tag'</a>, <a>tag_key</a> - One part of a key-value pair
--   that makes up a tag. A key is a label that acts like a category for
--   the specific tag values.
--   
--   <a>$sel:value:Tag'</a>, <a>tag_value</a> - One part of a key-value
--   pair that makes up a tag. A value acts as a descriptor within a tag
--   category (key). The value can be empty or null.
newTag :: Text -> Text -> Tag

-- | One part of a key-value pair that makes up a tag. A key is a label
--   that acts like a category for the specific tag values.
tag_key :: Lens' Tag Text

-- | One part of a key-value pair that makes up a tag. A value acts as a
--   descriptor within a tag category (key). The value can be empty or
--   null.
tag_value :: Lens' Tag Text
instance GHC.Generics.Generic Amazonka.MarketplaceMetering.Types.Tag.Tag
instance GHC.Show.Show Amazonka.MarketplaceMetering.Types.Tag.Tag
instance GHC.Read.Read Amazonka.MarketplaceMetering.Types.Tag.Tag
instance GHC.Classes.Eq Amazonka.MarketplaceMetering.Types.Tag.Tag
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.MarketplaceMetering.Types.Tag.Tag
instance Data.Hashable.Class.Hashable Amazonka.MarketplaceMetering.Types.Tag.Tag
instance Control.DeepSeq.NFData Amazonka.MarketplaceMetering.Types.Tag.Tag
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MarketplaceMetering.Types.Tag.Tag


module Amazonka.MarketplaceMetering.Types.UsageAllocation

-- | Usage allocations allow you to split usage into buckets by tags.
--   
--   Each UsageAllocation indicates the usage quantity for a specific set
--   of tags.
--   
--   <i>See:</i> <a>newUsageAllocation</a> smart constructor.
data UsageAllocation
UsageAllocation' :: Maybe (NonEmpty Tag) -> Natural -> UsageAllocation

-- | The set of tags that define the bucket of usage. For the bucket of
--   items with no tags, this parameter can be left out.
[$sel:tags:UsageAllocation'] :: UsageAllocation -> Maybe (NonEmpty Tag)

-- | The total quantity allocated to this bucket of usage.
[$sel:allocatedUsageQuantity:UsageAllocation'] :: UsageAllocation -> Natural

-- | Create a value of <a>UsageAllocation</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tags:UsageAllocation'</a>, <a>usageAllocation_tags</a> - The
--   set of tags that define the bucket of usage. For the bucket of items
--   with no tags, this parameter can be left out.
--   
--   <a>$sel:allocatedUsageQuantity:UsageAllocation'</a>,
--   <a>usageAllocation_allocatedUsageQuantity</a> - The total quantity
--   allocated to this bucket of usage.
newUsageAllocation :: Natural -> UsageAllocation

-- | The set of tags that define the bucket of usage. For the bucket of
--   items with no tags, this parameter can be left out.
usageAllocation_tags :: Lens' UsageAllocation (Maybe (NonEmpty Tag))

-- | The total quantity allocated to this bucket of usage.
usageAllocation_allocatedUsageQuantity :: Lens' UsageAllocation Natural
instance GHC.Generics.Generic Amazonka.MarketplaceMetering.Types.UsageAllocation.UsageAllocation
instance GHC.Show.Show Amazonka.MarketplaceMetering.Types.UsageAllocation.UsageAllocation
instance GHC.Read.Read Amazonka.MarketplaceMetering.Types.UsageAllocation.UsageAllocation
instance GHC.Classes.Eq Amazonka.MarketplaceMetering.Types.UsageAllocation.UsageAllocation
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.MarketplaceMetering.Types.UsageAllocation.UsageAllocation
instance Data.Hashable.Class.Hashable Amazonka.MarketplaceMetering.Types.UsageAllocation.UsageAllocation
instance Control.DeepSeq.NFData Amazonka.MarketplaceMetering.Types.UsageAllocation.UsageAllocation
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MarketplaceMetering.Types.UsageAllocation.UsageAllocation


module Amazonka.MarketplaceMetering.Types.UsageRecord

-- | A UsageRecord indicates a quantity of usage for a given product,
--   customer, dimension and time.
--   
--   Multiple requests with the same UsageRecords as input will be
--   deduplicated to prevent double charges.
--   
--   <i>See:</i> <a>newUsageRecord</a> smart constructor.
data UsageRecord
UsageRecord' :: Maybe Natural -> Maybe (NonEmpty UsageAllocation) -> POSIX -> Text -> Text -> UsageRecord

-- | The quantity of usage consumed by the customer for the given dimension
--   and time. Defaults to <tt>0</tt> if not specified.
[$sel:quantity:UsageRecord'] :: UsageRecord -> Maybe Natural

-- | The set of UsageAllocations to submit. The sum of all UsageAllocation
--   quantities must equal the Quantity of the UsageRecord.
[$sel:usageAllocations:UsageRecord'] :: UsageRecord -> Maybe (NonEmpty UsageAllocation)

-- | Timestamp, in UTC, for which the usage is being reported.
--   
--   Your application can meter usage for up to one hour in the past. Make
--   sure the timestamp value is not before the start of the software
--   usage.
[$sel:timestamp:UsageRecord'] :: UsageRecord -> POSIX

-- | The CustomerIdentifier is obtained through the ResolveCustomer
--   operation and represents an individual buyer in your application.
[$sel:customerIdentifier:UsageRecord'] :: UsageRecord -> Text

-- | During the process of registering a product on AWS Marketplace, up to
--   eight dimensions are specified. These represent different units of
--   value in your application.
[$sel:dimension:UsageRecord'] :: UsageRecord -> Text

-- | Create a value of <a>UsageRecord</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:quantity:UsageRecord'</a>, <a>usageRecord_quantity</a> - The
--   quantity of usage consumed by the customer for the given dimension and
--   time. Defaults to <tt>0</tt> if not specified.
--   
--   <a>$sel:usageAllocations:UsageRecord'</a>,
--   <a>usageRecord_usageAllocations</a> - The set of UsageAllocations to
--   submit. The sum of all UsageAllocation quantities must equal the
--   Quantity of the UsageRecord.
--   
--   <a>$sel:timestamp:UsageRecord'</a>, <a>usageRecord_timestamp</a> -
--   Timestamp, in UTC, for which the usage is being reported.
--   
--   Your application can meter usage for up to one hour in the past. Make
--   sure the timestamp value is not before the start of the software
--   usage.
--   
--   <a>$sel:customerIdentifier:UsageRecord'</a>,
--   <a>usageRecord_customerIdentifier</a> - The CustomerIdentifier is
--   obtained through the ResolveCustomer operation and represents an
--   individual buyer in your application.
--   
--   <a>$sel:dimension:UsageRecord'</a>, <a>usageRecord_dimension</a> -
--   During the process of registering a product on AWS Marketplace, up to
--   eight dimensions are specified. These represent different units of
--   value in your application.
newUsageRecord :: UTCTime -> Text -> Text -> UsageRecord

-- | The quantity of usage consumed by the customer for the given dimension
--   and time. Defaults to <tt>0</tt> if not specified.
usageRecord_quantity :: Lens' UsageRecord (Maybe Natural)

-- | The set of UsageAllocations to submit. The sum of all UsageAllocation
--   quantities must equal the Quantity of the UsageRecord.
usageRecord_usageAllocations :: Lens' UsageRecord (Maybe (NonEmpty UsageAllocation))

-- | Timestamp, in UTC, for which the usage is being reported.
--   
--   Your application can meter usage for up to one hour in the past. Make
--   sure the timestamp value is not before the start of the software
--   usage.
usageRecord_timestamp :: Lens' UsageRecord UTCTime

-- | The CustomerIdentifier is obtained through the ResolveCustomer
--   operation and represents an individual buyer in your application.
usageRecord_customerIdentifier :: Lens' UsageRecord Text

-- | During the process of registering a product on AWS Marketplace, up to
--   eight dimensions are specified. These represent different units of
--   value in your application.
usageRecord_dimension :: Lens' UsageRecord Text
instance GHC.Generics.Generic Amazonka.MarketplaceMetering.Types.UsageRecord.UsageRecord
instance GHC.Show.Show Amazonka.MarketplaceMetering.Types.UsageRecord.UsageRecord
instance GHC.Read.Read Amazonka.MarketplaceMetering.Types.UsageRecord.UsageRecord
instance GHC.Classes.Eq Amazonka.MarketplaceMetering.Types.UsageRecord.UsageRecord
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.MarketplaceMetering.Types.UsageRecord.UsageRecord
instance Data.Hashable.Class.Hashable Amazonka.MarketplaceMetering.Types.UsageRecord.UsageRecord
instance Control.DeepSeq.NFData Amazonka.MarketplaceMetering.Types.UsageRecord.UsageRecord
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MarketplaceMetering.Types.UsageRecord.UsageRecord


module Amazonka.MarketplaceMetering.Types.UsageRecordResultStatus
newtype UsageRecordResultStatus
UsageRecordResultStatus' :: Text -> UsageRecordResultStatus
[fromUsageRecordResultStatus] :: UsageRecordResultStatus -> Text
pattern UsageRecordResultStatus_CustomerNotSubscribed :: UsageRecordResultStatus
pattern UsageRecordResultStatus_DuplicateRecord :: UsageRecordResultStatus
pattern UsageRecordResultStatus_Success :: UsageRecordResultStatus
instance Amazonka.Data.XML.ToXML Amazonka.MarketplaceMetering.Types.UsageRecordResultStatus.UsageRecordResultStatus
instance Amazonka.Data.XML.FromXML Amazonka.MarketplaceMetering.Types.UsageRecordResultStatus.UsageRecordResultStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.MarketplaceMetering.Types.UsageRecordResultStatus.UsageRecordResultStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MarketplaceMetering.Types.UsageRecordResultStatus.UsageRecordResultStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.MarketplaceMetering.Types.UsageRecordResultStatus.UsageRecordResultStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.MarketplaceMetering.Types.UsageRecordResultStatus.UsageRecordResultStatus
instance Amazonka.Data.Query.ToQuery Amazonka.MarketplaceMetering.Types.UsageRecordResultStatus.UsageRecordResultStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.MarketplaceMetering.Types.UsageRecordResultStatus.UsageRecordResultStatus
instance Amazonka.Data.Log.ToLog Amazonka.MarketplaceMetering.Types.UsageRecordResultStatus.UsageRecordResultStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.MarketplaceMetering.Types.UsageRecordResultStatus.UsageRecordResultStatus
instance Amazonka.Data.Text.ToText Amazonka.MarketplaceMetering.Types.UsageRecordResultStatus.UsageRecordResultStatus
instance Amazonka.Data.Text.FromText Amazonka.MarketplaceMetering.Types.UsageRecordResultStatus.UsageRecordResultStatus
instance Control.DeepSeq.NFData Amazonka.MarketplaceMetering.Types.UsageRecordResultStatus.UsageRecordResultStatus
instance Data.Hashable.Class.Hashable Amazonka.MarketplaceMetering.Types.UsageRecordResultStatus.UsageRecordResultStatus
instance GHC.Generics.Generic Amazonka.MarketplaceMetering.Types.UsageRecordResultStatus.UsageRecordResultStatus
instance GHC.Classes.Ord Amazonka.MarketplaceMetering.Types.UsageRecordResultStatus.UsageRecordResultStatus
instance GHC.Classes.Eq Amazonka.MarketplaceMetering.Types.UsageRecordResultStatus.UsageRecordResultStatus
instance GHC.Read.Read Amazonka.MarketplaceMetering.Types.UsageRecordResultStatus.UsageRecordResultStatus
instance GHC.Show.Show Amazonka.MarketplaceMetering.Types.UsageRecordResultStatus.UsageRecordResultStatus


module Amazonka.MarketplaceMetering.Types.UsageRecordResult

-- | A UsageRecordResult indicates the status of a given UsageRecord
--   processed by BatchMeterUsage.
--   
--   <i>See:</i> <a>newUsageRecordResult</a> smart constructor.
data UsageRecordResult
UsageRecordResult' :: Maybe UsageRecordResultStatus -> Maybe UsageRecord -> Maybe Text -> UsageRecordResult

-- | The UsageRecordResult Status indicates the status of an individual
--   UsageRecord processed by BatchMeterUsage.
--   
--   <ul>
--   <li><i>Success</i>- The UsageRecord was accepted and honored by
--   BatchMeterUsage.</li>
--   <li><i>CustomerNotSubscribed</i>- The CustomerIdentifier specified is
--   not subscribed to your product. The UsageRecord was not honored.
--   Future UsageRecords for this customer will fail until the customer
--   subscribes to your product.</li>
--   <li><i>DuplicateRecord</i>- Indicates that the UsageRecord was invalid
--   and not honored. A previously metered UsageRecord had the same
--   customer, dimension, and time, but a different quantity.</li>
--   </ul>
[$sel:status:UsageRecordResult'] :: UsageRecordResult -> Maybe UsageRecordResultStatus

-- | The UsageRecord that was part of the BatchMeterUsage request.
[$sel:usageRecord:UsageRecordResult'] :: UsageRecordResult -> Maybe UsageRecord

-- | The MeteringRecordId is a unique identifier for this metering event.
[$sel:meteringRecordId:UsageRecordResult'] :: UsageRecordResult -> Maybe Text

-- | Create a value of <a>UsageRecordResult</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:UsageRecordResult'</a>, <a>usageRecordResult_status</a>
--   - The UsageRecordResult Status indicates the status of an individual
--   UsageRecord processed by BatchMeterUsage.
--   
--   <ul>
--   <li><i>Success</i>- The UsageRecord was accepted and honored by
--   BatchMeterUsage.</li>
--   <li><i>CustomerNotSubscribed</i>- The CustomerIdentifier specified is
--   not subscribed to your product. The UsageRecord was not honored.
--   Future UsageRecords for this customer will fail until the customer
--   subscribes to your product.</li>
--   <li><i>DuplicateRecord</i>- Indicates that the UsageRecord was invalid
--   and not honored. A previously metered UsageRecord had the same
--   customer, dimension, and time, but a different quantity.</li>
--   </ul>
--   
--   <a>$sel:usageRecord:UsageRecordResult'</a>,
--   <a>usageRecordResult_usageRecord</a> - The UsageRecord that was part
--   of the BatchMeterUsage request.
--   
--   <a>$sel:meteringRecordId:UsageRecordResult'</a>,
--   <a>usageRecordResult_meteringRecordId</a> - The MeteringRecordId is a
--   unique identifier for this metering event.
newUsageRecordResult :: UsageRecordResult

-- | The UsageRecordResult Status indicates the status of an individual
--   UsageRecord processed by BatchMeterUsage.
--   
--   <ul>
--   <li><i>Success</i>- The UsageRecord was accepted and honored by
--   BatchMeterUsage.</li>
--   <li><i>CustomerNotSubscribed</i>- The CustomerIdentifier specified is
--   not subscribed to your product. The UsageRecord was not honored.
--   Future UsageRecords for this customer will fail until the customer
--   subscribes to your product.</li>
--   <li><i>DuplicateRecord</i>- Indicates that the UsageRecord was invalid
--   and not honored. A previously metered UsageRecord had the same
--   customer, dimension, and time, but a different quantity.</li>
--   </ul>
usageRecordResult_status :: Lens' UsageRecordResult (Maybe UsageRecordResultStatus)

-- | The UsageRecord that was part of the BatchMeterUsage request.
usageRecordResult_usageRecord :: Lens' UsageRecordResult (Maybe UsageRecord)

-- | The MeteringRecordId is a unique identifier for this metering event.
usageRecordResult_meteringRecordId :: Lens' UsageRecordResult (Maybe Text)
instance GHC.Generics.Generic Amazonka.MarketplaceMetering.Types.UsageRecordResult.UsageRecordResult
instance GHC.Show.Show Amazonka.MarketplaceMetering.Types.UsageRecordResult.UsageRecordResult
instance GHC.Read.Read Amazonka.MarketplaceMetering.Types.UsageRecordResult.UsageRecordResult
instance GHC.Classes.Eq Amazonka.MarketplaceMetering.Types.UsageRecordResult.UsageRecordResult
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.MarketplaceMetering.Types.UsageRecordResult.UsageRecordResult
instance Data.Hashable.Class.Hashable Amazonka.MarketplaceMetering.Types.UsageRecordResult.UsageRecordResult
instance Control.DeepSeq.NFData Amazonka.MarketplaceMetering.Types.UsageRecordResult.UsageRecordResult


module Amazonka.MarketplaceMetering.Types

-- | API version <tt>2016-01-14</tt> of the Amazon Marketplace Metering SDK
--   configuration.
defaultService :: Service

-- | The tag is invalid, or the number of tags is greater than 5.
_InvalidTagException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The endpoint being called is in a AWS Region different from your EC2
--   instance, ECS task, or EKS pod. The Region of the Metering Service
--   endpoint and the AWS Region of the resource must match.
_InvalidEndpointRegionException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The product code passed does not match the product code used for
--   publishing the product.
_InvalidProductCodeException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The usage dimension does not match one of the UsageDimensions
--   associated with products.
_InvalidUsageDimensionException :: AsError a => Getting (First ServiceError) a ServiceError

-- | AWS Marketplace does not support metering usage from the underlying
--   platform. Currently, Amazon ECS, Amazon EKS, and AWS Fargate are
--   supported.
_PlatformNotSupportedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Exception thrown when the customer does not have a valid subscription
--   for the product.
_CustomerNotEntitledException :: AsError a => Getting (First ServiceError) a ServiceError

-- | A metering record has already been emitted by the same EC2 instance,
--   ECS task, or EKS pod for the given {usageDimension, timestamp} with a
--   different usageQuantity.
_DuplicateRequestException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The API is disabled in the Region.
_DisabledApiException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The timestamp value passed in the meterUsage() is out of allowed
--   range.
_TimestampOutOfBoundsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The calls to the API are throttled.
_ThrottlingException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Public Key version is invalid.
_InvalidPublicKeyVersionException :: AsError a => Getting (First ServiceError) a ServiceError

-- | An internal error has occurred. Retry your request. If the problem
--   persists, post a message with details on the AWS forums.
_InternalServiceErrorException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Registration token is invalid.
_InvalidTokenException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The usage allocation objects are invalid, or the number of allocations
--   is greater than 500 for a single usage record.
_InvalidUsageAllocationsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The submitted registration token has expired. This can happen if the
--   buyer's browser takes too long to redirect to your page, the buyer has
--   resubmitted the registration token, or your application has held on to
--   the registration token for too long. Your SaaS registration website
--   should redeem this token as soon as it is submitted by the buyer's
--   browser.
_ExpiredTokenException :: AsError a => Getting (First ServiceError) a ServiceError

-- | RegisterUsage must be called in the same AWS Region the ECS task was
--   launched in. This prevents a container from hardcoding a Region (e.g.
--   withRegion(“us-east-1”) when calling RegisterUsage.
_InvalidRegionException :: AsError a => Getting (First ServiceError) a ServiceError

-- | You have metered usage for a CustomerIdentifier that does not exist.
_InvalidCustomerIdentifierException :: AsError a => Getting (First ServiceError) a ServiceError
newtype UsageRecordResultStatus
UsageRecordResultStatus' :: Text -> UsageRecordResultStatus
[fromUsageRecordResultStatus] :: UsageRecordResultStatus -> Text
pattern UsageRecordResultStatus_CustomerNotSubscribed :: UsageRecordResultStatus
pattern UsageRecordResultStatus_DuplicateRecord :: UsageRecordResultStatus
pattern UsageRecordResultStatus_Success :: UsageRecordResultStatus

-- | Metadata assigned to an allocation. Each tag is made up of a key and a
--   value.
--   
--   <i>See:</i> <a>newTag</a> smart constructor.
data Tag
Tag' :: Text -> Text -> Tag

-- | One part of a key-value pair that makes up a tag. A key is a label
--   that acts like a category for the specific tag values.
[$sel:key:Tag'] :: Tag -> Text

-- | One part of a key-value pair that makes up a tag. A value acts as a
--   descriptor within a tag category (key). The value can be empty or
--   null.
[$sel:value:Tag'] :: Tag -> Text

-- | Create a value of <a>Tag</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:key:Tag'</a>, <a>tag_key</a> - One part of a key-value pair
--   that makes up a tag. A key is a label that acts like a category for
--   the specific tag values.
--   
--   <a>$sel:value:Tag'</a>, <a>tag_value</a> - One part of a key-value
--   pair that makes up a tag. A value acts as a descriptor within a tag
--   category (key). The value can be empty or null.
newTag :: Text -> Text -> Tag

-- | One part of a key-value pair that makes up a tag. A key is a label
--   that acts like a category for the specific tag values.
tag_key :: Lens' Tag Text

-- | One part of a key-value pair that makes up a tag. A value acts as a
--   descriptor within a tag category (key). The value can be empty or
--   null.
tag_value :: Lens' Tag Text

-- | Usage allocations allow you to split usage into buckets by tags.
--   
--   Each UsageAllocation indicates the usage quantity for a specific set
--   of tags.
--   
--   <i>See:</i> <a>newUsageAllocation</a> smart constructor.
data UsageAllocation
UsageAllocation' :: Maybe (NonEmpty Tag) -> Natural -> UsageAllocation

-- | The set of tags that define the bucket of usage. For the bucket of
--   items with no tags, this parameter can be left out.
[$sel:tags:UsageAllocation'] :: UsageAllocation -> Maybe (NonEmpty Tag)

-- | The total quantity allocated to this bucket of usage.
[$sel:allocatedUsageQuantity:UsageAllocation'] :: UsageAllocation -> Natural

-- | Create a value of <a>UsageAllocation</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tags:UsageAllocation'</a>, <a>usageAllocation_tags</a> - The
--   set of tags that define the bucket of usage. For the bucket of items
--   with no tags, this parameter can be left out.
--   
--   <a>$sel:allocatedUsageQuantity:UsageAllocation'</a>,
--   <a>usageAllocation_allocatedUsageQuantity</a> - The total quantity
--   allocated to this bucket of usage.
newUsageAllocation :: Natural -> UsageAllocation

-- | The set of tags that define the bucket of usage. For the bucket of
--   items with no tags, this parameter can be left out.
usageAllocation_tags :: Lens' UsageAllocation (Maybe (NonEmpty Tag))

-- | The total quantity allocated to this bucket of usage.
usageAllocation_allocatedUsageQuantity :: Lens' UsageAllocation Natural

-- | A UsageRecord indicates a quantity of usage for a given product,
--   customer, dimension and time.
--   
--   Multiple requests with the same UsageRecords as input will be
--   deduplicated to prevent double charges.
--   
--   <i>See:</i> <a>newUsageRecord</a> smart constructor.
data UsageRecord
UsageRecord' :: Maybe Natural -> Maybe (NonEmpty UsageAllocation) -> POSIX -> Text -> Text -> UsageRecord

-- | The quantity of usage consumed by the customer for the given dimension
--   and time. Defaults to <tt>0</tt> if not specified.
[$sel:quantity:UsageRecord'] :: UsageRecord -> Maybe Natural

-- | The set of UsageAllocations to submit. The sum of all UsageAllocation
--   quantities must equal the Quantity of the UsageRecord.
[$sel:usageAllocations:UsageRecord'] :: UsageRecord -> Maybe (NonEmpty UsageAllocation)

-- | Timestamp, in UTC, for which the usage is being reported.
--   
--   Your application can meter usage for up to one hour in the past. Make
--   sure the timestamp value is not before the start of the software
--   usage.
[$sel:timestamp:UsageRecord'] :: UsageRecord -> POSIX

-- | The CustomerIdentifier is obtained through the ResolveCustomer
--   operation and represents an individual buyer in your application.
[$sel:customerIdentifier:UsageRecord'] :: UsageRecord -> Text

-- | During the process of registering a product on AWS Marketplace, up to
--   eight dimensions are specified. These represent different units of
--   value in your application.
[$sel:dimension:UsageRecord'] :: UsageRecord -> Text

-- | Create a value of <a>UsageRecord</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:quantity:UsageRecord'</a>, <a>usageRecord_quantity</a> - The
--   quantity of usage consumed by the customer for the given dimension and
--   time. Defaults to <tt>0</tt> if not specified.
--   
--   <a>$sel:usageAllocations:UsageRecord'</a>,
--   <a>usageRecord_usageAllocations</a> - The set of UsageAllocations to
--   submit. The sum of all UsageAllocation quantities must equal the
--   Quantity of the UsageRecord.
--   
--   <a>$sel:timestamp:UsageRecord'</a>, <a>usageRecord_timestamp</a> -
--   Timestamp, in UTC, for which the usage is being reported.
--   
--   Your application can meter usage for up to one hour in the past. Make
--   sure the timestamp value is not before the start of the software
--   usage.
--   
--   <a>$sel:customerIdentifier:UsageRecord'</a>,
--   <a>usageRecord_customerIdentifier</a> - The CustomerIdentifier is
--   obtained through the ResolveCustomer operation and represents an
--   individual buyer in your application.
--   
--   <a>$sel:dimension:UsageRecord'</a>, <a>usageRecord_dimension</a> -
--   During the process of registering a product on AWS Marketplace, up to
--   eight dimensions are specified. These represent different units of
--   value in your application.
newUsageRecord :: UTCTime -> Text -> Text -> UsageRecord

-- | The quantity of usage consumed by the customer for the given dimension
--   and time. Defaults to <tt>0</tt> if not specified.
usageRecord_quantity :: Lens' UsageRecord (Maybe Natural)

-- | The set of UsageAllocations to submit. The sum of all UsageAllocation
--   quantities must equal the Quantity of the UsageRecord.
usageRecord_usageAllocations :: Lens' UsageRecord (Maybe (NonEmpty UsageAllocation))

-- | Timestamp, in UTC, for which the usage is being reported.
--   
--   Your application can meter usage for up to one hour in the past. Make
--   sure the timestamp value is not before the start of the software
--   usage.
usageRecord_timestamp :: Lens' UsageRecord UTCTime

-- | The CustomerIdentifier is obtained through the ResolveCustomer
--   operation and represents an individual buyer in your application.
usageRecord_customerIdentifier :: Lens' UsageRecord Text

-- | During the process of registering a product on AWS Marketplace, up to
--   eight dimensions are specified. These represent different units of
--   value in your application.
usageRecord_dimension :: Lens' UsageRecord Text

-- | A UsageRecordResult indicates the status of a given UsageRecord
--   processed by BatchMeterUsage.
--   
--   <i>See:</i> <a>newUsageRecordResult</a> smart constructor.
data UsageRecordResult
UsageRecordResult' :: Maybe UsageRecordResultStatus -> Maybe UsageRecord -> Maybe Text -> UsageRecordResult

-- | The UsageRecordResult Status indicates the status of an individual
--   UsageRecord processed by BatchMeterUsage.
--   
--   <ul>
--   <li><i>Success</i>- The UsageRecord was accepted and honored by
--   BatchMeterUsage.</li>
--   <li><i>CustomerNotSubscribed</i>- The CustomerIdentifier specified is
--   not subscribed to your product. The UsageRecord was not honored.
--   Future UsageRecords for this customer will fail until the customer
--   subscribes to your product.</li>
--   <li><i>DuplicateRecord</i>- Indicates that the UsageRecord was invalid
--   and not honored. A previously metered UsageRecord had the same
--   customer, dimension, and time, but a different quantity.</li>
--   </ul>
[$sel:status:UsageRecordResult'] :: UsageRecordResult -> Maybe UsageRecordResultStatus

-- | The UsageRecord that was part of the BatchMeterUsage request.
[$sel:usageRecord:UsageRecordResult'] :: UsageRecordResult -> Maybe UsageRecord

-- | The MeteringRecordId is a unique identifier for this metering event.
[$sel:meteringRecordId:UsageRecordResult'] :: UsageRecordResult -> Maybe Text

-- | Create a value of <a>UsageRecordResult</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:UsageRecordResult'</a>, <a>usageRecordResult_status</a>
--   - The UsageRecordResult Status indicates the status of an individual
--   UsageRecord processed by BatchMeterUsage.
--   
--   <ul>
--   <li><i>Success</i>- The UsageRecord was accepted and honored by
--   BatchMeterUsage.</li>
--   <li><i>CustomerNotSubscribed</i>- The CustomerIdentifier specified is
--   not subscribed to your product. The UsageRecord was not honored.
--   Future UsageRecords for this customer will fail until the customer
--   subscribes to your product.</li>
--   <li><i>DuplicateRecord</i>- Indicates that the UsageRecord was invalid
--   and not honored. A previously metered UsageRecord had the same
--   customer, dimension, and time, but a different quantity.</li>
--   </ul>
--   
--   <a>$sel:usageRecord:UsageRecordResult'</a>,
--   <a>usageRecordResult_usageRecord</a> - The UsageRecord that was part
--   of the BatchMeterUsage request.
--   
--   <a>$sel:meteringRecordId:UsageRecordResult'</a>,
--   <a>usageRecordResult_meteringRecordId</a> - The MeteringRecordId is a
--   unique identifier for this metering event.
newUsageRecordResult :: UsageRecordResult

-- | The UsageRecordResult Status indicates the status of an individual
--   UsageRecord processed by BatchMeterUsage.
--   
--   <ul>
--   <li><i>Success</i>- The UsageRecord was accepted and honored by
--   BatchMeterUsage.</li>
--   <li><i>CustomerNotSubscribed</i>- The CustomerIdentifier specified is
--   not subscribed to your product. The UsageRecord was not honored.
--   Future UsageRecords for this customer will fail until the customer
--   subscribes to your product.</li>
--   <li><i>DuplicateRecord</i>- Indicates that the UsageRecord was invalid
--   and not honored. A previously metered UsageRecord had the same
--   customer, dimension, and time, but a different quantity.</li>
--   </ul>
usageRecordResult_status :: Lens' UsageRecordResult (Maybe UsageRecordResultStatus)

-- | The UsageRecord that was part of the BatchMeterUsage request.
usageRecordResult_usageRecord :: Lens' UsageRecordResult (Maybe UsageRecord)

-- | The MeteringRecordId is a unique identifier for this metering event.
usageRecordResult_meteringRecordId :: Lens' UsageRecordResult (Maybe Text)


-- | ResolveCustomer is called by a SaaS application during the
--   registration process. When a buyer visits your website during the
--   registration process, the buyer submits a registration token through
--   their browser. The registration token is resolved through this API to
--   obtain a CustomerIdentifier and product code.
module Amazonka.MarketplaceMetering.ResolveCustomer

-- | Contains input to the ResolveCustomer operation.
--   
--   <i>See:</i> <a>newResolveCustomer</a> smart constructor.
data ResolveCustomer
ResolveCustomer' :: Text -> ResolveCustomer

-- | When a buyer visits your website during the registration process, the
--   buyer submits a registration token through the browser. The
--   registration token is resolved to obtain a CustomerIdentifier and
--   product code.
[$sel:registrationToken:ResolveCustomer'] :: ResolveCustomer -> Text

-- | Create a value of <a>ResolveCustomer</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registrationToken:ResolveCustomer'</a>,
--   <a>resolveCustomer_registrationToken</a> - When a buyer visits your
--   website during the registration process, the buyer submits a
--   registration token through the browser. The registration token is
--   resolved to obtain a CustomerIdentifier and product code.
newResolveCustomer :: Text -> ResolveCustomer

-- | When a buyer visits your website during the registration process, the
--   buyer submits a registration token through the browser. The
--   registration token is resolved to obtain a CustomerIdentifier and
--   product code.
resolveCustomer_registrationToken :: Lens' ResolveCustomer Text

-- | The result of the ResolveCustomer operation. Contains the
--   CustomerIdentifier and product code.
--   
--   <i>See:</i> <a>newResolveCustomerResponse</a> smart constructor.
data ResolveCustomerResponse
ResolveCustomerResponse' :: Maybe Text -> Maybe Text -> Int -> ResolveCustomerResponse

-- | The CustomerIdentifier is used to identify an individual customer in
--   your application. Calls to BatchMeterUsage require CustomerIdentifiers
--   for each UsageRecord.
[$sel:customerIdentifier:ResolveCustomerResponse'] :: ResolveCustomerResponse -> Maybe Text

-- | The product code is returned to confirm that the buyer is registering
--   for your product. Subsequent BatchMeterUsage calls should be made
--   using this product code.
[$sel:productCode:ResolveCustomerResponse'] :: ResolveCustomerResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:ResolveCustomerResponse'] :: ResolveCustomerResponse -> Int

-- | Create a value of <a>ResolveCustomerResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:customerIdentifier:ResolveCustomerResponse'</a>,
--   <a>resolveCustomerResponse_customerIdentifier</a> - The
--   CustomerIdentifier is used to identify an individual customer in your
--   application. Calls to BatchMeterUsage require CustomerIdentifiers for
--   each UsageRecord.
--   
--   <a>$sel:productCode:ResolveCustomerResponse'</a>,
--   <a>resolveCustomerResponse_productCode</a> - The product code is
--   returned to confirm that the buyer is registering for your product.
--   Subsequent BatchMeterUsage calls should be made using this product
--   code.
--   
--   <a>$sel:httpStatus:ResolveCustomerResponse'</a>,
--   <a>resolveCustomerResponse_httpStatus</a> - The response's http status
--   code.
newResolveCustomerResponse :: Int -> ResolveCustomerResponse

-- | The CustomerIdentifier is used to identify an individual customer in
--   your application. Calls to BatchMeterUsage require CustomerIdentifiers
--   for each UsageRecord.
resolveCustomerResponse_customerIdentifier :: Lens' ResolveCustomerResponse (Maybe Text)

-- | The product code is returned to confirm that the buyer is registering
--   for your product. Subsequent BatchMeterUsage calls should be made
--   using this product code.
resolveCustomerResponse_productCode :: Lens' ResolveCustomerResponse (Maybe Text)

-- | The response's http status code.
resolveCustomerResponse_httpStatus :: Lens' ResolveCustomerResponse Int
instance GHC.Generics.Generic Amazonka.MarketplaceMetering.ResolveCustomer.ResolveCustomer
instance GHC.Show.Show Amazonka.MarketplaceMetering.ResolveCustomer.ResolveCustomer
instance GHC.Read.Read Amazonka.MarketplaceMetering.ResolveCustomer.ResolveCustomer
instance GHC.Classes.Eq Amazonka.MarketplaceMetering.ResolveCustomer.ResolveCustomer
instance GHC.Generics.Generic Amazonka.MarketplaceMetering.ResolveCustomer.ResolveCustomerResponse
instance GHC.Show.Show Amazonka.MarketplaceMetering.ResolveCustomer.ResolveCustomerResponse
instance GHC.Read.Read Amazonka.MarketplaceMetering.ResolveCustomer.ResolveCustomerResponse
instance GHC.Classes.Eq Amazonka.MarketplaceMetering.ResolveCustomer.ResolveCustomerResponse
instance Amazonka.Types.AWSRequest Amazonka.MarketplaceMetering.ResolveCustomer.ResolveCustomer
instance Control.DeepSeq.NFData Amazonka.MarketplaceMetering.ResolveCustomer.ResolveCustomerResponse
instance Data.Hashable.Class.Hashable Amazonka.MarketplaceMetering.ResolveCustomer.ResolveCustomer
instance Control.DeepSeq.NFData Amazonka.MarketplaceMetering.ResolveCustomer.ResolveCustomer
instance Amazonka.Data.Headers.ToHeaders Amazonka.MarketplaceMetering.ResolveCustomer.ResolveCustomer
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MarketplaceMetering.ResolveCustomer.ResolveCustomer
instance Amazonka.Data.Path.ToPath Amazonka.MarketplaceMetering.ResolveCustomer.ResolveCustomer
instance Amazonka.Data.Query.ToQuery Amazonka.MarketplaceMetering.ResolveCustomer.ResolveCustomer


-- | Paid container software products sold through AWS Marketplace must
--   integrate with the AWS Marketplace Metering Service and call the
--   RegisterUsage operation for software entitlement and metering. Free
--   and BYOL products for Amazon ECS or Amazon EKS aren't required to call
--   RegisterUsage, but you may choose to do so if you would like to
--   receive usage data in your seller reports. The sections below explain
--   the behavior of RegisterUsage. RegisterUsage performs two primary
--   functions: metering and entitlement.
--   
--   <ul>
--   <li><i>Entitlement</i>: RegisterUsage allows you to verify that the
--   customer running your paid software is subscribed to your product on
--   AWS Marketplace, enabling you to guard against unauthorized use. Your
--   container image that integrates with RegisterUsage is only required to
--   guard against unauthorized use at container startup, as such a
--   CustomerNotSubscribedException/PlatformNotSupportedException will only
--   be thrown on the initial call to RegisterUsage. Subsequent calls from
--   the same Amazon ECS task instance (e.g. task-id) or Amazon EKS pod
--   will not throw a CustomerNotSubscribedException, even if the customer
--   unsubscribes while the Amazon ECS task or Amazon EKS pod is still
--   running.</li>
--   <li><i>Metering</i>: RegisterUsage meters software use per ECS task,
--   per hour, or per pod for Amazon EKS with usage prorated to the second.
--   A minimum of 1 minute of usage applies to tasks that are short lived.
--   For example, if a customer has a 10 node Amazon ECS or Amazon EKS
--   cluster and a service configured as a Daemon Set, then Amazon ECS or
--   Amazon EKS will launch a task on all 10 cluster nodes and the customer
--   will be charged: (10 * hourly_rate). Metering for software use is
--   automatically handled by the AWS Marketplace Metering Control Plane --
--   your software is not required to perform any metering specific
--   actions, other than call RegisterUsage once for metering of software
--   use to commence. The AWS Marketplace Metering Control Plane will also
--   continue to bill customers for running ECS tasks and Amazon EKS pods,
--   regardless of the customers subscription state, removing the need for
--   your software to perform entitlement checks at runtime.</li>
--   </ul>
module Amazonka.MarketplaceMetering.RegisterUsage

-- | <i>See:</i> <a>newRegisterUsage</a> smart constructor.
data RegisterUsage
RegisterUsage' :: Maybe Text -> Text -> Natural -> RegisterUsage

-- | (Optional) To scope down the registration to a specific running
--   software instance and guard against replay attacks.
[$sel:nonce:RegisterUsage'] :: RegisterUsage -> Maybe Text

-- | Product code is used to uniquely identify a product in AWS
--   Marketplace. The product code should be the same as the one used
--   during the publishing of a new product.
[$sel:productCode:RegisterUsage'] :: RegisterUsage -> Text

-- | Public Key Version provided by AWS Marketplace
[$sel:publicKeyVersion:RegisterUsage'] :: RegisterUsage -> Natural

-- | Create a value of <a>RegisterUsage</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nonce:RegisterUsage'</a>, <a>registerUsage_nonce</a> -
--   (Optional) To scope down the registration to a specific running
--   software instance and guard against replay attacks.
--   
--   <a>$sel:productCode:RegisterUsage'</a>,
--   <a>registerUsage_productCode</a> - Product code is used to uniquely
--   identify a product in AWS Marketplace. The product code should be the
--   same as the one used during the publishing of a new product.
--   
--   <a>$sel:publicKeyVersion:RegisterUsage'</a>,
--   <a>registerUsage_publicKeyVersion</a> - Public Key Version provided by
--   AWS Marketplace
newRegisterUsage :: Text -> Natural -> RegisterUsage

-- | (Optional) To scope down the registration to a specific running
--   software instance and guard against replay attacks.
registerUsage_nonce :: Lens' RegisterUsage (Maybe Text)

-- | Product code is used to uniquely identify a product in AWS
--   Marketplace. The product code should be the same as the one used
--   during the publishing of a new product.
registerUsage_productCode :: Lens' RegisterUsage Text

-- | Public Key Version provided by AWS Marketplace
registerUsage_publicKeyVersion :: Lens' RegisterUsage Natural

-- | <i>See:</i> <a>newRegisterUsageResponse</a> smart constructor.
data RegisterUsageResponse
RegisterUsageResponse' :: Maybe Text -> Maybe POSIX -> Int -> RegisterUsageResponse

-- | JWT Token
[$sel:signature:RegisterUsageResponse'] :: RegisterUsageResponse -> Maybe Text

-- | (Optional) Only included when public key version has expired
[$sel:publicKeyRotationTimestamp:RegisterUsageResponse'] :: RegisterUsageResponse -> Maybe POSIX

-- | The response's http status code.
[$sel:httpStatus:RegisterUsageResponse'] :: RegisterUsageResponse -> Int

-- | Create a value of <a>RegisterUsageResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:signature:RegisterUsageResponse'</a>,
--   <a>registerUsageResponse_signature</a> - JWT Token
--   
--   <a>$sel:publicKeyRotationTimestamp:RegisterUsageResponse'</a>,
--   <a>registerUsageResponse_publicKeyRotationTimestamp</a> - (Optional)
--   Only included when public key version has expired
--   
--   <a>$sel:httpStatus:RegisterUsageResponse'</a>,
--   <a>registerUsageResponse_httpStatus</a> - The response's http status
--   code.
newRegisterUsageResponse :: Int -> RegisterUsageResponse

-- | JWT Token
registerUsageResponse_signature :: Lens' RegisterUsageResponse (Maybe Text)

-- | (Optional) Only included when public key version has expired
registerUsageResponse_publicKeyRotationTimestamp :: Lens' RegisterUsageResponse (Maybe UTCTime)

-- | The response's http status code.
registerUsageResponse_httpStatus :: Lens' RegisterUsageResponse Int
instance GHC.Generics.Generic Amazonka.MarketplaceMetering.RegisterUsage.RegisterUsage
instance GHC.Show.Show Amazonka.MarketplaceMetering.RegisterUsage.RegisterUsage
instance GHC.Read.Read Amazonka.MarketplaceMetering.RegisterUsage.RegisterUsage
instance GHC.Classes.Eq Amazonka.MarketplaceMetering.RegisterUsage.RegisterUsage
instance GHC.Generics.Generic Amazonka.MarketplaceMetering.RegisterUsage.RegisterUsageResponse
instance GHC.Show.Show Amazonka.MarketplaceMetering.RegisterUsage.RegisterUsageResponse
instance GHC.Read.Read Amazonka.MarketplaceMetering.RegisterUsage.RegisterUsageResponse
instance GHC.Classes.Eq Amazonka.MarketplaceMetering.RegisterUsage.RegisterUsageResponse
instance Amazonka.Types.AWSRequest Amazonka.MarketplaceMetering.RegisterUsage.RegisterUsage
instance Control.DeepSeq.NFData Amazonka.MarketplaceMetering.RegisterUsage.RegisterUsageResponse
instance Data.Hashable.Class.Hashable Amazonka.MarketplaceMetering.RegisterUsage.RegisterUsage
instance Control.DeepSeq.NFData Amazonka.MarketplaceMetering.RegisterUsage.RegisterUsage
instance Amazonka.Data.Headers.ToHeaders Amazonka.MarketplaceMetering.RegisterUsage.RegisterUsage
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MarketplaceMetering.RegisterUsage.RegisterUsage
instance Amazonka.Data.Path.ToPath Amazonka.MarketplaceMetering.RegisterUsage.RegisterUsage
instance Amazonka.Data.Query.ToQuery Amazonka.MarketplaceMetering.RegisterUsage.RegisterUsage


-- | API to emit metering records. For identical requests, the API is
--   idempotent. It simply returns the metering record ID.
--   
--   MeterUsage is authenticated on the buyer's AWS account using
--   credentials from the EC2 instance, ECS task, or EKS pod.
--   
--   MeterUsage can optionally include multiple usage allocations, to
--   provide customers with usage data split into buckets by tags that you
--   define (or allow the customer to define).
module Amazonka.MarketplaceMetering.MeterUsage

-- | <i>See:</i> <a>newMeterUsage</a> smart constructor.
data MeterUsage
MeterUsage' :: Maybe Natural -> Maybe (NonEmpty UsageAllocation) -> Maybe Bool -> Text -> POSIX -> Text -> MeterUsage

-- | Consumption value for the hour. Defaults to <tt>0</tt> if not
--   specified.
[$sel:usageQuantity:MeterUsage'] :: MeterUsage -> Maybe Natural

-- | The set of UsageAllocations to submit.
--   
--   The sum of all UsageAllocation quantities must equal the UsageQuantity
--   of the MeterUsage request, and each UsageAllocation must have a unique
--   set of tags (include no tags).
[$sel:usageAllocations:MeterUsage'] :: MeterUsage -> Maybe (NonEmpty UsageAllocation)

-- | Checks whether you have the permissions required for the action, but
--   does not make the request. If you have the permissions, the request
--   returns DryRunOperation; otherwise, it returns UnauthorizedException.
--   Defaults to <tt>false</tt> if not specified.
[$sel:dryRun:MeterUsage'] :: MeterUsage -> Maybe Bool

-- | Product code is used to uniquely identify a product in AWS
--   Marketplace. The product code should be the same as the one used
--   during the publishing of a new product.
[$sel:productCode:MeterUsage'] :: MeterUsage -> Text

-- | Timestamp, in UTC, for which the usage is being reported. Your
--   application can meter usage for up to one hour in the past. Make sure
--   the timestamp value is not before the start of the software usage.
[$sel:timestamp:MeterUsage'] :: MeterUsage -> POSIX

-- | It will be one of the fcp dimension name provided during the
--   publishing of the product.
[$sel:usageDimension:MeterUsage'] :: MeterUsage -> Text

-- | Create a value of <a>MeterUsage</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:usageQuantity:MeterUsage'</a>, <a>meterUsage_usageQuantity</a>
--   - Consumption value for the hour. Defaults to <tt>0</tt> if not
--   specified.
--   
--   <a>$sel:usageAllocations:MeterUsage'</a>,
--   <a>meterUsage_usageAllocations</a> - The set of UsageAllocations to
--   submit.
--   
--   The sum of all UsageAllocation quantities must equal the UsageQuantity
--   of the MeterUsage request, and each UsageAllocation must have a unique
--   set of tags (include no tags).
--   
--   <a>$sel:dryRun:MeterUsage'</a>, <a>meterUsage_dryRun</a> - Checks
--   whether you have the permissions required for the action, but does not
--   make the request. If you have the permissions, the request returns
--   DryRunOperation; otherwise, it returns UnauthorizedException. Defaults
--   to <tt>false</tt> if not specified.
--   
--   <a>$sel:productCode:MeterUsage'</a>, <a>meterUsage_productCode</a> -
--   Product code is used to uniquely identify a product in AWS
--   Marketplace. The product code should be the same as the one used
--   during the publishing of a new product.
--   
--   <a>$sel:timestamp:MeterUsage'</a>, <a>meterUsage_timestamp</a> -
--   Timestamp, in UTC, for which the usage is being reported. Your
--   application can meter usage for up to one hour in the past. Make sure
--   the timestamp value is not before the start of the software usage.
--   
--   <a>$sel:usageDimension:MeterUsage'</a>,
--   <a>meterUsage_usageDimension</a> - It will be one of the fcp dimension
--   name provided during the publishing of the product.
newMeterUsage :: Text -> UTCTime -> Text -> MeterUsage

-- | Consumption value for the hour. Defaults to <tt>0</tt> if not
--   specified.
meterUsage_usageQuantity :: Lens' MeterUsage (Maybe Natural)

-- | The set of UsageAllocations to submit.
--   
--   The sum of all UsageAllocation quantities must equal the UsageQuantity
--   of the MeterUsage request, and each UsageAllocation must have a unique
--   set of tags (include no tags).
meterUsage_usageAllocations :: Lens' MeterUsage (Maybe (NonEmpty UsageAllocation))

-- | Checks whether you have the permissions required for the action, but
--   does not make the request. If you have the permissions, the request
--   returns DryRunOperation; otherwise, it returns UnauthorizedException.
--   Defaults to <tt>false</tt> if not specified.
meterUsage_dryRun :: Lens' MeterUsage (Maybe Bool)

-- | Product code is used to uniquely identify a product in AWS
--   Marketplace. The product code should be the same as the one used
--   during the publishing of a new product.
meterUsage_productCode :: Lens' MeterUsage Text

-- | Timestamp, in UTC, for which the usage is being reported. Your
--   application can meter usage for up to one hour in the past. Make sure
--   the timestamp value is not before the start of the software usage.
meterUsage_timestamp :: Lens' MeterUsage UTCTime

-- | It will be one of the fcp dimension name provided during the
--   publishing of the product.
meterUsage_usageDimension :: Lens' MeterUsage Text

-- | <i>See:</i> <a>newMeterUsageResponse</a> smart constructor.
data MeterUsageResponse
MeterUsageResponse' :: Maybe Text -> Int -> MeterUsageResponse

-- | Metering record id.
[$sel:meteringRecordId:MeterUsageResponse'] :: MeterUsageResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:MeterUsageResponse'] :: MeterUsageResponse -> Int

-- | Create a value of <a>MeterUsageResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:meteringRecordId:MeterUsageResponse'</a>,
--   <a>meterUsageResponse_meteringRecordId</a> - Metering record id.
--   
--   <a>$sel:httpStatus:MeterUsageResponse'</a>,
--   <a>meterUsageResponse_httpStatus</a> - The response's http status
--   code.
newMeterUsageResponse :: Int -> MeterUsageResponse

-- | Metering record id.
meterUsageResponse_meteringRecordId :: Lens' MeterUsageResponse (Maybe Text)

-- | The response's http status code.
meterUsageResponse_httpStatus :: Lens' MeterUsageResponse Int
instance GHC.Generics.Generic Amazonka.MarketplaceMetering.MeterUsage.MeterUsage
instance GHC.Show.Show Amazonka.MarketplaceMetering.MeterUsage.MeterUsage
instance GHC.Read.Read Amazonka.MarketplaceMetering.MeterUsage.MeterUsage
instance GHC.Classes.Eq Amazonka.MarketplaceMetering.MeterUsage.MeterUsage
instance GHC.Generics.Generic Amazonka.MarketplaceMetering.MeterUsage.MeterUsageResponse
instance GHC.Show.Show Amazonka.MarketplaceMetering.MeterUsage.MeterUsageResponse
instance GHC.Read.Read Amazonka.MarketplaceMetering.MeterUsage.MeterUsageResponse
instance GHC.Classes.Eq Amazonka.MarketplaceMetering.MeterUsage.MeterUsageResponse
instance Amazonka.Types.AWSRequest Amazonka.MarketplaceMetering.MeterUsage.MeterUsage
instance Control.DeepSeq.NFData Amazonka.MarketplaceMetering.MeterUsage.MeterUsageResponse
instance Data.Hashable.Class.Hashable Amazonka.MarketplaceMetering.MeterUsage.MeterUsage
instance Control.DeepSeq.NFData Amazonka.MarketplaceMetering.MeterUsage.MeterUsage
instance Amazonka.Data.Headers.ToHeaders Amazonka.MarketplaceMetering.MeterUsage.MeterUsage
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MarketplaceMetering.MeterUsage.MeterUsage
instance Amazonka.Data.Path.ToPath Amazonka.MarketplaceMetering.MeterUsage.MeterUsage
instance Amazonka.Data.Query.ToQuery Amazonka.MarketplaceMetering.MeterUsage.MeterUsage


-- | BatchMeterUsage is called from a SaaS application listed on the AWS
--   Marketplace to post metering records for a set of customers.
--   
--   For identical requests, the API is idempotent; requests can be retried
--   with the same records or a subset of the input records.
--   
--   Every request to BatchMeterUsage is for one product. If you need to
--   meter usage for multiple products, you must make multiple calls to
--   BatchMeterUsage.
--   
--   BatchMeterUsage can process up to 25 UsageRecords at a time.
--   
--   A UsageRecord can optionally include multiple usage allocations, to
--   provide customers with usagedata split into buckets by tags that you
--   define (or allow the customer to define).
--   
--   BatchMeterUsage requests must be less than 1MB in size.
module Amazonka.MarketplaceMetering.BatchMeterUsage

-- | A BatchMeterUsageRequest contains UsageRecords, which indicate
--   quantities of usage within your application.
--   
--   <i>See:</i> <a>newBatchMeterUsage</a> smart constructor.
data BatchMeterUsage
BatchMeterUsage' :: [UsageRecord] -> Text -> BatchMeterUsage

-- | The set of UsageRecords to submit. BatchMeterUsage accepts up to 25
--   UsageRecords at a time.
[$sel:usageRecords:BatchMeterUsage'] :: BatchMeterUsage -> [UsageRecord]

-- | Product code is used to uniquely identify a product in AWS
--   Marketplace. The product code should be the same as the one used
--   during the publishing of a new product.
[$sel:productCode:BatchMeterUsage'] :: BatchMeterUsage -> Text

-- | Create a value of <a>BatchMeterUsage</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:usageRecords:BatchMeterUsage'</a>,
--   <a>batchMeterUsage_usageRecords</a> - The set of UsageRecords to
--   submit. BatchMeterUsage accepts up to 25 UsageRecords at a time.
--   
--   <a>$sel:productCode:BatchMeterUsage'</a>,
--   <a>batchMeterUsage_productCode</a> - Product code is used to uniquely
--   identify a product in AWS Marketplace. The product code should be the
--   same as the one used during the publishing of a new product.
newBatchMeterUsage :: Text -> BatchMeterUsage

-- | The set of UsageRecords to submit. BatchMeterUsage accepts up to 25
--   UsageRecords at a time.
batchMeterUsage_usageRecords :: Lens' BatchMeterUsage [UsageRecord]

-- | Product code is used to uniquely identify a product in AWS
--   Marketplace. The product code should be the same as the one used
--   during the publishing of a new product.
batchMeterUsage_productCode :: Lens' BatchMeterUsage Text

-- | Contains the UsageRecords processed by BatchMeterUsage and any records
--   that have failed due to transient error.
--   
--   <i>See:</i> <a>newBatchMeterUsageResponse</a> smart constructor.
data BatchMeterUsageResponse
BatchMeterUsageResponse' :: Maybe [UsageRecordResult] -> Maybe [UsageRecord] -> Int -> BatchMeterUsageResponse

-- | Contains all UsageRecords processed by BatchMeterUsage. These records
--   were either honored by AWS Marketplace Metering Service or were
--   invalid.
[$sel:results:BatchMeterUsageResponse'] :: BatchMeterUsageResponse -> Maybe [UsageRecordResult]

-- | Contains all UsageRecords that were not processed by BatchMeterUsage.
--   This is a list of UsageRecords. You can retry the failed request by
--   making another BatchMeterUsage call with this list as input in the
--   BatchMeterUsageRequest.
[$sel:unprocessedRecords:BatchMeterUsageResponse'] :: BatchMeterUsageResponse -> Maybe [UsageRecord]

-- | The response's http status code.
[$sel:httpStatus:BatchMeterUsageResponse'] :: BatchMeterUsageResponse -> Int

-- | Create a value of <a>BatchMeterUsageResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:results:BatchMeterUsageResponse'</a>,
--   <a>batchMeterUsageResponse_results</a> - Contains all UsageRecords
--   processed by BatchMeterUsage. These records were either honored by AWS
--   Marketplace Metering Service or were invalid.
--   
--   <a>$sel:unprocessedRecords:BatchMeterUsageResponse'</a>,
--   <a>batchMeterUsageResponse_unprocessedRecords</a> - Contains all
--   UsageRecords that were not processed by BatchMeterUsage. This is a
--   list of UsageRecords. You can retry the failed request by making
--   another BatchMeterUsage call with this list as input in the
--   BatchMeterUsageRequest.
--   
--   <a>$sel:httpStatus:BatchMeterUsageResponse'</a>,
--   <a>batchMeterUsageResponse_httpStatus</a> - The response's http status
--   code.
newBatchMeterUsageResponse :: Int -> BatchMeterUsageResponse

-- | Contains all UsageRecords processed by BatchMeterUsage. These records
--   were either honored by AWS Marketplace Metering Service or were
--   invalid.
batchMeterUsageResponse_results :: Lens' BatchMeterUsageResponse (Maybe [UsageRecordResult])

-- | Contains all UsageRecords that were not processed by BatchMeterUsage.
--   This is a list of UsageRecords. You can retry the failed request by
--   making another BatchMeterUsage call with this list as input in the
--   BatchMeterUsageRequest.
batchMeterUsageResponse_unprocessedRecords :: Lens' BatchMeterUsageResponse (Maybe [UsageRecord])

-- | The response's http status code.
batchMeterUsageResponse_httpStatus :: Lens' BatchMeterUsageResponse Int
instance GHC.Generics.Generic Amazonka.MarketplaceMetering.BatchMeterUsage.BatchMeterUsage
instance GHC.Show.Show Amazonka.MarketplaceMetering.BatchMeterUsage.BatchMeterUsage
instance GHC.Read.Read Amazonka.MarketplaceMetering.BatchMeterUsage.BatchMeterUsage
instance GHC.Classes.Eq Amazonka.MarketplaceMetering.BatchMeterUsage.BatchMeterUsage
instance GHC.Generics.Generic Amazonka.MarketplaceMetering.BatchMeterUsage.BatchMeterUsageResponse
instance GHC.Show.Show Amazonka.MarketplaceMetering.BatchMeterUsage.BatchMeterUsageResponse
instance GHC.Read.Read Amazonka.MarketplaceMetering.BatchMeterUsage.BatchMeterUsageResponse
instance GHC.Classes.Eq Amazonka.MarketplaceMetering.BatchMeterUsage.BatchMeterUsageResponse
instance Amazonka.Types.AWSRequest Amazonka.MarketplaceMetering.BatchMeterUsage.BatchMeterUsage
instance Control.DeepSeq.NFData Amazonka.MarketplaceMetering.BatchMeterUsage.BatchMeterUsageResponse
instance Data.Hashable.Class.Hashable Amazonka.MarketplaceMetering.BatchMeterUsage.BatchMeterUsage
instance Control.DeepSeq.NFData Amazonka.MarketplaceMetering.BatchMeterUsage.BatchMeterUsage
instance Amazonka.Data.Headers.ToHeaders Amazonka.MarketplaceMetering.BatchMeterUsage.BatchMeterUsage
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MarketplaceMetering.BatchMeterUsage.BatchMeterUsage
instance Amazonka.Data.Path.ToPath Amazonka.MarketplaceMetering.BatchMeterUsage.BatchMeterUsage
instance Amazonka.Data.Query.ToQuery Amazonka.MarketplaceMetering.BatchMeterUsage.BatchMeterUsage


module Amazonka.MarketplaceMetering.Lens

-- | (Optional) To scope down the registration to a specific running
--   software instance and guard against replay attacks.
registerUsage_nonce :: Lens' RegisterUsage (Maybe Text)

-- | Product code is used to uniquely identify a product in AWS
--   Marketplace. The product code should be the same as the one used
--   during the publishing of a new product.
registerUsage_productCode :: Lens' RegisterUsage Text

-- | Public Key Version provided by AWS Marketplace
registerUsage_publicKeyVersion :: Lens' RegisterUsage Natural

-- | JWT Token
registerUsageResponse_signature :: Lens' RegisterUsageResponse (Maybe Text)

-- | (Optional) Only included when public key version has expired
registerUsageResponse_publicKeyRotationTimestamp :: Lens' RegisterUsageResponse (Maybe UTCTime)

-- | The response's http status code.
registerUsageResponse_httpStatus :: Lens' RegisterUsageResponse Int

-- | The set of UsageRecords to submit. BatchMeterUsage accepts up to 25
--   UsageRecords at a time.
batchMeterUsage_usageRecords :: Lens' BatchMeterUsage [UsageRecord]

-- | Product code is used to uniquely identify a product in AWS
--   Marketplace. The product code should be the same as the one used
--   during the publishing of a new product.
batchMeterUsage_productCode :: Lens' BatchMeterUsage Text

-- | Contains all UsageRecords processed by BatchMeterUsage. These records
--   were either honored by AWS Marketplace Metering Service or were
--   invalid.
batchMeterUsageResponse_results :: Lens' BatchMeterUsageResponse (Maybe [UsageRecordResult])

-- | Contains all UsageRecords that were not processed by BatchMeterUsage.
--   This is a list of UsageRecords. You can retry the failed request by
--   making another BatchMeterUsage call with this list as input in the
--   BatchMeterUsageRequest.
batchMeterUsageResponse_unprocessedRecords :: Lens' BatchMeterUsageResponse (Maybe [UsageRecord])

-- | The response's http status code.
batchMeterUsageResponse_httpStatus :: Lens' BatchMeterUsageResponse Int

-- | When a buyer visits your website during the registration process, the
--   buyer submits a registration token through the browser. The
--   registration token is resolved to obtain a CustomerIdentifier and
--   product code.
resolveCustomer_registrationToken :: Lens' ResolveCustomer Text

-- | The CustomerIdentifier is used to identify an individual customer in
--   your application. Calls to BatchMeterUsage require CustomerIdentifiers
--   for each UsageRecord.
resolveCustomerResponse_customerIdentifier :: Lens' ResolveCustomerResponse (Maybe Text)

-- | The product code is returned to confirm that the buyer is registering
--   for your product. Subsequent BatchMeterUsage calls should be made
--   using this product code.
resolveCustomerResponse_productCode :: Lens' ResolveCustomerResponse (Maybe Text)

-- | The response's http status code.
resolveCustomerResponse_httpStatus :: Lens' ResolveCustomerResponse Int

-- | Consumption value for the hour. Defaults to <tt>0</tt> if not
--   specified.
meterUsage_usageQuantity :: Lens' MeterUsage (Maybe Natural)

-- | The set of UsageAllocations to submit.
--   
--   The sum of all UsageAllocation quantities must equal the UsageQuantity
--   of the MeterUsage request, and each UsageAllocation must have a unique
--   set of tags (include no tags).
meterUsage_usageAllocations :: Lens' MeterUsage (Maybe (NonEmpty UsageAllocation))

-- | Checks whether you have the permissions required for the action, but
--   does not make the request. If you have the permissions, the request
--   returns DryRunOperation; otherwise, it returns UnauthorizedException.
--   Defaults to <tt>false</tt> if not specified.
meterUsage_dryRun :: Lens' MeterUsage (Maybe Bool)

-- | Product code is used to uniquely identify a product in AWS
--   Marketplace. The product code should be the same as the one used
--   during the publishing of a new product.
meterUsage_productCode :: Lens' MeterUsage Text

-- | Timestamp, in UTC, for which the usage is being reported. Your
--   application can meter usage for up to one hour in the past. Make sure
--   the timestamp value is not before the start of the software usage.
meterUsage_timestamp :: Lens' MeterUsage UTCTime

-- | It will be one of the fcp dimension name provided during the
--   publishing of the product.
meterUsage_usageDimension :: Lens' MeterUsage Text

-- | Metering record id.
meterUsageResponse_meteringRecordId :: Lens' MeterUsageResponse (Maybe Text)

-- | The response's http status code.
meterUsageResponse_httpStatus :: Lens' MeterUsageResponse Int

-- | One part of a key-value pair that makes up a tag. A key is a label
--   that acts like a category for the specific tag values.
tag_key :: Lens' Tag Text

-- | One part of a key-value pair that makes up a tag. A value acts as a
--   descriptor within a tag category (key). The value can be empty or
--   null.
tag_value :: Lens' Tag Text

-- | The set of tags that define the bucket of usage. For the bucket of
--   items with no tags, this parameter can be left out.
usageAllocation_tags :: Lens' UsageAllocation (Maybe (NonEmpty Tag))

-- | The total quantity allocated to this bucket of usage.
usageAllocation_allocatedUsageQuantity :: Lens' UsageAllocation Natural

-- | The quantity of usage consumed by the customer for the given dimension
--   and time. Defaults to <tt>0</tt> if not specified.
usageRecord_quantity :: Lens' UsageRecord (Maybe Natural)

-- | The set of UsageAllocations to submit. The sum of all UsageAllocation
--   quantities must equal the Quantity of the UsageRecord.
usageRecord_usageAllocations :: Lens' UsageRecord (Maybe (NonEmpty UsageAllocation))

-- | Timestamp, in UTC, for which the usage is being reported.
--   
--   Your application can meter usage for up to one hour in the past. Make
--   sure the timestamp value is not before the start of the software
--   usage.
usageRecord_timestamp :: Lens' UsageRecord UTCTime

-- | The CustomerIdentifier is obtained through the ResolveCustomer
--   operation and represents an individual buyer in your application.
usageRecord_customerIdentifier :: Lens' UsageRecord Text

-- | During the process of registering a product on AWS Marketplace, up to
--   eight dimensions are specified. These represent different units of
--   value in your application.
usageRecord_dimension :: Lens' UsageRecord Text

-- | The UsageRecordResult Status indicates the status of an individual
--   UsageRecord processed by BatchMeterUsage.
--   
--   <ul>
--   <li><i>Success</i>- The UsageRecord was accepted and honored by
--   BatchMeterUsage.</li>
--   <li><i>CustomerNotSubscribed</i>- The CustomerIdentifier specified is
--   not subscribed to your product. The UsageRecord was not honored.
--   Future UsageRecords for this customer will fail until the customer
--   subscribes to your product.</li>
--   <li><i>DuplicateRecord</i>- Indicates that the UsageRecord was invalid
--   and not honored. A previously metered UsageRecord had the same
--   customer, dimension, and time, but a different quantity.</li>
--   </ul>
usageRecordResult_status :: Lens' UsageRecordResult (Maybe UsageRecordResultStatus)

-- | The UsageRecord that was part of the BatchMeterUsage request.
usageRecordResult_usageRecord :: Lens' UsageRecordResult (Maybe UsageRecord)

-- | The MeteringRecordId is a unique identifier for this metering event.
usageRecordResult_meteringRecordId :: Lens' UsageRecordResult (Maybe Text)


module Amazonka.MarketplaceMetering.Waiters


-- | Derived from API version <tt>2016-01-14</tt> of the AWS service
--   descriptions, licensed under Apache 2.0.
--   
--   AWS Marketplace Metering Service
--   
--   This reference provides descriptions of the low-level AWS Marketplace
--   Metering Service API.
--   
--   AWS Marketplace sellers can use this API to submit usage data for
--   custom usage dimensions.
--   
--   For information on the permissions you need to use this API, see
--   <a>AWS Marketing metering and entitlement API permissions</a> in the
--   <i>AWS Marketplace Seller Guide.</i>
--   
--   <b>Submitting Metering Records</b>
--   
--   <ul>
--   <li><i>MeterUsage</i>- Submits the metering record for a Marketplace
--   product. MeterUsage is called from an EC2 instance or a container
--   running on EKS or ECS.</li>
--   <li><i>BatchMeterUsage</i>- Submits the metering record for a set of
--   customers. BatchMeterUsage is called from a software-as-a-service
--   (SaaS) application.</li>
--   </ul>
--   
--   <b>Accepting New Customers</b>
--   
--   <ul>
--   <li><i>ResolveCustomer</i>- Called by a SaaS application during the
--   registration process. When a buyer visits your website during the
--   registration process, the buyer submits a Registration Token through
--   the browser. The Registration Token is resolved through this API to
--   obtain a CustomerIdentifier and Product Code.</li>
--   </ul>
--   
--   <b>Entitlement and Metering for Paid Container Products</b>
--   
--   <ul>
--   <li>Paid container software products sold through AWS Marketplace must
--   integrate with the AWS Marketplace Metering Service and call the
--   RegisterUsage operation for software entitlement and metering. Free
--   and BYOL products for Amazon ECS or Amazon EKS aren't required to call
--   RegisterUsage, but you can do so if you want to receive usage data in
--   your seller reports. For more information on using the RegisterUsage
--   operation, see <a>Container-Based Products</a>.</li>
--   </ul>
--   
--   BatchMeterUsage API calls are captured by AWS CloudTrail. You can use
--   Cloudtrail to verify that the SaaS metering records that you sent are
--   accurate by searching for records with the eventName of
--   BatchMeterUsage. You can also use CloudTrail to audit records over
--   time. For more information, see the
--   <i>&lt;http:</i><i>docs.aws.amazon.com</i>awscloudtrail<i>latest</i>userguide<i>cloudtrail-concepts.html
--   AWS CloudTrail User Guide&gt;</i> .
module Amazonka.MarketplaceMetering

-- | API version <tt>2016-01-14</tt> of the Amazon Marketplace Metering SDK
--   configuration.
defaultService :: Service

-- | The tag is invalid, or the number of tags is greater than 5.
_InvalidTagException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The endpoint being called is in a AWS Region different from your EC2
--   instance, ECS task, or EKS pod. The Region of the Metering Service
--   endpoint and the AWS Region of the resource must match.
_InvalidEndpointRegionException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The product code passed does not match the product code used for
--   publishing the product.
_InvalidProductCodeException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The usage dimension does not match one of the UsageDimensions
--   associated with products.
_InvalidUsageDimensionException :: AsError a => Getting (First ServiceError) a ServiceError

-- | AWS Marketplace does not support metering usage from the underlying
--   platform. Currently, Amazon ECS, Amazon EKS, and AWS Fargate are
--   supported.
_PlatformNotSupportedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Exception thrown when the customer does not have a valid subscription
--   for the product.
_CustomerNotEntitledException :: AsError a => Getting (First ServiceError) a ServiceError

-- | A metering record has already been emitted by the same EC2 instance,
--   ECS task, or EKS pod for the given {usageDimension, timestamp} with a
--   different usageQuantity.
_DuplicateRequestException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The API is disabled in the Region.
_DisabledApiException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The timestamp value passed in the meterUsage() is out of allowed
--   range.
_TimestampOutOfBoundsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The calls to the API are throttled.
_ThrottlingException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Public Key version is invalid.
_InvalidPublicKeyVersionException :: AsError a => Getting (First ServiceError) a ServiceError

-- | An internal error has occurred. Retry your request. If the problem
--   persists, post a message with details on the AWS forums.
_InternalServiceErrorException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Registration token is invalid.
_InvalidTokenException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The usage allocation objects are invalid, or the number of allocations
--   is greater than 500 for a single usage record.
_InvalidUsageAllocationsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The submitted registration token has expired. This can happen if the
--   buyer's browser takes too long to redirect to your page, the buyer has
--   resubmitted the registration token, or your application has held on to
--   the registration token for too long. Your SaaS registration website
--   should redeem this token as soon as it is submitted by the buyer's
--   browser.
_ExpiredTokenException :: AsError a => Getting (First ServiceError) a ServiceError

-- | RegisterUsage must be called in the same AWS Region the ECS task was
--   launched in. This prevents a container from hardcoding a Region (e.g.
--   withRegion(“us-east-1”) when calling RegisterUsage.
_InvalidRegionException :: AsError a => Getting (First ServiceError) a ServiceError

-- | You have metered usage for a CustomerIdentifier that does not exist.
_InvalidCustomerIdentifierException :: AsError a => Getting (First ServiceError) a ServiceError

-- | <i>See:</i> <a>newRegisterUsage</a> smart constructor.
data RegisterUsage
RegisterUsage' :: Maybe Text -> Text -> Natural -> RegisterUsage

-- | Create a value of <a>RegisterUsage</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nonce:RegisterUsage'</a>, <a>registerUsage_nonce</a> -
--   (Optional) To scope down the registration to a specific running
--   software instance and guard against replay attacks.
--   
--   <a>$sel:productCode:RegisterUsage'</a>,
--   <a>registerUsage_productCode</a> - Product code is used to uniquely
--   identify a product in AWS Marketplace. The product code should be the
--   same as the one used during the publishing of a new product.
--   
--   <a>$sel:publicKeyVersion:RegisterUsage'</a>,
--   <a>registerUsage_publicKeyVersion</a> - Public Key Version provided by
--   AWS Marketplace
newRegisterUsage :: Text -> Natural -> RegisterUsage

-- | <i>See:</i> <a>newRegisterUsageResponse</a> smart constructor.
data RegisterUsageResponse
RegisterUsageResponse' :: Maybe Text -> Maybe POSIX -> Int -> RegisterUsageResponse

-- | Create a value of <a>RegisterUsageResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:signature:RegisterUsageResponse'</a>,
--   <a>registerUsageResponse_signature</a> - JWT Token
--   
--   <a>$sel:publicKeyRotationTimestamp:RegisterUsageResponse'</a>,
--   <a>registerUsageResponse_publicKeyRotationTimestamp</a> - (Optional)
--   Only included when public key version has expired
--   
--   <a>$sel:httpStatus:RegisterUsageResponse'</a>,
--   <a>registerUsageResponse_httpStatus</a> - The response's http status
--   code.
newRegisterUsageResponse :: Int -> RegisterUsageResponse

-- | A BatchMeterUsageRequest contains UsageRecords, which indicate
--   quantities of usage within your application.
--   
--   <i>See:</i> <a>newBatchMeterUsage</a> smart constructor.
data BatchMeterUsage
BatchMeterUsage' :: [UsageRecord] -> Text -> BatchMeterUsage

-- | Create a value of <a>BatchMeterUsage</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:usageRecords:BatchMeterUsage'</a>,
--   <a>batchMeterUsage_usageRecords</a> - The set of UsageRecords to
--   submit. BatchMeterUsage accepts up to 25 UsageRecords at a time.
--   
--   <a>$sel:productCode:BatchMeterUsage'</a>,
--   <a>batchMeterUsage_productCode</a> - Product code is used to uniquely
--   identify a product in AWS Marketplace. The product code should be the
--   same as the one used during the publishing of a new product.
newBatchMeterUsage :: Text -> BatchMeterUsage

-- | Contains the UsageRecords processed by BatchMeterUsage and any records
--   that have failed due to transient error.
--   
--   <i>See:</i> <a>newBatchMeterUsageResponse</a> smart constructor.
data BatchMeterUsageResponse
BatchMeterUsageResponse' :: Maybe [UsageRecordResult] -> Maybe [UsageRecord] -> Int -> BatchMeterUsageResponse

-- | Create a value of <a>BatchMeterUsageResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:results:BatchMeterUsageResponse'</a>,
--   <a>batchMeterUsageResponse_results</a> - Contains all UsageRecords
--   processed by BatchMeterUsage. These records were either honored by AWS
--   Marketplace Metering Service or were invalid.
--   
--   <a>$sel:unprocessedRecords:BatchMeterUsageResponse'</a>,
--   <a>batchMeterUsageResponse_unprocessedRecords</a> - Contains all
--   UsageRecords that were not processed by BatchMeterUsage. This is a
--   list of UsageRecords. You can retry the failed request by making
--   another BatchMeterUsage call with this list as input in the
--   BatchMeterUsageRequest.
--   
--   <a>$sel:httpStatus:BatchMeterUsageResponse'</a>,
--   <a>batchMeterUsageResponse_httpStatus</a> - The response's http status
--   code.
newBatchMeterUsageResponse :: Int -> BatchMeterUsageResponse

-- | Contains input to the ResolveCustomer operation.
--   
--   <i>See:</i> <a>newResolveCustomer</a> smart constructor.
data ResolveCustomer
ResolveCustomer' :: Text -> ResolveCustomer

-- | Create a value of <a>ResolveCustomer</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registrationToken:ResolveCustomer'</a>,
--   <a>resolveCustomer_registrationToken</a> - When a buyer visits your
--   website during the registration process, the buyer submits a
--   registration token through the browser. The registration token is
--   resolved to obtain a CustomerIdentifier and product code.
newResolveCustomer :: Text -> ResolveCustomer

-- | The result of the ResolveCustomer operation. Contains the
--   CustomerIdentifier and product code.
--   
--   <i>See:</i> <a>newResolveCustomerResponse</a> smart constructor.
data ResolveCustomerResponse
ResolveCustomerResponse' :: Maybe Text -> Maybe Text -> Int -> ResolveCustomerResponse

-- | Create a value of <a>ResolveCustomerResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:customerIdentifier:ResolveCustomerResponse'</a>,
--   <a>resolveCustomerResponse_customerIdentifier</a> - The
--   CustomerIdentifier is used to identify an individual customer in your
--   application. Calls to BatchMeterUsage require CustomerIdentifiers for
--   each UsageRecord.
--   
--   <a>$sel:productCode:ResolveCustomerResponse'</a>,
--   <a>resolveCustomerResponse_productCode</a> - The product code is
--   returned to confirm that the buyer is registering for your product.
--   Subsequent BatchMeterUsage calls should be made using this product
--   code.
--   
--   <a>$sel:httpStatus:ResolveCustomerResponse'</a>,
--   <a>resolveCustomerResponse_httpStatus</a> - The response's http status
--   code.
newResolveCustomerResponse :: Int -> ResolveCustomerResponse

-- | <i>See:</i> <a>newMeterUsage</a> smart constructor.
data MeterUsage
MeterUsage' :: Maybe Natural -> Maybe (NonEmpty UsageAllocation) -> Maybe Bool -> Text -> POSIX -> Text -> MeterUsage

-- | Create a value of <a>MeterUsage</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:usageQuantity:MeterUsage'</a>, <a>meterUsage_usageQuantity</a>
--   - Consumption value for the hour. Defaults to <tt>0</tt> if not
--   specified.
--   
--   <a>$sel:usageAllocations:MeterUsage'</a>,
--   <a>meterUsage_usageAllocations</a> - The set of UsageAllocations to
--   submit.
--   
--   The sum of all UsageAllocation quantities must equal the UsageQuantity
--   of the MeterUsage request, and each UsageAllocation must have a unique
--   set of tags (include no tags).
--   
--   <a>$sel:dryRun:MeterUsage'</a>, <a>meterUsage_dryRun</a> - Checks
--   whether you have the permissions required for the action, but does not
--   make the request. If you have the permissions, the request returns
--   DryRunOperation; otherwise, it returns UnauthorizedException. Defaults
--   to <tt>false</tt> if not specified.
--   
--   <a>$sel:productCode:MeterUsage'</a>, <a>meterUsage_productCode</a> -
--   Product code is used to uniquely identify a product in AWS
--   Marketplace. The product code should be the same as the one used
--   during the publishing of a new product.
--   
--   <a>$sel:timestamp:MeterUsage'</a>, <a>meterUsage_timestamp</a> -
--   Timestamp, in UTC, for which the usage is being reported. Your
--   application can meter usage for up to one hour in the past. Make sure
--   the timestamp value is not before the start of the software usage.
--   
--   <a>$sel:usageDimension:MeterUsage'</a>,
--   <a>meterUsage_usageDimension</a> - It will be one of the fcp dimension
--   name provided during the publishing of the product.
newMeterUsage :: Text -> UTCTime -> Text -> MeterUsage

-- | <i>See:</i> <a>newMeterUsageResponse</a> smart constructor.
data MeterUsageResponse
MeterUsageResponse' :: Maybe Text -> Int -> MeterUsageResponse

-- | Create a value of <a>MeterUsageResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:meteringRecordId:MeterUsageResponse'</a>,
--   <a>meterUsageResponse_meteringRecordId</a> - Metering record id.
--   
--   <a>$sel:httpStatus:MeterUsageResponse'</a>,
--   <a>meterUsageResponse_httpStatus</a> - The response's http status
--   code.
newMeterUsageResponse :: Int -> MeterUsageResponse
newtype UsageRecordResultStatus
UsageRecordResultStatus' :: Text -> UsageRecordResultStatus
[fromUsageRecordResultStatus] :: UsageRecordResultStatus -> Text
pattern UsageRecordResultStatus_CustomerNotSubscribed :: UsageRecordResultStatus
pattern UsageRecordResultStatus_DuplicateRecord :: UsageRecordResultStatus
pattern UsageRecordResultStatus_Success :: UsageRecordResultStatus

-- | Metadata assigned to an allocation. Each tag is made up of a key and a
--   value.
--   
--   <i>See:</i> <a>newTag</a> smart constructor.
data Tag
Tag' :: Text -> Text -> Tag

-- | Create a value of <a>Tag</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:key:Tag'</a>, <a>tag_key</a> - One part of a key-value pair
--   that makes up a tag. A key is a label that acts like a category for
--   the specific tag values.
--   
--   <a>$sel:value:Tag'</a>, <a>tag_value</a> - One part of a key-value
--   pair that makes up a tag. A value acts as a descriptor within a tag
--   category (key). The value can be empty or null.
newTag :: Text -> Text -> Tag

-- | Usage allocations allow you to split usage into buckets by tags.
--   
--   Each UsageAllocation indicates the usage quantity for a specific set
--   of tags.
--   
--   <i>See:</i> <a>newUsageAllocation</a> smart constructor.
data UsageAllocation
UsageAllocation' :: Maybe (NonEmpty Tag) -> Natural -> UsageAllocation

-- | Create a value of <a>UsageAllocation</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tags:UsageAllocation'</a>, <a>usageAllocation_tags</a> - The
--   set of tags that define the bucket of usage. For the bucket of items
--   with no tags, this parameter can be left out.
--   
--   <a>$sel:allocatedUsageQuantity:UsageAllocation'</a>,
--   <a>usageAllocation_allocatedUsageQuantity</a> - The total quantity
--   allocated to this bucket of usage.
newUsageAllocation :: Natural -> UsageAllocation

-- | A UsageRecord indicates a quantity of usage for a given product,
--   customer, dimension and time.
--   
--   Multiple requests with the same UsageRecords as input will be
--   deduplicated to prevent double charges.
--   
--   <i>See:</i> <a>newUsageRecord</a> smart constructor.
data UsageRecord
UsageRecord' :: Maybe Natural -> Maybe (NonEmpty UsageAllocation) -> POSIX -> Text -> Text -> UsageRecord

-- | Create a value of <a>UsageRecord</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:quantity:UsageRecord'</a>, <a>usageRecord_quantity</a> - The
--   quantity of usage consumed by the customer for the given dimension and
--   time. Defaults to <tt>0</tt> if not specified.
--   
--   <a>$sel:usageAllocations:UsageRecord'</a>,
--   <a>usageRecord_usageAllocations</a> - The set of UsageAllocations to
--   submit. The sum of all UsageAllocation quantities must equal the
--   Quantity of the UsageRecord.
--   
--   <a>$sel:timestamp:UsageRecord'</a>, <a>usageRecord_timestamp</a> -
--   Timestamp, in UTC, for which the usage is being reported.
--   
--   Your application can meter usage for up to one hour in the past. Make
--   sure the timestamp value is not before the start of the software
--   usage.
--   
--   <a>$sel:customerIdentifier:UsageRecord'</a>,
--   <a>usageRecord_customerIdentifier</a> - The CustomerIdentifier is
--   obtained through the ResolveCustomer operation and represents an
--   individual buyer in your application.
--   
--   <a>$sel:dimension:UsageRecord'</a>, <a>usageRecord_dimension</a> -
--   During the process of registering a product on AWS Marketplace, up to
--   eight dimensions are specified. These represent different units of
--   value in your application.
newUsageRecord :: UTCTime -> Text -> Text -> UsageRecord

-- | A UsageRecordResult indicates the status of a given UsageRecord
--   processed by BatchMeterUsage.
--   
--   <i>See:</i> <a>newUsageRecordResult</a> smart constructor.
data UsageRecordResult
UsageRecordResult' :: Maybe UsageRecordResultStatus -> Maybe UsageRecord -> Maybe Text -> UsageRecordResult

-- | Create a value of <a>UsageRecordResult</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:UsageRecordResult'</a>, <a>usageRecordResult_status</a>
--   - The UsageRecordResult Status indicates the status of an individual
--   UsageRecord processed by BatchMeterUsage.
--   
--   <ul>
--   <li><i>Success</i>- The UsageRecord was accepted and honored by
--   BatchMeterUsage.</li>
--   <li><i>CustomerNotSubscribed</i>- The CustomerIdentifier specified is
--   not subscribed to your product. The UsageRecord was not honored.
--   Future UsageRecords for this customer will fail until the customer
--   subscribes to your product.</li>
--   <li><i>DuplicateRecord</i>- Indicates that the UsageRecord was invalid
--   and not honored. A previously metered UsageRecord had the same
--   customer, dimension, and time, but a different quantity.</li>
--   </ul>
--   
--   <a>$sel:usageRecord:UsageRecordResult'</a>,
--   <a>usageRecordResult_usageRecord</a> - The UsageRecord that was part
--   of the BatchMeterUsage request.
--   
--   <a>$sel:meteringRecordId:UsageRecordResult'</a>,
--   <a>usageRecordResult_meteringRecordId</a> - The MeteringRecordId is a
--   unique identifier for this metering event.
newUsageRecordResult :: UsageRecordResult
