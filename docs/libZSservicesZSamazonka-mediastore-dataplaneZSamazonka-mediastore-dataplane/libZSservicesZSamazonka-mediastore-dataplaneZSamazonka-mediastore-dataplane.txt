-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/

@package libZSservicesZSamazonka-mediastore-dataplaneZSamazonka-mediastore-dataplane
@version 2.0


module Network.AWS.MediaStoreData.Types.ItemType
newtype ItemType
ItemType' :: Text -> ItemType
[fromItemType] :: ItemType -> Text
pattern ItemType_FOLDER :: ItemType
pattern ItemType_OBJECT :: ItemType
instance Network.AWS.Data.XML.ToXML Network.AWS.MediaStoreData.Types.ItemType.ItemType
instance Network.AWS.Data.XML.FromXML Network.AWS.MediaStoreData.Types.ItemType.ItemType
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.MediaStoreData.Types.ItemType.ItemType
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.MediaStoreData.Types.ItemType.ItemType
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.MediaStoreData.Types.ItemType.ItemType
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.MediaStoreData.Types.ItemType.ItemType
instance Network.AWS.Data.Query.ToQuery Network.AWS.MediaStoreData.Types.ItemType.ItemType
instance Network.AWS.Data.Headers.ToHeader Network.AWS.MediaStoreData.Types.ItemType.ItemType
instance Network.AWS.Data.Log.ToLog Network.AWS.MediaStoreData.Types.ItemType.ItemType
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.MediaStoreData.Types.ItemType.ItemType
instance Network.AWS.Data.Text.ToText Network.AWS.MediaStoreData.Types.ItemType.ItemType
instance Network.AWS.Data.Text.FromText Network.AWS.MediaStoreData.Types.ItemType.ItemType
instance Control.DeepSeq.NFData Network.AWS.MediaStoreData.Types.ItemType.ItemType
instance Data.Hashable.Class.Hashable Network.AWS.MediaStoreData.Types.ItemType.ItemType
instance GHC.Generics.Generic Network.AWS.MediaStoreData.Types.ItemType.ItemType
instance GHC.Classes.Ord Network.AWS.MediaStoreData.Types.ItemType.ItemType
instance GHC.Classes.Eq Network.AWS.MediaStoreData.Types.ItemType.ItemType
instance GHC.Read.Read Network.AWS.MediaStoreData.Types.ItemType.ItemType
instance GHC.Show.Show Network.AWS.MediaStoreData.Types.ItemType.ItemType


module Network.AWS.MediaStoreData.Types.Item

-- | A metadata entry for a folder or object.
--   
--   <i>See:</i> <a>newItem</a> smart constructor.
data Item
Item' :: Maybe Text -> Maybe Natural -> Maybe Text -> Maybe ItemType -> Maybe POSIX -> Maybe Text -> Item

-- | The ETag that represents a unique instance of the item.
[$sel:eTag:Item'] :: Item -> Maybe Text

-- | The length of the item in bytes.
[$sel:contentLength:Item'] :: Item -> Maybe Natural

-- | The name of the item.
[$sel:name:Item'] :: Item -> Maybe Text

-- | The item type (folder or object).
[$sel:type':Item'] :: Item -> Maybe ItemType

-- | The date and time that the item was last modified.
[$sel:lastModified:Item'] :: Item -> Maybe POSIX

-- | The content type of the item.
[$sel:contentType:Item'] :: Item -> Maybe Text

-- | Create a value of <a>Item</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:eTag:Item'</a>, <a>item_eTag</a> - The ETag that represents a
--   unique instance of the item.
--   
--   <a>$sel:contentLength:Item'</a>, <a>item_contentLength</a> - The
--   length of the item in bytes.
--   
--   <a>$sel:name:Item'</a>, <a>item_name</a> - The name of the item.
--   
--   <a>$sel:type':Item'</a>, <a>item_type</a> - The item type (folder or
--   object).
--   
--   <a>$sel:lastModified:Item'</a>, <a>item_lastModified</a> - The date
--   and time that the item was last modified.
--   
--   <a>$sel:contentType:Item'</a>, <a>item_contentType</a> - The content
--   type of the item.
newItem :: Item

-- | The ETag that represents a unique instance of the item.
item_eTag :: Lens' Item (Maybe Text)

-- | The length of the item in bytes.
item_contentLength :: Lens' Item (Maybe Natural)

-- | The name of the item.
item_name :: Lens' Item (Maybe Text)

-- | The item type (folder or object).
item_type :: Lens' Item (Maybe ItemType)

-- | The date and time that the item was last modified.
item_lastModified :: Lens' Item (Maybe UTCTime)

-- | The content type of the item.
item_contentType :: Lens' Item (Maybe Text)
instance GHC.Generics.Generic Network.AWS.MediaStoreData.Types.Item.Item
instance GHC.Show.Show Network.AWS.MediaStoreData.Types.Item.Item
instance GHC.Read.Read Network.AWS.MediaStoreData.Types.Item.Item
instance GHC.Classes.Eq Network.AWS.MediaStoreData.Types.Item.Item
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.MediaStoreData.Types.Item.Item
instance Data.Hashable.Class.Hashable Network.AWS.MediaStoreData.Types.Item.Item
instance Control.DeepSeq.NFData Network.AWS.MediaStoreData.Types.Item.Item


module Network.AWS.MediaStoreData.Types.StorageClass
newtype StorageClass
StorageClass' :: Text -> StorageClass
[fromStorageClass] :: StorageClass -> Text
pattern StorageClass_TEMPORAL :: StorageClass
instance Network.AWS.Data.XML.ToXML Network.AWS.MediaStoreData.Types.StorageClass.StorageClass
instance Network.AWS.Data.XML.FromXML Network.AWS.MediaStoreData.Types.StorageClass.StorageClass
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.MediaStoreData.Types.StorageClass.StorageClass
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.MediaStoreData.Types.StorageClass.StorageClass
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.MediaStoreData.Types.StorageClass.StorageClass
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.MediaStoreData.Types.StorageClass.StorageClass
instance Network.AWS.Data.Query.ToQuery Network.AWS.MediaStoreData.Types.StorageClass.StorageClass
instance Network.AWS.Data.Headers.ToHeader Network.AWS.MediaStoreData.Types.StorageClass.StorageClass
instance Network.AWS.Data.Log.ToLog Network.AWS.MediaStoreData.Types.StorageClass.StorageClass
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.MediaStoreData.Types.StorageClass.StorageClass
instance Network.AWS.Data.Text.ToText Network.AWS.MediaStoreData.Types.StorageClass.StorageClass
instance Network.AWS.Data.Text.FromText Network.AWS.MediaStoreData.Types.StorageClass.StorageClass
instance Control.DeepSeq.NFData Network.AWS.MediaStoreData.Types.StorageClass.StorageClass
instance Data.Hashable.Class.Hashable Network.AWS.MediaStoreData.Types.StorageClass.StorageClass
instance GHC.Generics.Generic Network.AWS.MediaStoreData.Types.StorageClass.StorageClass
instance GHC.Classes.Ord Network.AWS.MediaStoreData.Types.StorageClass.StorageClass
instance GHC.Classes.Eq Network.AWS.MediaStoreData.Types.StorageClass.StorageClass
instance GHC.Read.Read Network.AWS.MediaStoreData.Types.StorageClass.StorageClass
instance GHC.Show.Show Network.AWS.MediaStoreData.Types.StorageClass.StorageClass


module Network.AWS.MediaStoreData.Types.UploadAvailability
newtype UploadAvailability
UploadAvailability' :: Text -> UploadAvailability
[fromUploadAvailability] :: UploadAvailability -> Text
pattern UploadAvailability_STANDARD :: UploadAvailability
pattern UploadAvailability_STREAMING :: UploadAvailability
instance Network.AWS.Data.XML.ToXML Network.AWS.MediaStoreData.Types.UploadAvailability.UploadAvailability
instance Network.AWS.Data.XML.FromXML Network.AWS.MediaStoreData.Types.UploadAvailability.UploadAvailability
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.MediaStoreData.Types.UploadAvailability.UploadAvailability
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.MediaStoreData.Types.UploadAvailability.UploadAvailability
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.MediaStoreData.Types.UploadAvailability.UploadAvailability
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.MediaStoreData.Types.UploadAvailability.UploadAvailability
instance Network.AWS.Data.Query.ToQuery Network.AWS.MediaStoreData.Types.UploadAvailability.UploadAvailability
instance Network.AWS.Data.Headers.ToHeader Network.AWS.MediaStoreData.Types.UploadAvailability.UploadAvailability
instance Network.AWS.Data.Log.ToLog Network.AWS.MediaStoreData.Types.UploadAvailability.UploadAvailability
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.MediaStoreData.Types.UploadAvailability.UploadAvailability
instance Network.AWS.Data.Text.ToText Network.AWS.MediaStoreData.Types.UploadAvailability.UploadAvailability
instance Network.AWS.Data.Text.FromText Network.AWS.MediaStoreData.Types.UploadAvailability.UploadAvailability
instance Control.DeepSeq.NFData Network.AWS.MediaStoreData.Types.UploadAvailability.UploadAvailability
instance Data.Hashable.Class.Hashable Network.AWS.MediaStoreData.Types.UploadAvailability.UploadAvailability
instance GHC.Generics.Generic Network.AWS.MediaStoreData.Types.UploadAvailability.UploadAvailability
instance GHC.Classes.Ord Network.AWS.MediaStoreData.Types.UploadAvailability.UploadAvailability
instance GHC.Classes.Eq Network.AWS.MediaStoreData.Types.UploadAvailability.UploadAvailability
instance GHC.Read.Read Network.AWS.MediaStoreData.Types.UploadAvailability.UploadAvailability
instance GHC.Show.Show Network.AWS.MediaStoreData.Types.UploadAvailability.UploadAvailability


module Network.AWS.MediaStoreData.Types

-- | API version <tt>2017-09-01</tt> of the Amazon Elemental MediaStore
--   Data Plane SDK configuration.
defaultService :: Service

-- | The requested content range is not valid.
_RequestedRangeNotSatisfiableException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The service is temporarily unavailable.
_InternalServerError :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified container was not found for the specified account.
_ContainerNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Could not perform an operation on an object that does not exist.
_ObjectNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError
newtype ItemType
ItemType' :: Text -> ItemType
[fromItemType] :: ItemType -> Text
pattern ItemType_FOLDER :: ItemType
pattern ItemType_OBJECT :: ItemType
newtype StorageClass
StorageClass' :: Text -> StorageClass
[fromStorageClass] :: StorageClass -> Text
pattern StorageClass_TEMPORAL :: StorageClass
newtype UploadAvailability
UploadAvailability' :: Text -> UploadAvailability
[fromUploadAvailability] :: UploadAvailability -> Text
pattern UploadAvailability_STANDARD :: UploadAvailability
pattern UploadAvailability_STREAMING :: UploadAvailability

-- | A metadata entry for a folder or object.
--   
--   <i>See:</i> <a>newItem</a> smart constructor.
data Item
Item' :: Maybe Text -> Maybe Natural -> Maybe Text -> Maybe ItemType -> Maybe POSIX -> Maybe Text -> Item

-- | The ETag that represents a unique instance of the item.
[$sel:eTag:Item'] :: Item -> Maybe Text

-- | The length of the item in bytes.
[$sel:contentLength:Item'] :: Item -> Maybe Natural

-- | The name of the item.
[$sel:name:Item'] :: Item -> Maybe Text

-- | The item type (folder or object).
[$sel:type':Item'] :: Item -> Maybe ItemType

-- | The date and time that the item was last modified.
[$sel:lastModified:Item'] :: Item -> Maybe POSIX

-- | The content type of the item.
[$sel:contentType:Item'] :: Item -> Maybe Text

-- | Create a value of <a>Item</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:eTag:Item'</a>, <a>item_eTag</a> - The ETag that represents a
--   unique instance of the item.
--   
--   <a>$sel:contentLength:Item'</a>, <a>item_contentLength</a> - The
--   length of the item in bytes.
--   
--   <a>$sel:name:Item'</a>, <a>item_name</a> - The name of the item.
--   
--   <a>$sel:type':Item'</a>, <a>item_type</a> - The item type (folder or
--   object).
--   
--   <a>$sel:lastModified:Item'</a>, <a>item_lastModified</a> - The date
--   and time that the item was last modified.
--   
--   <a>$sel:contentType:Item'</a>, <a>item_contentType</a> - The content
--   type of the item.
newItem :: Item

-- | The ETag that represents a unique instance of the item.
item_eTag :: Lens' Item (Maybe Text)

-- | The length of the item in bytes.
item_contentLength :: Lens' Item (Maybe Natural)

-- | The name of the item.
item_name :: Lens' Item (Maybe Text)

-- | The item type (folder or object).
item_type :: Lens' Item (Maybe ItemType)

-- | The date and time that the item was last modified.
item_lastModified :: Lens' Item (Maybe UTCTime)

-- | The content type of the item.
item_contentType :: Lens' Item (Maybe Text)


-- | Uploads an object to the specified path. Object sizes are limited to
--   25 MB for standard upload availability and 10 MB for streaming upload
--   availability.
module Network.AWS.MediaStoreData.PutObject

-- | <i>See:</i> <a>newPutObject</a> smart constructor.
data PutObject
PutObject' :: Maybe StorageClass -> Maybe UploadAvailability -> Maybe Text -> Maybe Text -> Text -> HashedBody -> PutObject

-- | Indicates the storage class of a <tt>Put</tt> request. Defaults to
--   high-performance temporal storage class, and objects are persisted
--   into durable storage shortly after being received.
[$sel:storageClass:PutObject'] :: PutObject -> Maybe StorageClass

-- | Indicates the availability of an object while it is still uploading.
--   If the value is set to <tt>streaming</tt>, the object is available for
--   downloading after some initial buffering but before the object is
--   uploaded completely. If the value is set to <tt>standard</tt>, the
--   object is available for downloading only when it is uploaded
--   completely. The default value for this header is <tt>standard</tt>.
--   
--   To use this header, you must also set the HTTP
--   <tt>Transfer-Encoding</tt> header to <tt>chunked</tt>.
[$sel:uploadAvailability:PutObject'] :: PutObject -> Maybe UploadAvailability

-- | An optional <tt>CacheControl</tt> header that allows the caller to
--   control the object's cache behavior. Headers can be passed in as
--   specified in the HTTP at
--   <a>https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9</a>.
--   
--   Headers with a custom user-defined value are also accepted.
[$sel:cacheControl:PutObject'] :: PutObject -> Maybe Text

-- | The content type of the object.
[$sel:contentType:PutObject'] :: PutObject -> Maybe Text

-- | The path (including the file name) where the object is stored in the
--   container. Format: &lt;folder name&gt;/&lt;folder name&gt;/&lt;file
--   name&gt;
--   
--   For example, to upload the file <tt>mlaw.avi</tt> to the folder path
--   <tt>premium\canada</tt> in the container <tt>movies</tt>, enter the
--   path <tt>premium/canada/mlaw.avi</tt>.
--   
--   Do not include the container name in this path.
--   
--   If the path includes any folders that don't exist yet, the service
--   creates them. For example, suppose you have an existing
--   <tt>premium/usa</tt> subfolder. If you specify
--   <tt>premium/canada</tt>, the service creates a <tt>canada</tt>
--   subfolder in the <tt>premium</tt> folder. You then have two
--   subfolders, <tt>usa</tt> and <tt>canada</tt>, in the <tt>premium</tt>
--   folder.
--   
--   There is no correlation between the path to the source and the path
--   (folders) in the container in AWS Elemental MediaStore.
--   
--   For more information about folders and how they exist in a container,
--   see the <a>AWS Elemental MediaStore User Guide</a>.
--   
--   The file name is the name that is assigned to the file that you
--   upload. The file can have the same name inside and outside of AWS
--   Elemental MediaStore, or it can have the same name. The file name can
--   include or omit an extension.
[$sel:path:PutObject'] :: PutObject -> Text

-- | The bytes to be stored.
[$sel:body:PutObject'] :: PutObject -> HashedBody

-- | Create a value of <a>PutObject</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:storageClass:PutObject'</a>, <a>putObject_storageClass</a> -
--   Indicates the storage class of a <tt>Put</tt> request. Defaults to
--   high-performance temporal storage class, and objects are persisted
--   into durable storage shortly after being received.
--   
--   <a>$sel:uploadAvailability:PutObject'</a>,
--   <a>putObject_uploadAvailability</a> - Indicates the availability of an
--   object while it is still uploading. If the value is set to
--   <tt>streaming</tt>, the object is available for downloading after some
--   initial buffering but before the object is uploaded completely. If the
--   value is set to <tt>standard</tt>, the object is available for
--   downloading only when it is uploaded completely. The default value for
--   this header is <tt>standard</tt>.
--   
--   To use this header, you must also set the HTTP
--   <tt>Transfer-Encoding</tt> header to <tt>chunked</tt>.
--   
--   <a>$sel:cacheControl:PutObject'</a>, <a>putObject_cacheControl</a> -
--   An optional <tt>CacheControl</tt> header that allows the caller to
--   control the object's cache behavior. Headers can be passed in as
--   specified in the HTTP at
--   <a>https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9</a>.
--   
--   Headers with a custom user-defined value are also accepted.
--   
--   <a>$sel:contentType:PutObject'</a>, <a>putObject_contentType</a> - The
--   content type of the object.
--   
--   <a>$sel:path:PutObject'</a>, <a>putObject_path</a> - The path
--   (including the file name) where the object is stored in the container.
--   Format: &lt;folder name&gt;/&lt;folder name&gt;/&lt;file name&gt;
--   
--   For example, to upload the file <tt>mlaw.avi</tt> to the folder path
--   <tt>premium\canada</tt> in the container <tt>movies</tt>, enter the
--   path <tt>premium/canada/mlaw.avi</tt>.
--   
--   Do not include the container name in this path.
--   
--   If the path includes any folders that don't exist yet, the service
--   creates them. For example, suppose you have an existing
--   <tt>premium/usa</tt> subfolder. If you specify
--   <tt>premium/canada</tt>, the service creates a <tt>canada</tt>
--   subfolder in the <tt>premium</tt> folder. You then have two
--   subfolders, <tt>usa</tt> and <tt>canada</tt>, in the <tt>premium</tt>
--   folder.
--   
--   There is no correlation between the path to the source and the path
--   (folders) in the container in AWS Elemental MediaStore.
--   
--   For more information about folders and how they exist in a container,
--   see the <a>AWS Elemental MediaStore User Guide</a>.
--   
--   The file name is the name that is assigned to the file that you
--   upload. The file can have the same name inside and outside of AWS
--   Elemental MediaStore, or it can have the same name. The file name can
--   include or omit an extension.
--   
--   <a>$sel:body:PutObject'</a>, <a>putObject_body</a> - The bytes to be
--   stored.
newPutObject :: Text -> HashedBody -> PutObject

-- | Indicates the storage class of a <tt>Put</tt> request. Defaults to
--   high-performance temporal storage class, and objects are persisted
--   into durable storage shortly after being received.
putObject_storageClass :: Lens' PutObject (Maybe StorageClass)

-- | Indicates the availability of an object while it is still uploading.
--   If the value is set to <tt>streaming</tt>, the object is available for
--   downloading after some initial buffering but before the object is
--   uploaded completely. If the value is set to <tt>standard</tt>, the
--   object is available for downloading only when it is uploaded
--   completely. The default value for this header is <tt>standard</tt>.
--   
--   To use this header, you must also set the HTTP
--   <tt>Transfer-Encoding</tt> header to <tt>chunked</tt>.
putObject_uploadAvailability :: Lens' PutObject (Maybe UploadAvailability)

-- | An optional <tt>CacheControl</tt> header that allows the caller to
--   control the object's cache behavior. Headers can be passed in as
--   specified in the HTTP at
--   <a>https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9</a>.
--   
--   Headers with a custom user-defined value are also accepted.
putObject_cacheControl :: Lens' PutObject (Maybe Text)

-- | The content type of the object.
putObject_contentType :: Lens' PutObject (Maybe Text)

-- | The path (including the file name) where the object is stored in the
--   container. Format: &lt;folder name&gt;/&lt;folder name&gt;/&lt;file
--   name&gt;
--   
--   For example, to upload the file <tt>mlaw.avi</tt> to the folder path
--   <tt>premium\canada</tt> in the container <tt>movies</tt>, enter the
--   path <tt>premium/canada/mlaw.avi</tt>.
--   
--   Do not include the container name in this path.
--   
--   If the path includes any folders that don't exist yet, the service
--   creates them. For example, suppose you have an existing
--   <tt>premium/usa</tt> subfolder. If you specify
--   <tt>premium/canada</tt>, the service creates a <tt>canada</tt>
--   subfolder in the <tt>premium</tt> folder. You then have two
--   subfolders, <tt>usa</tt> and <tt>canada</tt>, in the <tt>premium</tt>
--   folder.
--   
--   There is no correlation between the path to the source and the path
--   (folders) in the container in AWS Elemental MediaStore.
--   
--   For more information about folders and how they exist in a container,
--   see the <a>AWS Elemental MediaStore User Guide</a>.
--   
--   The file name is the name that is assigned to the file that you
--   upload. The file can have the same name inside and outside of AWS
--   Elemental MediaStore, or it can have the same name. The file name can
--   include or omit an extension.
putObject_path :: Lens' PutObject Text

-- | The bytes to be stored.
putObject_body :: Lens' PutObject HashedBody

-- | <i>See:</i> <a>newPutObjectResponse</a> smart constructor.
data PutObjectResponse
PutObjectResponse' :: Maybe Text -> Maybe StorageClass -> Maybe Text -> Int -> PutObjectResponse

-- | Unique identifier of the object in the container.
[$sel:eTag:PutObjectResponse'] :: PutObjectResponse -> Maybe Text

-- | The storage class where the object was persisted. The class should be
--   “Temporal”.
[$sel:storageClass:PutObjectResponse'] :: PutObjectResponse -> Maybe StorageClass

-- | The SHA256 digest of the object that is persisted.
[$sel:contentSHA256:PutObjectResponse'] :: PutObjectResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:PutObjectResponse'] :: PutObjectResponse -> Int

-- | Create a value of <a>PutObjectResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:eTag:PutObjectResponse'</a>, <a>putObjectResponse_eTag</a> -
--   Unique identifier of the object in the container.
--   
--   <a>$sel:storageClass:PutObject'</a>,
--   <a>putObjectResponse_storageClass</a> - The storage class where the
--   object was persisted. The class should be “Temporal”.
--   
--   <a>$sel:contentSHA256:PutObjectResponse'</a>,
--   <a>putObjectResponse_contentSHA256</a> - The SHA256 digest of the
--   object that is persisted.
--   
--   <a>$sel:httpStatus:PutObjectResponse'</a>,
--   <a>putObjectResponse_httpStatus</a> - The response's http status code.
newPutObjectResponse :: Int -> PutObjectResponse

-- | Unique identifier of the object in the container.
putObjectResponse_eTag :: Lens' PutObjectResponse (Maybe Text)

-- | The storage class where the object was persisted. The class should be
--   “Temporal”.
putObjectResponse_storageClass :: Lens' PutObjectResponse (Maybe StorageClass)

-- | The SHA256 digest of the object that is persisted.
putObjectResponse_contentSHA256 :: Lens' PutObjectResponse (Maybe Text)

-- | The response's http status code.
putObjectResponse_httpStatus :: Lens' PutObjectResponse Int
instance GHC.Generics.Generic Network.AWS.MediaStoreData.PutObject.PutObject
instance GHC.Show.Show Network.AWS.MediaStoreData.PutObject.PutObject
instance GHC.Generics.Generic Network.AWS.MediaStoreData.PutObject.PutObjectResponse
instance GHC.Show.Show Network.AWS.MediaStoreData.PutObject.PutObjectResponse
instance GHC.Read.Read Network.AWS.MediaStoreData.PutObject.PutObjectResponse
instance GHC.Classes.Eq Network.AWS.MediaStoreData.PutObject.PutObjectResponse
instance Network.AWS.Types.AWSRequest Network.AWS.MediaStoreData.PutObject.PutObject
instance Control.DeepSeq.NFData Network.AWS.MediaStoreData.PutObject.PutObjectResponse
instance Network.AWS.Data.Body.ToBody Network.AWS.MediaStoreData.PutObject.PutObject
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.MediaStoreData.PutObject.PutObject
instance Network.AWS.Data.Path.ToPath Network.AWS.MediaStoreData.PutObject.PutObject
instance Network.AWS.Data.Query.ToQuery Network.AWS.MediaStoreData.PutObject.PutObject


-- | Provides a list of metadata entries about folders and objects in the
--   specified folder.
--   
--   This operation returns paginated results.
module Network.AWS.MediaStoreData.ListItems

-- | <i>See:</i> <a>newListItems</a> smart constructor.
data ListItems
ListItems' :: Maybe Text -> Maybe Text -> Maybe Natural -> ListItems

-- | The path in the container from which to retrieve items. Format:
--   &lt;folder name&gt;/&lt;folder name&gt;/&lt;file name&gt;
[$sel:path:ListItems'] :: ListItems -> Maybe Text

-- | The token that identifies which batch of results that you want to see.
--   For example, you submit a <tt>ListItems</tt> request with
--   <tt>MaxResults</tt> set at 500. The service returns the first batch of
--   results (up to 500) and a <tt>NextToken</tt> value. To see the next
--   batch of results, you can submit the <tt>ListItems</tt> request a
--   second time and specify the <tt>NextToken</tt> value.
--   
--   Tokens expire after 15 minutes.
[$sel:nextToken:ListItems'] :: ListItems -> Maybe Text

-- | The maximum number of results to return per API request. For example,
--   you submit a <tt>ListItems</tt> request with <tt>MaxResults</tt> set
--   at 500. Although 2,000 items match your request, the service returns
--   no more than the first 500 items. (The service also returns a
--   <tt>NextToken</tt> value that you can use to fetch the next batch of
--   results.) The service might return fewer results than the
--   <tt>MaxResults</tt> value.
--   
--   If <tt>MaxResults</tt> is not included in the request, the service
--   defaults to pagination with a maximum of 1,000 results per page.
[$sel:maxResults:ListItems'] :: ListItems -> Maybe Natural

-- | Create a value of <a>ListItems</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:path:ListItems'</a>, <a>listItems_path</a> - The path in the
--   container from which to retrieve items. Format: &lt;folder
--   name&gt;/&lt;folder name&gt;/&lt;file name&gt;
--   
--   <a>$sel:nextToken:ListItems'</a>, <a>listItems_nextToken</a> - The
--   token that identifies which batch of results that you want to see. For
--   example, you submit a <tt>ListItems</tt> request with
--   <tt>MaxResults</tt> set at 500. The service returns the first batch of
--   results (up to 500) and a <tt>NextToken</tt> value. To see the next
--   batch of results, you can submit the <tt>ListItems</tt> request a
--   second time and specify the <tt>NextToken</tt> value.
--   
--   Tokens expire after 15 minutes.
--   
--   <a>$sel:maxResults:ListItems'</a>, <a>listItems_maxResults</a> - The
--   maximum number of results to return per API request. For example, you
--   submit a <tt>ListItems</tt> request with <tt>MaxResults</tt> set at
--   500. Although 2,000 items match your request, the service returns no
--   more than the first 500 items. (The service also returns a
--   <tt>NextToken</tt> value that you can use to fetch the next batch of
--   results.) The service might return fewer results than the
--   <tt>MaxResults</tt> value.
--   
--   If <tt>MaxResults</tt> is not included in the request, the service
--   defaults to pagination with a maximum of 1,000 results per page.
newListItems :: ListItems

-- | The path in the container from which to retrieve items. Format:
--   &lt;folder name&gt;/&lt;folder name&gt;/&lt;file name&gt;
listItems_path :: Lens' ListItems (Maybe Text)

-- | The token that identifies which batch of results that you want to see.
--   For example, you submit a <tt>ListItems</tt> request with
--   <tt>MaxResults</tt> set at 500. The service returns the first batch of
--   results (up to 500) and a <tt>NextToken</tt> value. To see the next
--   batch of results, you can submit the <tt>ListItems</tt> request a
--   second time and specify the <tt>NextToken</tt> value.
--   
--   Tokens expire after 15 minutes.
listItems_nextToken :: Lens' ListItems (Maybe Text)

-- | The maximum number of results to return per API request. For example,
--   you submit a <tt>ListItems</tt> request with <tt>MaxResults</tt> set
--   at 500. Although 2,000 items match your request, the service returns
--   no more than the first 500 items. (The service also returns a
--   <tt>NextToken</tt> value that you can use to fetch the next batch of
--   results.) The service might return fewer results than the
--   <tt>MaxResults</tt> value.
--   
--   If <tt>MaxResults</tt> is not included in the request, the service
--   defaults to pagination with a maximum of 1,000 results per page.
listItems_maxResults :: Lens' ListItems (Maybe Natural)

-- | <i>See:</i> <a>newListItemsResponse</a> smart constructor.
data ListItemsResponse
ListItemsResponse' :: Maybe [Item] -> Maybe Text -> Int -> ListItemsResponse

-- | The metadata entries for the folders and objects at the requested
--   path.
[$sel:items:ListItemsResponse'] :: ListItemsResponse -> Maybe [Item]

-- | The token that can be used in a request to view the next set of
--   results. For example, you submit a <tt>ListItems</tt> request that
--   matches 2,000 items with <tt>MaxResults</tt> set at 500. The service
--   returns the first batch of results (up to 500) and a
--   <tt>NextToken</tt> value that can be used to fetch the next batch of
--   results.
[$sel:nextToken:ListItemsResponse'] :: ListItemsResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:ListItemsResponse'] :: ListItemsResponse -> Int

-- | Create a value of <a>ListItemsResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:items:ListItemsResponse'</a>, <a>listItemsResponse_items</a> -
--   The metadata entries for the folders and objects at the requested
--   path.
--   
--   <a>$sel:nextToken:ListItems'</a>, <a>listItemsResponse_nextToken</a> -
--   The token that can be used in a request to view the next set of
--   results. For example, you submit a <tt>ListItems</tt> request that
--   matches 2,000 items with <tt>MaxResults</tt> set at 500. The service
--   returns the first batch of results (up to 500) and a
--   <tt>NextToken</tt> value that can be used to fetch the next batch of
--   results.
--   
--   <a>$sel:httpStatus:ListItemsResponse'</a>,
--   <a>listItemsResponse_httpStatus</a> - The response's http status code.
newListItemsResponse :: Int -> ListItemsResponse

-- | The metadata entries for the folders and objects at the requested
--   path.
listItemsResponse_items :: Lens' ListItemsResponse (Maybe [Item])

-- | The token that can be used in a request to view the next set of
--   results. For example, you submit a <tt>ListItems</tt> request that
--   matches 2,000 items with <tt>MaxResults</tt> set at 500. The service
--   returns the first batch of results (up to 500) and a
--   <tt>NextToken</tt> value that can be used to fetch the next batch of
--   results.
listItemsResponse_nextToken :: Lens' ListItemsResponse (Maybe Text)

-- | The response's http status code.
listItemsResponse_httpStatus :: Lens' ListItemsResponse Int
instance GHC.Generics.Generic Network.AWS.MediaStoreData.ListItems.ListItems
instance GHC.Show.Show Network.AWS.MediaStoreData.ListItems.ListItems
instance GHC.Read.Read Network.AWS.MediaStoreData.ListItems.ListItems
instance GHC.Classes.Eq Network.AWS.MediaStoreData.ListItems.ListItems
instance GHC.Generics.Generic Network.AWS.MediaStoreData.ListItems.ListItemsResponse
instance GHC.Show.Show Network.AWS.MediaStoreData.ListItems.ListItemsResponse
instance GHC.Read.Read Network.AWS.MediaStoreData.ListItems.ListItemsResponse
instance GHC.Classes.Eq Network.AWS.MediaStoreData.ListItems.ListItemsResponse
instance Network.AWS.Types.AWSRequest Network.AWS.MediaStoreData.ListItems.ListItems
instance Control.DeepSeq.NFData Network.AWS.MediaStoreData.ListItems.ListItemsResponse
instance Network.AWS.Pager.AWSPager Network.AWS.MediaStoreData.ListItems.ListItems
instance Data.Hashable.Class.Hashable Network.AWS.MediaStoreData.ListItems.ListItems
instance Control.DeepSeq.NFData Network.AWS.MediaStoreData.ListItems.ListItems
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.MediaStoreData.ListItems.ListItems
instance Network.AWS.Data.Path.ToPath Network.AWS.MediaStoreData.ListItems.ListItems
instance Network.AWS.Data.Query.ToQuery Network.AWS.MediaStoreData.ListItems.ListItems


-- | Downloads the object at the specified path. If the object’s upload
--   availability is set to <tt>streaming</tt>, AWS Elemental MediaStore
--   downloads the object even if it’s still uploading the object.
module Network.AWS.MediaStoreData.GetObject

-- | <i>See:</i> <a>newGetObject</a> smart constructor.
data GetObject
GetObject' :: Maybe Text -> Text -> GetObject

-- | The range bytes of an object to retrieve. For more information about
--   the <tt>Range</tt> header, see
--   <a>http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35</a>.
--   AWS Elemental MediaStore ignores this header for partially uploaded
--   objects that have streaming upload availability.
[$sel:range:GetObject'] :: GetObject -> Maybe Text

-- | The path (including the file name) where the object is stored in the
--   container. Format: &lt;folder name&gt;/&lt;folder name&gt;/&lt;file
--   name&gt;
--   
--   For example, to upload the file <tt>mlaw.avi</tt> to the folder path
--   <tt>premium\canada</tt> in the container <tt>movies</tt>, enter the
--   path <tt>premium/canada/mlaw.avi</tt>.
--   
--   Do not include the container name in this path.
--   
--   If the path includes any folders that don't exist yet, the service
--   creates them. For example, suppose you have an existing
--   <tt>premium/usa</tt> subfolder. If you specify
--   <tt>premium/canada</tt>, the service creates a <tt>canada</tt>
--   subfolder in the <tt>premium</tt> folder. You then have two
--   subfolders, <tt>usa</tt> and <tt>canada</tt>, in the <tt>premium</tt>
--   folder.
--   
--   There is no correlation between the path to the source and the path
--   (folders) in the container in AWS Elemental MediaStore.
--   
--   For more information about folders and how they exist in a container,
--   see the <a>AWS Elemental MediaStore User Guide</a>.
--   
--   The file name is the name that is assigned to the file that you
--   upload. The file can have the same name inside and outside of AWS
--   Elemental MediaStore, or it can have the same name. The file name can
--   include or omit an extension.
[$sel:path:GetObject'] :: GetObject -> Text

-- | Create a value of <a>GetObject</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:range:GetObject'</a>, <a>getObject_range</a> - The range bytes
--   of an object to retrieve. For more information about the
--   <tt>Range</tt> header, see
--   <a>http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35</a>.
--   AWS Elemental MediaStore ignores this header for partially uploaded
--   objects that have streaming upload availability.
--   
--   <a>$sel:path:GetObject'</a>, <a>getObject_path</a> - The path
--   (including the file name) where the object is stored in the container.
--   Format: &lt;folder name&gt;/&lt;folder name&gt;/&lt;file name&gt;
--   
--   For example, to upload the file <tt>mlaw.avi</tt> to the folder path
--   <tt>premium\canada</tt> in the container <tt>movies</tt>, enter the
--   path <tt>premium/canada/mlaw.avi</tt>.
--   
--   Do not include the container name in this path.
--   
--   If the path includes any folders that don't exist yet, the service
--   creates them. For example, suppose you have an existing
--   <tt>premium/usa</tt> subfolder. If you specify
--   <tt>premium/canada</tt>, the service creates a <tt>canada</tt>
--   subfolder in the <tt>premium</tt> folder. You then have two
--   subfolders, <tt>usa</tt> and <tt>canada</tt>, in the <tt>premium</tt>
--   folder.
--   
--   There is no correlation between the path to the source and the path
--   (folders) in the container in AWS Elemental MediaStore.
--   
--   For more information about folders and how they exist in a container,
--   see the <a>AWS Elemental MediaStore User Guide</a>.
--   
--   The file name is the name that is assigned to the file that you
--   upload. The file can have the same name inside and outside of AWS
--   Elemental MediaStore, or it can have the same name. The file name can
--   include or omit an extension.
newGetObject :: Text -> GetObject

-- | The range bytes of an object to retrieve. For more information about
--   the <tt>Range</tt> header, see
--   <a>http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35</a>.
--   AWS Elemental MediaStore ignores this header for partially uploaded
--   objects that have streaming upload availability.
getObject_range :: Lens' GetObject (Maybe Text)

-- | The path (including the file name) where the object is stored in the
--   container. Format: &lt;folder name&gt;/&lt;folder name&gt;/&lt;file
--   name&gt;
--   
--   For example, to upload the file <tt>mlaw.avi</tt> to the folder path
--   <tt>premium\canada</tt> in the container <tt>movies</tt>, enter the
--   path <tt>premium/canada/mlaw.avi</tt>.
--   
--   Do not include the container name in this path.
--   
--   If the path includes any folders that don't exist yet, the service
--   creates them. For example, suppose you have an existing
--   <tt>premium/usa</tt> subfolder. If you specify
--   <tt>premium/canada</tt>, the service creates a <tt>canada</tt>
--   subfolder in the <tt>premium</tt> folder. You then have two
--   subfolders, <tt>usa</tt> and <tt>canada</tt>, in the <tt>premium</tt>
--   folder.
--   
--   There is no correlation between the path to the source and the path
--   (folders) in the container in AWS Elemental MediaStore.
--   
--   For more information about folders and how they exist in a container,
--   see the <a>AWS Elemental MediaStore User Guide</a>.
--   
--   The file name is the name that is assigned to the file that you
--   upload. The file can have the same name inside and outside of AWS
--   Elemental MediaStore, or it can have the same name. The file name can
--   include or omit an extension.
getObject_path :: Lens' GetObject Text

-- | <i>See:</i> <a>newGetObjectResponse</a> smart constructor.
data GetObjectResponse
GetObjectResponse' :: Maybe Text -> Maybe Natural -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe Text -> Int -> ResponseBody -> GetObjectResponse

-- | The ETag that represents a unique instance of the object.
[$sel:eTag:GetObjectResponse'] :: GetObjectResponse -> Maybe Text

-- | The length of the object in bytes.
[$sel:contentLength:GetObjectResponse'] :: GetObjectResponse -> Maybe Natural

-- | An optional <tt>CacheControl</tt> header that allows the caller to
--   control the object's cache behavior. Headers can be passed in as
--   specified in the HTTP spec at
--   <a>https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9</a>.
--   
--   Headers with a custom user-defined value are also accepted.
[$sel:cacheControl:GetObjectResponse'] :: GetObjectResponse -> Maybe Text

-- | The date and time that the object was last modified.
[$sel:lastModified:GetObjectResponse'] :: GetObjectResponse -> Maybe POSIX

-- | The range of bytes to retrieve.
[$sel:contentRange:GetObjectResponse'] :: GetObjectResponse -> Maybe Text

-- | The content type of the object.
[$sel:contentType:GetObjectResponse'] :: GetObjectResponse -> Maybe Text

-- | The HTML status code of the request. Status codes ranging from 200 to
--   299 indicate success. All other status codes indicate the type of
--   error that occurred.
[$sel:statusCode:GetObjectResponse'] :: GetObjectResponse -> Int

-- | The bytes of the object.
[$sel:body:GetObjectResponse'] :: GetObjectResponse -> ResponseBody

-- | Create a value of <a>GetObjectResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:eTag:GetObjectResponse'</a>, <a>getObjectResponse_eTag</a> -
--   The ETag that represents a unique instance of the object.
--   
--   <a>$sel:contentLength:GetObjectResponse'</a>,
--   <a>getObjectResponse_contentLength</a> - The length of the object in
--   bytes.
--   
--   <a>$sel:cacheControl:GetObjectResponse'</a>,
--   <a>getObjectResponse_cacheControl</a> - An optional
--   <tt>CacheControl</tt> header that allows the caller to control the
--   object's cache behavior. Headers can be passed in as specified in the
--   HTTP spec at
--   <a>https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9</a>.
--   
--   Headers with a custom user-defined value are also accepted.
--   
--   <a>$sel:lastModified:GetObjectResponse'</a>,
--   <a>getObjectResponse_lastModified</a> - The date and time that the
--   object was last modified.
--   
--   <a>$sel:contentRange:GetObjectResponse'</a>,
--   <a>getObjectResponse_contentRange</a> - The range of bytes to
--   retrieve.
--   
--   <a>$sel:contentType:GetObjectResponse'</a>,
--   <a>getObjectResponse_contentType</a> - The content type of the object.
--   
--   <a>$sel:statusCode:GetObjectResponse'</a>,
--   <a>getObjectResponse_statusCode</a> - The HTML status code of the
--   request. Status codes ranging from 200 to 299 indicate success. All
--   other status codes indicate the type of error that occurred.
--   
--   <a>$sel:body:GetObjectResponse'</a>, <a>getObjectResponse_body</a> -
--   The bytes of the object.
newGetObjectResponse :: Int -> ResponseBody -> GetObjectResponse

-- | The ETag that represents a unique instance of the object.
getObjectResponse_eTag :: Lens' GetObjectResponse (Maybe Text)

-- | The length of the object in bytes.
getObjectResponse_contentLength :: Lens' GetObjectResponse (Maybe Natural)

-- | An optional <tt>CacheControl</tt> header that allows the caller to
--   control the object's cache behavior. Headers can be passed in as
--   specified in the HTTP spec at
--   <a>https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9</a>.
--   
--   Headers with a custom user-defined value are also accepted.
getObjectResponse_cacheControl :: Lens' GetObjectResponse (Maybe Text)

-- | The date and time that the object was last modified.
getObjectResponse_lastModified :: Lens' GetObjectResponse (Maybe UTCTime)

-- | The range of bytes to retrieve.
getObjectResponse_contentRange :: Lens' GetObjectResponse (Maybe Text)

-- | The content type of the object.
getObjectResponse_contentType :: Lens' GetObjectResponse (Maybe Text)

-- | The HTML status code of the request. Status codes ranging from 200 to
--   299 indicate success. All other status codes indicate the type of
--   error that occurred.
getObjectResponse_statusCode :: Lens' GetObjectResponse Int

-- | The bytes of the object.
getObjectResponse_body :: Lens' GetObjectResponse ResponseBody
instance GHC.Generics.Generic Network.AWS.MediaStoreData.GetObject.GetObject
instance GHC.Show.Show Network.AWS.MediaStoreData.GetObject.GetObject
instance GHC.Read.Read Network.AWS.MediaStoreData.GetObject.GetObject
instance GHC.Classes.Eq Network.AWS.MediaStoreData.GetObject.GetObject
instance GHC.Generics.Generic Network.AWS.MediaStoreData.GetObject.GetObjectResponse
instance GHC.Show.Show Network.AWS.MediaStoreData.GetObject.GetObjectResponse
instance Network.AWS.Types.AWSRequest Network.AWS.MediaStoreData.GetObject.GetObject
instance Data.Hashable.Class.Hashable Network.AWS.MediaStoreData.GetObject.GetObject
instance Control.DeepSeq.NFData Network.AWS.MediaStoreData.GetObject.GetObject
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.MediaStoreData.GetObject.GetObject
instance Network.AWS.Data.Path.ToPath Network.AWS.MediaStoreData.GetObject.GetObject
instance Network.AWS.Data.Query.ToQuery Network.AWS.MediaStoreData.GetObject.GetObject


-- | Gets the headers for an object at the specified path.
module Network.AWS.MediaStoreData.DescribeObject

-- | <i>See:</i> <a>newDescribeObject</a> smart constructor.
data DescribeObject
DescribeObject' :: Text -> DescribeObject

-- | The path (including the file name) where the object is stored in the
--   container. Format: &lt;folder name&gt;/&lt;folder name&gt;/&lt;file
--   name&gt;
[$sel:path:DescribeObject'] :: DescribeObject -> Text

-- | Create a value of <a>DescribeObject</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:path:DescribeObject'</a>, <a>describeObject_path</a> - The
--   path (including the file name) where the object is stored in the
--   container. Format: &lt;folder name&gt;/&lt;folder name&gt;/&lt;file
--   name&gt;
newDescribeObject :: Text -> DescribeObject

-- | The path (including the file name) where the object is stored in the
--   container. Format: &lt;folder name&gt;/&lt;folder name&gt;/&lt;file
--   name&gt;
describeObject_path :: Lens' DescribeObject Text

-- | <i>See:</i> <a>newDescribeObjectResponse</a> smart constructor.
data DescribeObjectResponse
DescribeObjectResponse' :: Maybe Text -> Maybe Natural -> Maybe Text -> Maybe POSIX -> Maybe Text -> Int -> DescribeObjectResponse

-- | The ETag that represents a unique instance of the object.
[$sel:eTag:DescribeObjectResponse'] :: DescribeObjectResponse -> Maybe Text

-- | The length of the object in bytes.
[$sel:contentLength:DescribeObjectResponse'] :: DescribeObjectResponse -> Maybe Natural

-- | An optional <tt>CacheControl</tt> header that allows the caller to
--   control the object's cache behavior. Headers can be passed in as
--   specified in the HTTP at
--   <a>https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9</a>.
--   
--   Headers with a custom user-defined value are also accepted.
[$sel:cacheControl:DescribeObjectResponse'] :: DescribeObjectResponse -> Maybe Text

-- | The date and time that the object was last modified.
[$sel:lastModified:DescribeObjectResponse'] :: DescribeObjectResponse -> Maybe POSIX

-- | The content type of the object.
[$sel:contentType:DescribeObjectResponse'] :: DescribeObjectResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:DescribeObjectResponse'] :: DescribeObjectResponse -> Int

-- | Create a value of <a>DescribeObjectResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:eTag:DescribeObjectResponse'</a>,
--   <a>describeObjectResponse_eTag</a> - The ETag that represents a unique
--   instance of the object.
--   
--   <a>$sel:contentLength:DescribeObjectResponse'</a>,
--   <a>describeObjectResponse_contentLength</a> - The length of the object
--   in bytes.
--   
--   <a>$sel:cacheControl:DescribeObjectResponse'</a>,
--   <a>describeObjectResponse_cacheControl</a> - An optional
--   <tt>CacheControl</tt> header that allows the caller to control the
--   object's cache behavior. Headers can be passed in as specified in the
--   HTTP at
--   <a>https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9</a>.
--   
--   Headers with a custom user-defined value are also accepted.
--   
--   <a>$sel:lastModified:DescribeObjectResponse'</a>,
--   <a>describeObjectResponse_lastModified</a> - The date and time that
--   the object was last modified.
--   
--   <a>$sel:contentType:DescribeObjectResponse'</a>,
--   <a>describeObjectResponse_contentType</a> - The content type of the
--   object.
--   
--   <a>$sel:httpStatus:DescribeObjectResponse'</a>,
--   <a>describeObjectResponse_httpStatus</a> - The response's http status
--   code.
newDescribeObjectResponse :: Int -> DescribeObjectResponse

-- | The ETag that represents a unique instance of the object.
describeObjectResponse_eTag :: Lens' DescribeObjectResponse (Maybe Text)

-- | The length of the object in bytes.
describeObjectResponse_contentLength :: Lens' DescribeObjectResponse (Maybe Natural)

-- | An optional <tt>CacheControl</tt> header that allows the caller to
--   control the object's cache behavior. Headers can be passed in as
--   specified in the HTTP at
--   <a>https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9</a>.
--   
--   Headers with a custom user-defined value are also accepted.
describeObjectResponse_cacheControl :: Lens' DescribeObjectResponse (Maybe Text)

-- | The date and time that the object was last modified.
describeObjectResponse_lastModified :: Lens' DescribeObjectResponse (Maybe UTCTime)

-- | The content type of the object.
describeObjectResponse_contentType :: Lens' DescribeObjectResponse (Maybe Text)

-- | The response's http status code.
describeObjectResponse_httpStatus :: Lens' DescribeObjectResponse Int
instance GHC.Generics.Generic Network.AWS.MediaStoreData.DescribeObject.DescribeObject
instance GHC.Show.Show Network.AWS.MediaStoreData.DescribeObject.DescribeObject
instance GHC.Read.Read Network.AWS.MediaStoreData.DescribeObject.DescribeObject
instance GHC.Classes.Eq Network.AWS.MediaStoreData.DescribeObject.DescribeObject
instance GHC.Generics.Generic Network.AWS.MediaStoreData.DescribeObject.DescribeObjectResponse
instance GHC.Show.Show Network.AWS.MediaStoreData.DescribeObject.DescribeObjectResponse
instance GHC.Read.Read Network.AWS.MediaStoreData.DescribeObject.DescribeObjectResponse
instance GHC.Classes.Eq Network.AWS.MediaStoreData.DescribeObject.DescribeObjectResponse
instance Network.AWS.Types.AWSRequest Network.AWS.MediaStoreData.DescribeObject.DescribeObject
instance Control.DeepSeq.NFData Network.AWS.MediaStoreData.DescribeObject.DescribeObjectResponse
instance Data.Hashable.Class.Hashable Network.AWS.MediaStoreData.DescribeObject.DescribeObject
instance Control.DeepSeq.NFData Network.AWS.MediaStoreData.DescribeObject.DescribeObject
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.MediaStoreData.DescribeObject.DescribeObject
instance Network.AWS.Data.Path.ToPath Network.AWS.MediaStoreData.DescribeObject.DescribeObject
instance Network.AWS.Data.Query.ToQuery Network.AWS.MediaStoreData.DescribeObject.DescribeObject


-- | Deletes an object at the specified path.
module Network.AWS.MediaStoreData.DeleteObject

-- | <i>See:</i> <a>newDeleteObject</a> smart constructor.
data DeleteObject
DeleteObject' :: Text -> DeleteObject

-- | The path (including the file name) where the object is stored in the
--   container. Format: &lt;folder name&gt;/&lt;folder name&gt;/&lt;file
--   name&gt;
[$sel:path:DeleteObject'] :: DeleteObject -> Text

-- | Create a value of <a>DeleteObject</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:path:DeleteObject'</a>, <a>deleteObject_path</a> - The path
--   (including the file name) where the object is stored in the container.
--   Format: &lt;folder name&gt;/&lt;folder name&gt;/&lt;file name&gt;
newDeleteObject :: Text -> DeleteObject

-- | The path (including the file name) where the object is stored in the
--   container. Format: &lt;folder name&gt;/&lt;folder name&gt;/&lt;file
--   name&gt;
deleteObject_path :: Lens' DeleteObject Text

-- | <i>See:</i> <a>newDeleteObjectResponse</a> smart constructor.
data DeleteObjectResponse
DeleteObjectResponse' :: Int -> DeleteObjectResponse

-- | The response's http status code.
[$sel:httpStatus:DeleteObjectResponse'] :: DeleteObjectResponse -> Int

-- | Create a value of <a>DeleteObjectResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteObjectResponse'</a>,
--   <a>deleteObjectResponse_httpStatus</a> - The response's http status
--   code.
newDeleteObjectResponse :: Int -> DeleteObjectResponse

-- | The response's http status code.
deleteObjectResponse_httpStatus :: Lens' DeleteObjectResponse Int
instance GHC.Generics.Generic Network.AWS.MediaStoreData.DeleteObject.DeleteObject
instance GHC.Show.Show Network.AWS.MediaStoreData.DeleteObject.DeleteObject
instance GHC.Read.Read Network.AWS.MediaStoreData.DeleteObject.DeleteObject
instance GHC.Classes.Eq Network.AWS.MediaStoreData.DeleteObject.DeleteObject
instance GHC.Generics.Generic Network.AWS.MediaStoreData.DeleteObject.DeleteObjectResponse
instance GHC.Show.Show Network.AWS.MediaStoreData.DeleteObject.DeleteObjectResponse
instance GHC.Read.Read Network.AWS.MediaStoreData.DeleteObject.DeleteObjectResponse
instance GHC.Classes.Eq Network.AWS.MediaStoreData.DeleteObject.DeleteObjectResponse
instance Network.AWS.Types.AWSRequest Network.AWS.MediaStoreData.DeleteObject.DeleteObject
instance Control.DeepSeq.NFData Network.AWS.MediaStoreData.DeleteObject.DeleteObjectResponse
instance Data.Hashable.Class.Hashable Network.AWS.MediaStoreData.DeleteObject.DeleteObject
instance Control.DeepSeq.NFData Network.AWS.MediaStoreData.DeleteObject.DeleteObject
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.MediaStoreData.DeleteObject.DeleteObject
instance Network.AWS.Data.Path.ToPath Network.AWS.MediaStoreData.DeleteObject.DeleteObject
instance Network.AWS.Data.Query.ToQuery Network.AWS.MediaStoreData.DeleteObject.DeleteObject


module Network.AWS.MediaStoreData.Lens

-- | Indicates the storage class of a <tt>Put</tt> request. Defaults to
--   high-performance temporal storage class, and objects are persisted
--   into durable storage shortly after being received.
putObject_storageClass :: Lens' PutObject (Maybe StorageClass)

-- | Indicates the availability of an object while it is still uploading.
--   If the value is set to <tt>streaming</tt>, the object is available for
--   downloading after some initial buffering but before the object is
--   uploaded completely. If the value is set to <tt>standard</tt>, the
--   object is available for downloading only when it is uploaded
--   completely. The default value for this header is <tt>standard</tt>.
--   
--   To use this header, you must also set the HTTP
--   <tt>Transfer-Encoding</tt> header to <tt>chunked</tt>.
putObject_uploadAvailability :: Lens' PutObject (Maybe UploadAvailability)

-- | An optional <tt>CacheControl</tt> header that allows the caller to
--   control the object's cache behavior. Headers can be passed in as
--   specified in the HTTP at
--   <a>https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9</a>.
--   
--   Headers with a custom user-defined value are also accepted.
putObject_cacheControl :: Lens' PutObject (Maybe Text)

-- | The content type of the object.
putObject_contentType :: Lens' PutObject (Maybe Text)

-- | The path (including the file name) where the object is stored in the
--   container. Format: &lt;folder name&gt;/&lt;folder name&gt;/&lt;file
--   name&gt;
--   
--   For example, to upload the file <tt>mlaw.avi</tt> to the folder path
--   <tt>premium\canada</tt> in the container <tt>movies</tt>, enter the
--   path <tt>premium/canada/mlaw.avi</tt>.
--   
--   Do not include the container name in this path.
--   
--   If the path includes any folders that don't exist yet, the service
--   creates them. For example, suppose you have an existing
--   <tt>premium/usa</tt> subfolder. If you specify
--   <tt>premium/canada</tt>, the service creates a <tt>canada</tt>
--   subfolder in the <tt>premium</tt> folder. You then have two
--   subfolders, <tt>usa</tt> and <tt>canada</tt>, in the <tt>premium</tt>
--   folder.
--   
--   There is no correlation between the path to the source and the path
--   (folders) in the container in AWS Elemental MediaStore.
--   
--   For more information about folders and how they exist in a container,
--   see the <a>AWS Elemental MediaStore User Guide</a>.
--   
--   The file name is the name that is assigned to the file that you
--   upload. The file can have the same name inside and outside of AWS
--   Elemental MediaStore, or it can have the same name. The file name can
--   include or omit an extension.
putObject_path :: Lens' PutObject Text

-- | The bytes to be stored.
putObject_body :: Lens' PutObject HashedBody

-- | Unique identifier of the object in the container.
putObjectResponse_eTag :: Lens' PutObjectResponse (Maybe Text)

-- | The storage class where the object was persisted. The class should be
--   “Temporal”.
putObjectResponse_storageClass :: Lens' PutObjectResponse (Maybe StorageClass)

-- | The SHA256 digest of the object that is persisted.
putObjectResponse_contentSHA256 :: Lens' PutObjectResponse (Maybe Text)

-- | The response's http status code.
putObjectResponse_httpStatus :: Lens' PutObjectResponse Int

-- | The path (including the file name) where the object is stored in the
--   container. Format: &lt;folder name&gt;/&lt;folder name&gt;/&lt;file
--   name&gt;
deleteObject_path :: Lens' DeleteObject Text

-- | The response's http status code.
deleteObjectResponse_httpStatus :: Lens' DeleteObjectResponse Int

-- | The path (including the file name) where the object is stored in the
--   container. Format: &lt;folder name&gt;/&lt;folder name&gt;/&lt;file
--   name&gt;
describeObject_path :: Lens' DescribeObject Text

-- | The ETag that represents a unique instance of the object.
describeObjectResponse_eTag :: Lens' DescribeObjectResponse (Maybe Text)

-- | The length of the object in bytes.
describeObjectResponse_contentLength :: Lens' DescribeObjectResponse (Maybe Natural)

-- | An optional <tt>CacheControl</tt> header that allows the caller to
--   control the object's cache behavior. Headers can be passed in as
--   specified in the HTTP at
--   <a>https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9</a>.
--   
--   Headers with a custom user-defined value are also accepted.
describeObjectResponse_cacheControl :: Lens' DescribeObjectResponse (Maybe Text)

-- | The date and time that the object was last modified.
describeObjectResponse_lastModified :: Lens' DescribeObjectResponse (Maybe UTCTime)

-- | The content type of the object.
describeObjectResponse_contentType :: Lens' DescribeObjectResponse (Maybe Text)

-- | The response's http status code.
describeObjectResponse_httpStatus :: Lens' DescribeObjectResponse Int

-- | The range bytes of an object to retrieve. For more information about
--   the <tt>Range</tt> header, see
--   <a>http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35</a>.
--   AWS Elemental MediaStore ignores this header for partially uploaded
--   objects that have streaming upload availability.
getObject_range :: Lens' GetObject (Maybe Text)

-- | The path (including the file name) where the object is stored in the
--   container. Format: &lt;folder name&gt;/&lt;folder name&gt;/&lt;file
--   name&gt;
--   
--   For example, to upload the file <tt>mlaw.avi</tt> to the folder path
--   <tt>premium\canada</tt> in the container <tt>movies</tt>, enter the
--   path <tt>premium/canada/mlaw.avi</tt>.
--   
--   Do not include the container name in this path.
--   
--   If the path includes any folders that don't exist yet, the service
--   creates them. For example, suppose you have an existing
--   <tt>premium/usa</tt> subfolder. If you specify
--   <tt>premium/canada</tt>, the service creates a <tt>canada</tt>
--   subfolder in the <tt>premium</tt> folder. You then have two
--   subfolders, <tt>usa</tt> and <tt>canada</tt>, in the <tt>premium</tt>
--   folder.
--   
--   There is no correlation between the path to the source and the path
--   (folders) in the container in AWS Elemental MediaStore.
--   
--   For more information about folders and how they exist in a container,
--   see the <a>AWS Elemental MediaStore User Guide</a>.
--   
--   The file name is the name that is assigned to the file that you
--   upload. The file can have the same name inside and outside of AWS
--   Elemental MediaStore, or it can have the same name. The file name can
--   include or omit an extension.
getObject_path :: Lens' GetObject Text

-- | The ETag that represents a unique instance of the object.
getObjectResponse_eTag :: Lens' GetObjectResponse (Maybe Text)

-- | The length of the object in bytes.
getObjectResponse_contentLength :: Lens' GetObjectResponse (Maybe Natural)

-- | An optional <tt>CacheControl</tt> header that allows the caller to
--   control the object's cache behavior. Headers can be passed in as
--   specified in the HTTP spec at
--   <a>https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9</a>.
--   
--   Headers with a custom user-defined value are also accepted.
getObjectResponse_cacheControl :: Lens' GetObjectResponse (Maybe Text)

-- | The date and time that the object was last modified.
getObjectResponse_lastModified :: Lens' GetObjectResponse (Maybe UTCTime)

-- | The range of bytes to retrieve.
getObjectResponse_contentRange :: Lens' GetObjectResponse (Maybe Text)

-- | The content type of the object.
getObjectResponse_contentType :: Lens' GetObjectResponse (Maybe Text)

-- | The HTML status code of the request. Status codes ranging from 200 to
--   299 indicate success. All other status codes indicate the type of
--   error that occurred.
getObjectResponse_statusCode :: Lens' GetObjectResponse Int

-- | The bytes of the object.
getObjectResponse_body :: Lens' GetObjectResponse ResponseBody

-- | The path in the container from which to retrieve items. Format:
--   &lt;folder name&gt;/&lt;folder name&gt;/&lt;file name&gt;
listItems_path :: Lens' ListItems (Maybe Text)

-- | The token that identifies which batch of results that you want to see.
--   For example, you submit a <tt>ListItems</tt> request with
--   <tt>MaxResults</tt> set at 500. The service returns the first batch of
--   results (up to 500) and a <tt>NextToken</tt> value. To see the next
--   batch of results, you can submit the <tt>ListItems</tt> request a
--   second time and specify the <tt>NextToken</tt> value.
--   
--   Tokens expire after 15 minutes.
listItems_nextToken :: Lens' ListItems (Maybe Text)

-- | The maximum number of results to return per API request. For example,
--   you submit a <tt>ListItems</tt> request with <tt>MaxResults</tt> set
--   at 500. Although 2,000 items match your request, the service returns
--   no more than the first 500 items. (The service also returns a
--   <tt>NextToken</tt> value that you can use to fetch the next batch of
--   results.) The service might return fewer results than the
--   <tt>MaxResults</tt> value.
--   
--   If <tt>MaxResults</tt> is not included in the request, the service
--   defaults to pagination with a maximum of 1,000 results per page.
listItems_maxResults :: Lens' ListItems (Maybe Natural)

-- | The metadata entries for the folders and objects at the requested
--   path.
listItemsResponse_items :: Lens' ListItemsResponse (Maybe [Item])

-- | The token that can be used in a request to view the next set of
--   results. For example, you submit a <tt>ListItems</tt> request that
--   matches 2,000 items with <tt>MaxResults</tt> set at 500. The service
--   returns the first batch of results (up to 500) and a
--   <tt>NextToken</tt> value that can be used to fetch the next batch of
--   results.
listItemsResponse_nextToken :: Lens' ListItemsResponse (Maybe Text)

-- | The response's http status code.
listItemsResponse_httpStatus :: Lens' ListItemsResponse Int

-- | The ETag that represents a unique instance of the item.
item_eTag :: Lens' Item (Maybe Text)

-- | The length of the item in bytes.
item_contentLength :: Lens' Item (Maybe Natural)

-- | The name of the item.
item_name :: Lens' Item (Maybe Text)

-- | The item type (folder or object).
item_type :: Lens' Item (Maybe ItemType)

-- | The date and time that the item was last modified.
item_lastModified :: Lens' Item (Maybe UTCTime)

-- | The content type of the item.
item_contentType :: Lens' Item (Maybe Text)


module Network.AWS.MediaStoreData.Waiters


-- | Derived from API version <tt>2017-09-01</tt> of the AWS service
--   descriptions, licensed under Apache 2.0.
--   
--   An AWS Elemental MediaStore asset is an object, similar to an object
--   in the Amazon S3 service. Objects are the fundamental entities that
--   are stored in AWS Elemental MediaStore.
module Network.AWS.MediaStoreData

-- | API version <tt>2017-09-01</tt> of the Amazon Elemental MediaStore
--   Data Plane SDK configuration.
defaultService :: Service

-- | The requested content range is not valid.
_RequestedRangeNotSatisfiableException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The service is temporarily unavailable.
_InternalServerError :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified container was not found for the specified account.
_ContainerNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Could not perform an operation on an object that does not exist.
_ObjectNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | <i>See:</i> <a>newPutObject</a> smart constructor.
data PutObject
PutObject' :: Maybe StorageClass -> Maybe UploadAvailability -> Maybe Text -> Maybe Text -> Text -> HashedBody -> PutObject

-- | Create a value of <a>PutObject</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:storageClass:PutObject'</a>, <a>putObject_storageClass</a> -
--   Indicates the storage class of a <tt>Put</tt> request. Defaults to
--   high-performance temporal storage class, and objects are persisted
--   into durable storage shortly after being received.
--   
--   <a>$sel:uploadAvailability:PutObject'</a>,
--   <a>putObject_uploadAvailability</a> - Indicates the availability of an
--   object while it is still uploading. If the value is set to
--   <tt>streaming</tt>, the object is available for downloading after some
--   initial buffering but before the object is uploaded completely. If the
--   value is set to <tt>standard</tt>, the object is available for
--   downloading only when it is uploaded completely. The default value for
--   this header is <tt>standard</tt>.
--   
--   To use this header, you must also set the HTTP
--   <tt>Transfer-Encoding</tt> header to <tt>chunked</tt>.
--   
--   <a>$sel:cacheControl:PutObject'</a>, <a>putObject_cacheControl</a> -
--   An optional <tt>CacheControl</tt> header that allows the caller to
--   control the object's cache behavior. Headers can be passed in as
--   specified in the HTTP at
--   <a>https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9</a>.
--   
--   Headers with a custom user-defined value are also accepted.
--   
--   <a>$sel:contentType:PutObject'</a>, <a>putObject_contentType</a> - The
--   content type of the object.
--   
--   <a>$sel:path:PutObject'</a>, <a>putObject_path</a> - The path
--   (including the file name) where the object is stored in the container.
--   Format: &lt;folder name&gt;/&lt;folder name&gt;/&lt;file name&gt;
--   
--   For example, to upload the file <tt>mlaw.avi</tt> to the folder path
--   <tt>premium\canada</tt> in the container <tt>movies</tt>, enter the
--   path <tt>premium/canada/mlaw.avi</tt>.
--   
--   Do not include the container name in this path.
--   
--   If the path includes any folders that don't exist yet, the service
--   creates them. For example, suppose you have an existing
--   <tt>premium/usa</tt> subfolder. If you specify
--   <tt>premium/canada</tt>, the service creates a <tt>canada</tt>
--   subfolder in the <tt>premium</tt> folder. You then have two
--   subfolders, <tt>usa</tt> and <tt>canada</tt>, in the <tt>premium</tt>
--   folder.
--   
--   There is no correlation between the path to the source and the path
--   (folders) in the container in AWS Elemental MediaStore.
--   
--   For more information about folders and how they exist in a container,
--   see the <a>AWS Elemental MediaStore User Guide</a>.
--   
--   The file name is the name that is assigned to the file that you
--   upload. The file can have the same name inside and outside of AWS
--   Elemental MediaStore, or it can have the same name. The file name can
--   include or omit an extension.
--   
--   <a>$sel:body:PutObject'</a>, <a>putObject_body</a> - The bytes to be
--   stored.
newPutObject :: Text -> HashedBody -> PutObject

-- | <i>See:</i> <a>newPutObjectResponse</a> smart constructor.
data PutObjectResponse
PutObjectResponse' :: Maybe Text -> Maybe StorageClass -> Maybe Text -> Int -> PutObjectResponse

-- | Create a value of <a>PutObjectResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:eTag:PutObjectResponse'</a>, <a>putObjectResponse_eTag</a> -
--   Unique identifier of the object in the container.
--   
--   <a>$sel:storageClass:PutObject'</a>,
--   <a>putObjectResponse_storageClass</a> - The storage class where the
--   object was persisted. The class should be “Temporal”.
--   
--   <a>$sel:contentSHA256:PutObjectResponse'</a>,
--   <a>putObjectResponse_contentSHA256</a> - The SHA256 digest of the
--   object that is persisted.
--   
--   <a>$sel:httpStatus:PutObjectResponse'</a>,
--   <a>putObjectResponse_httpStatus</a> - The response's http status code.
newPutObjectResponse :: Int -> PutObjectResponse

-- | <i>See:</i> <a>newDeleteObject</a> smart constructor.
data DeleteObject
DeleteObject' :: Text -> DeleteObject

-- | Create a value of <a>DeleteObject</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:path:DeleteObject'</a>, <a>deleteObject_path</a> - The path
--   (including the file name) where the object is stored in the container.
--   Format: &lt;folder name&gt;/&lt;folder name&gt;/&lt;file name&gt;
newDeleteObject :: Text -> DeleteObject

-- | <i>See:</i> <a>newDeleteObjectResponse</a> smart constructor.
data DeleteObjectResponse
DeleteObjectResponse' :: Int -> DeleteObjectResponse

-- | Create a value of <a>DeleteObjectResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteObjectResponse'</a>,
--   <a>deleteObjectResponse_httpStatus</a> - The response's http status
--   code.
newDeleteObjectResponse :: Int -> DeleteObjectResponse

-- | <i>See:</i> <a>newDescribeObject</a> smart constructor.
data DescribeObject
DescribeObject' :: Text -> DescribeObject

-- | Create a value of <a>DescribeObject</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:path:DescribeObject'</a>, <a>describeObject_path</a> - The
--   path (including the file name) where the object is stored in the
--   container. Format: &lt;folder name&gt;/&lt;folder name&gt;/&lt;file
--   name&gt;
newDescribeObject :: Text -> DescribeObject

-- | <i>See:</i> <a>newDescribeObjectResponse</a> smart constructor.
data DescribeObjectResponse
DescribeObjectResponse' :: Maybe Text -> Maybe Natural -> Maybe Text -> Maybe POSIX -> Maybe Text -> Int -> DescribeObjectResponse

-- | Create a value of <a>DescribeObjectResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:eTag:DescribeObjectResponse'</a>,
--   <a>describeObjectResponse_eTag</a> - The ETag that represents a unique
--   instance of the object.
--   
--   <a>$sel:contentLength:DescribeObjectResponse'</a>,
--   <a>describeObjectResponse_contentLength</a> - The length of the object
--   in bytes.
--   
--   <a>$sel:cacheControl:DescribeObjectResponse'</a>,
--   <a>describeObjectResponse_cacheControl</a> - An optional
--   <tt>CacheControl</tt> header that allows the caller to control the
--   object's cache behavior. Headers can be passed in as specified in the
--   HTTP at
--   <a>https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9</a>.
--   
--   Headers with a custom user-defined value are also accepted.
--   
--   <a>$sel:lastModified:DescribeObjectResponse'</a>,
--   <a>describeObjectResponse_lastModified</a> - The date and time that
--   the object was last modified.
--   
--   <a>$sel:contentType:DescribeObjectResponse'</a>,
--   <a>describeObjectResponse_contentType</a> - The content type of the
--   object.
--   
--   <a>$sel:httpStatus:DescribeObjectResponse'</a>,
--   <a>describeObjectResponse_httpStatus</a> - The response's http status
--   code.
newDescribeObjectResponse :: Int -> DescribeObjectResponse

-- | <i>See:</i> <a>newGetObject</a> smart constructor.
data GetObject
GetObject' :: Maybe Text -> Text -> GetObject

-- | Create a value of <a>GetObject</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:range:GetObject'</a>, <a>getObject_range</a> - The range bytes
--   of an object to retrieve. For more information about the
--   <tt>Range</tt> header, see
--   <a>http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35</a>.
--   AWS Elemental MediaStore ignores this header for partially uploaded
--   objects that have streaming upload availability.
--   
--   <a>$sel:path:GetObject'</a>, <a>getObject_path</a> - The path
--   (including the file name) where the object is stored in the container.
--   Format: &lt;folder name&gt;/&lt;folder name&gt;/&lt;file name&gt;
--   
--   For example, to upload the file <tt>mlaw.avi</tt> to the folder path
--   <tt>premium\canada</tt> in the container <tt>movies</tt>, enter the
--   path <tt>premium/canada/mlaw.avi</tt>.
--   
--   Do not include the container name in this path.
--   
--   If the path includes any folders that don't exist yet, the service
--   creates them. For example, suppose you have an existing
--   <tt>premium/usa</tt> subfolder. If you specify
--   <tt>premium/canada</tt>, the service creates a <tt>canada</tt>
--   subfolder in the <tt>premium</tt> folder. You then have two
--   subfolders, <tt>usa</tt> and <tt>canada</tt>, in the <tt>premium</tt>
--   folder.
--   
--   There is no correlation between the path to the source and the path
--   (folders) in the container in AWS Elemental MediaStore.
--   
--   For more information about folders and how they exist in a container,
--   see the <a>AWS Elemental MediaStore User Guide</a>.
--   
--   The file name is the name that is assigned to the file that you
--   upload. The file can have the same name inside and outside of AWS
--   Elemental MediaStore, or it can have the same name. The file name can
--   include or omit an extension.
newGetObject :: Text -> GetObject

-- | <i>See:</i> <a>newGetObjectResponse</a> smart constructor.
data GetObjectResponse
GetObjectResponse' :: Maybe Text -> Maybe Natural -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe Text -> Int -> ResponseBody -> GetObjectResponse

-- | Create a value of <a>GetObjectResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:eTag:GetObjectResponse'</a>, <a>getObjectResponse_eTag</a> -
--   The ETag that represents a unique instance of the object.
--   
--   <a>$sel:contentLength:GetObjectResponse'</a>,
--   <a>getObjectResponse_contentLength</a> - The length of the object in
--   bytes.
--   
--   <a>$sel:cacheControl:GetObjectResponse'</a>,
--   <a>getObjectResponse_cacheControl</a> - An optional
--   <tt>CacheControl</tt> header that allows the caller to control the
--   object's cache behavior. Headers can be passed in as specified in the
--   HTTP spec at
--   <a>https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9</a>.
--   
--   Headers with a custom user-defined value are also accepted.
--   
--   <a>$sel:lastModified:GetObjectResponse'</a>,
--   <a>getObjectResponse_lastModified</a> - The date and time that the
--   object was last modified.
--   
--   <a>$sel:contentRange:GetObjectResponse'</a>,
--   <a>getObjectResponse_contentRange</a> - The range of bytes to
--   retrieve.
--   
--   <a>$sel:contentType:GetObjectResponse'</a>,
--   <a>getObjectResponse_contentType</a> - The content type of the object.
--   
--   <a>$sel:statusCode:GetObjectResponse'</a>,
--   <a>getObjectResponse_statusCode</a> - The HTML status code of the
--   request. Status codes ranging from 200 to 299 indicate success. All
--   other status codes indicate the type of error that occurred.
--   
--   <a>$sel:body:GetObjectResponse'</a>, <a>getObjectResponse_body</a> -
--   The bytes of the object.
newGetObjectResponse :: Int -> ResponseBody -> GetObjectResponse

-- | <i>See:</i> <a>newListItems</a> smart constructor.
data ListItems
ListItems' :: Maybe Text -> Maybe Text -> Maybe Natural -> ListItems

-- | Create a value of <a>ListItems</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:path:ListItems'</a>, <a>listItems_path</a> - The path in the
--   container from which to retrieve items. Format: &lt;folder
--   name&gt;/&lt;folder name&gt;/&lt;file name&gt;
--   
--   <a>$sel:nextToken:ListItems'</a>, <a>listItems_nextToken</a> - The
--   token that identifies which batch of results that you want to see. For
--   example, you submit a <tt>ListItems</tt> request with
--   <tt>MaxResults</tt> set at 500. The service returns the first batch of
--   results (up to 500) and a <tt>NextToken</tt> value. To see the next
--   batch of results, you can submit the <tt>ListItems</tt> request a
--   second time and specify the <tt>NextToken</tt> value.
--   
--   Tokens expire after 15 minutes.
--   
--   <a>$sel:maxResults:ListItems'</a>, <a>listItems_maxResults</a> - The
--   maximum number of results to return per API request. For example, you
--   submit a <tt>ListItems</tt> request with <tt>MaxResults</tt> set at
--   500. Although 2,000 items match your request, the service returns no
--   more than the first 500 items. (The service also returns a
--   <tt>NextToken</tt> value that you can use to fetch the next batch of
--   results.) The service might return fewer results than the
--   <tt>MaxResults</tt> value.
--   
--   If <tt>MaxResults</tt> is not included in the request, the service
--   defaults to pagination with a maximum of 1,000 results per page.
newListItems :: ListItems

-- | <i>See:</i> <a>newListItemsResponse</a> smart constructor.
data ListItemsResponse
ListItemsResponse' :: Maybe [Item] -> Maybe Text -> Int -> ListItemsResponse

-- | Create a value of <a>ListItemsResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:items:ListItemsResponse'</a>, <a>listItemsResponse_items</a> -
--   The metadata entries for the folders and objects at the requested
--   path.
--   
--   <a>$sel:nextToken:ListItems'</a>, <a>listItemsResponse_nextToken</a> -
--   The token that can be used in a request to view the next set of
--   results. For example, you submit a <tt>ListItems</tt> request that
--   matches 2,000 items with <tt>MaxResults</tt> set at 500. The service
--   returns the first batch of results (up to 500) and a
--   <tt>NextToken</tt> value that can be used to fetch the next batch of
--   results.
--   
--   <a>$sel:httpStatus:ListItemsResponse'</a>,
--   <a>listItemsResponse_httpStatus</a> - The response's http status code.
newListItemsResponse :: Int -> ListItemsResponse
newtype ItemType
ItemType' :: Text -> ItemType
[fromItemType] :: ItemType -> Text
pattern ItemType_FOLDER :: ItemType
pattern ItemType_OBJECT :: ItemType
newtype StorageClass
StorageClass' :: Text -> StorageClass
[fromStorageClass] :: StorageClass -> Text
pattern StorageClass_TEMPORAL :: StorageClass
newtype UploadAvailability
UploadAvailability' :: Text -> UploadAvailability
[fromUploadAvailability] :: UploadAvailability -> Text
pattern UploadAvailability_STANDARD :: UploadAvailability
pattern UploadAvailability_STREAMING :: UploadAvailability

-- | A metadata entry for a folder or object.
--   
--   <i>See:</i> <a>newItem</a> smart constructor.
data Item
Item' :: Maybe Text -> Maybe Natural -> Maybe Text -> Maybe ItemType -> Maybe POSIX -> Maybe Text -> Item

-- | Create a value of <a>Item</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:eTag:Item'</a>, <a>item_eTag</a> - The ETag that represents a
--   unique instance of the item.
--   
--   <a>$sel:contentLength:Item'</a>, <a>item_contentLength</a> - The
--   length of the item in bytes.
--   
--   <a>$sel:name:Item'</a>, <a>item_name</a> - The name of the item.
--   
--   <a>$sel:type':Item'</a>, <a>item_type</a> - The item type (folder or
--   object).
--   
--   <a>$sel:lastModified:Item'</a>, <a>item_lastModified</a> - The date
--   and time that the item was last modified.
--   
--   <a>$sel:contentType:Item'</a>, <a>item_contentType</a> - The content
--   type of the item.
newItem :: Item
