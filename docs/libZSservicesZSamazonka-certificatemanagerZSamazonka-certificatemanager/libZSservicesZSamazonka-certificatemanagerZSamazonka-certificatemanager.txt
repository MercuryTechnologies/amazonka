-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/

@package libZSservicesZSamazonka-certificatemanagerZSamazonka-certificatemanager
@version 2.0


module Amazonka.CertificateManager.Types.CertificateStatus
newtype CertificateStatus
CertificateStatus' :: Text -> CertificateStatus
[fromCertificateStatus] :: CertificateStatus -> Text
pattern CertificateStatus_EXPIRED :: CertificateStatus
pattern CertificateStatus_FAILED :: CertificateStatus
pattern CertificateStatus_INACTIVE :: CertificateStatus
pattern CertificateStatus_ISSUED :: CertificateStatus
pattern CertificateStatus_PENDING_VALIDATION :: CertificateStatus
pattern CertificateStatus_REVOKED :: CertificateStatus
pattern CertificateStatus_VALIDATION_TIMED_OUT :: CertificateStatus
instance Amazonka.Data.XML.ToXML Amazonka.CertificateManager.Types.CertificateStatus.CertificateStatus
instance Amazonka.Data.XML.FromXML Amazonka.CertificateManager.Types.CertificateStatus.CertificateStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.CertificateManager.Types.CertificateStatus.CertificateStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.CertificateManager.Types.CertificateStatus.CertificateStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.CertificateManager.Types.CertificateStatus.CertificateStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.CertificateManager.Types.CertificateStatus.CertificateStatus
instance Amazonka.Data.Query.ToQuery Amazonka.CertificateManager.Types.CertificateStatus.CertificateStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.CertificateManager.Types.CertificateStatus.CertificateStatus
instance Amazonka.Data.Log.ToLog Amazonka.CertificateManager.Types.CertificateStatus.CertificateStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.CertificateManager.Types.CertificateStatus.CertificateStatus
instance Amazonka.Data.Text.ToText Amazonka.CertificateManager.Types.CertificateStatus.CertificateStatus
instance Amazonka.Data.Text.FromText Amazonka.CertificateManager.Types.CertificateStatus.CertificateStatus
instance Control.DeepSeq.NFData Amazonka.CertificateManager.Types.CertificateStatus.CertificateStatus
instance Data.Hashable.Class.Hashable Amazonka.CertificateManager.Types.CertificateStatus.CertificateStatus
instance GHC.Generics.Generic Amazonka.CertificateManager.Types.CertificateStatus.CertificateStatus
instance GHC.Classes.Ord Amazonka.CertificateManager.Types.CertificateStatus.CertificateStatus
instance GHC.Classes.Eq Amazonka.CertificateManager.Types.CertificateStatus.CertificateStatus
instance GHC.Read.Read Amazonka.CertificateManager.Types.CertificateStatus.CertificateStatus
instance GHC.Show.Show Amazonka.CertificateManager.Types.CertificateStatus.CertificateStatus


module Amazonka.CertificateManager.Types.CertificateSummary

-- | This structure is returned in the response object of ListCertificates
--   action.
--   
--   <i>See:</i> <a>newCertificateSummary</a> smart constructor.
data CertificateSummary
CertificateSummary' :: Maybe Text -> Maybe Text -> CertificateSummary

-- | Amazon Resource Name (ARN) of the certificate. This is of the form:
--   
--   <pre>
--   arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   For more information about ARNs, see <a>Amazon Resource Names
--   (ARNs)</a>.
[$sel:certificateArn:CertificateSummary'] :: CertificateSummary -> Maybe Text

-- | Fully qualified domain name (FQDN), such as www.example.com or
--   example.com, for the certificate.
[$sel:domainName:CertificateSummary'] :: CertificateSummary -> Maybe Text

-- | Create a value of <a>CertificateSummary</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:certificateArn:CertificateSummary'</a>,
--   <a>certificateSummary_certificateArn</a> - Amazon Resource Name (ARN)
--   of the certificate. This is of the form:
--   
--   <pre>
--   arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   For more information about ARNs, see <a>Amazon Resource Names
--   (ARNs)</a>.
--   
--   <a>$sel:domainName:CertificateSummary'</a>,
--   <a>certificateSummary_domainName</a> - Fully qualified domain name
--   (FQDN), such as www.example.com or example.com, for the certificate.
newCertificateSummary :: CertificateSummary

-- | Amazon Resource Name (ARN) of the certificate. This is of the form:
--   
--   <pre>
--   arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   For more information about ARNs, see <a>Amazon Resource Names
--   (ARNs)</a>.
certificateSummary_certificateArn :: Lens' CertificateSummary (Maybe Text)

-- | Fully qualified domain name (FQDN), such as www.example.com or
--   example.com, for the certificate.
certificateSummary_domainName :: Lens' CertificateSummary (Maybe Text)
instance GHC.Generics.Generic Amazonka.CertificateManager.Types.CertificateSummary.CertificateSummary
instance GHC.Show.Show Amazonka.CertificateManager.Types.CertificateSummary.CertificateSummary
instance GHC.Read.Read Amazonka.CertificateManager.Types.CertificateSummary.CertificateSummary
instance GHC.Classes.Eq Amazonka.CertificateManager.Types.CertificateSummary.CertificateSummary
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.CertificateManager.Types.CertificateSummary.CertificateSummary
instance Data.Hashable.Class.Hashable Amazonka.CertificateManager.Types.CertificateSummary.CertificateSummary
instance Control.DeepSeq.NFData Amazonka.CertificateManager.Types.CertificateSummary.CertificateSummary


module Amazonka.CertificateManager.Types.CertificateTransparencyLoggingPreference
newtype CertificateTransparencyLoggingPreference
CertificateTransparencyLoggingPreference' :: Text -> CertificateTransparencyLoggingPreference
[fromCertificateTransparencyLoggingPreference] :: CertificateTransparencyLoggingPreference -> Text
pattern CertificateTransparencyLoggingPreference_DISABLED :: CertificateTransparencyLoggingPreference
pattern CertificateTransparencyLoggingPreference_ENABLED :: CertificateTransparencyLoggingPreference
instance Amazonka.Data.XML.ToXML Amazonka.CertificateManager.Types.CertificateTransparencyLoggingPreference.CertificateTransparencyLoggingPreference
instance Amazonka.Data.XML.FromXML Amazonka.CertificateManager.Types.CertificateTransparencyLoggingPreference.CertificateTransparencyLoggingPreference
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.CertificateManager.Types.CertificateTransparencyLoggingPreference.CertificateTransparencyLoggingPreference
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.CertificateManager.Types.CertificateTransparencyLoggingPreference.CertificateTransparencyLoggingPreference
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.CertificateManager.Types.CertificateTransparencyLoggingPreference.CertificateTransparencyLoggingPreference
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.CertificateManager.Types.CertificateTransparencyLoggingPreference.CertificateTransparencyLoggingPreference
instance Amazonka.Data.Query.ToQuery Amazonka.CertificateManager.Types.CertificateTransparencyLoggingPreference.CertificateTransparencyLoggingPreference
instance Amazonka.Data.Headers.ToHeader Amazonka.CertificateManager.Types.CertificateTransparencyLoggingPreference.CertificateTransparencyLoggingPreference
instance Amazonka.Data.Log.ToLog Amazonka.CertificateManager.Types.CertificateTransparencyLoggingPreference.CertificateTransparencyLoggingPreference
instance Amazonka.Data.ByteString.ToByteString Amazonka.CertificateManager.Types.CertificateTransparencyLoggingPreference.CertificateTransparencyLoggingPreference
instance Amazonka.Data.Text.ToText Amazonka.CertificateManager.Types.CertificateTransparencyLoggingPreference.CertificateTransparencyLoggingPreference
instance Amazonka.Data.Text.FromText Amazonka.CertificateManager.Types.CertificateTransparencyLoggingPreference.CertificateTransparencyLoggingPreference
instance Control.DeepSeq.NFData Amazonka.CertificateManager.Types.CertificateTransparencyLoggingPreference.CertificateTransparencyLoggingPreference
instance Data.Hashable.Class.Hashable Amazonka.CertificateManager.Types.CertificateTransparencyLoggingPreference.CertificateTransparencyLoggingPreference
instance GHC.Generics.Generic Amazonka.CertificateManager.Types.CertificateTransparencyLoggingPreference.CertificateTransparencyLoggingPreference
instance GHC.Classes.Ord Amazonka.CertificateManager.Types.CertificateTransparencyLoggingPreference.CertificateTransparencyLoggingPreference
instance GHC.Classes.Eq Amazonka.CertificateManager.Types.CertificateTransparencyLoggingPreference.CertificateTransparencyLoggingPreference
instance GHC.Read.Read Amazonka.CertificateManager.Types.CertificateTransparencyLoggingPreference.CertificateTransparencyLoggingPreference
instance GHC.Show.Show Amazonka.CertificateManager.Types.CertificateTransparencyLoggingPreference.CertificateTransparencyLoggingPreference


module Amazonka.CertificateManager.Types.CertificateOptions

-- | Structure that contains options for your certificate. Currently, you
--   can use this only to specify whether to opt in to or out of
--   certificate transparency logging. Some browsers require that public
--   certificates issued for your domain be recorded in a log. Certificates
--   that are not logged typically generate a browser error. Transparency
--   makes it possible for you to detect SSL/TLS certificates that have
--   been mistakenly or maliciously issued for your domain. For general
--   information, see <a>Certificate Transparency Logging</a>.
--   
--   <i>See:</i> <a>newCertificateOptions</a> smart constructor.
data CertificateOptions
CertificateOptions' :: Maybe CertificateTransparencyLoggingPreference -> CertificateOptions

-- | You can opt out of certificate transparency logging by specifying the
--   <tt>DISABLED</tt> option. Opt in by specifying <tt>ENABLED</tt>.
[$sel:certificateTransparencyLoggingPreference:CertificateOptions'] :: CertificateOptions -> Maybe CertificateTransparencyLoggingPreference

-- | Create a value of <a>CertificateOptions</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:certificateTransparencyLoggingPreference:CertificateOptions'</a>,
--   <a>certificateOptions_certificateTransparencyLoggingPreference</a> -
--   You can opt out of certificate transparency logging by specifying the
--   <tt>DISABLED</tt> option. Opt in by specifying <tt>ENABLED</tt>.
newCertificateOptions :: CertificateOptions

-- | You can opt out of certificate transparency logging by specifying the
--   <tt>DISABLED</tt> option. Opt in by specifying <tt>ENABLED</tt>.
certificateOptions_certificateTransparencyLoggingPreference :: Lens' CertificateOptions (Maybe CertificateTransparencyLoggingPreference)
instance GHC.Generics.Generic Amazonka.CertificateManager.Types.CertificateOptions.CertificateOptions
instance GHC.Show.Show Amazonka.CertificateManager.Types.CertificateOptions.CertificateOptions
instance GHC.Read.Read Amazonka.CertificateManager.Types.CertificateOptions.CertificateOptions
instance GHC.Classes.Eq Amazonka.CertificateManager.Types.CertificateOptions.CertificateOptions
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.CertificateManager.Types.CertificateOptions.CertificateOptions
instance Data.Hashable.Class.Hashable Amazonka.CertificateManager.Types.CertificateOptions.CertificateOptions
instance Control.DeepSeq.NFData Amazonka.CertificateManager.Types.CertificateOptions.CertificateOptions
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.CertificateManager.Types.CertificateOptions.CertificateOptions


module Amazonka.CertificateManager.Types.CertificateType
newtype CertificateType
CertificateType' :: Text -> CertificateType
[fromCertificateType] :: CertificateType -> Text
pattern CertificateType_AMAZON_ISSUED :: CertificateType
pattern CertificateType_IMPORTED :: CertificateType
pattern CertificateType_PRIVATE :: CertificateType
instance Amazonka.Data.XML.ToXML Amazonka.CertificateManager.Types.CertificateType.CertificateType
instance Amazonka.Data.XML.FromXML Amazonka.CertificateManager.Types.CertificateType.CertificateType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.CertificateManager.Types.CertificateType.CertificateType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.CertificateManager.Types.CertificateType.CertificateType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.CertificateManager.Types.CertificateType.CertificateType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.CertificateManager.Types.CertificateType.CertificateType
instance Amazonka.Data.Query.ToQuery Amazonka.CertificateManager.Types.CertificateType.CertificateType
instance Amazonka.Data.Headers.ToHeader Amazonka.CertificateManager.Types.CertificateType.CertificateType
instance Amazonka.Data.Log.ToLog Amazonka.CertificateManager.Types.CertificateType.CertificateType
instance Amazonka.Data.ByteString.ToByteString Amazonka.CertificateManager.Types.CertificateType.CertificateType
instance Amazonka.Data.Text.ToText Amazonka.CertificateManager.Types.CertificateType.CertificateType
instance Amazonka.Data.Text.FromText Amazonka.CertificateManager.Types.CertificateType.CertificateType
instance Control.DeepSeq.NFData Amazonka.CertificateManager.Types.CertificateType.CertificateType
instance Data.Hashable.Class.Hashable Amazonka.CertificateManager.Types.CertificateType.CertificateType
instance GHC.Generics.Generic Amazonka.CertificateManager.Types.CertificateType.CertificateType
instance GHC.Classes.Ord Amazonka.CertificateManager.Types.CertificateType.CertificateType
instance GHC.Classes.Eq Amazonka.CertificateManager.Types.CertificateType.CertificateType
instance GHC.Read.Read Amazonka.CertificateManager.Types.CertificateType.CertificateType
instance GHC.Show.Show Amazonka.CertificateManager.Types.CertificateType.CertificateType


module Amazonka.CertificateManager.Types.DomainStatus
newtype DomainStatus
DomainStatus' :: Text -> DomainStatus
[fromDomainStatus] :: DomainStatus -> Text
pattern DomainStatus_FAILED :: DomainStatus
pattern DomainStatus_PENDING_VALIDATION :: DomainStatus
pattern DomainStatus_SUCCESS :: DomainStatus
instance Amazonka.Data.XML.ToXML Amazonka.CertificateManager.Types.DomainStatus.DomainStatus
instance Amazonka.Data.XML.FromXML Amazonka.CertificateManager.Types.DomainStatus.DomainStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.CertificateManager.Types.DomainStatus.DomainStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.CertificateManager.Types.DomainStatus.DomainStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.CertificateManager.Types.DomainStatus.DomainStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.CertificateManager.Types.DomainStatus.DomainStatus
instance Amazonka.Data.Query.ToQuery Amazonka.CertificateManager.Types.DomainStatus.DomainStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.CertificateManager.Types.DomainStatus.DomainStatus
instance Amazonka.Data.Log.ToLog Amazonka.CertificateManager.Types.DomainStatus.DomainStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.CertificateManager.Types.DomainStatus.DomainStatus
instance Amazonka.Data.Text.ToText Amazonka.CertificateManager.Types.DomainStatus.DomainStatus
instance Amazonka.Data.Text.FromText Amazonka.CertificateManager.Types.DomainStatus.DomainStatus
instance Control.DeepSeq.NFData Amazonka.CertificateManager.Types.DomainStatus.DomainStatus
instance Data.Hashable.Class.Hashable Amazonka.CertificateManager.Types.DomainStatus.DomainStatus
instance GHC.Generics.Generic Amazonka.CertificateManager.Types.DomainStatus.DomainStatus
instance GHC.Classes.Ord Amazonka.CertificateManager.Types.DomainStatus.DomainStatus
instance GHC.Classes.Eq Amazonka.CertificateManager.Types.DomainStatus.DomainStatus
instance GHC.Read.Read Amazonka.CertificateManager.Types.DomainStatus.DomainStatus
instance GHC.Show.Show Amazonka.CertificateManager.Types.DomainStatus.DomainStatus


module Amazonka.CertificateManager.Types.DomainValidationOption

-- | Contains information about the domain names that you want ACM to use
--   to send you emails that enable you to validate domain ownership.
--   
--   <i>See:</i> <a>newDomainValidationOption</a> smart constructor.
data DomainValidationOption
DomainValidationOption' :: Text -> Text -> DomainValidationOption

-- | A fully qualified domain name (FQDN) in the certificate request.
[$sel:domainName:DomainValidationOption'] :: DomainValidationOption -> Text

-- | The domain name that you want ACM to use to send you validation
--   emails. This domain name is the suffix of the email addresses that you
--   want ACM to use. This must be the same as the <tt>DomainName</tt>
--   value or a superdomain of the <tt>DomainName</tt> value. For example,
--   if you request a certificate for <tt>testing.example.com</tt>, you can
--   specify <tt>example.com</tt> for this value. In that case, ACM sends
--   domain validation emails to the following five addresses:
--   
--   <ul>
--   <li>admin@example.com</li>
--   <li>administrator@example.com</li>
--   <li>hostmaster@example.com</li>
--   <li>postmaster@example.com</li>
--   <li>webmaster@example.com</li>
--   </ul>
[$sel:validationDomain:DomainValidationOption'] :: DomainValidationOption -> Text

-- | Create a value of <a>DomainValidationOption</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:domainName:DomainValidationOption'</a>,
--   <a>domainValidationOption_domainName</a> - A fully qualified domain
--   name (FQDN) in the certificate request.
--   
--   <a>$sel:validationDomain:DomainValidationOption'</a>,
--   <a>domainValidationOption_validationDomain</a> - The domain name that
--   you want ACM to use to send you validation emails. This domain name is
--   the suffix of the email addresses that you want ACM to use. This must
--   be the same as the <tt>DomainName</tt> value or a superdomain of the
--   <tt>DomainName</tt> value. For example, if you request a certificate
--   for <tt>testing.example.com</tt>, you can specify <tt>example.com</tt>
--   for this value. In that case, ACM sends domain validation emails to
--   the following five addresses:
--   
--   <ul>
--   <li>admin@example.com</li>
--   <li>administrator@example.com</li>
--   <li>hostmaster@example.com</li>
--   <li>postmaster@example.com</li>
--   <li>webmaster@example.com</li>
--   </ul>
newDomainValidationOption :: Text -> Text -> DomainValidationOption

-- | A fully qualified domain name (FQDN) in the certificate request.
domainValidationOption_domainName :: Lens' DomainValidationOption Text

-- | The domain name that you want ACM to use to send you validation
--   emails. This domain name is the suffix of the email addresses that you
--   want ACM to use. This must be the same as the <tt>DomainName</tt>
--   value or a superdomain of the <tt>DomainName</tt> value. For example,
--   if you request a certificate for <tt>testing.example.com</tt>, you can
--   specify <tt>example.com</tt> for this value. In that case, ACM sends
--   domain validation emails to the following five addresses:
--   
--   <ul>
--   <li>admin@example.com</li>
--   <li>administrator@example.com</li>
--   <li>hostmaster@example.com</li>
--   <li>postmaster@example.com</li>
--   <li>webmaster@example.com</li>
--   </ul>
domainValidationOption_validationDomain :: Lens' DomainValidationOption Text
instance GHC.Generics.Generic Amazonka.CertificateManager.Types.DomainValidationOption.DomainValidationOption
instance GHC.Show.Show Amazonka.CertificateManager.Types.DomainValidationOption.DomainValidationOption
instance GHC.Read.Read Amazonka.CertificateManager.Types.DomainValidationOption.DomainValidationOption
instance GHC.Classes.Eq Amazonka.CertificateManager.Types.DomainValidationOption.DomainValidationOption
instance Data.Hashable.Class.Hashable Amazonka.CertificateManager.Types.DomainValidationOption.DomainValidationOption
instance Control.DeepSeq.NFData Amazonka.CertificateManager.Types.DomainValidationOption.DomainValidationOption
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.CertificateManager.Types.DomainValidationOption.DomainValidationOption


module Amazonka.CertificateManager.Types.ExpiryEventsConfiguration

-- | Object containing expiration events options associated with an Amazon
--   Web Services account.
--   
--   <i>See:</i> <a>newExpiryEventsConfiguration</a> smart constructor.
data ExpiryEventsConfiguration
ExpiryEventsConfiguration' :: Maybe Natural -> ExpiryEventsConfiguration

-- | Specifies the number of days prior to certificate expiration when ACM
--   starts generating <tt>EventBridge</tt> events. ACM sends one event per
--   day per certificate until the certificate expires. By default,
--   accounts receive events starting 45 days before certificate
--   expiration.
[$sel:daysBeforeExpiry:ExpiryEventsConfiguration'] :: ExpiryEventsConfiguration -> Maybe Natural

-- | Create a value of <a>ExpiryEventsConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:daysBeforeExpiry:ExpiryEventsConfiguration'</a>,
--   <a>expiryEventsConfiguration_daysBeforeExpiry</a> - Specifies the
--   number of days prior to certificate expiration when ACM starts
--   generating <tt>EventBridge</tt> events. ACM sends one event per day
--   per certificate until the certificate expires. By default, accounts
--   receive events starting 45 days before certificate expiration.
newExpiryEventsConfiguration :: ExpiryEventsConfiguration

-- | Specifies the number of days prior to certificate expiration when ACM
--   starts generating <tt>EventBridge</tt> events. ACM sends one event per
--   day per certificate until the certificate expires. By default,
--   accounts receive events starting 45 days before certificate
--   expiration.
expiryEventsConfiguration_daysBeforeExpiry :: Lens' ExpiryEventsConfiguration (Maybe Natural)
instance GHC.Generics.Generic Amazonka.CertificateManager.Types.ExpiryEventsConfiguration.ExpiryEventsConfiguration
instance GHC.Show.Show Amazonka.CertificateManager.Types.ExpiryEventsConfiguration.ExpiryEventsConfiguration
instance GHC.Read.Read Amazonka.CertificateManager.Types.ExpiryEventsConfiguration.ExpiryEventsConfiguration
instance GHC.Classes.Eq Amazonka.CertificateManager.Types.ExpiryEventsConfiguration.ExpiryEventsConfiguration
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.CertificateManager.Types.ExpiryEventsConfiguration.ExpiryEventsConfiguration
instance Data.Hashable.Class.Hashable Amazonka.CertificateManager.Types.ExpiryEventsConfiguration.ExpiryEventsConfiguration
instance Control.DeepSeq.NFData Amazonka.CertificateManager.Types.ExpiryEventsConfiguration.ExpiryEventsConfiguration
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.CertificateManager.Types.ExpiryEventsConfiguration.ExpiryEventsConfiguration


module Amazonka.CertificateManager.Types.ExtendedKeyUsageName
newtype ExtendedKeyUsageName
ExtendedKeyUsageName' :: Text -> ExtendedKeyUsageName
[fromExtendedKeyUsageName] :: ExtendedKeyUsageName -> Text
pattern ExtendedKeyUsageName_ANY :: ExtendedKeyUsageName
pattern ExtendedKeyUsageName_CODE_SIGNING :: ExtendedKeyUsageName
pattern ExtendedKeyUsageName_CUSTOM :: ExtendedKeyUsageName
pattern ExtendedKeyUsageName_EMAIL_PROTECTION :: ExtendedKeyUsageName
pattern ExtendedKeyUsageName_IPSEC_END_SYSTEM :: ExtendedKeyUsageName
pattern ExtendedKeyUsageName_IPSEC_TUNNEL :: ExtendedKeyUsageName
pattern ExtendedKeyUsageName_IPSEC_USER :: ExtendedKeyUsageName
pattern ExtendedKeyUsageName_NONE :: ExtendedKeyUsageName
pattern ExtendedKeyUsageName_OCSP_SIGNING :: ExtendedKeyUsageName
pattern ExtendedKeyUsageName_TIME_STAMPING :: ExtendedKeyUsageName
pattern ExtendedKeyUsageName_TLS_WEB_CLIENT_AUTHENTICATION :: ExtendedKeyUsageName
pattern ExtendedKeyUsageName_TLS_WEB_SERVER_AUTHENTICATION :: ExtendedKeyUsageName
instance Amazonka.Data.XML.ToXML Amazonka.CertificateManager.Types.ExtendedKeyUsageName.ExtendedKeyUsageName
instance Amazonka.Data.XML.FromXML Amazonka.CertificateManager.Types.ExtendedKeyUsageName.ExtendedKeyUsageName
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.CertificateManager.Types.ExtendedKeyUsageName.ExtendedKeyUsageName
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.CertificateManager.Types.ExtendedKeyUsageName.ExtendedKeyUsageName
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.CertificateManager.Types.ExtendedKeyUsageName.ExtendedKeyUsageName
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.CertificateManager.Types.ExtendedKeyUsageName.ExtendedKeyUsageName
instance Amazonka.Data.Query.ToQuery Amazonka.CertificateManager.Types.ExtendedKeyUsageName.ExtendedKeyUsageName
instance Amazonka.Data.Headers.ToHeader Amazonka.CertificateManager.Types.ExtendedKeyUsageName.ExtendedKeyUsageName
instance Amazonka.Data.Log.ToLog Amazonka.CertificateManager.Types.ExtendedKeyUsageName.ExtendedKeyUsageName
instance Amazonka.Data.ByteString.ToByteString Amazonka.CertificateManager.Types.ExtendedKeyUsageName.ExtendedKeyUsageName
instance Amazonka.Data.Text.ToText Amazonka.CertificateManager.Types.ExtendedKeyUsageName.ExtendedKeyUsageName
instance Amazonka.Data.Text.FromText Amazonka.CertificateManager.Types.ExtendedKeyUsageName.ExtendedKeyUsageName
instance Control.DeepSeq.NFData Amazonka.CertificateManager.Types.ExtendedKeyUsageName.ExtendedKeyUsageName
instance Data.Hashable.Class.Hashable Amazonka.CertificateManager.Types.ExtendedKeyUsageName.ExtendedKeyUsageName
instance GHC.Generics.Generic Amazonka.CertificateManager.Types.ExtendedKeyUsageName.ExtendedKeyUsageName
instance GHC.Classes.Ord Amazonka.CertificateManager.Types.ExtendedKeyUsageName.ExtendedKeyUsageName
instance GHC.Classes.Eq Amazonka.CertificateManager.Types.ExtendedKeyUsageName.ExtendedKeyUsageName
instance GHC.Read.Read Amazonka.CertificateManager.Types.ExtendedKeyUsageName.ExtendedKeyUsageName
instance GHC.Show.Show Amazonka.CertificateManager.Types.ExtendedKeyUsageName.ExtendedKeyUsageName


module Amazonka.CertificateManager.Types.ExtendedKeyUsage

-- | The Extended Key Usage X.509 v3 extension defines one or more purposes
--   for which the public key can be used. This is in addition to or in
--   place of the basic purposes specified by the Key Usage extension.
--   
--   <i>See:</i> <a>newExtendedKeyUsage</a> smart constructor.
data ExtendedKeyUsage
ExtendedKeyUsage' :: Maybe Text -> Maybe ExtendedKeyUsageName -> ExtendedKeyUsage

-- | An object identifier (OID) for the extension value. OIDs are strings
--   of numbers separated by periods. The following OIDs are defined in RFC
--   3280 and RFC 5280.
--   
--   <ul>
--   <li><pre>1.3.6.1.5.5.7.3.1 (TLS_WEB_SERVER_AUTHENTICATION)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.2 (TLS_WEB_CLIENT_AUTHENTICATION)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.3 (CODE_SIGNING)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.4 (EMAIL_PROTECTION)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.8 (TIME_STAMPING)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.9 (OCSP_SIGNING)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.5 (IPSEC_END_SYSTEM)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.6 (IPSEC_TUNNEL)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.7 (IPSEC_USER)</pre></li>
--   </ul>
[$sel:oid:ExtendedKeyUsage'] :: ExtendedKeyUsage -> Maybe Text

-- | The name of an Extended Key Usage value.
[$sel:name:ExtendedKeyUsage'] :: ExtendedKeyUsage -> Maybe ExtendedKeyUsageName

-- | Create a value of <a>ExtendedKeyUsage</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:oid:ExtendedKeyUsage'</a>, <a>extendedKeyUsage_oid</a> - An
--   object identifier (OID) for the extension value. OIDs are strings of
--   numbers separated by periods. The following OIDs are defined in RFC
--   3280 and RFC 5280.
--   
--   <ul>
--   <li><pre>1.3.6.1.5.5.7.3.1 (TLS_WEB_SERVER_AUTHENTICATION)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.2 (TLS_WEB_CLIENT_AUTHENTICATION)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.3 (CODE_SIGNING)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.4 (EMAIL_PROTECTION)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.8 (TIME_STAMPING)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.9 (OCSP_SIGNING)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.5 (IPSEC_END_SYSTEM)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.6 (IPSEC_TUNNEL)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.7 (IPSEC_USER)</pre></li>
--   </ul>
--   
--   <a>$sel:name:ExtendedKeyUsage'</a>, <a>extendedKeyUsage_name</a> - The
--   name of an Extended Key Usage value.
newExtendedKeyUsage :: ExtendedKeyUsage

-- | An object identifier (OID) for the extension value. OIDs are strings
--   of numbers separated by periods. The following OIDs are defined in RFC
--   3280 and RFC 5280.
--   
--   <ul>
--   <li><pre>1.3.6.1.5.5.7.3.1 (TLS_WEB_SERVER_AUTHENTICATION)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.2 (TLS_WEB_CLIENT_AUTHENTICATION)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.3 (CODE_SIGNING)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.4 (EMAIL_PROTECTION)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.8 (TIME_STAMPING)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.9 (OCSP_SIGNING)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.5 (IPSEC_END_SYSTEM)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.6 (IPSEC_TUNNEL)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.7 (IPSEC_USER)</pre></li>
--   </ul>
extendedKeyUsage_oid :: Lens' ExtendedKeyUsage (Maybe Text)

-- | The name of an Extended Key Usage value.
extendedKeyUsage_name :: Lens' ExtendedKeyUsage (Maybe ExtendedKeyUsageName)
instance GHC.Generics.Generic Amazonka.CertificateManager.Types.ExtendedKeyUsage.ExtendedKeyUsage
instance GHC.Show.Show Amazonka.CertificateManager.Types.ExtendedKeyUsage.ExtendedKeyUsage
instance GHC.Read.Read Amazonka.CertificateManager.Types.ExtendedKeyUsage.ExtendedKeyUsage
instance GHC.Classes.Eq Amazonka.CertificateManager.Types.ExtendedKeyUsage.ExtendedKeyUsage
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.CertificateManager.Types.ExtendedKeyUsage.ExtendedKeyUsage
instance Data.Hashable.Class.Hashable Amazonka.CertificateManager.Types.ExtendedKeyUsage.ExtendedKeyUsage
instance Control.DeepSeq.NFData Amazonka.CertificateManager.Types.ExtendedKeyUsage.ExtendedKeyUsage


module Amazonka.CertificateManager.Types.FailureReason
newtype FailureReason
FailureReason' :: Text -> FailureReason
[fromFailureReason] :: FailureReason -> Text
pattern FailureReason_ADDITIONAL_VERIFICATION_REQUIRED :: FailureReason
pattern FailureReason_CAA_ERROR :: FailureReason
pattern FailureReason_DOMAIN_NOT_ALLOWED :: FailureReason
pattern FailureReason_DOMAIN_VALIDATION_DENIED :: FailureReason
pattern FailureReason_INVALID_PUBLIC_DOMAIN :: FailureReason
pattern FailureReason_NO_AVAILABLE_CONTACTS :: FailureReason
pattern FailureReason_OTHER :: FailureReason
pattern FailureReason_PCA_ACCESS_DENIED :: FailureReason
pattern FailureReason_PCA_INVALID_ARGS :: FailureReason
pattern FailureReason_PCA_INVALID_ARN :: FailureReason
pattern FailureReason_PCA_INVALID_DURATION :: FailureReason
pattern FailureReason_PCA_INVALID_STATE :: FailureReason
pattern FailureReason_PCA_LIMIT_EXCEEDED :: FailureReason
pattern FailureReason_PCA_NAME_CONSTRAINTS_VALIDATION :: FailureReason
pattern FailureReason_PCA_REQUEST_FAILED :: FailureReason
pattern FailureReason_PCA_RESOURCE_NOT_FOUND :: FailureReason
pattern FailureReason_SLR_NOT_FOUND :: FailureReason
instance Amazonka.Data.XML.ToXML Amazonka.CertificateManager.Types.FailureReason.FailureReason
instance Amazonka.Data.XML.FromXML Amazonka.CertificateManager.Types.FailureReason.FailureReason
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.CertificateManager.Types.FailureReason.FailureReason
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.CertificateManager.Types.FailureReason.FailureReason
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.CertificateManager.Types.FailureReason.FailureReason
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.CertificateManager.Types.FailureReason.FailureReason
instance Amazonka.Data.Query.ToQuery Amazonka.CertificateManager.Types.FailureReason.FailureReason
instance Amazonka.Data.Headers.ToHeader Amazonka.CertificateManager.Types.FailureReason.FailureReason
instance Amazonka.Data.Log.ToLog Amazonka.CertificateManager.Types.FailureReason.FailureReason
instance Amazonka.Data.ByteString.ToByteString Amazonka.CertificateManager.Types.FailureReason.FailureReason
instance Amazonka.Data.Text.ToText Amazonka.CertificateManager.Types.FailureReason.FailureReason
instance Amazonka.Data.Text.FromText Amazonka.CertificateManager.Types.FailureReason.FailureReason
instance Control.DeepSeq.NFData Amazonka.CertificateManager.Types.FailureReason.FailureReason
instance Data.Hashable.Class.Hashable Amazonka.CertificateManager.Types.FailureReason.FailureReason
instance GHC.Generics.Generic Amazonka.CertificateManager.Types.FailureReason.FailureReason
instance GHC.Classes.Ord Amazonka.CertificateManager.Types.FailureReason.FailureReason
instance GHC.Classes.Eq Amazonka.CertificateManager.Types.FailureReason.FailureReason
instance GHC.Read.Read Amazonka.CertificateManager.Types.FailureReason.FailureReason
instance GHC.Show.Show Amazonka.CertificateManager.Types.FailureReason.FailureReason


module Amazonka.CertificateManager.Types.KeyAlgorithm
newtype KeyAlgorithm
KeyAlgorithm' :: Text -> KeyAlgorithm
[fromKeyAlgorithm] :: KeyAlgorithm -> Text
pattern KeyAlgorithm_EC_prime256v1 :: KeyAlgorithm
pattern KeyAlgorithm_EC_secp384r1 :: KeyAlgorithm
pattern KeyAlgorithm_EC_secp521r1 :: KeyAlgorithm
pattern KeyAlgorithm_RSA_1024 :: KeyAlgorithm
pattern KeyAlgorithm_RSA_2048 :: KeyAlgorithm
pattern KeyAlgorithm_RSA_3072 :: KeyAlgorithm
pattern KeyAlgorithm_RSA_4096 :: KeyAlgorithm
instance Amazonka.Data.XML.ToXML Amazonka.CertificateManager.Types.KeyAlgorithm.KeyAlgorithm
instance Amazonka.Data.XML.FromXML Amazonka.CertificateManager.Types.KeyAlgorithm.KeyAlgorithm
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.CertificateManager.Types.KeyAlgorithm.KeyAlgorithm
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.CertificateManager.Types.KeyAlgorithm.KeyAlgorithm
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.CertificateManager.Types.KeyAlgorithm.KeyAlgorithm
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.CertificateManager.Types.KeyAlgorithm.KeyAlgorithm
instance Amazonka.Data.Query.ToQuery Amazonka.CertificateManager.Types.KeyAlgorithm.KeyAlgorithm
instance Amazonka.Data.Headers.ToHeader Amazonka.CertificateManager.Types.KeyAlgorithm.KeyAlgorithm
instance Amazonka.Data.Log.ToLog Amazonka.CertificateManager.Types.KeyAlgorithm.KeyAlgorithm
instance Amazonka.Data.ByteString.ToByteString Amazonka.CertificateManager.Types.KeyAlgorithm.KeyAlgorithm
instance Amazonka.Data.Text.ToText Amazonka.CertificateManager.Types.KeyAlgorithm.KeyAlgorithm
instance Amazonka.Data.Text.FromText Amazonka.CertificateManager.Types.KeyAlgorithm.KeyAlgorithm
instance Control.DeepSeq.NFData Amazonka.CertificateManager.Types.KeyAlgorithm.KeyAlgorithm
instance Data.Hashable.Class.Hashable Amazonka.CertificateManager.Types.KeyAlgorithm.KeyAlgorithm
instance GHC.Generics.Generic Amazonka.CertificateManager.Types.KeyAlgorithm.KeyAlgorithm
instance GHC.Classes.Ord Amazonka.CertificateManager.Types.KeyAlgorithm.KeyAlgorithm
instance GHC.Classes.Eq Amazonka.CertificateManager.Types.KeyAlgorithm.KeyAlgorithm
instance GHC.Read.Read Amazonka.CertificateManager.Types.KeyAlgorithm.KeyAlgorithm
instance GHC.Show.Show Amazonka.CertificateManager.Types.KeyAlgorithm.KeyAlgorithm


module Amazonka.CertificateManager.Types.KeyUsageName
newtype KeyUsageName
KeyUsageName' :: Text -> KeyUsageName
[fromKeyUsageName] :: KeyUsageName -> Text
pattern KeyUsageName_ANY :: KeyUsageName
pattern KeyUsageName_CERTIFICATE_SIGNING :: KeyUsageName
pattern KeyUsageName_CRL_SIGNING :: KeyUsageName
pattern KeyUsageName_CUSTOM :: KeyUsageName
pattern KeyUsageName_DATA_ENCIPHERMENT :: KeyUsageName
pattern KeyUsageName_DECIPHER_ONLY :: KeyUsageName
pattern KeyUsageName_DIGITAL_SIGNATURE :: KeyUsageName
pattern KeyUsageName_ENCIPHER_ONLY :: KeyUsageName
pattern KeyUsageName_KEY_AGREEMENT :: KeyUsageName
pattern KeyUsageName_KEY_ENCIPHERMENT :: KeyUsageName
pattern KeyUsageName_NON_REPUDIATION :: KeyUsageName
instance Amazonka.Data.XML.ToXML Amazonka.CertificateManager.Types.KeyUsageName.KeyUsageName
instance Amazonka.Data.XML.FromXML Amazonka.CertificateManager.Types.KeyUsageName.KeyUsageName
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.CertificateManager.Types.KeyUsageName.KeyUsageName
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.CertificateManager.Types.KeyUsageName.KeyUsageName
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.CertificateManager.Types.KeyUsageName.KeyUsageName
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.CertificateManager.Types.KeyUsageName.KeyUsageName
instance Amazonka.Data.Query.ToQuery Amazonka.CertificateManager.Types.KeyUsageName.KeyUsageName
instance Amazonka.Data.Headers.ToHeader Amazonka.CertificateManager.Types.KeyUsageName.KeyUsageName
instance Amazonka.Data.Log.ToLog Amazonka.CertificateManager.Types.KeyUsageName.KeyUsageName
instance Amazonka.Data.ByteString.ToByteString Amazonka.CertificateManager.Types.KeyUsageName.KeyUsageName
instance Amazonka.Data.Text.ToText Amazonka.CertificateManager.Types.KeyUsageName.KeyUsageName
instance Amazonka.Data.Text.FromText Amazonka.CertificateManager.Types.KeyUsageName.KeyUsageName
instance Control.DeepSeq.NFData Amazonka.CertificateManager.Types.KeyUsageName.KeyUsageName
instance Data.Hashable.Class.Hashable Amazonka.CertificateManager.Types.KeyUsageName.KeyUsageName
instance GHC.Generics.Generic Amazonka.CertificateManager.Types.KeyUsageName.KeyUsageName
instance GHC.Classes.Ord Amazonka.CertificateManager.Types.KeyUsageName.KeyUsageName
instance GHC.Classes.Eq Amazonka.CertificateManager.Types.KeyUsageName.KeyUsageName
instance GHC.Read.Read Amazonka.CertificateManager.Types.KeyUsageName.KeyUsageName
instance GHC.Show.Show Amazonka.CertificateManager.Types.KeyUsageName.KeyUsageName


module Amazonka.CertificateManager.Types.KeyUsage

-- | The Key Usage X.509 v3 extension defines the purpose of the public key
--   contained in the certificate.
--   
--   <i>See:</i> <a>newKeyUsage</a> smart constructor.
data KeyUsage
KeyUsage' :: Maybe KeyUsageName -> KeyUsage

-- | A string value that contains a Key Usage extension name.
[$sel:name:KeyUsage'] :: KeyUsage -> Maybe KeyUsageName

-- | Create a value of <a>KeyUsage</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:name:KeyUsage'</a>, <a>keyUsage_name</a> - A string value that
--   contains a Key Usage extension name.
newKeyUsage :: KeyUsage

-- | A string value that contains a Key Usage extension name.
keyUsage_name :: Lens' KeyUsage (Maybe KeyUsageName)
instance GHC.Generics.Generic Amazonka.CertificateManager.Types.KeyUsage.KeyUsage
instance GHC.Show.Show Amazonka.CertificateManager.Types.KeyUsage.KeyUsage
instance GHC.Read.Read Amazonka.CertificateManager.Types.KeyUsage.KeyUsage
instance GHC.Classes.Eq Amazonka.CertificateManager.Types.KeyUsage.KeyUsage
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.CertificateManager.Types.KeyUsage.KeyUsage
instance Data.Hashable.Class.Hashable Amazonka.CertificateManager.Types.KeyUsage.KeyUsage
instance Control.DeepSeq.NFData Amazonka.CertificateManager.Types.KeyUsage.KeyUsage


module Amazonka.CertificateManager.Types.Filters

-- | This structure can be used in the ListCertificates action to filter
--   the output of the certificate list.
--   
--   <i>See:</i> <a>newFilters</a> smart constructor.
data Filters
Filters' :: Maybe [KeyAlgorithm] -> Maybe [KeyUsageName] -> Maybe [ExtendedKeyUsageName] -> Filters

-- | Specify one or more algorithms that can be used to generate key pairs.
--   
--   Default filtering returns only <tt>RSA_1024</tt> and <tt>RSA_2048</tt>
--   certificates that have at least one domain. To return other
--   certificate types, provide the desired type signatures in a
--   comma-separated list. For example, <tt>"keyTypes":
--   ["RSA_2048,RSA_4096"]</tt> returns both <tt>RSA_2048</tt> and
--   <tt>RSA_4096</tt> certificates.
[$sel:keyTypes:Filters'] :: Filters -> Maybe [KeyAlgorithm]

-- | Specify one or more KeyUsage extension values.
[$sel:keyUsage:Filters'] :: Filters -> Maybe [KeyUsageName]

-- | Specify one or more ExtendedKeyUsage extension values.
[$sel:extendedKeyUsage:Filters'] :: Filters -> Maybe [ExtendedKeyUsageName]

-- | Create a value of <a>Filters</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyTypes:Filters'</a>, <a>filters_keyTypes</a> - Specify one
--   or more algorithms that can be used to generate key pairs.
--   
--   Default filtering returns only <tt>RSA_1024</tt> and <tt>RSA_2048</tt>
--   certificates that have at least one domain. To return other
--   certificate types, provide the desired type signatures in a
--   comma-separated list. For example, <tt>"keyTypes":
--   ["RSA_2048,RSA_4096"]</tt> returns both <tt>RSA_2048</tt> and
--   <tt>RSA_4096</tt> certificates.
--   
--   <a>$sel:keyUsage:Filters'</a>, <a>filters_keyUsage</a> - Specify one
--   or more KeyUsage extension values.
--   
--   <a>$sel:extendedKeyUsage:Filters'</a>, <a>filters_extendedKeyUsage</a>
--   - Specify one or more ExtendedKeyUsage extension values.
newFilters :: Filters

-- | Specify one or more algorithms that can be used to generate key pairs.
--   
--   Default filtering returns only <tt>RSA_1024</tt> and <tt>RSA_2048</tt>
--   certificates that have at least one domain. To return other
--   certificate types, provide the desired type signatures in a
--   comma-separated list. For example, <tt>"keyTypes":
--   ["RSA_2048,RSA_4096"]</tt> returns both <tt>RSA_2048</tt> and
--   <tt>RSA_4096</tt> certificates.
filters_keyTypes :: Lens' Filters (Maybe [KeyAlgorithm])

-- | Specify one or more KeyUsage extension values.
filters_keyUsage :: Lens' Filters (Maybe [KeyUsageName])

-- | Specify one or more ExtendedKeyUsage extension values.
filters_extendedKeyUsage :: Lens' Filters (Maybe [ExtendedKeyUsageName])
instance GHC.Generics.Generic Amazonka.CertificateManager.Types.Filters.Filters
instance GHC.Show.Show Amazonka.CertificateManager.Types.Filters.Filters
instance GHC.Read.Read Amazonka.CertificateManager.Types.Filters.Filters
instance GHC.Classes.Eq Amazonka.CertificateManager.Types.Filters.Filters
instance Data.Hashable.Class.Hashable Amazonka.CertificateManager.Types.Filters.Filters
instance Control.DeepSeq.NFData Amazonka.CertificateManager.Types.Filters.Filters
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.CertificateManager.Types.Filters.Filters


module Amazonka.CertificateManager.Types.RecordType
newtype RecordType
RecordType' :: Text -> RecordType
[fromRecordType] :: RecordType -> Text
pattern RecordType_CNAME :: RecordType
instance Amazonka.Data.XML.ToXML Amazonka.CertificateManager.Types.RecordType.RecordType
instance Amazonka.Data.XML.FromXML Amazonka.CertificateManager.Types.RecordType.RecordType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.CertificateManager.Types.RecordType.RecordType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.CertificateManager.Types.RecordType.RecordType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.CertificateManager.Types.RecordType.RecordType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.CertificateManager.Types.RecordType.RecordType
instance Amazonka.Data.Query.ToQuery Amazonka.CertificateManager.Types.RecordType.RecordType
instance Amazonka.Data.Headers.ToHeader Amazonka.CertificateManager.Types.RecordType.RecordType
instance Amazonka.Data.Log.ToLog Amazonka.CertificateManager.Types.RecordType.RecordType
instance Amazonka.Data.ByteString.ToByteString Amazonka.CertificateManager.Types.RecordType.RecordType
instance Amazonka.Data.Text.ToText Amazonka.CertificateManager.Types.RecordType.RecordType
instance Amazonka.Data.Text.FromText Amazonka.CertificateManager.Types.RecordType.RecordType
instance Control.DeepSeq.NFData Amazonka.CertificateManager.Types.RecordType.RecordType
instance Data.Hashable.Class.Hashable Amazonka.CertificateManager.Types.RecordType.RecordType
instance GHC.Generics.Generic Amazonka.CertificateManager.Types.RecordType.RecordType
instance GHC.Classes.Ord Amazonka.CertificateManager.Types.RecordType.RecordType
instance GHC.Classes.Eq Amazonka.CertificateManager.Types.RecordType.RecordType
instance GHC.Read.Read Amazonka.CertificateManager.Types.RecordType.RecordType
instance GHC.Show.Show Amazonka.CertificateManager.Types.RecordType.RecordType


module Amazonka.CertificateManager.Types.RenewalEligibility
newtype RenewalEligibility
RenewalEligibility' :: Text -> RenewalEligibility
[fromRenewalEligibility] :: RenewalEligibility -> Text
pattern RenewalEligibility_ELIGIBLE :: RenewalEligibility
pattern RenewalEligibility_INELIGIBLE :: RenewalEligibility
instance Amazonka.Data.XML.ToXML Amazonka.CertificateManager.Types.RenewalEligibility.RenewalEligibility
instance Amazonka.Data.XML.FromXML Amazonka.CertificateManager.Types.RenewalEligibility.RenewalEligibility
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.CertificateManager.Types.RenewalEligibility.RenewalEligibility
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.CertificateManager.Types.RenewalEligibility.RenewalEligibility
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.CertificateManager.Types.RenewalEligibility.RenewalEligibility
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.CertificateManager.Types.RenewalEligibility.RenewalEligibility
instance Amazonka.Data.Query.ToQuery Amazonka.CertificateManager.Types.RenewalEligibility.RenewalEligibility
instance Amazonka.Data.Headers.ToHeader Amazonka.CertificateManager.Types.RenewalEligibility.RenewalEligibility
instance Amazonka.Data.Log.ToLog Amazonka.CertificateManager.Types.RenewalEligibility.RenewalEligibility
instance Amazonka.Data.ByteString.ToByteString Amazonka.CertificateManager.Types.RenewalEligibility.RenewalEligibility
instance Amazonka.Data.Text.ToText Amazonka.CertificateManager.Types.RenewalEligibility.RenewalEligibility
instance Amazonka.Data.Text.FromText Amazonka.CertificateManager.Types.RenewalEligibility.RenewalEligibility
instance Control.DeepSeq.NFData Amazonka.CertificateManager.Types.RenewalEligibility.RenewalEligibility
instance Data.Hashable.Class.Hashable Amazonka.CertificateManager.Types.RenewalEligibility.RenewalEligibility
instance GHC.Generics.Generic Amazonka.CertificateManager.Types.RenewalEligibility.RenewalEligibility
instance GHC.Classes.Ord Amazonka.CertificateManager.Types.RenewalEligibility.RenewalEligibility
instance GHC.Classes.Eq Amazonka.CertificateManager.Types.RenewalEligibility.RenewalEligibility
instance GHC.Read.Read Amazonka.CertificateManager.Types.RenewalEligibility.RenewalEligibility
instance GHC.Show.Show Amazonka.CertificateManager.Types.RenewalEligibility.RenewalEligibility


module Amazonka.CertificateManager.Types.RenewalStatus
newtype RenewalStatus
RenewalStatus' :: Text -> RenewalStatus
[fromRenewalStatus] :: RenewalStatus -> Text
pattern RenewalStatus_FAILED :: RenewalStatus
pattern RenewalStatus_PENDING_AUTO_RENEWAL :: RenewalStatus
pattern RenewalStatus_PENDING_VALIDATION :: RenewalStatus
pattern RenewalStatus_SUCCESS :: RenewalStatus
instance Amazonka.Data.XML.ToXML Amazonka.CertificateManager.Types.RenewalStatus.RenewalStatus
instance Amazonka.Data.XML.FromXML Amazonka.CertificateManager.Types.RenewalStatus.RenewalStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.CertificateManager.Types.RenewalStatus.RenewalStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.CertificateManager.Types.RenewalStatus.RenewalStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.CertificateManager.Types.RenewalStatus.RenewalStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.CertificateManager.Types.RenewalStatus.RenewalStatus
instance Amazonka.Data.Query.ToQuery Amazonka.CertificateManager.Types.RenewalStatus.RenewalStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.CertificateManager.Types.RenewalStatus.RenewalStatus
instance Amazonka.Data.Log.ToLog Amazonka.CertificateManager.Types.RenewalStatus.RenewalStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.CertificateManager.Types.RenewalStatus.RenewalStatus
instance Amazonka.Data.Text.ToText Amazonka.CertificateManager.Types.RenewalStatus.RenewalStatus
instance Amazonka.Data.Text.FromText Amazonka.CertificateManager.Types.RenewalStatus.RenewalStatus
instance Control.DeepSeq.NFData Amazonka.CertificateManager.Types.RenewalStatus.RenewalStatus
instance Data.Hashable.Class.Hashable Amazonka.CertificateManager.Types.RenewalStatus.RenewalStatus
instance GHC.Generics.Generic Amazonka.CertificateManager.Types.RenewalStatus.RenewalStatus
instance GHC.Classes.Ord Amazonka.CertificateManager.Types.RenewalStatus.RenewalStatus
instance GHC.Classes.Eq Amazonka.CertificateManager.Types.RenewalStatus.RenewalStatus
instance GHC.Read.Read Amazonka.CertificateManager.Types.RenewalStatus.RenewalStatus
instance GHC.Show.Show Amazonka.CertificateManager.Types.RenewalStatus.RenewalStatus


module Amazonka.CertificateManager.Types.ResourceRecord

-- | Contains a DNS record value that you can use to validate ownership or
--   control of a domain. This is used by the DescribeCertificate action.
--   
--   <i>See:</i> <a>newResourceRecord</a> smart constructor.
data ResourceRecord
ResourceRecord' :: Text -> RecordType -> Text -> ResourceRecord

-- | The name of the DNS record to create in your domain. This is supplied
--   by ACM.
[$sel:name:ResourceRecord'] :: ResourceRecord -> Text

-- | The type of DNS record. Currently this can be <tt>CNAME</tt>.
[$sel:type':ResourceRecord'] :: ResourceRecord -> RecordType

-- | The value of the CNAME record to add to your DNS database. This is
--   supplied by ACM.
[$sel:value:ResourceRecord'] :: ResourceRecord -> Text

-- | Create a value of <a>ResourceRecord</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:name:ResourceRecord'</a>, <a>resourceRecord_name</a> - The
--   name of the DNS record to create in your domain. This is supplied by
--   ACM.
--   
--   <a>$sel:type':ResourceRecord'</a>, <a>resourceRecord_type</a> - The
--   type of DNS record. Currently this can be <tt>CNAME</tt>.
--   
--   <a>$sel:value:ResourceRecord'</a>, <a>resourceRecord_value</a> - The
--   value of the CNAME record to add to your DNS database. This is
--   supplied by ACM.
newResourceRecord :: Text -> RecordType -> Text -> ResourceRecord

-- | The name of the DNS record to create in your domain. This is supplied
--   by ACM.
resourceRecord_name :: Lens' ResourceRecord Text

-- | The type of DNS record. Currently this can be <tt>CNAME</tt>.
resourceRecord_type :: Lens' ResourceRecord RecordType

-- | The value of the CNAME record to add to your DNS database. This is
--   supplied by ACM.
resourceRecord_value :: Lens' ResourceRecord Text
instance GHC.Generics.Generic Amazonka.CertificateManager.Types.ResourceRecord.ResourceRecord
instance GHC.Show.Show Amazonka.CertificateManager.Types.ResourceRecord.ResourceRecord
instance GHC.Read.Read Amazonka.CertificateManager.Types.ResourceRecord.ResourceRecord
instance GHC.Classes.Eq Amazonka.CertificateManager.Types.ResourceRecord.ResourceRecord
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.CertificateManager.Types.ResourceRecord.ResourceRecord
instance Data.Hashable.Class.Hashable Amazonka.CertificateManager.Types.ResourceRecord.ResourceRecord
instance Control.DeepSeq.NFData Amazonka.CertificateManager.Types.ResourceRecord.ResourceRecord


module Amazonka.CertificateManager.Types.RevocationReason
newtype RevocationReason
RevocationReason' :: Text -> RevocationReason
[fromRevocationReason] :: RevocationReason -> Text
pattern RevocationReason_AFFILIATION_CHANGED :: RevocationReason
pattern RevocationReason_A_A_COMPROMISE :: RevocationReason
pattern RevocationReason_CA_COMPROMISE :: RevocationReason
pattern RevocationReason_CERTIFICATE_HOLD :: RevocationReason
pattern RevocationReason_CESSATION_OF_OPERATION :: RevocationReason
pattern RevocationReason_KEY_COMPROMISE :: RevocationReason
pattern RevocationReason_PRIVILEGE_WITHDRAWN :: RevocationReason
pattern RevocationReason_REMOVE_FROM_CRL :: RevocationReason
pattern RevocationReason_SUPERCEDED :: RevocationReason
pattern RevocationReason_UNSPECIFIED :: RevocationReason
instance Amazonka.Data.XML.ToXML Amazonka.CertificateManager.Types.RevocationReason.RevocationReason
instance Amazonka.Data.XML.FromXML Amazonka.CertificateManager.Types.RevocationReason.RevocationReason
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.CertificateManager.Types.RevocationReason.RevocationReason
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.CertificateManager.Types.RevocationReason.RevocationReason
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.CertificateManager.Types.RevocationReason.RevocationReason
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.CertificateManager.Types.RevocationReason.RevocationReason
instance Amazonka.Data.Query.ToQuery Amazonka.CertificateManager.Types.RevocationReason.RevocationReason
instance Amazonka.Data.Headers.ToHeader Amazonka.CertificateManager.Types.RevocationReason.RevocationReason
instance Amazonka.Data.Log.ToLog Amazonka.CertificateManager.Types.RevocationReason.RevocationReason
instance Amazonka.Data.ByteString.ToByteString Amazonka.CertificateManager.Types.RevocationReason.RevocationReason
instance Amazonka.Data.Text.ToText Amazonka.CertificateManager.Types.RevocationReason.RevocationReason
instance Amazonka.Data.Text.FromText Amazonka.CertificateManager.Types.RevocationReason.RevocationReason
instance Control.DeepSeq.NFData Amazonka.CertificateManager.Types.RevocationReason.RevocationReason
instance Data.Hashable.Class.Hashable Amazonka.CertificateManager.Types.RevocationReason.RevocationReason
instance GHC.Generics.Generic Amazonka.CertificateManager.Types.RevocationReason.RevocationReason
instance GHC.Classes.Ord Amazonka.CertificateManager.Types.RevocationReason.RevocationReason
instance GHC.Classes.Eq Amazonka.CertificateManager.Types.RevocationReason.RevocationReason
instance GHC.Read.Read Amazonka.CertificateManager.Types.RevocationReason.RevocationReason
instance GHC.Show.Show Amazonka.CertificateManager.Types.RevocationReason.RevocationReason


module Amazonka.CertificateManager.Types.Tag

-- | A key-value pair that identifies or specifies metadata about an ACM
--   resource.
--   
--   <i>See:</i> <a>newTag</a> smart constructor.
data Tag
Tag' :: Maybe Text -> Text -> Tag

-- | The value of the tag.
[$sel:value:Tag'] :: Tag -> Maybe Text

-- | The key of the tag.
[$sel:key:Tag'] :: Tag -> Text

-- | Create a value of <a>Tag</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:Tag'</a>, <a>tag_value</a> - The value of the tag.
--   
--   <a>$sel:key:Tag'</a>, <a>tag_key</a> - The key of the tag.
newTag :: Text -> Tag

-- | The value of the tag.
tag_value :: Lens' Tag (Maybe Text)

-- | The key of the tag.
tag_key :: Lens' Tag Text
instance GHC.Generics.Generic Amazonka.CertificateManager.Types.Tag.Tag
instance GHC.Show.Show Amazonka.CertificateManager.Types.Tag.Tag
instance GHC.Read.Read Amazonka.CertificateManager.Types.Tag.Tag
instance GHC.Classes.Eq Amazonka.CertificateManager.Types.Tag.Tag
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.CertificateManager.Types.Tag.Tag
instance Data.Hashable.Class.Hashable Amazonka.CertificateManager.Types.Tag.Tag
instance Control.DeepSeq.NFData Amazonka.CertificateManager.Types.Tag.Tag
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.CertificateManager.Types.Tag.Tag


module Amazonka.CertificateManager.Types.ValidationMethod
newtype ValidationMethod
ValidationMethod' :: Text -> ValidationMethod
[fromValidationMethod] :: ValidationMethod -> Text
pattern ValidationMethod_DNS :: ValidationMethod
pattern ValidationMethod_EMAIL :: ValidationMethod
instance Amazonka.Data.XML.ToXML Amazonka.CertificateManager.Types.ValidationMethod.ValidationMethod
instance Amazonka.Data.XML.FromXML Amazonka.CertificateManager.Types.ValidationMethod.ValidationMethod
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.CertificateManager.Types.ValidationMethod.ValidationMethod
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.CertificateManager.Types.ValidationMethod.ValidationMethod
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.CertificateManager.Types.ValidationMethod.ValidationMethod
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.CertificateManager.Types.ValidationMethod.ValidationMethod
instance Amazonka.Data.Query.ToQuery Amazonka.CertificateManager.Types.ValidationMethod.ValidationMethod
instance Amazonka.Data.Headers.ToHeader Amazonka.CertificateManager.Types.ValidationMethod.ValidationMethod
instance Amazonka.Data.Log.ToLog Amazonka.CertificateManager.Types.ValidationMethod.ValidationMethod
instance Amazonka.Data.ByteString.ToByteString Amazonka.CertificateManager.Types.ValidationMethod.ValidationMethod
instance Amazonka.Data.Text.ToText Amazonka.CertificateManager.Types.ValidationMethod.ValidationMethod
instance Amazonka.Data.Text.FromText Amazonka.CertificateManager.Types.ValidationMethod.ValidationMethod
instance Control.DeepSeq.NFData Amazonka.CertificateManager.Types.ValidationMethod.ValidationMethod
instance Data.Hashable.Class.Hashable Amazonka.CertificateManager.Types.ValidationMethod.ValidationMethod
instance GHC.Generics.Generic Amazonka.CertificateManager.Types.ValidationMethod.ValidationMethod
instance GHC.Classes.Ord Amazonka.CertificateManager.Types.ValidationMethod.ValidationMethod
instance GHC.Classes.Eq Amazonka.CertificateManager.Types.ValidationMethod.ValidationMethod
instance GHC.Read.Read Amazonka.CertificateManager.Types.ValidationMethod.ValidationMethod
instance GHC.Show.Show Amazonka.CertificateManager.Types.ValidationMethod.ValidationMethod


module Amazonka.CertificateManager.Types.DomainValidation

-- | Contains information about the validation of each domain name in the
--   certificate.
--   
--   <i>See:</i> <a>newDomainValidation</a> smart constructor.
data DomainValidation
DomainValidation' :: Maybe [Text] -> Maybe ValidationMethod -> Maybe ResourceRecord -> Maybe DomainStatus -> Maybe Text -> Text -> DomainValidation

-- | A list of email addresses that ACM used to send domain validation
--   emails.
[$sel:validationEmails:DomainValidation'] :: DomainValidation -> Maybe [Text]

-- | Specifies the domain validation method.
[$sel:validationMethod:DomainValidation'] :: DomainValidation -> Maybe ValidationMethod

-- | Contains the CNAME record that you add to your DNS database for domain
--   validation. For more information, see <a>Use DNS to Validate Domain
--   Ownership</a>.
--   
--   Note: The CNAME information that you need does not include the name of
--   your domain. If you include  your domain name in the DNS database
--   CNAME record, validation fails.  For example, if the name is
--   "_a79865eb4cd1a6ab990a45779b4e0b96.yourdomain.com", only
--   "_a79865eb4cd1a6ab990a45779b4e0b96" must be used.
[$sel:resourceRecord:DomainValidation'] :: DomainValidation -> Maybe ResourceRecord

-- | The validation status of the domain name. This can be one of the
--   following values:
--   
--   <ul>
--   <li><pre>PENDING_VALIDATION</pre></li>
--   <li>@@SUCCESS</li>
--   <li>@@FAILED</li>
--   </ul>
[$sel:validationStatus:DomainValidation'] :: DomainValidation -> Maybe DomainStatus

-- | The domain name that ACM used to send domain validation emails.
[$sel:validationDomain:DomainValidation'] :: DomainValidation -> Maybe Text

-- | A fully qualified domain name (FQDN) in the certificate. For example,
--   <tt>www.example.com</tt> or <tt>example.com</tt>.
[$sel:domainName:DomainValidation'] :: DomainValidation -> Text

-- | Create a value of <a>DomainValidation</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:validationEmails:DomainValidation'</a>,
--   <a>domainValidation_validationEmails</a> - A list of email addresses
--   that ACM used to send domain validation emails.
--   
--   <a>$sel:validationMethod:DomainValidation'</a>,
--   <a>domainValidation_validationMethod</a> - Specifies the domain
--   validation method.
--   
--   <a>$sel:resourceRecord:DomainValidation'</a>,
--   <a>domainValidation_resourceRecord</a> - Contains the CNAME record
--   that you add to your DNS database for domain validation. For more
--   information, see <a>Use DNS to Validate Domain Ownership</a>.
--   
--   Note: The CNAME information that you need does not include the name of
--   your domain. If you include  your domain name in the DNS database
--   CNAME record, validation fails.  For example, if the name is
--   "_a79865eb4cd1a6ab990a45779b4e0b96.yourdomain.com", only
--   "_a79865eb4cd1a6ab990a45779b4e0b96" must be used.
--   
--   <a>$sel:validationStatus:DomainValidation'</a>,
--   <a>domainValidation_validationStatus</a> - The validation status of
--   the domain name. This can be one of the following values:
--   
--   <ul>
--   <li><pre>PENDING_VALIDATION</pre></li>
--   <li>@@SUCCESS</li>
--   <li>@@FAILED</li>
--   </ul>
--   
--   <a>$sel:validationDomain:DomainValidation'</a>,
--   <a>domainValidation_validationDomain</a> - The domain name that ACM
--   used to send domain validation emails.
--   
--   <a>$sel:domainName:DomainValidation'</a>,
--   <a>domainValidation_domainName</a> - A fully qualified domain name
--   (FQDN) in the certificate. For example, <tt>www.example.com</tt> or
--   <tt>example.com</tt>.
newDomainValidation :: Text -> DomainValidation

-- | A list of email addresses that ACM used to send domain validation
--   emails.
domainValidation_validationEmails :: Lens' DomainValidation (Maybe [Text])

-- | Specifies the domain validation method.
domainValidation_validationMethod :: Lens' DomainValidation (Maybe ValidationMethod)

-- | Contains the CNAME record that you add to your DNS database for domain
--   validation. For more information, see <a>Use DNS to Validate Domain
--   Ownership</a>.
--   
--   Note: The CNAME information that you need does not include the name of
--   your domain. If you include  your domain name in the DNS database
--   CNAME record, validation fails.  For example, if the name is
--   "_a79865eb4cd1a6ab990a45779b4e0b96.yourdomain.com", only
--   "_a79865eb4cd1a6ab990a45779b4e0b96" must be used.
domainValidation_resourceRecord :: Lens' DomainValidation (Maybe ResourceRecord)

-- | The validation status of the domain name. This can be one of the
--   following values:
--   
--   <ul>
--   <li><pre>PENDING_VALIDATION</pre></li>
--   <li>@@SUCCESS</li>
--   <li>@@FAILED</li>
--   </ul>
domainValidation_validationStatus :: Lens' DomainValidation (Maybe DomainStatus)

-- | The domain name that ACM used to send domain validation emails.
domainValidation_validationDomain :: Lens' DomainValidation (Maybe Text)

-- | A fully qualified domain name (FQDN) in the certificate. For example,
--   <tt>www.example.com</tt> or <tt>example.com</tt>.
domainValidation_domainName :: Lens' DomainValidation Text
instance GHC.Generics.Generic Amazonka.CertificateManager.Types.DomainValidation.DomainValidation
instance GHC.Show.Show Amazonka.CertificateManager.Types.DomainValidation.DomainValidation
instance GHC.Read.Read Amazonka.CertificateManager.Types.DomainValidation.DomainValidation
instance GHC.Classes.Eq Amazonka.CertificateManager.Types.DomainValidation.DomainValidation
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.CertificateManager.Types.DomainValidation.DomainValidation
instance Data.Hashable.Class.Hashable Amazonka.CertificateManager.Types.DomainValidation.DomainValidation
instance Control.DeepSeq.NFData Amazonka.CertificateManager.Types.DomainValidation.DomainValidation


module Amazonka.CertificateManager.Types.RenewalSummary

-- | Contains information about the status of ACM's <a>managed renewal</a>
--   for the certificate. This structure exists only when the certificate
--   type is <tt>AMAZON_ISSUED</tt>.
--   
--   <i>See:</i> <a>newRenewalSummary</a> smart constructor.
data RenewalSummary
RenewalSummary' :: Maybe FailureReason -> RenewalStatus -> NonEmpty DomainValidation -> POSIX -> RenewalSummary

-- | The reason that a renewal request was unsuccessful.
[$sel:renewalStatusReason:RenewalSummary'] :: RenewalSummary -> Maybe FailureReason

-- | The status of ACM's <a>managed renewal</a> of the certificate.
[$sel:renewalStatus:RenewalSummary'] :: RenewalSummary -> RenewalStatus

-- | Contains information about the validation of each domain name in the
--   certificate, as it pertains to ACM's <a>managed renewal</a>. This is
--   different from the initial validation that occurs as a result of the
--   RequestCertificate request. This field exists only when the
--   certificate type is <tt>AMAZON_ISSUED</tt>.
[$sel:domainValidationOptions:RenewalSummary'] :: RenewalSummary -> NonEmpty DomainValidation

-- | The time at which the renewal summary was last updated.
[$sel:updatedAt:RenewalSummary'] :: RenewalSummary -> POSIX

-- | Create a value of <a>RenewalSummary</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:renewalStatusReason:RenewalSummary'</a>,
--   <a>renewalSummary_renewalStatusReason</a> - The reason that a renewal
--   request was unsuccessful.
--   
--   <a>$sel:renewalStatus:RenewalSummary'</a>,
--   <a>renewalSummary_renewalStatus</a> - The status of ACM's <a>managed
--   renewal</a> of the certificate.
--   
--   <a>$sel:domainValidationOptions:RenewalSummary'</a>,
--   <a>renewalSummary_domainValidationOptions</a> - Contains information
--   about the validation of each domain name in the certificate, as it
--   pertains to ACM's <a>managed renewal</a>. This is different from the
--   initial validation that occurs as a result of the RequestCertificate
--   request. This field exists only when the certificate type is
--   <tt>AMAZON_ISSUED</tt>.
--   
--   <a>$sel:updatedAt:RenewalSummary'</a>, <a>renewalSummary_updatedAt</a>
--   - The time at which the renewal summary was last updated.
newRenewalSummary :: RenewalStatus -> NonEmpty DomainValidation -> UTCTime -> RenewalSummary

-- | The reason that a renewal request was unsuccessful.
renewalSummary_renewalStatusReason :: Lens' RenewalSummary (Maybe FailureReason)

-- | The status of ACM's <a>managed renewal</a> of the certificate.
renewalSummary_renewalStatus :: Lens' RenewalSummary RenewalStatus

-- | Contains information about the validation of each domain name in the
--   certificate, as it pertains to ACM's <a>managed renewal</a>. This is
--   different from the initial validation that occurs as a result of the
--   RequestCertificate request. This field exists only when the
--   certificate type is <tt>AMAZON_ISSUED</tt>.
renewalSummary_domainValidationOptions :: Lens' RenewalSummary (NonEmpty DomainValidation)

-- | The time at which the renewal summary was last updated.
renewalSummary_updatedAt :: Lens' RenewalSummary UTCTime
instance GHC.Generics.Generic Amazonka.CertificateManager.Types.RenewalSummary.RenewalSummary
instance GHC.Show.Show Amazonka.CertificateManager.Types.RenewalSummary.RenewalSummary
instance GHC.Read.Read Amazonka.CertificateManager.Types.RenewalSummary.RenewalSummary
instance GHC.Classes.Eq Amazonka.CertificateManager.Types.RenewalSummary.RenewalSummary
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.CertificateManager.Types.RenewalSummary.RenewalSummary
instance Data.Hashable.Class.Hashable Amazonka.CertificateManager.Types.RenewalSummary.RenewalSummary
instance Control.DeepSeq.NFData Amazonka.CertificateManager.Types.RenewalSummary.RenewalSummary


module Amazonka.CertificateManager.Types.CertificateDetail

-- | Contains metadata about an ACM certificate. This structure is returned
--   in the response to a DescribeCertificate request.
--   
--   <i>See:</i> <a>newCertificateDetail</a> smart constructor.
data CertificateDetail
CertificateDetail' :: Maybe Text -> Maybe CertificateStatus -> Maybe FailureReason -> Maybe (NonEmpty Text) -> Maybe [Text] -> Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe RenewalEligibility -> Maybe [ExtendedKeyUsage] -> Maybe POSIX -> Maybe [KeyUsage] -> Maybe POSIX -> Maybe POSIX -> Maybe RevocationReason -> Maybe Text -> Maybe RenewalSummary -> Maybe KeyAlgorithm -> Maybe CertificateType -> Maybe CertificateOptions -> Maybe POSIX -> Maybe Text -> Maybe (NonEmpty DomainValidation) -> Maybe Text -> Maybe POSIX -> Maybe Text -> CertificateDetail

-- | The name of the entity that is associated with the public key
--   contained in the certificate.
[$sel:subject:CertificateDetail'] :: CertificateDetail -> Maybe Text

-- | The status of the certificate.
[$sel:status:CertificateDetail'] :: CertificateDetail -> Maybe CertificateStatus

-- | The reason the certificate request failed. This value exists only when
--   the certificate status is <tt>FAILED</tt>. For more information, see
--   <a>Certificate Request Failed</a> in the <i>Amazon Web Services
--   Certificate Manager User Guide</i>.
[$sel:failureReason:CertificateDetail'] :: CertificateDetail -> Maybe FailureReason

-- | One or more domain names (subject alternative names) included in the
--   certificate. This list contains the domain names that are bound to the
--   public key that is contained in the certificate. The subject
--   alternative names include the canonical domain name (CN) of the
--   certificate and additional domain names that can be used to connect to
--   the website.
[$sel:subjectAlternativeNames:CertificateDetail'] :: CertificateDetail -> Maybe (NonEmpty Text)

-- | A list of ARNs for the Amazon Web Services resources that are using
--   the certificate. A certificate can be used by multiple Amazon Web
--   Services resources.
[$sel:inUseBy:CertificateDetail'] :: CertificateDetail -> Maybe [Text]

-- | The time at which the certificate was requested.
[$sel:createdAt:CertificateDetail'] :: CertificateDetail -> Maybe POSIX

-- | The Amazon Resource Name (ARN) of the certificate. For more
--   information about ARNs, see <a>Amazon Resource Names (ARNs)</a> in the
--   <i>Amazon Web Services General Reference</i>.
[$sel:certificateArn:CertificateDetail'] :: CertificateDetail -> Maybe Text

-- | The serial number of the certificate.
[$sel:serial:CertificateDetail'] :: CertificateDetail -> Maybe Text

-- | Specifies whether the certificate is eligible for renewal. At this
--   time, only exported private certificates can be renewed with the
--   RenewCertificate command.
[$sel:renewalEligibility:CertificateDetail'] :: CertificateDetail -> Maybe RenewalEligibility

-- | Contains a list of Extended Key Usage X.509 v3 extension objects. Each
--   object specifies a purpose for which the certificate public key can be
--   used and consists of a name and an object identifier (OID).
[$sel:extendedKeyUsages:CertificateDetail'] :: CertificateDetail -> Maybe [ExtendedKeyUsage]

-- | The date and time at which the certificate was imported. This value
--   exists only when the certificate type is <tt>IMPORTED</tt>.
[$sel:importedAt:CertificateDetail'] :: CertificateDetail -> Maybe POSIX

-- | A list of Key Usage X.509 v3 extension objects. Each object is a
--   string value that identifies the purpose of the public key contained
--   in the certificate. Possible extension values include
--   DIGITAL_SIGNATURE, KEY_ENCHIPHERMENT, NON_REPUDIATION, and more.
[$sel:keyUsages:CertificateDetail'] :: CertificateDetail -> Maybe [KeyUsage]

-- | The time at which the certificate was revoked. This value exists only
--   when the certificate status is <tt>REVOKED</tt>.
[$sel:revokedAt:CertificateDetail'] :: CertificateDetail -> Maybe POSIX

-- | The time before which the certificate is not valid.
[$sel:notBefore:CertificateDetail'] :: CertificateDetail -> Maybe POSIX

-- | The reason the certificate was revoked. This value exists only when
--   the certificate status is <tt>REVOKED</tt>.
[$sel:revocationReason:CertificateDetail'] :: CertificateDetail -> Maybe RevocationReason

-- | The fully qualified domain name for the certificate, such as
--   www.example.com or example.com.
[$sel:domainName:CertificateDetail'] :: CertificateDetail -> Maybe Text

-- | Contains information about the status of ACM's <a>managed renewal</a>
--   for the certificate. This field exists only when the certificate type
--   is <tt>AMAZON_ISSUED</tt>.
[$sel:renewalSummary:CertificateDetail'] :: CertificateDetail -> Maybe RenewalSummary

-- | The algorithm that was used to generate the public-private key pair.
[$sel:keyAlgorithm:CertificateDetail'] :: CertificateDetail -> Maybe KeyAlgorithm

-- | The source of the certificate. For certificates provided by ACM, this
--   value is <tt>AMAZON_ISSUED</tt>. For certificates that you imported
--   with ImportCertificate, this value is <tt>IMPORTED</tt>. ACM does not
--   provide <a>managed renewal</a> for imported certificates. For more
--   information about the differences between certificates that you import
--   and those that ACM provides, see <a>Importing Certificates</a> in the
--   <i>Amazon Web Services Certificate Manager User Guide</i>.
[$sel:type':CertificateDetail'] :: CertificateDetail -> Maybe CertificateType

-- | Value that specifies whether to add the certificate to a transparency
--   log. Certificate transparency makes it possible to detect SSL
--   certificates that have been mistakenly or maliciously issued. A
--   browser might respond to certificate that has not been logged by
--   showing an error message. The logs are cryptographically secure.
[$sel:options:CertificateDetail'] :: CertificateDetail -> Maybe CertificateOptions

-- | The time at which the certificate was issued. This value exists only
--   when the certificate type is <tt>AMAZON_ISSUED</tt>.
[$sel:issuedAt:CertificateDetail'] :: CertificateDetail -> Maybe POSIX

-- | The algorithm that was used to sign the certificate.
[$sel:signatureAlgorithm:CertificateDetail'] :: CertificateDetail -> Maybe Text

-- | Contains information about the initial validation of each domain name
--   that occurs as a result of the RequestCertificate request. This field
--   exists only when the certificate type is <tt>AMAZON_ISSUED</tt>.
[$sel:domainValidationOptions:CertificateDetail'] :: CertificateDetail -> Maybe (NonEmpty DomainValidation)

-- | The name of the certificate authority that issued and signed the
--   certificate.
[$sel:issuer:CertificateDetail'] :: CertificateDetail -> Maybe Text

-- | The time after which the certificate is not valid.
[$sel:notAfter:CertificateDetail'] :: CertificateDetail -> Maybe POSIX

-- | The Amazon Resource Name (ARN) of the ACM PCA private certificate
--   authority (CA) that issued the certificate. This has the following
--   format:
--   
--   <pre>
--   arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012
--   </pre>
[$sel:certificateAuthorityArn:CertificateDetail'] :: CertificateDetail -> Maybe Text

-- | Create a value of <a>CertificateDetail</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:subject:CertificateDetail'</a>,
--   <a>certificateDetail_subject</a> - The name of the entity that is
--   associated with the public key contained in the certificate.
--   
--   <a>$sel:status:CertificateDetail'</a>, <a>certificateDetail_status</a>
--   - The status of the certificate.
--   
--   <a>$sel:failureReason:CertificateDetail'</a>,
--   <a>certificateDetail_failureReason</a> - The reason the certificate
--   request failed. This value exists only when the certificate status is
--   <tt>FAILED</tt>. For more information, see <a>Certificate Request
--   Failed</a> in the <i>Amazon Web Services Certificate Manager User
--   Guide</i>.
--   
--   <a>$sel:subjectAlternativeNames:CertificateDetail'</a>,
--   <a>certificateDetail_subjectAlternativeNames</a> - One or more domain
--   names (subject alternative names) included in the certificate. This
--   list contains the domain names that are bound to the public key that
--   is contained in the certificate. The subject alternative names include
--   the canonical domain name (CN) of the certificate and additional
--   domain names that can be used to connect to the website.
--   
--   <a>$sel:inUseBy:CertificateDetail'</a>,
--   <a>certificateDetail_inUseBy</a> - A list of ARNs for the Amazon Web
--   Services resources that are using the certificate. A certificate can
--   be used by multiple Amazon Web Services resources.
--   
--   <a>$sel:createdAt:CertificateDetail'</a>,
--   <a>certificateDetail_createdAt</a> - The time at which the certificate
--   was requested.
--   
--   <a>$sel:certificateArn:CertificateDetail'</a>,
--   <a>certificateDetail_certificateArn</a> - The Amazon Resource Name
--   (ARN) of the certificate. For more information about ARNs, see
--   <a>Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services
--   General Reference</i>.
--   
--   <a>$sel:serial:CertificateDetail'</a>, <a>certificateDetail_serial</a>
--   - The serial number of the certificate.
--   
--   <a>$sel:renewalEligibility:CertificateDetail'</a>,
--   <a>certificateDetail_renewalEligibility</a> - Specifies whether the
--   certificate is eligible for renewal. At this time, only exported
--   private certificates can be renewed with the RenewCertificate command.
--   
--   <a>$sel:extendedKeyUsages:CertificateDetail'</a>,
--   <a>certificateDetail_extendedKeyUsages</a> - Contains a list of
--   Extended Key Usage X.509 v3 extension objects. Each object specifies a
--   purpose for which the certificate public key can be used and consists
--   of a name and an object identifier (OID).
--   
--   <a>$sel:importedAt:CertificateDetail'</a>,
--   <a>certificateDetail_importedAt</a> - The date and time at which the
--   certificate was imported. This value exists only when the certificate
--   type is <tt>IMPORTED</tt>.
--   
--   <a>$sel:keyUsages:CertificateDetail'</a>,
--   <a>certificateDetail_keyUsages</a> - A list of Key Usage X.509 v3
--   extension objects. Each object is a string value that identifies the
--   purpose of the public key contained in the certificate. Possible
--   extension values include DIGITAL_SIGNATURE, KEY_ENCHIPHERMENT,
--   NON_REPUDIATION, and more.
--   
--   <a>$sel:revokedAt:CertificateDetail'</a>,
--   <a>certificateDetail_revokedAt</a> - The time at which the certificate
--   was revoked. This value exists only when the certificate status is
--   <tt>REVOKED</tt>.
--   
--   <a>$sel:notBefore:CertificateDetail'</a>,
--   <a>certificateDetail_notBefore</a> - The time before which the
--   certificate is not valid.
--   
--   <a>$sel:revocationReason:CertificateDetail'</a>,
--   <a>certificateDetail_revocationReason</a> - The reason the certificate
--   was revoked. This value exists only when the certificate status is
--   <tt>REVOKED</tt>.
--   
--   <a>$sel:domainName:CertificateDetail'</a>,
--   <a>certificateDetail_domainName</a> - The fully qualified domain name
--   for the certificate, such as www.example.com or example.com.
--   
--   <a>$sel:renewalSummary:CertificateDetail'</a>,
--   <a>certificateDetail_renewalSummary</a> - Contains information about
--   the status of ACM's <a>managed renewal</a> for the certificate. This
--   field exists only when the certificate type is <tt>AMAZON_ISSUED</tt>.
--   
--   <a>$sel:keyAlgorithm:CertificateDetail'</a>,
--   <a>certificateDetail_keyAlgorithm</a> - The algorithm that was used to
--   generate the public-private key pair.
--   
--   <a>$sel:type':CertificateDetail'</a>, <a>certificateDetail_type</a> -
--   The source of the certificate. For certificates provided by ACM, this
--   value is <tt>AMAZON_ISSUED</tt>. For certificates that you imported
--   with ImportCertificate, this value is <tt>IMPORTED</tt>. ACM does not
--   provide <a>managed renewal</a> for imported certificates. For more
--   information about the differences between certificates that you import
--   and those that ACM provides, see <a>Importing Certificates</a> in the
--   <i>Amazon Web Services Certificate Manager User Guide</i>.
--   
--   <a>$sel:options:CertificateDetail'</a>,
--   <a>certificateDetail_options</a> - Value that specifies whether to add
--   the certificate to a transparency log. Certificate transparency makes
--   it possible to detect SSL certificates that have been mistakenly or
--   maliciously issued. A browser might respond to certificate that has
--   not been logged by showing an error message. The logs are
--   cryptographically secure.
--   
--   <a>$sel:issuedAt:CertificateDetail'</a>,
--   <a>certificateDetail_issuedAt</a> - The time at which the certificate
--   was issued. This value exists only when the certificate type is
--   <tt>AMAZON_ISSUED</tt>.
--   
--   <a>$sel:signatureAlgorithm:CertificateDetail'</a>,
--   <a>certificateDetail_signatureAlgorithm</a> - The algorithm that was
--   used to sign the certificate.
--   
--   <a>$sel:domainValidationOptions:CertificateDetail'</a>,
--   <a>certificateDetail_domainValidationOptions</a> - Contains
--   information about the initial validation of each domain name that
--   occurs as a result of the RequestCertificate request. This field
--   exists only when the certificate type is <tt>AMAZON_ISSUED</tt>.
--   
--   <a>$sel:issuer:CertificateDetail'</a>, <a>certificateDetail_issuer</a>
--   - The name of the certificate authority that issued and signed the
--   certificate.
--   
--   <a>$sel:notAfter:CertificateDetail'</a>,
--   <a>certificateDetail_notAfter</a> - The time after which the
--   certificate is not valid.
--   
--   <a>$sel:certificateAuthorityArn:CertificateDetail'</a>,
--   <a>certificateDetail_certificateAuthorityArn</a> - The Amazon Resource
--   Name (ARN) of the ACM PCA private certificate authority (CA) that
--   issued the certificate. This has the following format:
--   
--   <pre>
--   arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012
--   </pre>
newCertificateDetail :: CertificateDetail

-- | The name of the entity that is associated with the public key
--   contained in the certificate.
certificateDetail_subject :: Lens' CertificateDetail (Maybe Text)

-- | The status of the certificate.
certificateDetail_status :: Lens' CertificateDetail (Maybe CertificateStatus)

-- | The reason the certificate request failed. This value exists only when
--   the certificate status is <tt>FAILED</tt>. For more information, see
--   <a>Certificate Request Failed</a> in the <i>Amazon Web Services
--   Certificate Manager User Guide</i>.
certificateDetail_failureReason :: Lens' CertificateDetail (Maybe FailureReason)

-- | One or more domain names (subject alternative names) included in the
--   certificate. This list contains the domain names that are bound to the
--   public key that is contained in the certificate. The subject
--   alternative names include the canonical domain name (CN) of the
--   certificate and additional domain names that can be used to connect to
--   the website.
certificateDetail_subjectAlternativeNames :: Lens' CertificateDetail (Maybe (NonEmpty Text))

-- | A list of ARNs for the Amazon Web Services resources that are using
--   the certificate. A certificate can be used by multiple Amazon Web
--   Services resources.
certificateDetail_inUseBy :: Lens' CertificateDetail (Maybe [Text])

-- | The time at which the certificate was requested.
certificateDetail_createdAt :: Lens' CertificateDetail (Maybe UTCTime)

-- | The Amazon Resource Name (ARN) of the certificate. For more
--   information about ARNs, see <a>Amazon Resource Names (ARNs)</a> in the
--   <i>Amazon Web Services General Reference</i>.
certificateDetail_certificateArn :: Lens' CertificateDetail (Maybe Text)

-- | The serial number of the certificate.
certificateDetail_serial :: Lens' CertificateDetail (Maybe Text)

-- | Specifies whether the certificate is eligible for renewal. At this
--   time, only exported private certificates can be renewed with the
--   RenewCertificate command.
certificateDetail_renewalEligibility :: Lens' CertificateDetail (Maybe RenewalEligibility)

-- | Contains a list of Extended Key Usage X.509 v3 extension objects. Each
--   object specifies a purpose for which the certificate public key can be
--   used and consists of a name and an object identifier (OID).
certificateDetail_extendedKeyUsages :: Lens' CertificateDetail (Maybe [ExtendedKeyUsage])

-- | The date and time at which the certificate was imported. This value
--   exists only when the certificate type is <tt>IMPORTED</tt>.
certificateDetail_importedAt :: Lens' CertificateDetail (Maybe UTCTime)

-- | A list of Key Usage X.509 v3 extension objects. Each object is a
--   string value that identifies the purpose of the public key contained
--   in the certificate. Possible extension values include
--   DIGITAL_SIGNATURE, KEY_ENCHIPHERMENT, NON_REPUDIATION, and more.
certificateDetail_keyUsages :: Lens' CertificateDetail (Maybe [KeyUsage])

-- | The time at which the certificate was revoked. This value exists only
--   when the certificate status is <tt>REVOKED</tt>.
certificateDetail_revokedAt :: Lens' CertificateDetail (Maybe UTCTime)

-- | The time before which the certificate is not valid.
certificateDetail_notBefore :: Lens' CertificateDetail (Maybe UTCTime)

-- | The reason the certificate was revoked. This value exists only when
--   the certificate status is <tt>REVOKED</tt>.
certificateDetail_revocationReason :: Lens' CertificateDetail (Maybe RevocationReason)

-- | The fully qualified domain name for the certificate, such as
--   www.example.com or example.com.
certificateDetail_domainName :: Lens' CertificateDetail (Maybe Text)

-- | Contains information about the status of ACM's <a>managed renewal</a>
--   for the certificate. This field exists only when the certificate type
--   is <tt>AMAZON_ISSUED</tt>.
certificateDetail_renewalSummary :: Lens' CertificateDetail (Maybe RenewalSummary)

-- | The algorithm that was used to generate the public-private key pair.
certificateDetail_keyAlgorithm :: Lens' CertificateDetail (Maybe KeyAlgorithm)

-- | The source of the certificate. For certificates provided by ACM, this
--   value is <tt>AMAZON_ISSUED</tt>. For certificates that you imported
--   with ImportCertificate, this value is <tt>IMPORTED</tt>. ACM does not
--   provide <a>managed renewal</a> for imported certificates. For more
--   information about the differences between certificates that you import
--   and those that ACM provides, see <a>Importing Certificates</a> in the
--   <i>Amazon Web Services Certificate Manager User Guide</i>.
certificateDetail_type :: Lens' CertificateDetail (Maybe CertificateType)

-- | Value that specifies whether to add the certificate to a transparency
--   log. Certificate transparency makes it possible to detect SSL
--   certificates that have been mistakenly or maliciously issued. A
--   browser might respond to certificate that has not been logged by
--   showing an error message. The logs are cryptographically secure.
certificateDetail_options :: Lens' CertificateDetail (Maybe CertificateOptions)

-- | The time at which the certificate was issued. This value exists only
--   when the certificate type is <tt>AMAZON_ISSUED</tt>.
certificateDetail_issuedAt :: Lens' CertificateDetail (Maybe UTCTime)

-- | The algorithm that was used to sign the certificate.
certificateDetail_signatureAlgorithm :: Lens' CertificateDetail (Maybe Text)

-- | Contains information about the initial validation of each domain name
--   that occurs as a result of the RequestCertificate request. This field
--   exists only when the certificate type is <tt>AMAZON_ISSUED</tt>.
certificateDetail_domainValidationOptions :: Lens' CertificateDetail (Maybe (NonEmpty DomainValidation))

-- | The name of the certificate authority that issued and signed the
--   certificate.
certificateDetail_issuer :: Lens' CertificateDetail (Maybe Text)

-- | The time after which the certificate is not valid.
certificateDetail_notAfter :: Lens' CertificateDetail (Maybe UTCTime)

-- | The Amazon Resource Name (ARN) of the ACM PCA private certificate
--   authority (CA) that issued the certificate. This has the following
--   format:
--   
--   <pre>
--   arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012
--   </pre>
certificateDetail_certificateAuthorityArn :: Lens' CertificateDetail (Maybe Text)
instance GHC.Generics.Generic Amazonka.CertificateManager.Types.CertificateDetail.CertificateDetail
instance GHC.Show.Show Amazonka.CertificateManager.Types.CertificateDetail.CertificateDetail
instance GHC.Read.Read Amazonka.CertificateManager.Types.CertificateDetail.CertificateDetail
instance GHC.Classes.Eq Amazonka.CertificateManager.Types.CertificateDetail.CertificateDetail
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.CertificateManager.Types.CertificateDetail.CertificateDetail
instance Data.Hashable.Class.Hashable Amazonka.CertificateManager.Types.CertificateDetail.CertificateDetail
instance Control.DeepSeq.NFData Amazonka.CertificateManager.Types.CertificateDetail.CertificateDetail


module Amazonka.CertificateManager.Types

-- | API version <tt>2015-12-08</tt> of the Amazon Certificate Manager SDK
--   configuration.
defaultService :: Service

-- | One or both of the values that make up the key-value pair is not
--   valid. For example, you cannot specify a tag value that begins with
--   <tt>aws:</tt>.
_InvalidTagException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The supplied input failed to satisfy constraints of an Amazon Web
--   Services service.
_ValidationException :: AsError a => Getting (First ServiceError) a ServiceError

-- | You do not have access required to perform this action.
_AccessDeniedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | An input parameter was invalid.
_InvalidParameterException :: AsError a => Getting (First ServiceError) a ServiceError

-- | One or more values in the DomainValidationOption structure is
--   incorrect.
_InvalidDomainValidationOptionsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request contains too many tags. Try the request again with fewer
--   tags.
_TooManyTagsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | You are trying to update a resource or configuration that is already
--   being created or updated. Wait for the previous operation to finish
--   and try again.
_ConflictException :: AsError a => Getting (First ServiceError) a ServiceError

-- | One or more of of request parameters specified is not valid.
_InvalidArgsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The certificate request is in process and the certificate in your
--   account has not yet been issued.
_RequestInProgressException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was denied because it exceeded a quota.
_ThrottlingException :: AsError a => Getting (First ServiceError) a ServiceError

-- | A specified tag did not comply with an existing tag policy and was
--   rejected.
_TagPolicyException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The requested Amazon Resource Name (ARN) does not refer to an existing
--   resource.
_InvalidArnException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified certificate cannot be found in the caller's account or
--   the caller's account cannot be found.
_ResourceNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Processing has reached an invalid state.
_InvalidStateException :: AsError a => Getting (First ServiceError) a ServiceError

-- | An ACM quota has been exceeded.
_LimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The certificate is in use by another Amazon Web Services service in
--   the caller's account. Remove the association and try again.
_ResourceInUseException :: AsError a => Getting (First ServiceError) a ServiceError
newtype CertificateStatus
CertificateStatus' :: Text -> CertificateStatus
[fromCertificateStatus] :: CertificateStatus -> Text
pattern CertificateStatus_EXPIRED :: CertificateStatus
pattern CertificateStatus_FAILED :: CertificateStatus
pattern CertificateStatus_INACTIVE :: CertificateStatus
pattern CertificateStatus_ISSUED :: CertificateStatus
pattern CertificateStatus_PENDING_VALIDATION :: CertificateStatus
pattern CertificateStatus_REVOKED :: CertificateStatus
pattern CertificateStatus_VALIDATION_TIMED_OUT :: CertificateStatus
newtype CertificateTransparencyLoggingPreference
CertificateTransparencyLoggingPreference' :: Text -> CertificateTransparencyLoggingPreference
[fromCertificateTransparencyLoggingPreference] :: CertificateTransparencyLoggingPreference -> Text
pattern CertificateTransparencyLoggingPreference_DISABLED :: CertificateTransparencyLoggingPreference
pattern CertificateTransparencyLoggingPreference_ENABLED :: CertificateTransparencyLoggingPreference
newtype CertificateType
CertificateType' :: Text -> CertificateType
[fromCertificateType] :: CertificateType -> Text
pattern CertificateType_AMAZON_ISSUED :: CertificateType
pattern CertificateType_IMPORTED :: CertificateType
pattern CertificateType_PRIVATE :: CertificateType
newtype DomainStatus
DomainStatus' :: Text -> DomainStatus
[fromDomainStatus] :: DomainStatus -> Text
pattern DomainStatus_FAILED :: DomainStatus
pattern DomainStatus_PENDING_VALIDATION :: DomainStatus
pattern DomainStatus_SUCCESS :: DomainStatus
newtype ExtendedKeyUsageName
ExtendedKeyUsageName' :: Text -> ExtendedKeyUsageName
[fromExtendedKeyUsageName] :: ExtendedKeyUsageName -> Text
pattern ExtendedKeyUsageName_ANY :: ExtendedKeyUsageName
pattern ExtendedKeyUsageName_CODE_SIGNING :: ExtendedKeyUsageName
pattern ExtendedKeyUsageName_CUSTOM :: ExtendedKeyUsageName
pattern ExtendedKeyUsageName_EMAIL_PROTECTION :: ExtendedKeyUsageName
pattern ExtendedKeyUsageName_IPSEC_END_SYSTEM :: ExtendedKeyUsageName
pattern ExtendedKeyUsageName_IPSEC_TUNNEL :: ExtendedKeyUsageName
pattern ExtendedKeyUsageName_IPSEC_USER :: ExtendedKeyUsageName
pattern ExtendedKeyUsageName_NONE :: ExtendedKeyUsageName
pattern ExtendedKeyUsageName_OCSP_SIGNING :: ExtendedKeyUsageName
pattern ExtendedKeyUsageName_TIME_STAMPING :: ExtendedKeyUsageName
pattern ExtendedKeyUsageName_TLS_WEB_CLIENT_AUTHENTICATION :: ExtendedKeyUsageName
pattern ExtendedKeyUsageName_TLS_WEB_SERVER_AUTHENTICATION :: ExtendedKeyUsageName
newtype FailureReason
FailureReason' :: Text -> FailureReason
[fromFailureReason] :: FailureReason -> Text
pattern FailureReason_ADDITIONAL_VERIFICATION_REQUIRED :: FailureReason
pattern FailureReason_CAA_ERROR :: FailureReason
pattern FailureReason_DOMAIN_NOT_ALLOWED :: FailureReason
pattern FailureReason_DOMAIN_VALIDATION_DENIED :: FailureReason
pattern FailureReason_INVALID_PUBLIC_DOMAIN :: FailureReason
pattern FailureReason_NO_AVAILABLE_CONTACTS :: FailureReason
pattern FailureReason_OTHER :: FailureReason
pattern FailureReason_PCA_ACCESS_DENIED :: FailureReason
pattern FailureReason_PCA_INVALID_ARGS :: FailureReason
pattern FailureReason_PCA_INVALID_ARN :: FailureReason
pattern FailureReason_PCA_INVALID_DURATION :: FailureReason
pattern FailureReason_PCA_INVALID_STATE :: FailureReason
pattern FailureReason_PCA_LIMIT_EXCEEDED :: FailureReason
pattern FailureReason_PCA_NAME_CONSTRAINTS_VALIDATION :: FailureReason
pattern FailureReason_PCA_REQUEST_FAILED :: FailureReason
pattern FailureReason_PCA_RESOURCE_NOT_FOUND :: FailureReason
pattern FailureReason_SLR_NOT_FOUND :: FailureReason
newtype KeyAlgorithm
KeyAlgorithm' :: Text -> KeyAlgorithm
[fromKeyAlgorithm] :: KeyAlgorithm -> Text
pattern KeyAlgorithm_EC_prime256v1 :: KeyAlgorithm
pattern KeyAlgorithm_EC_secp384r1 :: KeyAlgorithm
pattern KeyAlgorithm_EC_secp521r1 :: KeyAlgorithm
pattern KeyAlgorithm_RSA_1024 :: KeyAlgorithm
pattern KeyAlgorithm_RSA_2048 :: KeyAlgorithm
pattern KeyAlgorithm_RSA_3072 :: KeyAlgorithm
pattern KeyAlgorithm_RSA_4096 :: KeyAlgorithm
newtype KeyUsageName
KeyUsageName' :: Text -> KeyUsageName
[fromKeyUsageName] :: KeyUsageName -> Text
pattern KeyUsageName_ANY :: KeyUsageName
pattern KeyUsageName_CERTIFICATE_SIGNING :: KeyUsageName
pattern KeyUsageName_CRL_SIGNING :: KeyUsageName
pattern KeyUsageName_CUSTOM :: KeyUsageName
pattern KeyUsageName_DATA_ENCIPHERMENT :: KeyUsageName
pattern KeyUsageName_DECIPHER_ONLY :: KeyUsageName
pattern KeyUsageName_DIGITAL_SIGNATURE :: KeyUsageName
pattern KeyUsageName_ENCIPHER_ONLY :: KeyUsageName
pattern KeyUsageName_KEY_AGREEMENT :: KeyUsageName
pattern KeyUsageName_KEY_ENCIPHERMENT :: KeyUsageName
pattern KeyUsageName_NON_REPUDIATION :: KeyUsageName
newtype RecordType
RecordType' :: Text -> RecordType
[fromRecordType] :: RecordType -> Text
pattern RecordType_CNAME :: RecordType
newtype RenewalEligibility
RenewalEligibility' :: Text -> RenewalEligibility
[fromRenewalEligibility] :: RenewalEligibility -> Text
pattern RenewalEligibility_ELIGIBLE :: RenewalEligibility
pattern RenewalEligibility_INELIGIBLE :: RenewalEligibility
newtype RenewalStatus
RenewalStatus' :: Text -> RenewalStatus
[fromRenewalStatus] :: RenewalStatus -> Text
pattern RenewalStatus_FAILED :: RenewalStatus
pattern RenewalStatus_PENDING_AUTO_RENEWAL :: RenewalStatus
pattern RenewalStatus_PENDING_VALIDATION :: RenewalStatus
pattern RenewalStatus_SUCCESS :: RenewalStatus
newtype RevocationReason
RevocationReason' :: Text -> RevocationReason
[fromRevocationReason] :: RevocationReason -> Text
pattern RevocationReason_AFFILIATION_CHANGED :: RevocationReason
pattern RevocationReason_A_A_COMPROMISE :: RevocationReason
pattern RevocationReason_CA_COMPROMISE :: RevocationReason
pattern RevocationReason_CERTIFICATE_HOLD :: RevocationReason
pattern RevocationReason_CESSATION_OF_OPERATION :: RevocationReason
pattern RevocationReason_KEY_COMPROMISE :: RevocationReason
pattern RevocationReason_PRIVILEGE_WITHDRAWN :: RevocationReason
pattern RevocationReason_REMOVE_FROM_CRL :: RevocationReason
pattern RevocationReason_SUPERCEDED :: RevocationReason
pattern RevocationReason_UNSPECIFIED :: RevocationReason
newtype ValidationMethod
ValidationMethod' :: Text -> ValidationMethod
[fromValidationMethod] :: ValidationMethod -> Text
pattern ValidationMethod_DNS :: ValidationMethod
pattern ValidationMethod_EMAIL :: ValidationMethod

-- | Contains metadata about an ACM certificate. This structure is returned
--   in the response to a DescribeCertificate request.
--   
--   <i>See:</i> <a>newCertificateDetail</a> smart constructor.
data CertificateDetail
CertificateDetail' :: Maybe Text -> Maybe CertificateStatus -> Maybe FailureReason -> Maybe (NonEmpty Text) -> Maybe [Text] -> Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe RenewalEligibility -> Maybe [ExtendedKeyUsage] -> Maybe POSIX -> Maybe [KeyUsage] -> Maybe POSIX -> Maybe POSIX -> Maybe RevocationReason -> Maybe Text -> Maybe RenewalSummary -> Maybe KeyAlgorithm -> Maybe CertificateType -> Maybe CertificateOptions -> Maybe POSIX -> Maybe Text -> Maybe (NonEmpty DomainValidation) -> Maybe Text -> Maybe POSIX -> Maybe Text -> CertificateDetail

-- | The name of the entity that is associated with the public key
--   contained in the certificate.
[$sel:subject:CertificateDetail'] :: CertificateDetail -> Maybe Text

-- | The status of the certificate.
[$sel:status:CertificateDetail'] :: CertificateDetail -> Maybe CertificateStatus

-- | The reason the certificate request failed. This value exists only when
--   the certificate status is <tt>FAILED</tt>. For more information, see
--   <a>Certificate Request Failed</a> in the <i>Amazon Web Services
--   Certificate Manager User Guide</i>.
[$sel:failureReason:CertificateDetail'] :: CertificateDetail -> Maybe FailureReason

-- | One or more domain names (subject alternative names) included in the
--   certificate. This list contains the domain names that are bound to the
--   public key that is contained in the certificate. The subject
--   alternative names include the canonical domain name (CN) of the
--   certificate and additional domain names that can be used to connect to
--   the website.
[$sel:subjectAlternativeNames:CertificateDetail'] :: CertificateDetail -> Maybe (NonEmpty Text)

-- | A list of ARNs for the Amazon Web Services resources that are using
--   the certificate. A certificate can be used by multiple Amazon Web
--   Services resources.
[$sel:inUseBy:CertificateDetail'] :: CertificateDetail -> Maybe [Text]

-- | The time at which the certificate was requested.
[$sel:createdAt:CertificateDetail'] :: CertificateDetail -> Maybe POSIX

-- | The Amazon Resource Name (ARN) of the certificate. For more
--   information about ARNs, see <a>Amazon Resource Names (ARNs)</a> in the
--   <i>Amazon Web Services General Reference</i>.
[$sel:certificateArn:CertificateDetail'] :: CertificateDetail -> Maybe Text

-- | The serial number of the certificate.
[$sel:serial:CertificateDetail'] :: CertificateDetail -> Maybe Text

-- | Specifies whether the certificate is eligible for renewal. At this
--   time, only exported private certificates can be renewed with the
--   RenewCertificate command.
[$sel:renewalEligibility:CertificateDetail'] :: CertificateDetail -> Maybe RenewalEligibility

-- | Contains a list of Extended Key Usage X.509 v3 extension objects. Each
--   object specifies a purpose for which the certificate public key can be
--   used and consists of a name and an object identifier (OID).
[$sel:extendedKeyUsages:CertificateDetail'] :: CertificateDetail -> Maybe [ExtendedKeyUsage]

-- | The date and time at which the certificate was imported. This value
--   exists only when the certificate type is <tt>IMPORTED</tt>.
[$sel:importedAt:CertificateDetail'] :: CertificateDetail -> Maybe POSIX

-- | A list of Key Usage X.509 v3 extension objects. Each object is a
--   string value that identifies the purpose of the public key contained
--   in the certificate. Possible extension values include
--   DIGITAL_SIGNATURE, KEY_ENCHIPHERMENT, NON_REPUDIATION, and more.
[$sel:keyUsages:CertificateDetail'] :: CertificateDetail -> Maybe [KeyUsage]

-- | The time at which the certificate was revoked. This value exists only
--   when the certificate status is <tt>REVOKED</tt>.
[$sel:revokedAt:CertificateDetail'] :: CertificateDetail -> Maybe POSIX

-- | The time before which the certificate is not valid.
[$sel:notBefore:CertificateDetail'] :: CertificateDetail -> Maybe POSIX

-- | The reason the certificate was revoked. This value exists only when
--   the certificate status is <tt>REVOKED</tt>.
[$sel:revocationReason:CertificateDetail'] :: CertificateDetail -> Maybe RevocationReason

-- | The fully qualified domain name for the certificate, such as
--   www.example.com or example.com.
[$sel:domainName:CertificateDetail'] :: CertificateDetail -> Maybe Text

-- | Contains information about the status of ACM's <a>managed renewal</a>
--   for the certificate. This field exists only when the certificate type
--   is <tt>AMAZON_ISSUED</tt>.
[$sel:renewalSummary:CertificateDetail'] :: CertificateDetail -> Maybe RenewalSummary

-- | The algorithm that was used to generate the public-private key pair.
[$sel:keyAlgorithm:CertificateDetail'] :: CertificateDetail -> Maybe KeyAlgorithm

-- | The source of the certificate. For certificates provided by ACM, this
--   value is <tt>AMAZON_ISSUED</tt>. For certificates that you imported
--   with ImportCertificate, this value is <tt>IMPORTED</tt>. ACM does not
--   provide <a>managed renewal</a> for imported certificates. For more
--   information about the differences between certificates that you import
--   and those that ACM provides, see <a>Importing Certificates</a> in the
--   <i>Amazon Web Services Certificate Manager User Guide</i>.
[$sel:type':CertificateDetail'] :: CertificateDetail -> Maybe CertificateType

-- | Value that specifies whether to add the certificate to a transparency
--   log. Certificate transparency makes it possible to detect SSL
--   certificates that have been mistakenly or maliciously issued. A
--   browser might respond to certificate that has not been logged by
--   showing an error message. The logs are cryptographically secure.
[$sel:options:CertificateDetail'] :: CertificateDetail -> Maybe CertificateOptions

-- | The time at which the certificate was issued. This value exists only
--   when the certificate type is <tt>AMAZON_ISSUED</tt>.
[$sel:issuedAt:CertificateDetail'] :: CertificateDetail -> Maybe POSIX

-- | The algorithm that was used to sign the certificate.
[$sel:signatureAlgorithm:CertificateDetail'] :: CertificateDetail -> Maybe Text

-- | Contains information about the initial validation of each domain name
--   that occurs as a result of the RequestCertificate request. This field
--   exists only when the certificate type is <tt>AMAZON_ISSUED</tt>.
[$sel:domainValidationOptions:CertificateDetail'] :: CertificateDetail -> Maybe (NonEmpty DomainValidation)

-- | The name of the certificate authority that issued and signed the
--   certificate.
[$sel:issuer:CertificateDetail'] :: CertificateDetail -> Maybe Text

-- | The time after which the certificate is not valid.
[$sel:notAfter:CertificateDetail'] :: CertificateDetail -> Maybe POSIX

-- | The Amazon Resource Name (ARN) of the ACM PCA private certificate
--   authority (CA) that issued the certificate. This has the following
--   format:
--   
--   <pre>
--   arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012
--   </pre>
[$sel:certificateAuthorityArn:CertificateDetail'] :: CertificateDetail -> Maybe Text

-- | Create a value of <a>CertificateDetail</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:subject:CertificateDetail'</a>,
--   <a>certificateDetail_subject</a> - The name of the entity that is
--   associated with the public key contained in the certificate.
--   
--   <a>$sel:status:CertificateDetail'</a>, <a>certificateDetail_status</a>
--   - The status of the certificate.
--   
--   <a>$sel:failureReason:CertificateDetail'</a>,
--   <a>certificateDetail_failureReason</a> - The reason the certificate
--   request failed. This value exists only when the certificate status is
--   <tt>FAILED</tt>. For more information, see <a>Certificate Request
--   Failed</a> in the <i>Amazon Web Services Certificate Manager User
--   Guide</i>.
--   
--   <a>$sel:subjectAlternativeNames:CertificateDetail'</a>,
--   <a>certificateDetail_subjectAlternativeNames</a> - One or more domain
--   names (subject alternative names) included in the certificate. This
--   list contains the domain names that are bound to the public key that
--   is contained in the certificate. The subject alternative names include
--   the canonical domain name (CN) of the certificate and additional
--   domain names that can be used to connect to the website.
--   
--   <a>$sel:inUseBy:CertificateDetail'</a>,
--   <a>certificateDetail_inUseBy</a> - A list of ARNs for the Amazon Web
--   Services resources that are using the certificate. A certificate can
--   be used by multiple Amazon Web Services resources.
--   
--   <a>$sel:createdAt:CertificateDetail'</a>,
--   <a>certificateDetail_createdAt</a> - The time at which the certificate
--   was requested.
--   
--   <a>$sel:certificateArn:CertificateDetail'</a>,
--   <a>certificateDetail_certificateArn</a> - The Amazon Resource Name
--   (ARN) of the certificate. For more information about ARNs, see
--   <a>Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services
--   General Reference</i>.
--   
--   <a>$sel:serial:CertificateDetail'</a>, <a>certificateDetail_serial</a>
--   - The serial number of the certificate.
--   
--   <a>$sel:renewalEligibility:CertificateDetail'</a>,
--   <a>certificateDetail_renewalEligibility</a> - Specifies whether the
--   certificate is eligible for renewal. At this time, only exported
--   private certificates can be renewed with the RenewCertificate command.
--   
--   <a>$sel:extendedKeyUsages:CertificateDetail'</a>,
--   <a>certificateDetail_extendedKeyUsages</a> - Contains a list of
--   Extended Key Usage X.509 v3 extension objects. Each object specifies a
--   purpose for which the certificate public key can be used and consists
--   of a name and an object identifier (OID).
--   
--   <a>$sel:importedAt:CertificateDetail'</a>,
--   <a>certificateDetail_importedAt</a> - The date and time at which the
--   certificate was imported. This value exists only when the certificate
--   type is <tt>IMPORTED</tt>.
--   
--   <a>$sel:keyUsages:CertificateDetail'</a>,
--   <a>certificateDetail_keyUsages</a> - A list of Key Usage X.509 v3
--   extension objects. Each object is a string value that identifies the
--   purpose of the public key contained in the certificate. Possible
--   extension values include DIGITAL_SIGNATURE, KEY_ENCHIPHERMENT,
--   NON_REPUDIATION, and more.
--   
--   <a>$sel:revokedAt:CertificateDetail'</a>,
--   <a>certificateDetail_revokedAt</a> - The time at which the certificate
--   was revoked. This value exists only when the certificate status is
--   <tt>REVOKED</tt>.
--   
--   <a>$sel:notBefore:CertificateDetail'</a>,
--   <a>certificateDetail_notBefore</a> - The time before which the
--   certificate is not valid.
--   
--   <a>$sel:revocationReason:CertificateDetail'</a>,
--   <a>certificateDetail_revocationReason</a> - The reason the certificate
--   was revoked. This value exists only when the certificate status is
--   <tt>REVOKED</tt>.
--   
--   <a>$sel:domainName:CertificateDetail'</a>,
--   <a>certificateDetail_domainName</a> - The fully qualified domain name
--   for the certificate, such as www.example.com or example.com.
--   
--   <a>$sel:renewalSummary:CertificateDetail'</a>,
--   <a>certificateDetail_renewalSummary</a> - Contains information about
--   the status of ACM's <a>managed renewal</a> for the certificate. This
--   field exists only when the certificate type is <tt>AMAZON_ISSUED</tt>.
--   
--   <a>$sel:keyAlgorithm:CertificateDetail'</a>,
--   <a>certificateDetail_keyAlgorithm</a> - The algorithm that was used to
--   generate the public-private key pair.
--   
--   <a>$sel:type':CertificateDetail'</a>, <a>certificateDetail_type</a> -
--   The source of the certificate. For certificates provided by ACM, this
--   value is <tt>AMAZON_ISSUED</tt>. For certificates that you imported
--   with ImportCertificate, this value is <tt>IMPORTED</tt>. ACM does not
--   provide <a>managed renewal</a> for imported certificates. For more
--   information about the differences between certificates that you import
--   and those that ACM provides, see <a>Importing Certificates</a> in the
--   <i>Amazon Web Services Certificate Manager User Guide</i>.
--   
--   <a>$sel:options:CertificateDetail'</a>,
--   <a>certificateDetail_options</a> - Value that specifies whether to add
--   the certificate to a transparency log. Certificate transparency makes
--   it possible to detect SSL certificates that have been mistakenly or
--   maliciously issued. A browser might respond to certificate that has
--   not been logged by showing an error message. The logs are
--   cryptographically secure.
--   
--   <a>$sel:issuedAt:CertificateDetail'</a>,
--   <a>certificateDetail_issuedAt</a> - The time at which the certificate
--   was issued. This value exists only when the certificate type is
--   <tt>AMAZON_ISSUED</tt>.
--   
--   <a>$sel:signatureAlgorithm:CertificateDetail'</a>,
--   <a>certificateDetail_signatureAlgorithm</a> - The algorithm that was
--   used to sign the certificate.
--   
--   <a>$sel:domainValidationOptions:CertificateDetail'</a>,
--   <a>certificateDetail_domainValidationOptions</a> - Contains
--   information about the initial validation of each domain name that
--   occurs as a result of the RequestCertificate request. This field
--   exists only when the certificate type is <tt>AMAZON_ISSUED</tt>.
--   
--   <a>$sel:issuer:CertificateDetail'</a>, <a>certificateDetail_issuer</a>
--   - The name of the certificate authority that issued and signed the
--   certificate.
--   
--   <a>$sel:notAfter:CertificateDetail'</a>,
--   <a>certificateDetail_notAfter</a> - The time after which the
--   certificate is not valid.
--   
--   <a>$sel:certificateAuthorityArn:CertificateDetail'</a>,
--   <a>certificateDetail_certificateAuthorityArn</a> - The Amazon Resource
--   Name (ARN) of the ACM PCA private certificate authority (CA) that
--   issued the certificate. This has the following format:
--   
--   <pre>
--   arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012
--   </pre>
newCertificateDetail :: CertificateDetail

-- | The name of the entity that is associated with the public key
--   contained in the certificate.
certificateDetail_subject :: Lens' CertificateDetail (Maybe Text)

-- | The status of the certificate.
certificateDetail_status :: Lens' CertificateDetail (Maybe CertificateStatus)

-- | The reason the certificate request failed. This value exists only when
--   the certificate status is <tt>FAILED</tt>. For more information, see
--   <a>Certificate Request Failed</a> in the <i>Amazon Web Services
--   Certificate Manager User Guide</i>.
certificateDetail_failureReason :: Lens' CertificateDetail (Maybe FailureReason)

-- | One or more domain names (subject alternative names) included in the
--   certificate. This list contains the domain names that are bound to the
--   public key that is contained in the certificate. The subject
--   alternative names include the canonical domain name (CN) of the
--   certificate and additional domain names that can be used to connect to
--   the website.
certificateDetail_subjectAlternativeNames :: Lens' CertificateDetail (Maybe (NonEmpty Text))

-- | A list of ARNs for the Amazon Web Services resources that are using
--   the certificate. A certificate can be used by multiple Amazon Web
--   Services resources.
certificateDetail_inUseBy :: Lens' CertificateDetail (Maybe [Text])

-- | The time at which the certificate was requested.
certificateDetail_createdAt :: Lens' CertificateDetail (Maybe UTCTime)

-- | The Amazon Resource Name (ARN) of the certificate. For more
--   information about ARNs, see <a>Amazon Resource Names (ARNs)</a> in the
--   <i>Amazon Web Services General Reference</i>.
certificateDetail_certificateArn :: Lens' CertificateDetail (Maybe Text)

-- | The serial number of the certificate.
certificateDetail_serial :: Lens' CertificateDetail (Maybe Text)

-- | Specifies whether the certificate is eligible for renewal. At this
--   time, only exported private certificates can be renewed with the
--   RenewCertificate command.
certificateDetail_renewalEligibility :: Lens' CertificateDetail (Maybe RenewalEligibility)

-- | Contains a list of Extended Key Usage X.509 v3 extension objects. Each
--   object specifies a purpose for which the certificate public key can be
--   used and consists of a name and an object identifier (OID).
certificateDetail_extendedKeyUsages :: Lens' CertificateDetail (Maybe [ExtendedKeyUsage])

-- | The date and time at which the certificate was imported. This value
--   exists only when the certificate type is <tt>IMPORTED</tt>.
certificateDetail_importedAt :: Lens' CertificateDetail (Maybe UTCTime)

-- | A list of Key Usage X.509 v3 extension objects. Each object is a
--   string value that identifies the purpose of the public key contained
--   in the certificate. Possible extension values include
--   DIGITAL_SIGNATURE, KEY_ENCHIPHERMENT, NON_REPUDIATION, and more.
certificateDetail_keyUsages :: Lens' CertificateDetail (Maybe [KeyUsage])

-- | The time at which the certificate was revoked. This value exists only
--   when the certificate status is <tt>REVOKED</tt>.
certificateDetail_revokedAt :: Lens' CertificateDetail (Maybe UTCTime)

-- | The time before which the certificate is not valid.
certificateDetail_notBefore :: Lens' CertificateDetail (Maybe UTCTime)

-- | The reason the certificate was revoked. This value exists only when
--   the certificate status is <tt>REVOKED</tt>.
certificateDetail_revocationReason :: Lens' CertificateDetail (Maybe RevocationReason)

-- | The fully qualified domain name for the certificate, such as
--   www.example.com or example.com.
certificateDetail_domainName :: Lens' CertificateDetail (Maybe Text)

-- | Contains information about the status of ACM's <a>managed renewal</a>
--   for the certificate. This field exists only when the certificate type
--   is <tt>AMAZON_ISSUED</tt>.
certificateDetail_renewalSummary :: Lens' CertificateDetail (Maybe RenewalSummary)

-- | The algorithm that was used to generate the public-private key pair.
certificateDetail_keyAlgorithm :: Lens' CertificateDetail (Maybe KeyAlgorithm)

-- | The source of the certificate. For certificates provided by ACM, this
--   value is <tt>AMAZON_ISSUED</tt>. For certificates that you imported
--   with ImportCertificate, this value is <tt>IMPORTED</tt>. ACM does not
--   provide <a>managed renewal</a> for imported certificates. For more
--   information about the differences between certificates that you import
--   and those that ACM provides, see <a>Importing Certificates</a> in the
--   <i>Amazon Web Services Certificate Manager User Guide</i>.
certificateDetail_type :: Lens' CertificateDetail (Maybe CertificateType)

-- | Value that specifies whether to add the certificate to a transparency
--   log. Certificate transparency makes it possible to detect SSL
--   certificates that have been mistakenly or maliciously issued. A
--   browser might respond to certificate that has not been logged by
--   showing an error message. The logs are cryptographically secure.
certificateDetail_options :: Lens' CertificateDetail (Maybe CertificateOptions)

-- | The time at which the certificate was issued. This value exists only
--   when the certificate type is <tt>AMAZON_ISSUED</tt>.
certificateDetail_issuedAt :: Lens' CertificateDetail (Maybe UTCTime)

-- | The algorithm that was used to sign the certificate.
certificateDetail_signatureAlgorithm :: Lens' CertificateDetail (Maybe Text)

-- | Contains information about the initial validation of each domain name
--   that occurs as a result of the RequestCertificate request. This field
--   exists only when the certificate type is <tt>AMAZON_ISSUED</tt>.
certificateDetail_domainValidationOptions :: Lens' CertificateDetail (Maybe (NonEmpty DomainValidation))

-- | The name of the certificate authority that issued and signed the
--   certificate.
certificateDetail_issuer :: Lens' CertificateDetail (Maybe Text)

-- | The time after which the certificate is not valid.
certificateDetail_notAfter :: Lens' CertificateDetail (Maybe UTCTime)

-- | The Amazon Resource Name (ARN) of the ACM PCA private certificate
--   authority (CA) that issued the certificate. This has the following
--   format:
--   
--   <pre>
--   arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012
--   </pre>
certificateDetail_certificateAuthorityArn :: Lens' CertificateDetail (Maybe Text)

-- | Structure that contains options for your certificate. Currently, you
--   can use this only to specify whether to opt in to or out of
--   certificate transparency logging. Some browsers require that public
--   certificates issued for your domain be recorded in a log. Certificates
--   that are not logged typically generate a browser error. Transparency
--   makes it possible for you to detect SSL/TLS certificates that have
--   been mistakenly or maliciously issued for your domain. For general
--   information, see <a>Certificate Transparency Logging</a>.
--   
--   <i>See:</i> <a>newCertificateOptions</a> smart constructor.
data CertificateOptions
CertificateOptions' :: Maybe CertificateTransparencyLoggingPreference -> CertificateOptions

-- | You can opt out of certificate transparency logging by specifying the
--   <tt>DISABLED</tt> option. Opt in by specifying <tt>ENABLED</tt>.
[$sel:certificateTransparencyLoggingPreference:CertificateOptions'] :: CertificateOptions -> Maybe CertificateTransparencyLoggingPreference

-- | Create a value of <a>CertificateOptions</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:certificateTransparencyLoggingPreference:CertificateOptions'</a>,
--   <a>certificateOptions_certificateTransparencyLoggingPreference</a> -
--   You can opt out of certificate transparency logging by specifying the
--   <tt>DISABLED</tt> option. Opt in by specifying <tt>ENABLED</tt>.
newCertificateOptions :: CertificateOptions

-- | You can opt out of certificate transparency logging by specifying the
--   <tt>DISABLED</tt> option. Opt in by specifying <tt>ENABLED</tt>.
certificateOptions_certificateTransparencyLoggingPreference :: Lens' CertificateOptions (Maybe CertificateTransparencyLoggingPreference)

-- | This structure is returned in the response object of ListCertificates
--   action.
--   
--   <i>See:</i> <a>newCertificateSummary</a> smart constructor.
data CertificateSummary
CertificateSummary' :: Maybe Text -> Maybe Text -> CertificateSummary

-- | Amazon Resource Name (ARN) of the certificate. This is of the form:
--   
--   <pre>
--   arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   For more information about ARNs, see <a>Amazon Resource Names
--   (ARNs)</a>.
[$sel:certificateArn:CertificateSummary'] :: CertificateSummary -> Maybe Text

-- | Fully qualified domain name (FQDN), such as www.example.com or
--   example.com, for the certificate.
[$sel:domainName:CertificateSummary'] :: CertificateSummary -> Maybe Text

-- | Create a value of <a>CertificateSummary</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:certificateArn:CertificateSummary'</a>,
--   <a>certificateSummary_certificateArn</a> - Amazon Resource Name (ARN)
--   of the certificate. This is of the form:
--   
--   <pre>
--   arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   For more information about ARNs, see <a>Amazon Resource Names
--   (ARNs)</a>.
--   
--   <a>$sel:domainName:CertificateSummary'</a>,
--   <a>certificateSummary_domainName</a> - Fully qualified domain name
--   (FQDN), such as www.example.com or example.com, for the certificate.
newCertificateSummary :: CertificateSummary

-- | Amazon Resource Name (ARN) of the certificate. This is of the form:
--   
--   <pre>
--   arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   For more information about ARNs, see <a>Amazon Resource Names
--   (ARNs)</a>.
certificateSummary_certificateArn :: Lens' CertificateSummary (Maybe Text)

-- | Fully qualified domain name (FQDN), such as www.example.com or
--   example.com, for the certificate.
certificateSummary_domainName :: Lens' CertificateSummary (Maybe Text)

-- | Contains information about the validation of each domain name in the
--   certificate.
--   
--   <i>See:</i> <a>newDomainValidation</a> smart constructor.
data DomainValidation
DomainValidation' :: Maybe [Text] -> Maybe ValidationMethod -> Maybe ResourceRecord -> Maybe DomainStatus -> Maybe Text -> Text -> DomainValidation

-- | A list of email addresses that ACM used to send domain validation
--   emails.
[$sel:validationEmails:DomainValidation'] :: DomainValidation -> Maybe [Text]

-- | Specifies the domain validation method.
[$sel:validationMethod:DomainValidation'] :: DomainValidation -> Maybe ValidationMethod

-- | Contains the CNAME record that you add to your DNS database for domain
--   validation. For more information, see <a>Use DNS to Validate Domain
--   Ownership</a>.
--   
--   Note: The CNAME information that you need does not include the name of
--   your domain. If you include  your domain name in the DNS database
--   CNAME record, validation fails.  For example, if the name is
--   "_a79865eb4cd1a6ab990a45779b4e0b96.yourdomain.com", only
--   "_a79865eb4cd1a6ab990a45779b4e0b96" must be used.
[$sel:resourceRecord:DomainValidation'] :: DomainValidation -> Maybe ResourceRecord

-- | The validation status of the domain name. This can be one of the
--   following values:
--   
--   <ul>
--   <li><pre>PENDING_VALIDATION</pre></li>
--   <li>@@SUCCESS</li>
--   <li>@@FAILED</li>
--   </ul>
[$sel:validationStatus:DomainValidation'] :: DomainValidation -> Maybe DomainStatus

-- | The domain name that ACM used to send domain validation emails.
[$sel:validationDomain:DomainValidation'] :: DomainValidation -> Maybe Text

-- | A fully qualified domain name (FQDN) in the certificate. For example,
--   <tt>www.example.com</tt> or <tt>example.com</tt>.
[$sel:domainName:DomainValidation'] :: DomainValidation -> Text

-- | Create a value of <a>DomainValidation</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:validationEmails:DomainValidation'</a>,
--   <a>domainValidation_validationEmails</a> - A list of email addresses
--   that ACM used to send domain validation emails.
--   
--   <a>$sel:validationMethod:DomainValidation'</a>,
--   <a>domainValidation_validationMethod</a> - Specifies the domain
--   validation method.
--   
--   <a>$sel:resourceRecord:DomainValidation'</a>,
--   <a>domainValidation_resourceRecord</a> - Contains the CNAME record
--   that you add to your DNS database for domain validation. For more
--   information, see <a>Use DNS to Validate Domain Ownership</a>.
--   
--   Note: The CNAME information that you need does not include the name of
--   your domain. If you include  your domain name in the DNS database
--   CNAME record, validation fails.  For example, if the name is
--   "_a79865eb4cd1a6ab990a45779b4e0b96.yourdomain.com", only
--   "_a79865eb4cd1a6ab990a45779b4e0b96" must be used.
--   
--   <a>$sel:validationStatus:DomainValidation'</a>,
--   <a>domainValidation_validationStatus</a> - The validation status of
--   the domain name. This can be one of the following values:
--   
--   <ul>
--   <li><pre>PENDING_VALIDATION</pre></li>
--   <li>@@SUCCESS</li>
--   <li>@@FAILED</li>
--   </ul>
--   
--   <a>$sel:validationDomain:DomainValidation'</a>,
--   <a>domainValidation_validationDomain</a> - The domain name that ACM
--   used to send domain validation emails.
--   
--   <a>$sel:domainName:DomainValidation'</a>,
--   <a>domainValidation_domainName</a> - A fully qualified domain name
--   (FQDN) in the certificate. For example, <tt>www.example.com</tt> or
--   <tt>example.com</tt>.
newDomainValidation :: Text -> DomainValidation

-- | A list of email addresses that ACM used to send domain validation
--   emails.
domainValidation_validationEmails :: Lens' DomainValidation (Maybe [Text])

-- | Specifies the domain validation method.
domainValidation_validationMethod :: Lens' DomainValidation (Maybe ValidationMethod)

-- | Contains the CNAME record that you add to your DNS database for domain
--   validation. For more information, see <a>Use DNS to Validate Domain
--   Ownership</a>.
--   
--   Note: The CNAME information that you need does not include the name of
--   your domain. If you include  your domain name in the DNS database
--   CNAME record, validation fails.  For example, if the name is
--   "_a79865eb4cd1a6ab990a45779b4e0b96.yourdomain.com", only
--   "_a79865eb4cd1a6ab990a45779b4e0b96" must be used.
domainValidation_resourceRecord :: Lens' DomainValidation (Maybe ResourceRecord)

-- | The validation status of the domain name. This can be one of the
--   following values:
--   
--   <ul>
--   <li><pre>PENDING_VALIDATION</pre></li>
--   <li>@@SUCCESS</li>
--   <li>@@FAILED</li>
--   </ul>
domainValidation_validationStatus :: Lens' DomainValidation (Maybe DomainStatus)

-- | The domain name that ACM used to send domain validation emails.
domainValidation_validationDomain :: Lens' DomainValidation (Maybe Text)

-- | A fully qualified domain name (FQDN) in the certificate. For example,
--   <tt>www.example.com</tt> or <tt>example.com</tt>.
domainValidation_domainName :: Lens' DomainValidation Text

-- | Contains information about the domain names that you want ACM to use
--   to send you emails that enable you to validate domain ownership.
--   
--   <i>See:</i> <a>newDomainValidationOption</a> smart constructor.
data DomainValidationOption
DomainValidationOption' :: Text -> Text -> DomainValidationOption

-- | A fully qualified domain name (FQDN) in the certificate request.
[$sel:domainName:DomainValidationOption'] :: DomainValidationOption -> Text

-- | The domain name that you want ACM to use to send you validation
--   emails. This domain name is the suffix of the email addresses that you
--   want ACM to use. This must be the same as the <tt>DomainName</tt>
--   value or a superdomain of the <tt>DomainName</tt> value. For example,
--   if you request a certificate for <tt>testing.example.com</tt>, you can
--   specify <tt>example.com</tt> for this value. In that case, ACM sends
--   domain validation emails to the following five addresses:
--   
--   <ul>
--   <li>admin@example.com</li>
--   <li>administrator@example.com</li>
--   <li>hostmaster@example.com</li>
--   <li>postmaster@example.com</li>
--   <li>webmaster@example.com</li>
--   </ul>
[$sel:validationDomain:DomainValidationOption'] :: DomainValidationOption -> Text

-- | Create a value of <a>DomainValidationOption</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:domainName:DomainValidationOption'</a>,
--   <a>domainValidationOption_domainName</a> - A fully qualified domain
--   name (FQDN) in the certificate request.
--   
--   <a>$sel:validationDomain:DomainValidationOption'</a>,
--   <a>domainValidationOption_validationDomain</a> - The domain name that
--   you want ACM to use to send you validation emails. This domain name is
--   the suffix of the email addresses that you want ACM to use. This must
--   be the same as the <tt>DomainName</tt> value or a superdomain of the
--   <tt>DomainName</tt> value. For example, if you request a certificate
--   for <tt>testing.example.com</tt>, you can specify <tt>example.com</tt>
--   for this value. In that case, ACM sends domain validation emails to
--   the following five addresses:
--   
--   <ul>
--   <li>admin@example.com</li>
--   <li>administrator@example.com</li>
--   <li>hostmaster@example.com</li>
--   <li>postmaster@example.com</li>
--   <li>webmaster@example.com</li>
--   </ul>
newDomainValidationOption :: Text -> Text -> DomainValidationOption

-- | A fully qualified domain name (FQDN) in the certificate request.
domainValidationOption_domainName :: Lens' DomainValidationOption Text

-- | The domain name that you want ACM to use to send you validation
--   emails. This domain name is the suffix of the email addresses that you
--   want ACM to use. This must be the same as the <tt>DomainName</tt>
--   value or a superdomain of the <tt>DomainName</tt> value. For example,
--   if you request a certificate for <tt>testing.example.com</tt>, you can
--   specify <tt>example.com</tt> for this value. In that case, ACM sends
--   domain validation emails to the following five addresses:
--   
--   <ul>
--   <li>admin@example.com</li>
--   <li>administrator@example.com</li>
--   <li>hostmaster@example.com</li>
--   <li>postmaster@example.com</li>
--   <li>webmaster@example.com</li>
--   </ul>
domainValidationOption_validationDomain :: Lens' DomainValidationOption Text

-- | Object containing expiration events options associated with an Amazon
--   Web Services account.
--   
--   <i>See:</i> <a>newExpiryEventsConfiguration</a> smart constructor.
data ExpiryEventsConfiguration
ExpiryEventsConfiguration' :: Maybe Natural -> ExpiryEventsConfiguration

-- | Specifies the number of days prior to certificate expiration when ACM
--   starts generating <tt>EventBridge</tt> events. ACM sends one event per
--   day per certificate until the certificate expires. By default,
--   accounts receive events starting 45 days before certificate
--   expiration.
[$sel:daysBeforeExpiry:ExpiryEventsConfiguration'] :: ExpiryEventsConfiguration -> Maybe Natural

-- | Create a value of <a>ExpiryEventsConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:daysBeforeExpiry:ExpiryEventsConfiguration'</a>,
--   <a>expiryEventsConfiguration_daysBeforeExpiry</a> - Specifies the
--   number of days prior to certificate expiration when ACM starts
--   generating <tt>EventBridge</tt> events. ACM sends one event per day
--   per certificate until the certificate expires. By default, accounts
--   receive events starting 45 days before certificate expiration.
newExpiryEventsConfiguration :: ExpiryEventsConfiguration

-- | Specifies the number of days prior to certificate expiration when ACM
--   starts generating <tt>EventBridge</tt> events. ACM sends one event per
--   day per certificate until the certificate expires. By default,
--   accounts receive events starting 45 days before certificate
--   expiration.
expiryEventsConfiguration_daysBeforeExpiry :: Lens' ExpiryEventsConfiguration (Maybe Natural)

-- | The Extended Key Usage X.509 v3 extension defines one or more purposes
--   for which the public key can be used. This is in addition to or in
--   place of the basic purposes specified by the Key Usage extension.
--   
--   <i>See:</i> <a>newExtendedKeyUsage</a> smart constructor.
data ExtendedKeyUsage
ExtendedKeyUsage' :: Maybe Text -> Maybe ExtendedKeyUsageName -> ExtendedKeyUsage

-- | An object identifier (OID) for the extension value. OIDs are strings
--   of numbers separated by periods. The following OIDs are defined in RFC
--   3280 and RFC 5280.
--   
--   <ul>
--   <li><pre>1.3.6.1.5.5.7.3.1 (TLS_WEB_SERVER_AUTHENTICATION)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.2 (TLS_WEB_CLIENT_AUTHENTICATION)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.3 (CODE_SIGNING)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.4 (EMAIL_PROTECTION)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.8 (TIME_STAMPING)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.9 (OCSP_SIGNING)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.5 (IPSEC_END_SYSTEM)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.6 (IPSEC_TUNNEL)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.7 (IPSEC_USER)</pre></li>
--   </ul>
[$sel:oid:ExtendedKeyUsage'] :: ExtendedKeyUsage -> Maybe Text

-- | The name of an Extended Key Usage value.
[$sel:name:ExtendedKeyUsage'] :: ExtendedKeyUsage -> Maybe ExtendedKeyUsageName

-- | Create a value of <a>ExtendedKeyUsage</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:oid:ExtendedKeyUsage'</a>, <a>extendedKeyUsage_oid</a> - An
--   object identifier (OID) for the extension value. OIDs are strings of
--   numbers separated by periods. The following OIDs are defined in RFC
--   3280 and RFC 5280.
--   
--   <ul>
--   <li><pre>1.3.6.1.5.5.7.3.1 (TLS_WEB_SERVER_AUTHENTICATION)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.2 (TLS_WEB_CLIENT_AUTHENTICATION)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.3 (CODE_SIGNING)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.4 (EMAIL_PROTECTION)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.8 (TIME_STAMPING)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.9 (OCSP_SIGNING)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.5 (IPSEC_END_SYSTEM)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.6 (IPSEC_TUNNEL)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.7 (IPSEC_USER)</pre></li>
--   </ul>
--   
--   <a>$sel:name:ExtendedKeyUsage'</a>, <a>extendedKeyUsage_name</a> - The
--   name of an Extended Key Usage value.
newExtendedKeyUsage :: ExtendedKeyUsage

-- | An object identifier (OID) for the extension value. OIDs are strings
--   of numbers separated by periods. The following OIDs are defined in RFC
--   3280 and RFC 5280.
--   
--   <ul>
--   <li><pre>1.3.6.1.5.5.7.3.1 (TLS_WEB_SERVER_AUTHENTICATION)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.2 (TLS_WEB_CLIENT_AUTHENTICATION)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.3 (CODE_SIGNING)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.4 (EMAIL_PROTECTION)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.8 (TIME_STAMPING)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.9 (OCSP_SIGNING)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.5 (IPSEC_END_SYSTEM)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.6 (IPSEC_TUNNEL)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.7 (IPSEC_USER)</pre></li>
--   </ul>
extendedKeyUsage_oid :: Lens' ExtendedKeyUsage (Maybe Text)

-- | The name of an Extended Key Usage value.
extendedKeyUsage_name :: Lens' ExtendedKeyUsage (Maybe ExtendedKeyUsageName)

-- | This structure can be used in the ListCertificates action to filter
--   the output of the certificate list.
--   
--   <i>See:</i> <a>newFilters</a> smart constructor.
data Filters
Filters' :: Maybe [KeyAlgorithm] -> Maybe [KeyUsageName] -> Maybe [ExtendedKeyUsageName] -> Filters

-- | Specify one or more algorithms that can be used to generate key pairs.
--   
--   Default filtering returns only <tt>RSA_1024</tt> and <tt>RSA_2048</tt>
--   certificates that have at least one domain. To return other
--   certificate types, provide the desired type signatures in a
--   comma-separated list. For example, <tt>"keyTypes":
--   ["RSA_2048,RSA_4096"]</tt> returns both <tt>RSA_2048</tt> and
--   <tt>RSA_4096</tt> certificates.
[$sel:keyTypes:Filters'] :: Filters -> Maybe [KeyAlgorithm]

-- | Specify one or more KeyUsage extension values.
[$sel:keyUsage:Filters'] :: Filters -> Maybe [KeyUsageName]

-- | Specify one or more ExtendedKeyUsage extension values.
[$sel:extendedKeyUsage:Filters'] :: Filters -> Maybe [ExtendedKeyUsageName]

-- | Create a value of <a>Filters</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyTypes:Filters'</a>, <a>filters_keyTypes</a> - Specify one
--   or more algorithms that can be used to generate key pairs.
--   
--   Default filtering returns only <tt>RSA_1024</tt> and <tt>RSA_2048</tt>
--   certificates that have at least one domain. To return other
--   certificate types, provide the desired type signatures in a
--   comma-separated list. For example, <tt>"keyTypes":
--   ["RSA_2048,RSA_4096"]</tt> returns both <tt>RSA_2048</tt> and
--   <tt>RSA_4096</tt> certificates.
--   
--   <a>$sel:keyUsage:Filters'</a>, <a>filters_keyUsage</a> - Specify one
--   or more KeyUsage extension values.
--   
--   <a>$sel:extendedKeyUsage:Filters'</a>, <a>filters_extendedKeyUsage</a>
--   - Specify one or more ExtendedKeyUsage extension values.
newFilters :: Filters

-- | Specify one or more algorithms that can be used to generate key pairs.
--   
--   Default filtering returns only <tt>RSA_1024</tt> and <tt>RSA_2048</tt>
--   certificates that have at least one domain. To return other
--   certificate types, provide the desired type signatures in a
--   comma-separated list. For example, <tt>"keyTypes":
--   ["RSA_2048,RSA_4096"]</tt> returns both <tt>RSA_2048</tt> and
--   <tt>RSA_4096</tt> certificates.
filters_keyTypes :: Lens' Filters (Maybe [KeyAlgorithm])

-- | Specify one or more KeyUsage extension values.
filters_keyUsage :: Lens' Filters (Maybe [KeyUsageName])

-- | Specify one or more ExtendedKeyUsage extension values.
filters_extendedKeyUsage :: Lens' Filters (Maybe [ExtendedKeyUsageName])

-- | The Key Usage X.509 v3 extension defines the purpose of the public key
--   contained in the certificate.
--   
--   <i>See:</i> <a>newKeyUsage</a> smart constructor.
data KeyUsage
KeyUsage' :: Maybe KeyUsageName -> KeyUsage

-- | A string value that contains a Key Usage extension name.
[$sel:name:KeyUsage'] :: KeyUsage -> Maybe KeyUsageName

-- | Create a value of <a>KeyUsage</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:name:KeyUsage'</a>, <a>keyUsage_name</a> - A string value that
--   contains a Key Usage extension name.
newKeyUsage :: KeyUsage

-- | A string value that contains a Key Usage extension name.
keyUsage_name :: Lens' KeyUsage (Maybe KeyUsageName)

-- | Contains information about the status of ACM's <a>managed renewal</a>
--   for the certificate. This structure exists only when the certificate
--   type is <tt>AMAZON_ISSUED</tt>.
--   
--   <i>See:</i> <a>newRenewalSummary</a> smart constructor.
data RenewalSummary
RenewalSummary' :: Maybe FailureReason -> RenewalStatus -> NonEmpty DomainValidation -> POSIX -> RenewalSummary

-- | The reason that a renewal request was unsuccessful.
[$sel:renewalStatusReason:RenewalSummary'] :: RenewalSummary -> Maybe FailureReason

-- | The status of ACM's <a>managed renewal</a> of the certificate.
[$sel:renewalStatus:RenewalSummary'] :: RenewalSummary -> RenewalStatus

-- | Contains information about the validation of each domain name in the
--   certificate, as it pertains to ACM's <a>managed renewal</a>. This is
--   different from the initial validation that occurs as a result of the
--   RequestCertificate request. This field exists only when the
--   certificate type is <tt>AMAZON_ISSUED</tt>.
[$sel:domainValidationOptions:RenewalSummary'] :: RenewalSummary -> NonEmpty DomainValidation

-- | The time at which the renewal summary was last updated.
[$sel:updatedAt:RenewalSummary'] :: RenewalSummary -> POSIX

-- | Create a value of <a>RenewalSummary</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:renewalStatusReason:RenewalSummary'</a>,
--   <a>renewalSummary_renewalStatusReason</a> - The reason that a renewal
--   request was unsuccessful.
--   
--   <a>$sel:renewalStatus:RenewalSummary'</a>,
--   <a>renewalSummary_renewalStatus</a> - The status of ACM's <a>managed
--   renewal</a> of the certificate.
--   
--   <a>$sel:domainValidationOptions:RenewalSummary'</a>,
--   <a>renewalSummary_domainValidationOptions</a> - Contains information
--   about the validation of each domain name in the certificate, as it
--   pertains to ACM's <a>managed renewal</a>. This is different from the
--   initial validation that occurs as a result of the RequestCertificate
--   request. This field exists only when the certificate type is
--   <tt>AMAZON_ISSUED</tt>.
--   
--   <a>$sel:updatedAt:RenewalSummary'</a>, <a>renewalSummary_updatedAt</a>
--   - The time at which the renewal summary was last updated.
newRenewalSummary :: RenewalStatus -> NonEmpty DomainValidation -> UTCTime -> RenewalSummary

-- | The reason that a renewal request was unsuccessful.
renewalSummary_renewalStatusReason :: Lens' RenewalSummary (Maybe FailureReason)

-- | The status of ACM's <a>managed renewal</a> of the certificate.
renewalSummary_renewalStatus :: Lens' RenewalSummary RenewalStatus

-- | Contains information about the validation of each domain name in the
--   certificate, as it pertains to ACM's <a>managed renewal</a>. This is
--   different from the initial validation that occurs as a result of the
--   RequestCertificate request. This field exists only when the
--   certificate type is <tt>AMAZON_ISSUED</tt>.
renewalSummary_domainValidationOptions :: Lens' RenewalSummary (NonEmpty DomainValidation)

-- | The time at which the renewal summary was last updated.
renewalSummary_updatedAt :: Lens' RenewalSummary UTCTime

-- | Contains a DNS record value that you can use to validate ownership or
--   control of a domain. This is used by the DescribeCertificate action.
--   
--   <i>See:</i> <a>newResourceRecord</a> smart constructor.
data ResourceRecord
ResourceRecord' :: Text -> RecordType -> Text -> ResourceRecord

-- | The name of the DNS record to create in your domain. This is supplied
--   by ACM.
[$sel:name:ResourceRecord'] :: ResourceRecord -> Text

-- | The type of DNS record. Currently this can be <tt>CNAME</tt>.
[$sel:type':ResourceRecord'] :: ResourceRecord -> RecordType

-- | The value of the CNAME record to add to your DNS database. This is
--   supplied by ACM.
[$sel:value:ResourceRecord'] :: ResourceRecord -> Text

-- | Create a value of <a>ResourceRecord</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:name:ResourceRecord'</a>, <a>resourceRecord_name</a> - The
--   name of the DNS record to create in your domain. This is supplied by
--   ACM.
--   
--   <a>$sel:type':ResourceRecord'</a>, <a>resourceRecord_type</a> - The
--   type of DNS record. Currently this can be <tt>CNAME</tt>.
--   
--   <a>$sel:value:ResourceRecord'</a>, <a>resourceRecord_value</a> - The
--   value of the CNAME record to add to your DNS database. This is
--   supplied by ACM.
newResourceRecord :: Text -> RecordType -> Text -> ResourceRecord

-- | The name of the DNS record to create in your domain. This is supplied
--   by ACM.
resourceRecord_name :: Lens' ResourceRecord Text

-- | The type of DNS record. Currently this can be <tt>CNAME</tt>.
resourceRecord_type :: Lens' ResourceRecord RecordType

-- | The value of the CNAME record to add to your DNS database. This is
--   supplied by ACM.
resourceRecord_value :: Lens' ResourceRecord Text

-- | A key-value pair that identifies or specifies metadata about an ACM
--   resource.
--   
--   <i>See:</i> <a>newTag</a> smart constructor.
data Tag
Tag' :: Maybe Text -> Text -> Tag

-- | The value of the tag.
[$sel:value:Tag'] :: Tag -> Maybe Text

-- | The key of the tag.
[$sel:key:Tag'] :: Tag -> Text

-- | Create a value of <a>Tag</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:Tag'</a>, <a>tag_value</a> - The value of the tag.
--   
--   <a>$sel:key:Tag'</a>, <a>tag_key</a> - The key of the tag.
newTag :: Text -> Tag

-- | The value of the tag.
tag_value :: Lens' Tag (Maybe Text)

-- | The key of the tag.
tag_key :: Lens' Tag Text


-- | Resends the email that requests domain ownership validation. The
--   domain owner or an authorized representative must approve the ACM
--   certificate before it can be issued. The certificate can be approved
--   by clicking a link in the mail to navigate to the Amazon certificate
--   approval website and then clicking <b>I Approve</b>. However, the
--   validation email can be blocked by spam filters. Therefore, if you do
--   not receive the original mail, you can request that the mail be resent
--   within 72 hours of requesting the ACM certificate. If more than 72
--   hours have elapsed since your original request or since your last
--   attempt to resend validation mail, you must request a new certificate.
--   For more information about setting up your contact email addresses,
--   see <a>Configure Email for your Domain</a>.
module Amazonka.CertificateManager.ResendValidationEmail

-- | <i>See:</i> <a>newResendValidationEmail</a> smart constructor.
data ResendValidationEmail
ResendValidationEmail' :: Text -> Text -> Text -> ResendValidationEmail

-- | String that contains the ARN of the requested certificate. The
--   certificate ARN is generated and returned by the RequestCertificate
--   action as soon as the request is made. By default, using this
--   parameter causes email to be sent to all top-level domains you
--   specified in the certificate request. The ARN must be of the form:
--   
--   <pre>
--   arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
[$sel:certificateArn:ResendValidationEmail'] :: ResendValidationEmail -> Text

-- | The fully qualified domain name (FQDN) of the certificate that needs
--   to be validated.
[$sel:domain:ResendValidationEmail'] :: ResendValidationEmail -> Text

-- | The base validation domain that will act as the suffix of the email
--   addresses that are used to send the emails. This must be the same as
--   the <tt>Domain</tt> value or a superdomain of the <tt>Domain</tt>
--   value. For example, if you requested a certificate for
--   <tt>site.subdomain.example.com</tt> and specify a
--   <b>ValidationDomain</b> of <tt>subdomain.example.com</tt>, ACM sends
--   email to the domain registrant, technical contact, and administrative
--   contact in WHOIS and the following five addresses:
--   
--   <ul>
--   <li>admin@subdomain.example.com</li>
--   <li>administrator@subdomain.example.com</li>
--   <li>hostmaster@subdomain.example.com</li>
--   <li>postmaster@subdomain.example.com</li>
--   <li>webmaster@subdomain.example.com</li>
--   </ul>
[$sel:validationDomain:ResendValidationEmail'] :: ResendValidationEmail -> Text

-- | Create a value of <a>ResendValidationEmail</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:certificateArn:ResendValidationEmail'</a>,
--   <a>resendValidationEmail_certificateArn</a> - String that contains the
--   ARN of the requested certificate. The certificate ARN is generated and
--   returned by the RequestCertificate action as soon as the request is
--   made. By default, using this parameter causes email to be sent to all
--   top-level domains you specified in the certificate request. The ARN
--   must be of the form:
--   
--   <pre>
--   arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   <a>$sel:domain:ResendValidationEmail'</a>,
--   <a>resendValidationEmail_domain</a> - The fully qualified domain name
--   (FQDN) of the certificate that needs to be validated.
--   
--   <a>$sel:validationDomain:ResendValidationEmail'</a>,
--   <a>resendValidationEmail_validationDomain</a> - The base validation
--   domain that will act as the suffix of the email addresses that are
--   used to send the emails. This must be the same as the <tt>Domain</tt>
--   value or a superdomain of the <tt>Domain</tt> value. For example, if
--   you requested a certificate for <tt>site.subdomain.example.com</tt>
--   and specify a <b>ValidationDomain</b> of
--   <tt>subdomain.example.com</tt>, ACM sends email to the domain
--   registrant, technical contact, and administrative contact in WHOIS and
--   the following five addresses:
--   
--   <ul>
--   <li>admin@subdomain.example.com</li>
--   <li>administrator@subdomain.example.com</li>
--   <li>hostmaster@subdomain.example.com</li>
--   <li>postmaster@subdomain.example.com</li>
--   <li>webmaster@subdomain.example.com</li>
--   </ul>
newResendValidationEmail :: Text -> Text -> Text -> ResendValidationEmail

-- | String that contains the ARN of the requested certificate. The
--   certificate ARN is generated and returned by the RequestCertificate
--   action as soon as the request is made. By default, using this
--   parameter causes email to be sent to all top-level domains you
--   specified in the certificate request. The ARN must be of the form:
--   
--   <pre>
--   arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
resendValidationEmail_certificateArn :: Lens' ResendValidationEmail Text

-- | The fully qualified domain name (FQDN) of the certificate that needs
--   to be validated.
resendValidationEmail_domain :: Lens' ResendValidationEmail Text

-- | The base validation domain that will act as the suffix of the email
--   addresses that are used to send the emails. This must be the same as
--   the <tt>Domain</tt> value or a superdomain of the <tt>Domain</tt>
--   value. For example, if you requested a certificate for
--   <tt>site.subdomain.example.com</tt> and specify a
--   <b>ValidationDomain</b> of <tt>subdomain.example.com</tt>, ACM sends
--   email to the domain registrant, technical contact, and administrative
--   contact in WHOIS and the following five addresses:
--   
--   <ul>
--   <li>admin@subdomain.example.com</li>
--   <li>administrator@subdomain.example.com</li>
--   <li>hostmaster@subdomain.example.com</li>
--   <li>postmaster@subdomain.example.com</li>
--   <li>webmaster@subdomain.example.com</li>
--   </ul>
resendValidationEmail_validationDomain :: Lens' ResendValidationEmail Text

-- | <i>See:</i> <a>newResendValidationEmailResponse</a> smart constructor.
data ResendValidationEmailResponse
ResendValidationEmailResponse' :: ResendValidationEmailResponse

-- | Create a value of <a>ResendValidationEmailResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newResendValidationEmailResponse :: ResendValidationEmailResponse
instance GHC.Generics.Generic Amazonka.CertificateManager.ResendValidationEmail.ResendValidationEmail
instance GHC.Show.Show Amazonka.CertificateManager.ResendValidationEmail.ResendValidationEmail
instance GHC.Read.Read Amazonka.CertificateManager.ResendValidationEmail.ResendValidationEmail
instance GHC.Classes.Eq Amazonka.CertificateManager.ResendValidationEmail.ResendValidationEmail
instance GHC.Generics.Generic Amazonka.CertificateManager.ResendValidationEmail.ResendValidationEmailResponse
instance GHC.Show.Show Amazonka.CertificateManager.ResendValidationEmail.ResendValidationEmailResponse
instance GHC.Read.Read Amazonka.CertificateManager.ResendValidationEmail.ResendValidationEmailResponse
instance GHC.Classes.Eq Amazonka.CertificateManager.ResendValidationEmail.ResendValidationEmailResponse
instance Amazonka.Types.AWSRequest Amazonka.CertificateManager.ResendValidationEmail.ResendValidationEmail
instance Control.DeepSeq.NFData Amazonka.CertificateManager.ResendValidationEmail.ResendValidationEmailResponse
instance Data.Hashable.Class.Hashable Amazonka.CertificateManager.ResendValidationEmail.ResendValidationEmail
instance Control.DeepSeq.NFData Amazonka.CertificateManager.ResendValidationEmail.ResendValidationEmail
instance Amazonka.Data.Headers.ToHeaders Amazonka.CertificateManager.ResendValidationEmail.ResendValidationEmail
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.CertificateManager.ResendValidationEmail.ResendValidationEmail
instance Amazonka.Data.Path.ToPath Amazonka.CertificateManager.ResendValidationEmail.ResendValidationEmail
instance Amazonka.Data.Query.ToQuery Amazonka.CertificateManager.ResendValidationEmail.ResendValidationEmail


-- | Requests an ACM certificate for use with other Amazon Web Services
--   services. To request an ACM certificate, you must specify a fully
--   qualified domain name (FQDN) in the <tt>DomainName</tt> parameter. You
--   can also specify additional FQDNs in the
--   <tt>SubjectAlternativeNames</tt> parameter.
--   
--   If you are requesting a private certificate, domain validation is not
--   required. If you are requesting a public certificate, each domain name
--   that you specify must be validated to verify that you own or control
--   the domain. You can use <a>DNS validation</a> or <a>email
--   validation</a>. We recommend that you use DNS validation. ACM issues
--   public certificates after receiving approval from the domain owner.
--   
--   ACM behavior differs from the
--   <a>https://tools.ietf.org/html/rfc6125#appendix-B.2</a>RFC 6125
--   specification of the certificate validation process. first checks for
--   a subject alternative name, and, if it finds one, ignores the common
--   name (CN)
module Amazonka.CertificateManager.RequestCertificate

-- | <i>See:</i> <a>newRequestCertificate</a> smart constructor.
data RequestCertificate
RequestCertificate' :: Maybe Text -> Maybe ValidationMethod -> Maybe (NonEmpty Text) -> Maybe CertificateOptions -> Maybe (NonEmpty DomainValidationOption) -> Maybe Text -> Maybe (NonEmpty Tag) -> Text -> RequestCertificate

-- | Customer chosen string that can be used to distinguish between calls
--   to <tt>RequestCertificate</tt>. Idempotency tokens time out after one
--   hour. Therefore, if you call <tt>RequestCertificate</tt> multiple
--   times with the same idempotency token within one hour, ACM recognizes
--   that you are requesting only one certificate and will issue only one.
--   If you change the idempotency token for each call, ACM recognizes that
--   you are requesting multiple certificates.
[$sel:idempotencyToken:RequestCertificate'] :: RequestCertificate -> Maybe Text

-- | The method you want to use if you are requesting a public certificate
--   to validate that you own or control domain. You can <a>validate with
--   DNS</a> or <a>validate with email</a>. We recommend that you use DNS
--   validation.
[$sel:validationMethod:RequestCertificate'] :: RequestCertificate -> Maybe ValidationMethod

-- | Additional FQDNs to be included in the Subject Alternative Name
--   extension of the ACM certificate. For example, add the name
--   www.example.net to a certificate for which the <tt>DomainName</tt>
--   field is www.example.com if users can reach your site by using either
--   name. The maximum number of domain names that you can add to an ACM
--   certificate is 100. However, the initial quota is 10 domain names. If
--   you need more than 10 names, you must request a quota increase. For
--   more information, see <a>Quotas</a>.
--   
--   The maximum length of a SAN DNS name is 253 octets. The name is made
--   up of multiple labels separated by periods. No label can be longer
--   than 63 octets. Consider the following examples:
--   
--   <ul>
--   <li><tt>(63 octets).(63 octets).(63 octets).(61 octets)</tt> is legal
--   because the total length is 253 octets (63+1+63+1+63+1+61) and no
--   label exceeds 63 octets.</li>
--   <li><tt>(64 octets).(63 octets).(63 octets).(61 octets)</tt> is not
--   legal because the total length exceeds 253 octets (64+1+63+1+63+1+61)
--   and the first label exceeds 63 octets.</li>
--   <li><tt>(63 octets).(63 octets).(63 octets).(62 octets)</tt> is not
--   legal because the total length of the DNS name (63+1+63+1+63+1+62)
--   exceeds 253 octets.</li>
--   </ul>
[$sel:subjectAlternativeNames:RequestCertificate'] :: RequestCertificate -> Maybe (NonEmpty Text)

-- | Currently, you can use this parameter to specify whether to add the
--   certificate to a certificate transparency log. Certificate
--   transparency makes it possible to detect SSL/TLS certificates that
--   have been mistakenly or maliciously issued. Certificates that have not
--   been logged typically produce an error message in a browser. For more
--   information, see <a>Opting Out of Certificate Transparency
--   Logging</a>.
[$sel:options:RequestCertificate'] :: RequestCertificate -> Maybe CertificateOptions

-- | The domain name that you want ACM to use to send you emails so that
--   you can validate domain ownership.
[$sel:domainValidationOptions:RequestCertificate'] :: RequestCertificate -> Maybe (NonEmpty DomainValidationOption)

-- | The Amazon Resource Name (ARN) of the private certificate authority
--   (CA) that will be used to issue the certificate. If you do not provide
--   an ARN and you are trying to request a private certificate, ACM will
--   attempt to issue a public certificate. For more information about
--   private CAs, see the <a>Amazon Web Services Certificate Manager
--   Private Certificate Authority (PCA)</a> user guide. The ARN must have
--   the following form:
--   
--   <pre>
--   arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012
--   </pre>
[$sel:certificateAuthorityArn:RequestCertificate'] :: RequestCertificate -> Maybe Text

-- | One or more resource tags to associate with the certificate.
[$sel:tags:RequestCertificate'] :: RequestCertificate -> Maybe (NonEmpty Tag)

-- | Fully qualified domain name (FQDN), such as www.example.com, that you
--   want to secure with an ACM certificate. Use an asterisk (*) to create
--   a wildcard certificate that protects several sites in the same domain.
--   For example, *.example.com protects www.example.com, site.example.com,
--   and images.example.com.
--   
--   The first domain name you enter cannot exceed 64 octets, including
--   periods. Each subsequent Subject Alternative Name (SAN), however, can
--   be up to 253 octets in length.
[$sel:domainName:RequestCertificate'] :: RequestCertificate -> Text

-- | Create a value of <a>RequestCertificate</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:idempotencyToken:RequestCertificate'</a>,
--   <a>requestCertificate_idempotencyToken</a> - Customer chosen string
--   that can be used to distinguish between calls to
--   <tt>RequestCertificate</tt>. Idempotency tokens time out after one
--   hour. Therefore, if you call <tt>RequestCertificate</tt> multiple
--   times with the same idempotency token within one hour, ACM recognizes
--   that you are requesting only one certificate and will issue only one.
--   If you change the idempotency token for each call, ACM recognizes that
--   you are requesting multiple certificates.
--   
--   <a>$sel:validationMethod:RequestCertificate'</a>,
--   <a>requestCertificate_validationMethod</a> - The method you want to
--   use if you are requesting a public certificate to validate that you
--   own or control domain. You can <a>validate with DNS</a> or <a>validate
--   with email</a>. We recommend that you use DNS validation.
--   
--   <a>$sel:subjectAlternativeNames:RequestCertificate'</a>,
--   <a>requestCertificate_subjectAlternativeNames</a> - Additional FQDNs
--   to be included in the Subject Alternative Name extension of the ACM
--   certificate. For example, add the name www.example.net to a
--   certificate for which the <tt>DomainName</tt> field is www.example.com
--   if users can reach your site by using either name. The maximum number
--   of domain names that you can add to an ACM certificate is 100.
--   However, the initial quota is 10 domain names. If you need more than
--   10 names, you must request a quota increase. For more information, see
--   <a>Quotas</a>.
--   
--   The maximum length of a SAN DNS name is 253 octets. The name is made
--   up of multiple labels separated by periods. No label can be longer
--   than 63 octets. Consider the following examples:
--   
--   <ul>
--   <li><tt>(63 octets).(63 octets).(63 octets).(61 octets)</tt> is legal
--   because the total length is 253 octets (63+1+63+1+63+1+61) and no
--   label exceeds 63 octets.</li>
--   <li><tt>(64 octets).(63 octets).(63 octets).(61 octets)</tt> is not
--   legal because the total length exceeds 253 octets (64+1+63+1+63+1+61)
--   and the first label exceeds 63 octets.</li>
--   <li><tt>(63 octets).(63 octets).(63 octets).(62 octets)</tt> is not
--   legal because the total length of the DNS name (63+1+63+1+63+1+62)
--   exceeds 253 octets.</li>
--   </ul>
--   
--   <a>$sel:options:RequestCertificate'</a>,
--   <a>requestCertificate_options</a> - Currently, you can use this
--   parameter to specify whether to add the certificate to a certificate
--   transparency log. Certificate transparency makes it possible to detect
--   SSL/TLS certificates that have been mistakenly or maliciously issued.
--   Certificates that have not been logged typically produce an error
--   message in a browser. For more information, see <a>Opting Out of
--   Certificate Transparency Logging</a>.
--   
--   <a>$sel:domainValidationOptions:RequestCertificate'</a>,
--   <a>requestCertificate_domainValidationOptions</a> - The domain name
--   that you want ACM to use to send you emails so that you can validate
--   domain ownership.
--   
--   <a>$sel:certificateAuthorityArn:RequestCertificate'</a>,
--   <a>requestCertificate_certificateAuthorityArn</a> - The Amazon
--   Resource Name (ARN) of the private certificate authority (CA) that
--   will be used to issue the certificate. If you do not provide an ARN
--   and you are trying to request a private certificate, ACM will attempt
--   to issue a public certificate. For more information about private CAs,
--   see the <a>Amazon Web Services Certificate Manager Private Certificate
--   Authority (PCA)</a> user guide. The ARN must have the following form:
--   
--   <pre>
--   arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   <a>$sel:tags:RequestCertificate'</a>, <a>requestCertificate_tags</a> -
--   One or more resource tags to associate with the certificate.
--   
--   <a>$sel:domainName:RequestCertificate'</a>,
--   <a>requestCertificate_domainName</a> - Fully qualified domain name
--   (FQDN), such as www.example.com, that you want to secure with an ACM
--   certificate. Use an asterisk (*) to create a wildcard certificate that
--   protects several sites in the same domain. For example, *.example.com
--   protects www.example.com, site.example.com, and images.example.com.
--   
--   The first domain name you enter cannot exceed 64 octets, including
--   periods. Each subsequent Subject Alternative Name (SAN), however, can
--   be up to 253 octets in length.
newRequestCertificate :: Text -> RequestCertificate

-- | Customer chosen string that can be used to distinguish between calls
--   to <tt>RequestCertificate</tt>. Idempotency tokens time out after one
--   hour. Therefore, if you call <tt>RequestCertificate</tt> multiple
--   times with the same idempotency token within one hour, ACM recognizes
--   that you are requesting only one certificate and will issue only one.
--   If you change the idempotency token for each call, ACM recognizes that
--   you are requesting multiple certificates.
requestCertificate_idempotencyToken :: Lens' RequestCertificate (Maybe Text)

-- | The method you want to use if you are requesting a public certificate
--   to validate that you own or control domain. You can <a>validate with
--   DNS</a> or <a>validate with email</a>. We recommend that you use DNS
--   validation.
requestCertificate_validationMethod :: Lens' RequestCertificate (Maybe ValidationMethod)

-- | Additional FQDNs to be included in the Subject Alternative Name
--   extension of the ACM certificate. For example, add the name
--   www.example.net to a certificate for which the <tt>DomainName</tt>
--   field is www.example.com if users can reach your site by using either
--   name. The maximum number of domain names that you can add to an ACM
--   certificate is 100. However, the initial quota is 10 domain names. If
--   you need more than 10 names, you must request a quota increase. For
--   more information, see <a>Quotas</a>.
--   
--   The maximum length of a SAN DNS name is 253 octets. The name is made
--   up of multiple labels separated by periods. No label can be longer
--   than 63 octets. Consider the following examples:
--   
--   <ul>
--   <li><tt>(63 octets).(63 octets).(63 octets).(61 octets)</tt> is legal
--   because the total length is 253 octets (63+1+63+1+63+1+61) and no
--   label exceeds 63 octets.</li>
--   <li><tt>(64 octets).(63 octets).(63 octets).(61 octets)</tt> is not
--   legal because the total length exceeds 253 octets (64+1+63+1+63+1+61)
--   and the first label exceeds 63 octets.</li>
--   <li><tt>(63 octets).(63 octets).(63 octets).(62 octets)</tt> is not
--   legal because the total length of the DNS name (63+1+63+1+63+1+62)
--   exceeds 253 octets.</li>
--   </ul>
requestCertificate_subjectAlternativeNames :: Lens' RequestCertificate (Maybe (NonEmpty Text))

-- | Currently, you can use this parameter to specify whether to add the
--   certificate to a certificate transparency log. Certificate
--   transparency makes it possible to detect SSL/TLS certificates that
--   have been mistakenly or maliciously issued. Certificates that have not
--   been logged typically produce an error message in a browser. For more
--   information, see <a>Opting Out of Certificate Transparency
--   Logging</a>.
requestCertificate_options :: Lens' RequestCertificate (Maybe CertificateOptions)

-- | The domain name that you want ACM to use to send you emails so that
--   you can validate domain ownership.
requestCertificate_domainValidationOptions :: Lens' RequestCertificate (Maybe (NonEmpty DomainValidationOption))

-- | The Amazon Resource Name (ARN) of the private certificate authority
--   (CA) that will be used to issue the certificate. If you do not provide
--   an ARN and you are trying to request a private certificate, ACM will
--   attempt to issue a public certificate. For more information about
--   private CAs, see the <a>Amazon Web Services Certificate Manager
--   Private Certificate Authority (PCA)</a> user guide. The ARN must have
--   the following form:
--   
--   <pre>
--   arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012
--   </pre>
requestCertificate_certificateAuthorityArn :: Lens' RequestCertificate (Maybe Text)

-- | One or more resource tags to associate with the certificate.
requestCertificate_tags :: Lens' RequestCertificate (Maybe (NonEmpty Tag))

-- | Fully qualified domain name (FQDN), such as www.example.com, that you
--   want to secure with an ACM certificate. Use an asterisk (*) to create
--   a wildcard certificate that protects several sites in the same domain.
--   For example, *.example.com protects www.example.com, site.example.com,
--   and images.example.com.
--   
--   The first domain name you enter cannot exceed 64 octets, including
--   periods. Each subsequent Subject Alternative Name (SAN), however, can
--   be up to 253 octets in length.
requestCertificate_domainName :: Lens' RequestCertificate Text

-- | <i>See:</i> <a>newRequestCertificateResponse</a> smart constructor.
data RequestCertificateResponse
RequestCertificateResponse' :: Maybe Text -> Int -> RequestCertificateResponse

-- | String that contains the ARN of the issued certificate. This must be
--   of the form:
--   
--   <pre>
--   arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
[$sel:certificateArn:RequestCertificateResponse'] :: RequestCertificateResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:RequestCertificateResponse'] :: RequestCertificateResponse -> Int

-- | Create a value of <a>RequestCertificateResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:certificateArn:RequestCertificateResponse'</a>,
--   <a>requestCertificateResponse_certificateArn</a> - String that
--   contains the ARN of the issued certificate. This must be of the form:
--   
--   <pre>
--   arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   <a>$sel:httpStatus:RequestCertificateResponse'</a>,
--   <a>requestCertificateResponse_httpStatus</a> - The response's http
--   status code.
newRequestCertificateResponse :: Int -> RequestCertificateResponse

-- | String that contains the ARN of the issued certificate. This must be
--   of the form:
--   
--   <pre>
--   arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
requestCertificateResponse_certificateArn :: Lens' RequestCertificateResponse (Maybe Text)

-- | The response's http status code.
requestCertificateResponse_httpStatus :: Lens' RequestCertificateResponse Int
instance GHC.Generics.Generic Amazonka.CertificateManager.RequestCertificate.RequestCertificate
instance GHC.Show.Show Amazonka.CertificateManager.RequestCertificate.RequestCertificate
instance GHC.Read.Read Amazonka.CertificateManager.RequestCertificate.RequestCertificate
instance GHC.Classes.Eq Amazonka.CertificateManager.RequestCertificate.RequestCertificate
instance GHC.Generics.Generic Amazonka.CertificateManager.RequestCertificate.RequestCertificateResponse
instance GHC.Show.Show Amazonka.CertificateManager.RequestCertificate.RequestCertificateResponse
instance GHC.Read.Read Amazonka.CertificateManager.RequestCertificate.RequestCertificateResponse
instance GHC.Classes.Eq Amazonka.CertificateManager.RequestCertificate.RequestCertificateResponse
instance Amazonka.Types.AWSRequest Amazonka.CertificateManager.RequestCertificate.RequestCertificate
instance Control.DeepSeq.NFData Amazonka.CertificateManager.RequestCertificate.RequestCertificateResponse
instance Data.Hashable.Class.Hashable Amazonka.CertificateManager.RequestCertificate.RequestCertificate
instance Control.DeepSeq.NFData Amazonka.CertificateManager.RequestCertificate.RequestCertificate
instance Amazonka.Data.Headers.ToHeaders Amazonka.CertificateManager.RequestCertificate.RequestCertificate
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.CertificateManager.RequestCertificate.RequestCertificate
instance Amazonka.Data.Path.ToPath Amazonka.CertificateManager.RequestCertificate.RequestCertificate
instance Amazonka.Data.Query.ToQuery Amazonka.CertificateManager.RequestCertificate.RequestCertificate


-- | Renews an eligible ACM certificate. At this time, only exported
--   private certificates can be renewed with this operation. In order to
--   renew your ACM PCA certificates with ACM, you must first <a>grant the
--   ACM service principal permission to do so</a>. For more information,
--   see <a>Testing Managed Renewal</a> in the ACM User Guide.
module Amazonka.CertificateManager.RenewCertificate

-- | <i>See:</i> <a>newRenewCertificate</a> smart constructor.
data RenewCertificate
RenewCertificate' :: Text -> RenewCertificate

-- | String that contains the ARN of the ACM certificate to be renewed.
--   This must be of the form:
--   
--   <pre>
--   arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   For more information about ARNs, see <a>Amazon Resource Names
--   (ARNs)</a>.
[$sel:certificateArn:RenewCertificate'] :: RenewCertificate -> Text

-- | Create a value of <a>RenewCertificate</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:certificateArn:RenewCertificate'</a>,
--   <a>renewCertificate_certificateArn</a> - String that contains the ARN
--   of the ACM certificate to be renewed. This must be of the form:
--   
--   <pre>
--   arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   For more information about ARNs, see <a>Amazon Resource Names
--   (ARNs)</a>.
newRenewCertificate :: Text -> RenewCertificate

-- | String that contains the ARN of the ACM certificate to be renewed.
--   This must be of the form:
--   
--   <pre>
--   arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   For more information about ARNs, see <a>Amazon Resource Names
--   (ARNs)</a>.
renewCertificate_certificateArn :: Lens' RenewCertificate Text

-- | <i>See:</i> <a>newRenewCertificateResponse</a> smart constructor.
data RenewCertificateResponse
RenewCertificateResponse' :: RenewCertificateResponse

-- | Create a value of <a>RenewCertificateResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newRenewCertificateResponse :: RenewCertificateResponse
instance GHC.Generics.Generic Amazonka.CertificateManager.RenewCertificate.RenewCertificate
instance GHC.Show.Show Amazonka.CertificateManager.RenewCertificate.RenewCertificate
instance GHC.Read.Read Amazonka.CertificateManager.RenewCertificate.RenewCertificate
instance GHC.Classes.Eq Amazonka.CertificateManager.RenewCertificate.RenewCertificate
instance GHC.Generics.Generic Amazonka.CertificateManager.RenewCertificate.RenewCertificateResponse
instance GHC.Show.Show Amazonka.CertificateManager.RenewCertificate.RenewCertificateResponse
instance GHC.Read.Read Amazonka.CertificateManager.RenewCertificate.RenewCertificateResponse
instance GHC.Classes.Eq Amazonka.CertificateManager.RenewCertificate.RenewCertificateResponse
instance Amazonka.Types.AWSRequest Amazonka.CertificateManager.RenewCertificate.RenewCertificate
instance Control.DeepSeq.NFData Amazonka.CertificateManager.RenewCertificate.RenewCertificateResponse
instance Data.Hashable.Class.Hashable Amazonka.CertificateManager.RenewCertificate.RenewCertificate
instance Control.DeepSeq.NFData Amazonka.CertificateManager.RenewCertificate.RenewCertificate
instance Amazonka.Data.Headers.ToHeaders Amazonka.CertificateManager.RenewCertificate.RenewCertificate
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.CertificateManager.RenewCertificate.RenewCertificate
instance Amazonka.Data.Path.ToPath Amazonka.CertificateManager.RenewCertificate.RenewCertificate
instance Amazonka.Data.Query.ToQuery Amazonka.CertificateManager.RenewCertificate.RenewCertificate


-- | Remove one or more tags from an ACM certificate. A tag consists of a
--   key-value pair. If you do not specify the value portion of the tag
--   when calling this function, the tag will be removed regardless of
--   value. If you specify a value, the tag is removed only if it is
--   associated with the specified value.
--   
--   To add tags to a certificate, use the AddTagsToCertificate action. To
--   view all of the tags that have been applied to a specific ACM
--   certificate, use the ListTagsForCertificate action.
module Amazonka.CertificateManager.RemoveTagsFromCertificate

-- | <i>See:</i> <a>newRemoveTagsFromCertificate</a> smart constructor.
data RemoveTagsFromCertificate
RemoveTagsFromCertificate' :: Text -> NonEmpty Tag -> RemoveTagsFromCertificate

-- | String that contains the ARN of the ACM Certificate with one or more
--   tags that you want to remove. This must be of the form:
--   
--   <pre>
--   arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   For more information about ARNs, see <a>Amazon Resource Names
--   (ARNs)</a>.
[$sel:certificateArn:RemoveTagsFromCertificate'] :: RemoveTagsFromCertificate -> Text

-- | The key-value pair that defines the tag to remove.
[$sel:tags:RemoveTagsFromCertificate'] :: RemoveTagsFromCertificate -> NonEmpty Tag

-- | Create a value of <a>RemoveTagsFromCertificate</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:certificateArn:RemoveTagsFromCertificate'</a>,
--   <a>removeTagsFromCertificate_certificateArn</a> - String that contains
--   the ARN of the ACM Certificate with one or more tags that you want to
--   remove. This must be of the form:
--   
--   <pre>
--   arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   For more information about ARNs, see <a>Amazon Resource Names
--   (ARNs)</a>.
--   
--   <a>$sel:tags:RemoveTagsFromCertificate'</a>,
--   <a>removeTagsFromCertificate_tags</a> - The key-value pair that
--   defines the tag to remove.
newRemoveTagsFromCertificate :: Text -> NonEmpty Tag -> RemoveTagsFromCertificate

-- | String that contains the ARN of the ACM Certificate with one or more
--   tags that you want to remove. This must be of the form:
--   
--   <pre>
--   arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   For more information about ARNs, see <a>Amazon Resource Names
--   (ARNs)</a>.
removeTagsFromCertificate_certificateArn :: Lens' RemoveTagsFromCertificate Text

-- | The key-value pair that defines the tag to remove.
removeTagsFromCertificate_tags :: Lens' RemoveTagsFromCertificate (NonEmpty Tag)

-- | <i>See:</i> <a>newRemoveTagsFromCertificateResponse</a> smart
--   constructor.
data RemoveTagsFromCertificateResponse
RemoveTagsFromCertificateResponse' :: RemoveTagsFromCertificateResponse

-- | Create a value of <a>RemoveTagsFromCertificateResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newRemoveTagsFromCertificateResponse :: RemoveTagsFromCertificateResponse
instance GHC.Generics.Generic Amazonka.CertificateManager.RemoveTagsFromCertificate.RemoveTagsFromCertificate
instance GHC.Show.Show Amazonka.CertificateManager.RemoveTagsFromCertificate.RemoveTagsFromCertificate
instance GHC.Read.Read Amazonka.CertificateManager.RemoveTagsFromCertificate.RemoveTagsFromCertificate
instance GHC.Classes.Eq Amazonka.CertificateManager.RemoveTagsFromCertificate.RemoveTagsFromCertificate
instance GHC.Generics.Generic Amazonka.CertificateManager.RemoveTagsFromCertificate.RemoveTagsFromCertificateResponse
instance GHC.Show.Show Amazonka.CertificateManager.RemoveTagsFromCertificate.RemoveTagsFromCertificateResponse
instance GHC.Read.Read Amazonka.CertificateManager.RemoveTagsFromCertificate.RemoveTagsFromCertificateResponse
instance GHC.Classes.Eq Amazonka.CertificateManager.RemoveTagsFromCertificate.RemoveTagsFromCertificateResponse
instance Amazonka.Types.AWSRequest Amazonka.CertificateManager.RemoveTagsFromCertificate.RemoveTagsFromCertificate
instance Control.DeepSeq.NFData Amazonka.CertificateManager.RemoveTagsFromCertificate.RemoveTagsFromCertificateResponse
instance Data.Hashable.Class.Hashable Amazonka.CertificateManager.RemoveTagsFromCertificate.RemoveTagsFromCertificate
instance Control.DeepSeq.NFData Amazonka.CertificateManager.RemoveTagsFromCertificate.RemoveTagsFromCertificate
instance Amazonka.Data.Headers.ToHeaders Amazonka.CertificateManager.RemoveTagsFromCertificate.RemoveTagsFromCertificate
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.CertificateManager.RemoveTagsFromCertificate.RemoveTagsFromCertificate
instance Amazonka.Data.Path.ToPath Amazonka.CertificateManager.RemoveTagsFromCertificate.RemoveTagsFromCertificate
instance Amazonka.Data.Query.ToQuery Amazonka.CertificateManager.RemoveTagsFromCertificate.RemoveTagsFromCertificate


-- | Adds or modifies account-level configurations in ACM.
--   
--   The supported configuration option is <tt>DaysBeforeExpiry</tt>. This
--   option specifies the number of days prior to certificate expiration
--   when ACM starts generating <tt>EventBridge</tt> events. ACM sends one
--   event per day per certificate until the certificate expires. By
--   default, accounts receive events starting 45 days before certificate
--   expiration.
module Amazonka.CertificateManager.PutAccountConfiguration

-- | <i>See:</i> <a>newPutAccountConfiguration</a> smart constructor.
data PutAccountConfiguration
PutAccountConfiguration' :: Maybe ExpiryEventsConfiguration -> Text -> PutAccountConfiguration

-- | Specifies expiration events associated with an account.
[$sel:expiryEvents:PutAccountConfiguration'] :: PutAccountConfiguration -> Maybe ExpiryEventsConfiguration

-- | Customer-chosen string used to distinguish between calls to
--   <tt>PutAccountConfiguration</tt>. Idempotency tokens time out after
--   one hour. If you call <tt>PutAccountConfiguration</tt> multiple times
--   with the same unexpired idempotency token, ACM treats it as the same
--   request and returns the original result. If you change the idempotency
--   token for each call, ACM treats each call as a new request.
[$sel:idempotencyToken:PutAccountConfiguration'] :: PutAccountConfiguration -> Text

-- | Create a value of <a>PutAccountConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:expiryEvents:PutAccountConfiguration'</a>,
--   <a>putAccountConfiguration_expiryEvents</a> - Specifies expiration
--   events associated with an account.
--   
--   <a>$sel:idempotencyToken:PutAccountConfiguration'</a>,
--   <a>putAccountConfiguration_idempotencyToken</a> - Customer-chosen
--   string used to distinguish between calls to
--   <tt>PutAccountConfiguration</tt>. Idempotency tokens time out after
--   one hour. If you call <tt>PutAccountConfiguration</tt> multiple times
--   with the same unexpired idempotency token, ACM treats it as the same
--   request and returns the original result. If you change the idempotency
--   token for each call, ACM treats each call as a new request.
newPutAccountConfiguration :: Text -> PutAccountConfiguration

-- | Specifies expiration events associated with an account.
putAccountConfiguration_expiryEvents :: Lens' PutAccountConfiguration (Maybe ExpiryEventsConfiguration)

-- | Customer-chosen string used to distinguish between calls to
--   <tt>PutAccountConfiguration</tt>. Idempotency tokens time out after
--   one hour. If you call <tt>PutAccountConfiguration</tt> multiple times
--   with the same unexpired idempotency token, ACM treats it as the same
--   request and returns the original result. If you change the idempotency
--   token for each call, ACM treats each call as a new request.
putAccountConfiguration_idempotencyToken :: Lens' PutAccountConfiguration Text

-- | <i>See:</i> <a>newPutAccountConfigurationResponse</a> smart
--   constructor.
data PutAccountConfigurationResponse
PutAccountConfigurationResponse' :: PutAccountConfigurationResponse

-- | Create a value of <a>PutAccountConfigurationResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newPutAccountConfigurationResponse :: PutAccountConfigurationResponse
instance GHC.Generics.Generic Amazonka.CertificateManager.PutAccountConfiguration.PutAccountConfiguration
instance GHC.Show.Show Amazonka.CertificateManager.PutAccountConfiguration.PutAccountConfiguration
instance GHC.Read.Read Amazonka.CertificateManager.PutAccountConfiguration.PutAccountConfiguration
instance GHC.Classes.Eq Amazonka.CertificateManager.PutAccountConfiguration.PutAccountConfiguration
instance GHC.Generics.Generic Amazonka.CertificateManager.PutAccountConfiguration.PutAccountConfigurationResponse
instance GHC.Show.Show Amazonka.CertificateManager.PutAccountConfiguration.PutAccountConfigurationResponse
instance GHC.Read.Read Amazonka.CertificateManager.PutAccountConfiguration.PutAccountConfigurationResponse
instance GHC.Classes.Eq Amazonka.CertificateManager.PutAccountConfiguration.PutAccountConfigurationResponse
instance Amazonka.Types.AWSRequest Amazonka.CertificateManager.PutAccountConfiguration.PutAccountConfiguration
instance Control.DeepSeq.NFData Amazonka.CertificateManager.PutAccountConfiguration.PutAccountConfigurationResponse
instance Data.Hashable.Class.Hashable Amazonka.CertificateManager.PutAccountConfiguration.PutAccountConfiguration
instance Control.DeepSeq.NFData Amazonka.CertificateManager.PutAccountConfiguration.PutAccountConfiguration
instance Amazonka.Data.Headers.ToHeaders Amazonka.CertificateManager.PutAccountConfiguration.PutAccountConfiguration
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.CertificateManager.PutAccountConfiguration.PutAccountConfiguration
instance Amazonka.Data.Path.ToPath Amazonka.CertificateManager.PutAccountConfiguration.PutAccountConfiguration
instance Amazonka.Data.Query.ToQuery Amazonka.CertificateManager.PutAccountConfiguration.PutAccountConfiguration


-- | Lists the tags that have been applied to the ACM certificate. Use the
--   certificate's Amazon Resource Name (ARN) to specify the certificate.
--   To add a tag to an ACM certificate, use the AddTagsToCertificate
--   action. To delete a tag, use the RemoveTagsFromCertificate action.
module Amazonka.CertificateManager.ListTagsForCertificate

-- | <i>See:</i> <a>newListTagsForCertificate</a> smart constructor.
data ListTagsForCertificate
ListTagsForCertificate' :: Text -> ListTagsForCertificate

-- | String that contains the ARN of the ACM certificate for which you want
--   to list the tags. This must have the following form:
--   
--   <pre>
--   arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   For more information about ARNs, see <a>Amazon Resource Names
--   (ARNs)</a>.
[$sel:certificateArn:ListTagsForCertificate'] :: ListTagsForCertificate -> Text

-- | Create a value of <a>ListTagsForCertificate</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:certificateArn:ListTagsForCertificate'</a>,
--   <a>listTagsForCertificate_certificateArn</a> - String that contains
--   the ARN of the ACM certificate for which you want to list the tags.
--   This must have the following form:
--   
--   <pre>
--   arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   For more information about ARNs, see <a>Amazon Resource Names
--   (ARNs)</a>.
newListTagsForCertificate :: Text -> ListTagsForCertificate

-- | String that contains the ARN of the ACM certificate for which you want
--   to list the tags. This must have the following form:
--   
--   <pre>
--   arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   For more information about ARNs, see <a>Amazon Resource Names
--   (ARNs)</a>.
listTagsForCertificate_certificateArn :: Lens' ListTagsForCertificate Text

-- | <i>See:</i> <a>newListTagsForCertificateResponse</a> smart
--   constructor.
data ListTagsForCertificateResponse
ListTagsForCertificateResponse' :: Maybe (NonEmpty Tag) -> Int -> ListTagsForCertificateResponse

-- | The key-value pairs that define the applied tags.
[$sel:tags:ListTagsForCertificateResponse'] :: ListTagsForCertificateResponse -> Maybe (NonEmpty Tag)

-- | The response's http status code.
[$sel:httpStatus:ListTagsForCertificateResponse'] :: ListTagsForCertificateResponse -> Int

-- | Create a value of <a>ListTagsForCertificateResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tags:ListTagsForCertificateResponse'</a>,
--   <a>listTagsForCertificateResponse_tags</a> - The key-value pairs that
--   define the applied tags.
--   
--   <a>$sel:httpStatus:ListTagsForCertificateResponse'</a>,
--   <a>listTagsForCertificateResponse_httpStatus</a> - The response's http
--   status code.
newListTagsForCertificateResponse :: Int -> ListTagsForCertificateResponse

-- | The key-value pairs that define the applied tags.
listTagsForCertificateResponse_tags :: Lens' ListTagsForCertificateResponse (Maybe (NonEmpty Tag))

-- | The response's http status code.
listTagsForCertificateResponse_httpStatus :: Lens' ListTagsForCertificateResponse Int
instance GHC.Generics.Generic Amazonka.CertificateManager.ListTagsForCertificate.ListTagsForCertificate
instance GHC.Show.Show Amazonka.CertificateManager.ListTagsForCertificate.ListTagsForCertificate
instance GHC.Read.Read Amazonka.CertificateManager.ListTagsForCertificate.ListTagsForCertificate
instance GHC.Classes.Eq Amazonka.CertificateManager.ListTagsForCertificate.ListTagsForCertificate
instance GHC.Generics.Generic Amazonka.CertificateManager.ListTagsForCertificate.ListTagsForCertificateResponse
instance GHC.Show.Show Amazonka.CertificateManager.ListTagsForCertificate.ListTagsForCertificateResponse
instance GHC.Read.Read Amazonka.CertificateManager.ListTagsForCertificate.ListTagsForCertificateResponse
instance GHC.Classes.Eq Amazonka.CertificateManager.ListTagsForCertificate.ListTagsForCertificateResponse
instance Amazonka.Types.AWSRequest Amazonka.CertificateManager.ListTagsForCertificate.ListTagsForCertificate
instance Control.DeepSeq.NFData Amazonka.CertificateManager.ListTagsForCertificate.ListTagsForCertificateResponse
instance Data.Hashable.Class.Hashable Amazonka.CertificateManager.ListTagsForCertificate.ListTagsForCertificate
instance Control.DeepSeq.NFData Amazonka.CertificateManager.ListTagsForCertificate.ListTagsForCertificate
instance Amazonka.Data.Headers.ToHeaders Amazonka.CertificateManager.ListTagsForCertificate.ListTagsForCertificate
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.CertificateManager.ListTagsForCertificate.ListTagsForCertificate
instance Amazonka.Data.Path.ToPath Amazonka.CertificateManager.ListTagsForCertificate.ListTagsForCertificate
instance Amazonka.Data.Query.ToQuery Amazonka.CertificateManager.ListTagsForCertificate.ListTagsForCertificate


-- | Retrieves a list of certificate ARNs and domain names. You can request
--   that only certificates that match a specific status be listed. You can
--   also filter by specific attributes of the certificate. Default
--   filtering returns only <tt>RSA_2048</tt> certificates. For more
--   information, see Filters.
--   
--   This operation returns paginated results.
module Amazonka.CertificateManager.ListCertificates

-- | <i>See:</i> <a>newListCertificates</a> smart constructor.
data ListCertificates
ListCertificates' :: Maybe [CertificateStatus] -> Maybe Text -> Maybe Filters -> Maybe Natural -> ListCertificates

-- | Filter the certificate list by status value.
[$sel:certificateStatuses:ListCertificates'] :: ListCertificates -> Maybe [CertificateStatus]

-- | Use this parameter only when paginating results and only in a
--   subsequent request after you receive a response with truncated
--   results. Set it to the value of <tt>NextToken</tt> from the response
--   you just received.
[$sel:nextToken:ListCertificates'] :: ListCertificates -> Maybe Text

-- | Filter the certificate list. For more information, see the Filters
--   structure.
[$sel:includes:ListCertificates'] :: ListCertificates -> Maybe Filters

-- | Use this parameter when paginating results to specify the maximum
--   number of items to return in the response. If additional items exist
--   beyond the number you specify, the <tt>NextToken</tt> element is sent
--   in the response. Use this <tt>NextToken</tt> value in a subsequent
--   request to retrieve additional items.
[$sel:maxItems:ListCertificates'] :: ListCertificates -> Maybe Natural

-- | Create a value of <a>ListCertificates</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:certificateStatuses:ListCertificates'</a>,
--   <a>listCertificates_certificateStatuses</a> - Filter the certificate
--   list by status value.
--   
--   <a>$sel:nextToken:ListCertificates'</a>,
--   <a>listCertificates_nextToken</a> - Use this parameter only when
--   paginating results and only in a subsequent request after you receive
--   a response with truncated results. Set it to the value of
--   <tt>NextToken</tt> from the response you just received.
--   
--   <a>$sel:includes:ListCertificates'</a>,
--   <a>listCertificates_includes</a> - Filter the certificate list. For
--   more information, see the Filters structure.
--   
--   <a>$sel:maxItems:ListCertificates'</a>,
--   <a>listCertificates_maxItems</a> - Use this parameter when paginating
--   results to specify the maximum number of items to return in the
--   response. If additional items exist beyond the number you specify, the
--   <tt>NextToken</tt> element is sent in the response. Use this
--   <tt>NextToken</tt> value in a subsequent request to retrieve
--   additional items.
newListCertificates :: ListCertificates

-- | Filter the certificate list by status value.
listCertificates_certificateStatuses :: Lens' ListCertificates (Maybe [CertificateStatus])

-- | Use this parameter only when paginating results and only in a
--   subsequent request after you receive a response with truncated
--   results. Set it to the value of <tt>NextToken</tt> from the response
--   you just received.
listCertificates_nextToken :: Lens' ListCertificates (Maybe Text)

-- | Filter the certificate list. For more information, see the Filters
--   structure.
listCertificates_includes :: Lens' ListCertificates (Maybe Filters)

-- | Use this parameter when paginating results to specify the maximum
--   number of items to return in the response. If additional items exist
--   beyond the number you specify, the <tt>NextToken</tt> element is sent
--   in the response. Use this <tt>NextToken</tt> value in a subsequent
--   request to retrieve additional items.
listCertificates_maxItems :: Lens' ListCertificates (Maybe Natural)

-- | <i>See:</i> <a>newListCertificatesResponse</a> smart constructor.
data ListCertificatesResponse
ListCertificatesResponse' :: Maybe [CertificateSummary] -> Maybe Text -> Int -> ListCertificatesResponse

-- | A list of ACM certificates.
[$sel:certificateSummaryList:ListCertificatesResponse'] :: ListCertificatesResponse -> Maybe [CertificateSummary]

-- | When the list is truncated, this value is present and contains the
--   value to use for the <tt>NextToken</tt> parameter in a subsequent
--   pagination request.
[$sel:nextToken:ListCertificatesResponse'] :: ListCertificatesResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:ListCertificatesResponse'] :: ListCertificatesResponse -> Int

-- | Create a value of <a>ListCertificatesResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:certificateSummaryList:ListCertificatesResponse'</a>,
--   <a>listCertificatesResponse_certificateSummaryList</a> - A list of ACM
--   certificates.
--   
--   <a>$sel:nextToken:ListCertificates'</a>,
--   <a>listCertificatesResponse_nextToken</a> - When the list is
--   truncated, this value is present and contains the value to use for the
--   <tt>NextToken</tt> parameter in a subsequent pagination request.
--   
--   <a>$sel:httpStatus:ListCertificatesResponse'</a>,
--   <a>listCertificatesResponse_httpStatus</a> - The response's http
--   status code.
newListCertificatesResponse :: Int -> ListCertificatesResponse

-- | A list of ACM certificates.
listCertificatesResponse_certificateSummaryList :: Lens' ListCertificatesResponse (Maybe [CertificateSummary])

-- | When the list is truncated, this value is present and contains the
--   value to use for the <tt>NextToken</tt> parameter in a subsequent
--   pagination request.
listCertificatesResponse_nextToken :: Lens' ListCertificatesResponse (Maybe Text)

-- | The response's http status code.
listCertificatesResponse_httpStatus :: Lens' ListCertificatesResponse Int
instance GHC.Generics.Generic Amazonka.CertificateManager.ListCertificates.ListCertificates
instance GHC.Show.Show Amazonka.CertificateManager.ListCertificates.ListCertificates
instance GHC.Read.Read Amazonka.CertificateManager.ListCertificates.ListCertificates
instance GHC.Classes.Eq Amazonka.CertificateManager.ListCertificates.ListCertificates
instance GHC.Generics.Generic Amazonka.CertificateManager.ListCertificates.ListCertificatesResponse
instance GHC.Show.Show Amazonka.CertificateManager.ListCertificates.ListCertificatesResponse
instance GHC.Read.Read Amazonka.CertificateManager.ListCertificates.ListCertificatesResponse
instance GHC.Classes.Eq Amazonka.CertificateManager.ListCertificates.ListCertificatesResponse
instance Amazonka.Types.AWSRequest Amazonka.CertificateManager.ListCertificates.ListCertificates
instance Control.DeepSeq.NFData Amazonka.CertificateManager.ListCertificates.ListCertificatesResponse
instance Amazonka.Pager.AWSPager Amazonka.CertificateManager.ListCertificates.ListCertificates
instance Data.Hashable.Class.Hashable Amazonka.CertificateManager.ListCertificates.ListCertificates
instance Control.DeepSeq.NFData Amazonka.CertificateManager.ListCertificates.ListCertificates
instance Amazonka.Data.Headers.ToHeaders Amazonka.CertificateManager.ListCertificates.ListCertificates
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.CertificateManager.ListCertificates.ListCertificates
instance Amazonka.Data.Path.ToPath Amazonka.CertificateManager.ListCertificates.ListCertificates
instance Amazonka.Data.Query.ToQuery Amazonka.CertificateManager.ListCertificates.ListCertificates


-- | Imports a certificate into Amazon Web Services Certificate Manager
--   (ACM) to use with services that are integrated with ACM. Note that
--   <a>integrated services</a> allow only certificate types and keys they
--   support to be associated with their resources. Further, their support
--   differs depending on whether the certificate is imported into IAM or
--   into ACM. For more information, see the documentation for each
--   service. For more information about importing certificates into ACM,
--   see <a>Importing Certificates</a> in the <i>Amazon Web Services
--   Certificate Manager User Guide</i>.
--   
--   ACM does not provide <a>managed renewal</a> for certificates that you
--   import.
--   
--   Note the following guidelines when importing third party certificates:
--   
--   <ul>
--   <li>You must enter the private key that matches the certificate you
--   are importing.</li>
--   <li>The private key must be unencrypted. You cannot import a private
--   key that is protected by a password or a passphrase.</li>
--   <li>The private key must be no larger than 5 KB (5,120 bytes).</li>
--   <li>If the certificate you are importing is not self-signed, you must
--   enter its certificate chain.</li>
--   <li>If a certificate chain is included, the issuer must be the subject
--   of one of the certificates in the chain.</li>
--   <li>The certificate, private key, and certificate chain must be
--   PEM-encoded.</li>
--   <li>The current time must be between the <tt>Not Before</tt> and
--   <tt>Not After</tt> certificate fields.</li>
--   <li>The <tt>Issuer</tt> field must not be empty.</li>
--   <li>The OCSP authority URL, if present, must not exceed 1000
--   characters.</li>
--   <li>To import a new certificate, omit the <tt>CertificateArn</tt>
--   argument. Include this argument only when you want to replace a
--   previously imported certificate.</li>
--   <li>When you import a certificate by using the CLI, you must specify
--   the certificate, the certificate chain, and the private key by their
--   file names preceded by <tt>fileb://</tt>. For example, you can specify
--   a certificate saved in the <tt>C:\temp</tt> folder as
--   <tt>fileb://C:\temp\certificate_to_import.pem</tt>. If you are making
--   an HTTP or HTTPS Query request, include these arguments as BLOBs.</li>
--   <li>When you import a certificate by using an SDK, you must specify
--   the certificate, the certificate chain, and the private key files in
--   the manner required by the programming language you're using.</li>
--   <li>The cryptographic algorithm of an imported certificate must match
--   the algorithm of the signing CA. For example, if the signing CA key
--   type is RSA, then the certificate key type must also be RSA.</li>
--   </ul>
--   
--   This operation returns the <a>Amazon Resource Name (ARN)</a> of the
--   imported certificate.
module Amazonka.CertificateManager.ImportCertificate

-- | <i>See:</i> <a>newImportCertificate</a> smart constructor.
data ImportCertificate
ImportCertificate' :: Maybe Text -> Maybe Base64 -> Maybe (NonEmpty Tag) -> Base64 -> Sensitive Base64 -> ImportCertificate

-- | The <a>Amazon Resource Name (ARN)</a> of an imported certificate to
--   replace. To import a new certificate, omit this field.
[$sel:certificateArn:ImportCertificate'] :: ImportCertificate -> Maybe Text

-- | The PEM encoded certificate chain.
[$sel:certificateChain:ImportCertificate'] :: ImportCertificate -> Maybe Base64

-- | One or more resource tags to associate with the imported certificate.
--   
--   Note: You cannot apply tags when reimporting a certificate.
[$sel:tags:ImportCertificate'] :: ImportCertificate -> Maybe (NonEmpty Tag)

-- | The certificate to import.
[$sel:certificate:ImportCertificate'] :: ImportCertificate -> Base64

-- | The private key that matches the public key in the certificate.
[$sel:privateKey:ImportCertificate'] :: ImportCertificate -> Sensitive Base64

-- | Create a value of <a>ImportCertificate</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:certificateArn:ImportCertificate'</a>,
--   <a>importCertificate_certificateArn</a> - The <a>Amazon Resource Name
--   (ARN)</a> of an imported certificate to replace. To import a new
--   certificate, omit this field.
--   
--   <a>$sel:certificateChain:ImportCertificate'</a>,
--   <a>importCertificate_certificateChain</a> - The PEM encoded
--   certificate chain.-- -- <i>Note:</i> This <tt>Lens</tt> automatically
--   encodes and decodes Base64 data. -- The underlying isomorphism will
--   encode to Base64 representation during -- serialisation, and decode
--   from Base64 representation during deserialisation. -- This
--   <tt>Lens</tt> accepts and returns only raw unencoded data.
--   
--   <a>$sel:tags:ImportCertificate'</a>, <a>importCertificate_tags</a> -
--   One or more resource tags to associate with the imported certificate.
--   
--   Note: You cannot apply tags when reimporting a certificate.
--   
--   <a>$sel:certificate:ImportCertificate'</a>,
--   <a>importCertificate_certificate</a> - The certificate to import.-- --
--   <i>Note:</i> This <tt>Lens</tt> automatically encodes and decodes
--   Base64 data. -- The underlying isomorphism will encode to Base64
--   representation during -- serialisation, and decode from Base64
--   representation during deserialisation. -- This <tt>Lens</tt> accepts
--   and returns only raw unencoded data.
--   
--   <a>$sel:privateKey:ImportCertificate'</a>,
--   <a>importCertificate_privateKey</a> - The private key that matches the
--   public key in the certificate.-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
newImportCertificate :: ByteString -> ByteString -> ImportCertificate

-- | The <a>Amazon Resource Name (ARN)</a> of an imported certificate to
--   replace. To import a new certificate, omit this field.
importCertificate_certificateArn :: Lens' ImportCertificate (Maybe Text)

-- | The PEM encoded certificate chain.-- -- <i>Note:</i> This
--   <tt>Lens</tt> automatically encodes and decodes Base64 data. -- The
--   underlying isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
importCertificate_certificateChain :: Lens' ImportCertificate (Maybe ByteString)

-- | One or more resource tags to associate with the imported certificate.
--   
--   Note: You cannot apply tags when reimporting a certificate.
importCertificate_tags :: Lens' ImportCertificate (Maybe (NonEmpty Tag))

-- | The certificate to import.-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
importCertificate_certificate :: Lens' ImportCertificate ByteString

-- | The private key that matches the public key in the certificate.-- --
--   <i>Note:</i> This <tt>Lens</tt> automatically encodes and decodes
--   Base64 data. -- The underlying isomorphism will encode to Base64
--   representation during -- serialisation, and decode from Base64
--   representation during deserialisation. -- This <tt>Lens</tt> accepts
--   and returns only raw unencoded data.
importCertificate_privateKey :: Lens' ImportCertificate ByteString

-- | <i>See:</i> <a>newImportCertificateResponse</a> smart constructor.
data ImportCertificateResponse
ImportCertificateResponse' :: Maybe Text -> Int -> ImportCertificateResponse

-- | The <a>Amazon Resource Name (ARN)</a> of the imported certificate.
[$sel:certificateArn:ImportCertificateResponse'] :: ImportCertificateResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:ImportCertificateResponse'] :: ImportCertificateResponse -> Int

-- | Create a value of <a>ImportCertificateResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:certificateArn:ImportCertificate'</a>,
--   <a>importCertificateResponse_certificateArn</a> - The <a>Amazon
--   Resource Name (ARN)</a> of the imported certificate.
--   
--   <a>$sel:httpStatus:ImportCertificateResponse'</a>,
--   <a>importCertificateResponse_httpStatus</a> - The response's http
--   status code.
newImportCertificateResponse :: Int -> ImportCertificateResponse

-- | The <a>Amazon Resource Name (ARN)</a> of the imported certificate.
importCertificateResponse_certificateArn :: Lens' ImportCertificateResponse (Maybe Text)

-- | The response's http status code.
importCertificateResponse_httpStatus :: Lens' ImportCertificateResponse Int
instance GHC.Generics.Generic Amazonka.CertificateManager.ImportCertificate.ImportCertificate
instance GHC.Show.Show Amazonka.CertificateManager.ImportCertificate.ImportCertificate
instance GHC.Classes.Eq Amazonka.CertificateManager.ImportCertificate.ImportCertificate
instance GHC.Generics.Generic Amazonka.CertificateManager.ImportCertificate.ImportCertificateResponse
instance GHC.Show.Show Amazonka.CertificateManager.ImportCertificate.ImportCertificateResponse
instance GHC.Read.Read Amazonka.CertificateManager.ImportCertificate.ImportCertificateResponse
instance GHC.Classes.Eq Amazonka.CertificateManager.ImportCertificate.ImportCertificateResponse
instance Amazonka.Types.AWSRequest Amazonka.CertificateManager.ImportCertificate.ImportCertificate
instance Control.DeepSeq.NFData Amazonka.CertificateManager.ImportCertificate.ImportCertificateResponse
instance Data.Hashable.Class.Hashable Amazonka.CertificateManager.ImportCertificate.ImportCertificate
instance Control.DeepSeq.NFData Amazonka.CertificateManager.ImportCertificate.ImportCertificate
instance Amazonka.Data.Headers.ToHeaders Amazonka.CertificateManager.ImportCertificate.ImportCertificate
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.CertificateManager.ImportCertificate.ImportCertificate
instance Amazonka.Data.Path.ToPath Amazonka.CertificateManager.ImportCertificate.ImportCertificate
instance Amazonka.Data.Query.ToQuery Amazonka.CertificateManager.ImportCertificate.ImportCertificate


-- | Retrieves an Amazon-issued certificate and its certificate chain. The
--   chain consists of the certificate of the issuing CA and the
--   intermediate certificates of any other subordinate CAs. All of the
--   certificates are base64 encoded. You can use <a>OpenSSL</a> to decode
--   the certificates and inspect individual fields.
module Amazonka.CertificateManager.GetCertificate

-- | <i>See:</i> <a>newGetCertificate</a> smart constructor.
data GetCertificate
GetCertificate' :: Text -> GetCertificate

-- | String that contains a certificate ARN in the following format:
--   
--   <pre>
--   arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   For more information about ARNs, see <a>Amazon Resource Names
--   (ARNs)</a>.
[$sel:certificateArn:GetCertificate'] :: GetCertificate -> Text

-- | Create a value of <a>GetCertificate</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:certificateArn:GetCertificate'</a>,
--   <a>getCertificate_certificateArn</a> - String that contains a
--   certificate ARN in the following format:
--   
--   <pre>
--   arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   For more information about ARNs, see <a>Amazon Resource Names
--   (ARNs)</a>.
newGetCertificate :: Text -> GetCertificate

-- | String that contains a certificate ARN in the following format:
--   
--   <pre>
--   arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   For more information about ARNs, see <a>Amazon Resource Names
--   (ARNs)</a>.
getCertificate_certificateArn :: Lens' GetCertificate Text

-- | <i>See:</i> <a>newGetCertificateResponse</a> smart constructor.
data GetCertificateResponse
GetCertificateResponse' :: Maybe Text -> Maybe Text -> Int -> GetCertificateResponse

-- | The ACM-issued certificate corresponding to the ARN specified as
--   input.
[$sel:certificate:GetCertificateResponse'] :: GetCertificateResponse -> Maybe Text

-- | Certificates forming the requested certificate's chain of trust. The
--   chain consists of the certificate of the issuing CA and the
--   intermediate certificates of any other subordinate CAs.
[$sel:certificateChain:GetCertificateResponse'] :: GetCertificateResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:GetCertificateResponse'] :: GetCertificateResponse -> Int

-- | Create a value of <a>GetCertificateResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:certificate:GetCertificateResponse'</a>,
--   <a>getCertificateResponse_certificate</a> - The ACM-issued certificate
--   corresponding to the ARN specified as input.
--   
--   <a>$sel:certificateChain:GetCertificateResponse'</a>,
--   <a>getCertificateResponse_certificateChain</a> - Certificates forming
--   the requested certificate's chain of trust. The chain consists of the
--   certificate of the issuing CA and the intermediate certificates of any
--   other subordinate CAs.
--   
--   <a>$sel:httpStatus:GetCertificateResponse'</a>,
--   <a>getCertificateResponse_httpStatus</a> - The response's http status
--   code.
newGetCertificateResponse :: Int -> GetCertificateResponse

-- | The ACM-issued certificate corresponding to the ARN specified as
--   input.
getCertificateResponse_certificate :: Lens' GetCertificateResponse (Maybe Text)

-- | Certificates forming the requested certificate's chain of trust. The
--   chain consists of the certificate of the issuing CA and the
--   intermediate certificates of any other subordinate CAs.
getCertificateResponse_certificateChain :: Lens' GetCertificateResponse (Maybe Text)

-- | The response's http status code.
getCertificateResponse_httpStatus :: Lens' GetCertificateResponse Int
instance GHC.Generics.Generic Amazonka.CertificateManager.GetCertificate.GetCertificate
instance GHC.Show.Show Amazonka.CertificateManager.GetCertificate.GetCertificate
instance GHC.Read.Read Amazonka.CertificateManager.GetCertificate.GetCertificate
instance GHC.Classes.Eq Amazonka.CertificateManager.GetCertificate.GetCertificate
instance GHC.Generics.Generic Amazonka.CertificateManager.GetCertificate.GetCertificateResponse
instance GHC.Show.Show Amazonka.CertificateManager.GetCertificate.GetCertificateResponse
instance GHC.Read.Read Amazonka.CertificateManager.GetCertificate.GetCertificateResponse
instance GHC.Classes.Eq Amazonka.CertificateManager.GetCertificate.GetCertificateResponse
instance Amazonka.Types.AWSRequest Amazonka.CertificateManager.GetCertificate.GetCertificate
instance Control.DeepSeq.NFData Amazonka.CertificateManager.GetCertificate.GetCertificateResponse
instance Data.Hashable.Class.Hashable Amazonka.CertificateManager.GetCertificate.GetCertificate
instance Control.DeepSeq.NFData Amazonka.CertificateManager.GetCertificate.GetCertificate
instance Amazonka.Data.Headers.ToHeaders Amazonka.CertificateManager.GetCertificate.GetCertificate
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.CertificateManager.GetCertificate.GetCertificate
instance Amazonka.Data.Path.ToPath Amazonka.CertificateManager.GetCertificate.GetCertificate
instance Amazonka.Data.Query.ToQuery Amazonka.CertificateManager.GetCertificate.GetCertificate


-- | Returns the account configuration options associated with an Amazon
--   Web Services account.
module Amazonka.CertificateManager.GetAccountConfiguration

-- | <i>See:</i> <a>newGetAccountConfiguration</a> smart constructor.
data GetAccountConfiguration
GetAccountConfiguration' :: GetAccountConfiguration

-- | Create a value of <a>GetAccountConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newGetAccountConfiguration :: GetAccountConfiguration

-- | <i>See:</i> <a>newGetAccountConfigurationResponse</a> smart
--   constructor.
data GetAccountConfigurationResponse
GetAccountConfigurationResponse' :: Maybe ExpiryEventsConfiguration -> Int -> GetAccountConfigurationResponse

-- | Expiration events configuration options associated with the Amazon Web
--   Services account.
[$sel:expiryEvents:GetAccountConfigurationResponse'] :: GetAccountConfigurationResponse -> Maybe ExpiryEventsConfiguration

-- | The response's http status code.
[$sel:httpStatus:GetAccountConfigurationResponse'] :: GetAccountConfigurationResponse -> Int

-- | Create a value of <a>GetAccountConfigurationResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:expiryEvents:GetAccountConfigurationResponse'</a>,
--   <a>getAccountConfigurationResponse_expiryEvents</a> - Expiration
--   events configuration options associated with the Amazon Web Services
--   account.
--   
--   <a>$sel:httpStatus:GetAccountConfigurationResponse'</a>,
--   <a>getAccountConfigurationResponse_httpStatus</a> - The response's
--   http status code.
newGetAccountConfigurationResponse :: Int -> GetAccountConfigurationResponse

-- | Expiration events configuration options associated with the Amazon Web
--   Services account.
getAccountConfigurationResponse_expiryEvents :: Lens' GetAccountConfigurationResponse (Maybe ExpiryEventsConfiguration)

-- | The response's http status code.
getAccountConfigurationResponse_httpStatus :: Lens' GetAccountConfigurationResponse Int
instance GHC.Generics.Generic Amazonka.CertificateManager.GetAccountConfiguration.GetAccountConfiguration
instance GHC.Show.Show Amazonka.CertificateManager.GetAccountConfiguration.GetAccountConfiguration
instance GHC.Read.Read Amazonka.CertificateManager.GetAccountConfiguration.GetAccountConfiguration
instance GHC.Classes.Eq Amazonka.CertificateManager.GetAccountConfiguration.GetAccountConfiguration
instance GHC.Generics.Generic Amazonka.CertificateManager.GetAccountConfiguration.GetAccountConfigurationResponse
instance GHC.Show.Show Amazonka.CertificateManager.GetAccountConfiguration.GetAccountConfigurationResponse
instance GHC.Read.Read Amazonka.CertificateManager.GetAccountConfiguration.GetAccountConfigurationResponse
instance GHC.Classes.Eq Amazonka.CertificateManager.GetAccountConfiguration.GetAccountConfigurationResponse
instance Amazonka.Types.AWSRequest Amazonka.CertificateManager.GetAccountConfiguration.GetAccountConfiguration
instance Control.DeepSeq.NFData Amazonka.CertificateManager.GetAccountConfiguration.GetAccountConfigurationResponse
instance Data.Hashable.Class.Hashable Amazonka.CertificateManager.GetAccountConfiguration.GetAccountConfiguration
instance Control.DeepSeq.NFData Amazonka.CertificateManager.GetAccountConfiguration.GetAccountConfiguration
instance Amazonka.Data.Headers.ToHeaders Amazonka.CertificateManager.GetAccountConfiguration.GetAccountConfiguration
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.CertificateManager.GetAccountConfiguration.GetAccountConfiguration
instance Amazonka.Data.Path.ToPath Amazonka.CertificateManager.GetAccountConfiguration.GetAccountConfiguration
instance Amazonka.Data.Query.ToQuery Amazonka.CertificateManager.GetAccountConfiguration.GetAccountConfiguration


-- | Exports a private certificate issued by a private certificate
--   authority (CA) for use anywhere. The exported file contains the
--   certificate, the certificate chain, and the encrypted private 2048-bit
--   RSA key associated with the public key that is embedded in the
--   certificate. For security, you must assign a passphrase for the
--   private key when exporting it.
--   
--   For information about exporting and formatting a certificate using the
--   ACM console or CLI, see <a>Export a Private Certificate</a>.
module Amazonka.CertificateManager.ExportCertificate

-- | <i>See:</i> <a>newExportCertificate</a> smart constructor.
data ExportCertificate
ExportCertificate' :: Text -> Sensitive Base64 -> ExportCertificate

-- | An Amazon Resource Name (ARN) of the issued certificate. This must be
--   of the form:
--   
--   <pre>
--   arn:aws:acm:region:account:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
[$sel:certificateArn:ExportCertificate'] :: ExportCertificate -> Text

-- | Passphrase to associate with the encrypted exported private key. If
--   you want to later decrypt the private key, you must have the
--   passphrase. You can use the following OpenSSL command to decrypt a
--   private key:
--   
--   <pre>
--   openssl rsa -in encrypted_key.pem -out decrypted_key.pem
--   </pre>
[$sel:passphrase:ExportCertificate'] :: ExportCertificate -> Sensitive Base64

-- | Create a value of <a>ExportCertificate</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:certificateArn:ExportCertificate'</a>,
--   <a>exportCertificate_certificateArn</a> - An Amazon Resource Name
--   (ARN) of the issued certificate. This must be of the form:
--   
--   <pre>
--   arn:aws:acm:region:account:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   <a>$sel:passphrase:ExportCertificate'</a>,
--   <a>exportCertificate_passphrase</a> - Passphrase to associate with the
--   encrypted exported private key. If you want to later decrypt the
--   private key, you must have the passphrase. You can use the following
--   OpenSSL command to decrypt a private key:
--   
--   <tt>openssl rsa -in encrypted_key.pem -out decrypted_key.pem</tt>-- --
--   <i>Note:</i> This <tt>Lens</tt> automatically encodes and decodes
--   Base64 data. -- The underlying isomorphism will encode to Base64
--   representation during -- serialisation, and decode from Base64
--   representation during deserialisation. -- This <tt>Lens</tt> accepts
--   and returns only raw unencoded data.
newExportCertificate :: Text -> ByteString -> ExportCertificate

-- | An Amazon Resource Name (ARN) of the issued certificate. This must be
--   of the form:
--   
--   <pre>
--   arn:aws:acm:region:account:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
exportCertificate_certificateArn :: Lens' ExportCertificate Text

-- | Passphrase to associate with the encrypted exported private key. If
--   you want to later decrypt the private key, you must have the
--   passphrase. You can use the following OpenSSL command to decrypt a
--   private key:
--   
--   <tt>openssl rsa -in encrypted_key.pem -out decrypted_key.pem</tt>-- --
--   <i>Note:</i> This <tt>Lens</tt> automatically encodes and decodes
--   Base64 data. -- The underlying isomorphism will encode to Base64
--   representation during -- serialisation, and decode from Base64
--   representation during deserialisation. -- This <tt>Lens</tt> accepts
--   and returns only raw unencoded data.
exportCertificate_passphrase :: Lens' ExportCertificate ByteString

-- | <i>See:</i> <a>newExportCertificateResponse</a> smart constructor.
data ExportCertificateResponse
ExportCertificateResponse' :: Maybe (Sensitive Text) -> Maybe Text -> Maybe Text -> Int -> ExportCertificateResponse

-- | The encrypted private key associated with the public key in the
--   certificate. The key is output in PKCS #8 format and is base64
--   PEM-encoded.
[$sel:privateKey:ExportCertificateResponse'] :: ExportCertificateResponse -> Maybe (Sensitive Text)

-- | The base64 PEM-encoded certificate.
[$sel:certificate:ExportCertificateResponse'] :: ExportCertificateResponse -> Maybe Text

-- | The base64 PEM-encoded certificate chain. This does not include the
--   certificate that you are exporting.
[$sel:certificateChain:ExportCertificateResponse'] :: ExportCertificateResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:ExportCertificateResponse'] :: ExportCertificateResponse -> Int

-- | Create a value of <a>ExportCertificateResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:privateKey:ExportCertificateResponse'</a>,
--   <a>exportCertificateResponse_privateKey</a> - The encrypted private
--   key associated with the public key in the certificate. The key is
--   output in PKCS #8 format and is base64 PEM-encoded.
--   
--   <a>$sel:certificate:ExportCertificateResponse'</a>,
--   <a>exportCertificateResponse_certificate</a> - The base64 PEM-encoded
--   certificate.
--   
--   <a>$sel:certificateChain:ExportCertificateResponse'</a>,
--   <a>exportCertificateResponse_certificateChain</a> - The base64
--   PEM-encoded certificate chain. This does not include the certificate
--   that you are exporting.
--   
--   <a>$sel:httpStatus:ExportCertificateResponse'</a>,
--   <a>exportCertificateResponse_httpStatus</a> - The response's http
--   status code.
newExportCertificateResponse :: Int -> ExportCertificateResponse

-- | The encrypted private key associated with the public key in the
--   certificate. The key is output in PKCS #8 format and is base64
--   PEM-encoded.
exportCertificateResponse_privateKey :: Lens' ExportCertificateResponse (Maybe Text)

-- | The base64 PEM-encoded certificate.
exportCertificateResponse_certificate :: Lens' ExportCertificateResponse (Maybe Text)

-- | The base64 PEM-encoded certificate chain. This does not include the
--   certificate that you are exporting.
exportCertificateResponse_certificateChain :: Lens' ExportCertificateResponse (Maybe Text)

-- | The response's http status code.
exportCertificateResponse_httpStatus :: Lens' ExportCertificateResponse Int
instance GHC.Generics.Generic Amazonka.CertificateManager.ExportCertificate.ExportCertificate
instance GHC.Show.Show Amazonka.CertificateManager.ExportCertificate.ExportCertificate
instance GHC.Classes.Eq Amazonka.CertificateManager.ExportCertificate.ExportCertificate
instance GHC.Generics.Generic Amazonka.CertificateManager.ExportCertificate.ExportCertificateResponse
instance GHC.Show.Show Amazonka.CertificateManager.ExportCertificate.ExportCertificateResponse
instance GHC.Classes.Eq Amazonka.CertificateManager.ExportCertificate.ExportCertificateResponse
instance Amazonka.Types.AWSRequest Amazonka.CertificateManager.ExportCertificate.ExportCertificate
instance Control.DeepSeq.NFData Amazonka.CertificateManager.ExportCertificate.ExportCertificateResponse
instance Data.Hashable.Class.Hashable Amazonka.CertificateManager.ExportCertificate.ExportCertificate
instance Control.DeepSeq.NFData Amazonka.CertificateManager.ExportCertificate.ExportCertificate
instance Amazonka.Data.Headers.ToHeaders Amazonka.CertificateManager.ExportCertificate.ExportCertificate
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.CertificateManager.ExportCertificate.ExportCertificate
instance Amazonka.Data.Path.ToPath Amazonka.CertificateManager.ExportCertificate.ExportCertificate
instance Amazonka.Data.Query.ToQuery Amazonka.CertificateManager.ExportCertificate.ExportCertificate


-- | Returns detailed metadata about the specified ACM certificate.
module Amazonka.CertificateManager.DescribeCertificate

-- | <i>See:</i> <a>newDescribeCertificate</a> smart constructor.
data DescribeCertificate
DescribeCertificate' :: Text -> DescribeCertificate

-- | The Amazon Resource Name (ARN) of the ACM certificate. The ARN must
--   have the following form:
--   
--   <pre>
--   arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   For more information about ARNs, see <a>Amazon Resource Names
--   (ARNs)</a>.
[$sel:certificateArn:DescribeCertificate'] :: DescribeCertificate -> Text

-- | Create a value of <a>DescribeCertificate</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:certificateArn:DescribeCertificate'</a>,
--   <a>describeCertificate_certificateArn</a> - The Amazon Resource Name
--   (ARN) of the ACM certificate. The ARN must have the following form:
--   
--   <pre>
--   arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   For more information about ARNs, see <a>Amazon Resource Names
--   (ARNs)</a>.
newDescribeCertificate :: Text -> DescribeCertificate

-- | The Amazon Resource Name (ARN) of the ACM certificate. The ARN must
--   have the following form:
--   
--   <pre>
--   arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   For more information about ARNs, see <a>Amazon Resource Names
--   (ARNs)</a>.
describeCertificate_certificateArn :: Lens' DescribeCertificate Text

-- | <i>See:</i> <a>newDescribeCertificateResponse</a> smart constructor.
data DescribeCertificateResponse
DescribeCertificateResponse' :: Maybe CertificateDetail -> Int -> DescribeCertificateResponse

-- | Metadata about an ACM certificate.
[$sel:certificate:DescribeCertificateResponse'] :: DescribeCertificateResponse -> Maybe CertificateDetail

-- | The response's http status code.
[$sel:httpStatus:DescribeCertificateResponse'] :: DescribeCertificateResponse -> Int

-- | Create a value of <a>DescribeCertificateResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:certificate:DescribeCertificateResponse'</a>,
--   <a>describeCertificateResponse_certificate</a> - Metadata about an ACM
--   certificate.
--   
--   <a>$sel:httpStatus:DescribeCertificateResponse'</a>,
--   <a>describeCertificateResponse_httpStatus</a> - The response's http
--   status code.
newDescribeCertificateResponse :: Int -> DescribeCertificateResponse

-- | Metadata about an ACM certificate.
describeCertificateResponse_certificate :: Lens' DescribeCertificateResponse (Maybe CertificateDetail)

-- | The response's http status code.
describeCertificateResponse_httpStatus :: Lens' DescribeCertificateResponse Int
instance GHC.Generics.Generic Amazonka.CertificateManager.DescribeCertificate.DescribeCertificate
instance GHC.Show.Show Amazonka.CertificateManager.DescribeCertificate.DescribeCertificate
instance GHC.Read.Read Amazonka.CertificateManager.DescribeCertificate.DescribeCertificate
instance GHC.Classes.Eq Amazonka.CertificateManager.DescribeCertificate.DescribeCertificate
instance GHC.Generics.Generic Amazonka.CertificateManager.DescribeCertificate.DescribeCertificateResponse
instance GHC.Show.Show Amazonka.CertificateManager.DescribeCertificate.DescribeCertificateResponse
instance GHC.Read.Read Amazonka.CertificateManager.DescribeCertificate.DescribeCertificateResponse
instance GHC.Classes.Eq Amazonka.CertificateManager.DescribeCertificate.DescribeCertificateResponse
instance Amazonka.Types.AWSRequest Amazonka.CertificateManager.DescribeCertificate.DescribeCertificate
instance Control.DeepSeq.NFData Amazonka.CertificateManager.DescribeCertificate.DescribeCertificateResponse
instance Data.Hashable.Class.Hashable Amazonka.CertificateManager.DescribeCertificate.DescribeCertificate
instance Control.DeepSeq.NFData Amazonka.CertificateManager.DescribeCertificate.DescribeCertificate
instance Amazonka.Data.Headers.ToHeaders Amazonka.CertificateManager.DescribeCertificate.DescribeCertificate
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.CertificateManager.DescribeCertificate.DescribeCertificate
instance Amazonka.Data.Path.ToPath Amazonka.CertificateManager.DescribeCertificate.DescribeCertificate
instance Amazonka.Data.Query.ToQuery Amazonka.CertificateManager.DescribeCertificate.DescribeCertificate


-- | Deletes a certificate and its associated private key. If this action
--   succeeds, the certificate no longer appears in the list that can be
--   displayed by calling the ListCertificates action or be retrieved by
--   calling the GetCertificate action. The certificate will not be
--   available for use by Amazon Web Services services integrated with ACM.
--   
--   You cannot delete an ACM certificate that is being used by another
--   Amazon Web Services service. To delete a certificate that is in use,
--   the certificate association must first be removed.
module Amazonka.CertificateManager.DeleteCertificate

-- | <i>See:</i> <a>newDeleteCertificate</a> smart constructor.
data DeleteCertificate
DeleteCertificate' :: Text -> DeleteCertificate

-- | String that contains the ARN of the ACM certificate to be deleted.
--   This must be of the form:
--   
--   <pre>
--   arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   For more information about ARNs, see <a>Amazon Resource Names
--   (ARNs)</a>.
[$sel:certificateArn:DeleteCertificate'] :: DeleteCertificate -> Text

-- | Create a value of <a>DeleteCertificate</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:certificateArn:DeleteCertificate'</a>,
--   <a>deleteCertificate_certificateArn</a> - String that contains the ARN
--   of the ACM certificate to be deleted. This must be of the form:
--   
--   <pre>
--   arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   For more information about ARNs, see <a>Amazon Resource Names
--   (ARNs)</a>.
newDeleteCertificate :: Text -> DeleteCertificate

-- | String that contains the ARN of the ACM certificate to be deleted.
--   This must be of the form:
--   
--   <pre>
--   arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   For more information about ARNs, see <a>Amazon Resource Names
--   (ARNs)</a>.
deleteCertificate_certificateArn :: Lens' DeleteCertificate Text

-- | <i>See:</i> <a>newDeleteCertificateResponse</a> smart constructor.
data DeleteCertificateResponse
DeleteCertificateResponse' :: DeleteCertificateResponse

-- | Create a value of <a>DeleteCertificateResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newDeleteCertificateResponse :: DeleteCertificateResponse
instance GHC.Generics.Generic Amazonka.CertificateManager.DeleteCertificate.DeleteCertificate
instance GHC.Show.Show Amazonka.CertificateManager.DeleteCertificate.DeleteCertificate
instance GHC.Read.Read Amazonka.CertificateManager.DeleteCertificate.DeleteCertificate
instance GHC.Classes.Eq Amazonka.CertificateManager.DeleteCertificate.DeleteCertificate
instance GHC.Generics.Generic Amazonka.CertificateManager.DeleteCertificate.DeleteCertificateResponse
instance GHC.Show.Show Amazonka.CertificateManager.DeleteCertificate.DeleteCertificateResponse
instance GHC.Read.Read Amazonka.CertificateManager.DeleteCertificate.DeleteCertificateResponse
instance GHC.Classes.Eq Amazonka.CertificateManager.DeleteCertificate.DeleteCertificateResponse
instance Amazonka.Types.AWSRequest Amazonka.CertificateManager.DeleteCertificate.DeleteCertificate
instance Control.DeepSeq.NFData Amazonka.CertificateManager.DeleteCertificate.DeleteCertificateResponse
instance Data.Hashable.Class.Hashable Amazonka.CertificateManager.DeleteCertificate.DeleteCertificate
instance Control.DeepSeq.NFData Amazonka.CertificateManager.DeleteCertificate.DeleteCertificate
instance Amazonka.Data.Headers.ToHeaders Amazonka.CertificateManager.DeleteCertificate.DeleteCertificate
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.CertificateManager.DeleteCertificate.DeleteCertificate
instance Amazonka.Data.Path.ToPath Amazonka.CertificateManager.DeleteCertificate.DeleteCertificate
instance Amazonka.Data.Query.ToQuery Amazonka.CertificateManager.DeleteCertificate.DeleteCertificate


-- | Adds one or more tags to an ACM certificate. Tags are labels that you
--   can use to identify and organize your Amazon Web Services resources.
--   Each tag consists of a <tt>key</tt> and an optional <tt>value</tt>.
--   You specify the certificate on input by its Amazon Resource Name
--   (ARN). You specify the tag by using a key-value pair.
--   
--   You can apply a tag to just one certificate if you want to identify a
--   specific characteristic of that certificate, or you can apply the same
--   tag to multiple certificates if you want to filter for a common
--   relationship among those certificates. Similarly, you can apply the
--   same tag to multiple resources if you want to specify a relationship
--   among those resources. For example, you can add the same tag to an ACM
--   certificate and an Elastic Load Balancing load balancer to indicate
--   that they are both used by the same website. For more information, see
--   <a>Tagging ACM certificates</a>.
--   
--   To remove one or more tags, use the RemoveTagsFromCertificate action.
--   To view all of the tags that have been applied to the certificate, use
--   the ListTagsForCertificate action.
module Amazonka.CertificateManager.AddTagsToCertificate

-- | <i>See:</i> <a>newAddTagsToCertificate</a> smart constructor.
data AddTagsToCertificate
AddTagsToCertificate' :: Text -> NonEmpty Tag -> AddTagsToCertificate

-- | String that contains the ARN of the ACM certificate to which the tag
--   is to be applied. This must be of the form:
--   
--   <pre>
--   arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   For more information about ARNs, see <a>Amazon Resource Names
--   (ARNs)</a>.
[$sel:certificateArn:AddTagsToCertificate'] :: AddTagsToCertificate -> Text

-- | The key-value pair that defines the tag. The tag value is optional.
[$sel:tags:AddTagsToCertificate'] :: AddTagsToCertificate -> NonEmpty Tag

-- | Create a value of <a>AddTagsToCertificate</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:certificateArn:AddTagsToCertificate'</a>,
--   <a>addTagsToCertificate_certificateArn</a> - String that contains the
--   ARN of the ACM certificate to which the tag is to be applied. This
--   must be of the form:
--   
--   <pre>
--   arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   For more information about ARNs, see <a>Amazon Resource Names
--   (ARNs)</a>.
--   
--   <a>$sel:tags:AddTagsToCertificate'</a>,
--   <a>addTagsToCertificate_tags</a> - The key-value pair that defines the
--   tag. The tag value is optional.
newAddTagsToCertificate :: Text -> NonEmpty Tag -> AddTagsToCertificate

-- | String that contains the ARN of the ACM certificate to which the tag
--   is to be applied. This must be of the form:
--   
--   <pre>
--   arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   For more information about ARNs, see <a>Amazon Resource Names
--   (ARNs)</a>.
addTagsToCertificate_certificateArn :: Lens' AddTagsToCertificate Text

-- | The key-value pair that defines the tag. The tag value is optional.
addTagsToCertificate_tags :: Lens' AddTagsToCertificate (NonEmpty Tag)

-- | <i>See:</i> <a>newAddTagsToCertificateResponse</a> smart constructor.
data AddTagsToCertificateResponse
AddTagsToCertificateResponse' :: AddTagsToCertificateResponse

-- | Create a value of <a>AddTagsToCertificateResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newAddTagsToCertificateResponse :: AddTagsToCertificateResponse
instance GHC.Generics.Generic Amazonka.CertificateManager.AddTagsToCertificate.AddTagsToCertificate
instance GHC.Show.Show Amazonka.CertificateManager.AddTagsToCertificate.AddTagsToCertificate
instance GHC.Read.Read Amazonka.CertificateManager.AddTagsToCertificate.AddTagsToCertificate
instance GHC.Classes.Eq Amazonka.CertificateManager.AddTagsToCertificate.AddTagsToCertificate
instance GHC.Generics.Generic Amazonka.CertificateManager.AddTagsToCertificate.AddTagsToCertificateResponse
instance GHC.Show.Show Amazonka.CertificateManager.AddTagsToCertificate.AddTagsToCertificateResponse
instance GHC.Read.Read Amazonka.CertificateManager.AddTagsToCertificate.AddTagsToCertificateResponse
instance GHC.Classes.Eq Amazonka.CertificateManager.AddTagsToCertificate.AddTagsToCertificateResponse
instance Amazonka.Types.AWSRequest Amazonka.CertificateManager.AddTagsToCertificate.AddTagsToCertificate
instance Control.DeepSeq.NFData Amazonka.CertificateManager.AddTagsToCertificate.AddTagsToCertificateResponse
instance Data.Hashable.Class.Hashable Amazonka.CertificateManager.AddTagsToCertificate.AddTagsToCertificate
instance Control.DeepSeq.NFData Amazonka.CertificateManager.AddTagsToCertificate.AddTagsToCertificate
instance Amazonka.Data.Headers.ToHeaders Amazonka.CertificateManager.AddTagsToCertificate.AddTagsToCertificate
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.CertificateManager.AddTagsToCertificate.AddTagsToCertificate
instance Amazonka.Data.Path.ToPath Amazonka.CertificateManager.AddTagsToCertificate.AddTagsToCertificate
instance Amazonka.Data.Query.ToQuery Amazonka.CertificateManager.AddTagsToCertificate.AddTagsToCertificate


-- | Updates a certificate. Currently, you can use this function to specify
--   whether to opt in to or out of recording your certificate in a
--   certificate transparency log. For more information, see <a>Opting Out
--   of Certificate Transparency Logging</a>.
module Amazonka.CertificateManager.UpdateCertificateOptions

-- | <i>See:</i> <a>newUpdateCertificateOptions</a> smart constructor.
data UpdateCertificateOptions
UpdateCertificateOptions' :: Text -> CertificateOptions -> UpdateCertificateOptions

-- | ARN of the requested certificate to update. This must be of the form:
--   
--   <pre>
--   arn:aws:acm:us-east-1:account:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
[$sel:certificateArn:UpdateCertificateOptions'] :: UpdateCertificateOptions -> Text

-- | Use to update the options for your certificate. Currently, you can
--   specify whether to add your certificate to a transparency log.
--   Certificate transparency makes it possible to detect SSL/TLS
--   certificates that have been mistakenly or maliciously issued.
--   Certificates that have not been logged typically produce an error
--   message in a browser.
[$sel:options:UpdateCertificateOptions'] :: UpdateCertificateOptions -> CertificateOptions

-- | Create a value of <a>UpdateCertificateOptions</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:certificateArn:UpdateCertificateOptions'</a>,
--   <a>updateCertificateOptions_certificateArn</a> - ARN of the requested
--   certificate to update. This must be of the form:
--   
--   <pre>
--   arn:aws:acm:us-east-1:account:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   <a>$sel:options:UpdateCertificateOptions'</a>,
--   <a>updateCertificateOptions_options</a> - Use to update the options
--   for your certificate. Currently, you can specify whether to add your
--   certificate to a transparency log. Certificate transparency makes it
--   possible to detect SSL/TLS certificates that have been mistakenly or
--   maliciously issued. Certificates that have not been logged typically
--   produce an error message in a browser.
newUpdateCertificateOptions :: Text -> CertificateOptions -> UpdateCertificateOptions

-- | ARN of the requested certificate to update. This must be of the form:
--   
--   <pre>
--   arn:aws:acm:us-east-1:account:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
updateCertificateOptions_certificateArn :: Lens' UpdateCertificateOptions Text

-- | Use to update the options for your certificate. Currently, you can
--   specify whether to add your certificate to a transparency log.
--   Certificate transparency makes it possible to detect SSL/TLS
--   certificates that have been mistakenly or maliciously issued.
--   Certificates that have not been logged typically produce an error
--   message in a browser.
updateCertificateOptions_options :: Lens' UpdateCertificateOptions CertificateOptions

-- | <i>See:</i> <a>newUpdateCertificateOptionsResponse</a> smart
--   constructor.
data UpdateCertificateOptionsResponse
UpdateCertificateOptionsResponse' :: UpdateCertificateOptionsResponse

-- | Create a value of <a>UpdateCertificateOptionsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newUpdateCertificateOptionsResponse :: UpdateCertificateOptionsResponse
instance GHC.Generics.Generic Amazonka.CertificateManager.UpdateCertificateOptions.UpdateCertificateOptions
instance GHC.Show.Show Amazonka.CertificateManager.UpdateCertificateOptions.UpdateCertificateOptions
instance GHC.Read.Read Amazonka.CertificateManager.UpdateCertificateOptions.UpdateCertificateOptions
instance GHC.Classes.Eq Amazonka.CertificateManager.UpdateCertificateOptions.UpdateCertificateOptions
instance GHC.Generics.Generic Amazonka.CertificateManager.UpdateCertificateOptions.UpdateCertificateOptionsResponse
instance GHC.Show.Show Amazonka.CertificateManager.UpdateCertificateOptions.UpdateCertificateOptionsResponse
instance GHC.Read.Read Amazonka.CertificateManager.UpdateCertificateOptions.UpdateCertificateOptionsResponse
instance GHC.Classes.Eq Amazonka.CertificateManager.UpdateCertificateOptions.UpdateCertificateOptionsResponse
instance Amazonka.Types.AWSRequest Amazonka.CertificateManager.UpdateCertificateOptions.UpdateCertificateOptions
instance Control.DeepSeq.NFData Amazonka.CertificateManager.UpdateCertificateOptions.UpdateCertificateOptionsResponse
instance Data.Hashable.Class.Hashable Amazonka.CertificateManager.UpdateCertificateOptions.UpdateCertificateOptions
instance Control.DeepSeq.NFData Amazonka.CertificateManager.UpdateCertificateOptions.UpdateCertificateOptions
instance Amazonka.Data.Headers.ToHeaders Amazonka.CertificateManager.UpdateCertificateOptions.UpdateCertificateOptions
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.CertificateManager.UpdateCertificateOptions.UpdateCertificateOptions
instance Amazonka.Data.Path.ToPath Amazonka.CertificateManager.UpdateCertificateOptions.UpdateCertificateOptions
instance Amazonka.Data.Query.ToQuery Amazonka.CertificateManager.UpdateCertificateOptions.UpdateCertificateOptions


module Amazonka.CertificateManager.Lens

-- | String that contains the ARN of the requested certificate. The
--   certificate ARN is generated and returned by the RequestCertificate
--   action as soon as the request is made. By default, using this
--   parameter causes email to be sent to all top-level domains you
--   specified in the certificate request. The ARN must be of the form:
--   
--   <pre>
--   arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
resendValidationEmail_certificateArn :: Lens' ResendValidationEmail Text

-- | The fully qualified domain name (FQDN) of the certificate that needs
--   to be validated.
resendValidationEmail_domain :: Lens' ResendValidationEmail Text

-- | The base validation domain that will act as the suffix of the email
--   addresses that are used to send the emails. This must be the same as
--   the <tt>Domain</tt> value or a superdomain of the <tt>Domain</tt>
--   value. For example, if you requested a certificate for
--   <tt>site.subdomain.example.com</tt> and specify a
--   <b>ValidationDomain</b> of <tt>subdomain.example.com</tt>, ACM sends
--   email to the domain registrant, technical contact, and administrative
--   contact in WHOIS and the following five addresses:
--   
--   <ul>
--   <li>admin@subdomain.example.com</li>
--   <li>administrator@subdomain.example.com</li>
--   <li>hostmaster@subdomain.example.com</li>
--   <li>postmaster@subdomain.example.com</li>
--   <li>webmaster@subdomain.example.com</li>
--   </ul>
resendValidationEmail_validationDomain :: Lens' ResendValidationEmail Text

-- | ARN of the requested certificate to update. This must be of the form:
--   
--   <pre>
--   arn:aws:acm:us-east-1:account:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
updateCertificateOptions_certificateArn :: Lens' UpdateCertificateOptions Text

-- | Use to update the options for your certificate. Currently, you can
--   specify whether to add your certificate to a transparency log.
--   Certificate transparency makes it possible to detect SSL/TLS
--   certificates that have been mistakenly or maliciously issued.
--   Certificates that have not been logged typically produce an error
--   message in a browser.
updateCertificateOptions_options :: Lens' UpdateCertificateOptions CertificateOptions

-- | String that contains the ARN of the ACM certificate for which you want
--   to list the tags. This must have the following form:
--   
--   <pre>
--   arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   For more information about ARNs, see <a>Amazon Resource Names
--   (ARNs)</a>.
listTagsForCertificate_certificateArn :: Lens' ListTagsForCertificate Text

-- | The key-value pairs that define the applied tags.
listTagsForCertificateResponse_tags :: Lens' ListTagsForCertificateResponse (Maybe (NonEmpty Tag))

-- | The response's http status code.
listTagsForCertificateResponse_httpStatus :: Lens' ListTagsForCertificateResponse Int

-- | String that contains a certificate ARN in the following format:
--   
--   <pre>
--   arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   For more information about ARNs, see <a>Amazon Resource Names
--   (ARNs)</a>.
getCertificate_certificateArn :: Lens' GetCertificate Text

-- | The ACM-issued certificate corresponding to the ARN specified as
--   input.
getCertificateResponse_certificate :: Lens' GetCertificateResponse (Maybe Text)

-- | Certificates forming the requested certificate's chain of trust. The
--   chain consists of the certificate of the issuing CA and the
--   intermediate certificates of any other subordinate CAs.
getCertificateResponse_certificateChain :: Lens' GetCertificateResponse (Maybe Text)

-- | The response's http status code.
getCertificateResponse_httpStatus :: Lens' GetCertificateResponse Int

-- | String that contains the ARN of the ACM certificate to which the tag
--   is to be applied. This must be of the form:
--   
--   <pre>
--   arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   For more information about ARNs, see <a>Amazon Resource Names
--   (ARNs)</a>.
addTagsToCertificate_certificateArn :: Lens' AddTagsToCertificate Text

-- | The key-value pair that defines the tag. The tag value is optional.
addTagsToCertificate_tags :: Lens' AddTagsToCertificate (NonEmpty Tag)

-- | Customer chosen string that can be used to distinguish between calls
--   to <tt>RequestCertificate</tt>. Idempotency tokens time out after one
--   hour. Therefore, if you call <tt>RequestCertificate</tt> multiple
--   times with the same idempotency token within one hour, ACM recognizes
--   that you are requesting only one certificate and will issue only one.
--   If you change the idempotency token for each call, ACM recognizes that
--   you are requesting multiple certificates.
requestCertificate_idempotencyToken :: Lens' RequestCertificate (Maybe Text)

-- | The method you want to use if you are requesting a public certificate
--   to validate that you own or control domain. You can <a>validate with
--   DNS</a> or <a>validate with email</a>. We recommend that you use DNS
--   validation.
requestCertificate_validationMethod :: Lens' RequestCertificate (Maybe ValidationMethod)

-- | Additional FQDNs to be included in the Subject Alternative Name
--   extension of the ACM certificate. For example, add the name
--   www.example.net to a certificate for which the <tt>DomainName</tt>
--   field is www.example.com if users can reach your site by using either
--   name. The maximum number of domain names that you can add to an ACM
--   certificate is 100. However, the initial quota is 10 domain names. If
--   you need more than 10 names, you must request a quota increase. For
--   more information, see <a>Quotas</a>.
--   
--   The maximum length of a SAN DNS name is 253 octets. The name is made
--   up of multiple labels separated by periods. No label can be longer
--   than 63 octets. Consider the following examples:
--   
--   <ul>
--   <li><tt>(63 octets).(63 octets).(63 octets).(61 octets)</tt> is legal
--   because the total length is 253 octets (63+1+63+1+63+1+61) and no
--   label exceeds 63 octets.</li>
--   <li><tt>(64 octets).(63 octets).(63 octets).(61 octets)</tt> is not
--   legal because the total length exceeds 253 octets (64+1+63+1+63+1+61)
--   and the first label exceeds 63 octets.</li>
--   <li><tt>(63 octets).(63 octets).(63 octets).(62 octets)</tt> is not
--   legal because the total length of the DNS name (63+1+63+1+63+1+62)
--   exceeds 253 octets.</li>
--   </ul>
requestCertificate_subjectAlternativeNames :: Lens' RequestCertificate (Maybe (NonEmpty Text))

-- | Currently, you can use this parameter to specify whether to add the
--   certificate to a certificate transparency log. Certificate
--   transparency makes it possible to detect SSL/TLS certificates that
--   have been mistakenly or maliciously issued. Certificates that have not
--   been logged typically produce an error message in a browser. For more
--   information, see <a>Opting Out of Certificate Transparency
--   Logging</a>.
requestCertificate_options :: Lens' RequestCertificate (Maybe CertificateOptions)

-- | The domain name that you want ACM to use to send you emails so that
--   you can validate domain ownership.
requestCertificate_domainValidationOptions :: Lens' RequestCertificate (Maybe (NonEmpty DomainValidationOption))

-- | The Amazon Resource Name (ARN) of the private certificate authority
--   (CA) that will be used to issue the certificate. If you do not provide
--   an ARN and you are trying to request a private certificate, ACM will
--   attempt to issue a public certificate. For more information about
--   private CAs, see the <a>Amazon Web Services Certificate Manager
--   Private Certificate Authority (PCA)</a> user guide. The ARN must have
--   the following form:
--   
--   <pre>
--   arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012
--   </pre>
requestCertificate_certificateAuthorityArn :: Lens' RequestCertificate (Maybe Text)

-- | One or more resource tags to associate with the certificate.
requestCertificate_tags :: Lens' RequestCertificate (Maybe (NonEmpty Tag))

-- | Fully qualified domain name (FQDN), such as www.example.com, that you
--   want to secure with an ACM certificate. Use an asterisk (*) to create
--   a wildcard certificate that protects several sites in the same domain.
--   For example, *.example.com protects www.example.com, site.example.com,
--   and images.example.com.
--   
--   The first domain name you enter cannot exceed 64 octets, including
--   periods. Each subsequent Subject Alternative Name (SAN), however, can
--   be up to 253 octets in length.
requestCertificate_domainName :: Lens' RequestCertificate Text

-- | String that contains the ARN of the issued certificate. This must be
--   of the form:
--   
--   <pre>
--   arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
requestCertificateResponse_certificateArn :: Lens' RequestCertificateResponse (Maybe Text)

-- | The response's http status code.
requestCertificateResponse_httpStatus :: Lens' RequestCertificateResponse Int

-- | Filter the certificate list by status value.
listCertificates_certificateStatuses :: Lens' ListCertificates (Maybe [CertificateStatus])

-- | Use this parameter only when paginating results and only in a
--   subsequent request after you receive a response with truncated
--   results. Set it to the value of <tt>NextToken</tt> from the response
--   you just received.
listCertificates_nextToken :: Lens' ListCertificates (Maybe Text)

-- | Filter the certificate list. For more information, see the Filters
--   structure.
listCertificates_includes :: Lens' ListCertificates (Maybe Filters)

-- | Use this parameter when paginating results to specify the maximum
--   number of items to return in the response. If additional items exist
--   beyond the number you specify, the <tt>NextToken</tt> element is sent
--   in the response. Use this <tt>NextToken</tt> value in a subsequent
--   request to retrieve additional items.
listCertificates_maxItems :: Lens' ListCertificates (Maybe Natural)

-- | A list of ACM certificates.
listCertificatesResponse_certificateSummaryList :: Lens' ListCertificatesResponse (Maybe [CertificateSummary])

-- | When the list is truncated, this value is present and contains the
--   value to use for the <tt>NextToken</tt> parameter in a subsequent
--   pagination request.
listCertificatesResponse_nextToken :: Lens' ListCertificatesResponse (Maybe Text)

-- | The response's http status code.
listCertificatesResponse_httpStatus :: Lens' ListCertificatesResponse Int

-- | String that contains the ARN of the ACM certificate to be deleted.
--   This must be of the form:
--   
--   <pre>
--   arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   For more information about ARNs, see <a>Amazon Resource Names
--   (ARNs)</a>.
deleteCertificate_certificateArn :: Lens' DeleteCertificate Text

-- | String that contains the ARN of the ACM Certificate with one or more
--   tags that you want to remove. This must be of the form:
--   
--   <pre>
--   arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   For more information about ARNs, see <a>Amazon Resource Names
--   (ARNs)</a>.
removeTagsFromCertificate_certificateArn :: Lens' RemoveTagsFromCertificate Text

-- | The key-value pair that defines the tag to remove.
removeTagsFromCertificate_tags :: Lens' RemoveTagsFromCertificate (NonEmpty Tag)

-- | Expiration events configuration options associated with the Amazon Web
--   Services account.
getAccountConfigurationResponse_expiryEvents :: Lens' GetAccountConfigurationResponse (Maybe ExpiryEventsConfiguration)

-- | The response's http status code.
getAccountConfigurationResponse_httpStatus :: Lens' GetAccountConfigurationResponse Int

-- | The <a>Amazon Resource Name (ARN)</a> of an imported certificate to
--   replace. To import a new certificate, omit this field.
importCertificate_certificateArn :: Lens' ImportCertificate (Maybe Text)

-- | The PEM encoded certificate chain.-- -- <i>Note:</i> This
--   <tt>Lens</tt> automatically encodes and decodes Base64 data. -- The
--   underlying isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
importCertificate_certificateChain :: Lens' ImportCertificate (Maybe ByteString)

-- | One or more resource tags to associate with the imported certificate.
--   
--   Note: You cannot apply tags when reimporting a certificate.
importCertificate_tags :: Lens' ImportCertificate (Maybe (NonEmpty Tag))

-- | The certificate to import.-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
importCertificate_certificate :: Lens' ImportCertificate ByteString

-- | The private key that matches the public key in the certificate.-- --
--   <i>Note:</i> This <tt>Lens</tt> automatically encodes and decodes
--   Base64 data. -- The underlying isomorphism will encode to Base64
--   representation during -- serialisation, and decode from Base64
--   representation during deserialisation. -- This <tt>Lens</tt> accepts
--   and returns only raw unencoded data.
importCertificate_privateKey :: Lens' ImportCertificate ByteString

-- | The <a>Amazon Resource Name (ARN)</a> of the imported certificate.
importCertificateResponse_certificateArn :: Lens' ImportCertificateResponse (Maybe Text)

-- | The response's http status code.
importCertificateResponse_httpStatus :: Lens' ImportCertificateResponse Int

-- | Specifies expiration events associated with an account.
putAccountConfiguration_expiryEvents :: Lens' PutAccountConfiguration (Maybe ExpiryEventsConfiguration)

-- | Customer-chosen string used to distinguish between calls to
--   <tt>PutAccountConfiguration</tt>. Idempotency tokens time out after
--   one hour. If you call <tt>PutAccountConfiguration</tt> multiple times
--   with the same unexpired idempotency token, ACM treats it as the same
--   request and returns the original result. If you change the idempotency
--   token for each call, ACM treats each call as a new request.
putAccountConfiguration_idempotencyToken :: Lens' PutAccountConfiguration Text

-- | The Amazon Resource Name (ARN) of the ACM certificate. The ARN must
--   have the following form:
--   
--   <pre>
--   arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   For more information about ARNs, see <a>Amazon Resource Names
--   (ARNs)</a>.
describeCertificate_certificateArn :: Lens' DescribeCertificate Text

-- | Metadata about an ACM certificate.
describeCertificateResponse_certificate :: Lens' DescribeCertificateResponse (Maybe CertificateDetail)

-- | The response's http status code.
describeCertificateResponse_httpStatus :: Lens' DescribeCertificateResponse Int

-- | String that contains the ARN of the ACM certificate to be renewed.
--   This must be of the form:
--   
--   <pre>
--   arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   For more information about ARNs, see <a>Amazon Resource Names
--   (ARNs)</a>.
renewCertificate_certificateArn :: Lens' RenewCertificate Text

-- | An Amazon Resource Name (ARN) of the issued certificate. This must be
--   of the form:
--   
--   <pre>
--   arn:aws:acm:region:account:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
exportCertificate_certificateArn :: Lens' ExportCertificate Text

-- | Passphrase to associate with the encrypted exported private key. If
--   you want to later decrypt the private key, you must have the
--   passphrase. You can use the following OpenSSL command to decrypt a
--   private key:
--   
--   <tt>openssl rsa -in encrypted_key.pem -out decrypted_key.pem</tt>-- --
--   <i>Note:</i> This <tt>Lens</tt> automatically encodes and decodes
--   Base64 data. -- The underlying isomorphism will encode to Base64
--   representation during -- serialisation, and decode from Base64
--   representation during deserialisation. -- This <tt>Lens</tt> accepts
--   and returns only raw unencoded data.
exportCertificate_passphrase :: Lens' ExportCertificate ByteString

-- | The encrypted private key associated with the public key in the
--   certificate. The key is output in PKCS #8 format and is base64
--   PEM-encoded.
exportCertificateResponse_privateKey :: Lens' ExportCertificateResponse (Maybe Text)

-- | The base64 PEM-encoded certificate.
exportCertificateResponse_certificate :: Lens' ExportCertificateResponse (Maybe Text)

-- | The base64 PEM-encoded certificate chain. This does not include the
--   certificate that you are exporting.
exportCertificateResponse_certificateChain :: Lens' ExportCertificateResponse (Maybe Text)

-- | The response's http status code.
exportCertificateResponse_httpStatus :: Lens' ExportCertificateResponse Int

-- | The name of the entity that is associated with the public key
--   contained in the certificate.
certificateDetail_subject :: Lens' CertificateDetail (Maybe Text)

-- | The status of the certificate.
certificateDetail_status :: Lens' CertificateDetail (Maybe CertificateStatus)

-- | The reason the certificate request failed. This value exists only when
--   the certificate status is <tt>FAILED</tt>. For more information, see
--   <a>Certificate Request Failed</a> in the <i>Amazon Web Services
--   Certificate Manager User Guide</i>.
certificateDetail_failureReason :: Lens' CertificateDetail (Maybe FailureReason)

-- | One or more domain names (subject alternative names) included in the
--   certificate. This list contains the domain names that are bound to the
--   public key that is contained in the certificate. The subject
--   alternative names include the canonical domain name (CN) of the
--   certificate and additional domain names that can be used to connect to
--   the website.
certificateDetail_subjectAlternativeNames :: Lens' CertificateDetail (Maybe (NonEmpty Text))

-- | A list of ARNs for the Amazon Web Services resources that are using
--   the certificate. A certificate can be used by multiple Amazon Web
--   Services resources.
certificateDetail_inUseBy :: Lens' CertificateDetail (Maybe [Text])

-- | The time at which the certificate was requested.
certificateDetail_createdAt :: Lens' CertificateDetail (Maybe UTCTime)

-- | The Amazon Resource Name (ARN) of the certificate. For more
--   information about ARNs, see <a>Amazon Resource Names (ARNs)</a> in the
--   <i>Amazon Web Services General Reference</i>.
certificateDetail_certificateArn :: Lens' CertificateDetail (Maybe Text)

-- | The serial number of the certificate.
certificateDetail_serial :: Lens' CertificateDetail (Maybe Text)

-- | Specifies whether the certificate is eligible for renewal. At this
--   time, only exported private certificates can be renewed with the
--   RenewCertificate command.
certificateDetail_renewalEligibility :: Lens' CertificateDetail (Maybe RenewalEligibility)

-- | Contains a list of Extended Key Usage X.509 v3 extension objects. Each
--   object specifies a purpose for which the certificate public key can be
--   used and consists of a name and an object identifier (OID).
certificateDetail_extendedKeyUsages :: Lens' CertificateDetail (Maybe [ExtendedKeyUsage])

-- | The date and time at which the certificate was imported. This value
--   exists only when the certificate type is <tt>IMPORTED</tt>.
certificateDetail_importedAt :: Lens' CertificateDetail (Maybe UTCTime)

-- | A list of Key Usage X.509 v3 extension objects. Each object is a
--   string value that identifies the purpose of the public key contained
--   in the certificate. Possible extension values include
--   DIGITAL_SIGNATURE, KEY_ENCHIPHERMENT, NON_REPUDIATION, and more.
certificateDetail_keyUsages :: Lens' CertificateDetail (Maybe [KeyUsage])

-- | The time at which the certificate was revoked. This value exists only
--   when the certificate status is <tt>REVOKED</tt>.
certificateDetail_revokedAt :: Lens' CertificateDetail (Maybe UTCTime)

-- | The time before which the certificate is not valid.
certificateDetail_notBefore :: Lens' CertificateDetail (Maybe UTCTime)

-- | The reason the certificate was revoked. This value exists only when
--   the certificate status is <tt>REVOKED</tt>.
certificateDetail_revocationReason :: Lens' CertificateDetail (Maybe RevocationReason)

-- | The fully qualified domain name for the certificate, such as
--   www.example.com or example.com.
certificateDetail_domainName :: Lens' CertificateDetail (Maybe Text)

-- | Contains information about the status of ACM's <a>managed renewal</a>
--   for the certificate. This field exists only when the certificate type
--   is <tt>AMAZON_ISSUED</tt>.
certificateDetail_renewalSummary :: Lens' CertificateDetail (Maybe RenewalSummary)

-- | The algorithm that was used to generate the public-private key pair.
certificateDetail_keyAlgorithm :: Lens' CertificateDetail (Maybe KeyAlgorithm)

-- | The source of the certificate. For certificates provided by ACM, this
--   value is <tt>AMAZON_ISSUED</tt>. For certificates that you imported
--   with ImportCertificate, this value is <tt>IMPORTED</tt>. ACM does not
--   provide <a>managed renewal</a> for imported certificates. For more
--   information about the differences between certificates that you import
--   and those that ACM provides, see <a>Importing Certificates</a> in the
--   <i>Amazon Web Services Certificate Manager User Guide</i>.
certificateDetail_type :: Lens' CertificateDetail (Maybe CertificateType)

-- | Value that specifies whether to add the certificate to a transparency
--   log. Certificate transparency makes it possible to detect SSL
--   certificates that have been mistakenly or maliciously issued. A
--   browser might respond to certificate that has not been logged by
--   showing an error message. The logs are cryptographically secure.
certificateDetail_options :: Lens' CertificateDetail (Maybe CertificateOptions)

-- | The time at which the certificate was issued. This value exists only
--   when the certificate type is <tt>AMAZON_ISSUED</tt>.
certificateDetail_issuedAt :: Lens' CertificateDetail (Maybe UTCTime)

-- | The algorithm that was used to sign the certificate.
certificateDetail_signatureAlgorithm :: Lens' CertificateDetail (Maybe Text)

-- | Contains information about the initial validation of each domain name
--   that occurs as a result of the RequestCertificate request. This field
--   exists only when the certificate type is <tt>AMAZON_ISSUED</tt>.
certificateDetail_domainValidationOptions :: Lens' CertificateDetail (Maybe (NonEmpty DomainValidation))

-- | The name of the certificate authority that issued and signed the
--   certificate.
certificateDetail_issuer :: Lens' CertificateDetail (Maybe Text)

-- | The time after which the certificate is not valid.
certificateDetail_notAfter :: Lens' CertificateDetail (Maybe UTCTime)

-- | The Amazon Resource Name (ARN) of the ACM PCA private certificate
--   authority (CA) that issued the certificate. This has the following
--   format:
--   
--   <pre>
--   arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012
--   </pre>
certificateDetail_certificateAuthorityArn :: Lens' CertificateDetail (Maybe Text)

-- | You can opt out of certificate transparency logging by specifying the
--   <tt>DISABLED</tt> option. Opt in by specifying <tt>ENABLED</tt>.
certificateOptions_certificateTransparencyLoggingPreference :: Lens' CertificateOptions (Maybe CertificateTransparencyLoggingPreference)

-- | Amazon Resource Name (ARN) of the certificate. This is of the form:
--   
--   <pre>
--   arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   For more information about ARNs, see <a>Amazon Resource Names
--   (ARNs)</a>.
certificateSummary_certificateArn :: Lens' CertificateSummary (Maybe Text)

-- | Fully qualified domain name (FQDN), such as www.example.com or
--   example.com, for the certificate.
certificateSummary_domainName :: Lens' CertificateSummary (Maybe Text)

-- | A list of email addresses that ACM used to send domain validation
--   emails.
domainValidation_validationEmails :: Lens' DomainValidation (Maybe [Text])

-- | Specifies the domain validation method.
domainValidation_validationMethod :: Lens' DomainValidation (Maybe ValidationMethod)

-- | Contains the CNAME record that you add to your DNS database for domain
--   validation. For more information, see <a>Use DNS to Validate Domain
--   Ownership</a>.
--   
--   Note: The CNAME information that you need does not include the name of
--   your domain. If you include  your domain name in the DNS database
--   CNAME record, validation fails.  For example, if the name is
--   "_a79865eb4cd1a6ab990a45779b4e0b96.yourdomain.com", only
--   "_a79865eb4cd1a6ab990a45779b4e0b96" must be used.
domainValidation_resourceRecord :: Lens' DomainValidation (Maybe ResourceRecord)

-- | The validation status of the domain name. This can be one of the
--   following values:
--   
--   <ul>
--   <li><pre>PENDING_VALIDATION</pre></li>
--   <li>@@SUCCESS</li>
--   <li>@@FAILED</li>
--   </ul>
domainValidation_validationStatus :: Lens' DomainValidation (Maybe DomainStatus)

-- | The domain name that ACM used to send domain validation emails.
domainValidation_validationDomain :: Lens' DomainValidation (Maybe Text)

-- | A fully qualified domain name (FQDN) in the certificate. For example,
--   <tt>www.example.com</tt> or <tt>example.com</tt>.
domainValidation_domainName :: Lens' DomainValidation Text

-- | A fully qualified domain name (FQDN) in the certificate request.
domainValidationOption_domainName :: Lens' DomainValidationOption Text

-- | The domain name that you want ACM to use to send you validation
--   emails. This domain name is the suffix of the email addresses that you
--   want ACM to use. This must be the same as the <tt>DomainName</tt>
--   value or a superdomain of the <tt>DomainName</tt> value. For example,
--   if you request a certificate for <tt>testing.example.com</tt>, you can
--   specify <tt>example.com</tt> for this value. In that case, ACM sends
--   domain validation emails to the following five addresses:
--   
--   <ul>
--   <li>admin@example.com</li>
--   <li>administrator@example.com</li>
--   <li>hostmaster@example.com</li>
--   <li>postmaster@example.com</li>
--   <li>webmaster@example.com</li>
--   </ul>
domainValidationOption_validationDomain :: Lens' DomainValidationOption Text

-- | Specifies the number of days prior to certificate expiration when ACM
--   starts generating <tt>EventBridge</tt> events. ACM sends one event per
--   day per certificate until the certificate expires. By default,
--   accounts receive events starting 45 days before certificate
--   expiration.
expiryEventsConfiguration_daysBeforeExpiry :: Lens' ExpiryEventsConfiguration (Maybe Natural)

-- | An object identifier (OID) for the extension value. OIDs are strings
--   of numbers separated by periods. The following OIDs are defined in RFC
--   3280 and RFC 5280.
--   
--   <ul>
--   <li><pre>1.3.6.1.5.5.7.3.1 (TLS_WEB_SERVER_AUTHENTICATION)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.2 (TLS_WEB_CLIENT_AUTHENTICATION)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.3 (CODE_SIGNING)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.4 (EMAIL_PROTECTION)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.8 (TIME_STAMPING)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.9 (OCSP_SIGNING)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.5 (IPSEC_END_SYSTEM)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.6 (IPSEC_TUNNEL)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.7 (IPSEC_USER)</pre></li>
--   </ul>
extendedKeyUsage_oid :: Lens' ExtendedKeyUsage (Maybe Text)

-- | The name of an Extended Key Usage value.
extendedKeyUsage_name :: Lens' ExtendedKeyUsage (Maybe ExtendedKeyUsageName)

-- | Specify one or more algorithms that can be used to generate key pairs.
--   
--   Default filtering returns only <tt>RSA_1024</tt> and <tt>RSA_2048</tt>
--   certificates that have at least one domain. To return other
--   certificate types, provide the desired type signatures in a
--   comma-separated list. For example, <tt>"keyTypes":
--   ["RSA_2048,RSA_4096"]</tt> returns both <tt>RSA_2048</tt> and
--   <tt>RSA_4096</tt> certificates.
filters_keyTypes :: Lens' Filters (Maybe [KeyAlgorithm])

-- | Specify one or more KeyUsage extension values.
filters_keyUsage :: Lens' Filters (Maybe [KeyUsageName])

-- | Specify one or more ExtendedKeyUsage extension values.
filters_extendedKeyUsage :: Lens' Filters (Maybe [ExtendedKeyUsageName])

-- | A string value that contains a Key Usage extension name.
keyUsage_name :: Lens' KeyUsage (Maybe KeyUsageName)

-- | The reason that a renewal request was unsuccessful.
renewalSummary_renewalStatusReason :: Lens' RenewalSummary (Maybe FailureReason)

-- | The status of ACM's <a>managed renewal</a> of the certificate.
renewalSummary_renewalStatus :: Lens' RenewalSummary RenewalStatus

-- | Contains information about the validation of each domain name in the
--   certificate, as it pertains to ACM's <a>managed renewal</a>. This is
--   different from the initial validation that occurs as a result of the
--   RequestCertificate request. This field exists only when the
--   certificate type is <tt>AMAZON_ISSUED</tt>.
renewalSummary_domainValidationOptions :: Lens' RenewalSummary (NonEmpty DomainValidation)

-- | The time at which the renewal summary was last updated.
renewalSummary_updatedAt :: Lens' RenewalSummary UTCTime

-- | The name of the DNS record to create in your domain. This is supplied
--   by ACM.
resourceRecord_name :: Lens' ResourceRecord Text

-- | The type of DNS record. Currently this can be <tt>CNAME</tt>.
resourceRecord_type :: Lens' ResourceRecord RecordType

-- | The value of the CNAME record to add to your DNS database. This is
--   supplied by ACM.
resourceRecord_value :: Lens' ResourceRecord Text

-- | The value of the tag.
tag_value :: Lens' Tag (Maybe Text)

-- | The key of the tag.
tag_key :: Lens' Tag Text


module Amazonka.CertificateManager.Waiters

-- | Polls <a>DescribeCertificate</a> every 60 seconds until a successful
--   state is reached. An error is returned after 40 failed checks.
newCertificateValidated :: Wait DescribeCertificate


-- | Derived from API version <tt>2015-12-08</tt> of the AWS service
--   descriptions, licensed under Apache 2.0.
--   
--   Amazon Web Services Certificate Manager
--   
--   You can use Amazon Web Services Certificate Manager (ACM) to manage
--   SSL/TLS certificates for your Amazon Web Services-based websites and
--   applications. For more information about using ACM, see the <a>Amazon
--   Web Services Certificate Manager User Guide</a>.
module Amazonka.CertificateManager

-- | API version <tt>2015-12-08</tt> of the Amazon Certificate Manager SDK
--   configuration.
defaultService :: Service

-- | One or both of the values that make up the key-value pair is not
--   valid. For example, you cannot specify a tag value that begins with
--   <tt>aws:</tt>.
_InvalidTagException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The supplied input failed to satisfy constraints of an Amazon Web
--   Services service.
_ValidationException :: AsError a => Getting (First ServiceError) a ServiceError

-- | You do not have access required to perform this action.
_AccessDeniedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | An input parameter was invalid.
_InvalidParameterException :: AsError a => Getting (First ServiceError) a ServiceError

-- | One or more values in the DomainValidationOption structure is
--   incorrect.
_InvalidDomainValidationOptionsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request contains too many tags. Try the request again with fewer
--   tags.
_TooManyTagsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | You are trying to update a resource or configuration that is already
--   being created or updated. Wait for the previous operation to finish
--   and try again.
_ConflictException :: AsError a => Getting (First ServiceError) a ServiceError

-- | One or more of of request parameters specified is not valid.
_InvalidArgsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The certificate request is in process and the certificate in your
--   account has not yet been issued.
_RequestInProgressException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was denied because it exceeded a quota.
_ThrottlingException :: AsError a => Getting (First ServiceError) a ServiceError

-- | A specified tag did not comply with an existing tag policy and was
--   rejected.
_TagPolicyException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The requested Amazon Resource Name (ARN) does not refer to an existing
--   resource.
_InvalidArnException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified certificate cannot be found in the caller's account or
--   the caller's account cannot be found.
_ResourceNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Processing has reached an invalid state.
_InvalidStateException :: AsError a => Getting (First ServiceError) a ServiceError

-- | An ACM quota has been exceeded.
_LimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The certificate is in use by another Amazon Web Services service in
--   the caller's account. Remove the association and try again.
_ResourceInUseException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Polls <a>DescribeCertificate</a> every 60 seconds until a successful
--   state is reached. An error is returned after 40 failed checks.
newCertificateValidated :: Wait DescribeCertificate

-- | <i>See:</i> <a>newResendValidationEmail</a> smart constructor.
data ResendValidationEmail
ResendValidationEmail' :: Text -> Text -> Text -> ResendValidationEmail

-- | Create a value of <a>ResendValidationEmail</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:certificateArn:ResendValidationEmail'</a>,
--   <a>resendValidationEmail_certificateArn</a> - String that contains the
--   ARN of the requested certificate. The certificate ARN is generated and
--   returned by the RequestCertificate action as soon as the request is
--   made. By default, using this parameter causes email to be sent to all
--   top-level domains you specified in the certificate request. The ARN
--   must be of the form:
--   
--   <pre>
--   arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   <a>$sel:domain:ResendValidationEmail'</a>,
--   <a>resendValidationEmail_domain</a> - The fully qualified domain name
--   (FQDN) of the certificate that needs to be validated.
--   
--   <a>$sel:validationDomain:ResendValidationEmail'</a>,
--   <a>resendValidationEmail_validationDomain</a> - The base validation
--   domain that will act as the suffix of the email addresses that are
--   used to send the emails. This must be the same as the <tt>Domain</tt>
--   value or a superdomain of the <tt>Domain</tt> value. For example, if
--   you requested a certificate for <tt>site.subdomain.example.com</tt>
--   and specify a <b>ValidationDomain</b> of
--   <tt>subdomain.example.com</tt>, ACM sends email to the domain
--   registrant, technical contact, and administrative contact in WHOIS and
--   the following five addresses:
--   
--   <ul>
--   <li>admin@subdomain.example.com</li>
--   <li>administrator@subdomain.example.com</li>
--   <li>hostmaster@subdomain.example.com</li>
--   <li>postmaster@subdomain.example.com</li>
--   <li>webmaster@subdomain.example.com</li>
--   </ul>
newResendValidationEmail :: Text -> Text -> Text -> ResendValidationEmail

-- | <i>See:</i> <a>newResendValidationEmailResponse</a> smart constructor.
data ResendValidationEmailResponse
ResendValidationEmailResponse' :: ResendValidationEmailResponse

-- | Create a value of <a>ResendValidationEmailResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newResendValidationEmailResponse :: ResendValidationEmailResponse

-- | <i>See:</i> <a>newUpdateCertificateOptions</a> smart constructor.
data UpdateCertificateOptions
UpdateCertificateOptions' :: Text -> CertificateOptions -> UpdateCertificateOptions

-- | Create a value of <a>UpdateCertificateOptions</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:certificateArn:UpdateCertificateOptions'</a>,
--   <a>updateCertificateOptions_certificateArn</a> - ARN of the requested
--   certificate to update. This must be of the form:
--   
--   <pre>
--   arn:aws:acm:us-east-1:account:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   <a>$sel:options:UpdateCertificateOptions'</a>,
--   <a>updateCertificateOptions_options</a> - Use to update the options
--   for your certificate. Currently, you can specify whether to add your
--   certificate to a transparency log. Certificate transparency makes it
--   possible to detect SSL/TLS certificates that have been mistakenly or
--   maliciously issued. Certificates that have not been logged typically
--   produce an error message in a browser.
newUpdateCertificateOptions :: Text -> CertificateOptions -> UpdateCertificateOptions

-- | <i>See:</i> <a>newUpdateCertificateOptionsResponse</a> smart
--   constructor.
data UpdateCertificateOptionsResponse
UpdateCertificateOptionsResponse' :: UpdateCertificateOptionsResponse

-- | Create a value of <a>UpdateCertificateOptionsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newUpdateCertificateOptionsResponse :: UpdateCertificateOptionsResponse

-- | <i>See:</i> <a>newListTagsForCertificate</a> smart constructor.
data ListTagsForCertificate
ListTagsForCertificate' :: Text -> ListTagsForCertificate

-- | Create a value of <a>ListTagsForCertificate</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:certificateArn:ListTagsForCertificate'</a>,
--   <a>listTagsForCertificate_certificateArn</a> - String that contains
--   the ARN of the ACM certificate for which you want to list the tags.
--   This must have the following form:
--   
--   <pre>
--   arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   For more information about ARNs, see <a>Amazon Resource Names
--   (ARNs)</a>.
newListTagsForCertificate :: Text -> ListTagsForCertificate

-- | <i>See:</i> <a>newListTagsForCertificateResponse</a> smart
--   constructor.
data ListTagsForCertificateResponse
ListTagsForCertificateResponse' :: Maybe (NonEmpty Tag) -> Int -> ListTagsForCertificateResponse

-- | Create a value of <a>ListTagsForCertificateResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tags:ListTagsForCertificateResponse'</a>,
--   <a>listTagsForCertificateResponse_tags</a> - The key-value pairs that
--   define the applied tags.
--   
--   <a>$sel:httpStatus:ListTagsForCertificateResponse'</a>,
--   <a>listTagsForCertificateResponse_httpStatus</a> - The response's http
--   status code.
newListTagsForCertificateResponse :: Int -> ListTagsForCertificateResponse

-- | <i>See:</i> <a>newGetCertificate</a> smart constructor.
data GetCertificate
GetCertificate' :: Text -> GetCertificate

-- | Create a value of <a>GetCertificate</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:certificateArn:GetCertificate'</a>,
--   <a>getCertificate_certificateArn</a> - String that contains a
--   certificate ARN in the following format:
--   
--   <pre>
--   arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   For more information about ARNs, see <a>Amazon Resource Names
--   (ARNs)</a>.
newGetCertificate :: Text -> GetCertificate

-- | <i>See:</i> <a>newGetCertificateResponse</a> smart constructor.
data GetCertificateResponse
GetCertificateResponse' :: Maybe Text -> Maybe Text -> Int -> GetCertificateResponse

-- | Create a value of <a>GetCertificateResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:certificate:GetCertificateResponse'</a>,
--   <a>getCertificateResponse_certificate</a> - The ACM-issued certificate
--   corresponding to the ARN specified as input.
--   
--   <a>$sel:certificateChain:GetCertificateResponse'</a>,
--   <a>getCertificateResponse_certificateChain</a> - Certificates forming
--   the requested certificate's chain of trust. The chain consists of the
--   certificate of the issuing CA and the intermediate certificates of any
--   other subordinate CAs.
--   
--   <a>$sel:httpStatus:GetCertificateResponse'</a>,
--   <a>getCertificateResponse_httpStatus</a> - The response's http status
--   code.
newGetCertificateResponse :: Int -> GetCertificateResponse

-- | <i>See:</i> <a>newAddTagsToCertificate</a> smart constructor.
data AddTagsToCertificate
AddTagsToCertificate' :: Text -> NonEmpty Tag -> AddTagsToCertificate

-- | Create a value of <a>AddTagsToCertificate</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:certificateArn:AddTagsToCertificate'</a>,
--   <a>addTagsToCertificate_certificateArn</a> - String that contains the
--   ARN of the ACM certificate to which the tag is to be applied. This
--   must be of the form:
--   
--   <pre>
--   arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   For more information about ARNs, see <a>Amazon Resource Names
--   (ARNs)</a>.
--   
--   <a>$sel:tags:AddTagsToCertificate'</a>,
--   <a>addTagsToCertificate_tags</a> - The key-value pair that defines the
--   tag. The tag value is optional.
newAddTagsToCertificate :: Text -> NonEmpty Tag -> AddTagsToCertificate

-- | <i>See:</i> <a>newAddTagsToCertificateResponse</a> smart constructor.
data AddTagsToCertificateResponse
AddTagsToCertificateResponse' :: AddTagsToCertificateResponse

-- | Create a value of <a>AddTagsToCertificateResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newAddTagsToCertificateResponse :: AddTagsToCertificateResponse

-- | <i>See:</i> <a>newRequestCertificate</a> smart constructor.
data RequestCertificate
RequestCertificate' :: Maybe Text -> Maybe ValidationMethod -> Maybe (NonEmpty Text) -> Maybe CertificateOptions -> Maybe (NonEmpty DomainValidationOption) -> Maybe Text -> Maybe (NonEmpty Tag) -> Text -> RequestCertificate

-- | Create a value of <a>RequestCertificate</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:idempotencyToken:RequestCertificate'</a>,
--   <a>requestCertificate_idempotencyToken</a> - Customer chosen string
--   that can be used to distinguish between calls to
--   <tt>RequestCertificate</tt>. Idempotency tokens time out after one
--   hour. Therefore, if you call <tt>RequestCertificate</tt> multiple
--   times with the same idempotency token within one hour, ACM recognizes
--   that you are requesting only one certificate and will issue only one.
--   If you change the idempotency token for each call, ACM recognizes that
--   you are requesting multiple certificates.
--   
--   <a>$sel:validationMethod:RequestCertificate'</a>,
--   <a>requestCertificate_validationMethod</a> - The method you want to
--   use if you are requesting a public certificate to validate that you
--   own or control domain. You can <a>validate with DNS</a> or <a>validate
--   with email</a>. We recommend that you use DNS validation.
--   
--   <a>$sel:subjectAlternativeNames:RequestCertificate'</a>,
--   <a>requestCertificate_subjectAlternativeNames</a> - Additional FQDNs
--   to be included in the Subject Alternative Name extension of the ACM
--   certificate. For example, add the name www.example.net to a
--   certificate for which the <tt>DomainName</tt> field is www.example.com
--   if users can reach your site by using either name. The maximum number
--   of domain names that you can add to an ACM certificate is 100.
--   However, the initial quota is 10 domain names. If you need more than
--   10 names, you must request a quota increase. For more information, see
--   <a>Quotas</a>.
--   
--   The maximum length of a SAN DNS name is 253 octets. The name is made
--   up of multiple labels separated by periods. No label can be longer
--   than 63 octets. Consider the following examples:
--   
--   <ul>
--   <li><tt>(63 octets).(63 octets).(63 octets).(61 octets)</tt> is legal
--   because the total length is 253 octets (63+1+63+1+63+1+61) and no
--   label exceeds 63 octets.</li>
--   <li><tt>(64 octets).(63 octets).(63 octets).(61 octets)</tt> is not
--   legal because the total length exceeds 253 octets (64+1+63+1+63+1+61)
--   and the first label exceeds 63 octets.</li>
--   <li><tt>(63 octets).(63 octets).(63 octets).(62 octets)</tt> is not
--   legal because the total length of the DNS name (63+1+63+1+63+1+62)
--   exceeds 253 octets.</li>
--   </ul>
--   
--   <a>$sel:options:RequestCertificate'</a>,
--   <a>requestCertificate_options</a> - Currently, you can use this
--   parameter to specify whether to add the certificate to a certificate
--   transparency log. Certificate transparency makes it possible to detect
--   SSL/TLS certificates that have been mistakenly or maliciously issued.
--   Certificates that have not been logged typically produce an error
--   message in a browser. For more information, see <a>Opting Out of
--   Certificate Transparency Logging</a>.
--   
--   <a>$sel:domainValidationOptions:RequestCertificate'</a>,
--   <a>requestCertificate_domainValidationOptions</a> - The domain name
--   that you want ACM to use to send you emails so that you can validate
--   domain ownership.
--   
--   <a>$sel:certificateAuthorityArn:RequestCertificate'</a>,
--   <a>requestCertificate_certificateAuthorityArn</a> - The Amazon
--   Resource Name (ARN) of the private certificate authority (CA) that
--   will be used to issue the certificate. If you do not provide an ARN
--   and you are trying to request a private certificate, ACM will attempt
--   to issue a public certificate. For more information about private CAs,
--   see the <a>Amazon Web Services Certificate Manager Private Certificate
--   Authority (PCA)</a> user guide. The ARN must have the following form:
--   
--   <pre>
--   arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   <a>$sel:tags:RequestCertificate'</a>, <a>requestCertificate_tags</a> -
--   One or more resource tags to associate with the certificate.
--   
--   <a>$sel:domainName:RequestCertificate'</a>,
--   <a>requestCertificate_domainName</a> - Fully qualified domain name
--   (FQDN), such as www.example.com, that you want to secure with an ACM
--   certificate. Use an asterisk (*) to create a wildcard certificate that
--   protects several sites in the same domain. For example, *.example.com
--   protects www.example.com, site.example.com, and images.example.com.
--   
--   The first domain name you enter cannot exceed 64 octets, including
--   periods. Each subsequent Subject Alternative Name (SAN), however, can
--   be up to 253 octets in length.
newRequestCertificate :: Text -> RequestCertificate

-- | <i>See:</i> <a>newRequestCertificateResponse</a> smart constructor.
data RequestCertificateResponse
RequestCertificateResponse' :: Maybe Text -> Int -> RequestCertificateResponse

-- | Create a value of <a>RequestCertificateResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:certificateArn:RequestCertificateResponse'</a>,
--   <a>requestCertificateResponse_certificateArn</a> - String that
--   contains the ARN of the issued certificate. This must be of the form:
--   
--   <pre>
--   arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   <a>$sel:httpStatus:RequestCertificateResponse'</a>,
--   <a>requestCertificateResponse_httpStatus</a> - The response's http
--   status code.
newRequestCertificateResponse :: Int -> RequestCertificateResponse

-- | <i>See:</i> <a>newListCertificates</a> smart constructor.
data ListCertificates
ListCertificates' :: Maybe [CertificateStatus] -> Maybe Text -> Maybe Filters -> Maybe Natural -> ListCertificates

-- | Create a value of <a>ListCertificates</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:certificateStatuses:ListCertificates'</a>,
--   <a>listCertificates_certificateStatuses</a> - Filter the certificate
--   list by status value.
--   
--   <a>$sel:nextToken:ListCertificates'</a>,
--   <a>listCertificates_nextToken</a> - Use this parameter only when
--   paginating results and only in a subsequent request after you receive
--   a response with truncated results. Set it to the value of
--   <tt>NextToken</tt> from the response you just received.
--   
--   <a>$sel:includes:ListCertificates'</a>,
--   <a>listCertificates_includes</a> - Filter the certificate list. For
--   more information, see the Filters structure.
--   
--   <a>$sel:maxItems:ListCertificates'</a>,
--   <a>listCertificates_maxItems</a> - Use this parameter when paginating
--   results to specify the maximum number of items to return in the
--   response. If additional items exist beyond the number you specify, the
--   <tt>NextToken</tt> element is sent in the response. Use this
--   <tt>NextToken</tt> value in a subsequent request to retrieve
--   additional items.
newListCertificates :: ListCertificates

-- | <i>See:</i> <a>newListCertificatesResponse</a> smart constructor.
data ListCertificatesResponse
ListCertificatesResponse' :: Maybe [CertificateSummary] -> Maybe Text -> Int -> ListCertificatesResponse

-- | Create a value of <a>ListCertificatesResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:certificateSummaryList:ListCertificatesResponse'</a>,
--   <a>listCertificatesResponse_certificateSummaryList</a> - A list of ACM
--   certificates.
--   
--   <a>$sel:nextToken:ListCertificates'</a>,
--   <a>listCertificatesResponse_nextToken</a> - When the list is
--   truncated, this value is present and contains the value to use for the
--   <tt>NextToken</tt> parameter in a subsequent pagination request.
--   
--   <a>$sel:httpStatus:ListCertificatesResponse'</a>,
--   <a>listCertificatesResponse_httpStatus</a> - The response's http
--   status code.
newListCertificatesResponse :: Int -> ListCertificatesResponse

-- | <i>See:</i> <a>newDeleteCertificate</a> smart constructor.
data DeleteCertificate
DeleteCertificate' :: Text -> DeleteCertificate

-- | Create a value of <a>DeleteCertificate</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:certificateArn:DeleteCertificate'</a>,
--   <a>deleteCertificate_certificateArn</a> - String that contains the ARN
--   of the ACM certificate to be deleted. This must be of the form:
--   
--   <pre>
--   arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   For more information about ARNs, see <a>Amazon Resource Names
--   (ARNs)</a>.
newDeleteCertificate :: Text -> DeleteCertificate

-- | <i>See:</i> <a>newDeleteCertificateResponse</a> smart constructor.
data DeleteCertificateResponse
DeleteCertificateResponse' :: DeleteCertificateResponse

-- | Create a value of <a>DeleteCertificateResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newDeleteCertificateResponse :: DeleteCertificateResponse

-- | <i>See:</i> <a>newRemoveTagsFromCertificate</a> smart constructor.
data RemoveTagsFromCertificate
RemoveTagsFromCertificate' :: Text -> NonEmpty Tag -> RemoveTagsFromCertificate

-- | Create a value of <a>RemoveTagsFromCertificate</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:certificateArn:RemoveTagsFromCertificate'</a>,
--   <a>removeTagsFromCertificate_certificateArn</a> - String that contains
--   the ARN of the ACM Certificate with one or more tags that you want to
--   remove. This must be of the form:
--   
--   <pre>
--   arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   For more information about ARNs, see <a>Amazon Resource Names
--   (ARNs)</a>.
--   
--   <a>$sel:tags:RemoveTagsFromCertificate'</a>,
--   <a>removeTagsFromCertificate_tags</a> - The key-value pair that
--   defines the tag to remove.
newRemoveTagsFromCertificate :: Text -> NonEmpty Tag -> RemoveTagsFromCertificate

-- | <i>See:</i> <a>newRemoveTagsFromCertificateResponse</a> smart
--   constructor.
data RemoveTagsFromCertificateResponse
RemoveTagsFromCertificateResponse' :: RemoveTagsFromCertificateResponse

-- | Create a value of <a>RemoveTagsFromCertificateResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newRemoveTagsFromCertificateResponse :: RemoveTagsFromCertificateResponse

-- | <i>See:</i> <a>newGetAccountConfiguration</a> smart constructor.
data GetAccountConfiguration
GetAccountConfiguration' :: GetAccountConfiguration

-- | Create a value of <a>GetAccountConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newGetAccountConfiguration :: GetAccountConfiguration

-- | <i>See:</i> <a>newGetAccountConfigurationResponse</a> smart
--   constructor.
data GetAccountConfigurationResponse
GetAccountConfigurationResponse' :: Maybe ExpiryEventsConfiguration -> Int -> GetAccountConfigurationResponse

-- | Create a value of <a>GetAccountConfigurationResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:expiryEvents:GetAccountConfigurationResponse'</a>,
--   <a>getAccountConfigurationResponse_expiryEvents</a> - Expiration
--   events configuration options associated with the Amazon Web Services
--   account.
--   
--   <a>$sel:httpStatus:GetAccountConfigurationResponse'</a>,
--   <a>getAccountConfigurationResponse_httpStatus</a> - The response's
--   http status code.
newGetAccountConfigurationResponse :: Int -> GetAccountConfigurationResponse

-- | <i>See:</i> <a>newImportCertificate</a> smart constructor.
data ImportCertificate
ImportCertificate' :: Maybe Text -> Maybe Base64 -> Maybe (NonEmpty Tag) -> Base64 -> Sensitive Base64 -> ImportCertificate

-- | Create a value of <a>ImportCertificate</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:certificateArn:ImportCertificate'</a>,
--   <a>importCertificate_certificateArn</a> - The <a>Amazon Resource Name
--   (ARN)</a> of an imported certificate to replace. To import a new
--   certificate, omit this field.
--   
--   <a>$sel:certificateChain:ImportCertificate'</a>,
--   <a>importCertificate_certificateChain</a> - The PEM encoded
--   certificate chain.-- -- <i>Note:</i> This <tt>Lens</tt> automatically
--   encodes and decodes Base64 data. -- The underlying isomorphism will
--   encode to Base64 representation during -- serialisation, and decode
--   from Base64 representation during deserialisation. -- This
--   <tt>Lens</tt> accepts and returns only raw unencoded data.
--   
--   <a>$sel:tags:ImportCertificate'</a>, <a>importCertificate_tags</a> -
--   One or more resource tags to associate with the imported certificate.
--   
--   Note: You cannot apply tags when reimporting a certificate.
--   
--   <a>$sel:certificate:ImportCertificate'</a>,
--   <a>importCertificate_certificate</a> - The certificate to import.-- --
--   <i>Note:</i> This <tt>Lens</tt> automatically encodes and decodes
--   Base64 data. -- The underlying isomorphism will encode to Base64
--   representation during -- serialisation, and decode from Base64
--   representation during deserialisation. -- This <tt>Lens</tt> accepts
--   and returns only raw unencoded data.
--   
--   <a>$sel:privateKey:ImportCertificate'</a>,
--   <a>importCertificate_privateKey</a> - The private key that matches the
--   public key in the certificate.-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
newImportCertificate :: ByteString -> ByteString -> ImportCertificate

-- | <i>See:</i> <a>newImportCertificateResponse</a> smart constructor.
data ImportCertificateResponse
ImportCertificateResponse' :: Maybe Text -> Int -> ImportCertificateResponse

-- | Create a value of <a>ImportCertificateResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:certificateArn:ImportCertificate'</a>,
--   <a>importCertificateResponse_certificateArn</a> - The <a>Amazon
--   Resource Name (ARN)</a> of the imported certificate.
--   
--   <a>$sel:httpStatus:ImportCertificateResponse'</a>,
--   <a>importCertificateResponse_httpStatus</a> - The response's http
--   status code.
newImportCertificateResponse :: Int -> ImportCertificateResponse

-- | <i>See:</i> <a>newPutAccountConfiguration</a> smart constructor.
data PutAccountConfiguration
PutAccountConfiguration' :: Maybe ExpiryEventsConfiguration -> Text -> PutAccountConfiguration

-- | Create a value of <a>PutAccountConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:expiryEvents:PutAccountConfiguration'</a>,
--   <a>putAccountConfiguration_expiryEvents</a> - Specifies expiration
--   events associated with an account.
--   
--   <a>$sel:idempotencyToken:PutAccountConfiguration'</a>,
--   <a>putAccountConfiguration_idempotencyToken</a> - Customer-chosen
--   string used to distinguish between calls to
--   <tt>PutAccountConfiguration</tt>. Idempotency tokens time out after
--   one hour. If you call <tt>PutAccountConfiguration</tt> multiple times
--   with the same unexpired idempotency token, ACM treats it as the same
--   request and returns the original result. If you change the idempotency
--   token for each call, ACM treats each call as a new request.
newPutAccountConfiguration :: Text -> PutAccountConfiguration

-- | <i>See:</i> <a>newPutAccountConfigurationResponse</a> smart
--   constructor.
data PutAccountConfigurationResponse
PutAccountConfigurationResponse' :: PutAccountConfigurationResponse

-- | Create a value of <a>PutAccountConfigurationResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newPutAccountConfigurationResponse :: PutAccountConfigurationResponse

-- | <i>See:</i> <a>newDescribeCertificate</a> smart constructor.
data DescribeCertificate
DescribeCertificate' :: Text -> DescribeCertificate

-- | Create a value of <a>DescribeCertificate</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:certificateArn:DescribeCertificate'</a>,
--   <a>describeCertificate_certificateArn</a> - The Amazon Resource Name
--   (ARN) of the ACM certificate. The ARN must have the following form:
--   
--   <pre>
--   arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   For more information about ARNs, see <a>Amazon Resource Names
--   (ARNs)</a>.
newDescribeCertificate :: Text -> DescribeCertificate

-- | <i>See:</i> <a>newDescribeCertificateResponse</a> smart constructor.
data DescribeCertificateResponse
DescribeCertificateResponse' :: Maybe CertificateDetail -> Int -> DescribeCertificateResponse

-- | Create a value of <a>DescribeCertificateResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:certificate:DescribeCertificateResponse'</a>,
--   <a>describeCertificateResponse_certificate</a> - Metadata about an ACM
--   certificate.
--   
--   <a>$sel:httpStatus:DescribeCertificateResponse'</a>,
--   <a>describeCertificateResponse_httpStatus</a> - The response's http
--   status code.
newDescribeCertificateResponse :: Int -> DescribeCertificateResponse

-- | <i>See:</i> <a>newRenewCertificate</a> smart constructor.
data RenewCertificate
RenewCertificate' :: Text -> RenewCertificate

-- | Create a value of <a>RenewCertificate</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:certificateArn:RenewCertificate'</a>,
--   <a>renewCertificate_certificateArn</a> - String that contains the ARN
--   of the ACM certificate to be renewed. This must be of the form:
--   
--   <pre>
--   arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   For more information about ARNs, see <a>Amazon Resource Names
--   (ARNs)</a>.
newRenewCertificate :: Text -> RenewCertificate

-- | <i>See:</i> <a>newRenewCertificateResponse</a> smart constructor.
data RenewCertificateResponse
RenewCertificateResponse' :: RenewCertificateResponse

-- | Create a value of <a>RenewCertificateResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newRenewCertificateResponse :: RenewCertificateResponse

-- | <i>See:</i> <a>newExportCertificate</a> smart constructor.
data ExportCertificate
ExportCertificate' :: Text -> Sensitive Base64 -> ExportCertificate

-- | Create a value of <a>ExportCertificate</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:certificateArn:ExportCertificate'</a>,
--   <a>exportCertificate_certificateArn</a> - An Amazon Resource Name
--   (ARN) of the issued certificate. This must be of the form:
--   
--   <pre>
--   arn:aws:acm:region:account:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   <a>$sel:passphrase:ExportCertificate'</a>,
--   <a>exportCertificate_passphrase</a> - Passphrase to associate with the
--   encrypted exported private key. If you want to later decrypt the
--   private key, you must have the passphrase. You can use the following
--   OpenSSL command to decrypt a private key:
--   
--   <tt>openssl rsa -in encrypted_key.pem -out decrypted_key.pem</tt>-- --
--   <i>Note:</i> This <tt>Lens</tt> automatically encodes and decodes
--   Base64 data. -- The underlying isomorphism will encode to Base64
--   representation during -- serialisation, and decode from Base64
--   representation during deserialisation. -- This <tt>Lens</tt> accepts
--   and returns only raw unencoded data.
newExportCertificate :: Text -> ByteString -> ExportCertificate

-- | <i>See:</i> <a>newExportCertificateResponse</a> smart constructor.
data ExportCertificateResponse
ExportCertificateResponse' :: Maybe (Sensitive Text) -> Maybe Text -> Maybe Text -> Int -> ExportCertificateResponse

-- | Create a value of <a>ExportCertificateResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:privateKey:ExportCertificateResponse'</a>,
--   <a>exportCertificateResponse_privateKey</a> - The encrypted private
--   key associated with the public key in the certificate. The key is
--   output in PKCS #8 format and is base64 PEM-encoded.
--   
--   <a>$sel:certificate:ExportCertificateResponse'</a>,
--   <a>exportCertificateResponse_certificate</a> - The base64 PEM-encoded
--   certificate.
--   
--   <a>$sel:certificateChain:ExportCertificateResponse'</a>,
--   <a>exportCertificateResponse_certificateChain</a> - The base64
--   PEM-encoded certificate chain. This does not include the certificate
--   that you are exporting.
--   
--   <a>$sel:httpStatus:ExportCertificateResponse'</a>,
--   <a>exportCertificateResponse_httpStatus</a> - The response's http
--   status code.
newExportCertificateResponse :: Int -> ExportCertificateResponse
newtype CertificateStatus
CertificateStatus' :: Text -> CertificateStatus
[fromCertificateStatus] :: CertificateStatus -> Text
pattern CertificateStatus_EXPIRED :: CertificateStatus
pattern CertificateStatus_FAILED :: CertificateStatus
pattern CertificateStatus_INACTIVE :: CertificateStatus
pattern CertificateStatus_ISSUED :: CertificateStatus
pattern CertificateStatus_PENDING_VALIDATION :: CertificateStatus
pattern CertificateStatus_REVOKED :: CertificateStatus
pattern CertificateStatus_VALIDATION_TIMED_OUT :: CertificateStatus
newtype CertificateTransparencyLoggingPreference
CertificateTransparencyLoggingPreference' :: Text -> CertificateTransparencyLoggingPreference
[fromCertificateTransparencyLoggingPreference] :: CertificateTransparencyLoggingPreference -> Text
pattern CertificateTransparencyLoggingPreference_DISABLED :: CertificateTransparencyLoggingPreference
pattern CertificateTransparencyLoggingPreference_ENABLED :: CertificateTransparencyLoggingPreference
newtype CertificateType
CertificateType' :: Text -> CertificateType
[fromCertificateType] :: CertificateType -> Text
pattern CertificateType_AMAZON_ISSUED :: CertificateType
pattern CertificateType_IMPORTED :: CertificateType
pattern CertificateType_PRIVATE :: CertificateType
newtype DomainStatus
DomainStatus' :: Text -> DomainStatus
[fromDomainStatus] :: DomainStatus -> Text
pattern DomainStatus_FAILED :: DomainStatus
pattern DomainStatus_PENDING_VALIDATION :: DomainStatus
pattern DomainStatus_SUCCESS :: DomainStatus
newtype ExtendedKeyUsageName
ExtendedKeyUsageName' :: Text -> ExtendedKeyUsageName
[fromExtendedKeyUsageName] :: ExtendedKeyUsageName -> Text
pattern ExtendedKeyUsageName_ANY :: ExtendedKeyUsageName
pattern ExtendedKeyUsageName_CODE_SIGNING :: ExtendedKeyUsageName
pattern ExtendedKeyUsageName_CUSTOM :: ExtendedKeyUsageName
pattern ExtendedKeyUsageName_EMAIL_PROTECTION :: ExtendedKeyUsageName
pattern ExtendedKeyUsageName_IPSEC_END_SYSTEM :: ExtendedKeyUsageName
pattern ExtendedKeyUsageName_IPSEC_TUNNEL :: ExtendedKeyUsageName
pattern ExtendedKeyUsageName_IPSEC_USER :: ExtendedKeyUsageName
pattern ExtendedKeyUsageName_NONE :: ExtendedKeyUsageName
pattern ExtendedKeyUsageName_OCSP_SIGNING :: ExtendedKeyUsageName
pattern ExtendedKeyUsageName_TIME_STAMPING :: ExtendedKeyUsageName
pattern ExtendedKeyUsageName_TLS_WEB_CLIENT_AUTHENTICATION :: ExtendedKeyUsageName
pattern ExtendedKeyUsageName_TLS_WEB_SERVER_AUTHENTICATION :: ExtendedKeyUsageName
newtype FailureReason
FailureReason' :: Text -> FailureReason
[fromFailureReason] :: FailureReason -> Text
pattern FailureReason_ADDITIONAL_VERIFICATION_REQUIRED :: FailureReason
pattern FailureReason_CAA_ERROR :: FailureReason
pattern FailureReason_DOMAIN_NOT_ALLOWED :: FailureReason
pattern FailureReason_DOMAIN_VALIDATION_DENIED :: FailureReason
pattern FailureReason_INVALID_PUBLIC_DOMAIN :: FailureReason
pattern FailureReason_NO_AVAILABLE_CONTACTS :: FailureReason
pattern FailureReason_OTHER :: FailureReason
pattern FailureReason_PCA_ACCESS_DENIED :: FailureReason
pattern FailureReason_PCA_INVALID_ARGS :: FailureReason
pattern FailureReason_PCA_INVALID_ARN :: FailureReason
pattern FailureReason_PCA_INVALID_DURATION :: FailureReason
pattern FailureReason_PCA_INVALID_STATE :: FailureReason
pattern FailureReason_PCA_LIMIT_EXCEEDED :: FailureReason
pattern FailureReason_PCA_NAME_CONSTRAINTS_VALIDATION :: FailureReason
pattern FailureReason_PCA_REQUEST_FAILED :: FailureReason
pattern FailureReason_PCA_RESOURCE_NOT_FOUND :: FailureReason
pattern FailureReason_SLR_NOT_FOUND :: FailureReason
newtype KeyAlgorithm
KeyAlgorithm' :: Text -> KeyAlgorithm
[fromKeyAlgorithm] :: KeyAlgorithm -> Text
pattern KeyAlgorithm_EC_prime256v1 :: KeyAlgorithm
pattern KeyAlgorithm_EC_secp384r1 :: KeyAlgorithm
pattern KeyAlgorithm_EC_secp521r1 :: KeyAlgorithm
pattern KeyAlgorithm_RSA_1024 :: KeyAlgorithm
pattern KeyAlgorithm_RSA_2048 :: KeyAlgorithm
pattern KeyAlgorithm_RSA_3072 :: KeyAlgorithm
pattern KeyAlgorithm_RSA_4096 :: KeyAlgorithm
newtype KeyUsageName
KeyUsageName' :: Text -> KeyUsageName
[fromKeyUsageName] :: KeyUsageName -> Text
pattern KeyUsageName_ANY :: KeyUsageName
pattern KeyUsageName_CERTIFICATE_SIGNING :: KeyUsageName
pattern KeyUsageName_CRL_SIGNING :: KeyUsageName
pattern KeyUsageName_CUSTOM :: KeyUsageName
pattern KeyUsageName_DATA_ENCIPHERMENT :: KeyUsageName
pattern KeyUsageName_DECIPHER_ONLY :: KeyUsageName
pattern KeyUsageName_DIGITAL_SIGNATURE :: KeyUsageName
pattern KeyUsageName_ENCIPHER_ONLY :: KeyUsageName
pattern KeyUsageName_KEY_AGREEMENT :: KeyUsageName
pattern KeyUsageName_KEY_ENCIPHERMENT :: KeyUsageName
pattern KeyUsageName_NON_REPUDIATION :: KeyUsageName
newtype RecordType
RecordType' :: Text -> RecordType
[fromRecordType] :: RecordType -> Text
pattern RecordType_CNAME :: RecordType
newtype RenewalEligibility
RenewalEligibility' :: Text -> RenewalEligibility
[fromRenewalEligibility] :: RenewalEligibility -> Text
pattern RenewalEligibility_ELIGIBLE :: RenewalEligibility
pattern RenewalEligibility_INELIGIBLE :: RenewalEligibility
newtype RenewalStatus
RenewalStatus' :: Text -> RenewalStatus
[fromRenewalStatus] :: RenewalStatus -> Text
pattern RenewalStatus_FAILED :: RenewalStatus
pattern RenewalStatus_PENDING_AUTO_RENEWAL :: RenewalStatus
pattern RenewalStatus_PENDING_VALIDATION :: RenewalStatus
pattern RenewalStatus_SUCCESS :: RenewalStatus
newtype RevocationReason
RevocationReason' :: Text -> RevocationReason
[fromRevocationReason] :: RevocationReason -> Text
pattern RevocationReason_AFFILIATION_CHANGED :: RevocationReason
pattern RevocationReason_A_A_COMPROMISE :: RevocationReason
pattern RevocationReason_CA_COMPROMISE :: RevocationReason
pattern RevocationReason_CERTIFICATE_HOLD :: RevocationReason
pattern RevocationReason_CESSATION_OF_OPERATION :: RevocationReason
pattern RevocationReason_KEY_COMPROMISE :: RevocationReason
pattern RevocationReason_PRIVILEGE_WITHDRAWN :: RevocationReason
pattern RevocationReason_REMOVE_FROM_CRL :: RevocationReason
pattern RevocationReason_SUPERCEDED :: RevocationReason
pattern RevocationReason_UNSPECIFIED :: RevocationReason
newtype ValidationMethod
ValidationMethod' :: Text -> ValidationMethod
[fromValidationMethod] :: ValidationMethod -> Text
pattern ValidationMethod_DNS :: ValidationMethod
pattern ValidationMethod_EMAIL :: ValidationMethod

-- | Contains metadata about an ACM certificate. This structure is returned
--   in the response to a DescribeCertificate request.
--   
--   <i>See:</i> <a>newCertificateDetail</a> smart constructor.
data CertificateDetail
CertificateDetail' :: Maybe Text -> Maybe CertificateStatus -> Maybe FailureReason -> Maybe (NonEmpty Text) -> Maybe [Text] -> Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe RenewalEligibility -> Maybe [ExtendedKeyUsage] -> Maybe POSIX -> Maybe [KeyUsage] -> Maybe POSIX -> Maybe POSIX -> Maybe RevocationReason -> Maybe Text -> Maybe RenewalSummary -> Maybe KeyAlgorithm -> Maybe CertificateType -> Maybe CertificateOptions -> Maybe POSIX -> Maybe Text -> Maybe (NonEmpty DomainValidation) -> Maybe Text -> Maybe POSIX -> Maybe Text -> CertificateDetail

-- | Create a value of <a>CertificateDetail</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:subject:CertificateDetail'</a>,
--   <a>certificateDetail_subject</a> - The name of the entity that is
--   associated with the public key contained in the certificate.
--   
--   <a>$sel:status:CertificateDetail'</a>, <a>certificateDetail_status</a>
--   - The status of the certificate.
--   
--   <a>$sel:failureReason:CertificateDetail'</a>,
--   <a>certificateDetail_failureReason</a> - The reason the certificate
--   request failed. This value exists only when the certificate status is
--   <tt>FAILED</tt>. For more information, see <a>Certificate Request
--   Failed</a> in the <i>Amazon Web Services Certificate Manager User
--   Guide</i>.
--   
--   <a>$sel:subjectAlternativeNames:CertificateDetail'</a>,
--   <a>certificateDetail_subjectAlternativeNames</a> - One or more domain
--   names (subject alternative names) included in the certificate. This
--   list contains the domain names that are bound to the public key that
--   is contained in the certificate. The subject alternative names include
--   the canonical domain name (CN) of the certificate and additional
--   domain names that can be used to connect to the website.
--   
--   <a>$sel:inUseBy:CertificateDetail'</a>,
--   <a>certificateDetail_inUseBy</a> - A list of ARNs for the Amazon Web
--   Services resources that are using the certificate. A certificate can
--   be used by multiple Amazon Web Services resources.
--   
--   <a>$sel:createdAt:CertificateDetail'</a>,
--   <a>certificateDetail_createdAt</a> - The time at which the certificate
--   was requested.
--   
--   <a>$sel:certificateArn:CertificateDetail'</a>,
--   <a>certificateDetail_certificateArn</a> - The Amazon Resource Name
--   (ARN) of the certificate. For more information about ARNs, see
--   <a>Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services
--   General Reference</i>.
--   
--   <a>$sel:serial:CertificateDetail'</a>, <a>certificateDetail_serial</a>
--   - The serial number of the certificate.
--   
--   <a>$sel:renewalEligibility:CertificateDetail'</a>,
--   <a>certificateDetail_renewalEligibility</a> - Specifies whether the
--   certificate is eligible for renewal. At this time, only exported
--   private certificates can be renewed with the RenewCertificate command.
--   
--   <a>$sel:extendedKeyUsages:CertificateDetail'</a>,
--   <a>certificateDetail_extendedKeyUsages</a> - Contains a list of
--   Extended Key Usage X.509 v3 extension objects. Each object specifies a
--   purpose for which the certificate public key can be used and consists
--   of a name and an object identifier (OID).
--   
--   <a>$sel:importedAt:CertificateDetail'</a>,
--   <a>certificateDetail_importedAt</a> - The date and time at which the
--   certificate was imported. This value exists only when the certificate
--   type is <tt>IMPORTED</tt>.
--   
--   <a>$sel:keyUsages:CertificateDetail'</a>,
--   <a>certificateDetail_keyUsages</a> - A list of Key Usage X.509 v3
--   extension objects. Each object is a string value that identifies the
--   purpose of the public key contained in the certificate. Possible
--   extension values include DIGITAL_SIGNATURE, KEY_ENCHIPHERMENT,
--   NON_REPUDIATION, and more.
--   
--   <a>$sel:revokedAt:CertificateDetail'</a>,
--   <a>certificateDetail_revokedAt</a> - The time at which the certificate
--   was revoked. This value exists only when the certificate status is
--   <tt>REVOKED</tt>.
--   
--   <a>$sel:notBefore:CertificateDetail'</a>,
--   <a>certificateDetail_notBefore</a> - The time before which the
--   certificate is not valid.
--   
--   <a>$sel:revocationReason:CertificateDetail'</a>,
--   <a>certificateDetail_revocationReason</a> - The reason the certificate
--   was revoked. This value exists only when the certificate status is
--   <tt>REVOKED</tt>.
--   
--   <a>$sel:domainName:CertificateDetail'</a>,
--   <a>certificateDetail_domainName</a> - The fully qualified domain name
--   for the certificate, such as www.example.com or example.com.
--   
--   <a>$sel:renewalSummary:CertificateDetail'</a>,
--   <a>certificateDetail_renewalSummary</a> - Contains information about
--   the status of ACM's <a>managed renewal</a> for the certificate. This
--   field exists only when the certificate type is <tt>AMAZON_ISSUED</tt>.
--   
--   <a>$sel:keyAlgorithm:CertificateDetail'</a>,
--   <a>certificateDetail_keyAlgorithm</a> - The algorithm that was used to
--   generate the public-private key pair.
--   
--   <a>$sel:type':CertificateDetail'</a>, <a>certificateDetail_type</a> -
--   The source of the certificate. For certificates provided by ACM, this
--   value is <tt>AMAZON_ISSUED</tt>. For certificates that you imported
--   with ImportCertificate, this value is <tt>IMPORTED</tt>. ACM does not
--   provide <a>managed renewal</a> for imported certificates. For more
--   information about the differences between certificates that you import
--   and those that ACM provides, see <a>Importing Certificates</a> in the
--   <i>Amazon Web Services Certificate Manager User Guide</i>.
--   
--   <a>$sel:options:CertificateDetail'</a>,
--   <a>certificateDetail_options</a> - Value that specifies whether to add
--   the certificate to a transparency log. Certificate transparency makes
--   it possible to detect SSL certificates that have been mistakenly or
--   maliciously issued. A browser might respond to certificate that has
--   not been logged by showing an error message. The logs are
--   cryptographically secure.
--   
--   <a>$sel:issuedAt:CertificateDetail'</a>,
--   <a>certificateDetail_issuedAt</a> - The time at which the certificate
--   was issued. This value exists only when the certificate type is
--   <tt>AMAZON_ISSUED</tt>.
--   
--   <a>$sel:signatureAlgorithm:CertificateDetail'</a>,
--   <a>certificateDetail_signatureAlgorithm</a> - The algorithm that was
--   used to sign the certificate.
--   
--   <a>$sel:domainValidationOptions:CertificateDetail'</a>,
--   <a>certificateDetail_domainValidationOptions</a> - Contains
--   information about the initial validation of each domain name that
--   occurs as a result of the RequestCertificate request. This field
--   exists only when the certificate type is <tt>AMAZON_ISSUED</tt>.
--   
--   <a>$sel:issuer:CertificateDetail'</a>, <a>certificateDetail_issuer</a>
--   - The name of the certificate authority that issued and signed the
--   certificate.
--   
--   <a>$sel:notAfter:CertificateDetail'</a>,
--   <a>certificateDetail_notAfter</a> - The time after which the
--   certificate is not valid.
--   
--   <a>$sel:certificateAuthorityArn:CertificateDetail'</a>,
--   <a>certificateDetail_certificateAuthorityArn</a> - The Amazon Resource
--   Name (ARN) of the ACM PCA private certificate authority (CA) that
--   issued the certificate. This has the following format:
--   
--   <pre>
--   arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012
--   </pre>
newCertificateDetail :: CertificateDetail

-- | Structure that contains options for your certificate. Currently, you
--   can use this only to specify whether to opt in to or out of
--   certificate transparency logging. Some browsers require that public
--   certificates issued for your domain be recorded in a log. Certificates
--   that are not logged typically generate a browser error. Transparency
--   makes it possible for you to detect SSL/TLS certificates that have
--   been mistakenly or maliciously issued for your domain. For general
--   information, see <a>Certificate Transparency Logging</a>.
--   
--   <i>See:</i> <a>newCertificateOptions</a> smart constructor.
data CertificateOptions
CertificateOptions' :: Maybe CertificateTransparencyLoggingPreference -> CertificateOptions

-- | Create a value of <a>CertificateOptions</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:certificateTransparencyLoggingPreference:CertificateOptions'</a>,
--   <a>certificateOptions_certificateTransparencyLoggingPreference</a> -
--   You can opt out of certificate transparency logging by specifying the
--   <tt>DISABLED</tt> option. Opt in by specifying <tt>ENABLED</tt>.
newCertificateOptions :: CertificateOptions

-- | This structure is returned in the response object of ListCertificates
--   action.
--   
--   <i>See:</i> <a>newCertificateSummary</a> smart constructor.
data CertificateSummary
CertificateSummary' :: Maybe Text -> Maybe Text -> CertificateSummary

-- | Create a value of <a>CertificateSummary</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:certificateArn:CertificateSummary'</a>,
--   <a>certificateSummary_certificateArn</a> - Amazon Resource Name (ARN)
--   of the certificate. This is of the form:
--   
--   <pre>
--   arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012
--   </pre>
--   
--   For more information about ARNs, see <a>Amazon Resource Names
--   (ARNs)</a>.
--   
--   <a>$sel:domainName:CertificateSummary'</a>,
--   <a>certificateSummary_domainName</a> - Fully qualified domain name
--   (FQDN), such as www.example.com or example.com, for the certificate.
newCertificateSummary :: CertificateSummary

-- | Contains information about the validation of each domain name in the
--   certificate.
--   
--   <i>See:</i> <a>newDomainValidation</a> smart constructor.
data DomainValidation
DomainValidation' :: Maybe [Text] -> Maybe ValidationMethod -> Maybe ResourceRecord -> Maybe DomainStatus -> Maybe Text -> Text -> DomainValidation

-- | Create a value of <a>DomainValidation</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:validationEmails:DomainValidation'</a>,
--   <a>domainValidation_validationEmails</a> - A list of email addresses
--   that ACM used to send domain validation emails.
--   
--   <a>$sel:validationMethod:DomainValidation'</a>,
--   <a>domainValidation_validationMethod</a> - Specifies the domain
--   validation method.
--   
--   <a>$sel:resourceRecord:DomainValidation'</a>,
--   <a>domainValidation_resourceRecord</a> - Contains the CNAME record
--   that you add to your DNS database for domain validation. For more
--   information, see <a>Use DNS to Validate Domain Ownership</a>.
--   
--   Note: The CNAME information that you need does not include the name of
--   your domain. If you include  your domain name in the DNS database
--   CNAME record, validation fails.  For example, if the name is
--   "_a79865eb4cd1a6ab990a45779b4e0b96.yourdomain.com", only
--   "_a79865eb4cd1a6ab990a45779b4e0b96" must be used.
--   
--   <a>$sel:validationStatus:DomainValidation'</a>,
--   <a>domainValidation_validationStatus</a> - The validation status of
--   the domain name. This can be one of the following values:
--   
--   <ul>
--   <li><pre>PENDING_VALIDATION</pre></li>
--   <li>@@SUCCESS</li>
--   <li>@@FAILED</li>
--   </ul>
--   
--   <a>$sel:validationDomain:DomainValidation'</a>,
--   <a>domainValidation_validationDomain</a> - The domain name that ACM
--   used to send domain validation emails.
--   
--   <a>$sel:domainName:DomainValidation'</a>,
--   <a>domainValidation_domainName</a> - A fully qualified domain name
--   (FQDN) in the certificate. For example, <tt>www.example.com</tt> or
--   <tt>example.com</tt>.
newDomainValidation :: Text -> DomainValidation

-- | Contains information about the domain names that you want ACM to use
--   to send you emails that enable you to validate domain ownership.
--   
--   <i>See:</i> <a>newDomainValidationOption</a> smart constructor.
data DomainValidationOption
DomainValidationOption' :: Text -> Text -> DomainValidationOption

-- | Create a value of <a>DomainValidationOption</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:domainName:DomainValidationOption'</a>,
--   <a>domainValidationOption_domainName</a> - A fully qualified domain
--   name (FQDN) in the certificate request.
--   
--   <a>$sel:validationDomain:DomainValidationOption'</a>,
--   <a>domainValidationOption_validationDomain</a> - The domain name that
--   you want ACM to use to send you validation emails. This domain name is
--   the suffix of the email addresses that you want ACM to use. This must
--   be the same as the <tt>DomainName</tt> value or a superdomain of the
--   <tt>DomainName</tt> value. For example, if you request a certificate
--   for <tt>testing.example.com</tt>, you can specify <tt>example.com</tt>
--   for this value. In that case, ACM sends domain validation emails to
--   the following five addresses:
--   
--   <ul>
--   <li>admin@example.com</li>
--   <li>administrator@example.com</li>
--   <li>hostmaster@example.com</li>
--   <li>postmaster@example.com</li>
--   <li>webmaster@example.com</li>
--   </ul>
newDomainValidationOption :: Text -> Text -> DomainValidationOption

-- | Object containing expiration events options associated with an Amazon
--   Web Services account.
--   
--   <i>See:</i> <a>newExpiryEventsConfiguration</a> smart constructor.
data ExpiryEventsConfiguration
ExpiryEventsConfiguration' :: Maybe Natural -> ExpiryEventsConfiguration

-- | Create a value of <a>ExpiryEventsConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:daysBeforeExpiry:ExpiryEventsConfiguration'</a>,
--   <a>expiryEventsConfiguration_daysBeforeExpiry</a> - Specifies the
--   number of days prior to certificate expiration when ACM starts
--   generating <tt>EventBridge</tt> events. ACM sends one event per day
--   per certificate until the certificate expires. By default, accounts
--   receive events starting 45 days before certificate expiration.
newExpiryEventsConfiguration :: ExpiryEventsConfiguration

-- | The Extended Key Usage X.509 v3 extension defines one or more purposes
--   for which the public key can be used. This is in addition to or in
--   place of the basic purposes specified by the Key Usage extension.
--   
--   <i>See:</i> <a>newExtendedKeyUsage</a> smart constructor.
data ExtendedKeyUsage
ExtendedKeyUsage' :: Maybe Text -> Maybe ExtendedKeyUsageName -> ExtendedKeyUsage

-- | Create a value of <a>ExtendedKeyUsage</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:oid:ExtendedKeyUsage'</a>, <a>extendedKeyUsage_oid</a> - An
--   object identifier (OID) for the extension value. OIDs are strings of
--   numbers separated by periods. The following OIDs are defined in RFC
--   3280 and RFC 5280.
--   
--   <ul>
--   <li><pre>1.3.6.1.5.5.7.3.1 (TLS_WEB_SERVER_AUTHENTICATION)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.2 (TLS_WEB_CLIENT_AUTHENTICATION)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.3 (CODE_SIGNING)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.4 (EMAIL_PROTECTION)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.8 (TIME_STAMPING)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.9 (OCSP_SIGNING)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.5 (IPSEC_END_SYSTEM)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.6 (IPSEC_TUNNEL)</pre></li>
--   <li><pre>1.3.6.1.5.5.7.3.7 (IPSEC_USER)</pre></li>
--   </ul>
--   
--   <a>$sel:name:ExtendedKeyUsage'</a>, <a>extendedKeyUsage_name</a> - The
--   name of an Extended Key Usage value.
newExtendedKeyUsage :: ExtendedKeyUsage

-- | This structure can be used in the ListCertificates action to filter
--   the output of the certificate list.
--   
--   <i>See:</i> <a>newFilters</a> smart constructor.
data Filters
Filters' :: Maybe [KeyAlgorithm] -> Maybe [KeyUsageName] -> Maybe [ExtendedKeyUsageName] -> Filters

-- | Create a value of <a>Filters</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyTypes:Filters'</a>, <a>filters_keyTypes</a> - Specify one
--   or more algorithms that can be used to generate key pairs.
--   
--   Default filtering returns only <tt>RSA_1024</tt> and <tt>RSA_2048</tt>
--   certificates that have at least one domain. To return other
--   certificate types, provide the desired type signatures in a
--   comma-separated list. For example, <tt>"keyTypes":
--   ["RSA_2048,RSA_4096"]</tt> returns both <tt>RSA_2048</tt> and
--   <tt>RSA_4096</tt> certificates.
--   
--   <a>$sel:keyUsage:Filters'</a>, <a>filters_keyUsage</a> - Specify one
--   or more KeyUsage extension values.
--   
--   <a>$sel:extendedKeyUsage:Filters'</a>, <a>filters_extendedKeyUsage</a>
--   - Specify one or more ExtendedKeyUsage extension values.
newFilters :: Filters

-- | The Key Usage X.509 v3 extension defines the purpose of the public key
--   contained in the certificate.
--   
--   <i>See:</i> <a>newKeyUsage</a> smart constructor.
data KeyUsage
KeyUsage' :: Maybe KeyUsageName -> KeyUsage

-- | Create a value of <a>KeyUsage</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:name:KeyUsage'</a>, <a>keyUsage_name</a> - A string value that
--   contains a Key Usage extension name.
newKeyUsage :: KeyUsage

-- | Contains information about the status of ACM's <a>managed renewal</a>
--   for the certificate. This structure exists only when the certificate
--   type is <tt>AMAZON_ISSUED</tt>.
--   
--   <i>See:</i> <a>newRenewalSummary</a> smart constructor.
data RenewalSummary
RenewalSummary' :: Maybe FailureReason -> RenewalStatus -> NonEmpty DomainValidation -> POSIX -> RenewalSummary

-- | Create a value of <a>RenewalSummary</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:renewalStatusReason:RenewalSummary'</a>,
--   <a>renewalSummary_renewalStatusReason</a> - The reason that a renewal
--   request was unsuccessful.
--   
--   <a>$sel:renewalStatus:RenewalSummary'</a>,
--   <a>renewalSummary_renewalStatus</a> - The status of ACM's <a>managed
--   renewal</a> of the certificate.
--   
--   <a>$sel:domainValidationOptions:RenewalSummary'</a>,
--   <a>renewalSummary_domainValidationOptions</a> - Contains information
--   about the validation of each domain name in the certificate, as it
--   pertains to ACM's <a>managed renewal</a>. This is different from the
--   initial validation that occurs as a result of the RequestCertificate
--   request. This field exists only when the certificate type is
--   <tt>AMAZON_ISSUED</tt>.
--   
--   <a>$sel:updatedAt:RenewalSummary'</a>, <a>renewalSummary_updatedAt</a>
--   - The time at which the renewal summary was last updated.
newRenewalSummary :: RenewalStatus -> NonEmpty DomainValidation -> UTCTime -> RenewalSummary

-- | Contains a DNS record value that you can use to validate ownership or
--   control of a domain. This is used by the DescribeCertificate action.
--   
--   <i>See:</i> <a>newResourceRecord</a> smart constructor.
data ResourceRecord
ResourceRecord' :: Text -> RecordType -> Text -> ResourceRecord

-- | Create a value of <a>ResourceRecord</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:name:ResourceRecord'</a>, <a>resourceRecord_name</a> - The
--   name of the DNS record to create in your domain. This is supplied by
--   ACM.
--   
--   <a>$sel:type':ResourceRecord'</a>, <a>resourceRecord_type</a> - The
--   type of DNS record. Currently this can be <tt>CNAME</tt>.
--   
--   <a>$sel:value:ResourceRecord'</a>, <a>resourceRecord_value</a> - The
--   value of the CNAME record to add to your DNS database. This is
--   supplied by ACM.
newResourceRecord :: Text -> RecordType -> Text -> ResourceRecord

-- | A key-value pair that identifies or specifies metadata about an ACM
--   resource.
--   
--   <i>See:</i> <a>newTag</a> smart constructor.
data Tag
Tag' :: Maybe Text -> Text -> Tag

-- | Create a value of <a>Tag</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:Tag'</a>, <a>tag_value</a> - The value of the tag.
--   
--   <a>$sel:key:Tag'</a>, <a>tag_key</a> - The key of the tag.
newTag :: Text -> Tag
