-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/

@package libZSservicesZSamazonka-honeycodeZSamazonka-honeycode
@version 2.0


module Amazonka.HoneyCode.Types.CellInput

-- | CellInput object contains the data needed to create or update cells in
--   a table.
--   
--   <i>See:</i> <a>newCellInput</a> smart constructor.
data CellInput
CellInput' :: Maybe (Sensitive Text) -> CellInput

-- | Fact represents the data that is entered into a cell. This data can be
--   free text or a formula. Formulas need to start with the equals (=)
--   sign.
[$sel:fact:CellInput'] :: CellInput -> Maybe (Sensitive Text)

-- | Create a value of <a>CellInput</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:fact:CellInput'</a>, <a>cellInput_fact</a> - Fact represents
--   the data that is entered into a cell. This data can be free text or a
--   formula. Formulas need to start with the equals (=) sign.
newCellInput :: CellInput

-- | Fact represents the data that is entered into a cell. This data can be
--   free text or a formula. Formulas need to start with the equals (=)
--   sign.
cellInput_fact :: Lens' CellInput (Maybe Text)
instance GHC.Generics.Generic Amazonka.HoneyCode.Types.CellInput.CellInput
instance GHC.Show.Show Amazonka.HoneyCode.Types.CellInput.CellInput
instance GHC.Classes.Eq Amazonka.HoneyCode.Types.CellInput.CellInput
instance Data.Hashable.Class.Hashable Amazonka.HoneyCode.Types.CellInput.CellInput
instance Control.DeepSeq.NFData Amazonka.HoneyCode.Types.CellInput.CellInput
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.HoneyCode.Types.CellInput.CellInput


module Amazonka.HoneyCode.Types.CreateRowData

-- | Data needed to create a single row in a table as part of the
--   BatchCreateTableRows request.
--   
--   <i>See:</i> <a>newCreateRowData</a> smart constructor.
data CreateRowData
CreateRowData' :: Text -> HashMap Text CellInput -> CreateRowData

-- | An external identifier that represents the single row that is being
--   created as part of the BatchCreateTableRows request. This can be any
--   string that you can use to identify the row in the request. The
--   BatchCreateTableRows API puts the batch item id in the results to
--   allow you to link data in the request to data in the results.
[$sel:batchItemId:CreateRowData'] :: CreateRowData -> Text

-- | A map representing the cells to create in the new row. The key is the
--   column id of the cell and the value is the CellInput object that
--   represents the data to set in that cell.
[$sel:cellsToCreate:CreateRowData'] :: CreateRowData -> HashMap Text CellInput

-- | Create a value of <a>CreateRowData</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:batchItemId:CreateRowData'</a>,
--   <a>createRowData_batchItemId</a> - An external identifier that
--   represents the single row that is being created as part of the
--   BatchCreateTableRows request. This can be any string that you can use
--   to identify the row in the request. The BatchCreateTableRows API puts
--   the batch item id in the results to allow you to link data in the
--   request to data in the results.
--   
--   <a>$sel:cellsToCreate:CreateRowData'</a>,
--   <a>createRowData_cellsToCreate</a> - A map representing the cells to
--   create in the new row. The key is the column id of the cell and the
--   value is the CellInput object that represents the data to set in that
--   cell.
newCreateRowData :: Text -> CreateRowData

-- | An external identifier that represents the single row that is being
--   created as part of the BatchCreateTableRows request. This can be any
--   string that you can use to identify the row in the request. The
--   BatchCreateTableRows API puts the batch item id in the results to
--   allow you to link data in the request to data in the results.
createRowData_batchItemId :: Lens' CreateRowData Text

-- | A map representing the cells to create in the new row. The key is the
--   column id of the cell and the value is the CellInput object that
--   represents the data to set in that cell.
createRowData_cellsToCreate :: Lens' CreateRowData (HashMap Text CellInput)
instance GHC.Generics.Generic Amazonka.HoneyCode.Types.CreateRowData.CreateRowData
instance GHC.Show.Show Amazonka.HoneyCode.Types.CreateRowData.CreateRowData
instance GHC.Classes.Eq Amazonka.HoneyCode.Types.CreateRowData.CreateRowData
instance Data.Hashable.Class.Hashable Amazonka.HoneyCode.Types.CreateRowData.CreateRowData
instance Control.DeepSeq.NFData Amazonka.HoneyCode.Types.CreateRowData.CreateRowData
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.HoneyCode.Types.CreateRowData.CreateRowData


module Amazonka.HoneyCode.Types.FailedBatchItem

-- | A single item in a batch that failed to perform the intended action
--   because of an error preventing it from succeeding.
--   
--   <i>See:</i> <a>newFailedBatchItem</a> smart constructor.
data FailedBatchItem
FailedBatchItem' :: Text -> Text -> FailedBatchItem

-- | The id of the batch item that failed. This is the batch item id for
--   the BatchCreateTableRows and BatchUpsertTableRows operations and the
--   row id for the BatchUpdateTableRows and BatchDeleteTableRows
--   operations.
[$sel:id:FailedBatchItem'] :: FailedBatchItem -> Text

-- | The error message that indicates why the batch item failed.
[$sel:errorMessage:FailedBatchItem'] :: FailedBatchItem -> Text

-- | Create a value of <a>FailedBatchItem</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:id:FailedBatchItem'</a>, <a>failedBatchItem_id</a> - The id of
--   the batch item that failed. This is the batch item id for the
--   BatchCreateTableRows and BatchUpsertTableRows operations and the row
--   id for the BatchUpdateTableRows and BatchDeleteTableRows operations.
--   
--   <a>$sel:errorMessage:FailedBatchItem'</a>,
--   <a>failedBatchItem_errorMessage</a> - The error message that indicates
--   why the batch item failed.
newFailedBatchItem :: Text -> Text -> FailedBatchItem

-- | The id of the batch item that failed. This is the batch item id for
--   the BatchCreateTableRows and BatchUpsertTableRows operations and the
--   row id for the BatchUpdateTableRows and BatchDeleteTableRows
--   operations.
failedBatchItem_id :: Lens' FailedBatchItem Text

-- | The error message that indicates why the batch item failed.
failedBatchItem_errorMessage :: Lens' FailedBatchItem Text
instance GHC.Generics.Generic Amazonka.HoneyCode.Types.FailedBatchItem.FailedBatchItem
instance GHC.Show.Show Amazonka.HoneyCode.Types.FailedBatchItem.FailedBatchItem
instance GHC.Read.Read Amazonka.HoneyCode.Types.FailedBatchItem.FailedBatchItem
instance GHC.Classes.Eq Amazonka.HoneyCode.Types.FailedBatchItem.FailedBatchItem
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.HoneyCode.Types.FailedBatchItem.FailedBatchItem
instance Data.Hashable.Class.Hashable Amazonka.HoneyCode.Types.FailedBatchItem.FailedBatchItem
instance Control.DeepSeq.NFData Amazonka.HoneyCode.Types.FailedBatchItem.FailedBatchItem


module Amazonka.HoneyCode.Types.Filter

-- | An object that represents a filter formula along with the id of the
--   context row under which the filter function needs to evaluate.
--   
--   <i>See:</i> <a>newFilter</a> smart constructor.
data Filter
Filter' :: Maybe Text -> Sensitive Text -> Filter

-- | The optional contextRowId attribute can be used to specify the row id
--   of the context row if the filter formula contains unqualified
--   references to table columns and needs a context row to evaluate them
--   successfully.
[$sel:contextRowId:Filter'] :: Filter -> Maybe Text

-- | A formula representing a filter function that returns zero or more
--   matching rows from a table. Valid formulas in this field return a list
--   of rows from a table. The most common ways of writing a formula to
--   return a list of rows are to use the FindRow() or Filter() functions.
--   Any other formula that returns zero or more rows is also acceptable.
--   For example, you can use a formula that points to a cell that contains
--   a filter function.
[$sel:formula:Filter'] :: Filter -> Sensitive Text

-- | Create a value of <a>Filter</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:contextRowId:Filter'</a>, <a>filter_contextRowId</a> - The
--   optional contextRowId attribute can be used to specify the row id of
--   the context row if the filter formula contains unqualified references
--   to table columns and needs a context row to evaluate them
--   successfully.
--   
--   <a>$sel:formula:Filter'</a>, <a>filter_formula</a> - A formula
--   representing a filter function that returns zero or more matching rows
--   from a table. Valid formulas in this field return a list of rows from
--   a table. The most common ways of writing a formula to return a list of
--   rows are to use the FindRow() or Filter() functions. Any other formula
--   that returns zero or more rows is also acceptable. For example, you
--   can use a formula that points to a cell that contains a filter
--   function.
newFilter :: Text -> Filter

-- | The optional contextRowId attribute can be used to specify the row id
--   of the context row if the filter formula contains unqualified
--   references to table columns and needs a context row to evaluate them
--   successfully.
filter_contextRowId :: Lens' Filter (Maybe Text)

-- | A formula representing a filter function that returns zero or more
--   matching rows from a table. Valid formulas in this field return a list
--   of rows from a table. The most common ways of writing a formula to
--   return a list of rows are to use the FindRow() or Filter() functions.
--   Any other formula that returns zero or more rows is also acceptable.
--   For example, you can use a formula that points to a cell that contains
--   a filter function.
filter_formula :: Lens' Filter Text
instance GHC.Generics.Generic Amazonka.HoneyCode.Types.Filter.Filter
instance GHC.Show.Show Amazonka.HoneyCode.Types.Filter.Filter
instance GHC.Classes.Eq Amazonka.HoneyCode.Types.Filter.Filter
instance Data.Hashable.Class.Hashable Amazonka.HoneyCode.Types.Filter.Filter
instance Control.DeepSeq.NFData Amazonka.HoneyCode.Types.Filter.Filter
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.HoneyCode.Types.Filter.Filter


module Amazonka.HoneyCode.Types.Format
newtype Format
Format' :: Text -> Format
[fromFormat] :: Format -> Text
pattern Format_ACCOUNTING :: Format
pattern Format_AUTO :: Format
pattern Format_CONTACT :: Format
pattern Format_CURRENCY :: Format
pattern Format_DATE :: Format
pattern Format_DATE_TIME :: Format
pattern Format_NUMBER :: Format
pattern Format_PERCENTAGE :: Format
pattern Format_ROWLINK :: Format
pattern Format_TEXT :: Format
pattern Format_TIME :: Format
instance Amazonka.Data.XML.ToXML Amazonka.HoneyCode.Types.Format.Format
instance Amazonka.Data.XML.FromXML Amazonka.HoneyCode.Types.Format.Format
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.HoneyCode.Types.Format.Format
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.HoneyCode.Types.Format.Format
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.HoneyCode.Types.Format.Format
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.HoneyCode.Types.Format.Format
instance Amazonka.Data.Query.ToQuery Amazonka.HoneyCode.Types.Format.Format
instance Amazonka.Data.Headers.ToHeader Amazonka.HoneyCode.Types.Format.Format
instance Amazonka.Data.Log.ToLog Amazonka.HoneyCode.Types.Format.Format
instance Amazonka.Data.ByteString.ToByteString Amazonka.HoneyCode.Types.Format.Format
instance Amazonka.Data.Text.ToText Amazonka.HoneyCode.Types.Format.Format
instance Amazonka.Data.Text.FromText Amazonka.HoneyCode.Types.Format.Format
instance Control.DeepSeq.NFData Amazonka.HoneyCode.Types.Format.Format
instance Data.Hashable.Class.Hashable Amazonka.HoneyCode.Types.Format.Format
instance GHC.Generics.Generic Amazonka.HoneyCode.Types.Format.Format
instance GHC.Classes.Ord Amazonka.HoneyCode.Types.Format.Format
instance GHC.Classes.Eq Amazonka.HoneyCode.Types.Format.Format
instance GHC.Read.Read Amazonka.HoneyCode.Types.Format.Format
instance GHC.Show.Show Amazonka.HoneyCode.Types.Format.Format


module Amazonka.HoneyCode.Types.DataItem

-- | The data in a particular data cell defined on the screen.
--   
--   <i>See:</i> <a>newDataItem</a> smart constructor.
data DataItem
DataItem' :: Maybe Text -> Maybe Format -> Maybe Text -> DataItem

-- | The raw value of the data. e.g. jsmith@example.com
[$sel:rawValue:DataItem'] :: DataItem -> Maybe Text

-- | The overrideFormat is optional and is specified only if a particular
--   row of data has a different format for the data than the default
--   format defined on the screen or the table.
[$sel:overrideFormat:DataItem'] :: DataItem -> Maybe Format

-- | The formatted value of the data. e.g. John Smith.
[$sel:formattedValue:DataItem'] :: DataItem -> Maybe Text

-- | Create a value of <a>DataItem</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rawValue:DataItem'</a>, <a>dataItem_rawValue</a> - The raw
--   value of the data. e.g. jsmith@example.com
--   
--   <a>$sel:overrideFormat:DataItem'</a>, <a>dataItem_overrideFormat</a> -
--   The overrideFormat is optional and is specified only if a particular
--   row of data has a different format for the data than the default
--   format defined on the screen or the table.
--   
--   <a>$sel:formattedValue:DataItem'</a>, <a>dataItem_formattedValue</a> -
--   The formatted value of the data. e.g. John Smith.
newDataItem :: DataItem

-- | The raw value of the data. e.g. jsmith@example.com
dataItem_rawValue :: Lens' DataItem (Maybe Text)

-- | The overrideFormat is optional and is specified only if a particular
--   row of data has a different format for the data than the default
--   format defined on the screen or the table.
dataItem_overrideFormat :: Lens' DataItem (Maybe Format)

-- | The formatted value of the data. e.g. John Smith.
dataItem_formattedValue :: Lens' DataItem (Maybe Text)
instance GHC.Generics.Generic Amazonka.HoneyCode.Types.DataItem.DataItem
instance GHC.Show.Show Amazonka.HoneyCode.Types.DataItem.DataItem
instance GHC.Classes.Eq Amazonka.HoneyCode.Types.DataItem.DataItem
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.HoneyCode.Types.DataItem.DataItem
instance Data.Hashable.Class.Hashable Amazonka.HoneyCode.Types.DataItem.DataItem
instance Control.DeepSeq.NFData Amazonka.HoneyCode.Types.DataItem.DataItem


module Amazonka.HoneyCode.Types.ColumnMetadata

-- | Metadata for column in the table.
--   
--   <i>See:</i> <a>newColumnMetadata</a> smart constructor.
data ColumnMetadata
ColumnMetadata' :: Sensitive Text -> Format -> ColumnMetadata

-- | The name of the column.
[$sel:name:ColumnMetadata'] :: ColumnMetadata -> Sensitive Text

-- | The format of the column.
[$sel:format:ColumnMetadata'] :: ColumnMetadata -> Format

-- | Create a value of <a>ColumnMetadata</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:name:ColumnMetadata'</a>, <a>columnMetadata_name</a> - The
--   name of the column.
--   
--   <a>$sel:format:ColumnMetadata'</a>, <a>columnMetadata_format</a> - The
--   format of the column.
newColumnMetadata :: Text -> Format -> ColumnMetadata

-- | The name of the column.
columnMetadata_name :: Lens' ColumnMetadata Text

-- | The format of the column.
columnMetadata_format :: Lens' ColumnMetadata Format
instance GHC.Generics.Generic Amazonka.HoneyCode.Types.ColumnMetadata.ColumnMetadata
instance GHC.Show.Show Amazonka.HoneyCode.Types.ColumnMetadata.ColumnMetadata
instance GHC.Classes.Eq Amazonka.HoneyCode.Types.ColumnMetadata.ColumnMetadata
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.HoneyCode.Types.ColumnMetadata.ColumnMetadata
instance Data.Hashable.Class.Hashable Amazonka.HoneyCode.Types.ColumnMetadata.ColumnMetadata
instance Control.DeepSeq.NFData Amazonka.HoneyCode.Types.ColumnMetadata.ColumnMetadata


module Amazonka.HoneyCode.Types.Cell

-- | An object that represents a single cell in a table.
--   
--   <i>See:</i> <a>newCell</a> smart constructor.
data Cell
Cell' :: Maybe Text -> Maybe Format -> Maybe (Sensitive Text) -> Maybe Text -> Cell

-- | The raw value of the data contained in the cell. The raw value depends
--   on the format of the data in the cell. However the attribute in the
--   API return value is always a string containing the raw value.
--   
--   Cells with format DATE, DATE_TIME or TIME have the raw value as a
--   floating point number where the whole number represents the number of
--   days since 1/1/1900 and the fractional part represents the fraction of
--   the day since midnight. For example, a cell with date 11/3/2020 has
--   the raw value "44138". A cell with the time 9:00 AM has the raw value
--   "0.375" and a cell with date/time value of 11/3/2020 9:00 AM has the
--   raw value "44138.375". Notice that even though the raw value is a
--   number in all three cases, it is still represented as a string.
--   
--   Cells with format NUMBER, CURRENCY, PERCENTAGE and ACCOUNTING have the
--   raw value of the data as the number representing the data being
--   displayed. For example, the number 1.325 with two decimal places in
--   the format will have it's raw value as "1.325" and formatted value as
--   "1.33". A currency value for $10 will have the raw value as "10" and
--   formatted value as "$10.00". A value representing 20% with two decimal
--   places in the format will have its raw value as "0.2" and the
--   formatted value as "20.00%". An accounting value of -$25 will have
--   "-25" as the raw value and "$ (25.00)" as the formatted value.
--   
--   Cells with format TEXT will have the raw text as the raw value. For
--   example, a cell with text "John Smith" will have "John Smith" as both
--   the raw value and the formatted value.
--   
--   Cells with format CONTACT will have the name of the contact as a
--   formatted value and the email address of the contact as the raw value.
--   For example, a contact for John Smith will have "John Smith" as the
--   formatted value and "john.smith@example.com" as the raw value.
--   
--   Cells with format ROWLINK (aka picklist) will have the first column of
--   the linked row as the formatted value and the row id of the linked row
--   as the raw value. For example, a cell containing a picklist to a table
--   that displays task status might have "Completed" as the formatted
--   value and
--   "row:dfcefaee-5b37-4355-8f28-40c3e4ff5dd4/ca432b2f-b8eb-431d-9fb5-cbe0342f9f03"
--   as the raw value.
--   
--   Cells with format AUTO or cells without any format that are
--   auto-detected as one of the formats above will contain the raw and
--   formatted values as mentioned above, based on the auto-detected
--   formats. If there is no auto-detected format, the raw and formatted
--   values will be the same as the data in the cell.
[$sel:rawValue:Cell'] :: Cell -> Maybe Text

-- | The format of the cell. If this field is empty, then the format is
--   either not specified in the workbook or the format is set to AUTO.
[$sel:format:Cell'] :: Cell -> Maybe Format

-- | The formula contained in the cell. This field is empty if a cell does
--   not have a formula.
[$sel:formula:Cell'] :: Cell -> Maybe (Sensitive Text)

-- | The formatted value of the cell. This is the value that you see
--   displayed in the cell in the UI.
--   
--   Note that the formatted value of a cell is always represented as a
--   string irrespective of the data that is stored in the cell. For
--   example, if a cell contains a date, the formatted value of the cell is
--   the string representation of the formatted date being shown in the
--   cell in the UI. See details in the rawValue field below for how cells
--   of different formats will have different raw and formatted values.
[$sel:formattedValue:Cell'] :: Cell -> Maybe Text

-- | Create a value of <a>Cell</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rawValue:Cell'</a>, <a>cell_rawValue</a> - The raw value of
--   the data contained in the cell. The raw value depends on the format of
--   the data in the cell. However the attribute in the API return value is
--   always a string containing the raw value.
--   
--   Cells with format DATE, DATE_TIME or TIME have the raw value as a
--   floating point number where the whole number represents the number of
--   days since 1/1/1900 and the fractional part represents the fraction of
--   the day since midnight. For example, a cell with date 11/3/2020 has
--   the raw value "44138". A cell with the time 9:00 AM has the raw value
--   "0.375" and a cell with date/time value of 11/3/2020 9:00 AM has the
--   raw value "44138.375". Notice that even though the raw value is a
--   number in all three cases, it is still represented as a string.
--   
--   Cells with format NUMBER, CURRENCY, PERCENTAGE and ACCOUNTING have the
--   raw value of the data as the number representing the data being
--   displayed. For example, the number 1.325 with two decimal places in
--   the format will have it's raw value as "1.325" and formatted value as
--   "1.33". A currency value for $10 will have the raw value as "10" and
--   formatted value as "$10.00". A value representing 20% with two decimal
--   places in the format will have its raw value as "0.2" and the
--   formatted value as "20.00%". An accounting value of -$25 will have
--   "-25" as the raw value and "$ (25.00)" as the formatted value.
--   
--   Cells with format TEXT will have the raw text as the raw value. For
--   example, a cell with text "John Smith" will have "John Smith" as both
--   the raw value and the formatted value.
--   
--   Cells with format CONTACT will have the name of the contact as a
--   formatted value and the email address of the contact as the raw value.
--   For example, a contact for John Smith will have "John Smith" as the
--   formatted value and "john.smith@example.com" as the raw value.
--   
--   Cells with format ROWLINK (aka picklist) will have the first column of
--   the linked row as the formatted value and the row id of the linked row
--   as the raw value. For example, a cell containing a picklist to a table
--   that displays task status might have "Completed" as the formatted
--   value and
--   "row:dfcefaee-5b37-4355-8f28-40c3e4ff5dd4/ca432b2f-b8eb-431d-9fb5-cbe0342f9f03"
--   as the raw value.
--   
--   Cells with format AUTO or cells without any format that are
--   auto-detected as one of the formats above will contain the raw and
--   formatted values as mentioned above, based on the auto-detected
--   formats. If there is no auto-detected format, the raw and formatted
--   values will be the same as the data in the cell.
--   
--   <a>$sel:format:Cell'</a>, <a>cell_format</a> - The format of the cell.
--   If this field is empty, then the format is either not specified in the
--   workbook or the format is set to AUTO.
--   
--   <a>$sel:formula:Cell'</a>, <a>cell_formula</a> - The formula contained
--   in the cell. This field is empty if a cell does not have a formula.
--   
--   <a>$sel:formattedValue:Cell'</a>, <a>cell_formattedValue</a> - The
--   formatted value of the cell. This is the value that you see displayed
--   in the cell in the UI.
--   
--   Note that the formatted value of a cell is always represented as a
--   string irrespective of the data that is stored in the cell. For
--   example, if a cell contains a date, the formatted value of the cell is
--   the string representation of the formatted date being shown in the
--   cell in the UI. See details in the rawValue field below for how cells
--   of different formats will have different raw and formatted values.
newCell :: Cell

-- | The raw value of the data contained in the cell. The raw value depends
--   on the format of the data in the cell. However the attribute in the
--   API return value is always a string containing the raw value.
--   
--   Cells with format DATE, DATE_TIME or TIME have the raw value as a
--   floating point number where the whole number represents the number of
--   days since 1/1/1900 and the fractional part represents the fraction of
--   the day since midnight. For example, a cell with date 11/3/2020 has
--   the raw value "44138". A cell with the time 9:00 AM has the raw value
--   "0.375" and a cell with date/time value of 11/3/2020 9:00 AM has the
--   raw value "44138.375". Notice that even though the raw value is a
--   number in all three cases, it is still represented as a string.
--   
--   Cells with format NUMBER, CURRENCY, PERCENTAGE and ACCOUNTING have the
--   raw value of the data as the number representing the data being
--   displayed. For example, the number 1.325 with two decimal places in
--   the format will have it's raw value as "1.325" and formatted value as
--   "1.33". A currency value for $10 will have the raw value as "10" and
--   formatted value as "$10.00". A value representing 20% with two decimal
--   places in the format will have its raw value as "0.2" and the
--   formatted value as "20.00%". An accounting value of -$25 will have
--   "-25" as the raw value and "$ (25.00)" as the formatted value.
--   
--   Cells with format TEXT will have the raw text as the raw value. For
--   example, a cell with text "John Smith" will have "John Smith" as both
--   the raw value and the formatted value.
--   
--   Cells with format CONTACT will have the name of the contact as a
--   formatted value and the email address of the contact as the raw value.
--   For example, a contact for John Smith will have "John Smith" as the
--   formatted value and "john.smith@example.com" as the raw value.
--   
--   Cells with format ROWLINK (aka picklist) will have the first column of
--   the linked row as the formatted value and the row id of the linked row
--   as the raw value. For example, a cell containing a picklist to a table
--   that displays task status might have "Completed" as the formatted
--   value and
--   "row:dfcefaee-5b37-4355-8f28-40c3e4ff5dd4/ca432b2f-b8eb-431d-9fb5-cbe0342f9f03"
--   as the raw value.
--   
--   Cells with format AUTO or cells without any format that are
--   auto-detected as one of the formats above will contain the raw and
--   formatted values as mentioned above, based on the auto-detected
--   formats. If there is no auto-detected format, the raw and formatted
--   values will be the same as the data in the cell.
cell_rawValue :: Lens' Cell (Maybe Text)

-- | The format of the cell. If this field is empty, then the format is
--   either not specified in the workbook or the format is set to AUTO.
cell_format :: Lens' Cell (Maybe Format)

-- | The formula contained in the cell. This field is empty if a cell does
--   not have a formula.
cell_formula :: Lens' Cell (Maybe Text)

-- | The formatted value of the cell. This is the value that you see
--   displayed in the cell in the UI.
--   
--   Note that the formatted value of a cell is always represented as a
--   string irrespective of the data that is stored in the cell. For
--   example, if a cell contains a date, the formatted value of the cell is
--   the string representation of the formatted date being shown in the
--   cell in the UI. See details in the rawValue field below for how cells
--   of different formats will have different raw and formatted values.
cell_formattedValue :: Lens' Cell (Maybe Text)
instance GHC.Generics.Generic Amazonka.HoneyCode.Types.Cell.Cell
instance GHC.Show.Show Amazonka.HoneyCode.Types.Cell.Cell
instance GHC.Classes.Eq Amazonka.HoneyCode.Types.Cell.Cell
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.HoneyCode.Types.Cell.Cell
instance Data.Hashable.Class.Hashable Amazonka.HoneyCode.Types.Cell.Cell
instance Control.DeepSeq.NFData Amazonka.HoneyCode.Types.Cell.Cell


module Amazonka.HoneyCode.Types.ImportDataCharacterEncoding
newtype ImportDataCharacterEncoding
ImportDataCharacterEncoding' :: Text -> ImportDataCharacterEncoding
[fromImportDataCharacterEncoding] :: ImportDataCharacterEncoding -> Text
pattern ImportDataCharacterEncoding_ISO_8859_1 :: ImportDataCharacterEncoding
pattern ImportDataCharacterEncoding_US_ASCII :: ImportDataCharacterEncoding
pattern ImportDataCharacterEncoding_UTF_16 :: ImportDataCharacterEncoding
pattern ImportDataCharacterEncoding_UTF_16BE :: ImportDataCharacterEncoding
pattern ImportDataCharacterEncoding_UTF_16LE :: ImportDataCharacterEncoding
pattern ImportDataCharacterEncoding_UTF_8 :: ImportDataCharacterEncoding
instance Amazonka.Data.XML.ToXML Amazonka.HoneyCode.Types.ImportDataCharacterEncoding.ImportDataCharacterEncoding
instance Amazonka.Data.XML.FromXML Amazonka.HoneyCode.Types.ImportDataCharacterEncoding.ImportDataCharacterEncoding
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.HoneyCode.Types.ImportDataCharacterEncoding.ImportDataCharacterEncoding
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.HoneyCode.Types.ImportDataCharacterEncoding.ImportDataCharacterEncoding
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.HoneyCode.Types.ImportDataCharacterEncoding.ImportDataCharacterEncoding
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.HoneyCode.Types.ImportDataCharacterEncoding.ImportDataCharacterEncoding
instance Amazonka.Data.Query.ToQuery Amazonka.HoneyCode.Types.ImportDataCharacterEncoding.ImportDataCharacterEncoding
instance Amazonka.Data.Headers.ToHeader Amazonka.HoneyCode.Types.ImportDataCharacterEncoding.ImportDataCharacterEncoding
instance Amazonka.Data.Log.ToLog Amazonka.HoneyCode.Types.ImportDataCharacterEncoding.ImportDataCharacterEncoding
instance Amazonka.Data.ByteString.ToByteString Amazonka.HoneyCode.Types.ImportDataCharacterEncoding.ImportDataCharacterEncoding
instance Amazonka.Data.Text.ToText Amazonka.HoneyCode.Types.ImportDataCharacterEncoding.ImportDataCharacterEncoding
instance Amazonka.Data.Text.FromText Amazonka.HoneyCode.Types.ImportDataCharacterEncoding.ImportDataCharacterEncoding
instance Control.DeepSeq.NFData Amazonka.HoneyCode.Types.ImportDataCharacterEncoding.ImportDataCharacterEncoding
instance Data.Hashable.Class.Hashable Amazonka.HoneyCode.Types.ImportDataCharacterEncoding.ImportDataCharacterEncoding
instance GHC.Generics.Generic Amazonka.HoneyCode.Types.ImportDataCharacterEncoding.ImportDataCharacterEncoding
instance GHC.Classes.Ord Amazonka.HoneyCode.Types.ImportDataCharacterEncoding.ImportDataCharacterEncoding
instance GHC.Classes.Eq Amazonka.HoneyCode.Types.ImportDataCharacterEncoding.ImportDataCharacterEncoding
instance GHC.Read.Read Amazonka.HoneyCode.Types.ImportDataCharacterEncoding.ImportDataCharacterEncoding
instance GHC.Show.Show Amazonka.HoneyCode.Types.ImportDataCharacterEncoding.ImportDataCharacterEncoding


module Amazonka.HoneyCode.Types.DelimitedTextImportOptions

-- | An object that contains the options relating to parsing delimited text
--   as part of an import request.
--   
--   <i>See:</i> <a>newDelimitedTextImportOptions</a> smart constructor.
data DelimitedTextImportOptions
DelimitedTextImportOptions' :: Maybe Bool -> Maybe Bool -> Maybe ImportDataCharacterEncoding -> Text -> DelimitedTextImportOptions

-- | A parameter to indicate whether empty rows should be ignored or be
--   included in the import.
[$sel:ignoreEmptyRows:DelimitedTextImportOptions'] :: DelimitedTextImportOptions -> Maybe Bool

-- | Indicates whether the input file has a header row at the top
--   containing the column names.
[$sel:hasHeaderRow:DelimitedTextImportOptions'] :: DelimitedTextImportOptions -> Maybe Bool

-- | The encoding of the data in the input file.
[$sel:dataCharacterEncoding:DelimitedTextImportOptions'] :: DelimitedTextImportOptions -> Maybe ImportDataCharacterEncoding

-- | The delimiter to use for separating columns in a single row of the
--   input.
[$sel:delimiter:DelimitedTextImportOptions'] :: DelimitedTextImportOptions -> Text

-- | Create a value of <a>DelimitedTextImportOptions</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:ignoreEmptyRows:DelimitedTextImportOptions'</a>,
--   <a>delimitedTextImportOptions_ignoreEmptyRows</a> - A parameter to
--   indicate whether empty rows should be ignored or be included in the
--   import.
--   
--   <a>$sel:hasHeaderRow:DelimitedTextImportOptions'</a>,
--   <a>delimitedTextImportOptions_hasHeaderRow</a> - Indicates whether the
--   input file has a header row at the top containing the column names.
--   
--   <a>$sel:dataCharacterEncoding:DelimitedTextImportOptions'</a>,
--   <a>delimitedTextImportOptions_dataCharacterEncoding</a> - The encoding
--   of the data in the input file.
--   
--   <a>$sel:delimiter:DelimitedTextImportOptions'</a>,
--   <a>delimitedTextImportOptions_delimiter</a> - The delimiter to use for
--   separating columns in a single row of the input.
newDelimitedTextImportOptions :: Text -> DelimitedTextImportOptions

-- | A parameter to indicate whether empty rows should be ignored or be
--   included in the import.
delimitedTextImportOptions_ignoreEmptyRows :: Lens' DelimitedTextImportOptions (Maybe Bool)

-- | Indicates whether the input file has a header row at the top
--   containing the column names.
delimitedTextImportOptions_hasHeaderRow :: Lens' DelimitedTextImportOptions (Maybe Bool)

-- | The encoding of the data in the input file.
delimitedTextImportOptions_dataCharacterEncoding :: Lens' DelimitedTextImportOptions (Maybe ImportDataCharacterEncoding)

-- | The delimiter to use for separating columns in a single row of the
--   input.
delimitedTextImportOptions_delimiter :: Lens' DelimitedTextImportOptions Text
instance GHC.Generics.Generic Amazonka.HoneyCode.Types.DelimitedTextImportOptions.DelimitedTextImportOptions
instance GHC.Show.Show Amazonka.HoneyCode.Types.DelimitedTextImportOptions.DelimitedTextImportOptions
instance GHC.Read.Read Amazonka.HoneyCode.Types.DelimitedTextImportOptions.DelimitedTextImportOptions
instance GHC.Classes.Eq Amazonka.HoneyCode.Types.DelimitedTextImportOptions.DelimitedTextImportOptions
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.HoneyCode.Types.DelimitedTextImportOptions.DelimitedTextImportOptions
instance Data.Hashable.Class.Hashable Amazonka.HoneyCode.Types.DelimitedTextImportOptions.DelimitedTextImportOptions
instance Control.DeepSeq.NFData Amazonka.HoneyCode.Types.DelimitedTextImportOptions.DelimitedTextImportOptions
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.HoneyCode.Types.DelimitedTextImportOptions.DelimitedTextImportOptions


module Amazonka.HoneyCode.Types.ImportDataSourceConfig

-- | An object that contains the configuration parameters for the data
--   source of an import request.
--   
--   <i>See:</i> <a>newImportDataSourceConfig</a> smart constructor.
data ImportDataSourceConfig
ImportDataSourceConfig' :: Maybe Text -> ImportDataSourceConfig

-- | The URL from which source data will be downloaded for the import
--   request.
[$sel:dataSourceUrl:ImportDataSourceConfig'] :: ImportDataSourceConfig -> Maybe Text

-- | Create a value of <a>ImportDataSourceConfig</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dataSourceUrl:ImportDataSourceConfig'</a>,
--   <a>importDataSourceConfig_dataSourceUrl</a> - The URL from which
--   source data will be downloaded for the import request.
newImportDataSourceConfig :: ImportDataSourceConfig

-- | The URL from which source data will be downloaded for the import
--   request.
importDataSourceConfig_dataSourceUrl :: Lens' ImportDataSourceConfig (Maybe Text)
instance GHC.Generics.Generic Amazonka.HoneyCode.Types.ImportDataSourceConfig.ImportDataSourceConfig
instance GHC.Show.Show Amazonka.HoneyCode.Types.ImportDataSourceConfig.ImportDataSourceConfig
instance GHC.Read.Read Amazonka.HoneyCode.Types.ImportDataSourceConfig.ImportDataSourceConfig
instance GHC.Classes.Eq Amazonka.HoneyCode.Types.ImportDataSourceConfig.ImportDataSourceConfig
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.HoneyCode.Types.ImportDataSourceConfig.ImportDataSourceConfig
instance Data.Hashable.Class.Hashable Amazonka.HoneyCode.Types.ImportDataSourceConfig.ImportDataSourceConfig
instance Control.DeepSeq.NFData Amazonka.HoneyCode.Types.ImportDataSourceConfig.ImportDataSourceConfig
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.HoneyCode.Types.ImportDataSourceConfig.ImportDataSourceConfig


module Amazonka.HoneyCode.Types.ImportDataSource

-- | An object that has details about the source of the data that was
--   submitted for import.
--   
--   <i>See:</i> <a>newImportDataSource</a> smart constructor.
data ImportDataSource
ImportDataSource' :: ImportDataSourceConfig -> ImportDataSource

-- | The configuration parameters for the data source of the import
[$sel:dataSourceConfig:ImportDataSource'] :: ImportDataSource -> ImportDataSourceConfig

-- | Create a value of <a>ImportDataSource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dataSourceConfig:ImportDataSource'</a>,
--   <a>importDataSource_dataSourceConfig</a> - The configuration
--   parameters for the data source of the import
newImportDataSource :: ImportDataSourceConfig -> ImportDataSource

-- | The configuration parameters for the data source of the import
importDataSource_dataSourceConfig :: Lens' ImportDataSource ImportDataSourceConfig
instance GHC.Generics.Generic Amazonka.HoneyCode.Types.ImportDataSource.ImportDataSource
instance GHC.Show.Show Amazonka.HoneyCode.Types.ImportDataSource.ImportDataSource
instance GHC.Read.Read Amazonka.HoneyCode.Types.ImportDataSource.ImportDataSource
instance GHC.Classes.Eq Amazonka.HoneyCode.Types.ImportDataSource.ImportDataSource
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.HoneyCode.Types.ImportDataSource.ImportDataSource
instance Data.Hashable.Class.Hashable Amazonka.HoneyCode.Types.ImportDataSource.ImportDataSource
instance Control.DeepSeq.NFData Amazonka.HoneyCode.Types.ImportDataSource.ImportDataSource
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.HoneyCode.Types.ImportDataSource.ImportDataSource


module Amazonka.HoneyCode.Types.ImportJobSubmitter

-- | An object that contains the attributes of the submitter of the import
--   job.
--   
--   <i>See:</i> <a>newImportJobSubmitter</a> smart constructor.
data ImportJobSubmitter
ImportJobSubmitter' :: Maybe (Sensitive Text) -> Maybe Text -> ImportJobSubmitter

-- | The email id of the submitter of the import job, if available.
[$sel:email:ImportJobSubmitter'] :: ImportJobSubmitter -> Maybe (Sensitive Text)

-- | The AWS user ARN of the submitter of the import job, if available.
[$sel:userArn:ImportJobSubmitter'] :: ImportJobSubmitter -> Maybe Text

-- | Create a value of <a>ImportJobSubmitter</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:email:ImportJobSubmitter'</a>, <a>importJobSubmitter_email</a>
--   - The email id of the submitter of the import job, if available.
--   
--   <a>$sel:userArn:ImportJobSubmitter'</a>,
--   <a>importJobSubmitter_userArn</a> - The AWS user ARN of the submitter
--   of the import job, if available.
newImportJobSubmitter :: ImportJobSubmitter

-- | The email id of the submitter of the import job, if available.
importJobSubmitter_email :: Lens' ImportJobSubmitter (Maybe Text)

-- | The AWS user ARN of the submitter of the import job, if available.
importJobSubmitter_userArn :: Lens' ImportJobSubmitter (Maybe Text)
instance GHC.Generics.Generic Amazonka.HoneyCode.Types.ImportJobSubmitter.ImportJobSubmitter
instance GHC.Show.Show Amazonka.HoneyCode.Types.ImportJobSubmitter.ImportJobSubmitter
instance GHC.Classes.Eq Amazonka.HoneyCode.Types.ImportJobSubmitter.ImportJobSubmitter
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.HoneyCode.Types.ImportJobSubmitter.ImportJobSubmitter
instance Data.Hashable.Class.Hashable Amazonka.HoneyCode.Types.ImportJobSubmitter.ImportJobSubmitter
instance Control.DeepSeq.NFData Amazonka.HoneyCode.Types.ImportJobSubmitter.ImportJobSubmitter


module Amazonka.HoneyCode.Types.ImportSourceDataFormat
newtype ImportSourceDataFormat
ImportSourceDataFormat' :: Text -> ImportSourceDataFormat
[fromImportSourceDataFormat] :: ImportSourceDataFormat -> Text
pattern ImportSourceDataFormat_DELIMITED_TEXT :: ImportSourceDataFormat
instance Amazonka.Data.XML.ToXML Amazonka.HoneyCode.Types.ImportSourceDataFormat.ImportSourceDataFormat
instance Amazonka.Data.XML.FromXML Amazonka.HoneyCode.Types.ImportSourceDataFormat.ImportSourceDataFormat
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.HoneyCode.Types.ImportSourceDataFormat.ImportSourceDataFormat
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.HoneyCode.Types.ImportSourceDataFormat.ImportSourceDataFormat
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.HoneyCode.Types.ImportSourceDataFormat.ImportSourceDataFormat
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.HoneyCode.Types.ImportSourceDataFormat.ImportSourceDataFormat
instance Amazonka.Data.Query.ToQuery Amazonka.HoneyCode.Types.ImportSourceDataFormat.ImportSourceDataFormat
instance Amazonka.Data.Headers.ToHeader Amazonka.HoneyCode.Types.ImportSourceDataFormat.ImportSourceDataFormat
instance Amazonka.Data.Log.ToLog Amazonka.HoneyCode.Types.ImportSourceDataFormat.ImportSourceDataFormat
instance Amazonka.Data.ByteString.ToByteString Amazonka.HoneyCode.Types.ImportSourceDataFormat.ImportSourceDataFormat
instance Amazonka.Data.Text.ToText Amazonka.HoneyCode.Types.ImportSourceDataFormat.ImportSourceDataFormat
instance Amazonka.Data.Text.FromText Amazonka.HoneyCode.Types.ImportSourceDataFormat.ImportSourceDataFormat
instance Control.DeepSeq.NFData Amazonka.HoneyCode.Types.ImportSourceDataFormat.ImportSourceDataFormat
instance Data.Hashable.Class.Hashable Amazonka.HoneyCode.Types.ImportSourceDataFormat.ImportSourceDataFormat
instance GHC.Generics.Generic Amazonka.HoneyCode.Types.ImportSourceDataFormat.ImportSourceDataFormat
instance GHC.Classes.Ord Amazonka.HoneyCode.Types.ImportSourceDataFormat.ImportSourceDataFormat
instance GHC.Classes.Eq Amazonka.HoneyCode.Types.ImportSourceDataFormat.ImportSourceDataFormat
instance GHC.Read.Read Amazonka.HoneyCode.Types.ImportSourceDataFormat.ImportSourceDataFormat
instance GHC.Show.Show Amazonka.HoneyCode.Types.ImportSourceDataFormat.ImportSourceDataFormat


module Amazonka.HoneyCode.Types.ResultRow

-- | A single row in the ResultSet.
--   
--   <i>See:</i> <a>newResultRow</a> smart constructor.
data ResultRow
ResultRow' :: Maybe Text -> [Sensitive DataItem] -> ResultRow

-- | The ID for a particular row.
[$sel:rowId:ResultRow'] :: ResultRow -> Maybe Text

-- | List of all the data cells in a row.
[$sel:dataItems:ResultRow'] :: ResultRow -> [Sensitive DataItem]

-- | Create a value of <a>ResultRow</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rowId:ResultRow'</a>, <a>resultRow_rowId</a> - The ID for a
--   particular row.
--   
--   <a>$sel:dataItems:ResultRow'</a>, <a>resultRow_dataItems</a> - List of
--   all the data cells in a row.
newResultRow :: ResultRow

-- | The ID for a particular row.
resultRow_rowId :: Lens' ResultRow (Maybe Text)

-- | List of all the data cells in a row.
resultRow_dataItems :: Lens' ResultRow [DataItem]
instance GHC.Generics.Generic Amazonka.HoneyCode.Types.ResultRow.ResultRow
instance GHC.Show.Show Amazonka.HoneyCode.Types.ResultRow.ResultRow
instance GHC.Classes.Eq Amazonka.HoneyCode.Types.ResultRow.ResultRow
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.HoneyCode.Types.ResultRow.ResultRow
instance Data.Hashable.Class.Hashable Amazonka.HoneyCode.Types.ResultRow.ResultRow
instance Control.DeepSeq.NFData Amazonka.HoneyCode.Types.ResultRow.ResultRow


module Amazonka.HoneyCode.Types.ResultSet

-- | ResultSet contains the results of the request for a single block or
--   list defined on the screen.
--   
--   <i>See:</i> <a>newResultSet</a> smart constructor.
data ResultSet
ResultSet' :: [ColumnMetadata] -> [ResultRow] -> ResultSet

-- | List of headers for all the data cells in the block. The header
--   identifies the name and default format of the data cell. Data cells
--   appear in the same order in all rows as defined in the header. The
--   names and formats are not repeated in the rows. If a particular row
--   does not have a value for a data cell, a blank value is used.
--   
--   For example, a task list that displays the task name, due date and
--   assigned person might have headers [ { "name": "Task Name"}, {"name":
--   "Due Date", "format": "DATE"}, {"name": "Assigned", "format":
--   "CONTACT"} ]. Every row in the result will have the task name as the
--   first item, due date as the second item and assigned person as the
--   third item. If a particular task does not have a due date, that row
--   will still have a blank value in the second element and the assigned
--   person will still be in the third element.
[$sel:headers:ResultSet'] :: ResultSet -> [ColumnMetadata]

-- | List of rows returned by the request. Each row has a row Id and a list
--   of data cells in that row. The data cells will be present in the same
--   order as they are defined in the header.
[$sel:rows:ResultSet'] :: ResultSet -> [ResultRow]

-- | Create a value of <a>ResultSet</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:headers:ResultSet'</a>, <a>resultSet_headers</a> - List of
--   headers for all the data cells in the block. The header identifies the
--   name and default format of the data cell. Data cells appear in the
--   same order in all rows as defined in the header. The names and formats
--   are not repeated in the rows. If a particular row does not have a
--   value for a data cell, a blank value is used.
--   
--   For example, a task list that displays the task name, due date and
--   assigned person might have headers [ { "name": "Task Name"}, {"name":
--   "Due Date", "format": "DATE"}, {"name": "Assigned", "format":
--   "CONTACT"} ]. Every row in the result will have the task name as the
--   first item, due date as the second item and assigned person as the
--   third item. If a particular task does not have a due date, that row
--   will still have a blank value in the second element and the assigned
--   person will still be in the third element.
--   
--   <a>$sel:rows:ResultSet'</a>, <a>resultSet_rows</a> - List of rows
--   returned by the request. Each row has a row Id and a list of data
--   cells in that row. The data cells will be present in the same order as
--   they are defined in the header.
newResultSet :: ResultSet

-- | List of headers for all the data cells in the block. The header
--   identifies the name and default format of the data cell. Data cells
--   appear in the same order in all rows as defined in the header. The
--   names and formats are not repeated in the rows. If a particular row
--   does not have a value for a data cell, a blank value is used.
--   
--   For example, a task list that displays the task name, due date and
--   assigned person might have headers [ { "name": "Task Name"}, {"name":
--   "Due Date", "format": "DATE"}, {"name": "Assigned", "format":
--   "CONTACT"} ]. Every row in the result will have the task name as the
--   first item, due date as the second item and assigned person as the
--   third item. If a particular task does not have a due date, that row
--   will still have a blank value in the second element and the assigned
--   person will still be in the third element.
resultSet_headers :: Lens' ResultSet [ColumnMetadata]

-- | List of rows returned by the request. Each row has a row Id and a list
--   of data cells in that row. The data cells will be present in the same
--   order as they are defined in the header.
resultSet_rows :: Lens' ResultSet [ResultRow]
instance GHC.Generics.Generic Amazonka.HoneyCode.Types.ResultSet.ResultSet
instance GHC.Show.Show Amazonka.HoneyCode.Types.ResultSet.ResultSet
instance GHC.Classes.Eq Amazonka.HoneyCode.Types.ResultSet.ResultSet
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.HoneyCode.Types.ResultSet.ResultSet
instance Data.Hashable.Class.Hashable Amazonka.HoneyCode.Types.ResultSet.ResultSet
instance Control.DeepSeq.NFData Amazonka.HoneyCode.Types.ResultSet.ResultSet


module Amazonka.HoneyCode.Types.SourceDataColumnProperties

-- | An object that contains the properties for importing data to a
--   specific column in a table.
--   
--   <i>See:</i> <a>newSourceDataColumnProperties</a> smart constructor.
data SourceDataColumnProperties
SourceDataColumnProperties' :: Maybe Natural -> SourceDataColumnProperties

-- | The index of the column in the input file.
[$sel:columnIndex:SourceDataColumnProperties'] :: SourceDataColumnProperties -> Maybe Natural

-- | Create a value of <a>SourceDataColumnProperties</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:columnIndex:SourceDataColumnProperties'</a>,
--   <a>sourceDataColumnProperties_columnIndex</a> - The index of the
--   column in the input file.
newSourceDataColumnProperties :: SourceDataColumnProperties

-- | The index of the column in the input file.
sourceDataColumnProperties_columnIndex :: Lens' SourceDataColumnProperties (Maybe Natural)
instance GHC.Generics.Generic Amazonka.HoneyCode.Types.SourceDataColumnProperties.SourceDataColumnProperties
instance GHC.Show.Show Amazonka.HoneyCode.Types.SourceDataColumnProperties.SourceDataColumnProperties
instance GHC.Read.Read Amazonka.HoneyCode.Types.SourceDataColumnProperties.SourceDataColumnProperties
instance GHC.Classes.Eq Amazonka.HoneyCode.Types.SourceDataColumnProperties.SourceDataColumnProperties
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.HoneyCode.Types.SourceDataColumnProperties.SourceDataColumnProperties
instance Data.Hashable.Class.Hashable Amazonka.HoneyCode.Types.SourceDataColumnProperties.SourceDataColumnProperties
instance Control.DeepSeq.NFData Amazonka.HoneyCode.Types.SourceDataColumnProperties.SourceDataColumnProperties
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.HoneyCode.Types.SourceDataColumnProperties.SourceDataColumnProperties


module Amazonka.HoneyCode.Types.DestinationOptions

-- | An object that contains the options relating to the destination of the
--   import request.
--   
--   <i>See:</i> <a>newDestinationOptions</a> smart constructor.
data DestinationOptions
DestinationOptions' :: Maybe (HashMap Text SourceDataColumnProperties) -> DestinationOptions

-- | A map of the column id to the import properties for each column.
[$sel:columnMap:DestinationOptions'] :: DestinationOptions -> Maybe (HashMap Text SourceDataColumnProperties)

-- | Create a value of <a>DestinationOptions</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:columnMap:DestinationOptions'</a>,
--   <a>destinationOptions_columnMap</a> - A map of the column id to the
--   import properties for each column.
newDestinationOptions :: DestinationOptions

-- | A map of the column id to the import properties for each column.
destinationOptions_columnMap :: Lens' DestinationOptions (Maybe (HashMap Text SourceDataColumnProperties))
instance GHC.Generics.Generic Amazonka.HoneyCode.Types.DestinationOptions.DestinationOptions
instance GHC.Show.Show Amazonka.HoneyCode.Types.DestinationOptions.DestinationOptions
instance GHC.Read.Read Amazonka.HoneyCode.Types.DestinationOptions.DestinationOptions
instance GHC.Classes.Eq Amazonka.HoneyCode.Types.DestinationOptions.DestinationOptions
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.HoneyCode.Types.DestinationOptions.DestinationOptions
instance Data.Hashable.Class.Hashable Amazonka.HoneyCode.Types.DestinationOptions.DestinationOptions
instance Control.DeepSeq.NFData Amazonka.HoneyCode.Types.DestinationOptions.DestinationOptions
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.HoneyCode.Types.DestinationOptions.DestinationOptions


module Amazonka.HoneyCode.Types.ImportOptions

-- | An object that contains the options specified by the sumitter of the
--   import request.
--   
--   <i>See:</i> <a>newImportOptions</a> smart constructor.
data ImportOptions
ImportOptions' :: Maybe DelimitedTextImportOptions -> Maybe DestinationOptions -> ImportOptions

-- | Options relating to parsing delimited text. Required if dataFormat is
--   DELIMITED_TEXT.
[$sel:delimitedTextOptions:ImportOptions'] :: ImportOptions -> Maybe DelimitedTextImportOptions

-- | Options relating to the destination of the import request.
[$sel:destinationOptions:ImportOptions'] :: ImportOptions -> Maybe DestinationOptions

-- | Create a value of <a>ImportOptions</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:delimitedTextOptions:ImportOptions'</a>,
--   <a>importOptions_delimitedTextOptions</a> - Options relating to
--   parsing delimited text. Required if dataFormat is DELIMITED_TEXT.
--   
--   <a>$sel:destinationOptions:ImportOptions'</a>,
--   <a>importOptions_destinationOptions</a> - Options relating to the
--   destination of the import request.
newImportOptions :: ImportOptions

-- | Options relating to parsing delimited text. Required if dataFormat is
--   DELIMITED_TEXT.
importOptions_delimitedTextOptions :: Lens' ImportOptions (Maybe DelimitedTextImportOptions)

-- | Options relating to the destination of the import request.
importOptions_destinationOptions :: Lens' ImportOptions (Maybe DestinationOptions)
instance GHC.Generics.Generic Amazonka.HoneyCode.Types.ImportOptions.ImportOptions
instance GHC.Show.Show Amazonka.HoneyCode.Types.ImportOptions.ImportOptions
instance GHC.Read.Read Amazonka.HoneyCode.Types.ImportOptions.ImportOptions
instance GHC.Classes.Eq Amazonka.HoneyCode.Types.ImportOptions.ImportOptions
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.HoneyCode.Types.ImportOptions.ImportOptions
instance Data.Hashable.Class.Hashable Amazonka.HoneyCode.Types.ImportOptions.ImportOptions
instance Control.DeepSeq.NFData Amazonka.HoneyCode.Types.ImportOptions.ImportOptions
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.HoneyCode.Types.ImportOptions.ImportOptions


module Amazonka.HoneyCode.Types.Table

-- | An object representing the properties of a table in a workbook.
--   
--   <i>See:</i> <a>newTable</a> smart constructor.
data Table
Table' :: Maybe Text -> Maybe Text -> Table

-- | The id of the table.
[$sel:tableId:Table'] :: Table -> Maybe Text

-- | The name of the table.
[$sel:tableName:Table'] :: Table -> Maybe Text

-- | Create a value of <a>Table</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableId:Table'</a>, <a>table_tableId</a> - The id of the
--   table.
--   
--   <a>$sel:tableName:Table'</a>, <a>table_tableName</a> - The name of the
--   table.
newTable :: Table

-- | The id of the table.
table_tableId :: Lens' Table (Maybe Text)

-- | The name of the table.
table_tableName :: Lens' Table (Maybe Text)
instance GHC.Generics.Generic Amazonka.HoneyCode.Types.Table.Table
instance GHC.Show.Show Amazonka.HoneyCode.Types.Table.Table
instance GHC.Read.Read Amazonka.HoneyCode.Types.Table.Table
instance GHC.Classes.Eq Amazonka.HoneyCode.Types.Table.Table
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.HoneyCode.Types.Table.Table
instance Data.Hashable.Class.Hashable Amazonka.HoneyCode.Types.Table.Table
instance Control.DeepSeq.NFData Amazonka.HoneyCode.Types.Table.Table


module Amazonka.HoneyCode.Types.TableColumn

-- | An object that contains attributes about a single column in a table
--   
--   <i>See:</i> <a>newTableColumn</a> smart constructor.
data TableColumn
TableColumn' :: Maybe Format -> Maybe Text -> Maybe Text -> TableColumn

-- | The column level format that is applied in the table. An empty value
--   in this field means that the column format is the default value
--   'AUTO'.
[$sel:format:TableColumn'] :: TableColumn -> Maybe Format

-- | The name of the column in the table.
[$sel:tableColumnName:TableColumn'] :: TableColumn -> Maybe Text

-- | The id of the column in the table.
[$sel:tableColumnId:TableColumn'] :: TableColumn -> Maybe Text

-- | Create a value of <a>TableColumn</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:format:TableColumn'</a>, <a>tableColumn_format</a> - The
--   column level format that is applied in the table. An empty value in
--   this field means that the column format is the default value 'AUTO'.
--   
--   <a>$sel:tableColumnName:TableColumn'</a>,
--   <a>tableColumn_tableColumnName</a> - The name of the column in the
--   table.
--   
--   <a>$sel:tableColumnId:TableColumn'</a>,
--   <a>tableColumn_tableColumnId</a> - The id of the column in the table.
newTableColumn :: TableColumn

-- | The column level format that is applied in the table. An empty value
--   in this field means that the column format is the default value
--   'AUTO'.
tableColumn_format :: Lens' TableColumn (Maybe Format)

-- | The name of the column in the table.
tableColumn_tableColumnName :: Lens' TableColumn (Maybe Text)

-- | The id of the column in the table.
tableColumn_tableColumnId :: Lens' TableColumn (Maybe Text)
instance GHC.Generics.Generic Amazonka.HoneyCode.Types.TableColumn.TableColumn
instance GHC.Show.Show Amazonka.HoneyCode.Types.TableColumn.TableColumn
instance GHC.Read.Read Amazonka.HoneyCode.Types.TableColumn.TableColumn
instance GHC.Classes.Eq Amazonka.HoneyCode.Types.TableColumn.TableColumn
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.HoneyCode.Types.TableColumn.TableColumn
instance Data.Hashable.Class.Hashable Amazonka.HoneyCode.Types.TableColumn.TableColumn
instance Control.DeepSeq.NFData Amazonka.HoneyCode.Types.TableColumn.TableColumn


module Amazonka.HoneyCode.Types.TableDataImportJobMetadata

-- | The metadata associated with the table data import job that was
--   submitted.
--   
--   <i>See:</i> <a>newTableDataImportJobMetadata</a> smart constructor.
data TableDataImportJobMetadata
TableDataImportJobMetadata' :: ImportJobSubmitter -> POSIX -> ImportOptions -> ImportDataSource -> TableDataImportJobMetadata

-- | Details about the submitter of the import request.
[$sel:submitter:TableDataImportJobMetadata'] :: TableDataImportJobMetadata -> ImportJobSubmitter

-- | The timestamp when the job was submitted for import.
[$sel:submitTime:TableDataImportJobMetadata'] :: TableDataImportJobMetadata -> POSIX

-- | The options that was specified at the time of submitting the import
--   request.
[$sel:importOptions:TableDataImportJobMetadata'] :: TableDataImportJobMetadata -> ImportOptions

-- | The source of the data that was submitted for import.
[$sel:dataSource:TableDataImportJobMetadata'] :: TableDataImportJobMetadata -> ImportDataSource

-- | Create a value of <a>TableDataImportJobMetadata</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:submitter:TableDataImportJobMetadata'</a>,
--   <a>tableDataImportJobMetadata_submitter</a> - Details about the
--   submitter of the import request.
--   
--   <a>$sel:submitTime:TableDataImportJobMetadata'</a>,
--   <a>tableDataImportJobMetadata_submitTime</a> - The timestamp when the
--   job was submitted for import.
--   
--   <a>$sel:importOptions:TableDataImportJobMetadata'</a>,
--   <a>tableDataImportJobMetadata_importOptions</a> - The options that was
--   specified at the time of submitting the import request.
--   
--   <a>$sel:dataSource:TableDataImportJobMetadata'</a>,
--   <a>tableDataImportJobMetadata_dataSource</a> - The source of the data
--   that was submitted for import.
newTableDataImportJobMetadata :: ImportJobSubmitter -> UTCTime -> ImportOptions -> ImportDataSource -> TableDataImportJobMetadata

-- | Details about the submitter of the import request.
tableDataImportJobMetadata_submitter :: Lens' TableDataImportJobMetadata ImportJobSubmitter

-- | The timestamp when the job was submitted for import.
tableDataImportJobMetadata_submitTime :: Lens' TableDataImportJobMetadata UTCTime

-- | The options that was specified at the time of submitting the import
--   request.
tableDataImportJobMetadata_importOptions :: Lens' TableDataImportJobMetadata ImportOptions

-- | The source of the data that was submitted for import.
tableDataImportJobMetadata_dataSource :: Lens' TableDataImportJobMetadata ImportDataSource
instance GHC.Generics.Generic Amazonka.HoneyCode.Types.TableDataImportJobMetadata.TableDataImportJobMetadata
instance GHC.Show.Show Amazonka.HoneyCode.Types.TableDataImportJobMetadata.TableDataImportJobMetadata
instance GHC.Classes.Eq Amazonka.HoneyCode.Types.TableDataImportJobMetadata.TableDataImportJobMetadata
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.HoneyCode.Types.TableDataImportJobMetadata.TableDataImportJobMetadata
instance Data.Hashable.Class.Hashable Amazonka.HoneyCode.Types.TableDataImportJobMetadata.TableDataImportJobMetadata
instance Control.DeepSeq.NFData Amazonka.HoneyCode.Types.TableDataImportJobMetadata.TableDataImportJobMetadata


module Amazonka.HoneyCode.Types.TableDataImportJobStatus
newtype TableDataImportJobStatus
TableDataImportJobStatus' :: Text -> TableDataImportJobStatus
[fromTableDataImportJobStatus] :: TableDataImportJobStatus -> Text
pattern TableDataImportJobStatus_COMPLETED :: TableDataImportJobStatus
pattern TableDataImportJobStatus_FAILED :: TableDataImportJobStatus
pattern TableDataImportJobStatus_IN_PROGRESS :: TableDataImportJobStatus
pattern TableDataImportJobStatus_SUBMITTED :: TableDataImportJobStatus
instance Amazonka.Data.XML.ToXML Amazonka.HoneyCode.Types.TableDataImportJobStatus.TableDataImportJobStatus
instance Amazonka.Data.XML.FromXML Amazonka.HoneyCode.Types.TableDataImportJobStatus.TableDataImportJobStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.HoneyCode.Types.TableDataImportJobStatus.TableDataImportJobStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.HoneyCode.Types.TableDataImportJobStatus.TableDataImportJobStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.HoneyCode.Types.TableDataImportJobStatus.TableDataImportJobStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.HoneyCode.Types.TableDataImportJobStatus.TableDataImportJobStatus
instance Amazonka.Data.Query.ToQuery Amazonka.HoneyCode.Types.TableDataImportJobStatus.TableDataImportJobStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.HoneyCode.Types.TableDataImportJobStatus.TableDataImportJobStatus
instance Amazonka.Data.Log.ToLog Amazonka.HoneyCode.Types.TableDataImportJobStatus.TableDataImportJobStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.HoneyCode.Types.TableDataImportJobStatus.TableDataImportJobStatus
instance Amazonka.Data.Text.ToText Amazonka.HoneyCode.Types.TableDataImportJobStatus.TableDataImportJobStatus
instance Amazonka.Data.Text.FromText Amazonka.HoneyCode.Types.TableDataImportJobStatus.TableDataImportJobStatus
instance Control.DeepSeq.NFData Amazonka.HoneyCode.Types.TableDataImportJobStatus.TableDataImportJobStatus
instance Data.Hashable.Class.Hashable Amazonka.HoneyCode.Types.TableDataImportJobStatus.TableDataImportJobStatus
instance GHC.Generics.Generic Amazonka.HoneyCode.Types.TableDataImportJobStatus.TableDataImportJobStatus
instance GHC.Classes.Ord Amazonka.HoneyCode.Types.TableDataImportJobStatus.TableDataImportJobStatus
instance GHC.Classes.Eq Amazonka.HoneyCode.Types.TableDataImportJobStatus.TableDataImportJobStatus
instance GHC.Read.Read Amazonka.HoneyCode.Types.TableDataImportJobStatus.TableDataImportJobStatus
instance GHC.Show.Show Amazonka.HoneyCode.Types.TableDataImportJobStatus.TableDataImportJobStatus


module Amazonka.HoneyCode.Types.TableRow

-- | An object that contains attributes about a single row in a table
--   
--   <i>See:</i> <a>newTableRow</a> smart constructor.
data TableRow
TableRow' :: Text -> [Sensitive Cell] -> TableRow

-- | The id of the row in the table.
[$sel:rowId:TableRow'] :: TableRow -> Text

-- | A list of cells in the table row. The cells appear in the same order
--   as the columns of the table.
[$sel:cells:TableRow'] :: TableRow -> [Sensitive Cell]

-- | Create a value of <a>TableRow</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rowId:TableRow'</a>, <a>tableRow_rowId</a> - The id of the row
--   in the table.
--   
--   <a>$sel:cells:TableRow'</a>, <a>tableRow_cells</a> - A list of cells
--   in the table row. The cells appear in the same order as the columns of
--   the table.
newTableRow :: Text -> TableRow

-- | The id of the row in the table.
tableRow_rowId :: Lens' TableRow Text

-- | A list of cells in the table row. The cells appear in the same order
--   as the columns of the table.
tableRow_cells :: Lens' TableRow [Cell]
instance GHC.Generics.Generic Amazonka.HoneyCode.Types.TableRow.TableRow
instance GHC.Show.Show Amazonka.HoneyCode.Types.TableRow.TableRow
instance GHC.Classes.Eq Amazonka.HoneyCode.Types.TableRow.TableRow
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.HoneyCode.Types.TableRow.TableRow
instance Data.Hashable.Class.Hashable Amazonka.HoneyCode.Types.TableRow.TableRow
instance Control.DeepSeq.NFData Amazonka.HoneyCode.Types.TableRow.TableRow


module Amazonka.HoneyCode.Types.UpdateRowData

-- | Data needed to create a single row in a table as part of the
--   BatchCreateTableRows request.
--   
--   <i>See:</i> <a>newUpdateRowData</a> smart constructor.
data UpdateRowData
UpdateRowData' :: Text -> HashMap Text CellInput -> UpdateRowData

-- | The id of the row that needs to be updated.
[$sel:rowId:UpdateRowData'] :: UpdateRowData -> Text

-- | A map representing the cells to update in the given row. The key is
--   the column id of the cell and the value is the CellInput object that
--   represents the data to set in that cell.
[$sel:cellsToUpdate:UpdateRowData'] :: UpdateRowData -> HashMap Text CellInput

-- | Create a value of <a>UpdateRowData</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rowId:UpdateRowData'</a>, <a>updateRowData_rowId</a> - The id
--   of the row that needs to be updated.
--   
--   <a>$sel:cellsToUpdate:UpdateRowData'</a>,
--   <a>updateRowData_cellsToUpdate</a> - A map representing the cells to
--   update in the given row. The key is the column id of the cell and the
--   value is the CellInput object that represents the data to set in that
--   cell.
newUpdateRowData :: Text -> UpdateRowData

-- | The id of the row that needs to be updated.
updateRowData_rowId :: Lens' UpdateRowData Text

-- | A map representing the cells to update in the given row. The key is
--   the column id of the cell and the value is the CellInput object that
--   represents the data to set in that cell.
updateRowData_cellsToUpdate :: Lens' UpdateRowData (HashMap Text CellInput)
instance GHC.Generics.Generic Amazonka.HoneyCode.Types.UpdateRowData.UpdateRowData
instance GHC.Show.Show Amazonka.HoneyCode.Types.UpdateRowData.UpdateRowData
instance GHC.Classes.Eq Amazonka.HoneyCode.Types.UpdateRowData.UpdateRowData
instance Data.Hashable.Class.Hashable Amazonka.HoneyCode.Types.UpdateRowData.UpdateRowData
instance Control.DeepSeq.NFData Amazonka.HoneyCode.Types.UpdateRowData.UpdateRowData
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.HoneyCode.Types.UpdateRowData.UpdateRowData


module Amazonka.HoneyCode.Types.UpsertAction
newtype UpsertAction
UpsertAction' :: Text -> UpsertAction
[fromUpsertAction] :: UpsertAction -> Text
pattern UpsertAction_APPENDED :: UpsertAction
pattern UpsertAction_UPDATED :: UpsertAction
instance Amazonka.Data.XML.ToXML Amazonka.HoneyCode.Types.UpsertAction.UpsertAction
instance Amazonka.Data.XML.FromXML Amazonka.HoneyCode.Types.UpsertAction.UpsertAction
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.HoneyCode.Types.UpsertAction.UpsertAction
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.HoneyCode.Types.UpsertAction.UpsertAction
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.HoneyCode.Types.UpsertAction.UpsertAction
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.HoneyCode.Types.UpsertAction.UpsertAction
instance Amazonka.Data.Query.ToQuery Amazonka.HoneyCode.Types.UpsertAction.UpsertAction
instance Amazonka.Data.Headers.ToHeader Amazonka.HoneyCode.Types.UpsertAction.UpsertAction
instance Amazonka.Data.Log.ToLog Amazonka.HoneyCode.Types.UpsertAction.UpsertAction
instance Amazonka.Data.ByteString.ToByteString Amazonka.HoneyCode.Types.UpsertAction.UpsertAction
instance Amazonka.Data.Text.ToText Amazonka.HoneyCode.Types.UpsertAction.UpsertAction
instance Amazonka.Data.Text.FromText Amazonka.HoneyCode.Types.UpsertAction.UpsertAction
instance Control.DeepSeq.NFData Amazonka.HoneyCode.Types.UpsertAction.UpsertAction
instance Data.Hashable.Class.Hashable Amazonka.HoneyCode.Types.UpsertAction.UpsertAction
instance GHC.Generics.Generic Amazonka.HoneyCode.Types.UpsertAction.UpsertAction
instance GHC.Classes.Ord Amazonka.HoneyCode.Types.UpsertAction.UpsertAction
instance GHC.Classes.Eq Amazonka.HoneyCode.Types.UpsertAction.UpsertAction
instance GHC.Read.Read Amazonka.HoneyCode.Types.UpsertAction.UpsertAction
instance GHC.Show.Show Amazonka.HoneyCode.Types.UpsertAction.UpsertAction


module Amazonka.HoneyCode.Types.UpsertRowData

-- | Data needed to upsert rows in a table as part of a single item in the
--   BatchUpsertTableRows request.
--   
--   <i>See:</i> <a>newUpsertRowData</a> smart constructor.
data UpsertRowData
UpsertRowData' :: Text -> Filter -> HashMap Text CellInput -> UpsertRowData

-- | An external identifier that represents a single item in the request
--   that is being upserted as part of the BatchUpsertTableRows request.
--   This can be any string that you can use to identify the item in the
--   request. The BatchUpsertTableRows API puts the batch item id in the
--   results to allow you to link data in the request to data in the
--   results.
[$sel:batchItemId:UpsertRowData'] :: UpsertRowData -> Text

-- | The filter formula to use to find existing matching rows to update.
--   The formula needs to return zero or more rows. If the formula returns
--   0 rows, then a new row will be appended in the target table. If the
--   formula returns one or more rows, then the returned rows will be
--   updated.
--   
--   Note that the filter formula needs to return rows from the target
--   table for the upsert operation to succeed. If the filter formula has a
--   syntax error or it doesn't evaluate to zero or more rows in the target
--   table for any one item in the input list, then the entire
--   BatchUpsertTableRows request fails and no updates are made to the
--   table.
[$sel:filter':UpsertRowData'] :: UpsertRowData -> Filter

-- | A map representing the cells to update for the matching rows or an
--   appended row. The key is the column id of the cell and the value is
--   the CellInput object that represents the data to set in that cell.
[$sel:cellsToUpdate:UpsertRowData'] :: UpsertRowData -> HashMap Text CellInput

-- | Create a value of <a>UpsertRowData</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:batchItemId:UpsertRowData'</a>,
--   <a>upsertRowData_batchItemId</a> - An external identifier that
--   represents a single item in the request that is being upserted as part
--   of the BatchUpsertTableRows request. This can be any string that you
--   can use to identify the item in the request. The BatchUpsertTableRows
--   API puts the batch item id in the results to allow you to link data in
--   the request to data in the results.
--   
--   <a>$sel:filter':UpsertRowData'</a>, <a>upsertRowData_filter</a> - The
--   filter formula to use to find existing matching rows to update. The
--   formula needs to return zero or more rows. If the formula returns 0
--   rows, then a new row will be appended in the target table. If the
--   formula returns one or more rows, then the returned rows will be
--   updated.
--   
--   Note that the filter formula needs to return rows from the target
--   table for the upsert operation to succeed. If the filter formula has a
--   syntax error or it doesn't evaluate to zero or more rows in the target
--   table for any one item in the input list, then the entire
--   BatchUpsertTableRows request fails and no updates are made to the
--   table.
--   
--   <a>$sel:cellsToUpdate:UpsertRowData'</a>,
--   <a>upsertRowData_cellsToUpdate</a> - A map representing the cells to
--   update for the matching rows or an appended row. The key is the column
--   id of the cell and the value is the CellInput object that represents
--   the data to set in that cell.
newUpsertRowData :: Text -> Filter -> UpsertRowData

-- | An external identifier that represents a single item in the request
--   that is being upserted as part of the BatchUpsertTableRows request.
--   This can be any string that you can use to identify the item in the
--   request. The BatchUpsertTableRows API puts the batch item id in the
--   results to allow you to link data in the request to data in the
--   results.
upsertRowData_batchItemId :: Lens' UpsertRowData Text

-- | The filter formula to use to find existing matching rows to update.
--   The formula needs to return zero or more rows. If the formula returns
--   0 rows, then a new row will be appended in the target table. If the
--   formula returns one or more rows, then the returned rows will be
--   updated.
--   
--   Note that the filter formula needs to return rows from the target
--   table for the upsert operation to succeed. If the filter formula has a
--   syntax error or it doesn't evaluate to zero or more rows in the target
--   table for any one item in the input list, then the entire
--   BatchUpsertTableRows request fails and no updates are made to the
--   table.
upsertRowData_filter :: Lens' UpsertRowData Filter

-- | A map representing the cells to update for the matching rows or an
--   appended row. The key is the column id of the cell and the value is
--   the CellInput object that represents the data to set in that cell.
upsertRowData_cellsToUpdate :: Lens' UpsertRowData (HashMap Text CellInput)
instance GHC.Generics.Generic Amazonka.HoneyCode.Types.UpsertRowData.UpsertRowData
instance GHC.Show.Show Amazonka.HoneyCode.Types.UpsertRowData.UpsertRowData
instance GHC.Classes.Eq Amazonka.HoneyCode.Types.UpsertRowData.UpsertRowData
instance Data.Hashable.Class.Hashable Amazonka.HoneyCode.Types.UpsertRowData.UpsertRowData
instance Control.DeepSeq.NFData Amazonka.HoneyCode.Types.UpsertRowData.UpsertRowData
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.HoneyCode.Types.UpsertRowData.UpsertRowData


module Amazonka.HoneyCode.Types.UpsertRowsResult

-- | An object that represents the result of a single upsert row request.
--   
--   <i>See:</i> <a>newUpsertRowsResult</a> smart constructor.
data UpsertRowsResult
UpsertRowsResult' :: NonEmpty Text -> UpsertAction -> UpsertRowsResult

-- | The list of row ids that were changed as part of an upsert row
--   operation. If the upsert resulted in an update, this list could
--   potentially contain multiple rows that matched the filter and hence
--   got updated. If the upsert resulted in an append, this list would only
--   have the single row that was appended.
[$sel:rowIds:UpsertRowsResult'] :: UpsertRowsResult -> NonEmpty Text

-- | The result of the upsert action.
[$sel:upsertAction:UpsertRowsResult'] :: UpsertRowsResult -> UpsertAction

-- | Create a value of <a>UpsertRowsResult</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rowIds:UpsertRowsResult'</a>, <a>upsertRowsResult_rowIds</a> -
--   The list of row ids that were changed as part of an upsert row
--   operation. If the upsert resulted in an update, this list could
--   potentially contain multiple rows that matched the filter and hence
--   got updated. If the upsert resulted in an append, this list would only
--   have the single row that was appended.
--   
--   <a>$sel:upsertAction:UpsertRowsResult'</a>,
--   <a>upsertRowsResult_upsertAction</a> - The result of the upsert
--   action.
newUpsertRowsResult :: NonEmpty Text -> UpsertAction -> UpsertRowsResult

-- | The list of row ids that were changed as part of an upsert row
--   operation. If the upsert resulted in an update, this list could
--   potentially contain multiple rows that matched the filter and hence
--   got updated. If the upsert resulted in an append, this list would only
--   have the single row that was appended.
upsertRowsResult_rowIds :: Lens' UpsertRowsResult (NonEmpty Text)

-- | The result of the upsert action.
upsertRowsResult_upsertAction :: Lens' UpsertRowsResult UpsertAction
instance GHC.Generics.Generic Amazonka.HoneyCode.Types.UpsertRowsResult.UpsertRowsResult
instance GHC.Show.Show Amazonka.HoneyCode.Types.UpsertRowsResult.UpsertRowsResult
instance GHC.Read.Read Amazonka.HoneyCode.Types.UpsertRowsResult.UpsertRowsResult
instance GHC.Classes.Eq Amazonka.HoneyCode.Types.UpsertRowsResult.UpsertRowsResult
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.HoneyCode.Types.UpsertRowsResult.UpsertRowsResult
instance Data.Hashable.Class.Hashable Amazonka.HoneyCode.Types.UpsertRowsResult.UpsertRowsResult
instance Control.DeepSeq.NFData Amazonka.HoneyCode.Types.UpsertRowsResult.UpsertRowsResult


module Amazonka.HoneyCode.Types.VariableValue

-- | The input variables to the app to be used by the
--   InvokeScreenAutomation action request.
--   
--   <i>See:</i> <a>newVariableValue</a> smart constructor.
data VariableValue
VariableValue' :: Text -> VariableValue

-- | Raw value of the variable.
[$sel:rawValue:VariableValue'] :: VariableValue -> Text

-- | Create a value of <a>VariableValue</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rawValue:VariableValue'</a>, <a>variableValue_rawValue</a> -
--   Raw value of the variable.
newVariableValue :: Text -> VariableValue

-- | Raw value of the variable.
variableValue_rawValue :: Lens' VariableValue Text
instance GHC.Generics.Generic Amazonka.HoneyCode.Types.VariableValue.VariableValue
instance GHC.Show.Show Amazonka.HoneyCode.Types.VariableValue.VariableValue
instance GHC.Classes.Eq Amazonka.HoneyCode.Types.VariableValue.VariableValue
instance Data.Hashable.Class.Hashable Amazonka.HoneyCode.Types.VariableValue.VariableValue
instance Control.DeepSeq.NFData Amazonka.HoneyCode.Types.VariableValue.VariableValue
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.HoneyCode.Types.VariableValue.VariableValue


module Amazonka.HoneyCode.Types

-- | API version <tt>2020-03-01</tt> of the Amazon Honeycode SDK
--   configuration.
defaultService :: Service

-- | Request is invalid. The message in the response contains details on
--   why the request is invalid.
_ValidationException :: AsError a => Getting (First ServiceError) a ServiceError

-- | You do not have sufficient access to perform this action. Check that
--   the workbook is owned by you and your IAM policy allows access to the
--   resource in the request.
_AccessDeniedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The automation execution timed out.
_AutomationExecutionTimeoutException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request caused service quota to be breached.
_ServiceQuotaExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Tps(transactions per second) rate reached.
_ThrottlingException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The automation execution did not end successfully.
_AutomationExecutionException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request timed out.
_RequestTimeoutException :: AsError a => Getting (First ServiceError) a ServiceError

-- | There were unexpected errors from the server.
_InternalServerException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Remote service is unreachable.
_ServiceUnavailableException :: AsError a => Getting (First ServiceError) a ServiceError

-- | A Workbook, Table, App, Screen or Screen Automation was not found with
--   the given ID.
_ResourceNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError
newtype Format
Format' :: Text -> Format
[fromFormat] :: Format -> Text
pattern Format_ACCOUNTING :: Format
pattern Format_AUTO :: Format
pattern Format_CONTACT :: Format
pattern Format_CURRENCY :: Format
pattern Format_DATE :: Format
pattern Format_DATE_TIME :: Format
pattern Format_NUMBER :: Format
pattern Format_PERCENTAGE :: Format
pattern Format_ROWLINK :: Format
pattern Format_TEXT :: Format
pattern Format_TIME :: Format
newtype ImportDataCharacterEncoding
ImportDataCharacterEncoding' :: Text -> ImportDataCharacterEncoding
[fromImportDataCharacterEncoding] :: ImportDataCharacterEncoding -> Text
pattern ImportDataCharacterEncoding_ISO_8859_1 :: ImportDataCharacterEncoding
pattern ImportDataCharacterEncoding_US_ASCII :: ImportDataCharacterEncoding
pattern ImportDataCharacterEncoding_UTF_16 :: ImportDataCharacterEncoding
pattern ImportDataCharacterEncoding_UTF_16BE :: ImportDataCharacterEncoding
pattern ImportDataCharacterEncoding_UTF_16LE :: ImportDataCharacterEncoding
pattern ImportDataCharacterEncoding_UTF_8 :: ImportDataCharacterEncoding
newtype ImportSourceDataFormat
ImportSourceDataFormat' :: Text -> ImportSourceDataFormat
[fromImportSourceDataFormat] :: ImportSourceDataFormat -> Text
pattern ImportSourceDataFormat_DELIMITED_TEXT :: ImportSourceDataFormat
newtype TableDataImportJobStatus
TableDataImportJobStatus' :: Text -> TableDataImportJobStatus
[fromTableDataImportJobStatus] :: TableDataImportJobStatus -> Text
pattern TableDataImportJobStatus_COMPLETED :: TableDataImportJobStatus
pattern TableDataImportJobStatus_FAILED :: TableDataImportJobStatus
pattern TableDataImportJobStatus_IN_PROGRESS :: TableDataImportJobStatus
pattern TableDataImportJobStatus_SUBMITTED :: TableDataImportJobStatus
newtype UpsertAction
UpsertAction' :: Text -> UpsertAction
[fromUpsertAction] :: UpsertAction -> Text
pattern UpsertAction_APPENDED :: UpsertAction
pattern UpsertAction_UPDATED :: UpsertAction

-- | An object that represents a single cell in a table.
--   
--   <i>See:</i> <a>newCell</a> smart constructor.
data Cell
Cell' :: Maybe Text -> Maybe Format -> Maybe (Sensitive Text) -> Maybe Text -> Cell

-- | The raw value of the data contained in the cell. The raw value depends
--   on the format of the data in the cell. However the attribute in the
--   API return value is always a string containing the raw value.
--   
--   Cells with format DATE, DATE_TIME or TIME have the raw value as a
--   floating point number where the whole number represents the number of
--   days since 1/1/1900 and the fractional part represents the fraction of
--   the day since midnight. For example, a cell with date 11/3/2020 has
--   the raw value "44138". A cell with the time 9:00 AM has the raw value
--   "0.375" and a cell with date/time value of 11/3/2020 9:00 AM has the
--   raw value "44138.375". Notice that even though the raw value is a
--   number in all three cases, it is still represented as a string.
--   
--   Cells with format NUMBER, CURRENCY, PERCENTAGE and ACCOUNTING have the
--   raw value of the data as the number representing the data being
--   displayed. For example, the number 1.325 with two decimal places in
--   the format will have it's raw value as "1.325" and formatted value as
--   "1.33". A currency value for $10 will have the raw value as "10" and
--   formatted value as "$10.00". A value representing 20% with two decimal
--   places in the format will have its raw value as "0.2" and the
--   formatted value as "20.00%". An accounting value of -$25 will have
--   "-25" as the raw value and "$ (25.00)" as the formatted value.
--   
--   Cells with format TEXT will have the raw text as the raw value. For
--   example, a cell with text "John Smith" will have "John Smith" as both
--   the raw value and the formatted value.
--   
--   Cells with format CONTACT will have the name of the contact as a
--   formatted value and the email address of the contact as the raw value.
--   For example, a contact for John Smith will have "John Smith" as the
--   formatted value and "john.smith@example.com" as the raw value.
--   
--   Cells with format ROWLINK (aka picklist) will have the first column of
--   the linked row as the formatted value and the row id of the linked row
--   as the raw value. For example, a cell containing a picklist to a table
--   that displays task status might have "Completed" as the formatted
--   value and
--   "row:dfcefaee-5b37-4355-8f28-40c3e4ff5dd4/ca432b2f-b8eb-431d-9fb5-cbe0342f9f03"
--   as the raw value.
--   
--   Cells with format AUTO or cells without any format that are
--   auto-detected as one of the formats above will contain the raw and
--   formatted values as mentioned above, based on the auto-detected
--   formats. If there is no auto-detected format, the raw and formatted
--   values will be the same as the data in the cell.
[$sel:rawValue:Cell'] :: Cell -> Maybe Text

-- | The format of the cell. If this field is empty, then the format is
--   either not specified in the workbook or the format is set to AUTO.
[$sel:format:Cell'] :: Cell -> Maybe Format

-- | The formula contained in the cell. This field is empty if a cell does
--   not have a formula.
[$sel:formula:Cell'] :: Cell -> Maybe (Sensitive Text)

-- | The formatted value of the cell. This is the value that you see
--   displayed in the cell in the UI.
--   
--   Note that the formatted value of a cell is always represented as a
--   string irrespective of the data that is stored in the cell. For
--   example, if a cell contains a date, the formatted value of the cell is
--   the string representation of the formatted date being shown in the
--   cell in the UI. See details in the rawValue field below for how cells
--   of different formats will have different raw and formatted values.
[$sel:formattedValue:Cell'] :: Cell -> Maybe Text

-- | Create a value of <a>Cell</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rawValue:Cell'</a>, <a>cell_rawValue</a> - The raw value of
--   the data contained in the cell. The raw value depends on the format of
--   the data in the cell. However the attribute in the API return value is
--   always a string containing the raw value.
--   
--   Cells with format DATE, DATE_TIME or TIME have the raw value as a
--   floating point number where the whole number represents the number of
--   days since 1/1/1900 and the fractional part represents the fraction of
--   the day since midnight. For example, a cell with date 11/3/2020 has
--   the raw value "44138". A cell with the time 9:00 AM has the raw value
--   "0.375" and a cell with date/time value of 11/3/2020 9:00 AM has the
--   raw value "44138.375". Notice that even though the raw value is a
--   number in all three cases, it is still represented as a string.
--   
--   Cells with format NUMBER, CURRENCY, PERCENTAGE and ACCOUNTING have the
--   raw value of the data as the number representing the data being
--   displayed. For example, the number 1.325 with two decimal places in
--   the format will have it's raw value as "1.325" and formatted value as
--   "1.33". A currency value for $10 will have the raw value as "10" and
--   formatted value as "$10.00". A value representing 20% with two decimal
--   places in the format will have its raw value as "0.2" and the
--   formatted value as "20.00%". An accounting value of -$25 will have
--   "-25" as the raw value and "$ (25.00)" as the formatted value.
--   
--   Cells with format TEXT will have the raw text as the raw value. For
--   example, a cell with text "John Smith" will have "John Smith" as both
--   the raw value and the formatted value.
--   
--   Cells with format CONTACT will have the name of the contact as a
--   formatted value and the email address of the contact as the raw value.
--   For example, a contact for John Smith will have "John Smith" as the
--   formatted value and "john.smith@example.com" as the raw value.
--   
--   Cells with format ROWLINK (aka picklist) will have the first column of
--   the linked row as the formatted value and the row id of the linked row
--   as the raw value. For example, a cell containing a picklist to a table
--   that displays task status might have "Completed" as the formatted
--   value and
--   "row:dfcefaee-5b37-4355-8f28-40c3e4ff5dd4/ca432b2f-b8eb-431d-9fb5-cbe0342f9f03"
--   as the raw value.
--   
--   Cells with format AUTO or cells without any format that are
--   auto-detected as one of the formats above will contain the raw and
--   formatted values as mentioned above, based on the auto-detected
--   formats. If there is no auto-detected format, the raw and formatted
--   values will be the same as the data in the cell.
--   
--   <a>$sel:format:Cell'</a>, <a>cell_format</a> - The format of the cell.
--   If this field is empty, then the format is either not specified in the
--   workbook or the format is set to AUTO.
--   
--   <a>$sel:formula:Cell'</a>, <a>cell_formula</a> - The formula contained
--   in the cell. This field is empty if a cell does not have a formula.
--   
--   <a>$sel:formattedValue:Cell'</a>, <a>cell_formattedValue</a> - The
--   formatted value of the cell. This is the value that you see displayed
--   in the cell in the UI.
--   
--   Note that the formatted value of a cell is always represented as a
--   string irrespective of the data that is stored in the cell. For
--   example, if a cell contains a date, the formatted value of the cell is
--   the string representation of the formatted date being shown in the
--   cell in the UI. See details in the rawValue field below for how cells
--   of different formats will have different raw and formatted values.
newCell :: Cell

-- | The raw value of the data contained in the cell. The raw value depends
--   on the format of the data in the cell. However the attribute in the
--   API return value is always a string containing the raw value.
--   
--   Cells with format DATE, DATE_TIME or TIME have the raw value as a
--   floating point number where the whole number represents the number of
--   days since 1/1/1900 and the fractional part represents the fraction of
--   the day since midnight. For example, a cell with date 11/3/2020 has
--   the raw value "44138". A cell with the time 9:00 AM has the raw value
--   "0.375" and a cell with date/time value of 11/3/2020 9:00 AM has the
--   raw value "44138.375". Notice that even though the raw value is a
--   number in all three cases, it is still represented as a string.
--   
--   Cells with format NUMBER, CURRENCY, PERCENTAGE and ACCOUNTING have the
--   raw value of the data as the number representing the data being
--   displayed. For example, the number 1.325 with two decimal places in
--   the format will have it's raw value as "1.325" and formatted value as
--   "1.33". A currency value for $10 will have the raw value as "10" and
--   formatted value as "$10.00". A value representing 20% with two decimal
--   places in the format will have its raw value as "0.2" and the
--   formatted value as "20.00%". An accounting value of -$25 will have
--   "-25" as the raw value and "$ (25.00)" as the formatted value.
--   
--   Cells with format TEXT will have the raw text as the raw value. For
--   example, a cell with text "John Smith" will have "John Smith" as both
--   the raw value and the formatted value.
--   
--   Cells with format CONTACT will have the name of the contact as a
--   formatted value and the email address of the contact as the raw value.
--   For example, a contact for John Smith will have "John Smith" as the
--   formatted value and "john.smith@example.com" as the raw value.
--   
--   Cells with format ROWLINK (aka picklist) will have the first column of
--   the linked row as the formatted value and the row id of the linked row
--   as the raw value. For example, a cell containing a picklist to a table
--   that displays task status might have "Completed" as the formatted
--   value and
--   "row:dfcefaee-5b37-4355-8f28-40c3e4ff5dd4/ca432b2f-b8eb-431d-9fb5-cbe0342f9f03"
--   as the raw value.
--   
--   Cells with format AUTO or cells without any format that are
--   auto-detected as one of the formats above will contain the raw and
--   formatted values as mentioned above, based on the auto-detected
--   formats. If there is no auto-detected format, the raw and formatted
--   values will be the same as the data in the cell.
cell_rawValue :: Lens' Cell (Maybe Text)

-- | The format of the cell. If this field is empty, then the format is
--   either not specified in the workbook or the format is set to AUTO.
cell_format :: Lens' Cell (Maybe Format)

-- | The formula contained in the cell. This field is empty if a cell does
--   not have a formula.
cell_formula :: Lens' Cell (Maybe Text)

-- | The formatted value of the cell. This is the value that you see
--   displayed in the cell in the UI.
--   
--   Note that the formatted value of a cell is always represented as a
--   string irrespective of the data that is stored in the cell. For
--   example, if a cell contains a date, the formatted value of the cell is
--   the string representation of the formatted date being shown in the
--   cell in the UI. See details in the rawValue field below for how cells
--   of different formats will have different raw and formatted values.
cell_formattedValue :: Lens' Cell (Maybe Text)

-- | CellInput object contains the data needed to create or update cells in
--   a table.
--   
--   <i>See:</i> <a>newCellInput</a> smart constructor.
data CellInput
CellInput' :: Maybe (Sensitive Text) -> CellInput

-- | Fact represents the data that is entered into a cell. This data can be
--   free text or a formula. Formulas need to start with the equals (=)
--   sign.
[$sel:fact:CellInput'] :: CellInput -> Maybe (Sensitive Text)

-- | Create a value of <a>CellInput</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:fact:CellInput'</a>, <a>cellInput_fact</a> - Fact represents
--   the data that is entered into a cell. This data can be free text or a
--   formula. Formulas need to start with the equals (=) sign.
newCellInput :: CellInput

-- | Fact represents the data that is entered into a cell. This data can be
--   free text or a formula. Formulas need to start with the equals (=)
--   sign.
cellInput_fact :: Lens' CellInput (Maybe Text)

-- | Metadata for column in the table.
--   
--   <i>See:</i> <a>newColumnMetadata</a> smart constructor.
data ColumnMetadata
ColumnMetadata' :: Sensitive Text -> Format -> ColumnMetadata

-- | The name of the column.
[$sel:name:ColumnMetadata'] :: ColumnMetadata -> Sensitive Text

-- | The format of the column.
[$sel:format:ColumnMetadata'] :: ColumnMetadata -> Format

-- | Create a value of <a>ColumnMetadata</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:name:ColumnMetadata'</a>, <a>columnMetadata_name</a> - The
--   name of the column.
--   
--   <a>$sel:format:ColumnMetadata'</a>, <a>columnMetadata_format</a> - The
--   format of the column.
newColumnMetadata :: Text -> Format -> ColumnMetadata

-- | The name of the column.
columnMetadata_name :: Lens' ColumnMetadata Text

-- | The format of the column.
columnMetadata_format :: Lens' ColumnMetadata Format

-- | Data needed to create a single row in a table as part of the
--   BatchCreateTableRows request.
--   
--   <i>See:</i> <a>newCreateRowData</a> smart constructor.
data CreateRowData
CreateRowData' :: Text -> HashMap Text CellInput -> CreateRowData

-- | An external identifier that represents the single row that is being
--   created as part of the BatchCreateTableRows request. This can be any
--   string that you can use to identify the row in the request. The
--   BatchCreateTableRows API puts the batch item id in the results to
--   allow you to link data in the request to data in the results.
[$sel:batchItemId:CreateRowData'] :: CreateRowData -> Text

-- | A map representing the cells to create in the new row. The key is the
--   column id of the cell and the value is the CellInput object that
--   represents the data to set in that cell.
[$sel:cellsToCreate:CreateRowData'] :: CreateRowData -> HashMap Text CellInput

-- | Create a value of <a>CreateRowData</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:batchItemId:CreateRowData'</a>,
--   <a>createRowData_batchItemId</a> - An external identifier that
--   represents the single row that is being created as part of the
--   BatchCreateTableRows request. This can be any string that you can use
--   to identify the row in the request. The BatchCreateTableRows API puts
--   the batch item id in the results to allow you to link data in the
--   request to data in the results.
--   
--   <a>$sel:cellsToCreate:CreateRowData'</a>,
--   <a>createRowData_cellsToCreate</a> - A map representing the cells to
--   create in the new row. The key is the column id of the cell and the
--   value is the CellInput object that represents the data to set in that
--   cell.
newCreateRowData :: Text -> CreateRowData

-- | An external identifier that represents the single row that is being
--   created as part of the BatchCreateTableRows request. This can be any
--   string that you can use to identify the row in the request. The
--   BatchCreateTableRows API puts the batch item id in the results to
--   allow you to link data in the request to data in the results.
createRowData_batchItemId :: Lens' CreateRowData Text

-- | A map representing the cells to create in the new row. The key is the
--   column id of the cell and the value is the CellInput object that
--   represents the data to set in that cell.
createRowData_cellsToCreate :: Lens' CreateRowData (HashMap Text CellInput)

-- | The data in a particular data cell defined on the screen.
--   
--   <i>See:</i> <a>newDataItem</a> smart constructor.
data DataItem
DataItem' :: Maybe Text -> Maybe Format -> Maybe Text -> DataItem

-- | The raw value of the data. e.g. jsmith@example.com
[$sel:rawValue:DataItem'] :: DataItem -> Maybe Text

-- | The overrideFormat is optional and is specified only if a particular
--   row of data has a different format for the data than the default
--   format defined on the screen or the table.
[$sel:overrideFormat:DataItem'] :: DataItem -> Maybe Format

-- | The formatted value of the data. e.g. John Smith.
[$sel:formattedValue:DataItem'] :: DataItem -> Maybe Text

-- | Create a value of <a>DataItem</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rawValue:DataItem'</a>, <a>dataItem_rawValue</a> - The raw
--   value of the data. e.g. jsmith@example.com
--   
--   <a>$sel:overrideFormat:DataItem'</a>, <a>dataItem_overrideFormat</a> -
--   The overrideFormat is optional and is specified only if a particular
--   row of data has a different format for the data than the default
--   format defined on the screen or the table.
--   
--   <a>$sel:formattedValue:DataItem'</a>, <a>dataItem_formattedValue</a> -
--   The formatted value of the data. e.g. John Smith.
newDataItem :: DataItem

-- | The raw value of the data. e.g. jsmith@example.com
dataItem_rawValue :: Lens' DataItem (Maybe Text)

-- | The overrideFormat is optional and is specified only if a particular
--   row of data has a different format for the data than the default
--   format defined on the screen or the table.
dataItem_overrideFormat :: Lens' DataItem (Maybe Format)

-- | The formatted value of the data. e.g. John Smith.
dataItem_formattedValue :: Lens' DataItem (Maybe Text)

-- | An object that contains the options relating to parsing delimited text
--   as part of an import request.
--   
--   <i>See:</i> <a>newDelimitedTextImportOptions</a> smart constructor.
data DelimitedTextImportOptions
DelimitedTextImportOptions' :: Maybe Bool -> Maybe Bool -> Maybe ImportDataCharacterEncoding -> Text -> DelimitedTextImportOptions

-- | A parameter to indicate whether empty rows should be ignored or be
--   included in the import.
[$sel:ignoreEmptyRows:DelimitedTextImportOptions'] :: DelimitedTextImportOptions -> Maybe Bool

-- | Indicates whether the input file has a header row at the top
--   containing the column names.
[$sel:hasHeaderRow:DelimitedTextImportOptions'] :: DelimitedTextImportOptions -> Maybe Bool

-- | The encoding of the data in the input file.
[$sel:dataCharacterEncoding:DelimitedTextImportOptions'] :: DelimitedTextImportOptions -> Maybe ImportDataCharacterEncoding

-- | The delimiter to use for separating columns in a single row of the
--   input.
[$sel:delimiter:DelimitedTextImportOptions'] :: DelimitedTextImportOptions -> Text

-- | Create a value of <a>DelimitedTextImportOptions</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:ignoreEmptyRows:DelimitedTextImportOptions'</a>,
--   <a>delimitedTextImportOptions_ignoreEmptyRows</a> - A parameter to
--   indicate whether empty rows should be ignored or be included in the
--   import.
--   
--   <a>$sel:hasHeaderRow:DelimitedTextImportOptions'</a>,
--   <a>delimitedTextImportOptions_hasHeaderRow</a> - Indicates whether the
--   input file has a header row at the top containing the column names.
--   
--   <a>$sel:dataCharacterEncoding:DelimitedTextImportOptions'</a>,
--   <a>delimitedTextImportOptions_dataCharacterEncoding</a> - The encoding
--   of the data in the input file.
--   
--   <a>$sel:delimiter:DelimitedTextImportOptions'</a>,
--   <a>delimitedTextImportOptions_delimiter</a> - The delimiter to use for
--   separating columns in a single row of the input.
newDelimitedTextImportOptions :: Text -> DelimitedTextImportOptions

-- | A parameter to indicate whether empty rows should be ignored or be
--   included in the import.
delimitedTextImportOptions_ignoreEmptyRows :: Lens' DelimitedTextImportOptions (Maybe Bool)

-- | Indicates whether the input file has a header row at the top
--   containing the column names.
delimitedTextImportOptions_hasHeaderRow :: Lens' DelimitedTextImportOptions (Maybe Bool)

-- | The encoding of the data in the input file.
delimitedTextImportOptions_dataCharacterEncoding :: Lens' DelimitedTextImportOptions (Maybe ImportDataCharacterEncoding)

-- | The delimiter to use for separating columns in a single row of the
--   input.
delimitedTextImportOptions_delimiter :: Lens' DelimitedTextImportOptions Text

-- | An object that contains the options relating to the destination of the
--   import request.
--   
--   <i>See:</i> <a>newDestinationOptions</a> smart constructor.
data DestinationOptions
DestinationOptions' :: Maybe (HashMap Text SourceDataColumnProperties) -> DestinationOptions

-- | A map of the column id to the import properties for each column.
[$sel:columnMap:DestinationOptions'] :: DestinationOptions -> Maybe (HashMap Text SourceDataColumnProperties)

-- | Create a value of <a>DestinationOptions</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:columnMap:DestinationOptions'</a>,
--   <a>destinationOptions_columnMap</a> - A map of the column id to the
--   import properties for each column.
newDestinationOptions :: DestinationOptions

-- | A map of the column id to the import properties for each column.
destinationOptions_columnMap :: Lens' DestinationOptions (Maybe (HashMap Text SourceDataColumnProperties))

-- | A single item in a batch that failed to perform the intended action
--   because of an error preventing it from succeeding.
--   
--   <i>See:</i> <a>newFailedBatchItem</a> smart constructor.
data FailedBatchItem
FailedBatchItem' :: Text -> Text -> FailedBatchItem

-- | The id of the batch item that failed. This is the batch item id for
--   the BatchCreateTableRows and BatchUpsertTableRows operations and the
--   row id for the BatchUpdateTableRows and BatchDeleteTableRows
--   operations.
[$sel:id:FailedBatchItem'] :: FailedBatchItem -> Text

-- | The error message that indicates why the batch item failed.
[$sel:errorMessage:FailedBatchItem'] :: FailedBatchItem -> Text

-- | Create a value of <a>FailedBatchItem</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:id:FailedBatchItem'</a>, <a>failedBatchItem_id</a> - The id of
--   the batch item that failed. This is the batch item id for the
--   BatchCreateTableRows and BatchUpsertTableRows operations and the row
--   id for the BatchUpdateTableRows and BatchDeleteTableRows operations.
--   
--   <a>$sel:errorMessage:FailedBatchItem'</a>,
--   <a>failedBatchItem_errorMessage</a> - The error message that indicates
--   why the batch item failed.
newFailedBatchItem :: Text -> Text -> FailedBatchItem

-- | The id of the batch item that failed. This is the batch item id for
--   the BatchCreateTableRows and BatchUpsertTableRows operations and the
--   row id for the BatchUpdateTableRows and BatchDeleteTableRows
--   operations.
failedBatchItem_id :: Lens' FailedBatchItem Text

-- | The error message that indicates why the batch item failed.
failedBatchItem_errorMessage :: Lens' FailedBatchItem Text

-- | An object that represents a filter formula along with the id of the
--   context row under which the filter function needs to evaluate.
--   
--   <i>See:</i> <a>newFilter</a> smart constructor.
data Filter
Filter' :: Maybe Text -> Sensitive Text -> Filter

-- | The optional contextRowId attribute can be used to specify the row id
--   of the context row if the filter formula contains unqualified
--   references to table columns and needs a context row to evaluate them
--   successfully.
[$sel:contextRowId:Filter'] :: Filter -> Maybe Text

-- | A formula representing a filter function that returns zero or more
--   matching rows from a table. Valid formulas in this field return a list
--   of rows from a table. The most common ways of writing a formula to
--   return a list of rows are to use the FindRow() or Filter() functions.
--   Any other formula that returns zero or more rows is also acceptable.
--   For example, you can use a formula that points to a cell that contains
--   a filter function.
[$sel:formula:Filter'] :: Filter -> Sensitive Text

-- | Create a value of <a>Filter</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:contextRowId:Filter'</a>, <a>filter_contextRowId</a> - The
--   optional contextRowId attribute can be used to specify the row id of
--   the context row if the filter formula contains unqualified references
--   to table columns and needs a context row to evaluate them
--   successfully.
--   
--   <a>$sel:formula:Filter'</a>, <a>filter_formula</a> - A formula
--   representing a filter function that returns zero or more matching rows
--   from a table. Valid formulas in this field return a list of rows from
--   a table. The most common ways of writing a formula to return a list of
--   rows are to use the FindRow() or Filter() functions. Any other formula
--   that returns zero or more rows is also acceptable. For example, you
--   can use a formula that points to a cell that contains a filter
--   function.
newFilter :: Text -> Filter

-- | The optional contextRowId attribute can be used to specify the row id
--   of the context row if the filter formula contains unqualified
--   references to table columns and needs a context row to evaluate them
--   successfully.
filter_contextRowId :: Lens' Filter (Maybe Text)

-- | A formula representing a filter function that returns zero or more
--   matching rows from a table. Valid formulas in this field return a list
--   of rows from a table. The most common ways of writing a formula to
--   return a list of rows are to use the FindRow() or Filter() functions.
--   Any other formula that returns zero or more rows is also acceptable.
--   For example, you can use a formula that points to a cell that contains
--   a filter function.
filter_formula :: Lens' Filter Text

-- | An object that has details about the source of the data that was
--   submitted for import.
--   
--   <i>See:</i> <a>newImportDataSource</a> smart constructor.
data ImportDataSource
ImportDataSource' :: ImportDataSourceConfig -> ImportDataSource

-- | The configuration parameters for the data source of the import
[$sel:dataSourceConfig:ImportDataSource'] :: ImportDataSource -> ImportDataSourceConfig

-- | Create a value of <a>ImportDataSource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dataSourceConfig:ImportDataSource'</a>,
--   <a>importDataSource_dataSourceConfig</a> - The configuration
--   parameters for the data source of the import
newImportDataSource :: ImportDataSourceConfig -> ImportDataSource

-- | The configuration parameters for the data source of the import
importDataSource_dataSourceConfig :: Lens' ImportDataSource ImportDataSourceConfig

-- | An object that contains the configuration parameters for the data
--   source of an import request.
--   
--   <i>See:</i> <a>newImportDataSourceConfig</a> smart constructor.
data ImportDataSourceConfig
ImportDataSourceConfig' :: Maybe Text -> ImportDataSourceConfig

-- | The URL from which source data will be downloaded for the import
--   request.
[$sel:dataSourceUrl:ImportDataSourceConfig'] :: ImportDataSourceConfig -> Maybe Text

-- | Create a value of <a>ImportDataSourceConfig</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dataSourceUrl:ImportDataSourceConfig'</a>,
--   <a>importDataSourceConfig_dataSourceUrl</a> - The URL from which
--   source data will be downloaded for the import request.
newImportDataSourceConfig :: ImportDataSourceConfig

-- | The URL from which source data will be downloaded for the import
--   request.
importDataSourceConfig_dataSourceUrl :: Lens' ImportDataSourceConfig (Maybe Text)

-- | An object that contains the attributes of the submitter of the import
--   job.
--   
--   <i>See:</i> <a>newImportJobSubmitter</a> smart constructor.
data ImportJobSubmitter
ImportJobSubmitter' :: Maybe (Sensitive Text) -> Maybe Text -> ImportJobSubmitter

-- | The email id of the submitter of the import job, if available.
[$sel:email:ImportJobSubmitter'] :: ImportJobSubmitter -> Maybe (Sensitive Text)

-- | The AWS user ARN of the submitter of the import job, if available.
[$sel:userArn:ImportJobSubmitter'] :: ImportJobSubmitter -> Maybe Text

-- | Create a value of <a>ImportJobSubmitter</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:email:ImportJobSubmitter'</a>, <a>importJobSubmitter_email</a>
--   - The email id of the submitter of the import job, if available.
--   
--   <a>$sel:userArn:ImportJobSubmitter'</a>,
--   <a>importJobSubmitter_userArn</a> - The AWS user ARN of the submitter
--   of the import job, if available.
newImportJobSubmitter :: ImportJobSubmitter

-- | The email id of the submitter of the import job, if available.
importJobSubmitter_email :: Lens' ImportJobSubmitter (Maybe Text)

-- | The AWS user ARN of the submitter of the import job, if available.
importJobSubmitter_userArn :: Lens' ImportJobSubmitter (Maybe Text)

-- | An object that contains the options specified by the sumitter of the
--   import request.
--   
--   <i>See:</i> <a>newImportOptions</a> smart constructor.
data ImportOptions
ImportOptions' :: Maybe DelimitedTextImportOptions -> Maybe DestinationOptions -> ImportOptions

-- | Options relating to parsing delimited text. Required if dataFormat is
--   DELIMITED_TEXT.
[$sel:delimitedTextOptions:ImportOptions'] :: ImportOptions -> Maybe DelimitedTextImportOptions

-- | Options relating to the destination of the import request.
[$sel:destinationOptions:ImportOptions'] :: ImportOptions -> Maybe DestinationOptions

-- | Create a value of <a>ImportOptions</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:delimitedTextOptions:ImportOptions'</a>,
--   <a>importOptions_delimitedTextOptions</a> - Options relating to
--   parsing delimited text. Required if dataFormat is DELIMITED_TEXT.
--   
--   <a>$sel:destinationOptions:ImportOptions'</a>,
--   <a>importOptions_destinationOptions</a> - Options relating to the
--   destination of the import request.
newImportOptions :: ImportOptions

-- | Options relating to parsing delimited text. Required if dataFormat is
--   DELIMITED_TEXT.
importOptions_delimitedTextOptions :: Lens' ImportOptions (Maybe DelimitedTextImportOptions)

-- | Options relating to the destination of the import request.
importOptions_destinationOptions :: Lens' ImportOptions (Maybe DestinationOptions)

-- | A single row in the ResultSet.
--   
--   <i>See:</i> <a>newResultRow</a> smart constructor.
data ResultRow
ResultRow' :: Maybe Text -> [Sensitive DataItem] -> ResultRow

-- | The ID for a particular row.
[$sel:rowId:ResultRow'] :: ResultRow -> Maybe Text

-- | List of all the data cells in a row.
[$sel:dataItems:ResultRow'] :: ResultRow -> [Sensitive DataItem]

-- | Create a value of <a>ResultRow</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rowId:ResultRow'</a>, <a>resultRow_rowId</a> - The ID for a
--   particular row.
--   
--   <a>$sel:dataItems:ResultRow'</a>, <a>resultRow_dataItems</a> - List of
--   all the data cells in a row.
newResultRow :: ResultRow

-- | The ID for a particular row.
resultRow_rowId :: Lens' ResultRow (Maybe Text)

-- | List of all the data cells in a row.
resultRow_dataItems :: Lens' ResultRow [DataItem]

-- | ResultSet contains the results of the request for a single block or
--   list defined on the screen.
--   
--   <i>See:</i> <a>newResultSet</a> smart constructor.
data ResultSet
ResultSet' :: [ColumnMetadata] -> [ResultRow] -> ResultSet

-- | List of headers for all the data cells in the block. The header
--   identifies the name and default format of the data cell. Data cells
--   appear in the same order in all rows as defined in the header. The
--   names and formats are not repeated in the rows. If a particular row
--   does not have a value for a data cell, a blank value is used.
--   
--   For example, a task list that displays the task name, due date and
--   assigned person might have headers [ { "name": "Task Name"}, {"name":
--   "Due Date", "format": "DATE"}, {"name": "Assigned", "format":
--   "CONTACT"} ]. Every row in the result will have the task name as the
--   first item, due date as the second item and assigned person as the
--   third item. If a particular task does not have a due date, that row
--   will still have a blank value in the second element and the assigned
--   person will still be in the third element.
[$sel:headers:ResultSet'] :: ResultSet -> [ColumnMetadata]

-- | List of rows returned by the request. Each row has a row Id and a list
--   of data cells in that row. The data cells will be present in the same
--   order as they are defined in the header.
[$sel:rows:ResultSet'] :: ResultSet -> [ResultRow]

-- | Create a value of <a>ResultSet</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:headers:ResultSet'</a>, <a>resultSet_headers</a> - List of
--   headers for all the data cells in the block. The header identifies the
--   name and default format of the data cell. Data cells appear in the
--   same order in all rows as defined in the header. The names and formats
--   are not repeated in the rows. If a particular row does not have a
--   value for a data cell, a blank value is used.
--   
--   For example, a task list that displays the task name, due date and
--   assigned person might have headers [ { "name": "Task Name"}, {"name":
--   "Due Date", "format": "DATE"}, {"name": "Assigned", "format":
--   "CONTACT"} ]. Every row in the result will have the task name as the
--   first item, due date as the second item and assigned person as the
--   third item. If a particular task does not have a due date, that row
--   will still have a blank value in the second element and the assigned
--   person will still be in the third element.
--   
--   <a>$sel:rows:ResultSet'</a>, <a>resultSet_rows</a> - List of rows
--   returned by the request. Each row has a row Id and a list of data
--   cells in that row. The data cells will be present in the same order as
--   they are defined in the header.
newResultSet :: ResultSet

-- | List of headers for all the data cells in the block. The header
--   identifies the name and default format of the data cell. Data cells
--   appear in the same order in all rows as defined in the header. The
--   names and formats are not repeated in the rows. If a particular row
--   does not have a value for a data cell, a blank value is used.
--   
--   For example, a task list that displays the task name, due date and
--   assigned person might have headers [ { "name": "Task Name"}, {"name":
--   "Due Date", "format": "DATE"}, {"name": "Assigned", "format":
--   "CONTACT"} ]. Every row in the result will have the task name as the
--   first item, due date as the second item and assigned person as the
--   third item. If a particular task does not have a due date, that row
--   will still have a blank value in the second element and the assigned
--   person will still be in the third element.
resultSet_headers :: Lens' ResultSet [ColumnMetadata]

-- | List of rows returned by the request. Each row has a row Id and a list
--   of data cells in that row. The data cells will be present in the same
--   order as they are defined in the header.
resultSet_rows :: Lens' ResultSet [ResultRow]

-- | An object that contains the properties for importing data to a
--   specific column in a table.
--   
--   <i>See:</i> <a>newSourceDataColumnProperties</a> smart constructor.
data SourceDataColumnProperties
SourceDataColumnProperties' :: Maybe Natural -> SourceDataColumnProperties

-- | The index of the column in the input file.
[$sel:columnIndex:SourceDataColumnProperties'] :: SourceDataColumnProperties -> Maybe Natural

-- | Create a value of <a>SourceDataColumnProperties</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:columnIndex:SourceDataColumnProperties'</a>,
--   <a>sourceDataColumnProperties_columnIndex</a> - The index of the
--   column in the input file.
newSourceDataColumnProperties :: SourceDataColumnProperties

-- | The index of the column in the input file.
sourceDataColumnProperties_columnIndex :: Lens' SourceDataColumnProperties (Maybe Natural)

-- | An object representing the properties of a table in a workbook.
--   
--   <i>See:</i> <a>newTable</a> smart constructor.
data Table
Table' :: Maybe Text -> Maybe Text -> Table

-- | The id of the table.
[$sel:tableId:Table'] :: Table -> Maybe Text

-- | The name of the table.
[$sel:tableName:Table'] :: Table -> Maybe Text

-- | Create a value of <a>Table</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableId:Table'</a>, <a>table_tableId</a> - The id of the
--   table.
--   
--   <a>$sel:tableName:Table'</a>, <a>table_tableName</a> - The name of the
--   table.
newTable :: Table

-- | The id of the table.
table_tableId :: Lens' Table (Maybe Text)

-- | The name of the table.
table_tableName :: Lens' Table (Maybe Text)

-- | An object that contains attributes about a single column in a table
--   
--   <i>See:</i> <a>newTableColumn</a> smart constructor.
data TableColumn
TableColumn' :: Maybe Format -> Maybe Text -> Maybe Text -> TableColumn

-- | The column level format that is applied in the table. An empty value
--   in this field means that the column format is the default value
--   'AUTO'.
[$sel:format:TableColumn'] :: TableColumn -> Maybe Format

-- | The name of the column in the table.
[$sel:tableColumnName:TableColumn'] :: TableColumn -> Maybe Text

-- | The id of the column in the table.
[$sel:tableColumnId:TableColumn'] :: TableColumn -> Maybe Text

-- | Create a value of <a>TableColumn</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:format:TableColumn'</a>, <a>tableColumn_format</a> - The
--   column level format that is applied in the table. An empty value in
--   this field means that the column format is the default value 'AUTO'.
--   
--   <a>$sel:tableColumnName:TableColumn'</a>,
--   <a>tableColumn_tableColumnName</a> - The name of the column in the
--   table.
--   
--   <a>$sel:tableColumnId:TableColumn'</a>,
--   <a>tableColumn_tableColumnId</a> - The id of the column in the table.
newTableColumn :: TableColumn

-- | The column level format that is applied in the table. An empty value
--   in this field means that the column format is the default value
--   'AUTO'.
tableColumn_format :: Lens' TableColumn (Maybe Format)

-- | The name of the column in the table.
tableColumn_tableColumnName :: Lens' TableColumn (Maybe Text)

-- | The id of the column in the table.
tableColumn_tableColumnId :: Lens' TableColumn (Maybe Text)

-- | The metadata associated with the table data import job that was
--   submitted.
--   
--   <i>See:</i> <a>newTableDataImportJobMetadata</a> smart constructor.
data TableDataImportJobMetadata
TableDataImportJobMetadata' :: ImportJobSubmitter -> POSIX -> ImportOptions -> ImportDataSource -> TableDataImportJobMetadata

-- | Details about the submitter of the import request.
[$sel:submitter:TableDataImportJobMetadata'] :: TableDataImportJobMetadata -> ImportJobSubmitter

-- | The timestamp when the job was submitted for import.
[$sel:submitTime:TableDataImportJobMetadata'] :: TableDataImportJobMetadata -> POSIX

-- | The options that was specified at the time of submitting the import
--   request.
[$sel:importOptions:TableDataImportJobMetadata'] :: TableDataImportJobMetadata -> ImportOptions

-- | The source of the data that was submitted for import.
[$sel:dataSource:TableDataImportJobMetadata'] :: TableDataImportJobMetadata -> ImportDataSource

-- | Create a value of <a>TableDataImportJobMetadata</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:submitter:TableDataImportJobMetadata'</a>,
--   <a>tableDataImportJobMetadata_submitter</a> - Details about the
--   submitter of the import request.
--   
--   <a>$sel:submitTime:TableDataImportJobMetadata'</a>,
--   <a>tableDataImportJobMetadata_submitTime</a> - The timestamp when the
--   job was submitted for import.
--   
--   <a>$sel:importOptions:TableDataImportJobMetadata'</a>,
--   <a>tableDataImportJobMetadata_importOptions</a> - The options that was
--   specified at the time of submitting the import request.
--   
--   <a>$sel:dataSource:TableDataImportJobMetadata'</a>,
--   <a>tableDataImportJobMetadata_dataSource</a> - The source of the data
--   that was submitted for import.
newTableDataImportJobMetadata :: ImportJobSubmitter -> UTCTime -> ImportOptions -> ImportDataSource -> TableDataImportJobMetadata

-- | Details about the submitter of the import request.
tableDataImportJobMetadata_submitter :: Lens' TableDataImportJobMetadata ImportJobSubmitter

-- | The timestamp when the job was submitted for import.
tableDataImportJobMetadata_submitTime :: Lens' TableDataImportJobMetadata UTCTime

-- | The options that was specified at the time of submitting the import
--   request.
tableDataImportJobMetadata_importOptions :: Lens' TableDataImportJobMetadata ImportOptions

-- | The source of the data that was submitted for import.
tableDataImportJobMetadata_dataSource :: Lens' TableDataImportJobMetadata ImportDataSource

-- | An object that contains attributes about a single row in a table
--   
--   <i>See:</i> <a>newTableRow</a> smart constructor.
data TableRow
TableRow' :: Text -> [Sensitive Cell] -> TableRow

-- | The id of the row in the table.
[$sel:rowId:TableRow'] :: TableRow -> Text

-- | A list of cells in the table row. The cells appear in the same order
--   as the columns of the table.
[$sel:cells:TableRow'] :: TableRow -> [Sensitive Cell]

-- | Create a value of <a>TableRow</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rowId:TableRow'</a>, <a>tableRow_rowId</a> - The id of the row
--   in the table.
--   
--   <a>$sel:cells:TableRow'</a>, <a>tableRow_cells</a> - A list of cells
--   in the table row. The cells appear in the same order as the columns of
--   the table.
newTableRow :: Text -> TableRow

-- | The id of the row in the table.
tableRow_rowId :: Lens' TableRow Text

-- | A list of cells in the table row. The cells appear in the same order
--   as the columns of the table.
tableRow_cells :: Lens' TableRow [Cell]

-- | Data needed to create a single row in a table as part of the
--   BatchCreateTableRows request.
--   
--   <i>See:</i> <a>newUpdateRowData</a> smart constructor.
data UpdateRowData
UpdateRowData' :: Text -> HashMap Text CellInput -> UpdateRowData

-- | The id of the row that needs to be updated.
[$sel:rowId:UpdateRowData'] :: UpdateRowData -> Text

-- | A map representing the cells to update in the given row. The key is
--   the column id of the cell and the value is the CellInput object that
--   represents the data to set in that cell.
[$sel:cellsToUpdate:UpdateRowData'] :: UpdateRowData -> HashMap Text CellInput

-- | Create a value of <a>UpdateRowData</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rowId:UpdateRowData'</a>, <a>updateRowData_rowId</a> - The id
--   of the row that needs to be updated.
--   
--   <a>$sel:cellsToUpdate:UpdateRowData'</a>,
--   <a>updateRowData_cellsToUpdate</a> - A map representing the cells to
--   update in the given row. The key is the column id of the cell and the
--   value is the CellInput object that represents the data to set in that
--   cell.
newUpdateRowData :: Text -> UpdateRowData

-- | The id of the row that needs to be updated.
updateRowData_rowId :: Lens' UpdateRowData Text

-- | A map representing the cells to update in the given row. The key is
--   the column id of the cell and the value is the CellInput object that
--   represents the data to set in that cell.
updateRowData_cellsToUpdate :: Lens' UpdateRowData (HashMap Text CellInput)

-- | Data needed to upsert rows in a table as part of a single item in the
--   BatchUpsertTableRows request.
--   
--   <i>See:</i> <a>newUpsertRowData</a> smart constructor.
data UpsertRowData
UpsertRowData' :: Text -> Filter -> HashMap Text CellInput -> UpsertRowData

-- | An external identifier that represents a single item in the request
--   that is being upserted as part of the BatchUpsertTableRows request.
--   This can be any string that you can use to identify the item in the
--   request. The BatchUpsertTableRows API puts the batch item id in the
--   results to allow you to link data in the request to data in the
--   results.
[$sel:batchItemId:UpsertRowData'] :: UpsertRowData -> Text

-- | The filter formula to use to find existing matching rows to update.
--   The formula needs to return zero or more rows. If the formula returns
--   0 rows, then a new row will be appended in the target table. If the
--   formula returns one or more rows, then the returned rows will be
--   updated.
--   
--   Note that the filter formula needs to return rows from the target
--   table for the upsert operation to succeed. If the filter formula has a
--   syntax error or it doesn't evaluate to zero or more rows in the target
--   table for any one item in the input list, then the entire
--   BatchUpsertTableRows request fails and no updates are made to the
--   table.
[$sel:filter':UpsertRowData'] :: UpsertRowData -> Filter

-- | A map representing the cells to update for the matching rows or an
--   appended row. The key is the column id of the cell and the value is
--   the CellInput object that represents the data to set in that cell.
[$sel:cellsToUpdate:UpsertRowData'] :: UpsertRowData -> HashMap Text CellInput

-- | Create a value of <a>UpsertRowData</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:batchItemId:UpsertRowData'</a>,
--   <a>upsertRowData_batchItemId</a> - An external identifier that
--   represents a single item in the request that is being upserted as part
--   of the BatchUpsertTableRows request. This can be any string that you
--   can use to identify the item in the request. The BatchUpsertTableRows
--   API puts the batch item id in the results to allow you to link data in
--   the request to data in the results.
--   
--   <a>$sel:filter':UpsertRowData'</a>, <a>upsertRowData_filter</a> - The
--   filter formula to use to find existing matching rows to update. The
--   formula needs to return zero or more rows. If the formula returns 0
--   rows, then a new row will be appended in the target table. If the
--   formula returns one or more rows, then the returned rows will be
--   updated.
--   
--   Note that the filter formula needs to return rows from the target
--   table for the upsert operation to succeed. If the filter formula has a
--   syntax error or it doesn't evaluate to zero or more rows in the target
--   table for any one item in the input list, then the entire
--   BatchUpsertTableRows request fails and no updates are made to the
--   table.
--   
--   <a>$sel:cellsToUpdate:UpsertRowData'</a>,
--   <a>upsertRowData_cellsToUpdate</a> - A map representing the cells to
--   update for the matching rows or an appended row. The key is the column
--   id of the cell and the value is the CellInput object that represents
--   the data to set in that cell.
newUpsertRowData :: Text -> Filter -> UpsertRowData

-- | An external identifier that represents a single item in the request
--   that is being upserted as part of the BatchUpsertTableRows request.
--   This can be any string that you can use to identify the item in the
--   request. The BatchUpsertTableRows API puts the batch item id in the
--   results to allow you to link data in the request to data in the
--   results.
upsertRowData_batchItemId :: Lens' UpsertRowData Text

-- | The filter formula to use to find existing matching rows to update.
--   The formula needs to return zero or more rows. If the formula returns
--   0 rows, then a new row will be appended in the target table. If the
--   formula returns one or more rows, then the returned rows will be
--   updated.
--   
--   Note that the filter formula needs to return rows from the target
--   table for the upsert operation to succeed. If the filter formula has a
--   syntax error or it doesn't evaluate to zero or more rows in the target
--   table for any one item in the input list, then the entire
--   BatchUpsertTableRows request fails and no updates are made to the
--   table.
upsertRowData_filter :: Lens' UpsertRowData Filter

-- | A map representing the cells to update for the matching rows or an
--   appended row. The key is the column id of the cell and the value is
--   the CellInput object that represents the data to set in that cell.
upsertRowData_cellsToUpdate :: Lens' UpsertRowData (HashMap Text CellInput)

-- | An object that represents the result of a single upsert row request.
--   
--   <i>See:</i> <a>newUpsertRowsResult</a> smart constructor.
data UpsertRowsResult
UpsertRowsResult' :: NonEmpty Text -> UpsertAction -> UpsertRowsResult

-- | The list of row ids that were changed as part of an upsert row
--   operation. If the upsert resulted in an update, this list could
--   potentially contain multiple rows that matched the filter and hence
--   got updated. If the upsert resulted in an append, this list would only
--   have the single row that was appended.
[$sel:rowIds:UpsertRowsResult'] :: UpsertRowsResult -> NonEmpty Text

-- | The result of the upsert action.
[$sel:upsertAction:UpsertRowsResult'] :: UpsertRowsResult -> UpsertAction

-- | Create a value of <a>UpsertRowsResult</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rowIds:UpsertRowsResult'</a>, <a>upsertRowsResult_rowIds</a> -
--   The list of row ids that were changed as part of an upsert row
--   operation. If the upsert resulted in an update, this list could
--   potentially contain multiple rows that matched the filter and hence
--   got updated. If the upsert resulted in an append, this list would only
--   have the single row that was appended.
--   
--   <a>$sel:upsertAction:UpsertRowsResult'</a>,
--   <a>upsertRowsResult_upsertAction</a> - The result of the upsert
--   action.
newUpsertRowsResult :: NonEmpty Text -> UpsertAction -> UpsertRowsResult

-- | The list of row ids that were changed as part of an upsert row
--   operation. If the upsert resulted in an update, this list could
--   potentially contain multiple rows that matched the filter and hence
--   got updated. If the upsert resulted in an append, this list would only
--   have the single row that was appended.
upsertRowsResult_rowIds :: Lens' UpsertRowsResult (NonEmpty Text)

-- | The result of the upsert action.
upsertRowsResult_upsertAction :: Lens' UpsertRowsResult UpsertAction

-- | The input variables to the app to be used by the
--   InvokeScreenAutomation action request.
--   
--   <i>See:</i> <a>newVariableValue</a> smart constructor.
data VariableValue
VariableValue' :: Text -> VariableValue

-- | Raw value of the variable.
[$sel:rawValue:VariableValue'] :: VariableValue -> Text

-- | Create a value of <a>VariableValue</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rawValue:VariableValue'</a>, <a>variableValue_rawValue</a> -
--   Raw value of the variable.
newVariableValue :: Text -> VariableValue

-- | Raw value of the variable.
variableValue_rawValue :: Lens' VariableValue Text


-- | The StartTableDataImportJob API allows you to start an import job on a
--   table. This API will only return the id of the job that was started.
--   To find out the status of the import request, you need to call the
--   DescribeTableDataImportJob API.
module Amazonka.HoneyCode.StartTableDataImportJob

-- | <i>See:</i> <a>newStartTableDataImportJob</a> smart constructor.
data StartTableDataImportJob
StartTableDataImportJob' :: Text -> ImportDataSource -> ImportSourceDataFormat -> Text -> ImportOptions -> Text -> StartTableDataImportJob

-- | The ID of the workbook where the rows are being imported.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
[$sel:workbookId:StartTableDataImportJob'] :: StartTableDataImportJob -> Text

-- | The source of the data that is being imported. The size of source must
--   be no larger than 100 MB. Source must have no more than 100,000 cells
--   and no more than 1,000 rows.
[$sel:dataSource:StartTableDataImportJob'] :: StartTableDataImportJob -> ImportDataSource

-- | The format of the data that is being imported. Currently the only
--   option supported is "DELIMITED_TEXT".
[$sel:dataFormat:StartTableDataImportJob'] :: StartTableDataImportJob -> ImportSourceDataFormat

-- | The ID of the table where the rows are being imported.
--   
--   If a table with the specified id could not be found, this API throws
--   ResourceNotFoundException.
[$sel:destinationTableId:StartTableDataImportJob'] :: StartTableDataImportJob -> Text

-- | The options for customizing this import request.
[$sel:importOptions:StartTableDataImportJob'] :: StartTableDataImportJob -> ImportOptions

-- | The request token for performing the update action. Request tokens
--   help to identify duplicate requests. If a call times out or fails due
--   to a transient error like a failed network connection, you can retry
--   the call with the same request token. The service ensures that if the
--   first call using that request token is successfully performed, the
--   second call will not perform the action again.
--   
--   Note that request tokens are valid only for a few minutes. You cannot
--   use request tokens to dedupe requests spanning hours or days.
[$sel:clientRequestToken:StartTableDataImportJob'] :: StartTableDataImportJob -> Text

-- | Create a value of <a>StartTableDataImportJob</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:workbookId:StartTableDataImportJob'</a>,
--   <a>startTableDataImportJob_workbookId</a> - The ID of the workbook
--   where the rows are being imported.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
--   
--   <a>$sel:dataSource:StartTableDataImportJob'</a>,
--   <a>startTableDataImportJob_dataSource</a> - The source of the data
--   that is being imported. The size of source must be no larger than 100
--   MB. Source must have no more than 100,000 cells and no more than 1,000
--   rows.
--   
--   <a>$sel:dataFormat:StartTableDataImportJob'</a>,
--   <a>startTableDataImportJob_dataFormat</a> - The format of the data
--   that is being imported. Currently the only option supported is
--   "DELIMITED_TEXT".
--   
--   <a>$sel:destinationTableId:StartTableDataImportJob'</a>,
--   <a>startTableDataImportJob_destinationTableId</a> - The ID of the
--   table where the rows are being imported.
--   
--   If a table with the specified id could not be found, this API throws
--   ResourceNotFoundException.
--   
--   <a>$sel:importOptions:StartTableDataImportJob'</a>,
--   <a>startTableDataImportJob_importOptions</a> - The options for
--   customizing this import request.
--   
--   <a>$sel:clientRequestToken:StartTableDataImportJob'</a>,
--   <a>startTableDataImportJob_clientRequestToken</a> - The request token
--   for performing the update action. Request tokens help to identify
--   duplicate requests. If a call times out or fails due to a transient
--   error like a failed network connection, you can retry the call with
--   the same request token. The service ensures that if the first call
--   using that request token is successfully performed, the second call
--   will not perform the action again.
--   
--   Note that request tokens are valid only for a few minutes. You cannot
--   use request tokens to dedupe requests spanning hours or days.
newStartTableDataImportJob :: Text -> ImportDataSource -> ImportSourceDataFormat -> Text -> ImportOptions -> Text -> StartTableDataImportJob

-- | The ID of the workbook where the rows are being imported.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
startTableDataImportJob_workbookId :: Lens' StartTableDataImportJob Text

-- | The source of the data that is being imported. The size of source must
--   be no larger than 100 MB. Source must have no more than 100,000 cells
--   and no more than 1,000 rows.
startTableDataImportJob_dataSource :: Lens' StartTableDataImportJob ImportDataSource

-- | The format of the data that is being imported. Currently the only
--   option supported is "DELIMITED_TEXT".
startTableDataImportJob_dataFormat :: Lens' StartTableDataImportJob ImportSourceDataFormat

-- | The ID of the table where the rows are being imported.
--   
--   If a table with the specified id could not be found, this API throws
--   ResourceNotFoundException.
startTableDataImportJob_destinationTableId :: Lens' StartTableDataImportJob Text

-- | The options for customizing this import request.
startTableDataImportJob_importOptions :: Lens' StartTableDataImportJob ImportOptions

-- | The request token for performing the update action. Request tokens
--   help to identify duplicate requests. If a call times out or fails due
--   to a transient error like a failed network connection, you can retry
--   the call with the same request token. The service ensures that if the
--   first call using that request token is successfully performed, the
--   second call will not perform the action again.
--   
--   Note that request tokens are valid only for a few minutes. You cannot
--   use request tokens to dedupe requests spanning hours or days.
startTableDataImportJob_clientRequestToken :: Lens' StartTableDataImportJob Text

-- | <i>See:</i> <a>newStartTableDataImportJobResponse</a> smart
--   constructor.
data StartTableDataImportJobResponse
StartTableDataImportJobResponse' :: Int -> Text -> TableDataImportJobStatus -> StartTableDataImportJobResponse

-- | The response's http status code.
[$sel:httpStatus:StartTableDataImportJobResponse'] :: StartTableDataImportJobResponse -> Int

-- | The id that is assigned to this import job. Future requests to find
--   out the status of this import job need to send this id in the
--   appropriate parameter in the request.
[$sel:jobId:StartTableDataImportJobResponse'] :: StartTableDataImportJobResponse -> Text

-- | The status of the import job immediately after submitting the request.
[$sel:jobStatus:StartTableDataImportJobResponse'] :: StartTableDataImportJobResponse -> TableDataImportJobStatus

-- | Create a value of <a>StartTableDataImportJobResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:StartTableDataImportJobResponse'</a>,
--   <a>startTableDataImportJobResponse_httpStatus</a> - The response's
--   http status code.
--   
--   <a>$sel:jobId:StartTableDataImportJobResponse'</a>,
--   <a>startTableDataImportJobResponse_jobId</a> - The id that is assigned
--   to this import job. Future requests to find out the status of this
--   import job need to send this id in the appropriate parameter in the
--   request.
--   
--   <a>$sel:jobStatus:StartTableDataImportJobResponse'</a>,
--   <a>startTableDataImportJobResponse_jobStatus</a> - The status of the
--   import job immediately after submitting the request.
newStartTableDataImportJobResponse :: Int -> Text -> TableDataImportJobStatus -> StartTableDataImportJobResponse

-- | The response's http status code.
startTableDataImportJobResponse_httpStatus :: Lens' StartTableDataImportJobResponse Int

-- | The id that is assigned to this import job. Future requests to find
--   out the status of this import job need to send this id in the
--   appropriate parameter in the request.
startTableDataImportJobResponse_jobId :: Lens' StartTableDataImportJobResponse Text

-- | The status of the import job immediately after submitting the request.
startTableDataImportJobResponse_jobStatus :: Lens' StartTableDataImportJobResponse TableDataImportJobStatus
instance GHC.Generics.Generic Amazonka.HoneyCode.StartTableDataImportJob.StartTableDataImportJob
instance GHC.Show.Show Amazonka.HoneyCode.StartTableDataImportJob.StartTableDataImportJob
instance GHC.Read.Read Amazonka.HoneyCode.StartTableDataImportJob.StartTableDataImportJob
instance GHC.Classes.Eq Amazonka.HoneyCode.StartTableDataImportJob.StartTableDataImportJob
instance GHC.Generics.Generic Amazonka.HoneyCode.StartTableDataImportJob.StartTableDataImportJobResponse
instance GHC.Show.Show Amazonka.HoneyCode.StartTableDataImportJob.StartTableDataImportJobResponse
instance GHC.Read.Read Amazonka.HoneyCode.StartTableDataImportJob.StartTableDataImportJobResponse
instance GHC.Classes.Eq Amazonka.HoneyCode.StartTableDataImportJob.StartTableDataImportJobResponse
instance Amazonka.Types.AWSRequest Amazonka.HoneyCode.StartTableDataImportJob.StartTableDataImportJob
instance Control.DeepSeq.NFData Amazonka.HoneyCode.StartTableDataImportJob.StartTableDataImportJobResponse
instance Data.Hashable.Class.Hashable Amazonka.HoneyCode.StartTableDataImportJob.StartTableDataImportJob
instance Control.DeepSeq.NFData Amazonka.HoneyCode.StartTableDataImportJob.StartTableDataImportJob
instance Amazonka.Data.Headers.ToHeaders Amazonka.HoneyCode.StartTableDataImportJob.StartTableDataImportJob
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.HoneyCode.StartTableDataImportJob.StartTableDataImportJob
instance Amazonka.Data.Path.ToPath Amazonka.HoneyCode.StartTableDataImportJob.StartTableDataImportJob
instance Amazonka.Data.Query.ToQuery Amazonka.HoneyCode.StartTableDataImportJob.StartTableDataImportJob


-- | The QueryTableRows API allows you to use a filter formula to query for
--   specific rows in a table.
--   
--   This operation returns paginated results.
module Amazonka.HoneyCode.QueryTableRows

-- | <i>See:</i> <a>newQueryTableRows</a> smart constructor.
data QueryTableRows
QueryTableRows' :: Maybe Text -> Maybe Natural -> Text -> Text -> Filter -> QueryTableRows

-- | This parameter is optional. If a nextToken is not specified, the API
--   returns the first page of data.
--   
--   Pagination tokens expire after 1 hour. If you use a token that was
--   returned more than an hour back, the API will throw
--   ValidationException.
[$sel:nextToken:QueryTableRows'] :: QueryTableRows -> Maybe Text

-- | The maximum number of rows to return in each page of the results.
[$sel:maxResults:QueryTableRows'] :: QueryTableRows -> Maybe Natural

-- | The ID of the workbook whose table rows are being queried.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
[$sel:workbookId:QueryTableRows'] :: QueryTableRows -> Text

-- | The ID of the table whose rows are being queried.
--   
--   If a table with the specified id could not be found, this API throws
--   ResourceNotFoundException.
[$sel:tableId:QueryTableRows'] :: QueryTableRows -> Text

-- | An object that represents a filter formula along with the id of the
--   context row under which the filter function needs to evaluate.
[$sel:filterFormula:QueryTableRows'] :: QueryTableRows -> Filter

-- | Create a value of <a>QueryTableRows</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:QueryTableRows'</a>, <a>queryTableRows_nextToken</a>
--   - This parameter is optional. If a nextToken is not specified, the API
--   returns the first page of data.
--   
--   Pagination tokens expire after 1 hour. If you use a token that was
--   returned more than an hour back, the API will throw
--   ValidationException.
--   
--   <a>$sel:maxResults:QueryTableRows'</a>,
--   <a>queryTableRows_maxResults</a> - The maximum number of rows to
--   return in each page of the results.
--   
--   <a>$sel:workbookId:QueryTableRows'</a>,
--   <a>queryTableRows_workbookId</a> - The ID of the workbook whose table
--   rows are being queried.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
--   
--   <a>$sel:tableId:QueryTableRows'</a>, <a>queryTableRows_tableId</a> -
--   The ID of the table whose rows are being queried.
--   
--   If a table with the specified id could not be found, this API throws
--   ResourceNotFoundException.
--   
--   <a>$sel:filterFormula:QueryTableRows'</a>,
--   <a>queryTableRows_filterFormula</a> - An object that represents a
--   filter formula along with the id of the context row under which the
--   filter function needs to evaluate.
newQueryTableRows :: Text -> Text -> Filter -> QueryTableRows

-- | This parameter is optional. If a nextToken is not specified, the API
--   returns the first page of data.
--   
--   Pagination tokens expire after 1 hour. If you use a token that was
--   returned more than an hour back, the API will throw
--   ValidationException.
queryTableRows_nextToken :: Lens' QueryTableRows (Maybe Text)

-- | The maximum number of rows to return in each page of the results.
queryTableRows_maxResults :: Lens' QueryTableRows (Maybe Natural)

-- | The ID of the workbook whose table rows are being queried.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
queryTableRows_workbookId :: Lens' QueryTableRows Text

-- | The ID of the table whose rows are being queried.
--   
--   If a table with the specified id could not be found, this API throws
--   ResourceNotFoundException.
queryTableRows_tableId :: Lens' QueryTableRows Text

-- | An object that represents a filter formula along with the id of the
--   context row under which the filter function needs to evaluate.
queryTableRows_filterFormula :: Lens' QueryTableRows Filter

-- | <i>See:</i> <a>newQueryTableRowsResponse</a> smart constructor.
data QueryTableRowsResponse
QueryTableRowsResponse' :: Maybe Text -> Int -> NonEmpty Text -> [TableRow] -> Integer -> QueryTableRowsResponse

-- | Provides the pagination token to load the next page if there are more
--   results matching the request. If a pagination token is not present in
--   the response, it means that all data matching the request has been
--   loaded.
[$sel:nextToken:QueryTableRowsResponse'] :: QueryTableRowsResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:QueryTableRowsResponse'] :: QueryTableRowsResponse -> Int

-- | The list of columns in the table whose row data is returned in the
--   result.
[$sel:columnIds:QueryTableRowsResponse'] :: QueryTableRowsResponse -> NonEmpty Text

-- | The list of rows in the table that match the query filter.
[$sel:rows:QueryTableRowsResponse'] :: QueryTableRowsResponse -> [TableRow]

-- | Indicates the cursor of the workbook at which the data returned by
--   this request is read. Workbook cursor keeps increasing with every
--   update and the increments are not sequential.
[$sel:workbookCursor:QueryTableRowsResponse'] :: QueryTableRowsResponse -> Integer

-- | Create a value of <a>QueryTableRowsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:QueryTableRows'</a>,
--   <a>queryTableRowsResponse_nextToken</a> - Provides the pagination
--   token to load the next page if there are more results matching the
--   request. If a pagination token is not present in the response, it
--   means that all data matching the request has been loaded.
--   
--   <a>$sel:httpStatus:QueryTableRowsResponse'</a>,
--   <a>queryTableRowsResponse_httpStatus</a> - The response's http status
--   code.
--   
--   <a>$sel:columnIds:QueryTableRowsResponse'</a>,
--   <a>queryTableRowsResponse_columnIds</a> - The list of columns in the
--   table whose row data is returned in the result.
--   
--   <a>$sel:rows:QueryTableRowsResponse'</a>,
--   <a>queryTableRowsResponse_rows</a> - The list of rows in the table
--   that match the query filter.
--   
--   <a>$sel:workbookCursor:QueryTableRowsResponse'</a>,
--   <a>queryTableRowsResponse_workbookCursor</a> - Indicates the cursor of
--   the workbook at which the data returned by this request is read.
--   Workbook cursor keeps increasing with every update and the increments
--   are not sequential.
newQueryTableRowsResponse :: Int -> NonEmpty Text -> Integer -> QueryTableRowsResponse

-- | Provides the pagination token to load the next page if there are more
--   results matching the request. If a pagination token is not present in
--   the response, it means that all data matching the request has been
--   loaded.
queryTableRowsResponse_nextToken :: Lens' QueryTableRowsResponse (Maybe Text)

-- | The response's http status code.
queryTableRowsResponse_httpStatus :: Lens' QueryTableRowsResponse Int

-- | The list of columns in the table whose row data is returned in the
--   result.
queryTableRowsResponse_columnIds :: Lens' QueryTableRowsResponse (NonEmpty Text)

-- | The list of rows in the table that match the query filter.
queryTableRowsResponse_rows :: Lens' QueryTableRowsResponse [TableRow]

-- | Indicates the cursor of the workbook at which the data returned by
--   this request is read. Workbook cursor keeps increasing with every
--   update and the increments are not sequential.
queryTableRowsResponse_workbookCursor :: Lens' QueryTableRowsResponse Integer
instance GHC.Generics.Generic Amazonka.HoneyCode.QueryTableRows.QueryTableRows
instance GHC.Show.Show Amazonka.HoneyCode.QueryTableRows.QueryTableRows
instance GHC.Classes.Eq Amazonka.HoneyCode.QueryTableRows.QueryTableRows
instance GHC.Generics.Generic Amazonka.HoneyCode.QueryTableRows.QueryTableRowsResponse
instance GHC.Show.Show Amazonka.HoneyCode.QueryTableRows.QueryTableRowsResponse
instance GHC.Classes.Eq Amazonka.HoneyCode.QueryTableRows.QueryTableRowsResponse
instance Amazonka.Types.AWSRequest Amazonka.HoneyCode.QueryTableRows.QueryTableRows
instance Control.DeepSeq.NFData Amazonka.HoneyCode.QueryTableRows.QueryTableRowsResponse
instance Amazonka.Pager.AWSPager Amazonka.HoneyCode.QueryTableRows.QueryTableRows
instance Data.Hashable.Class.Hashable Amazonka.HoneyCode.QueryTableRows.QueryTableRows
instance Control.DeepSeq.NFData Amazonka.HoneyCode.QueryTableRows.QueryTableRows
instance Amazonka.Data.Headers.ToHeaders Amazonka.HoneyCode.QueryTableRows.QueryTableRows
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.HoneyCode.QueryTableRows.QueryTableRows
instance Amazonka.Data.Path.ToPath Amazonka.HoneyCode.QueryTableRows.QueryTableRows
instance Amazonka.Data.Query.ToQuery Amazonka.HoneyCode.QueryTableRows.QueryTableRows


-- | The ListTables API allows you to retrieve a list of all the tables in
--   a workbook.
--   
--   This operation returns paginated results.
module Amazonka.HoneyCode.ListTables

-- | <i>See:</i> <a>newListTables</a> smart constructor.
data ListTables
ListTables' :: Maybe Text -> Maybe Natural -> Text -> ListTables

-- | This parameter is optional. If a nextToken is not specified, the API
--   returns the first page of data.
--   
--   Pagination tokens expire after 1 hour. If you use a token that was
--   returned more than an hour back, the API will throw
--   ValidationException.
[$sel:nextToken:ListTables'] :: ListTables -> Maybe Text

-- | The maximum number of tables to return in each page of the results.
[$sel:maxResults:ListTables'] :: ListTables -> Maybe Natural

-- | The ID of the workbook whose tables are being retrieved.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
[$sel:workbookId:ListTables'] :: ListTables -> Text

-- | Create a value of <a>ListTables</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListTables'</a>, <a>listTables_nextToken</a> - This
--   parameter is optional. If a nextToken is not specified, the API
--   returns the first page of data.
--   
--   Pagination tokens expire after 1 hour. If you use a token that was
--   returned more than an hour back, the API will throw
--   ValidationException.
--   
--   <a>$sel:maxResults:ListTables'</a>, <a>listTables_maxResults</a> - The
--   maximum number of tables to return in each page of the results.
--   
--   <a>$sel:workbookId:ListTables'</a>, <a>listTables_workbookId</a> - The
--   ID of the workbook whose tables are being retrieved.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
newListTables :: Text -> ListTables

-- | This parameter is optional. If a nextToken is not specified, the API
--   returns the first page of data.
--   
--   Pagination tokens expire after 1 hour. If you use a token that was
--   returned more than an hour back, the API will throw
--   ValidationException.
listTables_nextToken :: Lens' ListTables (Maybe Text)

-- | The maximum number of tables to return in each page of the results.
listTables_maxResults :: Lens' ListTables (Maybe Natural)

-- | The ID of the workbook whose tables are being retrieved.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
listTables_workbookId :: Lens' ListTables Text

-- | <i>See:</i> <a>newListTablesResponse</a> smart constructor.
data ListTablesResponse
ListTablesResponse' :: Maybe Text -> Maybe Integer -> Int -> [Table] -> ListTablesResponse

-- | Provides the pagination token to load the next page if there are more
--   results matching the request. If a pagination token is not present in
--   the response, it means that all data matching the request has been
--   loaded.
[$sel:nextToken:ListTablesResponse'] :: ListTablesResponse -> Maybe Text

-- | Indicates the cursor of the workbook at which the data returned by
--   this request is read. Workbook cursor keeps increasing with every
--   update and the increments are not sequential.
[$sel:workbookCursor:ListTablesResponse'] :: ListTablesResponse -> Maybe Integer

-- | The response's http status code.
[$sel:httpStatus:ListTablesResponse'] :: ListTablesResponse -> Int

-- | The list of tables in the workbook.
[$sel:tables:ListTablesResponse'] :: ListTablesResponse -> [Table]

-- | Create a value of <a>ListTablesResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListTables'</a>, <a>listTablesResponse_nextToken</a>
--   - Provides the pagination token to load the next page if there are
--   more results matching the request. If a pagination token is not
--   present in the response, it means that all data matching the request
--   has been loaded.
--   
--   <a>$sel:workbookCursor:ListTablesResponse'</a>,
--   <a>listTablesResponse_workbookCursor</a> - Indicates the cursor of the
--   workbook at which the data returned by this request is read. Workbook
--   cursor keeps increasing with every update and the increments are not
--   sequential.
--   
--   <a>$sel:httpStatus:ListTablesResponse'</a>,
--   <a>listTablesResponse_httpStatus</a> - The response's http status
--   code.
--   
--   <a>$sel:tables:ListTablesResponse'</a>,
--   <a>listTablesResponse_tables</a> - The list of tables in the workbook.
newListTablesResponse :: Int -> ListTablesResponse

-- | Provides the pagination token to load the next page if there are more
--   results matching the request. If a pagination token is not present in
--   the response, it means that all data matching the request has been
--   loaded.
listTablesResponse_nextToken :: Lens' ListTablesResponse (Maybe Text)

-- | Indicates the cursor of the workbook at which the data returned by
--   this request is read. Workbook cursor keeps increasing with every
--   update and the increments are not sequential.
listTablesResponse_workbookCursor :: Lens' ListTablesResponse (Maybe Integer)

-- | The response's http status code.
listTablesResponse_httpStatus :: Lens' ListTablesResponse Int

-- | The list of tables in the workbook.
listTablesResponse_tables :: Lens' ListTablesResponse [Table]
instance GHC.Generics.Generic Amazonka.HoneyCode.ListTables.ListTables
instance GHC.Show.Show Amazonka.HoneyCode.ListTables.ListTables
instance GHC.Read.Read Amazonka.HoneyCode.ListTables.ListTables
instance GHC.Classes.Eq Amazonka.HoneyCode.ListTables.ListTables
instance GHC.Generics.Generic Amazonka.HoneyCode.ListTables.ListTablesResponse
instance GHC.Show.Show Amazonka.HoneyCode.ListTables.ListTablesResponse
instance GHC.Read.Read Amazonka.HoneyCode.ListTables.ListTablesResponse
instance GHC.Classes.Eq Amazonka.HoneyCode.ListTables.ListTablesResponse
instance Amazonka.Types.AWSRequest Amazonka.HoneyCode.ListTables.ListTables
instance Control.DeepSeq.NFData Amazonka.HoneyCode.ListTables.ListTablesResponse
instance Amazonka.Pager.AWSPager Amazonka.HoneyCode.ListTables.ListTables
instance Data.Hashable.Class.Hashable Amazonka.HoneyCode.ListTables.ListTables
instance Control.DeepSeq.NFData Amazonka.HoneyCode.ListTables.ListTables
instance Amazonka.Data.Headers.ToHeaders Amazonka.HoneyCode.ListTables.ListTables
instance Amazonka.Data.Path.ToPath Amazonka.HoneyCode.ListTables.ListTables
instance Amazonka.Data.Query.ToQuery Amazonka.HoneyCode.ListTables.ListTables


-- | The ListTableRows API allows you to retrieve a list of all the rows in
--   a table in a workbook.
--   
--   This operation returns paginated results.
module Amazonka.HoneyCode.ListTableRows

-- | <i>See:</i> <a>newListTableRows</a> smart constructor.
data ListTableRows
ListTableRows' :: Maybe (NonEmpty Text) -> Maybe Text -> Maybe Natural -> Text -> Text -> ListTableRows

-- | This parameter is optional. If one or more row ids are specified in
--   this list, then only the specified row ids are returned in the result.
--   If no row ids are specified here, then all the rows in the table are
--   returned.
[$sel:rowIds:ListTableRows'] :: ListTableRows -> Maybe (NonEmpty Text)

-- | This parameter is optional. If a nextToken is not specified, the API
--   returns the first page of data.
--   
--   Pagination tokens expire after 1 hour. If you use a token that was
--   returned more than an hour back, the API will throw
--   ValidationException.
[$sel:nextToken:ListTableRows'] :: ListTableRows -> Maybe Text

-- | The maximum number of rows to return in each page of the results.
[$sel:maxResults:ListTableRows'] :: ListTableRows -> Maybe Natural

-- | The ID of the workbook that contains the table whose rows are being
--   retrieved.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
[$sel:workbookId:ListTableRows'] :: ListTableRows -> Text

-- | The ID of the table whose rows are being retrieved.
--   
--   If a table with the specified id could not be found, this API throws
--   ResourceNotFoundException.
[$sel:tableId:ListTableRows'] :: ListTableRows -> Text

-- | Create a value of <a>ListTableRows</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rowIds:ListTableRows'</a>, <a>listTableRows_rowIds</a> - This
--   parameter is optional. If one or more row ids are specified in this
--   list, then only the specified row ids are returned in the result. If
--   no row ids are specified here, then all the rows in the table are
--   returned.
--   
--   <a>$sel:nextToken:ListTableRows'</a>, <a>listTableRows_nextToken</a> -
--   This parameter is optional. If a nextToken is not specified, the API
--   returns the first page of data.
--   
--   Pagination tokens expire after 1 hour. If you use a token that was
--   returned more than an hour back, the API will throw
--   ValidationException.
--   
--   <a>$sel:maxResults:ListTableRows'</a>, <a>listTableRows_maxResults</a>
--   - The maximum number of rows to return in each page of the results.
--   
--   <a>$sel:workbookId:ListTableRows'</a>, <a>listTableRows_workbookId</a>
--   - The ID of the workbook that contains the table whose rows are being
--   retrieved.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
--   
--   <a>$sel:tableId:ListTableRows'</a>, <a>listTableRows_tableId</a> - The
--   ID of the table whose rows are being retrieved.
--   
--   If a table with the specified id could not be found, this API throws
--   ResourceNotFoundException.
newListTableRows :: Text -> Text -> ListTableRows

-- | This parameter is optional. If one or more row ids are specified in
--   this list, then only the specified row ids are returned in the result.
--   If no row ids are specified here, then all the rows in the table are
--   returned.
listTableRows_rowIds :: Lens' ListTableRows (Maybe (NonEmpty Text))

-- | This parameter is optional. If a nextToken is not specified, the API
--   returns the first page of data.
--   
--   Pagination tokens expire after 1 hour. If you use a token that was
--   returned more than an hour back, the API will throw
--   ValidationException.
listTableRows_nextToken :: Lens' ListTableRows (Maybe Text)

-- | The maximum number of rows to return in each page of the results.
listTableRows_maxResults :: Lens' ListTableRows (Maybe Natural)

-- | The ID of the workbook that contains the table whose rows are being
--   retrieved.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
listTableRows_workbookId :: Lens' ListTableRows Text

-- | The ID of the table whose rows are being retrieved.
--   
--   If a table with the specified id could not be found, this API throws
--   ResourceNotFoundException.
listTableRows_tableId :: Lens' ListTableRows Text

-- | <i>See:</i> <a>newListTableRowsResponse</a> smart constructor.
data ListTableRowsResponse
ListTableRowsResponse' :: Maybe (NonEmpty Text) -> Maybe Text -> Int -> NonEmpty Text -> [TableRow] -> Integer -> ListTableRowsResponse

-- | The list of row ids included in the request that were not found in the
--   table.
[$sel:rowIdsNotFound:ListTableRowsResponse'] :: ListTableRowsResponse -> Maybe (NonEmpty Text)

-- | Provides the pagination token to load the next page if there are more
--   results matching the request. If a pagination token is not present in
--   the response, it means that all data matching the request has been
--   loaded.
[$sel:nextToken:ListTableRowsResponse'] :: ListTableRowsResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:ListTableRowsResponse'] :: ListTableRowsResponse -> Int

-- | The list of columns in the table whose row data is returned in the
--   result.
[$sel:columnIds:ListTableRowsResponse'] :: ListTableRowsResponse -> NonEmpty Text

-- | The list of rows in the table. Note that this result is paginated, so
--   this list contains a maximum of 100 rows.
[$sel:rows:ListTableRowsResponse'] :: ListTableRowsResponse -> [TableRow]

-- | Indicates the cursor of the workbook at which the data returned by
--   this request is read. Workbook cursor keeps increasing with every
--   update and the increments are not sequential.
[$sel:workbookCursor:ListTableRowsResponse'] :: ListTableRowsResponse -> Integer

-- | Create a value of <a>ListTableRowsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rowIdsNotFound:ListTableRowsResponse'</a>,
--   <a>listTableRowsResponse_rowIdsNotFound</a> - The list of row ids
--   included in the request that were not found in the table.
--   
--   <a>$sel:nextToken:ListTableRows'</a>,
--   <a>listTableRowsResponse_nextToken</a> - Provides the pagination token
--   to load the next page if there are more results matching the request.
--   If a pagination token is not present in the response, it means that
--   all data matching the request has been loaded.
--   
--   <a>$sel:httpStatus:ListTableRowsResponse'</a>,
--   <a>listTableRowsResponse_httpStatus</a> - The response's http status
--   code.
--   
--   <a>$sel:columnIds:ListTableRowsResponse'</a>,
--   <a>listTableRowsResponse_columnIds</a> - The list of columns in the
--   table whose row data is returned in the result.
--   
--   <a>$sel:rows:ListTableRowsResponse'</a>,
--   <a>listTableRowsResponse_rows</a> - The list of rows in the table.
--   Note that this result is paginated, so this list contains a maximum of
--   100 rows.
--   
--   <a>$sel:workbookCursor:ListTableRowsResponse'</a>,
--   <a>listTableRowsResponse_workbookCursor</a> - Indicates the cursor of
--   the workbook at which the data returned by this request is read.
--   Workbook cursor keeps increasing with every update and the increments
--   are not sequential.
newListTableRowsResponse :: Int -> NonEmpty Text -> Integer -> ListTableRowsResponse

-- | The list of row ids included in the request that were not found in the
--   table.
listTableRowsResponse_rowIdsNotFound :: Lens' ListTableRowsResponse (Maybe (NonEmpty Text))

-- | Provides the pagination token to load the next page if there are more
--   results matching the request. If a pagination token is not present in
--   the response, it means that all data matching the request has been
--   loaded.
listTableRowsResponse_nextToken :: Lens' ListTableRowsResponse (Maybe Text)

-- | The response's http status code.
listTableRowsResponse_httpStatus :: Lens' ListTableRowsResponse Int

-- | The list of columns in the table whose row data is returned in the
--   result.
listTableRowsResponse_columnIds :: Lens' ListTableRowsResponse (NonEmpty Text)

-- | The list of rows in the table. Note that this result is paginated, so
--   this list contains a maximum of 100 rows.
listTableRowsResponse_rows :: Lens' ListTableRowsResponse [TableRow]

-- | Indicates the cursor of the workbook at which the data returned by
--   this request is read. Workbook cursor keeps increasing with every
--   update and the increments are not sequential.
listTableRowsResponse_workbookCursor :: Lens' ListTableRowsResponse Integer
instance GHC.Generics.Generic Amazonka.HoneyCode.ListTableRows.ListTableRows
instance GHC.Show.Show Amazonka.HoneyCode.ListTableRows.ListTableRows
instance GHC.Read.Read Amazonka.HoneyCode.ListTableRows.ListTableRows
instance GHC.Classes.Eq Amazonka.HoneyCode.ListTableRows.ListTableRows
instance GHC.Generics.Generic Amazonka.HoneyCode.ListTableRows.ListTableRowsResponse
instance GHC.Show.Show Amazonka.HoneyCode.ListTableRows.ListTableRowsResponse
instance GHC.Classes.Eq Amazonka.HoneyCode.ListTableRows.ListTableRowsResponse
instance Amazonka.Types.AWSRequest Amazonka.HoneyCode.ListTableRows.ListTableRows
instance Control.DeepSeq.NFData Amazonka.HoneyCode.ListTableRows.ListTableRowsResponse
instance Amazonka.Pager.AWSPager Amazonka.HoneyCode.ListTableRows.ListTableRows
instance Data.Hashable.Class.Hashable Amazonka.HoneyCode.ListTableRows.ListTableRows
instance Control.DeepSeq.NFData Amazonka.HoneyCode.ListTableRows.ListTableRows
instance Amazonka.Data.Headers.ToHeaders Amazonka.HoneyCode.ListTableRows.ListTableRows
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.HoneyCode.ListTableRows.ListTableRows
instance Amazonka.Data.Path.ToPath Amazonka.HoneyCode.ListTableRows.ListTableRows
instance Amazonka.Data.Query.ToQuery Amazonka.HoneyCode.ListTableRows.ListTableRows


-- | The ListTableColumns API allows you to retrieve a list of all the
--   columns in a table in a workbook.
--   
--   This operation returns paginated results.
module Amazonka.HoneyCode.ListTableColumns

-- | <i>See:</i> <a>newListTableColumns</a> smart constructor.
data ListTableColumns
ListTableColumns' :: Maybe Text -> Text -> Text -> ListTableColumns

-- | This parameter is optional. If a nextToken is not specified, the API
--   returns the first page of data.
--   
--   Pagination tokens expire after 1 hour. If you use a token that was
--   returned more than an hour back, the API will throw
--   ValidationException.
[$sel:nextToken:ListTableColumns'] :: ListTableColumns -> Maybe Text

-- | The ID of the workbook that contains the table whose columns are being
--   retrieved.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
[$sel:workbookId:ListTableColumns'] :: ListTableColumns -> Text

-- | The ID of the table whose columns are being retrieved.
--   
--   If a table with the specified id could not be found, this API throws
--   ResourceNotFoundException.
[$sel:tableId:ListTableColumns'] :: ListTableColumns -> Text

-- | Create a value of <a>ListTableColumns</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListTableColumns'</a>,
--   <a>listTableColumns_nextToken</a> - This parameter is optional. If a
--   nextToken is not specified, the API returns the first page of data.
--   
--   Pagination tokens expire after 1 hour. If you use a token that was
--   returned more than an hour back, the API will throw
--   ValidationException.
--   
--   <a>$sel:workbookId:ListTableColumns'</a>,
--   <a>listTableColumns_workbookId</a> - The ID of the workbook that
--   contains the table whose columns are being retrieved.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
--   
--   <a>$sel:tableId:ListTableColumns'</a>, <a>listTableColumns_tableId</a>
--   - The ID of the table whose columns are being retrieved.
--   
--   If a table with the specified id could not be found, this API throws
--   ResourceNotFoundException.
newListTableColumns :: Text -> Text -> ListTableColumns

-- | This parameter is optional. If a nextToken is not specified, the API
--   returns the first page of data.
--   
--   Pagination tokens expire after 1 hour. If you use a token that was
--   returned more than an hour back, the API will throw
--   ValidationException.
listTableColumns_nextToken :: Lens' ListTableColumns (Maybe Text)

-- | The ID of the workbook that contains the table whose columns are being
--   retrieved.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
listTableColumns_workbookId :: Lens' ListTableColumns Text

-- | The ID of the table whose columns are being retrieved.
--   
--   If a table with the specified id could not be found, this API throws
--   ResourceNotFoundException.
listTableColumns_tableId :: Lens' ListTableColumns Text

-- | <i>See:</i> <a>newListTableColumnsResponse</a> smart constructor.
data ListTableColumnsResponse
ListTableColumnsResponse' :: Maybe Text -> Maybe Integer -> Int -> [TableColumn] -> ListTableColumnsResponse

-- | Provides the pagination token to load the next page if there are more
--   results matching the request. If a pagination token is not present in
--   the response, it means that all data matching the request has been
--   loaded.
[$sel:nextToken:ListTableColumnsResponse'] :: ListTableColumnsResponse -> Maybe Text

-- | Indicates the cursor of the workbook at which the data returned by
--   this request is read. Workbook cursor keeps increasing with every
--   update and the increments are not sequential.
[$sel:workbookCursor:ListTableColumnsResponse'] :: ListTableColumnsResponse -> Maybe Integer

-- | The response's http status code.
[$sel:httpStatus:ListTableColumnsResponse'] :: ListTableColumnsResponse -> Int

-- | The list of columns in the table.
[$sel:tableColumns:ListTableColumnsResponse'] :: ListTableColumnsResponse -> [TableColumn]

-- | Create a value of <a>ListTableColumnsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListTableColumns'</a>,
--   <a>listTableColumnsResponse_nextToken</a> - Provides the pagination
--   token to load the next page if there are more results matching the
--   request. If a pagination token is not present in the response, it
--   means that all data matching the request has been loaded.
--   
--   <a>$sel:workbookCursor:ListTableColumnsResponse'</a>,
--   <a>listTableColumnsResponse_workbookCursor</a> - Indicates the cursor
--   of the workbook at which the data returned by this request is read.
--   Workbook cursor keeps increasing with every update and the increments
--   are not sequential.
--   
--   <a>$sel:httpStatus:ListTableColumnsResponse'</a>,
--   <a>listTableColumnsResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:tableColumns:ListTableColumnsResponse'</a>,
--   <a>listTableColumnsResponse_tableColumns</a> - The list of columns in
--   the table.
newListTableColumnsResponse :: Int -> ListTableColumnsResponse

-- | Provides the pagination token to load the next page if there are more
--   results matching the request. If a pagination token is not present in
--   the response, it means that all data matching the request has been
--   loaded.
listTableColumnsResponse_nextToken :: Lens' ListTableColumnsResponse (Maybe Text)

-- | Indicates the cursor of the workbook at which the data returned by
--   this request is read. Workbook cursor keeps increasing with every
--   update and the increments are not sequential.
listTableColumnsResponse_workbookCursor :: Lens' ListTableColumnsResponse (Maybe Integer)

-- | The response's http status code.
listTableColumnsResponse_httpStatus :: Lens' ListTableColumnsResponse Int

-- | The list of columns in the table.
listTableColumnsResponse_tableColumns :: Lens' ListTableColumnsResponse [TableColumn]
instance GHC.Generics.Generic Amazonka.HoneyCode.ListTableColumns.ListTableColumns
instance GHC.Show.Show Amazonka.HoneyCode.ListTableColumns.ListTableColumns
instance GHC.Read.Read Amazonka.HoneyCode.ListTableColumns.ListTableColumns
instance GHC.Classes.Eq Amazonka.HoneyCode.ListTableColumns.ListTableColumns
instance GHC.Generics.Generic Amazonka.HoneyCode.ListTableColumns.ListTableColumnsResponse
instance GHC.Show.Show Amazonka.HoneyCode.ListTableColumns.ListTableColumnsResponse
instance GHC.Read.Read Amazonka.HoneyCode.ListTableColumns.ListTableColumnsResponse
instance GHC.Classes.Eq Amazonka.HoneyCode.ListTableColumns.ListTableColumnsResponse
instance Amazonka.Types.AWSRequest Amazonka.HoneyCode.ListTableColumns.ListTableColumns
instance Control.DeepSeq.NFData Amazonka.HoneyCode.ListTableColumns.ListTableColumnsResponse
instance Amazonka.Pager.AWSPager Amazonka.HoneyCode.ListTableColumns.ListTableColumns
instance Data.Hashable.Class.Hashable Amazonka.HoneyCode.ListTableColumns.ListTableColumns
instance Control.DeepSeq.NFData Amazonka.HoneyCode.ListTableColumns.ListTableColumns
instance Amazonka.Data.Headers.ToHeaders Amazonka.HoneyCode.ListTableColumns.ListTableColumns
instance Amazonka.Data.Path.ToPath Amazonka.HoneyCode.ListTableColumns.ListTableColumns
instance Amazonka.Data.Query.ToQuery Amazonka.HoneyCode.ListTableColumns.ListTableColumns


-- | The InvokeScreenAutomation API allows invoking an action defined in a
--   screen in a Honeycode app. The API allows setting local variables,
--   which can then be used in the automation being invoked. This allows
--   automating the Honeycode app interactions to write, update or delete
--   data in the workbook.
module Amazonka.HoneyCode.InvokeScreenAutomation

-- | <i>See:</i> <a>newInvokeScreenAutomation</a> smart constructor.
data InvokeScreenAutomation
InvokeScreenAutomation' :: Maybe Text -> Maybe (Sensitive (HashMap Text (Sensitive VariableValue))) -> Maybe Text -> Text -> Text -> Text -> Text -> InvokeScreenAutomation

-- | The row ID for the automation if the automation is defined inside a
--   block with source or list.
[$sel:rowId:InvokeScreenAutomation'] :: InvokeScreenAutomation -> Maybe Text

-- | Variables are specified as a map where the key is the name of the
--   variable as defined on the screen. The value is an object which
--   currently has only one property, rawValue, which holds the value of
--   the variable to be passed to the screen. Any variables defined in a
--   screen are required to be passed in the call.
[$sel:variables:InvokeScreenAutomation'] :: InvokeScreenAutomation -> Maybe (Sensitive (HashMap Text (Sensitive VariableValue)))

-- | The request token for performing the automation action. Request tokens
--   help to identify duplicate requests. If a call times out or fails due
--   to a transient error like a failed network connection, you can retry
--   the call with the same request token. The service ensures that if the
--   first call using that request token is successfully performed, the
--   second call will return the response of the previous call rather than
--   performing the action again.
--   
--   Note that request tokens are valid only for a few minutes. You cannot
--   use request tokens to dedupe requests spanning hours or days.
[$sel:clientRequestToken:InvokeScreenAutomation'] :: InvokeScreenAutomation -> Maybe Text

-- | The ID of the workbook that contains the screen automation.
[$sel:workbookId:InvokeScreenAutomation'] :: InvokeScreenAutomation -> Text

-- | The ID of the app that contains the screen automation.
[$sel:appId:InvokeScreenAutomation'] :: InvokeScreenAutomation -> Text

-- | The ID of the screen that contains the screen automation.
[$sel:screenId:InvokeScreenAutomation'] :: InvokeScreenAutomation -> Text

-- | The ID of the automation action to be performed.
[$sel:screenAutomationId:InvokeScreenAutomation'] :: InvokeScreenAutomation -> Text

-- | Create a value of <a>InvokeScreenAutomation</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rowId:InvokeScreenAutomation'</a>,
--   <a>invokeScreenAutomation_rowId</a> - The row ID for the automation if
--   the automation is defined inside a block with source or list.
--   
--   <a>$sel:variables:InvokeScreenAutomation'</a>,
--   <a>invokeScreenAutomation_variables</a> - Variables are specified as a
--   map where the key is the name of the variable as defined on the
--   screen. The value is an object which currently has only one property,
--   rawValue, which holds the value of the variable to be passed to the
--   screen. Any variables defined in a screen are required to be passed in
--   the call.
--   
--   <a>$sel:clientRequestToken:InvokeScreenAutomation'</a>,
--   <a>invokeScreenAutomation_clientRequestToken</a> - The request token
--   for performing the automation action. Request tokens help to identify
--   duplicate requests. If a call times out or fails due to a transient
--   error like a failed network connection, you can retry the call with
--   the same request token. The service ensures that if the first call
--   using that request token is successfully performed, the second call
--   will return the response of the previous call rather than performing
--   the action again.
--   
--   Note that request tokens are valid only for a few minutes. You cannot
--   use request tokens to dedupe requests spanning hours or days.
--   
--   <a>$sel:workbookId:InvokeScreenAutomation'</a>,
--   <a>invokeScreenAutomation_workbookId</a> - The ID of the workbook that
--   contains the screen automation.
--   
--   <a>$sel:appId:InvokeScreenAutomation'</a>,
--   <a>invokeScreenAutomation_appId</a> - The ID of the app that contains
--   the screen automation.
--   
--   <a>$sel:screenId:InvokeScreenAutomation'</a>,
--   <a>invokeScreenAutomation_screenId</a> - The ID of the screen that
--   contains the screen automation.
--   
--   <a>$sel:screenAutomationId:InvokeScreenAutomation'</a>,
--   <a>invokeScreenAutomation_screenAutomationId</a> - The ID of the
--   automation action to be performed.
newInvokeScreenAutomation :: Text -> Text -> Text -> Text -> InvokeScreenAutomation

-- | The row ID for the automation if the automation is defined inside a
--   block with source or list.
invokeScreenAutomation_rowId :: Lens' InvokeScreenAutomation (Maybe Text)

-- | Variables are specified as a map where the key is the name of the
--   variable as defined on the screen. The value is an object which
--   currently has only one property, rawValue, which holds the value of
--   the variable to be passed to the screen. Any variables defined in a
--   screen are required to be passed in the call.
invokeScreenAutomation_variables :: Lens' InvokeScreenAutomation (Maybe (HashMap Text VariableValue))

-- | The request token for performing the automation action. Request tokens
--   help to identify duplicate requests. If a call times out or fails due
--   to a transient error like a failed network connection, you can retry
--   the call with the same request token. The service ensures that if the
--   first call using that request token is successfully performed, the
--   second call will return the response of the previous call rather than
--   performing the action again.
--   
--   Note that request tokens are valid only for a few minutes. You cannot
--   use request tokens to dedupe requests spanning hours or days.
invokeScreenAutomation_clientRequestToken :: Lens' InvokeScreenAutomation (Maybe Text)

-- | The ID of the workbook that contains the screen automation.
invokeScreenAutomation_workbookId :: Lens' InvokeScreenAutomation Text

-- | The ID of the app that contains the screen automation.
invokeScreenAutomation_appId :: Lens' InvokeScreenAutomation Text

-- | The ID of the screen that contains the screen automation.
invokeScreenAutomation_screenId :: Lens' InvokeScreenAutomation Text

-- | The ID of the automation action to be performed.
invokeScreenAutomation_screenAutomationId :: Lens' InvokeScreenAutomation Text

-- | <i>See:</i> <a>newInvokeScreenAutomationResponse</a> smart
--   constructor.
data InvokeScreenAutomationResponse
InvokeScreenAutomationResponse' :: Int -> Integer -> InvokeScreenAutomationResponse

-- | The response's http status code.
[$sel:httpStatus:InvokeScreenAutomationResponse'] :: InvokeScreenAutomationResponse -> Int

-- | The updated workbook cursor after performing the automation action.
[$sel:workbookCursor:InvokeScreenAutomationResponse'] :: InvokeScreenAutomationResponse -> Integer

-- | Create a value of <a>InvokeScreenAutomationResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:InvokeScreenAutomationResponse'</a>,
--   <a>invokeScreenAutomationResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:workbookCursor:InvokeScreenAutomationResponse'</a>,
--   <a>invokeScreenAutomationResponse_workbookCursor</a> - The updated
--   workbook cursor after performing the automation action.
newInvokeScreenAutomationResponse :: Int -> Integer -> InvokeScreenAutomationResponse

-- | The response's http status code.
invokeScreenAutomationResponse_httpStatus :: Lens' InvokeScreenAutomationResponse Int

-- | The updated workbook cursor after performing the automation action.
invokeScreenAutomationResponse_workbookCursor :: Lens' InvokeScreenAutomationResponse Integer
instance GHC.Generics.Generic Amazonka.HoneyCode.InvokeScreenAutomation.InvokeScreenAutomation
instance GHC.Show.Show Amazonka.HoneyCode.InvokeScreenAutomation.InvokeScreenAutomation
instance GHC.Classes.Eq Amazonka.HoneyCode.InvokeScreenAutomation.InvokeScreenAutomation
instance GHC.Generics.Generic Amazonka.HoneyCode.InvokeScreenAutomation.InvokeScreenAutomationResponse
instance GHC.Show.Show Amazonka.HoneyCode.InvokeScreenAutomation.InvokeScreenAutomationResponse
instance GHC.Read.Read Amazonka.HoneyCode.InvokeScreenAutomation.InvokeScreenAutomationResponse
instance GHC.Classes.Eq Amazonka.HoneyCode.InvokeScreenAutomation.InvokeScreenAutomationResponse
instance Amazonka.Types.AWSRequest Amazonka.HoneyCode.InvokeScreenAutomation.InvokeScreenAutomation
instance Control.DeepSeq.NFData Amazonka.HoneyCode.InvokeScreenAutomation.InvokeScreenAutomationResponse
instance Data.Hashable.Class.Hashable Amazonka.HoneyCode.InvokeScreenAutomation.InvokeScreenAutomation
instance Control.DeepSeq.NFData Amazonka.HoneyCode.InvokeScreenAutomation.InvokeScreenAutomation
instance Amazonka.Data.Headers.ToHeaders Amazonka.HoneyCode.InvokeScreenAutomation.InvokeScreenAutomation
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.HoneyCode.InvokeScreenAutomation.InvokeScreenAutomation
instance Amazonka.Data.Path.ToPath Amazonka.HoneyCode.InvokeScreenAutomation.InvokeScreenAutomation
instance Amazonka.Data.Query.ToQuery Amazonka.HoneyCode.InvokeScreenAutomation.InvokeScreenAutomation


-- | The GetScreenData API allows retrieval of data from a screen in a
--   Honeycode app. The API allows setting local variables in the screen to
--   filter, sort or otherwise affect what will be displayed on the screen.
module Amazonka.HoneyCode.GetScreenData

-- | <i>See:</i> <a>newGetScreenData</a> smart constructor.
data GetScreenData
GetScreenData' :: Maybe (Sensitive (HashMap Text (Sensitive VariableValue))) -> Maybe Text -> Maybe Natural -> Text -> Text -> Text -> GetScreenData

-- | Variables are optional and are needed only if the screen requires them
--   to render correctly. Variables are specified as a map where the key is
--   the name of the variable as defined on the screen. The value is an
--   object which currently has only one property, rawValue, which holds
--   the value of the variable to be passed to the screen.
[$sel:variables:GetScreenData'] :: GetScreenData -> Maybe (Sensitive (HashMap Text (Sensitive VariableValue)))

-- | This parameter is optional. If a nextToken is not specified, the API
--   returns the first page of data.
--   
--   Pagination tokens expire after 1 hour. If you use a token that was
--   returned more than an hour back, the API will throw
--   ValidationException.
[$sel:nextToken:GetScreenData'] :: GetScreenData -> Maybe Text

-- | The number of results to be returned on a single page. Specify a
--   number between 1 and 100. The maximum value is 100.
--   
--   This parameter is optional. If you don't specify this parameter, the
--   default page size is 100.
[$sel:maxResults:GetScreenData'] :: GetScreenData -> Maybe Natural

-- | The ID of the workbook that contains the screen.
[$sel:workbookId:GetScreenData'] :: GetScreenData -> Text

-- | The ID of the app that contains the screem.
[$sel:appId:GetScreenData'] :: GetScreenData -> Text

-- | The ID of the screen.
[$sel:screenId:GetScreenData'] :: GetScreenData -> Text

-- | Create a value of <a>GetScreenData</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:variables:GetScreenData'</a>, <a>getScreenData_variables</a> -
--   Variables are optional and are needed only if the screen requires them
--   to render correctly. Variables are specified as a map where the key is
--   the name of the variable as defined on the screen. The value is an
--   object which currently has only one property, rawValue, which holds
--   the value of the variable to be passed to the screen.
--   
--   <a>$sel:nextToken:GetScreenData'</a>, <a>getScreenData_nextToken</a> -
--   This parameter is optional. If a nextToken is not specified, the API
--   returns the first page of data.
--   
--   Pagination tokens expire after 1 hour. If you use a token that was
--   returned more than an hour back, the API will throw
--   ValidationException.
--   
--   <a>$sel:maxResults:GetScreenData'</a>, <a>getScreenData_maxResults</a>
--   - The number of results to be returned on a single page. Specify a
--   number between 1 and 100. The maximum value is 100.
--   
--   This parameter is optional. If you don't specify this parameter, the
--   default page size is 100.
--   
--   <a>$sel:workbookId:GetScreenData'</a>, <a>getScreenData_workbookId</a>
--   - The ID of the workbook that contains the screen.
--   
--   <a>$sel:appId:GetScreenData'</a>, <a>getScreenData_appId</a> - The ID
--   of the app that contains the screem.
--   
--   <a>$sel:screenId:GetScreenData'</a>, <a>getScreenData_screenId</a> -
--   The ID of the screen.
newGetScreenData :: Text -> Text -> Text -> GetScreenData

-- | Variables are optional and are needed only if the screen requires them
--   to render correctly. Variables are specified as a map where the key is
--   the name of the variable as defined on the screen. The value is an
--   object which currently has only one property, rawValue, which holds
--   the value of the variable to be passed to the screen.
getScreenData_variables :: Lens' GetScreenData (Maybe (HashMap Text VariableValue))

-- | This parameter is optional. If a nextToken is not specified, the API
--   returns the first page of data.
--   
--   Pagination tokens expire after 1 hour. If you use a token that was
--   returned more than an hour back, the API will throw
--   ValidationException.
getScreenData_nextToken :: Lens' GetScreenData (Maybe Text)

-- | The number of results to be returned on a single page. Specify a
--   number between 1 and 100. The maximum value is 100.
--   
--   This parameter is optional. If you don't specify this parameter, the
--   default page size is 100.
getScreenData_maxResults :: Lens' GetScreenData (Maybe Natural)

-- | The ID of the workbook that contains the screen.
getScreenData_workbookId :: Lens' GetScreenData Text

-- | The ID of the app that contains the screem.
getScreenData_appId :: Lens' GetScreenData Text

-- | The ID of the screen.
getScreenData_screenId :: Lens' GetScreenData Text

-- | <i>See:</i> <a>newGetScreenDataResponse</a> smart constructor.
data GetScreenDataResponse
GetScreenDataResponse' :: Maybe Text -> Int -> HashMap Text ResultSet -> Integer -> GetScreenDataResponse

-- | Provides the pagination token to load the next page if there are more
--   results matching the request. If a pagination token is not present in
--   the response, it means that all data matching the query has been
--   loaded.
[$sel:nextToken:GetScreenDataResponse'] :: GetScreenDataResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:GetScreenDataResponse'] :: GetScreenDataResponse -> Int

-- | A map of all the rows on the screen keyed by block name.
[$sel:results:GetScreenDataResponse'] :: GetScreenDataResponse -> HashMap Text ResultSet

-- | Indicates the cursor of the workbook at which the data returned by
--   this workbook is read. Workbook cursor keeps increasing with every
--   update and the increments are not sequential.
[$sel:workbookCursor:GetScreenDataResponse'] :: GetScreenDataResponse -> Integer

-- | Create a value of <a>GetScreenDataResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:GetScreenData'</a>,
--   <a>getScreenDataResponse_nextToken</a> - Provides the pagination token
--   to load the next page if there are more results matching the request.
--   If a pagination token is not present in the response, it means that
--   all data matching the query has been loaded.
--   
--   <a>$sel:httpStatus:GetScreenDataResponse'</a>,
--   <a>getScreenDataResponse_httpStatus</a> - The response's http status
--   code.
--   
--   <a>$sel:results:GetScreenDataResponse'</a>,
--   <a>getScreenDataResponse_results</a> - A map of all the rows on the
--   screen keyed by block name.
--   
--   <a>$sel:workbookCursor:GetScreenDataResponse'</a>,
--   <a>getScreenDataResponse_workbookCursor</a> - Indicates the cursor of
--   the workbook at which the data returned by this workbook is read.
--   Workbook cursor keeps increasing with every update and the increments
--   are not sequential.
newGetScreenDataResponse :: Int -> Integer -> GetScreenDataResponse

-- | Provides the pagination token to load the next page if there are more
--   results matching the request. If a pagination token is not present in
--   the response, it means that all data matching the query has been
--   loaded.
getScreenDataResponse_nextToken :: Lens' GetScreenDataResponse (Maybe Text)

-- | The response's http status code.
getScreenDataResponse_httpStatus :: Lens' GetScreenDataResponse Int

-- | A map of all the rows on the screen keyed by block name.
getScreenDataResponse_results :: Lens' GetScreenDataResponse (HashMap Text ResultSet)

-- | Indicates the cursor of the workbook at which the data returned by
--   this workbook is read. Workbook cursor keeps increasing with every
--   update and the increments are not sequential.
getScreenDataResponse_workbookCursor :: Lens' GetScreenDataResponse Integer
instance GHC.Generics.Generic Amazonka.HoneyCode.GetScreenData.GetScreenData
instance GHC.Show.Show Amazonka.HoneyCode.GetScreenData.GetScreenData
instance GHC.Classes.Eq Amazonka.HoneyCode.GetScreenData.GetScreenData
instance GHC.Generics.Generic Amazonka.HoneyCode.GetScreenData.GetScreenDataResponse
instance GHC.Show.Show Amazonka.HoneyCode.GetScreenData.GetScreenDataResponse
instance GHC.Classes.Eq Amazonka.HoneyCode.GetScreenData.GetScreenDataResponse
instance Amazonka.Types.AWSRequest Amazonka.HoneyCode.GetScreenData.GetScreenData
instance Control.DeepSeq.NFData Amazonka.HoneyCode.GetScreenData.GetScreenDataResponse
instance Data.Hashable.Class.Hashable Amazonka.HoneyCode.GetScreenData.GetScreenData
instance Control.DeepSeq.NFData Amazonka.HoneyCode.GetScreenData.GetScreenData
instance Amazonka.Data.Headers.ToHeaders Amazonka.HoneyCode.GetScreenData.GetScreenData
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.HoneyCode.GetScreenData.GetScreenData
instance Amazonka.Data.Path.ToPath Amazonka.HoneyCode.GetScreenData.GetScreenData
instance Amazonka.Data.Query.ToQuery Amazonka.HoneyCode.GetScreenData.GetScreenData


-- | The DescribeTableDataImportJob API allows you to retrieve the status
--   and details of a table data import job.
module Amazonka.HoneyCode.DescribeTableDataImportJob

-- | <i>See:</i> <a>newDescribeTableDataImportJob</a> smart constructor.
data DescribeTableDataImportJob
DescribeTableDataImportJob' :: Text -> Text -> Text -> DescribeTableDataImportJob

-- | The ID of the workbook into which data was imported.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
[$sel:workbookId:DescribeTableDataImportJob'] :: DescribeTableDataImportJob -> Text

-- | The ID of the table into which data was imported.
--   
--   If a table with the specified id could not be found, this API throws
--   ResourceNotFoundException.
[$sel:tableId:DescribeTableDataImportJob'] :: DescribeTableDataImportJob -> Text

-- | The ID of the job that was returned by the StartTableDataImportJob
--   request.
--   
--   If a job with the specified id could not be found, this API throws
--   ResourceNotFoundException.
[$sel:jobId:DescribeTableDataImportJob'] :: DescribeTableDataImportJob -> Text

-- | Create a value of <a>DescribeTableDataImportJob</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:workbookId:DescribeTableDataImportJob'</a>,
--   <a>describeTableDataImportJob_workbookId</a> - The ID of the workbook
--   into which data was imported.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
--   
--   <a>$sel:tableId:DescribeTableDataImportJob'</a>,
--   <a>describeTableDataImportJob_tableId</a> - The ID of the table into
--   which data was imported.
--   
--   If a table with the specified id could not be found, this API throws
--   ResourceNotFoundException.
--   
--   <a>$sel:jobId:DescribeTableDataImportJob'</a>,
--   <a>describeTableDataImportJob_jobId</a> - The ID of the job that was
--   returned by the StartTableDataImportJob request.
--   
--   If a job with the specified id could not be found, this API throws
--   ResourceNotFoundException.
newDescribeTableDataImportJob :: Text -> Text -> Text -> DescribeTableDataImportJob

-- | The ID of the workbook into which data was imported.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
describeTableDataImportJob_workbookId :: Lens' DescribeTableDataImportJob Text

-- | The ID of the table into which data was imported.
--   
--   If a table with the specified id could not be found, this API throws
--   ResourceNotFoundException.
describeTableDataImportJob_tableId :: Lens' DescribeTableDataImportJob Text

-- | The ID of the job that was returned by the StartTableDataImportJob
--   request.
--   
--   If a job with the specified id could not be found, this API throws
--   ResourceNotFoundException.
describeTableDataImportJob_jobId :: Lens' DescribeTableDataImportJob Text

-- | <i>See:</i> <a>newDescribeTableDataImportJobResponse</a> smart
--   constructor.
data DescribeTableDataImportJobResponse
DescribeTableDataImportJobResponse' :: Int -> TableDataImportJobStatus -> Text -> TableDataImportJobMetadata -> DescribeTableDataImportJobResponse

-- | The response's http status code.
[$sel:httpStatus:DescribeTableDataImportJobResponse'] :: DescribeTableDataImportJobResponse -> Int

-- | The current status of the import job.
[$sel:jobStatus:DescribeTableDataImportJobResponse'] :: DescribeTableDataImportJobResponse -> TableDataImportJobStatus

-- | A message providing more details about the current status of the
--   import job.
[$sel:message:DescribeTableDataImportJobResponse'] :: DescribeTableDataImportJobResponse -> Text

-- | The metadata about the job that was submitted for import.
[$sel:jobMetadata:DescribeTableDataImportJobResponse'] :: DescribeTableDataImportJobResponse -> TableDataImportJobMetadata

-- | Create a value of <a>DescribeTableDataImportJobResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DescribeTableDataImportJobResponse'</a>,
--   <a>describeTableDataImportJobResponse_httpStatus</a> - The response's
--   http status code.
--   
--   <a>$sel:jobStatus:DescribeTableDataImportJobResponse'</a>,
--   <a>describeTableDataImportJobResponse_jobStatus</a> - The current
--   status of the import job.
--   
--   <a>$sel:message:DescribeTableDataImportJobResponse'</a>,
--   <a>describeTableDataImportJobResponse_message</a> - A message
--   providing more details about the current status of the import job.
--   
--   <a>$sel:jobMetadata:DescribeTableDataImportJobResponse'</a>,
--   <a>describeTableDataImportJobResponse_jobMetadata</a> - The metadata
--   about the job that was submitted for import.
newDescribeTableDataImportJobResponse :: Int -> TableDataImportJobStatus -> Text -> TableDataImportJobMetadata -> DescribeTableDataImportJobResponse

-- | The response's http status code.
describeTableDataImportJobResponse_httpStatus :: Lens' DescribeTableDataImportJobResponse Int

-- | The current status of the import job.
describeTableDataImportJobResponse_jobStatus :: Lens' DescribeTableDataImportJobResponse TableDataImportJobStatus

-- | A message providing more details about the current status of the
--   import job.
describeTableDataImportJobResponse_message :: Lens' DescribeTableDataImportJobResponse Text

-- | The metadata about the job that was submitted for import.
describeTableDataImportJobResponse_jobMetadata :: Lens' DescribeTableDataImportJobResponse TableDataImportJobMetadata
instance GHC.Generics.Generic Amazonka.HoneyCode.DescribeTableDataImportJob.DescribeTableDataImportJob
instance GHC.Show.Show Amazonka.HoneyCode.DescribeTableDataImportJob.DescribeTableDataImportJob
instance GHC.Read.Read Amazonka.HoneyCode.DescribeTableDataImportJob.DescribeTableDataImportJob
instance GHC.Classes.Eq Amazonka.HoneyCode.DescribeTableDataImportJob.DescribeTableDataImportJob
instance GHC.Generics.Generic Amazonka.HoneyCode.DescribeTableDataImportJob.DescribeTableDataImportJobResponse
instance GHC.Show.Show Amazonka.HoneyCode.DescribeTableDataImportJob.DescribeTableDataImportJobResponse
instance GHC.Classes.Eq Amazonka.HoneyCode.DescribeTableDataImportJob.DescribeTableDataImportJobResponse
instance Amazonka.Types.AWSRequest Amazonka.HoneyCode.DescribeTableDataImportJob.DescribeTableDataImportJob
instance Control.DeepSeq.NFData Amazonka.HoneyCode.DescribeTableDataImportJob.DescribeTableDataImportJobResponse
instance Data.Hashable.Class.Hashable Amazonka.HoneyCode.DescribeTableDataImportJob.DescribeTableDataImportJob
instance Control.DeepSeq.NFData Amazonka.HoneyCode.DescribeTableDataImportJob.DescribeTableDataImportJob
instance Amazonka.Data.Headers.ToHeaders Amazonka.HoneyCode.DescribeTableDataImportJob.DescribeTableDataImportJob
instance Amazonka.Data.Path.ToPath Amazonka.HoneyCode.DescribeTableDataImportJob.DescribeTableDataImportJob
instance Amazonka.Data.Query.ToQuery Amazonka.HoneyCode.DescribeTableDataImportJob.DescribeTableDataImportJob


-- | The BatchUpsertTableRows API allows you to upsert one or more rows in
--   a table. The upsert operation takes a filter expression as input and
--   evaluates it to find matching rows on the destination table. If
--   matching rows are found, it will update the cells in the matching rows
--   to new values specified in the request. If no matching rows are found,
--   a new row is added at the end of the table and the cells in that row
--   are set to the new values specified in the request.
--   
--   You can specify the values to set in some or all of the columns in the
--   table for the matching or newly appended rows. If a column is not
--   explicitly specified for a particular row, then that column will not
--   be updated for that row. To clear out the data in a specific cell, you
--   need to set the value as an empty string ("").
module Amazonka.HoneyCode.BatchUpsertTableRows

-- | <i>See:</i> <a>newBatchUpsertTableRows</a> smart constructor.
data BatchUpsertTableRows
BatchUpsertTableRows' :: Maybe Text -> Text -> Text -> [UpsertRowData] -> BatchUpsertTableRows

-- | The request token for performing the update action. Request tokens
--   help to identify duplicate requests. If a call times out or fails due
--   to a transient error like a failed network connection, you can retry
--   the call with the same request token. The service ensures that if the
--   first call using that request token is successfully performed, the
--   second call will not perform the action again.
--   
--   Note that request tokens are valid only for a few minutes. You cannot
--   use request tokens to dedupe requests spanning hours or days.
[$sel:clientRequestToken:BatchUpsertTableRows'] :: BatchUpsertTableRows -> Maybe Text

-- | The ID of the workbook where the rows are being upserted.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
[$sel:workbookId:BatchUpsertTableRows'] :: BatchUpsertTableRows -> Text

-- | The ID of the table where the rows are being upserted.
--   
--   If a table with the specified id could not be found, this API throws
--   ResourceNotFoundException.
[$sel:tableId:BatchUpsertTableRows'] :: BatchUpsertTableRows -> Text

-- | The list of rows to upsert in the table. Each item in this list needs
--   to have a batch item id to uniquely identify the element in the
--   request, a filter expression to find the rows to update for that
--   element and the cell values to set for each column in the upserted
--   rows. You need to specify at least one item in this list.
--   
--   Note that if one of the filter formulas in the request fails to
--   evaluate because of an error or one of the column ids in any of the
--   rows does not exist in the table, then the request fails and no
--   updates are made to the table.
[$sel:rowsToUpsert:BatchUpsertTableRows'] :: BatchUpsertTableRows -> [UpsertRowData]

-- | Create a value of <a>BatchUpsertTableRows</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:clientRequestToken:BatchUpsertTableRows'</a>,
--   <a>batchUpsertTableRows_clientRequestToken</a> - The request token for
--   performing the update action. Request tokens help to identify
--   duplicate requests. If a call times out or fails due to a transient
--   error like a failed network connection, you can retry the call with
--   the same request token. The service ensures that if the first call
--   using that request token is successfully performed, the second call
--   will not perform the action again.
--   
--   Note that request tokens are valid only for a few minutes. You cannot
--   use request tokens to dedupe requests spanning hours or days.
--   
--   <a>$sel:workbookId:BatchUpsertTableRows'</a>,
--   <a>batchUpsertTableRows_workbookId</a> - The ID of the workbook where
--   the rows are being upserted.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
--   
--   <a>$sel:tableId:BatchUpsertTableRows'</a>,
--   <a>batchUpsertTableRows_tableId</a> - The ID of the table where the
--   rows are being upserted.
--   
--   If a table with the specified id could not be found, this API throws
--   ResourceNotFoundException.
--   
--   <a>$sel:rowsToUpsert:BatchUpsertTableRows'</a>,
--   <a>batchUpsertTableRows_rowsToUpsert</a> - The list of rows to upsert
--   in the table. Each item in this list needs to have a batch item id to
--   uniquely identify the element in the request, a filter expression to
--   find the rows to update for that element and the cell values to set
--   for each column in the upserted rows. You need to specify at least one
--   item in this list.
--   
--   Note that if one of the filter formulas in the request fails to
--   evaluate because of an error or one of the column ids in any of the
--   rows does not exist in the table, then the request fails and no
--   updates are made to the table.
newBatchUpsertTableRows :: Text -> Text -> BatchUpsertTableRows

-- | The request token for performing the update action. Request tokens
--   help to identify duplicate requests. If a call times out or fails due
--   to a transient error like a failed network connection, you can retry
--   the call with the same request token. The service ensures that if the
--   first call using that request token is successfully performed, the
--   second call will not perform the action again.
--   
--   Note that request tokens are valid only for a few minutes. You cannot
--   use request tokens to dedupe requests spanning hours or days.
batchUpsertTableRows_clientRequestToken :: Lens' BatchUpsertTableRows (Maybe Text)

-- | The ID of the workbook where the rows are being upserted.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
batchUpsertTableRows_workbookId :: Lens' BatchUpsertTableRows Text

-- | The ID of the table where the rows are being upserted.
--   
--   If a table with the specified id could not be found, this API throws
--   ResourceNotFoundException.
batchUpsertTableRows_tableId :: Lens' BatchUpsertTableRows Text

-- | The list of rows to upsert in the table. Each item in this list needs
--   to have a batch item id to uniquely identify the element in the
--   request, a filter expression to find the rows to update for that
--   element and the cell values to set for each column in the upserted
--   rows. You need to specify at least one item in this list.
--   
--   Note that if one of the filter formulas in the request fails to
--   evaluate because of an error or one of the column ids in any of the
--   rows does not exist in the table, then the request fails and no
--   updates are made to the table.
batchUpsertTableRows_rowsToUpsert :: Lens' BatchUpsertTableRows [UpsertRowData]

-- | <i>See:</i> <a>newBatchUpsertTableRowsResponse</a> smart constructor.
data BatchUpsertTableRowsResponse
BatchUpsertTableRowsResponse' :: Maybe [FailedBatchItem] -> Int -> HashMap Text UpsertRowsResult -> Integer -> BatchUpsertTableRowsResponse

-- | The list of batch items in the request that could not be updated or
--   appended in the table. Each element in this list contains one item
--   from the request that could not be updated in the table along with the
--   reason why that item could not be updated or appended.
[$sel:failedBatchItems:BatchUpsertTableRowsResponse'] :: BatchUpsertTableRowsResponse -> Maybe [FailedBatchItem]

-- | The response's http status code.
[$sel:httpStatus:BatchUpsertTableRowsResponse'] :: BatchUpsertTableRowsResponse -> Int

-- | A map with the batch item id as the key and the result of the upsert
--   operation as the value. The result of the upsert operation specifies
--   whether existing rows were updated or a new row was appended, along
--   with the list of row ids that were affected.
[$sel:rows:BatchUpsertTableRowsResponse'] :: BatchUpsertTableRowsResponse -> HashMap Text UpsertRowsResult

-- | The updated workbook cursor after updating or appending rows in the
--   table.
[$sel:workbookCursor:BatchUpsertTableRowsResponse'] :: BatchUpsertTableRowsResponse -> Integer

-- | Create a value of <a>BatchUpsertTableRowsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failedBatchItems:BatchUpsertTableRowsResponse'</a>,
--   <a>batchUpsertTableRowsResponse_failedBatchItems</a> - The list of
--   batch items in the request that could not be updated or appended in
--   the table. Each element in this list contains one item from the
--   request that could not be updated in the table along with the reason
--   why that item could not be updated or appended.
--   
--   <a>$sel:httpStatus:BatchUpsertTableRowsResponse'</a>,
--   <a>batchUpsertTableRowsResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:rows:BatchUpsertTableRowsResponse'</a>,
--   <a>batchUpsertTableRowsResponse_rows</a> - A map with the batch item
--   id as the key and the result of the upsert operation as the value. The
--   result of the upsert operation specifies whether existing rows were
--   updated or a new row was appended, along with the list of row ids that
--   were affected.
--   
--   <a>$sel:workbookCursor:BatchUpsertTableRowsResponse'</a>,
--   <a>batchUpsertTableRowsResponse_workbookCursor</a> - The updated
--   workbook cursor after updating or appending rows in the table.
newBatchUpsertTableRowsResponse :: Int -> Integer -> BatchUpsertTableRowsResponse

-- | The list of batch items in the request that could not be updated or
--   appended in the table. Each element in this list contains one item
--   from the request that could not be updated in the table along with the
--   reason why that item could not be updated or appended.
batchUpsertTableRowsResponse_failedBatchItems :: Lens' BatchUpsertTableRowsResponse (Maybe [FailedBatchItem])

-- | The response's http status code.
batchUpsertTableRowsResponse_httpStatus :: Lens' BatchUpsertTableRowsResponse Int

-- | A map with the batch item id as the key and the result of the upsert
--   operation as the value. The result of the upsert operation specifies
--   whether existing rows were updated or a new row was appended, along
--   with the list of row ids that were affected.
batchUpsertTableRowsResponse_rows :: Lens' BatchUpsertTableRowsResponse (HashMap Text UpsertRowsResult)

-- | The updated workbook cursor after updating or appending rows in the
--   table.
batchUpsertTableRowsResponse_workbookCursor :: Lens' BatchUpsertTableRowsResponse Integer
instance GHC.Generics.Generic Amazonka.HoneyCode.BatchUpsertTableRows.BatchUpsertTableRows
instance GHC.Show.Show Amazonka.HoneyCode.BatchUpsertTableRows.BatchUpsertTableRows
instance GHC.Classes.Eq Amazonka.HoneyCode.BatchUpsertTableRows.BatchUpsertTableRows
instance GHC.Generics.Generic Amazonka.HoneyCode.BatchUpsertTableRows.BatchUpsertTableRowsResponse
instance GHC.Show.Show Amazonka.HoneyCode.BatchUpsertTableRows.BatchUpsertTableRowsResponse
instance GHC.Read.Read Amazonka.HoneyCode.BatchUpsertTableRows.BatchUpsertTableRowsResponse
instance GHC.Classes.Eq Amazonka.HoneyCode.BatchUpsertTableRows.BatchUpsertTableRowsResponse
instance Amazonka.Types.AWSRequest Amazonka.HoneyCode.BatchUpsertTableRows.BatchUpsertTableRows
instance Control.DeepSeq.NFData Amazonka.HoneyCode.BatchUpsertTableRows.BatchUpsertTableRowsResponse
instance Data.Hashable.Class.Hashable Amazonka.HoneyCode.BatchUpsertTableRows.BatchUpsertTableRows
instance Control.DeepSeq.NFData Amazonka.HoneyCode.BatchUpsertTableRows.BatchUpsertTableRows
instance Amazonka.Data.Headers.ToHeaders Amazonka.HoneyCode.BatchUpsertTableRows.BatchUpsertTableRows
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.HoneyCode.BatchUpsertTableRows.BatchUpsertTableRows
instance Amazonka.Data.Path.ToPath Amazonka.HoneyCode.BatchUpsertTableRows.BatchUpsertTableRows
instance Amazonka.Data.Query.ToQuery Amazonka.HoneyCode.BatchUpsertTableRows.BatchUpsertTableRows


-- | The BatchUpdateTableRows API allows you to update one or more rows in
--   a table in a workbook.
--   
--   You can specify the values to set in some or all of the columns in the
--   table for the specified rows. If a column is not explicitly specified
--   in a particular row, then that column will not be updated for that
--   row. To clear out the data in a specific cell, you need to set the
--   value as an empty string ("").
module Amazonka.HoneyCode.BatchUpdateTableRows

-- | <i>See:</i> <a>newBatchUpdateTableRows</a> smart constructor.
data BatchUpdateTableRows
BatchUpdateTableRows' :: Maybe Text -> Text -> Text -> NonEmpty UpdateRowData -> BatchUpdateTableRows

-- | The request token for performing the update action. Request tokens
--   help to identify duplicate requests. If a call times out or fails due
--   to a transient error like a failed network connection, you can retry
--   the call with the same request token. The service ensures that if the
--   first call using that request token is successfully performed, the
--   second call will not perform the action again.
--   
--   Note that request tokens are valid only for a few minutes. You cannot
--   use request tokens to dedupe requests spanning hours or days.
[$sel:clientRequestToken:BatchUpdateTableRows'] :: BatchUpdateTableRows -> Maybe Text

-- | The ID of the workbook where the rows are being updated.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
[$sel:workbookId:BatchUpdateTableRows'] :: BatchUpdateTableRows -> Text

-- | The ID of the table where the rows are being updated.
--   
--   If a table with the specified id could not be found, this API throws
--   ResourceNotFoundException.
[$sel:tableId:BatchUpdateTableRows'] :: BatchUpdateTableRows -> Text

-- | The list of rows to update in the table. Each item in this list needs
--   to contain the row id to update along with the map of column id to
--   cell values for each column in that row that needs to be updated. You
--   need to specify at least one row in this list, and for each row, you
--   need to specify at least one column to update.
--   
--   Note that if one of the row or column ids in the request does not
--   exist in the table, then the request fails and no updates are made to
--   the table.
[$sel:rowsToUpdate:BatchUpdateTableRows'] :: BatchUpdateTableRows -> NonEmpty UpdateRowData

-- | Create a value of <a>BatchUpdateTableRows</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:clientRequestToken:BatchUpdateTableRows'</a>,
--   <a>batchUpdateTableRows_clientRequestToken</a> - The request token for
--   performing the update action. Request tokens help to identify
--   duplicate requests. If a call times out or fails due to a transient
--   error like a failed network connection, you can retry the call with
--   the same request token. The service ensures that if the first call
--   using that request token is successfully performed, the second call
--   will not perform the action again.
--   
--   Note that request tokens are valid only for a few minutes. You cannot
--   use request tokens to dedupe requests spanning hours or days.
--   
--   <a>$sel:workbookId:BatchUpdateTableRows'</a>,
--   <a>batchUpdateTableRows_workbookId</a> - The ID of the workbook where
--   the rows are being updated.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
--   
--   <a>$sel:tableId:BatchUpdateTableRows'</a>,
--   <a>batchUpdateTableRows_tableId</a> - The ID of the table where the
--   rows are being updated.
--   
--   If a table with the specified id could not be found, this API throws
--   ResourceNotFoundException.
--   
--   <a>$sel:rowsToUpdate:BatchUpdateTableRows'</a>,
--   <a>batchUpdateTableRows_rowsToUpdate</a> - The list of rows to update
--   in the table. Each item in this list needs to contain the row id to
--   update along with the map of column id to cell values for each column
--   in that row that needs to be updated. You need to specify at least one
--   row in this list, and for each row, you need to specify at least one
--   column to update.
--   
--   Note that if one of the row or column ids in the request does not
--   exist in the table, then the request fails and no updates are made to
--   the table.
newBatchUpdateTableRows :: Text -> Text -> NonEmpty UpdateRowData -> BatchUpdateTableRows

-- | The request token for performing the update action. Request tokens
--   help to identify duplicate requests. If a call times out or fails due
--   to a transient error like a failed network connection, you can retry
--   the call with the same request token. The service ensures that if the
--   first call using that request token is successfully performed, the
--   second call will not perform the action again.
--   
--   Note that request tokens are valid only for a few minutes. You cannot
--   use request tokens to dedupe requests spanning hours or days.
batchUpdateTableRows_clientRequestToken :: Lens' BatchUpdateTableRows (Maybe Text)

-- | The ID of the workbook where the rows are being updated.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
batchUpdateTableRows_workbookId :: Lens' BatchUpdateTableRows Text

-- | The ID of the table where the rows are being updated.
--   
--   If a table with the specified id could not be found, this API throws
--   ResourceNotFoundException.
batchUpdateTableRows_tableId :: Lens' BatchUpdateTableRows Text

-- | The list of rows to update in the table. Each item in this list needs
--   to contain the row id to update along with the map of column id to
--   cell values for each column in that row that needs to be updated. You
--   need to specify at least one row in this list, and for each row, you
--   need to specify at least one column to update.
--   
--   Note that if one of the row or column ids in the request does not
--   exist in the table, then the request fails and no updates are made to
--   the table.
batchUpdateTableRows_rowsToUpdate :: Lens' BatchUpdateTableRows (NonEmpty UpdateRowData)

-- | <i>See:</i> <a>newBatchUpdateTableRowsResponse</a> smart constructor.
data BatchUpdateTableRowsResponse
BatchUpdateTableRowsResponse' :: Maybe [FailedBatchItem] -> Int -> Integer -> BatchUpdateTableRowsResponse

-- | The list of batch items in the request that could not be updated in
--   the table. Each element in this list contains one item from the
--   request that could not be updated in the table along with the reason
--   why that item could not be updated.
[$sel:failedBatchItems:BatchUpdateTableRowsResponse'] :: BatchUpdateTableRowsResponse -> Maybe [FailedBatchItem]

-- | The response's http status code.
[$sel:httpStatus:BatchUpdateTableRowsResponse'] :: BatchUpdateTableRowsResponse -> Int

-- | The updated workbook cursor after adding the new rows at the end of
--   the table.
[$sel:workbookCursor:BatchUpdateTableRowsResponse'] :: BatchUpdateTableRowsResponse -> Integer

-- | Create a value of <a>BatchUpdateTableRowsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failedBatchItems:BatchUpdateTableRowsResponse'</a>,
--   <a>batchUpdateTableRowsResponse_failedBatchItems</a> - The list of
--   batch items in the request that could not be updated in the table.
--   Each element in this list contains one item from the request that
--   could not be updated in the table along with the reason why that item
--   could not be updated.
--   
--   <a>$sel:httpStatus:BatchUpdateTableRowsResponse'</a>,
--   <a>batchUpdateTableRowsResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:workbookCursor:BatchUpdateTableRowsResponse'</a>,
--   <a>batchUpdateTableRowsResponse_workbookCursor</a> - The updated
--   workbook cursor after adding the new rows at the end of the table.
newBatchUpdateTableRowsResponse :: Int -> Integer -> BatchUpdateTableRowsResponse

-- | The list of batch items in the request that could not be updated in
--   the table. Each element in this list contains one item from the
--   request that could not be updated in the table along with the reason
--   why that item could not be updated.
batchUpdateTableRowsResponse_failedBatchItems :: Lens' BatchUpdateTableRowsResponse (Maybe [FailedBatchItem])

-- | The response's http status code.
batchUpdateTableRowsResponse_httpStatus :: Lens' BatchUpdateTableRowsResponse Int

-- | The updated workbook cursor after adding the new rows at the end of
--   the table.
batchUpdateTableRowsResponse_workbookCursor :: Lens' BatchUpdateTableRowsResponse Integer
instance GHC.Generics.Generic Amazonka.HoneyCode.BatchUpdateTableRows.BatchUpdateTableRows
instance GHC.Show.Show Amazonka.HoneyCode.BatchUpdateTableRows.BatchUpdateTableRows
instance GHC.Classes.Eq Amazonka.HoneyCode.BatchUpdateTableRows.BatchUpdateTableRows
instance GHC.Generics.Generic Amazonka.HoneyCode.BatchUpdateTableRows.BatchUpdateTableRowsResponse
instance GHC.Show.Show Amazonka.HoneyCode.BatchUpdateTableRows.BatchUpdateTableRowsResponse
instance GHC.Read.Read Amazonka.HoneyCode.BatchUpdateTableRows.BatchUpdateTableRowsResponse
instance GHC.Classes.Eq Amazonka.HoneyCode.BatchUpdateTableRows.BatchUpdateTableRowsResponse
instance Amazonka.Types.AWSRequest Amazonka.HoneyCode.BatchUpdateTableRows.BatchUpdateTableRows
instance Control.DeepSeq.NFData Amazonka.HoneyCode.BatchUpdateTableRows.BatchUpdateTableRowsResponse
instance Data.Hashable.Class.Hashable Amazonka.HoneyCode.BatchUpdateTableRows.BatchUpdateTableRows
instance Control.DeepSeq.NFData Amazonka.HoneyCode.BatchUpdateTableRows.BatchUpdateTableRows
instance Amazonka.Data.Headers.ToHeaders Amazonka.HoneyCode.BatchUpdateTableRows.BatchUpdateTableRows
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.HoneyCode.BatchUpdateTableRows.BatchUpdateTableRows
instance Amazonka.Data.Path.ToPath Amazonka.HoneyCode.BatchUpdateTableRows.BatchUpdateTableRows
instance Amazonka.Data.Query.ToQuery Amazonka.HoneyCode.BatchUpdateTableRows.BatchUpdateTableRows


-- | The BatchDeleteTableRows API allows you to delete one or more rows
--   from a table in a workbook. You need to specify the ids of the rows
--   that you want to delete from the table.
module Amazonka.HoneyCode.BatchDeleteTableRows

-- | <i>See:</i> <a>newBatchDeleteTableRows</a> smart constructor.
data BatchDeleteTableRows
BatchDeleteTableRows' :: Maybe Text -> Text -> Text -> NonEmpty Text -> BatchDeleteTableRows

-- | The request token for performing the delete action. Request tokens
--   help to identify duplicate requests. If a call times out or fails due
--   to a transient error like a failed network connection, you can retry
--   the call with the same request token. The service ensures that if the
--   first call using that request token is successfully performed, the
--   second call will not perform the action again.
--   
--   Note that request tokens are valid only for a few minutes. You cannot
--   use request tokens to dedupe requests spanning hours or days.
[$sel:clientRequestToken:BatchDeleteTableRows'] :: BatchDeleteTableRows -> Maybe Text

-- | The ID of the workbook where the rows are being deleted.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
[$sel:workbookId:BatchDeleteTableRows'] :: BatchDeleteTableRows -> Text

-- | The ID of the table where the rows are being deleted.
--   
--   If a table with the specified id could not be found, this API throws
--   ResourceNotFoundException.
[$sel:tableId:BatchDeleteTableRows'] :: BatchDeleteTableRows -> Text

-- | The list of row ids to delete from the table. You need to specify at
--   least one row id in this list.
--   
--   Note that if one of the row ids provided in the request does not exist
--   in the table, then the request fails and no rows are deleted from the
--   table.
[$sel:rowIds:BatchDeleteTableRows'] :: BatchDeleteTableRows -> NonEmpty Text

-- | Create a value of <a>BatchDeleteTableRows</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:clientRequestToken:BatchDeleteTableRows'</a>,
--   <a>batchDeleteTableRows_clientRequestToken</a> - The request token for
--   performing the delete action. Request tokens help to identify
--   duplicate requests. If a call times out or fails due to a transient
--   error like a failed network connection, you can retry the call with
--   the same request token. The service ensures that if the first call
--   using that request token is successfully performed, the second call
--   will not perform the action again.
--   
--   Note that request tokens are valid only for a few minutes. You cannot
--   use request tokens to dedupe requests spanning hours or days.
--   
--   <a>$sel:workbookId:BatchDeleteTableRows'</a>,
--   <a>batchDeleteTableRows_workbookId</a> - The ID of the workbook where
--   the rows are being deleted.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
--   
--   <a>$sel:tableId:BatchDeleteTableRows'</a>,
--   <a>batchDeleteTableRows_tableId</a> - The ID of the table where the
--   rows are being deleted.
--   
--   If a table with the specified id could not be found, this API throws
--   ResourceNotFoundException.
--   
--   <a>$sel:rowIds:BatchDeleteTableRows'</a>,
--   <a>batchDeleteTableRows_rowIds</a> - The list of row ids to delete
--   from the table. You need to specify at least one row id in this list.
--   
--   Note that if one of the row ids provided in the request does not exist
--   in the table, then the request fails and no rows are deleted from the
--   table.
newBatchDeleteTableRows :: Text -> Text -> NonEmpty Text -> BatchDeleteTableRows

-- | The request token for performing the delete action. Request tokens
--   help to identify duplicate requests. If a call times out or fails due
--   to a transient error like a failed network connection, you can retry
--   the call with the same request token. The service ensures that if the
--   first call using that request token is successfully performed, the
--   second call will not perform the action again.
--   
--   Note that request tokens are valid only for a few minutes. You cannot
--   use request tokens to dedupe requests spanning hours or days.
batchDeleteTableRows_clientRequestToken :: Lens' BatchDeleteTableRows (Maybe Text)

-- | The ID of the workbook where the rows are being deleted.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
batchDeleteTableRows_workbookId :: Lens' BatchDeleteTableRows Text

-- | The ID of the table where the rows are being deleted.
--   
--   If a table with the specified id could not be found, this API throws
--   ResourceNotFoundException.
batchDeleteTableRows_tableId :: Lens' BatchDeleteTableRows Text

-- | The list of row ids to delete from the table. You need to specify at
--   least one row id in this list.
--   
--   Note that if one of the row ids provided in the request does not exist
--   in the table, then the request fails and no rows are deleted from the
--   table.
batchDeleteTableRows_rowIds :: Lens' BatchDeleteTableRows (NonEmpty Text)

-- | <i>See:</i> <a>newBatchDeleteTableRowsResponse</a> smart constructor.
data BatchDeleteTableRowsResponse
BatchDeleteTableRowsResponse' :: Maybe [FailedBatchItem] -> Int -> Integer -> BatchDeleteTableRowsResponse

-- | The list of row ids in the request that could not be deleted from the
--   table. Each element in this list contains one row id from the request
--   that could not be deleted along with the reason why that item could
--   not be deleted.
[$sel:failedBatchItems:BatchDeleteTableRowsResponse'] :: BatchDeleteTableRowsResponse -> Maybe [FailedBatchItem]

-- | The response's http status code.
[$sel:httpStatus:BatchDeleteTableRowsResponse'] :: BatchDeleteTableRowsResponse -> Int

-- | The updated workbook cursor after deleting the rows from the table.
[$sel:workbookCursor:BatchDeleteTableRowsResponse'] :: BatchDeleteTableRowsResponse -> Integer

-- | Create a value of <a>BatchDeleteTableRowsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failedBatchItems:BatchDeleteTableRowsResponse'</a>,
--   <a>batchDeleteTableRowsResponse_failedBatchItems</a> - The list of row
--   ids in the request that could not be deleted from the table. Each
--   element in this list contains one row id from the request that could
--   not be deleted along with the reason why that item could not be
--   deleted.
--   
--   <a>$sel:httpStatus:BatchDeleteTableRowsResponse'</a>,
--   <a>batchDeleteTableRowsResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:workbookCursor:BatchDeleteTableRowsResponse'</a>,
--   <a>batchDeleteTableRowsResponse_workbookCursor</a> - The updated
--   workbook cursor after deleting the rows from the table.
newBatchDeleteTableRowsResponse :: Int -> Integer -> BatchDeleteTableRowsResponse

-- | The list of row ids in the request that could not be deleted from the
--   table. Each element in this list contains one row id from the request
--   that could not be deleted along with the reason why that item could
--   not be deleted.
batchDeleteTableRowsResponse_failedBatchItems :: Lens' BatchDeleteTableRowsResponse (Maybe [FailedBatchItem])

-- | The response's http status code.
batchDeleteTableRowsResponse_httpStatus :: Lens' BatchDeleteTableRowsResponse Int

-- | The updated workbook cursor after deleting the rows from the table.
batchDeleteTableRowsResponse_workbookCursor :: Lens' BatchDeleteTableRowsResponse Integer
instance GHC.Generics.Generic Amazonka.HoneyCode.BatchDeleteTableRows.BatchDeleteTableRows
instance GHC.Show.Show Amazonka.HoneyCode.BatchDeleteTableRows.BatchDeleteTableRows
instance GHC.Read.Read Amazonka.HoneyCode.BatchDeleteTableRows.BatchDeleteTableRows
instance GHC.Classes.Eq Amazonka.HoneyCode.BatchDeleteTableRows.BatchDeleteTableRows
instance GHC.Generics.Generic Amazonka.HoneyCode.BatchDeleteTableRows.BatchDeleteTableRowsResponse
instance GHC.Show.Show Amazonka.HoneyCode.BatchDeleteTableRows.BatchDeleteTableRowsResponse
instance GHC.Read.Read Amazonka.HoneyCode.BatchDeleteTableRows.BatchDeleteTableRowsResponse
instance GHC.Classes.Eq Amazonka.HoneyCode.BatchDeleteTableRows.BatchDeleteTableRowsResponse
instance Amazonka.Types.AWSRequest Amazonka.HoneyCode.BatchDeleteTableRows.BatchDeleteTableRows
instance Control.DeepSeq.NFData Amazonka.HoneyCode.BatchDeleteTableRows.BatchDeleteTableRowsResponse
instance Data.Hashable.Class.Hashable Amazonka.HoneyCode.BatchDeleteTableRows.BatchDeleteTableRows
instance Control.DeepSeq.NFData Amazonka.HoneyCode.BatchDeleteTableRows.BatchDeleteTableRows
instance Amazonka.Data.Headers.ToHeaders Amazonka.HoneyCode.BatchDeleteTableRows.BatchDeleteTableRows
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.HoneyCode.BatchDeleteTableRows.BatchDeleteTableRows
instance Amazonka.Data.Path.ToPath Amazonka.HoneyCode.BatchDeleteTableRows.BatchDeleteTableRows
instance Amazonka.Data.Query.ToQuery Amazonka.HoneyCode.BatchDeleteTableRows.BatchDeleteTableRows


-- | The BatchCreateTableRows API allows you to create one or more rows at
--   the end of a table in a workbook. The API allows you to specify the
--   values to set in some or all of the columns in the new rows.
--   
--   If a column is not explicitly set in a specific row, then the column
--   level formula specified in the table will be applied to the new row.
--   If there is no column level formula but the last row of the table has
--   a formula, then that formula will be copied down to the new row. If
--   there is no column level formula and no formula in the last row of the
--   table, then that column will be left blank for the new rows.
module Amazonka.HoneyCode.BatchCreateTableRows

-- | <i>See:</i> <a>newBatchCreateTableRows</a> smart constructor.
data BatchCreateTableRows
BatchCreateTableRows' :: Maybe Text -> Text -> Text -> NonEmpty CreateRowData -> BatchCreateTableRows

-- | The request token for performing the batch create operation. Request
--   tokens help to identify duplicate requests. If a call times out or
--   fails due to a transient error like a failed network connection, you
--   can retry the call with the same request token. The service ensures
--   that if the first call using that request token is successfully
--   performed, the second call will not perform the operation again.
--   
--   Note that request tokens are valid only for a few minutes. You cannot
--   use request tokens to dedupe requests spanning hours or days.
[$sel:clientRequestToken:BatchCreateTableRows'] :: BatchCreateTableRows -> Maybe Text

-- | The ID of the workbook where the new rows are being added.
--   
--   If a workbook with the specified ID could not be found, this API
--   throws ResourceNotFoundException.
[$sel:workbookId:BatchCreateTableRows'] :: BatchCreateTableRows -> Text

-- | The ID of the table where the new rows are being added.
--   
--   If a table with the specified ID could not be found, this API throws
--   ResourceNotFoundException.
[$sel:tableId:BatchCreateTableRows'] :: BatchCreateTableRows -> Text

-- | The list of rows to create at the end of the table. Each item in this
--   list needs to have a batch item id to uniquely identify the element in
--   the request and the cells to create for that row. You need to specify
--   at least one item in this list.
--   
--   Note that if one of the column ids in any of the rows in the request
--   does not exist in the table, then the request fails and no updates are
--   made to the table.
[$sel:rowsToCreate:BatchCreateTableRows'] :: BatchCreateTableRows -> NonEmpty CreateRowData

-- | Create a value of <a>BatchCreateTableRows</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:clientRequestToken:BatchCreateTableRows'</a>,
--   <a>batchCreateTableRows_clientRequestToken</a> - The request token for
--   performing the batch create operation. Request tokens help to identify
--   duplicate requests. If a call times out or fails due to a transient
--   error like a failed network connection, you can retry the call with
--   the same request token. The service ensures that if the first call
--   using that request token is successfully performed, the second call
--   will not perform the operation again.
--   
--   Note that request tokens are valid only for a few minutes. You cannot
--   use request tokens to dedupe requests spanning hours or days.
--   
--   <a>$sel:workbookId:BatchCreateTableRows'</a>,
--   <a>batchCreateTableRows_workbookId</a> - The ID of the workbook where
--   the new rows are being added.
--   
--   If a workbook with the specified ID could not be found, this API
--   throws ResourceNotFoundException.
--   
--   <a>$sel:tableId:BatchCreateTableRows'</a>,
--   <a>batchCreateTableRows_tableId</a> - The ID of the table where the
--   new rows are being added.
--   
--   If a table with the specified ID could not be found, this API throws
--   ResourceNotFoundException.
--   
--   <a>$sel:rowsToCreate:BatchCreateTableRows'</a>,
--   <a>batchCreateTableRows_rowsToCreate</a> - The list of rows to create
--   at the end of the table. Each item in this list needs to have a batch
--   item id to uniquely identify the element in the request and the cells
--   to create for that row. You need to specify at least one item in this
--   list.
--   
--   Note that if one of the column ids in any of the rows in the request
--   does not exist in the table, then the request fails and no updates are
--   made to the table.
newBatchCreateTableRows :: Text -> Text -> NonEmpty CreateRowData -> BatchCreateTableRows

-- | The request token for performing the batch create operation. Request
--   tokens help to identify duplicate requests. If a call times out or
--   fails due to a transient error like a failed network connection, you
--   can retry the call with the same request token. The service ensures
--   that if the first call using that request token is successfully
--   performed, the second call will not perform the operation again.
--   
--   Note that request tokens are valid only for a few minutes. You cannot
--   use request tokens to dedupe requests spanning hours or days.
batchCreateTableRows_clientRequestToken :: Lens' BatchCreateTableRows (Maybe Text)

-- | The ID of the workbook where the new rows are being added.
--   
--   If a workbook with the specified ID could not be found, this API
--   throws ResourceNotFoundException.
batchCreateTableRows_workbookId :: Lens' BatchCreateTableRows Text

-- | The ID of the table where the new rows are being added.
--   
--   If a table with the specified ID could not be found, this API throws
--   ResourceNotFoundException.
batchCreateTableRows_tableId :: Lens' BatchCreateTableRows Text

-- | The list of rows to create at the end of the table. Each item in this
--   list needs to have a batch item id to uniquely identify the element in
--   the request and the cells to create for that row. You need to specify
--   at least one item in this list.
--   
--   Note that if one of the column ids in any of the rows in the request
--   does not exist in the table, then the request fails and no updates are
--   made to the table.
batchCreateTableRows_rowsToCreate :: Lens' BatchCreateTableRows (NonEmpty CreateRowData)

-- | <i>See:</i> <a>newBatchCreateTableRowsResponse</a> smart constructor.
data BatchCreateTableRowsResponse
BatchCreateTableRowsResponse' :: Maybe [FailedBatchItem] -> Int -> Integer -> HashMap Text Text -> BatchCreateTableRowsResponse

-- | The list of batch items in the request that could not be added to the
--   table. Each element in this list contains one item from the request
--   that could not be added to the table along with the reason why that
--   item could not be added.
[$sel:failedBatchItems:BatchCreateTableRowsResponse'] :: BatchCreateTableRowsResponse -> Maybe [FailedBatchItem]

-- | The response's http status code.
[$sel:httpStatus:BatchCreateTableRowsResponse'] :: BatchCreateTableRowsResponse -> Int

-- | The updated workbook cursor after adding the new rows at the end of
--   the table.
[$sel:workbookCursor:BatchCreateTableRowsResponse'] :: BatchCreateTableRowsResponse -> Integer

-- | The map of batch item id to the row id that was created for that item.
[$sel:createdRows:BatchCreateTableRowsResponse'] :: BatchCreateTableRowsResponse -> HashMap Text Text

-- | Create a value of <a>BatchCreateTableRowsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failedBatchItems:BatchCreateTableRowsResponse'</a>,
--   <a>batchCreateTableRowsResponse_failedBatchItems</a> - The list of
--   batch items in the request that could not be added to the table. Each
--   element in this list contains one item from the request that could not
--   be added to the table along with the reason why that item could not be
--   added.
--   
--   <a>$sel:httpStatus:BatchCreateTableRowsResponse'</a>,
--   <a>batchCreateTableRowsResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:workbookCursor:BatchCreateTableRowsResponse'</a>,
--   <a>batchCreateTableRowsResponse_workbookCursor</a> - The updated
--   workbook cursor after adding the new rows at the end of the table.
--   
--   <a>$sel:createdRows:BatchCreateTableRowsResponse'</a>,
--   <a>batchCreateTableRowsResponse_createdRows</a> - The map of batch
--   item id to the row id that was created for that item.
newBatchCreateTableRowsResponse :: Int -> Integer -> BatchCreateTableRowsResponse

-- | The list of batch items in the request that could not be added to the
--   table. Each element in this list contains one item from the request
--   that could not be added to the table along with the reason why that
--   item could not be added.
batchCreateTableRowsResponse_failedBatchItems :: Lens' BatchCreateTableRowsResponse (Maybe [FailedBatchItem])

-- | The response's http status code.
batchCreateTableRowsResponse_httpStatus :: Lens' BatchCreateTableRowsResponse Int

-- | The updated workbook cursor after adding the new rows at the end of
--   the table.
batchCreateTableRowsResponse_workbookCursor :: Lens' BatchCreateTableRowsResponse Integer

-- | The map of batch item id to the row id that was created for that item.
batchCreateTableRowsResponse_createdRows :: Lens' BatchCreateTableRowsResponse (HashMap Text Text)
instance GHC.Generics.Generic Amazonka.HoneyCode.BatchCreateTableRows.BatchCreateTableRows
instance GHC.Show.Show Amazonka.HoneyCode.BatchCreateTableRows.BatchCreateTableRows
instance GHC.Classes.Eq Amazonka.HoneyCode.BatchCreateTableRows.BatchCreateTableRows
instance GHC.Generics.Generic Amazonka.HoneyCode.BatchCreateTableRows.BatchCreateTableRowsResponse
instance GHC.Show.Show Amazonka.HoneyCode.BatchCreateTableRows.BatchCreateTableRowsResponse
instance GHC.Read.Read Amazonka.HoneyCode.BatchCreateTableRows.BatchCreateTableRowsResponse
instance GHC.Classes.Eq Amazonka.HoneyCode.BatchCreateTableRows.BatchCreateTableRowsResponse
instance Amazonka.Types.AWSRequest Amazonka.HoneyCode.BatchCreateTableRows.BatchCreateTableRows
instance Control.DeepSeq.NFData Amazonka.HoneyCode.BatchCreateTableRows.BatchCreateTableRowsResponse
instance Data.Hashable.Class.Hashable Amazonka.HoneyCode.BatchCreateTableRows.BatchCreateTableRows
instance Control.DeepSeq.NFData Amazonka.HoneyCode.BatchCreateTableRows.BatchCreateTableRows
instance Amazonka.Data.Headers.ToHeaders Amazonka.HoneyCode.BatchCreateTableRows.BatchCreateTableRows
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.HoneyCode.BatchCreateTableRows.BatchCreateTableRows
instance Amazonka.Data.Path.ToPath Amazonka.HoneyCode.BatchCreateTableRows.BatchCreateTableRows
instance Amazonka.Data.Query.ToQuery Amazonka.HoneyCode.BatchCreateTableRows.BatchCreateTableRows


module Amazonka.HoneyCode.Lens

-- | The request token for performing the delete action. Request tokens
--   help to identify duplicate requests. If a call times out or fails due
--   to a transient error like a failed network connection, you can retry
--   the call with the same request token. The service ensures that if the
--   first call using that request token is successfully performed, the
--   second call will not perform the action again.
--   
--   Note that request tokens are valid only for a few minutes. You cannot
--   use request tokens to dedupe requests spanning hours or days.
batchDeleteTableRows_clientRequestToken :: Lens' BatchDeleteTableRows (Maybe Text)

-- | The ID of the workbook where the rows are being deleted.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
batchDeleteTableRows_workbookId :: Lens' BatchDeleteTableRows Text

-- | The ID of the table where the rows are being deleted.
--   
--   If a table with the specified id could not be found, this API throws
--   ResourceNotFoundException.
batchDeleteTableRows_tableId :: Lens' BatchDeleteTableRows Text

-- | The list of row ids to delete from the table. You need to specify at
--   least one row id in this list.
--   
--   Note that if one of the row ids provided in the request does not exist
--   in the table, then the request fails and no rows are deleted from the
--   table.
batchDeleteTableRows_rowIds :: Lens' BatchDeleteTableRows (NonEmpty Text)

-- | The list of row ids in the request that could not be deleted from the
--   table. Each element in this list contains one row id from the request
--   that could not be deleted along with the reason why that item could
--   not be deleted.
batchDeleteTableRowsResponse_failedBatchItems :: Lens' BatchDeleteTableRowsResponse (Maybe [FailedBatchItem])

-- | The response's http status code.
batchDeleteTableRowsResponse_httpStatus :: Lens' BatchDeleteTableRowsResponse Int

-- | The updated workbook cursor after deleting the rows from the table.
batchDeleteTableRowsResponse_workbookCursor :: Lens' BatchDeleteTableRowsResponse Integer

-- | The request token for performing the update action. Request tokens
--   help to identify duplicate requests. If a call times out or fails due
--   to a transient error like a failed network connection, you can retry
--   the call with the same request token. The service ensures that if the
--   first call using that request token is successfully performed, the
--   second call will not perform the action again.
--   
--   Note that request tokens are valid only for a few minutes. You cannot
--   use request tokens to dedupe requests spanning hours or days.
batchUpdateTableRows_clientRequestToken :: Lens' BatchUpdateTableRows (Maybe Text)

-- | The ID of the workbook where the rows are being updated.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
batchUpdateTableRows_workbookId :: Lens' BatchUpdateTableRows Text

-- | The ID of the table where the rows are being updated.
--   
--   If a table with the specified id could not be found, this API throws
--   ResourceNotFoundException.
batchUpdateTableRows_tableId :: Lens' BatchUpdateTableRows Text

-- | The list of rows to update in the table. Each item in this list needs
--   to contain the row id to update along with the map of column id to
--   cell values for each column in that row that needs to be updated. You
--   need to specify at least one row in this list, and for each row, you
--   need to specify at least one column to update.
--   
--   Note that if one of the row or column ids in the request does not
--   exist in the table, then the request fails and no updates are made to
--   the table.
batchUpdateTableRows_rowsToUpdate :: Lens' BatchUpdateTableRows (NonEmpty UpdateRowData)

-- | The list of batch items in the request that could not be updated in
--   the table. Each element in this list contains one item from the
--   request that could not be updated in the table along with the reason
--   why that item could not be updated.
batchUpdateTableRowsResponse_failedBatchItems :: Lens' BatchUpdateTableRowsResponse (Maybe [FailedBatchItem])

-- | The response's http status code.
batchUpdateTableRowsResponse_httpStatus :: Lens' BatchUpdateTableRowsResponse Int

-- | The updated workbook cursor after adding the new rows at the end of
--   the table.
batchUpdateTableRowsResponse_workbookCursor :: Lens' BatchUpdateTableRowsResponse Integer

-- | This parameter is optional. If one or more row ids are specified in
--   this list, then only the specified row ids are returned in the result.
--   If no row ids are specified here, then all the rows in the table are
--   returned.
listTableRows_rowIds :: Lens' ListTableRows (Maybe (NonEmpty Text))

-- | This parameter is optional. If a nextToken is not specified, the API
--   returns the first page of data.
--   
--   Pagination tokens expire after 1 hour. If you use a token that was
--   returned more than an hour back, the API will throw
--   ValidationException.
listTableRows_nextToken :: Lens' ListTableRows (Maybe Text)

-- | The maximum number of rows to return in each page of the results.
listTableRows_maxResults :: Lens' ListTableRows (Maybe Natural)

-- | The ID of the workbook that contains the table whose rows are being
--   retrieved.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
listTableRows_workbookId :: Lens' ListTableRows Text

-- | The ID of the table whose rows are being retrieved.
--   
--   If a table with the specified id could not be found, this API throws
--   ResourceNotFoundException.
listTableRows_tableId :: Lens' ListTableRows Text

-- | The list of row ids included in the request that were not found in the
--   table.
listTableRowsResponse_rowIdsNotFound :: Lens' ListTableRowsResponse (Maybe (NonEmpty Text))

-- | Provides the pagination token to load the next page if there are more
--   results matching the request. If a pagination token is not present in
--   the response, it means that all data matching the request has been
--   loaded.
listTableRowsResponse_nextToken :: Lens' ListTableRowsResponse (Maybe Text)

-- | The response's http status code.
listTableRowsResponse_httpStatus :: Lens' ListTableRowsResponse Int

-- | The list of columns in the table whose row data is returned in the
--   result.
listTableRowsResponse_columnIds :: Lens' ListTableRowsResponse (NonEmpty Text)

-- | The list of rows in the table. Note that this result is paginated, so
--   this list contains a maximum of 100 rows.
listTableRowsResponse_rows :: Lens' ListTableRowsResponse [TableRow]

-- | Indicates the cursor of the workbook at which the data returned by
--   this request is read. Workbook cursor keeps increasing with every
--   update and the increments are not sequential.
listTableRowsResponse_workbookCursor :: Lens' ListTableRowsResponse Integer

-- | The row ID for the automation if the automation is defined inside a
--   block with source or list.
invokeScreenAutomation_rowId :: Lens' InvokeScreenAutomation (Maybe Text)

-- | Variables are specified as a map where the key is the name of the
--   variable as defined on the screen. The value is an object which
--   currently has only one property, rawValue, which holds the value of
--   the variable to be passed to the screen. Any variables defined in a
--   screen are required to be passed in the call.
invokeScreenAutomation_variables :: Lens' InvokeScreenAutomation (Maybe (HashMap Text VariableValue))

-- | The request token for performing the automation action. Request tokens
--   help to identify duplicate requests. If a call times out or fails due
--   to a transient error like a failed network connection, you can retry
--   the call with the same request token. The service ensures that if the
--   first call using that request token is successfully performed, the
--   second call will return the response of the previous call rather than
--   performing the action again.
--   
--   Note that request tokens are valid only for a few minutes. You cannot
--   use request tokens to dedupe requests spanning hours or days.
invokeScreenAutomation_clientRequestToken :: Lens' InvokeScreenAutomation (Maybe Text)

-- | The ID of the workbook that contains the screen automation.
invokeScreenAutomation_workbookId :: Lens' InvokeScreenAutomation Text

-- | The ID of the app that contains the screen automation.
invokeScreenAutomation_appId :: Lens' InvokeScreenAutomation Text

-- | The ID of the screen that contains the screen automation.
invokeScreenAutomation_screenId :: Lens' InvokeScreenAutomation Text

-- | The ID of the automation action to be performed.
invokeScreenAutomation_screenAutomationId :: Lens' InvokeScreenAutomation Text

-- | The response's http status code.
invokeScreenAutomationResponse_httpStatus :: Lens' InvokeScreenAutomationResponse Int

-- | The updated workbook cursor after performing the automation action.
invokeScreenAutomationResponse_workbookCursor :: Lens' InvokeScreenAutomationResponse Integer

-- | The ID of the workbook into which data was imported.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
describeTableDataImportJob_workbookId :: Lens' DescribeTableDataImportJob Text

-- | The ID of the table into which data was imported.
--   
--   If a table with the specified id could not be found, this API throws
--   ResourceNotFoundException.
describeTableDataImportJob_tableId :: Lens' DescribeTableDataImportJob Text

-- | The ID of the job that was returned by the StartTableDataImportJob
--   request.
--   
--   If a job with the specified id could not be found, this API throws
--   ResourceNotFoundException.
describeTableDataImportJob_jobId :: Lens' DescribeTableDataImportJob Text

-- | The response's http status code.
describeTableDataImportJobResponse_httpStatus :: Lens' DescribeTableDataImportJobResponse Int

-- | The current status of the import job.
describeTableDataImportJobResponse_jobStatus :: Lens' DescribeTableDataImportJobResponse TableDataImportJobStatus

-- | A message providing more details about the current status of the
--   import job.
describeTableDataImportJobResponse_message :: Lens' DescribeTableDataImportJobResponse Text

-- | The metadata about the job that was submitted for import.
describeTableDataImportJobResponse_jobMetadata :: Lens' DescribeTableDataImportJobResponse TableDataImportJobMetadata

-- | The ID of the workbook where the rows are being imported.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
startTableDataImportJob_workbookId :: Lens' StartTableDataImportJob Text

-- | The source of the data that is being imported. The size of source must
--   be no larger than 100 MB. Source must have no more than 100,000 cells
--   and no more than 1,000 rows.
startTableDataImportJob_dataSource :: Lens' StartTableDataImportJob ImportDataSource

-- | The format of the data that is being imported. Currently the only
--   option supported is "DELIMITED_TEXT".
startTableDataImportJob_dataFormat :: Lens' StartTableDataImportJob ImportSourceDataFormat

-- | The ID of the table where the rows are being imported.
--   
--   If a table with the specified id could not be found, this API throws
--   ResourceNotFoundException.
startTableDataImportJob_destinationTableId :: Lens' StartTableDataImportJob Text

-- | The options for customizing this import request.
startTableDataImportJob_importOptions :: Lens' StartTableDataImportJob ImportOptions

-- | The request token for performing the update action. Request tokens
--   help to identify duplicate requests. If a call times out or fails due
--   to a transient error like a failed network connection, you can retry
--   the call with the same request token. The service ensures that if the
--   first call using that request token is successfully performed, the
--   second call will not perform the action again.
--   
--   Note that request tokens are valid only for a few minutes. You cannot
--   use request tokens to dedupe requests spanning hours or days.
startTableDataImportJob_clientRequestToken :: Lens' StartTableDataImportJob Text

-- | The response's http status code.
startTableDataImportJobResponse_httpStatus :: Lens' StartTableDataImportJobResponse Int

-- | The id that is assigned to this import job. Future requests to find
--   out the status of this import job need to send this id in the
--   appropriate parameter in the request.
startTableDataImportJobResponse_jobId :: Lens' StartTableDataImportJobResponse Text

-- | The status of the import job immediately after submitting the request.
startTableDataImportJobResponse_jobStatus :: Lens' StartTableDataImportJobResponse TableDataImportJobStatus

-- | The request token for performing the batch create operation. Request
--   tokens help to identify duplicate requests. If a call times out or
--   fails due to a transient error like a failed network connection, you
--   can retry the call with the same request token. The service ensures
--   that if the first call using that request token is successfully
--   performed, the second call will not perform the operation again.
--   
--   Note that request tokens are valid only for a few minutes. You cannot
--   use request tokens to dedupe requests spanning hours or days.
batchCreateTableRows_clientRequestToken :: Lens' BatchCreateTableRows (Maybe Text)

-- | The ID of the workbook where the new rows are being added.
--   
--   If a workbook with the specified ID could not be found, this API
--   throws ResourceNotFoundException.
batchCreateTableRows_workbookId :: Lens' BatchCreateTableRows Text

-- | The ID of the table where the new rows are being added.
--   
--   If a table with the specified ID could not be found, this API throws
--   ResourceNotFoundException.
batchCreateTableRows_tableId :: Lens' BatchCreateTableRows Text

-- | The list of rows to create at the end of the table. Each item in this
--   list needs to have a batch item id to uniquely identify the element in
--   the request and the cells to create for that row. You need to specify
--   at least one item in this list.
--   
--   Note that if one of the column ids in any of the rows in the request
--   does not exist in the table, then the request fails and no updates are
--   made to the table.
batchCreateTableRows_rowsToCreate :: Lens' BatchCreateTableRows (NonEmpty CreateRowData)

-- | The list of batch items in the request that could not be added to the
--   table. Each element in this list contains one item from the request
--   that could not be added to the table along with the reason why that
--   item could not be added.
batchCreateTableRowsResponse_failedBatchItems :: Lens' BatchCreateTableRowsResponse (Maybe [FailedBatchItem])

-- | The response's http status code.
batchCreateTableRowsResponse_httpStatus :: Lens' BatchCreateTableRowsResponse Int

-- | The updated workbook cursor after adding the new rows at the end of
--   the table.
batchCreateTableRowsResponse_workbookCursor :: Lens' BatchCreateTableRowsResponse Integer

-- | The map of batch item id to the row id that was created for that item.
batchCreateTableRowsResponse_createdRows :: Lens' BatchCreateTableRowsResponse (HashMap Text Text)

-- | This parameter is optional. If a nextToken is not specified, the API
--   returns the first page of data.
--   
--   Pagination tokens expire after 1 hour. If you use a token that was
--   returned more than an hour back, the API will throw
--   ValidationException.
listTables_nextToken :: Lens' ListTables (Maybe Text)

-- | The maximum number of tables to return in each page of the results.
listTables_maxResults :: Lens' ListTables (Maybe Natural)

-- | The ID of the workbook whose tables are being retrieved.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
listTables_workbookId :: Lens' ListTables Text

-- | Provides the pagination token to load the next page if there are more
--   results matching the request. If a pagination token is not present in
--   the response, it means that all data matching the request has been
--   loaded.
listTablesResponse_nextToken :: Lens' ListTablesResponse (Maybe Text)

-- | Indicates the cursor of the workbook at which the data returned by
--   this request is read. Workbook cursor keeps increasing with every
--   update and the increments are not sequential.
listTablesResponse_workbookCursor :: Lens' ListTablesResponse (Maybe Integer)

-- | The response's http status code.
listTablesResponse_httpStatus :: Lens' ListTablesResponse Int

-- | The list of tables in the workbook.
listTablesResponse_tables :: Lens' ListTablesResponse [Table]

-- | Variables are optional and are needed only if the screen requires them
--   to render correctly. Variables are specified as a map where the key is
--   the name of the variable as defined on the screen. The value is an
--   object which currently has only one property, rawValue, which holds
--   the value of the variable to be passed to the screen.
getScreenData_variables :: Lens' GetScreenData (Maybe (HashMap Text VariableValue))

-- | This parameter is optional. If a nextToken is not specified, the API
--   returns the first page of data.
--   
--   Pagination tokens expire after 1 hour. If you use a token that was
--   returned more than an hour back, the API will throw
--   ValidationException.
getScreenData_nextToken :: Lens' GetScreenData (Maybe Text)

-- | The number of results to be returned on a single page. Specify a
--   number between 1 and 100. The maximum value is 100.
--   
--   This parameter is optional. If you don't specify this parameter, the
--   default page size is 100.
getScreenData_maxResults :: Lens' GetScreenData (Maybe Natural)

-- | The ID of the workbook that contains the screen.
getScreenData_workbookId :: Lens' GetScreenData Text

-- | The ID of the app that contains the screem.
getScreenData_appId :: Lens' GetScreenData Text

-- | The ID of the screen.
getScreenData_screenId :: Lens' GetScreenData Text

-- | Provides the pagination token to load the next page if there are more
--   results matching the request. If a pagination token is not present in
--   the response, it means that all data matching the query has been
--   loaded.
getScreenDataResponse_nextToken :: Lens' GetScreenDataResponse (Maybe Text)

-- | The response's http status code.
getScreenDataResponse_httpStatus :: Lens' GetScreenDataResponse Int

-- | A map of all the rows on the screen keyed by block name.
getScreenDataResponse_results :: Lens' GetScreenDataResponse (HashMap Text ResultSet)

-- | Indicates the cursor of the workbook at which the data returned by
--   this workbook is read. Workbook cursor keeps increasing with every
--   update and the increments are not sequential.
getScreenDataResponse_workbookCursor :: Lens' GetScreenDataResponse Integer

-- | This parameter is optional. If a nextToken is not specified, the API
--   returns the first page of data.
--   
--   Pagination tokens expire after 1 hour. If you use a token that was
--   returned more than an hour back, the API will throw
--   ValidationException.
queryTableRows_nextToken :: Lens' QueryTableRows (Maybe Text)

-- | The maximum number of rows to return in each page of the results.
queryTableRows_maxResults :: Lens' QueryTableRows (Maybe Natural)

-- | The ID of the workbook whose table rows are being queried.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
queryTableRows_workbookId :: Lens' QueryTableRows Text

-- | The ID of the table whose rows are being queried.
--   
--   If a table with the specified id could not be found, this API throws
--   ResourceNotFoundException.
queryTableRows_tableId :: Lens' QueryTableRows Text

-- | An object that represents a filter formula along with the id of the
--   context row under which the filter function needs to evaluate.
queryTableRows_filterFormula :: Lens' QueryTableRows Filter

-- | Provides the pagination token to load the next page if there are more
--   results matching the request. If a pagination token is not present in
--   the response, it means that all data matching the request has been
--   loaded.
queryTableRowsResponse_nextToken :: Lens' QueryTableRowsResponse (Maybe Text)

-- | The response's http status code.
queryTableRowsResponse_httpStatus :: Lens' QueryTableRowsResponse Int

-- | The list of columns in the table whose row data is returned in the
--   result.
queryTableRowsResponse_columnIds :: Lens' QueryTableRowsResponse (NonEmpty Text)

-- | The list of rows in the table that match the query filter.
queryTableRowsResponse_rows :: Lens' QueryTableRowsResponse [TableRow]

-- | Indicates the cursor of the workbook at which the data returned by
--   this request is read. Workbook cursor keeps increasing with every
--   update and the increments are not sequential.
queryTableRowsResponse_workbookCursor :: Lens' QueryTableRowsResponse Integer

-- | The request token for performing the update action. Request tokens
--   help to identify duplicate requests. If a call times out or fails due
--   to a transient error like a failed network connection, you can retry
--   the call with the same request token. The service ensures that if the
--   first call using that request token is successfully performed, the
--   second call will not perform the action again.
--   
--   Note that request tokens are valid only for a few minutes. You cannot
--   use request tokens to dedupe requests spanning hours or days.
batchUpsertTableRows_clientRequestToken :: Lens' BatchUpsertTableRows (Maybe Text)

-- | The ID of the workbook where the rows are being upserted.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
batchUpsertTableRows_workbookId :: Lens' BatchUpsertTableRows Text

-- | The ID of the table where the rows are being upserted.
--   
--   If a table with the specified id could not be found, this API throws
--   ResourceNotFoundException.
batchUpsertTableRows_tableId :: Lens' BatchUpsertTableRows Text

-- | The list of rows to upsert in the table. Each item in this list needs
--   to have a batch item id to uniquely identify the element in the
--   request, a filter expression to find the rows to update for that
--   element and the cell values to set for each column in the upserted
--   rows. You need to specify at least one item in this list.
--   
--   Note that if one of the filter formulas in the request fails to
--   evaluate because of an error or one of the column ids in any of the
--   rows does not exist in the table, then the request fails and no
--   updates are made to the table.
batchUpsertTableRows_rowsToUpsert :: Lens' BatchUpsertTableRows [UpsertRowData]

-- | The list of batch items in the request that could not be updated or
--   appended in the table. Each element in this list contains one item
--   from the request that could not be updated in the table along with the
--   reason why that item could not be updated or appended.
batchUpsertTableRowsResponse_failedBatchItems :: Lens' BatchUpsertTableRowsResponse (Maybe [FailedBatchItem])

-- | The response's http status code.
batchUpsertTableRowsResponse_httpStatus :: Lens' BatchUpsertTableRowsResponse Int

-- | A map with the batch item id as the key and the result of the upsert
--   operation as the value. The result of the upsert operation specifies
--   whether existing rows were updated or a new row was appended, along
--   with the list of row ids that were affected.
batchUpsertTableRowsResponse_rows :: Lens' BatchUpsertTableRowsResponse (HashMap Text UpsertRowsResult)

-- | The updated workbook cursor after updating or appending rows in the
--   table.
batchUpsertTableRowsResponse_workbookCursor :: Lens' BatchUpsertTableRowsResponse Integer

-- | This parameter is optional. If a nextToken is not specified, the API
--   returns the first page of data.
--   
--   Pagination tokens expire after 1 hour. If you use a token that was
--   returned more than an hour back, the API will throw
--   ValidationException.
listTableColumns_nextToken :: Lens' ListTableColumns (Maybe Text)

-- | The ID of the workbook that contains the table whose columns are being
--   retrieved.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
listTableColumns_workbookId :: Lens' ListTableColumns Text

-- | The ID of the table whose columns are being retrieved.
--   
--   If a table with the specified id could not be found, this API throws
--   ResourceNotFoundException.
listTableColumns_tableId :: Lens' ListTableColumns Text

-- | Provides the pagination token to load the next page if there are more
--   results matching the request. If a pagination token is not present in
--   the response, it means that all data matching the request has been
--   loaded.
listTableColumnsResponse_nextToken :: Lens' ListTableColumnsResponse (Maybe Text)

-- | Indicates the cursor of the workbook at which the data returned by
--   this request is read. Workbook cursor keeps increasing with every
--   update and the increments are not sequential.
listTableColumnsResponse_workbookCursor :: Lens' ListTableColumnsResponse (Maybe Integer)

-- | The response's http status code.
listTableColumnsResponse_httpStatus :: Lens' ListTableColumnsResponse Int

-- | The list of columns in the table.
listTableColumnsResponse_tableColumns :: Lens' ListTableColumnsResponse [TableColumn]

-- | The raw value of the data contained in the cell. The raw value depends
--   on the format of the data in the cell. However the attribute in the
--   API return value is always a string containing the raw value.
--   
--   Cells with format DATE, DATE_TIME or TIME have the raw value as a
--   floating point number where the whole number represents the number of
--   days since 1/1/1900 and the fractional part represents the fraction of
--   the day since midnight. For example, a cell with date 11/3/2020 has
--   the raw value "44138". A cell with the time 9:00 AM has the raw value
--   "0.375" and a cell with date/time value of 11/3/2020 9:00 AM has the
--   raw value "44138.375". Notice that even though the raw value is a
--   number in all three cases, it is still represented as a string.
--   
--   Cells with format NUMBER, CURRENCY, PERCENTAGE and ACCOUNTING have the
--   raw value of the data as the number representing the data being
--   displayed. For example, the number 1.325 with two decimal places in
--   the format will have it's raw value as "1.325" and formatted value as
--   "1.33". A currency value for $10 will have the raw value as "10" and
--   formatted value as "$10.00". A value representing 20% with two decimal
--   places in the format will have its raw value as "0.2" and the
--   formatted value as "20.00%". An accounting value of -$25 will have
--   "-25" as the raw value and "$ (25.00)" as the formatted value.
--   
--   Cells with format TEXT will have the raw text as the raw value. For
--   example, a cell with text "John Smith" will have "John Smith" as both
--   the raw value and the formatted value.
--   
--   Cells with format CONTACT will have the name of the contact as a
--   formatted value and the email address of the contact as the raw value.
--   For example, a contact for John Smith will have "John Smith" as the
--   formatted value and "john.smith@example.com" as the raw value.
--   
--   Cells with format ROWLINK (aka picklist) will have the first column of
--   the linked row as the formatted value and the row id of the linked row
--   as the raw value. For example, a cell containing a picklist to a table
--   that displays task status might have "Completed" as the formatted
--   value and
--   "row:dfcefaee-5b37-4355-8f28-40c3e4ff5dd4/ca432b2f-b8eb-431d-9fb5-cbe0342f9f03"
--   as the raw value.
--   
--   Cells with format AUTO or cells without any format that are
--   auto-detected as one of the formats above will contain the raw and
--   formatted values as mentioned above, based on the auto-detected
--   formats. If there is no auto-detected format, the raw and formatted
--   values will be the same as the data in the cell.
cell_rawValue :: Lens' Cell (Maybe Text)

-- | The format of the cell. If this field is empty, then the format is
--   either not specified in the workbook or the format is set to AUTO.
cell_format :: Lens' Cell (Maybe Format)

-- | The formula contained in the cell. This field is empty if a cell does
--   not have a formula.
cell_formula :: Lens' Cell (Maybe Text)

-- | The formatted value of the cell. This is the value that you see
--   displayed in the cell in the UI.
--   
--   Note that the formatted value of a cell is always represented as a
--   string irrespective of the data that is stored in the cell. For
--   example, if a cell contains a date, the formatted value of the cell is
--   the string representation of the formatted date being shown in the
--   cell in the UI. See details in the rawValue field below for how cells
--   of different formats will have different raw and formatted values.
cell_formattedValue :: Lens' Cell (Maybe Text)

-- | Fact represents the data that is entered into a cell. This data can be
--   free text or a formula. Formulas need to start with the equals (=)
--   sign.
cellInput_fact :: Lens' CellInput (Maybe Text)

-- | The name of the column.
columnMetadata_name :: Lens' ColumnMetadata Text

-- | The format of the column.
columnMetadata_format :: Lens' ColumnMetadata Format

-- | An external identifier that represents the single row that is being
--   created as part of the BatchCreateTableRows request. This can be any
--   string that you can use to identify the row in the request. The
--   BatchCreateTableRows API puts the batch item id in the results to
--   allow you to link data in the request to data in the results.
createRowData_batchItemId :: Lens' CreateRowData Text

-- | A map representing the cells to create in the new row. The key is the
--   column id of the cell and the value is the CellInput object that
--   represents the data to set in that cell.
createRowData_cellsToCreate :: Lens' CreateRowData (HashMap Text CellInput)

-- | The raw value of the data. e.g. jsmith@example.com
dataItem_rawValue :: Lens' DataItem (Maybe Text)

-- | The overrideFormat is optional and is specified only if a particular
--   row of data has a different format for the data than the default
--   format defined on the screen or the table.
dataItem_overrideFormat :: Lens' DataItem (Maybe Format)

-- | The formatted value of the data. e.g. John Smith.
dataItem_formattedValue :: Lens' DataItem (Maybe Text)

-- | A parameter to indicate whether empty rows should be ignored or be
--   included in the import.
delimitedTextImportOptions_ignoreEmptyRows :: Lens' DelimitedTextImportOptions (Maybe Bool)

-- | Indicates whether the input file has a header row at the top
--   containing the column names.
delimitedTextImportOptions_hasHeaderRow :: Lens' DelimitedTextImportOptions (Maybe Bool)

-- | The encoding of the data in the input file.
delimitedTextImportOptions_dataCharacterEncoding :: Lens' DelimitedTextImportOptions (Maybe ImportDataCharacterEncoding)

-- | The delimiter to use for separating columns in a single row of the
--   input.
delimitedTextImportOptions_delimiter :: Lens' DelimitedTextImportOptions Text

-- | A map of the column id to the import properties for each column.
destinationOptions_columnMap :: Lens' DestinationOptions (Maybe (HashMap Text SourceDataColumnProperties))

-- | The id of the batch item that failed. This is the batch item id for
--   the BatchCreateTableRows and BatchUpsertTableRows operations and the
--   row id for the BatchUpdateTableRows and BatchDeleteTableRows
--   operations.
failedBatchItem_id :: Lens' FailedBatchItem Text

-- | The error message that indicates why the batch item failed.
failedBatchItem_errorMessage :: Lens' FailedBatchItem Text

-- | The optional contextRowId attribute can be used to specify the row id
--   of the context row if the filter formula contains unqualified
--   references to table columns and needs a context row to evaluate them
--   successfully.
filter_contextRowId :: Lens' Filter (Maybe Text)

-- | A formula representing a filter function that returns zero or more
--   matching rows from a table. Valid formulas in this field return a list
--   of rows from a table. The most common ways of writing a formula to
--   return a list of rows are to use the FindRow() or Filter() functions.
--   Any other formula that returns zero or more rows is also acceptable.
--   For example, you can use a formula that points to a cell that contains
--   a filter function.
filter_formula :: Lens' Filter Text

-- | The configuration parameters for the data source of the import
importDataSource_dataSourceConfig :: Lens' ImportDataSource ImportDataSourceConfig

-- | The URL from which source data will be downloaded for the import
--   request.
importDataSourceConfig_dataSourceUrl :: Lens' ImportDataSourceConfig (Maybe Text)

-- | The email id of the submitter of the import job, if available.
importJobSubmitter_email :: Lens' ImportJobSubmitter (Maybe Text)

-- | The AWS user ARN of the submitter of the import job, if available.
importJobSubmitter_userArn :: Lens' ImportJobSubmitter (Maybe Text)

-- | Options relating to parsing delimited text. Required if dataFormat is
--   DELIMITED_TEXT.
importOptions_delimitedTextOptions :: Lens' ImportOptions (Maybe DelimitedTextImportOptions)

-- | Options relating to the destination of the import request.
importOptions_destinationOptions :: Lens' ImportOptions (Maybe DestinationOptions)

-- | The ID for a particular row.
resultRow_rowId :: Lens' ResultRow (Maybe Text)

-- | List of all the data cells in a row.
resultRow_dataItems :: Lens' ResultRow [DataItem]

-- | List of headers for all the data cells in the block. The header
--   identifies the name and default format of the data cell. Data cells
--   appear in the same order in all rows as defined in the header. The
--   names and formats are not repeated in the rows. If a particular row
--   does not have a value for a data cell, a blank value is used.
--   
--   For example, a task list that displays the task name, due date and
--   assigned person might have headers [ { "name": "Task Name"}, {"name":
--   "Due Date", "format": "DATE"}, {"name": "Assigned", "format":
--   "CONTACT"} ]. Every row in the result will have the task name as the
--   first item, due date as the second item and assigned person as the
--   third item. If a particular task does not have a due date, that row
--   will still have a blank value in the second element and the assigned
--   person will still be in the third element.
resultSet_headers :: Lens' ResultSet [ColumnMetadata]

-- | List of rows returned by the request. Each row has a row Id and a list
--   of data cells in that row. The data cells will be present in the same
--   order as they are defined in the header.
resultSet_rows :: Lens' ResultSet [ResultRow]

-- | The index of the column in the input file.
sourceDataColumnProperties_columnIndex :: Lens' SourceDataColumnProperties (Maybe Natural)

-- | The id of the table.
table_tableId :: Lens' Table (Maybe Text)

-- | The name of the table.
table_tableName :: Lens' Table (Maybe Text)

-- | The column level format that is applied in the table. An empty value
--   in this field means that the column format is the default value
--   'AUTO'.
tableColumn_format :: Lens' TableColumn (Maybe Format)

-- | The name of the column in the table.
tableColumn_tableColumnName :: Lens' TableColumn (Maybe Text)

-- | The id of the column in the table.
tableColumn_tableColumnId :: Lens' TableColumn (Maybe Text)

-- | Details about the submitter of the import request.
tableDataImportJobMetadata_submitter :: Lens' TableDataImportJobMetadata ImportJobSubmitter

-- | The timestamp when the job was submitted for import.
tableDataImportJobMetadata_submitTime :: Lens' TableDataImportJobMetadata UTCTime

-- | The options that was specified at the time of submitting the import
--   request.
tableDataImportJobMetadata_importOptions :: Lens' TableDataImportJobMetadata ImportOptions

-- | The source of the data that was submitted for import.
tableDataImportJobMetadata_dataSource :: Lens' TableDataImportJobMetadata ImportDataSource

-- | The id of the row in the table.
tableRow_rowId :: Lens' TableRow Text

-- | A list of cells in the table row. The cells appear in the same order
--   as the columns of the table.
tableRow_cells :: Lens' TableRow [Cell]

-- | The id of the row that needs to be updated.
updateRowData_rowId :: Lens' UpdateRowData Text

-- | A map representing the cells to update in the given row. The key is
--   the column id of the cell and the value is the CellInput object that
--   represents the data to set in that cell.
updateRowData_cellsToUpdate :: Lens' UpdateRowData (HashMap Text CellInput)

-- | An external identifier that represents a single item in the request
--   that is being upserted as part of the BatchUpsertTableRows request.
--   This can be any string that you can use to identify the item in the
--   request. The BatchUpsertTableRows API puts the batch item id in the
--   results to allow you to link data in the request to data in the
--   results.
upsertRowData_batchItemId :: Lens' UpsertRowData Text

-- | The filter formula to use to find existing matching rows to update.
--   The formula needs to return zero or more rows. If the formula returns
--   0 rows, then a new row will be appended in the target table. If the
--   formula returns one or more rows, then the returned rows will be
--   updated.
--   
--   Note that the filter formula needs to return rows from the target
--   table for the upsert operation to succeed. If the filter formula has a
--   syntax error or it doesn't evaluate to zero or more rows in the target
--   table for any one item in the input list, then the entire
--   BatchUpsertTableRows request fails and no updates are made to the
--   table.
upsertRowData_filter :: Lens' UpsertRowData Filter

-- | A map representing the cells to update for the matching rows or an
--   appended row. The key is the column id of the cell and the value is
--   the CellInput object that represents the data to set in that cell.
upsertRowData_cellsToUpdate :: Lens' UpsertRowData (HashMap Text CellInput)

-- | The list of row ids that were changed as part of an upsert row
--   operation. If the upsert resulted in an update, this list could
--   potentially contain multiple rows that matched the filter and hence
--   got updated. If the upsert resulted in an append, this list would only
--   have the single row that was appended.
upsertRowsResult_rowIds :: Lens' UpsertRowsResult (NonEmpty Text)

-- | The result of the upsert action.
upsertRowsResult_upsertAction :: Lens' UpsertRowsResult UpsertAction

-- | Raw value of the variable.
variableValue_rawValue :: Lens' VariableValue Text


module Amazonka.HoneyCode.Waiters


-- | Derived from API version <tt>2020-03-01</tt> of the AWS service
--   descriptions, licensed under Apache 2.0.
--   
--   Amazon Honeycode is a fully managed service that allows you to quickly
--   build mobile and web apps for teams—without programming. Build
--   Honeycode apps for managing almost anything, like projects, customers,
--   operations, approvals, resources, and even your team.
module Amazonka.HoneyCode

-- | API version <tt>2020-03-01</tt> of the Amazon Honeycode SDK
--   configuration.
defaultService :: Service

-- | Request is invalid. The message in the response contains details on
--   why the request is invalid.
_ValidationException :: AsError a => Getting (First ServiceError) a ServiceError

-- | You do not have sufficient access to perform this action. Check that
--   the workbook is owned by you and your IAM policy allows access to the
--   resource in the request.
_AccessDeniedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The automation execution timed out.
_AutomationExecutionTimeoutException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request caused service quota to be breached.
_ServiceQuotaExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Tps(transactions per second) rate reached.
_ThrottlingException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The automation execution did not end successfully.
_AutomationExecutionException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request timed out.
_RequestTimeoutException :: AsError a => Getting (First ServiceError) a ServiceError

-- | There were unexpected errors from the server.
_InternalServerException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Remote service is unreachable.
_ServiceUnavailableException :: AsError a => Getting (First ServiceError) a ServiceError

-- | A Workbook, Table, App, Screen or Screen Automation was not found with
--   the given ID.
_ResourceNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | <i>See:</i> <a>newBatchDeleteTableRows</a> smart constructor.
data BatchDeleteTableRows
BatchDeleteTableRows' :: Maybe Text -> Text -> Text -> NonEmpty Text -> BatchDeleteTableRows

-- | Create a value of <a>BatchDeleteTableRows</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:clientRequestToken:BatchDeleteTableRows'</a>,
--   <a>batchDeleteTableRows_clientRequestToken</a> - The request token for
--   performing the delete action. Request tokens help to identify
--   duplicate requests. If a call times out or fails due to a transient
--   error like a failed network connection, you can retry the call with
--   the same request token. The service ensures that if the first call
--   using that request token is successfully performed, the second call
--   will not perform the action again.
--   
--   Note that request tokens are valid only for a few minutes. You cannot
--   use request tokens to dedupe requests spanning hours or days.
--   
--   <a>$sel:workbookId:BatchDeleteTableRows'</a>,
--   <a>batchDeleteTableRows_workbookId</a> - The ID of the workbook where
--   the rows are being deleted.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
--   
--   <a>$sel:tableId:BatchDeleteTableRows'</a>,
--   <a>batchDeleteTableRows_tableId</a> - The ID of the table where the
--   rows are being deleted.
--   
--   If a table with the specified id could not be found, this API throws
--   ResourceNotFoundException.
--   
--   <a>$sel:rowIds:BatchDeleteTableRows'</a>,
--   <a>batchDeleteTableRows_rowIds</a> - The list of row ids to delete
--   from the table. You need to specify at least one row id in this list.
--   
--   Note that if one of the row ids provided in the request does not exist
--   in the table, then the request fails and no rows are deleted from the
--   table.
newBatchDeleteTableRows :: Text -> Text -> NonEmpty Text -> BatchDeleteTableRows

-- | <i>See:</i> <a>newBatchDeleteTableRowsResponse</a> smart constructor.
data BatchDeleteTableRowsResponse
BatchDeleteTableRowsResponse' :: Maybe [FailedBatchItem] -> Int -> Integer -> BatchDeleteTableRowsResponse

-- | Create a value of <a>BatchDeleteTableRowsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failedBatchItems:BatchDeleteTableRowsResponse'</a>,
--   <a>batchDeleteTableRowsResponse_failedBatchItems</a> - The list of row
--   ids in the request that could not be deleted from the table. Each
--   element in this list contains one row id from the request that could
--   not be deleted along with the reason why that item could not be
--   deleted.
--   
--   <a>$sel:httpStatus:BatchDeleteTableRowsResponse'</a>,
--   <a>batchDeleteTableRowsResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:workbookCursor:BatchDeleteTableRowsResponse'</a>,
--   <a>batchDeleteTableRowsResponse_workbookCursor</a> - The updated
--   workbook cursor after deleting the rows from the table.
newBatchDeleteTableRowsResponse :: Int -> Integer -> BatchDeleteTableRowsResponse

-- | <i>See:</i> <a>newBatchUpdateTableRows</a> smart constructor.
data BatchUpdateTableRows
BatchUpdateTableRows' :: Maybe Text -> Text -> Text -> NonEmpty UpdateRowData -> BatchUpdateTableRows

-- | Create a value of <a>BatchUpdateTableRows</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:clientRequestToken:BatchUpdateTableRows'</a>,
--   <a>batchUpdateTableRows_clientRequestToken</a> - The request token for
--   performing the update action. Request tokens help to identify
--   duplicate requests. If a call times out or fails due to a transient
--   error like a failed network connection, you can retry the call with
--   the same request token. The service ensures that if the first call
--   using that request token is successfully performed, the second call
--   will not perform the action again.
--   
--   Note that request tokens are valid only for a few minutes. You cannot
--   use request tokens to dedupe requests spanning hours or days.
--   
--   <a>$sel:workbookId:BatchUpdateTableRows'</a>,
--   <a>batchUpdateTableRows_workbookId</a> - The ID of the workbook where
--   the rows are being updated.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
--   
--   <a>$sel:tableId:BatchUpdateTableRows'</a>,
--   <a>batchUpdateTableRows_tableId</a> - The ID of the table where the
--   rows are being updated.
--   
--   If a table with the specified id could not be found, this API throws
--   ResourceNotFoundException.
--   
--   <a>$sel:rowsToUpdate:BatchUpdateTableRows'</a>,
--   <a>batchUpdateTableRows_rowsToUpdate</a> - The list of rows to update
--   in the table. Each item in this list needs to contain the row id to
--   update along with the map of column id to cell values for each column
--   in that row that needs to be updated. You need to specify at least one
--   row in this list, and for each row, you need to specify at least one
--   column to update.
--   
--   Note that if one of the row or column ids in the request does not
--   exist in the table, then the request fails and no updates are made to
--   the table.
newBatchUpdateTableRows :: Text -> Text -> NonEmpty UpdateRowData -> BatchUpdateTableRows

-- | <i>See:</i> <a>newBatchUpdateTableRowsResponse</a> smart constructor.
data BatchUpdateTableRowsResponse
BatchUpdateTableRowsResponse' :: Maybe [FailedBatchItem] -> Int -> Integer -> BatchUpdateTableRowsResponse

-- | Create a value of <a>BatchUpdateTableRowsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failedBatchItems:BatchUpdateTableRowsResponse'</a>,
--   <a>batchUpdateTableRowsResponse_failedBatchItems</a> - The list of
--   batch items in the request that could not be updated in the table.
--   Each element in this list contains one item from the request that
--   could not be updated in the table along with the reason why that item
--   could not be updated.
--   
--   <a>$sel:httpStatus:BatchUpdateTableRowsResponse'</a>,
--   <a>batchUpdateTableRowsResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:workbookCursor:BatchUpdateTableRowsResponse'</a>,
--   <a>batchUpdateTableRowsResponse_workbookCursor</a> - The updated
--   workbook cursor after adding the new rows at the end of the table.
newBatchUpdateTableRowsResponse :: Int -> Integer -> BatchUpdateTableRowsResponse

-- | <i>See:</i> <a>newListTableRows</a> smart constructor.
data ListTableRows
ListTableRows' :: Maybe (NonEmpty Text) -> Maybe Text -> Maybe Natural -> Text -> Text -> ListTableRows

-- | Create a value of <a>ListTableRows</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rowIds:ListTableRows'</a>, <a>listTableRows_rowIds</a> - This
--   parameter is optional. If one or more row ids are specified in this
--   list, then only the specified row ids are returned in the result. If
--   no row ids are specified here, then all the rows in the table are
--   returned.
--   
--   <a>$sel:nextToken:ListTableRows'</a>, <a>listTableRows_nextToken</a> -
--   This parameter is optional. If a nextToken is not specified, the API
--   returns the first page of data.
--   
--   Pagination tokens expire after 1 hour. If you use a token that was
--   returned more than an hour back, the API will throw
--   ValidationException.
--   
--   <a>$sel:maxResults:ListTableRows'</a>, <a>listTableRows_maxResults</a>
--   - The maximum number of rows to return in each page of the results.
--   
--   <a>$sel:workbookId:ListTableRows'</a>, <a>listTableRows_workbookId</a>
--   - The ID of the workbook that contains the table whose rows are being
--   retrieved.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
--   
--   <a>$sel:tableId:ListTableRows'</a>, <a>listTableRows_tableId</a> - The
--   ID of the table whose rows are being retrieved.
--   
--   If a table with the specified id could not be found, this API throws
--   ResourceNotFoundException.
newListTableRows :: Text -> Text -> ListTableRows

-- | <i>See:</i> <a>newListTableRowsResponse</a> smart constructor.
data ListTableRowsResponse
ListTableRowsResponse' :: Maybe (NonEmpty Text) -> Maybe Text -> Int -> NonEmpty Text -> [TableRow] -> Integer -> ListTableRowsResponse

-- | Create a value of <a>ListTableRowsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rowIdsNotFound:ListTableRowsResponse'</a>,
--   <a>listTableRowsResponse_rowIdsNotFound</a> - The list of row ids
--   included in the request that were not found in the table.
--   
--   <a>$sel:nextToken:ListTableRows'</a>,
--   <a>listTableRowsResponse_nextToken</a> - Provides the pagination token
--   to load the next page if there are more results matching the request.
--   If a pagination token is not present in the response, it means that
--   all data matching the request has been loaded.
--   
--   <a>$sel:httpStatus:ListTableRowsResponse'</a>,
--   <a>listTableRowsResponse_httpStatus</a> - The response's http status
--   code.
--   
--   <a>$sel:columnIds:ListTableRowsResponse'</a>,
--   <a>listTableRowsResponse_columnIds</a> - The list of columns in the
--   table whose row data is returned in the result.
--   
--   <a>$sel:rows:ListTableRowsResponse'</a>,
--   <a>listTableRowsResponse_rows</a> - The list of rows in the table.
--   Note that this result is paginated, so this list contains a maximum of
--   100 rows.
--   
--   <a>$sel:workbookCursor:ListTableRowsResponse'</a>,
--   <a>listTableRowsResponse_workbookCursor</a> - Indicates the cursor of
--   the workbook at which the data returned by this request is read.
--   Workbook cursor keeps increasing with every update and the increments
--   are not sequential.
newListTableRowsResponse :: Int -> NonEmpty Text -> Integer -> ListTableRowsResponse

-- | <i>See:</i> <a>newInvokeScreenAutomation</a> smart constructor.
data InvokeScreenAutomation
InvokeScreenAutomation' :: Maybe Text -> Maybe (Sensitive (HashMap Text (Sensitive VariableValue))) -> Maybe Text -> Text -> Text -> Text -> Text -> InvokeScreenAutomation

-- | Create a value of <a>InvokeScreenAutomation</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rowId:InvokeScreenAutomation'</a>,
--   <a>invokeScreenAutomation_rowId</a> - The row ID for the automation if
--   the automation is defined inside a block with source or list.
--   
--   <a>$sel:variables:InvokeScreenAutomation'</a>,
--   <a>invokeScreenAutomation_variables</a> - Variables are specified as a
--   map where the key is the name of the variable as defined on the
--   screen. The value is an object which currently has only one property,
--   rawValue, which holds the value of the variable to be passed to the
--   screen. Any variables defined in a screen are required to be passed in
--   the call.
--   
--   <a>$sel:clientRequestToken:InvokeScreenAutomation'</a>,
--   <a>invokeScreenAutomation_clientRequestToken</a> - The request token
--   for performing the automation action. Request tokens help to identify
--   duplicate requests. If a call times out or fails due to a transient
--   error like a failed network connection, you can retry the call with
--   the same request token. The service ensures that if the first call
--   using that request token is successfully performed, the second call
--   will return the response of the previous call rather than performing
--   the action again.
--   
--   Note that request tokens are valid only for a few minutes. You cannot
--   use request tokens to dedupe requests spanning hours or days.
--   
--   <a>$sel:workbookId:InvokeScreenAutomation'</a>,
--   <a>invokeScreenAutomation_workbookId</a> - The ID of the workbook that
--   contains the screen automation.
--   
--   <a>$sel:appId:InvokeScreenAutomation'</a>,
--   <a>invokeScreenAutomation_appId</a> - The ID of the app that contains
--   the screen automation.
--   
--   <a>$sel:screenId:InvokeScreenAutomation'</a>,
--   <a>invokeScreenAutomation_screenId</a> - The ID of the screen that
--   contains the screen automation.
--   
--   <a>$sel:screenAutomationId:InvokeScreenAutomation'</a>,
--   <a>invokeScreenAutomation_screenAutomationId</a> - The ID of the
--   automation action to be performed.
newInvokeScreenAutomation :: Text -> Text -> Text -> Text -> InvokeScreenAutomation

-- | <i>See:</i> <a>newInvokeScreenAutomationResponse</a> smart
--   constructor.
data InvokeScreenAutomationResponse
InvokeScreenAutomationResponse' :: Int -> Integer -> InvokeScreenAutomationResponse

-- | Create a value of <a>InvokeScreenAutomationResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:InvokeScreenAutomationResponse'</a>,
--   <a>invokeScreenAutomationResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:workbookCursor:InvokeScreenAutomationResponse'</a>,
--   <a>invokeScreenAutomationResponse_workbookCursor</a> - The updated
--   workbook cursor after performing the automation action.
newInvokeScreenAutomationResponse :: Int -> Integer -> InvokeScreenAutomationResponse

-- | <i>See:</i> <a>newDescribeTableDataImportJob</a> smart constructor.
data DescribeTableDataImportJob
DescribeTableDataImportJob' :: Text -> Text -> Text -> DescribeTableDataImportJob

-- | Create a value of <a>DescribeTableDataImportJob</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:workbookId:DescribeTableDataImportJob'</a>,
--   <a>describeTableDataImportJob_workbookId</a> - The ID of the workbook
--   into which data was imported.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
--   
--   <a>$sel:tableId:DescribeTableDataImportJob'</a>,
--   <a>describeTableDataImportJob_tableId</a> - The ID of the table into
--   which data was imported.
--   
--   If a table with the specified id could not be found, this API throws
--   ResourceNotFoundException.
--   
--   <a>$sel:jobId:DescribeTableDataImportJob'</a>,
--   <a>describeTableDataImportJob_jobId</a> - The ID of the job that was
--   returned by the StartTableDataImportJob request.
--   
--   If a job with the specified id could not be found, this API throws
--   ResourceNotFoundException.
newDescribeTableDataImportJob :: Text -> Text -> Text -> DescribeTableDataImportJob

-- | <i>See:</i> <a>newDescribeTableDataImportJobResponse</a> smart
--   constructor.
data DescribeTableDataImportJobResponse
DescribeTableDataImportJobResponse' :: Int -> TableDataImportJobStatus -> Text -> TableDataImportJobMetadata -> DescribeTableDataImportJobResponse

-- | Create a value of <a>DescribeTableDataImportJobResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DescribeTableDataImportJobResponse'</a>,
--   <a>describeTableDataImportJobResponse_httpStatus</a> - The response's
--   http status code.
--   
--   <a>$sel:jobStatus:DescribeTableDataImportJobResponse'</a>,
--   <a>describeTableDataImportJobResponse_jobStatus</a> - The current
--   status of the import job.
--   
--   <a>$sel:message:DescribeTableDataImportJobResponse'</a>,
--   <a>describeTableDataImportJobResponse_message</a> - A message
--   providing more details about the current status of the import job.
--   
--   <a>$sel:jobMetadata:DescribeTableDataImportJobResponse'</a>,
--   <a>describeTableDataImportJobResponse_jobMetadata</a> - The metadata
--   about the job that was submitted for import.
newDescribeTableDataImportJobResponse :: Int -> TableDataImportJobStatus -> Text -> TableDataImportJobMetadata -> DescribeTableDataImportJobResponse

-- | <i>See:</i> <a>newStartTableDataImportJob</a> smart constructor.
data StartTableDataImportJob
StartTableDataImportJob' :: Text -> ImportDataSource -> ImportSourceDataFormat -> Text -> ImportOptions -> Text -> StartTableDataImportJob

-- | Create a value of <a>StartTableDataImportJob</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:workbookId:StartTableDataImportJob'</a>,
--   <a>startTableDataImportJob_workbookId</a> - The ID of the workbook
--   where the rows are being imported.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
--   
--   <a>$sel:dataSource:StartTableDataImportJob'</a>,
--   <a>startTableDataImportJob_dataSource</a> - The source of the data
--   that is being imported. The size of source must be no larger than 100
--   MB. Source must have no more than 100,000 cells and no more than 1,000
--   rows.
--   
--   <a>$sel:dataFormat:StartTableDataImportJob'</a>,
--   <a>startTableDataImportJob_dataFormat</a> - The format of the data
--   that is being imported. Currently the only option supported is
--   "DELIMITED_TEXT".
--   
--   <a>$sel:destinationTableId:StartTableDataImportJob'</a>,
--   <a>startTableDataImportJob_destinationTableId</a> - The ID of the
--   table where the rows are being imported.
--   
--   If a table with the specified id could not be found, this API throws
--   ResourceNotFoundException.
--   
--   <a>$sel:importOptions:StartTableDataImportJob'</a>,
--   <a>startTableDataImportJob_importOptions</a> - The options for
--   customizing this import request.
--   
--   <a>$sel:clientRequestToken:StartTableDataImportJob'</a>,
--   <a>startTableDataImportJob_clientRequestToken</a> - The request token
--   for performing the update action. Request tokens help to identify
--   duplicate requests. If a call times out or fails due to a transient
--   error like a failed network connection, you can retry the call with
--   the same request token. The service ensures that if the first call
--   using that request token is successfully performed, the second call
--   will not perform the action again.
--   
--   Note that request tokens are valid only for a few minutes. You cannot
--   use request tokens to dedupe requests spanning hours or days.
newStartTableDataImportJob :: Text -> ImportDataSource -> ImportSourceDataFormat -> Text -> ImportOptions -> Text -> StartTableDataImportJob

-- | <i>See:</i> <a>newStartTableDataImportJobResponse</a> smart
--   constructor.
data StartTableDataImportJobResponse
StartTableDataImportJobResponse' :: Int -> Text -> TableDataImportJobStatus -> StartTableDataImportJobResponse

-- | Create a value of <a>StartTableDataImportJobResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:StartTableDataImportJobResponse'</a>,
--   <a>startTableDataImportJobResponse_httpStatus</a> - The response's
--   http status code.
--   
--   <a>$sel:jobId:StartTableDataImportJobResponse'</a>,
--   <a>startTableDataImportJobResponse_jobId</a> - The id that is assigned
--   to this import job. Future requests to find out the status of this
--   import job need to send this id in the appropriate parameter in the
--   request.
--   
--   <a>$sel:jobStatus:StartTableDataImportJobResponse'</a>,
--   <a>startTableDataImportJobResponse_jobStatus</a> - The status of the
--   import job immediately after submitting the request.
newStartTableDataImportJobResponse :: Int -> Text -> TableDataImportJobStatus -> StartTableDataImportJobResponse

-- | <i>See:</i> <a>newBatchCreateTableRows</a> smart constructor.
data BatchCreateTableRows
BatchCreateTableRows' :: Maybe Text -> Text -> Text -> NonEmpty CreateRowData -> BatchCreateTableRows

-- | Create a value of <a>BatchCreateTableRows</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:clientRequestToken:BatchCreateTableRows'</a>,
--   <a>batchCreateTableRows_clientRequestToken</a> - The request token for
--   performing the batch create operation. Request tokens help to identify
--   duplicate requests. If a call times out or fails due to a transient
--   error like a failed network connection, you can retry the call with
--   the same request token. The service ensures that if the first call
--   using that request token is successfully performed, the second call
--   will not perform the operation again.
--   
--   Note that request tokens are valid only for a few minutes. You cannot
--   use request tokens to dedupe requests spanning hours or days.
--   
--   <a>$sel:workbookId:BatchCreateTableRows'</a>,
--   <a>batchCreateTableRows_workbookId</a> - The ID of the workbook where
--   the new rows are being added.
--   
--   If a workbook with the specified ID could not be found, this API
--   throws ResourceNotFoundException.
--   
--   <a>$sel:tableId:BatchCreateTableRows'</a>,
--   <a>batchCreateTableRows_tableId</a> - The ID of the table where the
--   new rows are being added.
--   
--   If a table with the specified ID could not be found, this API throws
--   ResourceNotFoundException.
--   
--   <a>$sel:rowsToCreate:BatchCreateTableRows'</a>,
--   <a>batchCreateTableRows_rowsToCreate</a> - The list of rows to create
--   at the end of the table. Each item in this list needs to have a batch
--   item id to uniquely identify the element in the request and the cells
--   to create for that row. You need to specify at least one item in this
--   list.
--   
--   Note that if one of the column ids in any of the rows in the request
--   does not exist in the table, then the request fails and no updates are
--   made to the table.
newBatchCreateTableRows :: Text -> Text -> NonEmpty CreateRowData -> BatchCreateTableRows

-- | <i>See:</i> <a>newBatchCreateTableRowsResponse</a> smart constructor.
data BatchCreateTableRowsResponse
BatchCreateTableRowsResponse' :: Maybe [FailedBatchItem] -> Int -> Integer -> HashMap Text Text -> BatchCreateTableRowsResponse

-- | Create a value of <a>BatchCreateTableRowsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failedBatchItems:BatchCreateTableRowsResponse'</a>,
--   <a>batchCreateTableRowsResponse_failedBatchItems</a> - The list of
--   batch items in the request that could not be added to the table. Each
--   element in this list contains one item from the request that could not
--   be added to the table along with the reason why that item could not be
--   added.
--   
--   <a>$sel:httpStatus:BatchCreateTableRowsResponse'</a>,
--   <a>batchCreateTableRowsResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:workbookCursor:BatchCreateTableRowsResponse'</a>,
--   <a>batchCreateTableRowsResponse_workbookCursor</a> - The updated
--   workbook cursor after adding the new rows at the end of the table.
--   
--   <a>$sel:createdRows:BatchCreateTableRowsResponse'</a>,
--   <a>batchCreateTableRowsResponse_createdRows</a> - The map of batch
--   item id to the row id that was created for that item.
newBatchCreateTableRowsResponse :: Int -> Integer -> BatchCreateTableRowsResponse

-- | <i>See:</i> <a>newListTables</a> smart constructor.
data ListTables
ListTables' :: Maybe Text -> Maybe Natural -> Text -> ListTables

-- | Create a value of <a>ListTables</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListTables'</a>, <a>listTables_nextToken</a> - This
--   parameter is optional. If a nextToken is not specified, the API
--   returns the first page of data.
--   
--   Pagination tokens expire after 1 hour. If you use a token that was
--   returned more than an hour back, the API will throw
--   ValidationException.
--   
--   <a>$sel:maxResults:ListTables'</a>, <a>listTables_maxResults</a> - The
--   maximum number of tables to return in each page of the results.
--   
--   <a>$sel:workbookId:ListTables'</a>, <a>listTables_workbookId</a> - The
--   ID of the workbook whose tables are being retrieved.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
newListTables :: Text -> ListTables

-- | <i>See:</i> <a>newListTablesResponse</a> smart constructor.
data ListTablesResponse
ListTablesResponse' :: Maybe Text -> Maybe Integer -> Int -> [Table] -> ListTablesResponse

-- | Create a value of <a>ListTablesResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListTables'</a>, <a>listTablesResponse_nextToken</a>
--   - Provides the pagination token to load the next page if there are
--   more results matching the request. If a pagination token is not
--   present in the response, it means that all data matching the request
--   has been loaded.
--   
--   <a>$sel:workbookCursor:ListTablesResponse'</a>,
--   <a>listTablesResponse_workbookCursor</a> - Indicates the cursor of the
--   workbook at which the data returned by this request is read. Workbook
--   cursor keeps increasing with every update and the increments are not
--   sequential.
--   
--   <a>$sel:httpStatus:ListTablesResponse'</a>,
--   <a>listTablesResponse_httpStatus</a> - The response's http status
--   code.
--   
--   <a>$sel:tables:ListTablesResponse'</a>,
--   <a>listTablesResponse_tables</a> - The list of tables in the workbook.
newListTablesResponse :: Int -> ListTablesResponse

-- | <i>See:</i> <a>newGetScreenData</a> smart constructor.
data GetScreenData
GetScreenData' :: Maybe (Sensitive (HashMap Text (Sensitive VariableValue))) -> Maybe Text -> Maybe Natural -> Text -> Text -> Text -> GetScreenData

-- | Create a value of <a>GetScreenData</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:variables:GetScreenData'</a>, <a>getScreenData_variables</a> -
--   Variables are optional and are needed only if the screen requires them
--   to render correctly. Variables are specified as a map where the key is
--   the name of the variable as defined on the screen. The value is an
--   object which currently has only one property, rawValue, which holds
--   the value of the variable to be passed to the screen.
--   
--   <a>$sel:nextToken:GetScreenData'</a>, <a>getScreenData_nextToken</a> -
--   This parameter is optional. If a nextToken is not specified, the API
--   returns the first page of data.
--   
--   Pagination tokens expire after 1 hour. If you use a token that was
--   returned more than an hour back, the API will throw
--   ValidationException.
--   
--   <a>$sel:maxResults:GetScreenData'</a>, <a>getScreenData_maxResults</a>
--   - The number of results to be returned on a single page. Specify a
--   number between 1 and 100. The maximum value is 100.
--   
--   This parameter is optional. If you don't specify this parameter, the
--   default page size is 100.
--   
--   <a>$sel:workbookId:GetScreenData'</a>, <a>getScreenData_workbookId</a>
--   - The ID of the workbook that contains the screen.
--   
--   <a>$sel:appId:GetScreenData'</a>, <a>getScreenData_appId</a> - The ID
--   of the app that contains the screem.
--   
--   <a>$sel:screenId:GetScreenData'</a>, <a>getScreenData_screenId</a> -
--   The ID of the screen.
newGetScreenData :: Text -> Text -> Text -> GetScreenData

-- | <i>See:</i> <a>newGetScreenDataResponse</a> smart constructor.
data GetScreenDataResponse
GetScreenDataResponse' :: Maybe Text -> Int -> HashMap Text ResultSet -> Integer -> GetScreenDataResponse

-- | Create a value of <a>GetScreenDataResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:GetScreenData'</a>,
--   <a>getScreenDataResponse_nextToken</a> - Provides the pagination token
--   to load the next page if there are more results matching the request.
--   If a pagination token is not present in the response, it means that
--   all data matching the query has been loaded.
--   
--   <a>$sel:httpStatus:GetScreenDataResponse'</a>,
--   <a>getScreenDataResponse_httpStatus</a> - The response's http status
--   code.
--   
--   <a>$sel:results:GetScreenDataResponse'</a>,
--   <a>getScreenDataResponse_results</a> - A map of all the rows on the
--   screen keyed by block name.
--   
--   <a>$sel:workbookCursor:GetScreenDataResponse'</a>,
--   <a>getScreenDataResponse_workbookCursor</a> - Indicates the cursor of
--   the workbook at which the data returned by this workbook is read.
--   Workbook cursor keeps increasing with every update and the increments
--   are not sequential.
newGetScreenDataResponse :: Int -> Integer -> GetScreenDataResponse

-- | <i>See:</i> <a>newQueryTableRows</a> smart constructor.
data QueryTableRows
QueryTableRows' :: Maybe Text -> Maybe Natural -> Text -> Text -> Filter -> QueryTableRows

-- | Create a value of <a>QueryTableRows</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:QueryTableRows'</a>, <a>queryTableRows_nextToken</a>
--   - This parameter is optional. If a nextToken is not specified, the API
--   returns the first page of data.
--   
--   Pagination tokens expire after 1 hour. If you use a token that was
--   returned more than an hour back, the API will throw
--   ValidationException.
--   
--   <a>$sel:maxResults:QueryTableRows'</a>,
--   <a>queryTableRows_maxResults</a> - The maximum number of rows to
--   return in each page of the results.
--   
--   <a>$sel:workbookId:QueryTableRows'</a>,
--   <a>queryTableRows_workbookId</a> - The ID of the workbook whose table
--   rows are being queried.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
--   
--   <a>$sel:tableId:QueryTableRows'</a>, <a>queryTableRows_tableId</a> -
--   The ID of the table whose rows are being queried.
--   
--   If a table with the specified id could not be found, this API throws
--   ResourceNotFoundException.
--   
--   <a>$sel:filterFormula:QueryTableRows'</a>,
--   <a>queryTableRows_filterFormula</a> - An object that represents a
--   filter formula along with the id of the context row under which the
--   filter function needs to evaluate.
newQueryTableRows :: Text -> Text -> Filter -> QueryTableRows

-- | <i>See:</i> <a>newQueryTableRowsResponse</a> smart constructor.
data QueryTableRowsResponse
QueryTableRowsResponse' :: Maybe Text -> Int -> NonEmpty Text -> [TableRow] -> Integer -> QueryTableRowsResponse

-- | Create a value of <a>QueryTableRowsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:QueryTableRows'</a>,
--   <a>queryTableRowsResponse_nextToken</a> - Provides the pagination
--   token to load the next page if there are more results matching the
--   request. If a pagination token is not present in the response, it
--   means that all data matching the request has been loaded.
--   
--   <a>$sel:httpStatus:QueryTableRowsResponse'</a>,
--   <a>queryTableRowsResponse_httpStatus</a> - The response's http status
--   code.
--   
--   <a>$sel:columnIds:QueryTableRowsResponse'</a>,
--   <a>queryTableRowsResponse_columnIds</a> - The list of columns in the
--   table whose row data is returned in the result.
--   
--   <a>$sel:rows:QueryTableRowsResponse'</a>,
--   <a>queryTableRowsResponse_rows</a> - The list of rows in the table
--   that match the query filter.
--   
--   <a>$sel:workbookCursor:QueryTableRowsResponse'</a>,
--   <a>queryTableRowsResponse_workbookCursor</a> - Indicates the cursor of
--   the workbook at which the data returned by this request is read.
--   Workbook cursor keeps increasing with every update and the increments
--   are not sequential.
newQueryTableRowsResponse :: Int -> NonEmpty Text -> Integer -> QueryTableRowsResponse

-- | <i>See:</i> <a>newBatchUpsertTableRows</a> smart constructor.
data BatchUpsertTableRows
BatchUpsertTableRows' :: Maybe Text -> Text -> Text -> [UpsertRowData] -> BatchUpsertTableRows

-- | Create a value of <a>BatchUpsertTableRows</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:clientRequestToken:BatchUpsertTableRows'</a>,
--   <a>batchUpsertTableRows_clientRequestToken</a> - The request token for
--   performing the update action. Request tokens help to identify
--   duplicate requests. If a call times out or fails due to a transient
--   error like a failed network connection, you can retry the call with
--   the same request token. The service ensures that if the first call
--   using that request token is successfully performed, the second call
--   will not perform the action again.
--   
--   Note that request tokens are valid only for a few minutes. You cannot
--   use request tokens to dedupe requests spanning hours or days.
--   
--   <a>$sel:workbookId:BatchUpsertTableRows'</a>,
--   <a>batchUpsertTableRows_workbookId</a> - The ID of the workbook where
--   the rows are being upserted.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
--   
--   <a>$sel:tableId:BatchUpsertTableRows'</a>,
--   <a>batchUpsertTableRows_tableId</a> - The ID of the table where the
--   rows are being upserted.
--   
--   If a table with the specified id could not be found, this API throws
--   ResourceNotFoundException.
--   
--   <a>$sel:rowsToUpsert:BatchUpsertTableRows'</a>,
--   <a>batchUpsertTableRows_rowsToUpsert</a> - The list of rows to upsert
--   in the table. Each item in this list needs to have a batch item id to
--   uniquely identify the element in the request, a filter expression to
--   find the rows to update for that element and the cell values to set
--   for each column in the upserted rows. You need to specify at least one
--   item in this list.
--   
--   Note that if one of the filter formulas in the request fails to
--   evaluate because of an error or one of the column ids in any of the
--   rows does not exist in the table, then the request fails and no
--   updates are made to the table.
newBatchUpsertTableRows :: Text -> Text -> BatchUpsertTableRows

-- | <i>See:</i> <a>newBatchUpsertTableRowsResponse</a> smart constructor.
data BatchUpsertTableRowsResponse
BatchUpsertTableRowsResponse' :: Maybe [FailedBatchItem] -> Int -> HashMap Text UpsertRowsResult -> Integer -> BatchUpsertTableRowsResponse

-- | Create a value of <a>BatchUpsertTableRowsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failedBatchItems:BatchUpsertTableRowsResponse'</a>,
--   <a>batchUpsertTableRowsResponse_failedBatchItems</a> - The list of
--   batch items in the request that could not be updated or appended in
--   the table. Each element in this list contains one item from the
--   request that could not be updated in the table along with the reason
--   why that item could not be updated or appended.
--   
--   <a>$sel:httpStatus:BatchUpsertTableRowsResponse'</a>,
--   <a>batchUpsertTableRowsResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:rows:BatchUpsertTableRowsResponse'</a>,
--   <a>batchUpsertTableRowsResponse_rows</a> - A map with the batch item
--   id as the key and the result of the upsert operation as the value. The
--   result of the upsert operation specifies whether existing rows were
--   updated or a new row was appended, along with the list of row ids that
--   were affected.
--   
--   <a>$sel:workbookCursor:BatchUpsertTableRowsResponse'</a>,
--   <a>batchUpsertTableRowsResponse_workbookCursor</a> - The updated
--   workbook cursor after updating or appending rows in the table.
newBatchUpsertTableRowsResponse :: Int -> Integer -> BatchUpsertTableRowsResponse

-- | <i>See:</i> <a>newListTableColumns</a> smart constructor.
data ListTableColumns
ListTableColumns' :: Maybe Text -> Text -> Text -> ListTableColumns

-- | Create a value of <a>ListTableColumns</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListTableColumns'</a>,
--   <a>listTableColumns_nextToken</a> - This parameter is optional. If a
--   nextToken is not specified, the API returns the first page of data.
--   
--   Pagination tokens expire after 1 hour. If you use a token that was
--   returned more than an hour back, the API will throw
--   ValidationException.
--   
--   <a>$sel:workbookId:ListTableColumns'</a>,
--   <a>listTableColumns_workbookId</a> - The ID of the workbook that
--   contains the table whose columns are being retrieved.
--   
--   If a workbook with the specified id could not be found, this API
--   throws ResourceNotFoundException.
--   
--   <a>$sel:tableId:ListTableColumns'</a>, <a>listTableColumns_tableId</a>
--   - The ID of the table whose columns are being retrieved.
--   
--   If a table with the specified id could not be found, this API throws
--   ResourceNotFoundException.
newListTableColumns :: Text -> Text -> ListTableColumns

-- | <i>See:</i> <a>newListTableColumnsResponse</a> smart constructor.
data ListTableColumnsResponse
ListTableColumnsResponse' :: Maybe Text -> Maybe Integer -> Int -> [TableColumn] -> ListTableColumnsResponse

-- | Create a value of <a>ListTableColumnsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListTableColumns'</a>,
--   <a>listTableColumnsResponse_nextToken</a> - Provides the pagination
--   token to load the next page if there are more results matching the
--   request. If a pagination token is not present in the response, it
--   means that all data matching the request has been loaded.
--   
--   <a>$sel:workbookCursor:ListTableColumnsResponse'</a>,
--   <a>listTableColumnsResponse_workbookCursor</a> - Indicates the cursor
--   of the workbook at which the data returned by this request is read.
--   Workbook cursor keeps increasing with every update and the increments
--   are not sequential.
--   
--   <a>$sel:httpStatus:ListTableColumnsResponse'</a>,
--   <a>listTableColumnsResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:tableColumns:ListTableColumnsResponse'</a>,
--   <a>listTableColumnsResponse_tableColumns</a> - The list of columns in
--   the table.
newListTableColumnsResponse :: Int -> ListTableColumnsResponse
newtype Format
Format' :: Text -> Format
[fromFormat] :: Format -> Text
pattern Format_ACCOUNTING :: Format
pattern Format_AUTO :: Format
pattern Format_CONTACT :: Format
pattern Format_CURRENCY :: Format
pattern Format_DATE :: Format
pattern Format_DATE_TIME :: Format
pattern Format_NUMBER :: Format
pattern Format_PERCENTAGE :: Format
pattern Format_ROWLINK :: Format
pattern Format_TEXT :: Format
pattern Format_TIME :: Format
newtype ImportDataCharacterEncoding
ImportDataCharacterEncoding' :: Text -> ImportDataCharacterEncoding
[fromImportDataCharacterEncoding] :: ImportDataCharacterEncoding -> Text
pattern ImportDataCharacterEncoding_ISO_8859_1 :: ImportDataCharacterEncoding
pattern ImportDataCharacterEncoding_US_ASCII :: ImportDataCharacterEncoding
pattern ImportDataCharacterEncoding_UTF_16 :: ImportDataCharacterEncoding
pattern ImportDataCharacterEncoding_UTF_16BE :: ImportDataCharacterEncoding
pattern ImportDataCharacterEncoding_UTF_16LE :: ImportDataCharacterEncoding
pattern ImportDataCharacterEncoding_UTF_8 :: ImportDataCharacterEncoding
newtype ImportSourceDataFormat
ImportSourceDataFormat' :: Text -> ImportSourceDataFormat
[fromImportSourceDataFormat] :: ImportSourceDataFormat -> Text
pattern ImportSourceDataFormat_DELIMITED_TEXT :: ImportSourceDataFormat
newtype TableDataImportJobStatus
TableDataImportJobStatus' :: Text -> TableDataImportJobStatus
[fromTableDataImportJobStatus] :: TableDataImportJobStatus -> Text
pattern TableDataImportJobStatus_COMPLETED :: TableDataImportJobStatus
pattern TableDataImportJobStatus_FAILED :: TableDataImportJobStatus
pattern TableDataImportJobStatus_IN_PROGRESS :: TableDataImportJobStatus
pattern TableDataImportJobStatus_SUBMITTED :: TableDataImportJobStatus
newtype UpsertAction
UpsertAction' :: Text -> UpsertAction
[fromUpsertAction] :: UpsertAction -> Text
pattern UpsertAction_APPENDED :: UpsertAction
pattern UpsertAction_UPDATED :: UpsertAction

-- | An object that represents a single cell in a table.
--   
--   <i>See:</i> <a>newCell</a> smart constructor.
data Cell
Cell' :: Maybe Text -> Maybe Format -> Maybe (Sensitive Text) -> Maybe Text -> Cell

-- | Create a value of <a>Cell</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rawValue:Cell'</a>, <a>cell_rawValue</a> - The raw value of
--   the data contained in the cell. The raw value depends on the format of
--   the data in the cell. However the attribute in the API return value is
--   always a string containing the raw value.
--   
--   Cells with format DATE, DATE_TIME or TIME have the raw value as a
--   floating point number where the whole number represents the number of
--   days since 1/1/1900 and the fractional part represents the fraction of
--   the day since midnight. For example, a cell with date 11/3/2020 has
--   the raw value "44138". A cell with the time 9:00 AM has the raw value
--   "0.375" and a cell with date/time value of 11/3/2020 9:00 AM has the
--   raw value "44138.375". Notice that even though the raw value is a
--   number in all three cases, it is still represented as a string.
--   
--   Cells with format NUMBER, CURRENCY, PERCENTAGE and ACCOUNTING have the
--   raw value of the data as the number representing the data being
--   displayed. For example, the number 1.325 with two decimal places in
--   the format will have it's raw value as "1.325" and formatted value as
--   "1.33". A currency value for $10 will have the raw value as "10" and
--   formatted value as "$10.00". A value representing 20% with two decimal
--   places in the format will have its raw value as "0.2" and the
--   formatted value as "20.00%". An accounting value of -$25 will have
--   "-25" as the raw value and "$ (25.00)" as the formatted value.
--   
--   Cells with format TEXT will have the raw text as the raw value. For
--   example, a cell with text "John Smith" will have "John Smith" as both
--   the raw value and the formatted value.
--   
--   Cells with format CONTACT will have the name of the contact as a
--   formatted value and the email address of the contact as the raw value.
--   For example, a contact for John Smith will have "John Smith" as the
--   formatted value and "john.smith@example.com" as the raw value.
--   
--   Cells with format ROWLINK (aka picklist) will have the first column of
--   the linked row as the formatted value and the row id of the linked row
--   as the raw value. For example, a cell containing a picklist to a table
--   that displays task status might have "Completed" as the formatted
--   value and
--   "row:dfcefaee-5b37-4355-8f28-40c3e4ff5dd4/ca432b2f-b8eb-431d-9fb5-cbe0342f9f03"
--   as the raw value.
--   
--   Cells with format AUTO or cells without any format that are
--   auto-detected as one of the formats above will contain the raw and
--   formatted values as mentioned above, based on the auto-detected
--   formats. If there is no auto-detected format, the raw and formatted
--   values will be the same as the data in the cell.
--   
--   <a>$sel:format:Cell'</a>, <a>cell_format</a> - The format of the cell.
--   If this field is empty, then the format is either not specified in the
--   workbook or the format is set to AUTO.
--   
--   <a>$sel:formula:Cell'</a>, <a>cell_formula</a> - The formula contained
--   in the cell. This field is empty if a cell does not have a formula.
--   
--   <a>$sel:formattedValue:Cell'</a>, <a>cell_formattedValue</a> - The
--   formatted value of the cell. This is the value that you see displayed
--   in the cell in the UI.
--   
--   Note that the formatted value of a cell is always represented as a
--   string irrespective of the data that is stored in the cell. For
--   example, if a cell contains a date, the formatted value of the cell is
--   the string representation of the formatted date being shown in the
--   cell in the UI. See details in the rawValue field below for how cells
--   of different formats will have different raw and formatted values.
newCell :: Cell

-- | CellInput object contains the data needed to create or update cells in
--   a table.
--   
--   <i>See:</i> <a>newCellInput</a> smart constructor.
data CellInput
CellInput' :: Maybe (Sensitive Text) -> CellInput

-- | Create a value of <a>CellInput</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:fact:CellInput'</a>, <a>cellInput_fact</a> - Fact represents
--   the data that is entered into a cell. This data can be free text or a
--   formula. Formulas need to start with the equals (=) sign.
newCellInput :: CellInput

-- | Metadata for column in the table.
--   
--   <i>See:</i> <a>newColumnMetadata</a> smart constructor.
data ColumnMetadata
ColumnMetadata' :: Sensitive Text -> Format -> ColumnMetadata

-- | Create a value of <a>ColumnMetadata</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:name:ColumnMetadata'</a>, <a>columnMetadata_name</a> - The
--   name of the column.
--   
--   <a>$sel:format:ColumnMetadata'</a>, <a>columnMetadata_format</a> - The
--   format of the column.
newColumnMetadata :: Text -> Format -> ColumnMetadata

-- | Data needed to create a single row in a table as part of the
--   BatchCreateTableRows request.
--   
--   <i>See:</i> <a>newCreateRowData</a> smart constructor.
data CreateRowData
CreateRowData' :: Text -> HashMap Text CellInput -> CreateRowData

-- | Create a value of <a>CreateRowData</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:batchItemId:CreateRowData'</a>,
--   <a>createRowData_batchItemId</a> - An external identifier that
--   represents the single row that is being created as part of the
--   BatchCreateTableRows request. This can be any string that you can use
--   to identify the row in the request. The BatchCreateTableRows API puts
--   the batch item id in the results to allow you to link data in the
--   request to data in the results.
--   
--   <a>$sel:cellsToCreate:CreateRowData'</a>,
--   <a>createRowData_cellsToCreate</a> - A map representing the cells to
--   create in the new row. The key is the column id of the cell and the
--   value is the CellInput object that represents the data to set in that
--   cell.
newCreateRowData :: Text -> CreateRowData

-- | The data in a particular data cell defined on the screen.
--   
--   <i>See:</i> <a>newDataItem</a> smart constructor.
data DataItem
DataItem' :: Maybe Text -> Maybe Format -> Maybe Text -> DataItem

-- | Create a value of <a>DataItem</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rawValue:DataItem'</a>, <a>dataItem_rawValue</a> - The raw
--   value of the data. e.g. jsmith@example.com
--   
--   <a>$sel:overrideFormat:DataItem'</a>, <a>dataItem_overrideFormat</a> -
--   The overrideFormat is optional and is specified only if a particular
--   row of data has a different format for the data than the default
--   format defined on the screen or the table.
--   
--   <a>$sel:formattedValue:DataItem'</a>, <a>dataItem_formattedValue</a> -
--   The formatted value of the data. e.g. John Smith.
newDataItem :: DataItem

-- | An object that contains the options relating to parsing delimited text
--   as part of an import request.
--   
--   <i>See:</i> <a>newDelimitedTextImportOptions</a> smart constructor.
data DelimitedTextImportOptions
DelimitedTextImportOptions' :: Maybe Bool -> Maybe Bool -> Maybe ImportDataCharacterEncoding -> Text -> DelimitedTextImportOptions

-- | Create a value of <a>DelimitedTextImportOptions</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:ignoreEmptyRows:DelimitedTextImportOptions'</a>,
--   <a>delimitedTextImportOptions_ignoreEmptyRows</a> - A parameter to
--   indicate whether empty rows should be ignored or be included in the
--   import.
--   
--   <a>$sel:hasHeaderRow:DelimitedTextImportOptions'</a>,
--   <a>delimitedTextImportOptions_hasHeaderRow</a> - Indicates whether the
--   input file has a header row at the top containing the column names.
--   
--   <a>$sel:dataCharacterEncoding:DelimitedTextImportOptions'</a>,
--   <a>delimitedTextImportOptions_dataCharacterEncoding</a> - The encoding
--   of the data in the input file.
--   
--   <a>$sel:delimiter:DelimitedTextImportOptions'</a>,
--   <a>delimitedTextImportOptions_delimiter</a> - The delimiter to use for
--   separating columns in a single row of the input.
newDelimitedTextImportOptions :: Text -> DelimitedTextImportOptions

-- | An object that contains the options relating to the destination of the
--   import request.
--   
--   <i>See:</i> <a>newDestinationOptions</a> smart constructor.
data DestinationOptions
DestinationOptions' :: Maybe (HashMap Text SourceDataColumnProperties) -> DestinationOptions

-- | Create a value of <a>DestinationOptions</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:columnMap:DestinationOptions'</a>,
--   <a>destinationOptions_columnMap</a> - A map of the column id to the
--   import properties for each column.
newDestinationOptions :: DestinationOptions

-- | A single item in a batch that failed to perform the intended action
--   because of an error preventing it from succeeding.
--   
--   <i>See:</i> <a>newFailedBatchItem</a> smart constructor.
data FailedBatchItem
FailedBatchItem' :: Text -> Text -> FailedBatchItem

-- | Create a value of <a>FailedBatchItem</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:id:FailedBatchItem'</a>, <a>failedBatchItem_id</a> - The id of
--   the batch item that failed. This is the batch item id for the
--   BatchCreateTableRows and BatchUpsertTableRows operations and the row
--   id for the BatchUpdateTableRows and BatchDeleteTableRows operations.
--   
--   <a>$sel:errorMessage:FailedBatchItem'</a>,
--   <a>failedBatchItem_errorMessage</a> - The error message that indicates
--   why the batch item failed.
newFailedBatchItem :: Text -> Text -> FailedBatchItem

-- | An object that represents a filter formula along with the id of the
--   context row under which the filter function needs to evaluate.
--   
--   <i>See:</i> <a>newFilter</a> smart constructor.
data Filter
Filter' :: Maybe Text -> Sensitive Text -> Filter

-- | Create a value of <a>Filter</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:contextRowId:Filter'</a>, <a>filter_contextRowId</a> - The
--   optional contextRowId attribute can be used to specify the row id of
--   the context row if the filter formula contains unqualified references
--   to table columns and needs a context row to evaluate them
--   successfully.
--   
--   <a>$sel:formula:Filter'</a>, <a>filter_formula</a> - A formula
--   representing a filter function that returns zero or more matching rows
--   from a table. Valid formulas in this field return a list of rows from
--   a table. The most common ways of writing a formula to return a list of
--   rows are to use the FindRow() or Filter() functions. Any other formula
--   that returns zero or more rows is also acceptable. For example, you
--   can use a formula that points to a cell that contains a filter
--   function.
newFilter :: Text -> Filter

-- | An object that has details about the source of the data that was
--   submitted for import.
--   
--   <i>See:</i> <a>newImportDataSource</a> smart constructor.
data ImportDataSource
ImportDataSource' :: ImportDataSourceConfig -> ImportDataSource

-- | Create a value of <a>ImportDataSource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dataSourceConfig:ImportDataSource'</a>,
--   <a>importDataSource_dataSourceConfig</a> - The configuration
--   parameters for the data source of the import
newImportDataSource :: ImportDataSourceConfig -> ImportDataSource

-- | An object that contains the configuration parameters for the data
--   source of an import request.
--   
--   <i>See:</i> <a>newImportDataSourceConfig</a> smart constructor.
data ImportDataSourceConfig
ImportDataSourceConfig' :: Maybe Text -> ImportDataSourceConfig

-- | Create a value of <a>ImportDataSourceConfig</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dataSourceUrl:ImportDataSourceConfig'</a>,
--   <a>importDataSourceConfig_dataSourceUrl</a> - The URL from which
--   source data will be downloaded for the import request.
newImportDataSourceConfig :: ImportDataSourceConfig

-- | An object that contains the attributes of the submitter of the import
--   job.
--   
--   <i>See:</i> <a>newImportJobSubmitter</a> smart constructor.
data ImportJobSubmitter
ImportJobSubmitter' :: Maybe (Sensitive Text) -> Maybe Text -> ImportJobSubmitter

-- | Create a value of <a>ImportJobSubmitter</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:email:ImportJobSubmitter'</a>, <a>importJobSubmitter_email</a>
--   - The email id of the submitter of the import job, if available.
--   
--   <a>$sel:userArn:ImportJobSubmitter'</a>,
--   <a>importJobSubmitter_userArn</a> - The AWS user ARN of the submitter
--   of the import job, if available.
newImportJobSubmitter :: ImportJobSubmitter

-- | An object that contains the options specified by the sumitter of the
--   import request.
--   
--   <i>See:</i> <a>newImportOptions</a> smart constructor.
data ImportOptions
ImportOptions' :: Maybe DelimitedTextImportOptions -> Maybe DestinationOptions -> ImportOptions

-- | Create a value of <a>ImportOptions</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:delimitedTextOptions:ImportOptions'</a>,
--   <a>importOptions_delimitedTextOptions</a> - Options relating to
--   parsing delimited text. Required if dataFormat is DELIMITED_TEXT.
--   
--   <a>$sel:destinationOptions:ImportOptions'</a>,
--   <a>importOptions_destinationOptions</a> - Options relating to the
--   destination of the import request.
newImportOptions :: ImportOptions

-- | A single row in the ResultSet.
--   
--   <i>See:</i> <a>newResultRow</a> smart constructor.
data ResultRow
ResultRow' :: Maybe Text -> [Sensitive DataItem] -> ResultRow

-- | Create a value of <a>ResultRow</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rowId:ResultRow'</a>, <a>resultRow_rowId</a> - The ID for a
--   particular row.
--   
--   <a>$sel:dataItems:ResultRow'</a>, <a>resultRow_dataItems</a> - List of
--   all the data cells in a row.
newResultRow :: ResultRow

-- | ResultSet contains the results of the request for a single block or
--   list defined on the screen.
--   
--   <i>See:</i> <a>newResultSet</a> smart constructor.
data ResultSet
ResultSet' :: [ColumnMetadata] -> [ResultRow] -> ResultSet

-- | Create a value of <a>ResultSet</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:headers:ResultSet'</a>, <a>resultSet_headers</a> - List of
--   headers for all the data cells in the block. The header identifies the
--   name and default format of the data cell. Data cells appear in the
--   same order in all rows as defined in the header. The names and formats
--   are not repeated in the rows. If a particular row does not have a
--   value for a data cell, a blank value is used.
--   
--   For example, a task list that displays the task name, due date and
--   assigned person might have headers [ { "name": "Task Name"}, {"name":
--   "Due Date", "format": "DATE"}, {"name": "Assigned", "format":
--   "CONTACT"} ]. Every row in the result will have the task name as the
--   first item, due date as the second item and assigned person as the
--   third item. If a particular task does not have a due date, that row
--   will still have a blank value in the second element and the assigned
--   person will still be in the third element.
--   
--   <a>$sel:rows:ResultSet'</a>, <a>resultSet_rows</a> - List of rows
--   returned by the request. Each row has a row Id and a list of data
--   cells in that row. The data cells will be present in the same order as
--   they are defined in the header.
newResultSet :: ResultSet

-- | An object that contains the properties for importing data to a
--   specific column in a table.
--   
--   <i>See:</i> <a>newSourceDataColumnProperties</a> smart constructor.
data SourceDataColumnProperties
SourceDataColumnProperties' :: Maybe Natural -> SourceDataColumnProperties

-- | Create a value of <a>SourceDataColumnProperties</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:columnIndex:SourceDataColumnProperties'</a>,
--   <a>sourceDataColumnProperties_columnIndex</a> - The index of the
--   column in the input file.
newSourceDataColumnProperties :: SourceDataColumnProperties

-- | An object representing the properties of a table in a workbook.
--   
--   <i>See:</i> <a>newTable</a> smart constructor.
data Table
Table' :: Maybe Text -> Maybe Text -> Table

-- | Create a value of <a>Table</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableId:Table'</a>, <a>table_tableId</a> - The id of the
--   table.
--   
--   <a>$sel:tableName:Table'</a>, <a>table_tableName</a> - The name of the
--   table.
newTable :: Table

-- | An object that contains attributes about a single column in a table
--   
--   <i>See:</i> <a>newTableColumn</a> smart constructor.
data TableColumn
TableColumn' :: Maybe Format -> Maybe Text -> Maybe Text -> TableColumn

-- | Create a value of <a>TableColumn</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:format:TableColumn'</a>, <a>tableColumn_format</a> - The
--   column level format that is applied in the table. An empty value in
--   this field means that the column format is the default value 'AUTO'.
--   
--   <a>$sel:tableColumnName:TableColumn'</a>,
--   <a>tableColumn_tableColumnName</a> - The name of the column in the
--   table.
--   
--   <a>$sel:tableColumnId:TableColumn'</a>,
--   <a>tableColumn_tableColumnId</a> - The id of the column in the table.
newTableColumn :: TableColumn

-- | The metadata associated with the table data import job that was
--   submitted.
--   
--   <i>See:</i> <a>newTableDataImportJobMetadata</a> smart constructor.
data TableDataImportJobMetadata
TableDataImportJobMetadata' :: ImportJobSubmitter -> POSIX -> ImportOptions -> ImportDataSource -> TableDataImportJobMetadata

-- | Create a value of <a>TableDataImportJobMetadata</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:submitter:TableDataImportJobMetadata'</a>,
--   <a>tableDataImportJobMetadata_submitter</a> - Details about the
--   submitter of the import request.
--   
--   <a>$sel:submitTime:TableDataImportJobMetadata'</a>,
--   <a>tableDataImportJobMetadata_submitTime</a> - The timestamp when the
--   job was submitted for import.
--   
--   <a>$sel:importOptions:TableDataImportJobMetadata'</a>,
--   <a>tableDataImportJobMetadata_importOptions</a> - The options that was
--   specified at the time of submitting the import request.
--   
--   <a>$sel:dataSource:TableDataImportJobMetadata'</a>,
--   <a>tableDataImportJobMetadata_dataSource</a> - The source of the data
--   that was submitted for import.
newTableDataImportJobMetadata :: ImportJobSubmitter -> UTCTime -> ImportOptions -> ImportDataSource -> TableDataImportJobMetadata

-- | An object that contains attributes about a single row in a table
--   
--   <i>See:</i> <a>newTableRow</a> smart constructor.
data TableRow
TableRow' :: Text -> [Sensitive Cell] -> TableRow

-- | Create a value of <a>TableRow</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rowId:TableRow'</a>, <a>tableRow_rowId</a> - The id of the row
--   in the table.
--   
--   <a>$sel:cells:TableRow'</a>, <a>tableRow_cells</a> - A list of cells
--   in the table row. The cells appear in the same order as the columns of
--   the table.
newTableRow :: Text -> TableRow

-- | Data needed to create a single row in a table as part of the
--   BatchCreateTableRows request.
--   
--   <i>See:</i> <a>newUpdateRowData</a> smart constructor.
data UpdateRowData
UpdateRowData' :: Text -> HashMap Text CellInput -> UpdateRowData

-- | Create a value of <a>UpdateRowData</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rowId:UpdateRowData'</a>, <a>updateRowData_rowId</a> - The id
--   of the row that needs to be updated.
--   
--   <a>$sel:cellsToUpdate:UpdateRowData'</a>,
--   <a>updateRowData_cellsToUpdate</a> - A map representing the cells to
--   update in the given row. The key is the column id of the cell and the
--   value is the CellInput object that represents the data to set in that
--   cell.
newUpdateRowData :: Text -> UpdateRowData

-- | Data needed to upsert rows in a table as part of a single item in the
--   BatchUpsertTableRows request.
--   
--   <i>See:</i> <a>newUpsertRowData</a> smart constructor.
data UpsertRowData
UpsertRowData' :: Text -> Filter -> HashMap Text CellInput -> UpsertRowData

-- | Create a value of <a>UpsertRowData</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:batchItemId:UpsertRowData'</a>,
--   <a>upsertRowData_batchItemId</a> - An external identifier that
--   represents a single item in the request that is being upserted as part
--   of the BatchUpsertTableRows request. This can be any string that you
--   can use to identify the item in the request. The BatchUpsertTableRows
--   API puts the batch item id in the results to allow you to link data in
--   the request to data in the results.
--   
--   <a>$sel:filter':UpsertRowData'</a>, <a>upsertRowData_filter</a> - The
--   filter formula to use to find existing matching rows to update. The
--   formula needs to return zero or more rows. If the formula returns 0
--   rows, then a new row will be appended in the target table. If the
--   formula returns one or more rows, then the returned rows will be
--   updated.
--   
--   Note that the filter formula needs to return rows from the target
--   table for the upsert operation to succeed. If the filter formula has a
--   syntax error or it doesn't evaluate to zero or more rows in the target
--   table for any one item in the input list, then the entire
--   BatchUpsertTableRows request fails and no updates are made to the
--   table.
--   
--   <a>$sel:cellsToUpdate:UpsertRowData'</a>,
--   <a>upsertRowData_cellsToUpdate</a> - A map representing the cells to
--   update for the matching rows or an appended row. The key is the column
--   id of the cell and the value is the CellInput object that represents
--   the data to set in that cell.
newUpsertRowData :: Text -> Filter -> UpsertRowData

-- | An object that represents the result of a single upsert row request.
--   
--   <i>See:</i> <a>newUpsertRowsResult</a> smart constructor.
data UpsertRowsResult
UpsertRowsResult' :: NonEmpty Text -> UpsertAction -> UpsertRowsResult

-- | Create a value of <a>UpsertRowsResult</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rowIds:UpsertRowsResult'</a>, <a>upsertRowsResult_rowIds</a> -
--   The list of row ids that were changed as part of an upsert row
--   operation. If the upsert resulted in an update, this list could
--   potentially contain multiple rows that matched the filter and hence
--   got updated. If the upsert resulted in an append, this list would only
--   have the single row that was appended.
--   
--   <a>$sel:upsertAction:UpsertRowsResult'</a>,
--   <a>upsertRowsResult_upsertAction</a> - The result of the upsert
--   action.
newUpsertRowsResult :: NonEmpty Text -> UpsertAction -> UpsertRowsResult

-- | The input variables to the app to be used by the
--   InvokeScreenAutomation action request.
--   
--   <i>See:</i> <a>newVariableValue</a> smart constructor.
data VariableValue
VariableValue' :: Text -> VariableValue

-- | Create a value of <a>VariableValue</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rawValue:VariableValue'</a>, <a>variableValue_rawValue</a> -
--   Raw value of the variable.
newVariableValue :: Text -> VariableValue
