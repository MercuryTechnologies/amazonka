-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/

@package libZSamazonkaZSamazonka
@version 2.0


-- | This module contains functions for retrieving various EC2 metadata
--   from an instance's local metadata endpoint.
--   
--   It is intended to be used when you need to make metadata calls prior
--   to initialisation of the <a>Env</a>.
module Amazonka.EC2.Metadata

-- | Test whether the underlying host is running on EC2 by making an HTTP
--   request to <tt><a>http://instance-data/latest</a></tt>.
isEC2 :: MonadIO m => Manager -> m Bool

-- | Retrieve the specified <a>Dynamic</a> data.
--   
--   Throws <tt>HttpException</tt> if HTTP communication fails.
dynamic :: MonadIO m => Manager -> Dynamic -> m ByteString

-- | Retrieve the specified <a>Metadata</a>.
--   
--   Throws <tt>HttpException</tt> if HTTP communication fails.
metadata :: MonadIO m => Manager -> Metadata -> m ByteString

-- | Retrieve the user data. Returns <a>Nothing</a> if no user data is
--   assigned to the instance.
--   
--   Throws <tt>HttpException</tt> if HTTP communication fails.
userdata :: MonadIO m => Manager -> m (Maybe ByteString)

-- | Retrieve the instance's identity document, detailing various EC2
--   metadata.
--   
--   You can alternatively retrieve the raw unparsed identity document by
--   using <a>dynamic</a> and the <a>Document</a> path.
--   
--   <i>See:</i> <a>AWS Instance Identity Documents</a>.
identity :: MonadIO m => Manager -> m (Either String IdentityDocument)
data Dynamic

-- | Value showing whether the customer has enabled detailed one-minute
--   monitoring in CloudWatch.
--   
--   Valid values: enabled | disabled.
FWS :: Dynamic

-- | JSON containing instance attributes, such as instance-id, private IP
--   address, etc. <i>See:</i> <a>identity</a>, <tt>InstanceDocument</tt>.
Document :: Dynamic

-- | Used to verify the document's authenticity and content against the
--   signature.
PKCS7 :: Dynamic
Signature :: Dynamic
data Metadata

-- | The AMI ID used to launch the instance.
AMIId :: Metadata

-- | If you started more than one instance at the same time, this value
--   indicates the order in which the instance was launched. The value of
--   the first instance launched is 0.
AMILaunchIndex :: Metadata

-- | The path to the AMI's manifest file in Amazon S3. If you used an
--   Amazon EBS-backed AMI to launch the instance, the returned result is
--   unknown.
AMIManifestPath :: Metadata

-- | The AMI IDs of any instances that were rebundled to create this AMI.
--   This value will only exist if the AMI manifest file contained an
--   ancestor-amis key.
AncestorAMIIds :: Metadata

-- | See: <a>Mapping</a>
BlockDevice :: !Mapping -> Metadata

-- | The private hostname of the instance. In cases where multiple network
--   interfaces are present, this refers to the eth0 device (the device for
--   which the device number is 0).
Hostname :: Metadata

-- | See: <a>Info</a>
IAM :: !Info -> Metadata

-- | Notifies the instance that it should reboot in preparation for
--   bundling. Valid values: none | shutdown | bundle-pending.
InstanceAction :: Metadata

-- | The ID of this instance.
InstanceId :: Metadata

-- | The type of instance.
--   
--   See: <tt>InstanceType</tt>
InstanceType :: Metadata

-- | The ID of the kernel launched with this instance, if applicable.
KernelId :: Metadata

-- | The private DNS hostname of the instance. In cases where multiple
--   network interfaces are present, this refers to the eth0 device (the
--   device for which the device number is 0).
LocalHostname :: Metadata

-- | The private IP address of the instance. In cases where multiple
--   network interfaces are present, this refers to the eth0 device (the
--   device for which the device number is 0).
LocalIPV4 :: Metadata

-- | The instance's media access control (MAC) address. In cases where
--   multiple network interfaces are present, this refers to the eth0
--   device (the device for which the device number is 0).
MAC :: Metadata

-- | See: <a>Interface</a>
Network :: !Text -> !Interface -> Metadata

-- | The Availability Zone in which the instance launched.
AvailabilityZone :: Metadata

-- | Product codes associated with the instance, if any.
ProductCodes :: Metadata

-- | The instance's public DNS. If the instance is in a VPC, this category
--   is only returned if the enableDnsHostnames attribute is set to true.
--   For more information, see Using DNS with Your VPC.
PublicHostname :: Metadata

-- | The public IP address. If an Elastic IP address is associated with the
--   instance, the value returned is the Elastic IP address.
PublicIPV4 :: Metadata

-- | Public key. Only available if supplied at instance launch time.
OpenSSHKey :: Metadata

-- | The ID of the RAM disk specified at launch time, if applicable.
RAMDiskId :: Metadata

-- | ID of the reservation.
ReservationId :: Metadata

-- | The names of the security groups applied to the instance.
SecurityGroups :: Metadata
data Mapping

-- | The virtual device that contains the root/boot file system.
AMI :: Mapping

-- | The virtual devices associated with Amazon EBS volumes, if present.
--   This value is only available in metadata if it is present at launch
--   time. The N indicates the index of the Amazon EBS volume (such as ebs1
--   or ebs2).
EBS :: !Int -> Mapping

-- | The virtual devices associated with ephemeral devices, if present. The
--   N indicates the index of the ephemeral volume.
Ephemeral :: !Int -> Mapping

-- | The virtual devices or partitions associated with the root devices, or
--   partitions on the virtual device, where the root (/ or C:) file system
--   is associated with the given instance.
Root :: Mapping

-- | The virtual devices associated with swap. Not always present.
Swap :: Mapping
data Info

-- | Returns information about the last time the instance profile was
--   updated, including the instance's LastUpdated date,
--   InstanceProfileArn, and InstanceProfileId.
Info' :: Info

-- | Where role-name is the name of the IAM role associated with the
--   instance. Returns the temporary security credentials.
--   
--   See: <tt>Auth</tt> for JSON deserialisation.
SecurityCredentials :: Maybe Text -> Info
data Interface

-- | The device number associated with that interface. Each interface must
--   have a unique device number. The device number serves as a hint to
--   device naming in the instance; for example, device-number is 2 for the
--   eth2 device.
IDeviceNumber :: Interface

-- | The private IPv4 addresses that are associated with each public-ip
--   address and assigned to that interface.
IIPV4Associations :: !Text -> Interface

-- | The interface's local hostname.
ILocalHostname :: Interface

-- | The private IP addresses associated with the interface.
ILocalIPV4s :: Interface

-- | The instance's MAC address.
IMAC :: Interface

-- | The ID of the owner of the network interface. In multiple-interface
--   environments, an interface can be attached by a third party, such as
--   Elastic Load Balancing. Traffic on an interface is always billed to
--   the interface owner.
IOwnerId :: Interface

-- | The interface's public DNS. If the instance is in a VPC, this category
--   is only returned if the enableDnsHostnames attribute is set to true.
--   For more information, see Using DNS with Your VPC.
IPublicHostname :: Interface

-- | The Elastic IP addresses associated with the interface. There may be
--   multiple IP addresses on an instance.
IPublicIPV4s :: Interface

-- | Security groups to which the network interface belongs. Returned only
--   for instances launched into a VPC.
ISecurityGroups :: Interface

-- | IDs of the security groups to which the network interface belongs.
--   Returned only for instances launched into a VPC. For more information
--   on security groups in the EC2-VPC platform, see Security Groups for
--   Your VPC.
ISecurityGroupIds :: Interface

-- | The ID of the subnet in which the interface resides. Returned only for
--   instances launched into a VPC.
ISubnetId :: Interface

-- | The CIDR block of the subnet in which the interface resides. Returned
--   only for instances launched into a VPC.
ISubnetIPV4_CIDRBlock :: Interface

-- | The ID of the VPC in which the interface resides. Returned only for
--   instances launched into a VPC.
IVPCId :: Interface

-- | The CIDR block of the VPC in which the interface resides. Returned
--   only for instances launched into a VPC.
IVPCIPV4_CIDRBlock :: Interface

-- | Represents an instance's identity document.
--   
--   <i>Note:</i> Fields such as <a>$sel:_instanceType:IdentityDocument</a>
--   are represented as unparsed <a>Text</a> and will need to be manually
--   parsed using <a>fromText</a> when the relevant types from a library
--   such as <a>Amazonka.EC2</a> are brought into scope.
data IdentityDocument
IdentityDocument :: Maybe [Text] -> Maybe [Text] -> Maybe Text -> Maybe Text -> Text -> Region -> Text -> Text -> Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe ISO8601 -> IdentityDocument
[$sel:_devpayProductCodes:IdentityDocument] :: IdentityDocument -> Maybe [Text]
[$sel:_billingProducts:IdentityDocument] :: IdentityDocument -> Maybe [Text]
[$sel:_version:IdentityDocument] :: IdentityDocument -> Maybe Text
[$sel:_privateIp:IdentityDocument] :: IdentityDocument -> Maybe Text
[$sel:_availabilityZone:IdentityDocument] :: IdentityDocument -> Text
[$sel:_region:IdentityDocument] :: IdentityDocument -> Region
[$sel:_instanceId:IdentityDocument] :: IdentityDocument -> Text
[$sel:_instanceType:IdentityDocument] :: IdentityDocument -> Text
[$sel:_accountId:IdentityDocument] :: IdentityDocument -> Text
[$sel:_imageId:IdentityDocument] :: IdentityDocument -> Maybe Text
[$sel:_kernelId:IdentityDocument] :: IdentityDocument -> Maybe Text
[$sel:_ramdiskId:IdentityDocument] :: IdentityDocument -> Maybe Text
[$sel:_architecture:IdentityDocument] :: IdentityDocument -> Maybe Text
[$sel:_pendingTime:IdentityDocument] :: IdentityDocument -> Maybe ISO8601
devpayProductCodes :: Lens' IdentityDocument (Maybe [Text])
billingProducts :: Lens' IdentityDocument (Maybe [Text])
version :: Lens' IdentityDocument (Maybe Text)
privateIp :: Lens' IdentityDocument (Maybe Text)
availabilityZone :: Lens' IdentityDocument Text
region :: Lens' IdentityDocument Region
instanceId :: Lens' IdentityDocument Text
instanceType :: Lens' IdentityDocument Text
accountId :: Lens' IdentityDocument Text
imageId :: Lens' IdentityDocument (Maybe Text)
kernelId :: Lens' IdentityDocument (Maybe Text)
ramdiskId :: Lens' IdentityDocument (Maybe Text)
architecture :: Lens' IdentityDocument (Maybe Text)
pendingTime :: Lens' IdentityDocument (Maybe UTCTime)
instance GHC.Generics.Generic Amazonka.EC2.Metadata.Dynamic
instance GHC.Show.Show Amazonka.EC2.Metadata.Dynamic
instance GHC.Classes.Ord Amazonka.EC2.Metadata.Dynamic
instance GHC.Classes.Eq Amazonka.EC2.Metadata.Dynamic
instance GHC.Generics.Generic Amazonka.EC2.Metadata.Mapping
instance GHC.Show.Show Amazonka.EC2.Metadata.Mapping
instance GHC.Classes.Ord Amazonka.EC2.Metadata.Mapping
instance GHC.Classes.Eq Amazonka.EC2.Metadata.Mapping
instance GHC.Generics.Generic Amazonka.EC2.Metadata.Interface
instance GHC.Show.Show Amazonka.EC2.Metadata.Interface
instance GHC.Classes.Ord Amazonka.EC2.Metadata.Interface
instance GHC.Classes.Eq Amazonka.EC2.Metadata.Interface
instance GHC.Generics.Generic Amazonka.EC2.Metadata.Info
instance GHC.Show.Show Amazonka.EC2.Metadata.Info
instance GHC.Classes.Ord Amazonka.EC2.Metadata.Info
instance GHC.Classes.Eq Amazonka.EC2.Metadata.Info
instance GHC.Generics.Generic Amazonka.EC2.Metadata.Metadata
instance GHC.Show.Show Amazonka.EC2.Metadata.Metadata
instance GHC.Classes.Ord Amazonka.EC2.Metadata.Metadata
instance GHC.Classes.Eq Amazonka.EC2.Metadata.Metadata
instance GHC.Generics.Generic Amazonka.EC2.Metadata.IdentityDocument
instance GHC.Show.Show Amazonka.EC2.Metadata.IdentityDocument
instance GHC.Classes.Eq Amazonka.EC2.Metadata.IdentityDocument
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.EC2.Metadata.IdentityDocument
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.EC2.Metadata.IdentityDocument
instance Amazonka.Data.Text.ToText Amazonka.EC2.Metadata.Metadata
instance Amazonka.Data.Text.ToText Amazonka.EC2.Metadata.Info
instance Amazonka.Data.Text.ToText Amazonka.EC2.Metadata.Interface
instance Amazonka.Data.Text.ToText Amazonka.EC2.Metadata.Mapping
instance Amazonka.Data.Text.ToText Amazonka.EC2.Metadata.Dynamic


-- | Explicitly specify your Amazon AWS security credentials, or retrieve
--   them from the underlying OS.
--   
--   The format of environment variables and the credentials file follows
--   the official <a>AWS SDK guidelines</a>.
module Amazonka.Auth

-- | Retrieve authentication information via the specified
--   <a>Credentials</a> mechanism.
--   
--   Throws <a>AuthError</a> when environment variables or IAM profiles
--   cannot be read, and credentials files are invalid or cannot be found.
getAuth :: (MonadIO m, Foldable withAuth) => Env' withAuth -> Credentials -> m (Auth, Maybe Region)

-- | Determines how AuthN/AuthZ information is retrieved.
data Credentials

-- | Explicit access and secret keys. See <a>fromKeys</a>.
FromKeys :: AccessKey -> SecretKey -> Credentials

-- | Explicit access key, secret key and a session token. See
--   <a>fromSession</a>.
FromSession :: AccessKey -> SecretKey -> SessionToken -> Credentials

-- | Lookup specific environment variables for access key, secret key, an
--   optional session token, and an optional region, respectively.
FromEnv :: Text -> Text -> Maybe Text -> Maybe Text -> Credentials

-- | An IAM Profile name to lookup from the local EC2 instance-data.
--   Environment variables to lookup for the access key, secret key and
--   optional session token.
FromProfile :: Text -> Credentials

-- | A credentials profile name (the INI section), the path to the AWS
--   <a>credentials</a> file, and the path to the
--   <tt>~<i>.aws</i>config</tt> file.
FromFile :: Text -> FilePath -> FilePath -> Credentials

-- | Obtain credentials using STS:AssumeRoleWithWebIdentity See <a>About
--   web identity federation</a> in the AWS documentation for more
--   information.
FromWebIdentity :: Credentials

-- | Obtain credentials by attempting to contact the ECS container agent at
--   <a>http://169.254.170.2</a> using the path in
--   <a>envContainerCredentialsURI</a>. See <a>IAM Roles for Tasks</a> in
--   the AWS documentation for more information.
FromContainer :: Credentials

-- | Attempt credentials discovery via the following steps:
--   
--   <ul>
--   <li>Read the <a>envAccessKey</a>, <a>envSecretKey</a>, and
--   <a>envRegion</a> from the environment if they are set.</li>
--   <li>Read the credentials file if <a>credFile</a> exists.</li>
--   <li>Try to exchange a Web Identity for AWS credentials using
--   <tt>sts:AssumeRoleWithWebIdentity</tt>.</li>
--   <li>Obtain credentials from the ECS container agent if
--   <a>envContainerCredentialsURI</a> is set.</li>
--   <li>Retrieve the first available IAM profile and read the
--   <a>Region</a> from the instance identity document, if running on
--   EC2.</li>
--   </ul>
--   
--   An attempt is made to resolve <a>http://instance-data</a> rather than
--   directly retrieving <a>http://169.254.169.254</a> for IAM profile
--   information. This assists in ensuring the DNS lookup terminates
--   promptly if not running on EC2.
Discover :: Credentials

-- | An authorisation environment containing AWS credentials, and
--   potentially a reference which can be refreshed out-of-band as
--   temporary credentials expire.
data Auth
Ref :: ThreadId -> IORef AuthEnv -> Auth
Auth :: AuthEnv -> Auth

-- | Default access key environment variable.
envAccessKey :: Text

-- | Default secret key environment variable.
envSecretKey :: Text

-- | Default session token environment variable.
envSessionToken :: Text

-- | Default web identity token file environment variable
envWebIdentityTokenFile :: Text

-- | Default role environment variable
envRole :: Text

-- | Default role session name environment variable
envRoleSessionName :: Text

-- | Credentials INI default profile section variable.
confRegion :: Text

-- | Default path for the configuration file. This looks in in the
--   <tt>HOME</tt> directory as determined by the <a>directory</a> library.
--   
--   <ul>
--   <li>UNIX<i>OSX: @$HOME</i>.aws/config@</li>
--   <li>Windows: <tt>C:/Users//&lt;user&gt;.awsconfig</tt></li>
--   </ul>
--   
--   <i>Note:</i> This does not match the default AWS SDK location of
--   <tt>%USERPROFILE%.awsconfig</tt> on Windows. (Sorry.)
confFile :: MonadIO m => m FilePath

-- | Credentials INI file access key variable.
credAccessKey :: Text

-- | Credentials INI file secret key variable.
credSecretKey :: Text

-- | Credentials INI file session token variable.
credSessionToken :: Text

-- | Credentials INI default profile section variable.
credProfile :: Text

-- | Default path for the credentials file. This looks in in the
--   <tt>HOME</tt> directory as determined by the <a>directory</a> library.
--   
--   <ul>
--   <li>UNIX<i>OSX: @$HOME</i>.aws/credentials@</li>
--   <li>Windows: <tt>C:/Users//&lt;user&gt;.awscredentials</tt></li>
--   </ul>
--   
--   <i>Note:</i> This does not match the default AWS SDK location of
--   <tt>%USERPROFILE%.awscredentials</tt> on Windows. (Sorry.)
credFile :: MonadIO m => m FilePath

-- | Explicit access and secret keys.
fromKeys :: AccessKey -> SecretKey -> Auth

-- | Temporary credentials from a STS session consisting of the access key,
--   secret key, and session token.
--   
--   <i>See:</i> <a>fromTemporarySession</a>
fromSession :: AccessKey -> SecretKey -> SessionToken -> Auth

-- | Temporary credentials from a STS session consisting of the access key,
--   secret key, session token, and expiration time.
--   
--   <i>See:</i> <a>fromSession</a>
fromTemporarySession :: AccessKey -> SecretKey -> SessionToken -> UTCTime -> Auth

-- | Retrieve access key, secret key, and a session token from the default
--   environment variables.
--   
--   Throws <a>MissingEnvError</a> if either of the default environment
--   variables cannot be read, but not if the session token is absent.
--   
--   <i>See:</i> <a>envAccessKey</a>, <a>envSecretKey</a>,
--   <a>envSessionToken</a>
fromEnv :: MonadIO m => m (Auth, Maybe Region)

-- | Retrieve access key, secret key and a session token from specific
--   environment variables.
--   
--   Throws <a>MissingEnvError</a> if either of the specified key
--   environment variables cannot be read, but not if the session token is
--   absent.
fromEnvKeys :: MonadIO m => Text -> Text -> Maybe Text -> Maybe Text -> m (Auth, Maybe Region)

-- | Loads the default <tt>credentials</tt> INI file using the default
--   profile name.
--   
--   Throws <a>MissingFileError</a> if <a>credFile</a> is missing, or
--   <a>InvalidFileError</a> if an error occurs during parsing.
--   
--   <i>See:</i> <a>credProfile</a>, <a>credFile</a>, and <a>envProfile</a>
fromFile :: MonadIO m => m (Auth, Maybe Region)
fromFilePath :: MonadIO m => Text -> FilePath -> FilePath -> m (Auth, Maybe Region)

-- | Retrieve the default IAM Profile from the local EC2 instance-data.
--   
--   The default IAM profile is determined by Amazon as the first profile
--   found in the response from:
--   <tt><a>http://169.254.169.254/latest/meta-data/iam/security-credentials/</a></tt>
--   
--   Throws <a>RetrievalError</a> if the HTTP call fails, or
--   <a>InvalidIAMError</a> if the default IAM profile cannot be read.
fromProfile :: MonadIO m => Manager -> m (Auth, Maybe Region)

-- | Lookup a specific IAM Profile by name from the local EC2
--   instance-data.
--   
--   Additionally starts a refresh thread for the given authentication
--   environment.
--   
--   The resulting <a>IORef</a> wrapper + timer is designed so that
--   multiple concurrent accesses of <a>AuthEnv</a> from the <tt>AWS</tt>
--   environment are not required to calculate expiry and sequentially
--   queue to update it.
--   
--   The forked timer ensures a singular owner and pre-emptive refresh of
--   the temporary session credentials before expiration.
--   
--   A weak reference is used to ensure that the forked thread will
--   eventually terminate when <a>Auth</a> is no longer referenced.
--   
--   If no session token or expiration time is present the credentials will
--   be returned verbatim.
fromProfileName :: MonadIO m => Manager -> Text -> m (Auth, Maybe Region)

-- | Obtain credentials exposed to a task via the ECS container agent, as
--   described in the <a>IAM Roles for Tasks</a> section of the AWS ECS
--   documentation. The credentials are obtained by making a request to
--   <a>http://169.254.170.2</a> at the path contained by the
--   <a>envContainerCredentialsURI</a> environment variable.
--   
--   The ECS container agent provides an access key, secret key, session
--   token, and expiration time, but it does not include a region, so the
--   region will attempt to be determined from the <a>envRegion</a>
--   environment variable if it is set.
--   
--   Like <a>fromProfileName</a>, additionally starts a refresh thread that
--   will periodically fetch fresh credentials before the current ones
--   expire.
--   
--   Throws <a>MissingEnvError</a> if the <a>envContainerCredentialsURI</a>
--   environment variable is not set or <a>InvalidIAMError</a> if the
--   payload returned by the ECS container agent is not of the expected
--   format.
fromContainer :: MonadIO m => Manager -> m (Auth, Maybe Region)

-- | An access key ID.
--   
--   For example: <tt>AKIAIOSFODNN7EXAMPLE</tt>
--   
--   <i>See:</i> <a>Understanding and Getting Your Security
--   Credentials</a>.
newtype AccessKey
AccessKey :: ByteString -> AccessKey

-- | Secret access key credential.
--   
--   For example: <tt>wJalrXUtnFEMI<i>K7MDENG</i>bPxRfiCYEXAMPLEKE</tt>
--   
--   <i>See:</i> <a>Understanding and Getting Your Security
--   Credentials</a>.
newtype SecretKey
SecretKey :: ByteString -> SecretKey

-- | A session token used by STS to temporarily authorise access to an AWS
--   resource.
--   
--   <i>See:</i> <a>Temporary Security Credentials</a>.
newtype SessionToken
SessionToken :: ByteString -> SessionToken
class AsAuthError a

-- | A general authentication error.
_AuthError :: AsAuthError a => Prism' a AuthError

-- | An error occured while communicating over HTTP with the local metadata
--   endpoint.
_RetrievalError :: AsAuthError a => Prism' a HttpException

-- | The named environment variable was not found.
_MissingEnvError :: AsAuthError a => Prism' a Text

-- | An error occured parsing named environment variable's value.
_InvalidEnvError :: AsAuthError a => Prism' a Text

-- | The specified credentials file could not be found.
_MissingFileError :: AsAuthError a => Prism' a FilePath

-- | An error occured parsing the credentials file.
_InvalidFileError :: AsAuthError a => Prism' a Text

-- | The specified IAM profile could not be found or deserialised.
_InvalidIAMError :: AsAuthError a => Prism' a Text

-- | An error thrown when attempting to read AuthN/AuthZ information.
data AuthError
RetrievalError :: HttpException -> AuthError
MissingEnvError :: Text -> AuthError
InvalidEnvError :: Text -> AuthError
MissingFileError :: FilePath -> AuthError
InvalidFileError :: Text -> AuthError
InvalidIAMError :: Text -> AuthError

-- | The environment containing the parameters required to make AWS
--   requests.
--   
--   This type tracks whether or not we have credentials at the type level,
--   to avoid "presigning" requests when we lack auth information.
data Env' withAuth
Env :: Region -> Logger -> (Int -> HttpException -> Bool) -> Dual (Endo Service) -> Manager -> withAuth Auth -> Env' withAuth
[$sel:_envRegion:Env] :: Env' withAuth -> Region
[$sel:_envLogger:Env] :: Env' withAuth -> Logger
[$sel:_envRetryCheck:Env] :: Env' withAuth -> Int -> HttpException -> Bool
[$sel:_envOverride:Env] :: Env' withAuth -> Dual (Endo Service)
[$sel:_envManager:Env] :: Env' withAuth -> Manager
[$sel:_envAuth:Env] :: Env' withAuth -> withAuth Auth
instance GHC.Generics.Generic Amazonka.Auth.Credentials
instance GHC.Classes.Eq Amazonka.Auth.Credentials
instance GHC.Generics.Generic Amazonka.Auth.AuthError
instance GHC.Show.Show Amazonka.Auth.AuthError
instance GHC.Generics.Generic (Amazonka.Auth.Env' withAuth)
instance Amazonka.Auth.AsAuthError GHC.Exception.Type.SomeException
instance Amazonka.Auth.AsAuthError Amazonka.Auth.AuthError
instance GHC.Exception.Type.Exception Amazonka.Auth.AuthError
instance Amazonka.Data.Log.ToLog Amazonka.Auth.AuthError
instance Amazonka.Data.Log.ToLog Amazonka.Auth.Credentials
instance GHC.Show.Show Amazonka.Auth.Credentials


-- | Environment and AWS specific configuration needed to perform AWS
--   requests.
module Amazonka.Env

-- | Creates a new environment with a new <tt>Manager</tt> without debug
--   logging and uses <a>getAuth</a> to expand/discover the supplied
--   <a>Credentials</a>. Lenses can be used to further configure the
--   resulting <a>Env</a>.
--   
--   <i>Since:</i> <tt>1.5.0</tt> - The region is now retrieved from the
--   <tt>AWS_REGION</tt> environment variable (identical to official SDKs),
--   or defaults to <tt>us-east-1</tt>. You can override the <a>Env</a>
--   region by using <a>envRegion</a>, or the current operation's region by
--   using <a>within</a>.
--   
--   <i>Since:</i> <tt>1.3.6</tt> - The default logic for retrying
--   <a>HttpException</a>s now uses <a>retryConnectionFailure</a> to retry
--   specific connection failure conditions up to 3 times. Previously only
--   service specific errors were automatically retried. This can be
--   reverted to the old behaviour by resetting the <a>Env</a> using
--   <a>envRetryCheck</a> lens to <tt>(\_ _ -&gt; False)</tt>.
--   
--   Throws <a>AuthError</a> when environment variables or IAM profiles
--   cannot be read.
--   
--   <i>See:</i> <a>newEnvWith</a>.
newEnv :: MonadIO m => Credentials -> m Env

-- | Generate an environment without credentials, which may only make
--   unsigned requests.
--   
--   This is useful for the STS <a>AssumeRoleWithWebIdentity</a> operation,
--   which needs to make an unsigned request to pass the token from an
--   identity provider.
newEnvNoAuth :: MonadIO m => m EnvNoAuth

-- | Construct a default <a>EnvNoAuth</a> from a HTTP <a>Manager</a>.
newEnvWith :: Manager -> EnvNoAuth

-- | The environment containing the parameters required to make AWS
--   requests.
--   
--   This type tracks whether or not we have credentials at the type level,
--   to avoid "presigning" requests when we lack auth information.
data Env' withAuth
Env :: Region -> Logger -> (Int -> HttpException -> Bool) -> Dual (Endo Service) -> Manager -> withAuth Auth -> Env' withAuth
[$sel:_envRegion:Env] :: Env' withAuth -> Region
[$sel:_envLogger:Env] :: Env' withAuth -> Logger
[$sel:_envRetryCheck:Env] :: Env' withAuth -> Int -> HttpException -> Bool
[$sel:_envOverride:Env] :: Env' withAuth -> Dual (Endo Service)
[$sel:_envManager:Env] :: Env' withAuth -> Manager
[$sel:_envAuth:Env] :: Env' withAuth -> withAuth Auth
type Env = Env' Identity
type EnvNoAuth = Env' Proxy

-- | Get "the" <a>Auth</a> from an <a>Env'</a>, if we can.
envAuthMaybe :: Foldable withAuth => Env' withAuth -> Maybe Auth

-- | <i>See:</i> <a>newEnv</a>
--   
--   Throws <a>AuthError</a> when environment variables or IAM profiles
--   cannot be read.
authenticate :: (MonadIO m, Foldable withAuth) => Credentials -> Env' withAuth -> m Env

-- | Provide a function which will be added to the existing stack of
--   overrides applied to all service configurations.
override :: (Service -> Service) -> Env -> Env

-- | Configure a specific service. All requests belonging to the supplied
--   service will use this configuration instead of the default.
--   
--   It's suggested you modify the default service configuration, such as
--   <tt>Amazonka.DynamoDB.dynamoDB</tt>.
configure :: Service -> Env -> Env

-- | Scope an action within the specific <a>Region</a>.
within :: Region -> Env -> Env

-- | Scope an action such that any retry logic for the <a>Service</a> is
--   ignored and any requests will at most be sent once.
once :: Env -> Env

-- | Scope an action such that any HTTP response will use this timeout
--   value.
--   
--   Default timeouts are chosen by considering:
--   
--   <ul>
--   <li>This <a>timeout</a>, if set.</li>
--   <li>The related <a>Service</a> timeout for the sent request if set.
--   (Usually 70s)</li>
--   <li>The <a>envManager</a> timeout if set.</li>
--   <li>The default <a>ClientRequest</a> timeout. (Approximately 30s)</li>
--   </ul>
timeout :: Seconds -> Env -> Env
envRegion :: Lens' (Env' withAuth) Region
envLogger :: Lens' (Env' withAuth) Logger
envRetryCheck :: Lens' (Env' withAuth) (Int -> HttpException -> Bool)
envOverride :: Lens' (Env' withAuth) (Dual (Endo Service))
envManager :: Lens' (Env' withAuth) Manager
envAuth :: Lens (Env' withAuth) (Env' withAuth') (withAuth Auth) (withAuth' Auth)

-- | Retry the subset of transport specific errors encompassing connection
--   failure up to the specific number of times.
retryConnectionFailure :: Int -> Int -> HttpException -> Bool


-- | Types and functions for constructing loggers and emitting log
--   messages.
module Amazonka.Logger

-- | A function threaded through various request and serialisation routines
--   to log informational and debug messages.
type Logger = LogLevel -> ByteStringBuilder -> IO ()

-- | This is a primitive logger which can be used to log builds to a
--   <tt>Handle</tt>.
--   
--   <i>Note:</i> A more sophisticated logging library such as
--   <a>tinylog</a> or <a>fast-logger</a> should be used in production
--   code.
newLogger :: MonadIO m => LogLevel -> Handle -> m Logger
data LogLevel

-- | Info messages supplied by the user - this level is not emitted by the
--   library.
Info :: LogLevel

-- | Error messages only.
Error :: LogLevel

-- | Useful debug information + info + error levels.
Debug :: LogLevel

-- | Includes potentially sensitive signing metadata, and non-streaming
--   response bodies.
Trace :: LogLevel
logError :: (MonadIO m, ToLog a) => Logger -> a -> m ()
logInfo :: (MonadIO m, ToLog a) => Logger -> a -> m ()
logDebug :: (MonadIO m, ToLog a) => Logger -> a -> m ()
logTrace :: (MonadIO m, ToLog a) => Logger -> a -> m ()
class ToLog a

-- | Convert a value to a loggable builder.
build :: ToLog a => a -> ByteStringBuilder

-- | Intercalate a list of <a>ByteStringBuilder</a>s with newlines.
buildLines :: [ByteStringBuilder] -> ByteStringBuilder


module Amazonka.HTTP
retryRequest :: (MonadResource m, AWSRequest a, Foldable withAuth) => Env' withAuth -> a -> m (Either Error (ClientResponse (AWSResponse a)))
awaitRequest :: (MonadResource m, AWSRequest a, Foldable withAuth) => Env' withAuth -> Wait a -> a -> m (Either Error Accept)

-- | The <a>Service</a> is configured + unwrapped at this point.
httpRequest :: (MonadResource m, AWSRequest a, Foldable withAuth) => Env' withAuth -> Request a -> m (Either Error (ClientResponse (AWSResponse a)))
configureRequest :: AWSRequest a => Env' withAuth -> a -> Request a
retryService :: Service -> RetryPolicy
retryStream :: Request a -> RetryPolicy


-- | This module contains functions for presigning requests using
--   <a>MonadIO</a> and not one of the AWS specific transformers.
--   
--   It is intended for use directly with <a>Amazonka.Auth</a> when only
--   presigning and no other AWS actions are required.
module Amazonka.Presign

-- | Presign an URL that is valid from the specified time until the number
--   of seconds expiry has elapsed.
--   
--   <i>See:</i> <a>presign</a>, <a>presignWith</a>
presignURL :: (MonadIO m, AWSRequest a) => Auth -> Region -> UTCTime -> Seconds -> a -> m ByteString

-- | Presign an HTTP request that is valid from the specified time until
--   the number of seconds expiry has elapsed.
--   
--   <i>See:</i> <a>presignWith</a>, <a>presignWithHeaders</a>
presign :: (MonadIO m, AWSRequest a) => Auth -> Region -> UTCTime -> Seconds -> a -> m ClientRequest

-- | A variant of <a>presign</a> that allows modifying the default
--   <a>Service</a> definition used to configure the request.
--   
--   <i>See:</i> <a>presignWithHeaders</a>
presignWith :: (MonadIO m, AWSRequest a) => (Service -> Service) -> Auth -> Region -> UTCTime -> Seconds -> a -> m ClientRequest

-- | Modification to the headers that is applied by default (in
--   <a>presignWith</a>); removes the <a>Expect</a> header which is added
--   to every <tt>PutObject</tt>.
defaultHeaders :: [Header] -> [Header]

-- | A variant of <a>presign</a> that allows modifying the default
--   <tt>Headers</tt> and the default <a>Service</a> definition used to
--   configure the request.
presignWithHeaders :: (MonadIO m, AWSRequest a) => ([Header] -> [Header]) -> (Service -> Service) -> Auth -> Region -> UTCTime -> Seconds -> a -> m ClientRequest


-- | This module provides simple <a>Env</a> and <a>IO</a>-based operations
--   which can be performed against remote Amazon Web Services APIs, for
--   use with the types supplied by the various <tt>amazonka-*</tt>
--   libraries.
module Amazonka

-- | The environment containing the parameters required to make AWS
--   requests.
--   
--   This type tracks whether or not we have credentials at the type level,
--   to avoid "presigning" requests when we lack auth information.
data Env' withAuth
Env :: Region -> Logger -> (Int -> HttpException -> Bool) -> Dual (Endo Service) -> Manager -> withAuth Auth -> Env' withAuth
[$sel:_envRegion:Env] :: Env' withAuth -> Region
[$sel:_envLogger:Env] :: Env' withAuth -> Logger
[$sel:_envRetryCheck:Env] :: Env' withAuth -> Int -> HttpException -> Bool
[$sel:_envOverride:Env] :: Env' withAuth -> Dual (Endo Service)
[$sel:_envManager:Env] :: Env' withAuth -> Manager
[$sel:_envAuth:Env] :: Env' withAuth -> withAuth Auth
type Env = Env' Identity
type EnvNoAuth = Env' Proxy

-- | Creates a new environment with a new <tt>Manager</tt> without debug
--   logging and uses <a>getAuth</a> to expand/discover the supplied
--   <a>Credentials</a>. Lenses can be used to further configure the
--   resulting <a>Env</a>.
--   
--   <i>Since:</i> <tt>1.5.0</tt> - The region is now retrieved from the
--   <tt>AWS_REGION</tt> environment variable (identical to official SDKs),
--   or defaults to <tt>us-east-1</tt>. You can override the <a>Env</a>
--   region by using <a>envRegion</a>, or the current operation's region by
--   using <a>within</a>.
--   
--   <i>Since:</i> <tt>1.3.6</tt> - The default logic for retrying
--   <a>HttpException</a>s now uses <a>retryConnectionFailure</a> to retry
--   specific connection failure conditions up to 3 times. Previously only
--   service specific errors were automatically retried. This can be
--   reverted to the old behaviour by resetting the <a>Env</a> using
--   <a>envRetryCheck</a> lens to <tt>(\_ _ -&gt; False)</tt>.
--   
--   Throws <a>AuthError</a> when environment variables or IAM profiles
--   cannot be read.
--   
--   <i>See:</i> <a>newEnvWith</a>.
newEnv :: MonadIO m => Credentials -> m Env

-- | Generate an environment without credentials, which may only make
--   unsigned requests.
--   
--   This is useful for the STS <a>AssumeRoleWithWebIdentity</a> operation,
--   which needs to make an unsigned request to pass the token from an
--   identity provider.
newEnvNoAuth :: MonadIO m => m EnvNoAuth

-- | Construct a default <a>EnvNoAuth</a> from a HTTP <a>Manager</a>.
newEnvWith :: Manager -> EnvNoAuth

-- | Get "the" <a>Auth</a> from an <a>Env'</a>, if we can.
envAuthMaybe :: Foldable withAuth => Env' withAuth -> Maybe Auth

-- | <i>See:</i> <a>newEnv</a>
--   
--   Throws <a>AuthError</a> when environment variables or IAM profiles
--   cannot be read.
authenticate :: (MonadIO m, Foldable withAuth) => Credentials -> Env' withAuth -> m Env

-- | Provide a function which will be added to the existing stack of
--   overrides applied to all service configurations.
override :: (Service -> Service) -> Env -> Env

-- | Configure a specific service. All requests belonging to the supplied
--   service will use this configuration instead of the default.
--   
--   It's suggested you modify the default service configuration, such as
--   <tt>Amazonka.DynamoDB.dynamoDB</tt>.
configure :: Service -> Env -> Env

-- | Scope an action within the specific <a>Region</a>.
within :: Region -> Env -> Env

-- | Scope an action such that any retry logic for the <a>Service</a> is
--   ignored and any requests will at most be sent once.
once :: Env -> Env

-- | Scope an action such that any HTTP response will use this timeout
--   value.
--   
--   Default timeouts are chosen by considering:
--   
--   <ul>
--   <li>This <a>timeout</a>, if set.</li>
--   <li>The related <a>Service</a> timeout for the sent request if set.
--   (Usually 70s)</li>
--   <li>The <a>envManager</a> timeout if set.</li>
--   <li>The default <a>ClientRequest</a> timeout. (Approximately 30s)</li>
--   </ul>
timeout :: Seconds -> Env -> Env
envRegion :: Lens' (Env' withAuth) Region
envLogger :: Lens' (Env' withAuth) Logger
envRetryCheck :: Lens' (Env' withAuth) (Int -> HttpException -> Bool)
envOverride :: Lens' (Env' withAuth) (Dual (Endo Service))
envManager :: Lens' (Env' withAuth) Manager
envAuth :: Lens (Env' withAuth) (Env' withAuth') (withAuth Auth) (withAuth' Auth)

-- | Unwrap a <a>ResourceT</a> transformer, and call all registered release
--   actions.
--   
--   Note that there is some reference counting involved due to
--   <a>resourceForkIO</a>. If multiple threads are sharing the same
--   collection of resources, only the last call to <tt>runResourceT</tt>
--   will deallocate the resources.
--   
--   <i>NOTE</i> Since version 1.2.0, this function will throw a
--   <a>ResourceCleanupException</a> if any of the cleanup functions throw
--   an exception.
runResourceT :: MonadUnliftIO m => ResourceT m a -> m a

-- | An access key ID.
--   
--   For example: <tt>AKIAIOSFODNN7EXAMPLE</tt>
--   
--   <i>See:</i> <a>Understanding and Getting Your Security
--   Credentials</a>.
newtype AccessKey
AccessKey :: ByteString -> AccessKey

-- | Secret access key credential.
--   
--   For example: <tt>wJalrXUtnFEMI<i>K7MDENG</i>bPxRfiCYEXAMPLEKE</tt>
--   
--   <i>See:</i> <a>Understanding and Getting Your Security
--   Credentials</a>.
newtype SecretKey
SecretKey :: ByteString -> SecretKey

-- | A session token used by STS to temporarily authorise access to an AWS
--   resource.
--   
--   <i>See:</i> <a>Temporary Security Credentials</a>.
newtype SessionToken
SessionToken :: ByteString -> SessionToken

-- | Determines how AuthN/AuthZ information is retrieved.
data Credentials

-- | Explicit access and secret keys. See <a>fromKeys</a>.
FromKeys :: AccessKey -> SecretKey -> Credentials

-- | Explicit access key, secret key and a session token. See
--   <a>fromSession</a>.
FromSession :: AccessKey -> SecretKey -> SessionToken -> Credentials

-- | Lookup specific environment variables for access key, secret key, an
--   optional session token, and an optional region, respectively.
FromEnv :: Text -> Text -> Maybe Text -> Maybe Text -> Credentials

-- | An IAM Profile name to lookup from the local EC2 instance-data.
--   Environment variables to lookup for the access key, secret key and
--   optional session token.
FromProfile :: Text -> Credentials

-- | A credentials profile name (the INI section), the path to the AWS
--   <a>credentials</a> file, and the path to the
--   <tt>~<i>.aws</i>config</tt> file.
FromFile :: Text -> FilePath -> FilePath -> Credentials

-- | Obtain credentials using STS:AssumeRoleWithWebIdentity See <a>About
--   web identity federation</a> in the AWS documentation for more
--   information.
FromWebIdentity :: Credentials

-- | Obtain credentials by attempting to contact the ECS container agent at
--   <a>http://169.254.170.2</a> using the path in
--   <a>envContainerCredentialsURI</a>. See <a>IAM Roles for Tasks</a> in
--   the AWS documentation for more information.
FromContainer :: Credentials

-- | Attempt credentials discovery via the following steps:
--   
--   <ul>
--   <li>Read the <a>envAccessKey</a>, <a>envSecretKey</a>, and
--   <a>envRegion</a> from the environment if they are set.</li>
--   <li>Read the credentials file if <a>credFile</a> exists.</li>
--   <li>Try to exchange a Web Identity for AWS credentials using
--   <tt>sts:AssumeRoleWithWebIdentity</tt>.</li>
--   <li>Obtain credentials from the ECS container agent if
--   <a>envContainerCredentialsURI</a> is set.</li>
--   <li>Retrieve the first available IAM profile and read the
--   <a>Region</a> from the instance identity document, if running on
--   EC2.</li>
--   </ul>
--   
--   An attempt is made to resolve <a>http://instance-data</a> rather than
--   directly retrieving <a>http://169.254.169.254</a> for IAM profile
--   information. This assists in ensuring the DNS lookup terminates
--   promptly if not running on EC2.
Discover :: Credentials

-- | The available AWS regions.
newtype Region
Region' :: Text -> Region
[$sel:fromRegion:Region'] :: Region -> Text
pattern Mumbai :: Region
pattern Sydney :: Region
pattern Singapore :: Region
pattern Osaka :: Region
pattern Seoul :: Region
pattern Tokyo :: Region
pattern HongKong :: Region
pattern Ningxia :: Region
pattern Beijing :: Region
pattern CapeTown :: Region
pattern Bahrain :: Region
pattern Stockholm :: Region
pattern Paris :: Region
pattern Milan :: Region
pattern London :: Region
pattern Ireland :: Region
pattern Frankfurt :: Region
pattern SaoPaulo :: Region
pattern Montreal :: Region
pattern GovCloudEast :: Region
pattern GovCloudWest :: Region
pattern Oregon :: Region
pattern NorthCalifornia :: Region
pattern Ohio :: Region
pattern NorthVirginia :: Region
data Endpoint
Endpoint :: ByteString -> Bool -> Int -> ByteString -> Endpoint
[$sel:_endpointHost:Endpoint] :: Endpoint -> ByteString
[$sel:_endpointSecure:Endpoint] :: Endpoint -> Bool
[$sel:_endpointPort:Endpoint] :: Endpoint -> Int
[$sel:_endpointScope:Endpoint] :: Endpoint -> ByteString

-- | A convenience function for overriding the <a>Service</a>
--   <a>Endpoint</a>.
--   
--   <i>See:</i> <a>serviceEndpoint</a>.
setEndpoint :: Bool -> ByteString -> Int -> Service -> Service

-- | Send a request, returning the associated response if successful.
--   
--   Errors are thrown in <a>IO</a>.
--   
--   See <a>sendEither</a>.
send :: (MonadResource m, AWSRequest a) => Env -> a -> m (AWSResponse a)

-- | Send a request, returning the associated response if successful.
--   
--   See <a>send</a>.
sendEither :: (MonadResource m, AWSRequest a) => Env -> a -> m (Either Error (AWSResponse a))

-- | Repeatedly send a request, automatically setting markers and
--   performing pagination. Exits on the first encountered error.
--   
--   Errors are thrown in <a>IO</a>.
--   
--   See <a>paginateEither</a>.
paginate :: (MonadResource m, AWSPager a) => Env -> a -> ConduitM () (AWSResponse a) m ()

-- | Repeatedly send a request, automatically setting markers and
--   performing pagination.
--   
--   Exits on the first encountered error.
--   
--   See <a>paginate</a>.
paginateEither :: (MonadResource m, AWSPager a) => Env -> a -> ConduitM () (AWSResponse a) m (Either Error ())

-- | Poll the API with the supplied request until a specific <a>Wait</a>
--   condition is fulfilled.
--   
--   Errors are thrown in <a>IO</a>.
--   
--   See <a>awaitEither</a>.
await :: (MonadResource m, AWSRequest a) => Env -> Wait a -> a -> m Accept

-- | Poll the API with the supplied request until a specific <a>Wait</a>
--   condition is fulfilled.
--   
--   See <a>await</a>.
awaitEither :: (MonadResource m, AWSRequest a) => Env -> Wait a -> a -> m (Either Error Accept)

-- | Anything that can be converted to a streaming request <tt>Body</tt>.
class ToBody a

-- | Convert a value to a request body.
toBody :: ToBody a => a -> RequestBody

-- | Invariant: only services that support _both_ standard and chunked
--   signing expose <a>RequestBody</a> as a parameter.
data RequestBody
Chunked :: ChunkedBody -> RequestBody
Hashed :: HashedBody -> RequestBody

-- | A streaming, exception safe response body.
newtype ResponseBody
ResponseBody :: ConduitM () ByteString (ResourceT IO) () -> ResponseBody
[$sel:_streamBody:ResponseBody] :: ResponseBody -> ConduitM () ByteString (ResourceT IO) ()

-- | Anything that can be safely converted to a <a>HashedBody</a>.
class ToHashedBody a

-- | Convert a value to a hashed request body.
toHashed :: ToHashedBody a => a -> HashedBody

-- | An opaque request body containing a <a>SHA256</a> hash.
data HashedBody
HashedStream :: Digest SHA256 -> !Integer -> ConduitM () ByteString (ResourceT IO) () -> HashedBody
HashedBytes :: Digest SHA256 -> ByteString -> HashedBody

-- | Construct a <a>HashedBody</a> from a <a>FilePath</a>, calculating the
--   <a>SHA256</a> hash and file size.
--   
--   <i>Note:</i> While this function will perform in constant space, it
--   will enumerate the entirety of the file contents _twice_. Firstly to
--   calculate the SHA256 and lastly to stream the contents to the socket
--   during sending.
--   
--   <i>See:</i> <a>ToHashedBody</a>.
hashedFile :: MonadIO m => FilePath -> m HashedBody

-- | Construct a <a>HashedBody</a> from a <a>FilePath</a>, specifying the
--   range of bytes to read. This can be useful for constructing multiple
--   requests from a single file, say for S3 multipart uploads.
--   
--   <i>See:</i> <a>hashedFile</a>, <a>sourceFileRange</a>.
hashedFileRange :: MonadIO m => FilePath -> Integer -> Integer -> m HashedBody

-- | Construct a <a>HashedBody</a> from a <tt>Source</tt>, manually
--   specifying the <a>SHA256</a> hash and file size. It's left up to the
--   caller to calculate these correctly, otherwise AWS will return signing
--   errors.
--   
--   <i>See:</i> <a>ToHashedBody</a>.
hashedBody :: Digest SHA256 -> Integer -> ConduitM () ByteString (ResourceT IO) () -> HashedBody

-- | An opaque request body which will be transmitted via
--   <tt>Transfer-Encoding: chunked</tt>.
--   
--   <i>Invariant:</i> Only services that support chunked encoding can
--   accept a <a>ChunkedBody</a>. (Currently S3.) This is enforced by the
--   type signatures emitted by the generator.
data ChunkedBody
ChunkedBody :: ChunkSize -> Integer -> ConduitM () ByteString (ResourceT IO) () -> ChunkedBody
[$sel:_chunkedSize:ChunkedBody] :: ChunkedBody -> ChunkSize
[$sel:_chunkedLength:ChunkedBody] :: ChunkedBody -> Integer
[$sel:_chunkedBody:ChunkedBody] :: ChunkedBody -> ConduitM () ByteString (ResourceT IO) ()

-- | Specifies the transmitted size of the 'Transfer-Encoding' chunks.
--   
--   <i>See:</i> <tt>defaultChunk</tt>.
newtype ChunkSize
ChunkSize :: Int -> ChunkSize

-- | The default chunk size of 128 KB. The minimum chunk size accepted by
--   AWS is 8 KB, unless the entirety of the request is below this
--   threshold.
--   
--   A chunk size of 64 KB or higher is recommended for performance
--   reasons.
defaultChunkSize :: ChunkSize

-- | Construct a <a>ChunkedBody</a> from a <a>FilePath</a>, where the
--   contents will be read and signed incrementally in chunks if the target
--   service supports it.
--   
--   Will intelligently revert to <a>HashedBody</a> if the file is smaller
--   than the specified <a>ChunkSize</a>.
--   
--   <i>See:</i> <a>ToBody</a>.
chunkedFile :: MonadIO m => ChunkSize -> FilePath -> m RequestBody

-- | Construct a <a>ChunkedBody</a> from a <a>FilePath</a>, specifying the
--   range of bytes to read. This can be useful for constructing multiple
--   requests from a single file, say for S3 multipart uploads.
--   
--   <i>See:</i> <a>chunkedFile</a>.
chunkedFileRange :: MonadIO m => ChunkSize -> FilePath -> Integer -> Integer -> m RequestBody

-- | Unsafely construct a <a>ChunkedBody</a>.
--   
--   This function is marked unsafe because it does nothing to enforce the
--   chunk size. Typically for conduit <a>IO</a> functions, it's whatever
--   ByteString's <tt>defaultBufferSize</tt> is, around 32 KB. If the chunk
--   size is less than 8 KB, the request will error. 64 KB or higher chunk
--   size is recommended for performance reasons.
--   
--   Note that it will always create a chunked body even if the request is
--   too small.
--   
--   <i>See:</i> <a>ToBody</a>.
unsafeChunkedBody :: ChunkSize -> Integer -> ConduitM () ByteString (ResourceT IO) () -> RequestBody

-- | Connect a <tt>Sink</tt> to a response stream.
sinkBody :: MonadIO m => ResponseBody -> ConduitM ByteString Void (ResourceT IO) a -> m a

-- | Convenience function for obtaining the size of a file.
getFileSize :: MonadIO m => FilePath -> m Integer

-- | Incrementally calculate a <tt>MD5</tt> <tt>Digest</tt>.
sinkMD5 :: forall (m :: Type -> Type) o. Monad m => ConduitM ByteString o m (Digest MD5)

-- | Incrementally calculate a <tt>SHA256</tt> <tt>Digest</tt>.
sinkSHA256 :: forall (m :: Type -> Type) o. Monad m => ConduitM ByteString o m (Digest SHA256)

-- | Presign an URL that is valid from the specified time until the number
--   of seconds expiry has elapsed.
presignURL :: (MonadIO m, AWSRequest a) => Env -> UTCTime -> Seconds -> a -> m ByteString

-- | Presign an HTTP request that is valid from the specified time until
--   the number of seconds expiry has elapsed.
presign :: (MonadIO m, AWSRequest a) => Env -> UTCTime -> Seconds -> a -> m ClientRequest
data Dynamic

-- | Value showing whether the customer has enabled detailed one-minute
--   monitoring in CloudWatch.
--   
--   Valid values: enabled | disabled.
FWS :: Dynamic

-- | JSON containing instance attributes, such as instance-id, private IP
--   address, etc. <i>See:</i> <a>identity</a>, <tt>InstanceDocument</tt>.
Document :: Dynamic

-- | Used to verify the document's authenticity and content against the
--   signature.
PKCS7 :: Dynamic
Signature :: Dynamic

-- | Retrieve the specified <tt>Dynamic</tt> data.
dynamic :: MonadIO m => Env -> Dynamic -> m ByteString
data Metadata

-- | The AMI ID used to launch the instance.
AMIId :: Metadata

-- | If you started more than one instance at the same time, this value
--   indicates the order in which the instance was launched. The value of
--   the first instance launched is 0.
AMILaunchIndex :: Metadata

-- | The path to the AMI's manifest file in Amazon S3. If you used an
--   Amazon EBS-backed AMI to launch the instance, the returned result is
--   unknown.
AMIManifestPath :: Metadata

-- | The AMI IDs of any instances that were rebundled to create this AMI.
--   This value will only exist if the AMI manifest file contained an
--   ancestor-amis key.
AncestorAMIIds :: Metadata

-- | See: <a>Mapping</a>
BlockDevice :: !Mapping -> Metadata

-- | The private hostname of the instance. In cases where multiple network
--   interfaces are present, this refers to the eth0 device (the device for
--   which the device number is 0).
Hostname :: Metadata

-- | See: <a>Info</a>
IAM :: !Info -> Metadata

-- | Notifies the instance that it should reboot in preparation for
--   bundling. Valid values: none | shutdown | bundle-pending.
InstanceAction :: Metadata

-- | The ID of this instance.
InstanceId :: Metadata

-- | The type of instance.
--   
--   See: <tt>InstanceType</tt>
InstanceType :: Metadata

-- | The ID of the kernel launched with this instance, if applicable.
KernelId :: Metadata

-- | The private DNS hostname of the instance. In cases where multiple
--   network interfaces are present, this refers to the eth0 device (the
--   device for which the device number is 0).
LocalHostname :: Metadata

-- | The private IP address of the instance. In cases where multiple
--   network interfaces are present, this refers to the eth0 device (the
--   device for which the device number is 0).
LocalIPV4 :: Metadata

-- | The instance's media access control (MAC) address. In cases where
--   multiple network interfaces are present, this refers to the eth0
--   device (the device for which the device number is 0).
MAC :: Metadata

-- | See: <a>Interface</a>
Network :: !Text -> !Interface -> Metadata

-- | The Availability Zone in which the instance launched.
AvailabilityZone :: Metadata

-- | Product codes associated with the instance, if any.
ProductCodes :: Metadata

-- | The instance's public DNS. If the instance is in a VPC, this category
--   is only returned if the enableDnsHostnames attribute is set to true.
--   For more information, see Using DNS with Your VPC.
PublicHostname :: Metadata

-- | The public IP address. If an Elastic IP address is associated with the
--   instance, the value returned is the Elastic IP address.
PublicIPV4 :: Metadata

-- | Public key. Only available if supplied at instance launch time.
OpenSSHKey :: Metadata

-- | The ID of the RAM disk specified at launch time, if applicable.
RAMDiskId :: Metadata

-- | ID of the reservation.
ReservationId :: Metadata

-- | The names of the security groups applied to the instance.
SecurityGroups :: Metadata

-- | Retrieve the specified <tt>Metadata</tt>.
metadata :: MonadIO m => Env -> Metadata -> m ByteString

-- | Retrieve the user data. Returns <a>Nothing</a> if no user data is
--   assigned to the instance.
userdata :: MonadIO m => Env -> m (Maybe ByteString)
class AsError a

-- | A general Amazonka error.
_Error :: AsError a => Prism' a Error

-- | An error occured while communicating over HTTP with a remote service.
_TransportError :: AsError a => Prism' a HttpException

-- | A serialisation error occured when attempting to deserialise a
--   response.
_SerializeError :: AsError a => Prism' a SerializeError

-- | A service specific error returned by the remote service.
_ServiceError :: AsError a => Prism' a ServiceError
class AsAuthError a

-- | A general authentication error.
_AuthError :: AsAuthError a => Prism' a AuthError

-- | An error occured while communicating over HTTP with the local metadata
--   endpoint.
_RetrievalError :: AsAuthError a => Prism' a HttpException

-- | The named environment variable was not found.
_MissingEnvError :: AsAuthError a => Prism' a Text

-- | An error occured parsing named environment variable's value.
_InvalidEnvError :: AsAuthError a => Prism' a Text

-- | The specified credentials file could not be found.
_MissingFileError :: AsAuthError a => Prism' a FilePath

-- | An error occured parsing the credentials file.
_InvalidFileError :: AsAuthError a => Prism' a Text

-- | The specified IAM profile could not be found or deserialised.
_InvalidIAMError :: AsAuthError a => Prism' a Text

-- | A variant of <a>try</a> that takes a <a>Prism</a> (or any <a>Fold</a>)
--   to select which exceptions are caught (c.f. <a>tryJust</a>,
--   <a>catchJust</a>). If the <a>Exception</a> does not match the
--   predicate, it is re-thrown.
--   
--   <pre>
--   <a>trying</a> :: <a>MonadCatch</a> m =&gt; <a>Prism'</a>     <a>SomeException</a> a -&gt; m r -&gt; m (<a>Either</a> a r)
--   <a>trying</a> :: <a>MonadCatch</a> m =&gt; <a>Lens'</a>      <a>SomeException</a> a -&gt; m r -&gt; m (<a>Either</a> a r)
--   <a>trying</a> :: <a>MonadCatch</a> m =&gt; <a>Traversal'</a> <a>SomeException</a> a -&gt; m r -&gt; m (<a>Either</a> a r)
--   <a>trying</a> :: <a>MonadCatch</a> m =&gt; <a>Iso'</a>       <a>SomeException</a> a -&gt; m r -&gt; m (<a>Either</a> a r)
--   <a>trying</a> :: <a>MonadCatch</a> m =&gt; <a>Getter</a>     <a>SomeException</a> a -&gt; m r -&gt; m (<a>Either</a> a r)
--   <a>trying</a> :: <a>MonadCatch</a> m =&gt; <a>Fold</a>       <a>SomeException</a> a -&gt; m r -&gt; m (<a>Either</a> a r)
--   </pre>
trying :: MonadCatch m => Getting (First a) SomeException a -> m r -> m (Either a r)

-- | Catch exceptions that match a given <a>Prism</a> (or any <a>Fold</a>,
--   really).
--   
--   <pre>
--   &gt;&gt;&gt; catching _AssertionFailed (assert False (return "uncaught")) $ \ _ -&gt; return "caught"
--   "caught"
--   </pre>
--   
--   <pre>
--   <a>catching</a> :: <a>MonadCatch</a> m =&gt; <a>Prism'</a> <a>SomeException</a> a     -&gt; m r -&gt; (a -&gt; m r) -&gt; m r
--   <a>catching</a> :: <a>MonadCatch</a> m =&gt; <a>Lens'</a> <a>SomeException</a> a      -&gt; m r -&gt; (a -&gt; m r) -&gt; m r
--   <a>catching</a> :: <a>MonadCatch</a> m =&gt; <a>Traversal'</a> <a>SomeException</a> a -&gt; m r -&gt; (a -&gt; m r) -&gt; m r
--   <a>catching</a> :: <a>MonadCatch</a> m =&gt; <a>Iso'</a> <a>SomeException</a> a       -&gt; m r -&gt; (a -&gt; m r) -&gt; m r
--   <a>catching</a> :: <a>MonadCatch</a> m =&gt; <a>Getter</a> <a>SomeException</a> a     -&gt; m r -&gt; (a -&gt; m r) -&gt; m r
--   <a>catching</a> :: <a>MonadCatch</a> m =&gt; <a>Fold</a> <a>SomeException</a> a       -&gt; m r -&gt; (a -&gt; m r) -&gt; m r
--   </pre>
catching :: MonadCatch m => Getting (First a) SomeException a -> m r -> (a -> m r) -> m r

-- | Provides a generalised prism for catching a specific service error
--   identified by the opaque service abbreviation and error code.
--   
--   This can be used if the generated error prisms provided by
--   <tt>Amazonka.<a>ServiceName</a>.Types</tt> do not cover all the thrown
--   error codes. For example to define a new error prism:
--   
--   <pre>
--   {-# LANGUAGE OverloadedStrings #-}
--   
--   import Amazonka.S3 (ServiceError, s3)
--   
--   _NoSuchBucketPolicy :: AsError a =&gt; Getting (First ServiceError) a ServiceError
--   _NoSuchBucketPolicy = _MatchServiceError s3 "NoSuchBucketPolicy"
--   </pre>
--   
--   With example usage being:
--   
--   <pre>
--   &gt;&gt;&gt; import Control.Exception.Lens (trying)
--   
--   &gt;&gt;&gt; :t trying _NoSuchBucketPolicy
--   MonadCatch m =&gt; m a -&gt; m (Either ServiceError a)
--   </pre>
_MatchServiceError :: AsError a => Service -> ErrorCode -> Getting (First ServiceError) a ServiceError
hasService :: (Applicative f, Choice p) => Service -> Optic' p f ServiceError ServiceError
hasStatus :: (Applicative f, Choice p) => Int -> Optic' p f ServiceError ServiceError
hasCode :: (Applicative f, Choice p) => ErrorCode -> Optic' p f ServiceError ServiceError
data LogLevel

-- | Info messages supplied by the user - this level is not emitted by the
--   library.
Info :: LogLevel

-- | Error messages only.
Error :: LogLevel

-- | Useful debug information + info + error levels.
Debug :: LogLevel

-- | Includes potentially sensitive signing metadata, and non-streaming
--   response bodies.
Trace :: LogLevel

-- | A function threaded through various request and serialisation routines
--   to log informational and debug messages.
type Logger = LogLevel -> ByteStringBuilder -> IO ()

-- | This is a primitive logger which can be used to log builds to a
--   <tt>Handle</tt>.
--   
--   <i>Note:</i> A more sophisticated logging library such as
--   <a>tinylog</a> or <a>fast-logger</a> should be used in production
--   code.
newLogger :: MonadIO m => LogLevel -> Handle -> m Logger
