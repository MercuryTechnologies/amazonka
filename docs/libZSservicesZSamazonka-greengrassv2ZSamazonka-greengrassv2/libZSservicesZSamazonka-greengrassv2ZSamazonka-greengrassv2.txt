-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/

@package libZSservicesZSamazonka-greengrassv2ZSamazonka-greengrassv2
@version 2.0


module Amazonka.GreengrassV2.Types.AssociateClientDeviceWithCoreDeviceEntry

-- | Contains a request to associate a client device with a core device.
--   The <a>BatchAssociateClientDeviceWithCoreDevice</a> operation consumes
--   a list of these requests.
--   
--   <i>See:</i> <a>newAssociateClientDeviceWithCoreDeviceEntry</a> smart
--   constructor.
data AssociateClientDeviceWithCoreDeviceEntry
AssociateClientDeviceWithCoreDeviceEntry' :: Text -> AssociateClientDeviceWithCoreDeviceEntry

-- | The name of the IoT thing that represents the client device to
--   associate.
[$sel:thingName:AssociateClientDeviceWithCoreDeviceEntry'] :: AssociateClientDeviceWithCoreDeviceEntry -> Text

-- | Create a value of <a>AssociateClientDeviceWithCoreDeviceEntry</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:thingName:AssociateClientDeviceWithCoreDeviceEntry'</a>,
--   <a>associateClientDeviceWithCoreDeviceEntry_thingName</a> - The name
--   of the IoT thing that represents the client device to associate.
newAssociateClientDeviceWithCoreDeviceEntry :: Text -> AssociateClientDeviceWithCoreDeviceEntry

-- | The name of the IoT thing that represents the client device to
--   associate.
associateClientDeviceWithCoreDeviceEntry_thingName :: Lens' AssociateClientDeviceWithCoreDeviceEntry Text
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.AssociateClientDeviceWithCoreDeviceEntry.AssociateClientDeviceWithCoreDeviceEntry
instance GHC.Show.Show Amazonka.GreengrassV2.Types.AssociateClientDeviceWithCoreDeviceEntry.AssociateClientDeviceWithCoreDeviceEntry
instance GHC.Read.Read Amazonka.GreengrassV2.Types.AssociateClientDeviceWithCoreDeviceEntry.AssociateClientDeviceWithCoreDeviceEntry
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.AssociateClientDeviceWithCoreDeviceEntry.AssociateClientDeviceWithCoreDeviceEntry
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.AssociateClientDeviceWithCoreDeviceEntry.AssociateClientDeviceWithCoreDeviceEntry
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.AssociateClientDeviceWithCoreDeviceEntry.AssociateClientDeviceWithCoreDeviceEntry
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.Types.AssociateClientDeviceWithCoreDeviceEntry.AssociateClientDeviceWithCoreDeviceEntry


module Amazonka.GreengrassV2.Types.AssociateClientDeviceWithCoreDeviceErrorEntry

-- | Contains an error that occurs from a request to associate a client
--   device with a core device. The
--   <a>BatchAssociateClientDeviceWithCoreDevice</a> operation returns a
--   list of these errors.
--   
--   <i>See:</i> <a>newAssociateClientDeviceWithCoreDeviceErrorEntry</a>
--   smart constructor.
data AssociateClientDeviceWithCoreDeviceErrorEntry
AssociateClientDeviceWithCoreDeviceErrorEntry' :: Maybe Text -> Maybe Text -> Maybe Text -> AssociateClientDeviceWithCoreDeviceErrorEntry

-- | The error code for the request.
[$sel:code:AssociateClientDeviceWithCoreDeviceErrorEntry'] :: AssociateClientDeviceWithCoreDeviceErrorEntry -> Maybe Text

-- | A message that provides additional information about the error.
[$sel:message:AssociateClientDeviceWithCoreDeviceErrorEntry'] :: AssociateClientDeviceWithCoreDeviceErrorEntry -> Maybe Text

-- | The name of the IoT thing whose associate request failed.
[$sel:thingName:AssociateClientDeviceWithCoreDeviceErrorEntry'] :: AssociateClientDeviceWithCoreDeviceErrorEntry -> Maybe Text

-- | Create a value of <a>AssociateClientDeviceWithCoreDeviceErrorEntry</a>
--   with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:code:AssociateClientDeviceWithCoreDeviceErrorEntry'</a>,
--   <a>associateClientDeviceWithCoreDeviceErrorEntry_code</a> - The error
--   code for the request.
--   
--   <a>$sel:message:AssociateClientDeviceWithCoreDeviceErrorEntry'</a>,
--   <a>associateClientDeviceWithCoreDeviceErrorEntry_message</a> - A
--   message that provides additional information about the error.
--   
--   <a>$sel:thingName:AssociateClientDeviceWithCoreDeviceErrorEntry'</a>,
--   <a>associateClientDeviceWithCoreDeviceErrorEntry_thingName</a> - The
--   name of the IoT thing whose associate request failed.
newAssociateClientDeviceWithCoreDeviceErrorEntry :: AssociateClientDeviceWithCoreDeviceErrorEntry

-- | The error code for the request.
associateClientDeviceWithCoreDeviceErrorEntry_code :: Lens' AssociateClientDeviceWithCoreDeviceErrorEntry (Maybe Text)

-- | A message that provides additional information about the error.
associateClientDeviceWithCoreDeviceErrorEntry_message :: Lens' AssociateClientDeviceWithCoreDeviceErrorEntry (Maybe Text)

-- | The name of the IoT thing whose associate request failed.
associateClientDeviceWithCoreDeviceErrorEntry_thingName :: Lens' AssociateClientDeviceWithCoreDeviceErrorEntry (Maybe Text)
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.AssociateClientDeviceWithCoreDeviceErrorEntry.AssociateClientDeviceWithCoreDeviceErrorEntry
instance GHC.Show.Show Amazonka.GreengrassV2.Types.AssociateClientDeviceWithCoreDeviceErrorEntry.AssociateClientDeviceWithCoreDeviceErrorEntry
instance GHC.Read.Read Amazonka.GreengrassV2.Types.AssociateClientDeviceWithCoreDeviceErrorEntry.AssociateClientDeviceWithCoreDeviceErrorEntry
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.AssociateClientDeviceWithCoreDeviceErrorEntry.AssociateClientDeviceWithCoreDeviceErrorEntry
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.AssociateClientDeviceWithCoreDeviceErrorEntry.AssociateClientDeviceWithCoreDeviceErrorEntry
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.AssociateClientDeviceWithCoreDeviceErrorEntry.AssociateClientDeviceWithCoreDeviceErrorEntry
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.AssociateClientDeviceWithCoreDeviceErrorEntry.AssociateClientDeviceWithCoreDeviceErrorEntry


module Amazonka.GreengrassV2.Types.AssociatedClientDevice

-- | Contains information about a client device that is associated to a
--   core device for cloud discovery.
--   
--   <i>See:</i> <a>newAssociatedClientDevice</a> smart constructor.
data AssociatedClientDevice
AssociatedClientDevice' :: Maybe POSIX -> Maybe Text -> AssociatedClientDevice

-- | The time that the client device was associated, expressed in ISO 8601
--   format.
[$sel:associationTimestamp:AssociatedClientDevice'] :: AssociatedClientDevice -> Maybe POSIX

-- | The name of the IoT thing that represents the associated client
--   device.
[$sel:thingName:AssociatedClientDevice'] :: AssociatedClientDevice -> Maybe Text

-- | Create a value of <a>AssociatedClientDevice</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:associationTimestamp:AssociatedClientDevice'</a>,
--   <a>associatedClientDevice_associationTimestamp</a> - The time that the
--   client device was associated, expressed in ISO 8601 format.
--   
--   <a>$sel:thingName:AssociatedClientDevice'</a>,
--   <a>associatedClientDevice_thingName</a> - The name of the IoT thing
--   that represents the associated client device.
newAssociatedClientDevice :: AssociatedClientDevice

-- | The time that the client device was associated, expressed in ISO 8601
--   format.
associatedClientDevice_associationTimestamp :: Lens' AssociatedClientDevice (Maybe UTCTime)

-- | The name of the IoT thing that represents the associated client
--   device.
associatedClientDevice_thingName :: Lens' AssociatedClientDevice (Maybe Text)
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.AssociatedClientDevice.AssociatedClientDevice
instance GHC.Show.Show Amazonka.GreengrassV2.Types.AssociatedClientDevice.AssociatedClientDevice
instance GHC.Read.Read Amazonka.GreengrassV2.Types.AssociatedClientDevice.AssociatedClientDevice
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.AssociatedClientDevice.AssociatedClientDevice
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.AssociatedClientDevice.AssociatedClientDevice
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.AssociatedClientDevice.AssociatedClientDevice
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.AssociatedClientDevice.AssociatedClientDevice


module Amazonka.GreengrassV2.Types.CloudComponentState
newtype CloudComponentState
CloudComponentState' :: Text -> CloudComponentState
[fromCloudComponentState] :: CloudComponentState -> Text
pattern CloudComponentState_DEPLOYABLE :: CloudComponentState
pattern CloudComponentState_DEPRECATED :: CloudComponentState
pattern CloudComponentState_FAILED :: CloudComponentState
pattern CloudComponentState_INITIATED :: CloudComponentState
pattern CloudComponentState_REQUESTED :: CloudComponentState
instance Amazonka.Data.XML.ToXML Amazonka.GreengrassV2.Types.CloudComponentState.CloudComponentState
instance Amazonka.Data.XML.FromXML Amazonka.GreengrassV2.Types.CloudComponentState.CloudComponentState
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.GreengrassV2.Types.CloudComponentState.CloudComponentState
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.Types.CloudComponentState.CloudComponentState
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.GreengrassV2.Types.CloudComponentState.CloudComponentState
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.CloudComponentState.CloudComponentState
instance Amazonka.Data.Query.ToQuery Amazonka.GreengrassV2.Types.CloudComponentState.CloudComponentState
instance Amazonka.Data.Headers.ToHeader Amazonka.GreengrassV2.Types.CloudComponentState.CloudComponentState
instance Amazonka.Data.Log.ToLog Amazonka.GreengrassV2.Types.CloudComponentState.CloudComponentState
instance Amazonka.Data.ByteString.ToByteString Amazonka.GreengrassV2.Types.CloudComponentState.CloudComponentState
instance Amazonka.Data.Text.ToText Amazonka.GreengrassV2.Types.CloudComponentState.CloudComponentState
instance Amazonka.Data.Text.FromText Amazonka.GreengrassV2.Types.CloudComponentState.CloudComponentState
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.CloudComponentState.CloudComponentState
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.CloudComponentState.CloudComponentState
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.CloudComponentState.CloudComponentState
instance GHC.Classes.Ord Amazonka.GreengrassV2.Types.CloudComponentState.CloudComponentState
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.CloudComponentState.CloudComponentState
instance GHC.Read.Read Amazonka.GreengrassV2.Types.CloudComponentState.CloudComponentState
instance GHC.Show.Show Amazonka.GreengrassV2.Types.CloudComponentState.CloudComponentState


module Amazonka.GreengrassV2.Types.CloudComponentStatus

-- | Contains the status of a component in the IoT Greengrass service.
--   
--   <i>See:</i> <a>newCloudComponentStatus</a> smart constructor.
data CloudComponentStatus
CloudComponentStatus' :: Maybe CloudComponentState -> Maybe Text -> Maybe (HashMap Text Text) -> CloudComponentStatus

-- | The state of the component.
[$sel:componentState:CloudComponentStatus'] :: CloudComponentStatus -> Maybe CloudComponentState

-- | A message that communicates details, such as errors, about the status
--   of the component.
[$sel:message:CloudComponentStatus'] :: CloudComponentStatus -> Maybe Text

-- | A dictionary of errors that communicate why the component is in an
--   error state. For example, if IoT Greengrass can't access an artifact
--   for the component, then <tt>errors</tt> contains the artifact's URI as
--   a key, and the error message as the value for that key.
[$sel:errors:CloudComponentStatus'] :: CloudComponentStatus -> Maybe (HashMap Text Text)

-- | Create a value of <a>CloudComponentStatus</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:componentState:CloudComponentStatus'</a>,
--   <a>cloudComponentStatus_componentState</a> - The state of the
--   component.
--   
--   <a>$sel:message:CloudComponentStatus'</a>,
--   <a>cloudComponentStatus_message</a> - A message that communicates
--   details, such as errors, about the status of the component.
--   
--   <a>$sel:errors:CloudComponentStatus'</a>,
--   <a>cloudComponentStatus_errors</a> - A dictionary of errors that
--   communicate why the component is in an error state. For example, if
--   IoT Greengrass can't access an artifact for the component, then
--   <tt>errors</tt> contains the artifact's URI as a key, and the error
--   message as the value for that key.
newCloudComponentStatus :: CloudComponentStatus

-- | The state of the component.
cloudComponentStatus_componentState :: Lens' CloudComponentStatus (Maybe CloudComponentState)

-- | A message that communicates details, such as errors, about the status
--   of the component.
cloudComponentStatus_message :: Lens' CloudComponentStatus (Maybe Text)

-- | A dictionary of errors that communicate why the component is in an
--   error state. For example, if IoT Greengrass can't access an artifact
--   for the component, then <tt>errors</tt> contains the artifact's URI as
--   a key, and the error message as the value for that key.
cloudComponentStatus_errors :: Lens' CloudComponentStatus (Maybe (HashMap Text Text))
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.CloudComponentStatus.CloudComponentStatus
instance GHC.Show.Show Amazonka.GreengrassV2.Types.CloudComponentStatus.CloudComponentStatus
instance GHC.Read.Read Amazonka.GreengrassV2.Types.CloudComponentStatus.CloudComponentStatus
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.CloudComponentStatus.CloudComponentStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.CloudComponentStatus.CloudComponentStatus
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.CloudComponentStatus.CloudComponentStatus
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.CloudComponentStatus.CloudComponentStatus


module Amazonka.GreengrassV2.Types.ComponentCandidate

-- | Contains information about a component that is a candidate to deploy
--   to a Greengrass core device.
--   
--   <i>See:</i> <a>newComponentCandidate</a> smart constructor.
data ComponentCandidate
ComponentCandidate' :: Maybe Text -> Maybe (HashMap Text Text) -> Maybe Text -> ComponentCandidate

-- | The version of the component.
[$sel:componentVersion:ComponentCandidate'] :: ComponentCandidate -> Maybe Text

-- | The version requirements for the component's dependencies. Greengrass
--   core devices get the version requirements from component recipes.
--   
--   IoT Greengrass V2 uses semantic version constraints. For more
--   information, see <a>Semantic Versioning</a>.
[$sel:versionRequirements:ComponentCandidate'] :: ComponentCandidate -> Maybe (HashMap Text Text)

-- | The name of the component.
[$sel:componentName:ComponentCandidate'] :: ComponentCandidate -> Maybe Text

-- | Create a value of <a>ComponentCandidate</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:componentVersion:ComponentCandidate'</a>,
--   <a>componentCandidate_componentVersion</a> - The version of the
--   component.
--   
--   <a>$sel:versionRequirements:ComponentCandidate'</a>,
--   <a>componentCandidate_versionRequirements</a> - The version
--   requirements for the component's dependencies. Greengrass core devices
--   get the version requirements from component recipes.
--   
--   IoT Greengrass V2 uses semantic version constraints. For more
--   information, see <a>Semantic Versioning</a>.
--   
--   <a>$sel:componentName:ComponentCandidate'</a>,
--   <a>componentCandidate_componentName</a> - The name of the component.
newComponentCandidate :: ComponentCandidate

-- | The version of the component.
componentCandidate_componentVersion :: Lens' ComponentCandidate (Maybe Text)

-- | The version requirements for the component's dependencies. Greengrass
--   core devices get the version requirements from component recipes.
--   
--   IoT Greengrass V2 uses semantic version constraints. For more
--   information, see <a>Semantic Versioning</a>.
componentCandidate_versionRequirements :: Lens' ComponentCandidate (Maybe (HashMap Text Text))

-- | The name of the component.
componentCandidate_componentName :: Lens' ComponentCandidate (Maybe Text)
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.ComponentCandidate.ComponentCandidate
instance GHC.Show.Show Amazonka.GreengrassV2.Types.ComponentCandidate.ComponentCandidate
instance GHC.Read.Read Amazonka.GreengrassV2.Types.ComponentCandidate.ComponentCandidate
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.ComponentCandidate.ComponentCandidate
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.ComponentCandidate.ComponentCandidate
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.ComponentCandidate.ComponentCandidate
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.Types.ComponentCandidate.ComponentCandidate


module Amazonka.GreengrassV2.Types.ComponentConfigurationUpdate

-- | Contains information about a deployment's update to a component's
--   configuration on Greengrass core devices. For more information, see
--   <a>Update component configurations</a> in the <i>IoT Greengrass V2
--   Developer Guide</i>.
--   
--   <i>See:</i> <a>newComponentConfigurationUpdate</a> smart constructor.
data ComponentConfigurationUpdate
ComponentConfigurationUpdate' :: Maybe [Text] -> Maybe Text -> ComponentConfigurationUpdate

-- | The list of configuration nodes to reset to default values on target
--   devices. Use JSON pointers to specify each node to reset. JSON
--   pointers start with a forward slash (<tt>/</tt>) and use forward
--   slashes to separate the key for each level in the object. For more
--   information, see the <a>JSON pointer specification</a> and <a>Reset
--   configuration updates</a> in the <i>IoT Greengrass V2 Developer
--   Guide</i>.
[$sel:reset:ComponentConfigurationUpdate'] :: ComponentConfigurationUpdate -> Maybe [Text]

-- | A serialized JSON string that contains the configuration object to
--   merge to target devices. The core device merges this configuration
--   with the component's existing configuration. If this is the first time
--   a component deploys on a device, the core device merges this
--   configuration with the component's default configuration. This means
--   that the core device keeps it's existing configuration for keys and
--   values that you don't specify in this object. For more information,
--   see <a>Merge configuration updates</a> in the <i>IoT Greengrass V2
--   Developer Guide</i>.
[$sel:merge:ComponentConfigurationUpdate'] :: ComponentConfigurationUpdate -> Maybe Text

-- | Create a value of <a>ComponentConfigurationUpdate</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:reset:ComponentConfigurationUpdate'</a>,
--   <a>componentConfigurationUpdate_reset</a> - The list of configuration
--   nodes to reset to default values on target devices. Use JSON pointers
--   to specify each node to reset. JSON pointers start with a forward
--   slash (<tt>/</tt>) and use forward slashes to separate the key for
--   each level in the object. For more information, see the <a>JSON
--   pointer specification</a> and <a>Reset configuration updates</a> in
--   the <i>IoT Greengrass V2 Developer Guide</i>.
--   
--   <a>$sel:merge:ComponentConfigurationUpdate'</a>,
--   <a>componentConfigurationUpdate_merge</a> - A serialized JSON string
--   that contains the configuration object to merge to target devices. The
--   core device merges this configuration with the component's existing
--   configuration. If this is the first time a component deploys on a
--   device, the core device merges this configuration with the component's
--   default configuration. This means that the core device keeps it's
--   existing configuration for keys and values that you don't specify in
--   this object. For more information, see <a>Merge configuration
--   updates</a> in the <i>IoT Greengrass V2 Developer Guide</i>.
newComponentConfigurationUpdate :: ComponentConfigurationUpdate

-- | The list of configuration nodes to reset to default values on target
--   devices. Use JSON pointers to specify each node to reset. JSON
--   pointers start with a forward slash (<tt>/</tt>) and use forward
--   slashes to separate the key for each level in the object. For more
--   information, see the <a>JSON pointer specification</a> and <a>Reset
--   configuration updates</a> in the <i>IoT Greengrass V2 Developer
--   Guide</i>.
componentConfigurationUpdate_reset :: Lens' ComponentConfigurationUpdate (Maybe [Text])

-- | A serialized JSON string that contains the configuration object to
--   merge to target devices. The core device merges this configuration
--   with the component's existing configuration. If this is the first time
--   a component deploys on a device, the core device merges this
--   configuration with the component's default configuration. This means
--   that the core device keeps it's existing configuration for keys and
--   values that you don't specify in this object. For more information,
--   see <a>Merge configuration updates</a> in the <i>IoT Greengrass V2
--   Developer Guide</i>.
componentConfigurationUpdate_merge :: Lens' ComponentConfigurationUpdate (Maybe Text)
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.ComponentConfigurationUpdate.ComponentConfigurationUpdate
instance GHC.Show.Show Amazonka.GreengrassV2.Types.ComponentConfigurationUpdate.ComponentConfigurationUpdate
instance GHC.Read.Read Amazonka.GreengrassV2.Types.ComponentConfigurationUpdate.ComponentConfigurationUpdate
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.ComponentConfigurationUpdate.ComponentConfigurationUpdate
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.ComponentConfigurationUpdate.ComponentConfigurationUpdate
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.ComponentConfigurationUpdate.ComponentConfigurationUpdate
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.ComponentConfigurationUpdate.ComponentConfigurationUpdate
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.Types.ComponentConfigurationUpdate.ComponentConfigurationUpdate


module Amazonka.GreengrassV2.Types.ComponentDependencyType
newtype ComponentDependencyType
ComponentDependencyType' :: Text -> ComponentDependencyType
[fromComponentDependencyType] :: ComponentDependencyType -> Text
pattern ComponentDependencyType_HARD :: ComponentDependencyType
pattern ComponentDependencyType_SOFT :: ComponentDependencyType
instance Amazonka.Data.XML.ToXML Amazonka.GreengrassV2.Types.ComponentDependencyType.ComponentDependencyType
instance Amazonka.Data.XML.FromXML Amazonka.GreengrassV2.Types.ComponentDependencyType.ComponentDependencyType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.GreengrassV2.Types.ComponentDependencyType.ComponentDependencyType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.Types.ComponentDependencyType.ComponentDependencyType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.GreengrassV2.Types.ComponentDependencyType.ComponentDependencyType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.ComponentDependencyType.ComponentDependencyType
instance Amazonka.Data.Query.ToQuery Amazonka.GreengrassV2.Types.ComponentDependencyType.ComponentDependencyType
instance Amazonka.Data.Headers.ToHeader Amazonka.GreengrassV2.Types.ComponentDependencyType.ComponentDependencyType
instance Amazonka.Data.Log.ToLog Amazonka.GreengrassV2.Types.ComponentDependencyType.ComponentDependencyType
instance Amazonka.Data.ByteString.ToByteString Amazonka.GreengrassV2.Types.ComponentDependencyType.ComponentDependencyType
instance Amazonka.Data.Text.ToText Amazonka.GreengrassV2.Types.ComponentDependencyType.ComponentDependencyType
instance Amazonka.Data.Text.FromText Amazonka.GreengrassV2.Types.ComponentDependencyType.ComponentDependencyType
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.ComponentDependencyType.ComponentDependencyType
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.ComponentDependencyType.ComponentDependencyType
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.ComponentDependencyType.ComponentDependencyType
instance GHC.Classes.Ord Amazonka.GreengrassV2.Types.ComponentDependencyType.ComponentDependencyType
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.ComponentDependencyType.ComponentDependencyType
instance GHC.Read.Read Amazonka.GreengrassV2.Types.ComponentDependencyType.ComponentDependencyType
instance GHC.Show.Show Amazonka.GreengrassV2.Types.ComponentDependencyType.ComponentDependencyType


module Amazonka.GreengrassV2.Types.ComponentDependencyRequirement

-- | Contains information about a component dependency for a Lambda
--   function component.
--   
--   <i>See:</i> <a>newComponentDependencyRequirement</a> smart
--   constructor.
data ComponentDependencyRequirement
ComponentDependencyRequirement' :: Maybe ComponentDependencyType -> Maybe Text -> ComponentDependencyRequirement

-- | The type of this dependency. Choose from the following options:
--   
--   <ul>
--   <li><tt>SOFT</tt> – The component doesn't restart if the dependency
--   changes state.</li>
--   <li><tt>HARD</tt> – The component restarts if the dependency changes
--   state.</li>
--   </ul>
--   
--   Default: <tt>HARD</tt>
[$sel:dependencyType:ComponentDependencyRequirement'] :: ComponentDependencyRequirement -> Maybe ComponentDependencyType

-- | The component version requirement for the component dependency.
--   
--   IoT Greengrass V2 uses semantic version constraints. For more
--   information, see <a>Semantic Versioning</a>.
[$sel:versionRequirement:ComponentDependencyRequirement'] :: ComponentDependencyRequirement -> Maybe Text

-- | Create a value of <a>ComponentDependencyRequirement</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dependencyType:ComponentDependencyRequirement'</a>,
--   <a>componentDependencyRequirement_dependencyType</a> - The type of
--   this dependency. Choose from the following options:
--   
--   <ul>
--   <li><tt>SOFT</tt> – The component doesn't restart if the dependency
--   changes state.</li>
--   <li><tt>HARD</tt> – The component restarts if the dependency changes
--   state.</li>
--   </ul>
--   
--   Default: <tt>HARD</tt>
--   
--   <a>$sel:versionRequirement:ComponentDependencyRequirement'</a>,
--   <a>componentDependencyRequirement_versionRequirement</a> - The
--   component version requirement for the component dependency.
--   
--   IoT Greengrass V2 uses semantic version constraints. For more
--   information, see <a>Semantic Versioning</a>.
newComponentDependencyRequirement :: ComponentDependencyRequirement

-- | The type of this dependency. Choose from the following options:
--   
--   <ul>
--   <li><tt>SOFT</tt> – The component doesn't restart if the dependency
--   changes state.</li>
--   <li><tt>HARD</tt> – The component restarts if the dependency changes
--   state.</li>
--   </ul>
--   
--   Default: <tt>HARD</tt>
componentDependencyRequirement_dependencyType :: Lens' ComponentDependencyRequirement (Maybe ComponentDependencyType)

-- | The component version requirement for the component dependency.
--   
--   IoT Greengrass V2 uses semantic version constraints. For more
--   information, see <a>Semantic Versioning</a>.
componentDependencyRequirement_versionRequirement :: Lens' ComponentDependencyRequirement (Maybe Text)
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.ComponentDependencyRequirement.ComponentDependencyRequirement
instance GHC.Show.Show Amazonka.GreengrassV2.Types.ComponentDependencyRequirement.ComponentDependencyRequirement
instance GHC.Read.Read Amazonka.GreengrassV2.Types.ComponentDependencyRequirement.ComponentDependencyRequirement
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.ComponentDependencyRequirement.ComponentDependencyRequirement
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.ComponentDependencyRequirement.ComponentDependencyRequirement
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.ComponentDependencyRequirement.ComponentDependencyRequirement
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.Types.ComponentDependencyRequirement.ComponentDependencyRequirement


module Amazonka.GreengrassV2.Types.ComponentPlatform

-- | Contains information about a platform that a component supports.
--   
--   <i>See:</i> <a>newComponentPlatform</a> smart constructor.
data ComponentPlatform
ComponentPlatform' :: Maybe Text -> Maybe (HashMap Text Text) -> ComponentPlatform

-- | The friendly name of the platform. This name helps you identify the
--   platform.
--   
--   If you omit this parameter, IoT Greengrass creates a friendly name
--   from the <tt>os</tt> and <tt>architecture</tt> of the platform.
[$sel:name:ComponentPlatform'] :: ComponentPlatform -> Maybe Text

-- | A dictionary of attributes for the platform. The IoT Greengrass Core
--   software defines the <tt>os</tt> and <tt>platform</tt> by default. You
--   can specify additional platform attributes for a core device when you
--   deploy the Greengrass nucleus component. For more information, see the
--   <a>Greengrass nucleus component</a> in the <i>IoT Greengrass V2
--   Developer Guide</i>.
[$sel:attributes:ComponentPlatform'] :: ComponentPlatform -> Maybe (HashMap Text Text)

-- | Create a value of <a>ComponentPlatform</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:name:ComponentPlatform'</a>, <a>componentPlatform_name</a> -
--   The friendly name of the platform. This name helps you identify the
--   platform.
--   
--   If you omit this parameter, IoT Greengrass creates a friendly name
--   from the <tt>os</tt> and <tt>architecture</tt> of the platform.
--   
--   <a>$sel:attributes:ComponentPlatform'</a>,
--   <a>componentPlatform_attributes</a> - A dictionary of attributes for
--   the platform. The IoT Greengrass Core software defines the <tt>os</tt>
--   and <tt>platform</tt> by default. You can specify additional platform
--   attributes for a core device when you deploy the Greengrass nucleus
--   component. For more information, see the <a>Greengrass nucleus
--   component</a> in the <i>IoT Greengrass V2 Developer Guide</i>.
newComponentPlatform :: ComponentPlatform

-- | The friendly name of the platform. This name helps you identify the
--   platform.
--   
--   If you omit this parameter, IoT Greengrass creates a friendly name
--   from the <tt>os</tt> and <tt>architecture</tt> of the platform.
componentPlatform_name :: Lens' ComponentPlatform (Maybe Text)

-- | A dictionary of attributes for the platform. The IoT Greengrass Core
--   software defines the <tt>os</tt> and <tt>platform</tt> by default. You
--   can specify additional platform attributes for a core device when you
--   deploy the Greengrass nucleus component. For more information, see the
--   <a>Greengrass nucleus component</a> in the <i>IoT Greengrass V2
--   Developer Guide</i>.
componentPlatform_attributes :: Lens' ComponentPlatform (Maybe (HashMap Text Text))
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.ComponentPlatform.ComponentPlatform
instance GHC.Show.Show Amazonka.GreengrassV2.Types.ComponentPlatform.ComponentPlatform
instance GHC.Read.Read Amazonka.GreengrassV2.Types.ComponentPlatform.ComponentPlatform
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.ComponentPlatform.ComponentPlatform
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.ComponentPlatform.ComponentPlatform
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.ComponentPlatform.ComponentPlatform
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.ComponentPlatform.ComponentPlatform
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.Types.ComponentPlatform.ComponentPlatform


module Amazonka.GreengrassV2.Types.ComponentLatestVersion

-- | Contains information about the latest version of a component.
--   
--   <i>See:</i> <a>newComponentLatestVersion</a> smart constructor.
data ComponentLatestVersion
ComponentLatestVersion' :: Maybe [ComponentPlatform] -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe Text -> ComponentLatestVersion

-- | The platforms that the component version supports.
[$sel:platforms:ComponentLatestVersion'] :: ComponentLatestVersion -> Maybe [ComponentPlatform]

-- | The <a>ARN</a> of the component version.
[$sel:arn:ComponentLatestVersion'] :: ComponentLatestVersion -> Maybe Text

-- | The version of the component.
[$sel:componentVersion:ComponentLatestVersion'] :: ComponentLatestVersion -> Maybe Text

-- | The time at which the component was created, expressed in ISO 8601
--   format.
[$sel:creationTimestamp:ComponentLatestVersion'] :: ComponentLatestVersion -> Maybe POSIX

-- | The publisher of the component version.
[$sel:publisher:ComponentLatestVersion'] :: ComponentLatestVersion -> Maybe Text

-- | The description of the component version.
[$sel:description:ComponentLatestVersion'] :: ComponentLatestVersion -> Maybe Text

-- | Create a value of <a>ComponentLatestVersion</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:platforms:ComponentLatestVersion'</a>,
--   <a>componentLatestVersion_platforms</a> - The platforms that the
--   component version supports.
--   
--   <a>$sel:arn:ComponentLatestVersion'</a>,
--   <a>componentLatestVersion_arn</a> - The <a>ARN</a> of the component
--   version.
--   
--   <a>$sel:componentVersion:ComponentLatestVersion'</a>,
--   <a>componentLatestVersion_componentVersion</a> - The version of the
--   component.
--   
--   <a>$sel:creationTimestamp:ComponentLatestVersion'</a>,
--   <a>componentLatestVersion_creationTimestamp</a> - The time at which
--   the component was created, expressed in ISO 8601 format.
--   
--   <a>$sel:publisher:ComponentLatestVersion'</a>,
--   <a>componentLatestVersion_publisher</a> - The publisher of the
--   component version.
--   
--   <a>$sel:description:ComponentLatestVersion'</a>,
--   <a>componentLatestVersion_description</a> - The description of the
--   component version.
newComponentLatestVersion :: ComponentLatestVersion

-- | The platforms that the component version supports.
componentLatestVersion_platforms :: Lens' ComponentLatestVersion (Maybe [ComponentPlatform])

-- | The <a>ARN</a> of the component version.
componentLatestVersion_arn :: Lens' ComponentLatestVersion (Maybe Text)

-- | The version of the component.
componentLatestVersion_componentVersion :: Lens' ComponentLatestVersion (Maybe Text)

-- | The time at which the component was created, expressed in ISO 8601
--   format.
componentLatestVersion_creationTimestamp :: Lens' ComponentLatestVersion (Maybe UTCTime)

-- | The publisher of the component version.
componentLatestVersion_publisher :: Lens' ComponentLatestVersion (Maybe Text)

-- | The description of the component version.
componentLatestVersion_description :: Lens' ComponentLatestVersion (Maybe Text)
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.ComponentLatestVersion.ComponentLatestVersion
instance GHC.Show.Show Amazonka.GreengrassV2.Types.ComponentLatestVersion.ComponentLatestVersion
instance GHC.Read.Read Amazonka.GreengrassV2.Types.ComponentLatestVersion.ComponentLatestVersion
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.ComponentLatestVersion.ComponentLatestVersion
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.ComponentLatestVersion.ComponentLatestVersion
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.ComponentLatestVersion.ComponentLatestVersion
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.ComponentLatestVersion.ComponentLatestVersion


module Amazonka.GreengrassV2.Types.Component

-- | Contains information about a component.
--   
--   <i>See:</i> <a>newComponent</a> smart constructor.
data Component
Component' :: Maybe Text -> Maybe Text -> Maybe ComponentLatestVersion -> Component

-- | The <a>ARN</a> of the component version.
[$sel:arn:Component'] :: Component -> Maybe Text

-- | The name of the component.
[$sel:componentName:Component'] :: Component -> Maybe Text

-- | The latest version of the component and its details.
[$sel:latestVersion:Component'] :: Component -> Maybe ComponentLatestVersion

-- | Create a value of <a>Component</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:arn:Component'</a>, <a>component_arn</a> - The <a>ARN</a> of
--   the component version.
--   
--   <a>$sel:componentName:Component'</a>, <a>component_componentName</a> -
--   The name of the component.
--   
--   <a>$sel:latestVersion:Component'</a>, <a>component_latestVersion</a> -
--   The latest version of the component and its details.
newComponent :: Component

-- | The <a>ARN</a> of the component version.
component_arn :: Lens' Component (Maybe Text)

-- | The name of the component.
component_componentName :: Lens' Component (Maybe Text)

-- | The latest version of the component and its details.
component_latestVersion :: Lens' Component (Maybe ComponentLatestVersion)
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.Component.Component
instance GHC.Show.Show Amazonka.GreengrassV2.Types.Component.Component
instance GHC.Read.Read Amazonka.GreengrassV2.Types.Component.Component
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.Component.Component
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.Component.Component
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.Component.Component
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.Component.Component


module Amazonka.GreengrassV2.Types.ComponentVersionListItem

-- | Contains information about a component version in a list.
--   
--   <i>See:</i> <a>newComponentVersionListItem</a> smart constructor.
data ComponentVersionListItem
ComponentVersionListItem' :: Maybe Text -> Maybe Text -> Maybe Text -> ComponentVersionListItem

-- | The <a>ARN</a> of the component version.
[$sel:arn:ComponentVersionListItem'] :: ComponentVersionListItem -> Maybe Text

-- | The version of the component.
[$sel:componentVersion:ComponentVersionListItem'] :: ComponentVersionListItem -> Maybe Text

-- | The name of the component.
[$sel:componentName:ComponentVersionListItem'] :: ComponentVersionListItem -> Maybe Text

-- | Create a value of <a>ComponentVersionListItem</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:arn:ComponentVersionListItem'</a>,
--   <a>componentVersionListItem_arn</a> - The <a>ARN</a> of the component
--   version.
--   
--   <a>$sel:componentVersion:ComponentVersionListItem'</a>,
--   <a>componentVersionListItem_componentVersion</a> - The version of the
--   component.
--   
--   <a>$sel:componentName:ComponentVersionListItem'</a>,
--   <a>componentVersionListItem_componentName</a> - The name of the
--   component.
newComponentVersionListItem :: ComponentVersionListItem

-- | The <a>ARN</a> of the component version.
componentVersionListItem_arn :: Lens' ComponentVersionListItem (Maybe Text)

-- | The version of the component.
componentVersionListItem_componentVersion :: Lens' ComponentVersionListItem (Maybe Text)

-- | The name of the component.
componentVersionListItem_componentName :: Lens' ComponentVersionListItem (Maybe Text)
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.ComponentVersionListItem.ComponentVersionListItem
instance GHC.Show.Show Amazonka.GreengrassV2.Types.ComponentVersionListItem.ComponentVersionListItem
instance GHC.Read.Read Amazonka.GreengrassV2.Types.ComponentVersionListItem.ComponentVersionListItem
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.ComponentVersionListItem.ComponentVersionListItem
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.ComponentVersionListItem.ComponentVersionListItem
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.ComponentVersionListItem.ComponentVersionListItem
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.ComponentVersionListItem.ComponentVersionListItem


module Amazonka.GreengrassV2.Types.ComponentVisibilityScope
newtype ComponentVisibilityScope
ComponentVisibilityScope' :: Text -> ComponentVisibilityScope
[fromComponentVisibilityScope] :: ComponentVisibilityScope -> Text
pattern ComponentVisibilityScope_PRIVATE :: ComponentVisibilityScope
pattern ComponentVisibilityScope_PUBLIC :: ComponentVisibilityScope
instance Amazonka.Data.XML.ToXML Amazonka.GreengrassV2.Types.ComponentVisibilityScope.ComponentVisibilityScope
instance Amazonka.Data.XML.FromXML Amazonka.GreengrassV2.Types.ComponentVisibilityScope.ComponentVisibilityScope
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.GreengrassV2.Types.ComponentVisibilityScope.ComponentVisibilityScope
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.Types.ComponentVisibilityScope.ComponentVisibilityScope
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.GreengrassV2.Types.ComponentVisibilityScope.ComponentVisibilityScope
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.ComponentVisibilityScope.ComponentVisibilityScope
instance Amazonka.Data.Query.ToQuery Amazonka.GreengrassV2.Types.ComponentVisibilityScope.ComponentVisibilityScope
instance Amazonka.Data.Headers.ToHeader Amazonka.GreengrassV2.Types.ComponentVisibilityScope.ComponentVisibilityScope
instance Amazonka.Data.Log.ToLog Amazonka.GreengrassV2.Types.ComponentVisibilityScope.ComponentVisibilityScope
instance Amazonka.Data.ByteString.ToByteString Amazonka.GreengrassV2.Types.ComponentVisibilityScope.ComponentVisibilityScope
instance Amazonka.Data.Text.ToText Amazonka.GreengrassV2.Types.ComponentVisibilityScope.ComponentVisibilityScope
instance Amazonka.Data.Text.FromText Amazonka.GreengrassV2.Types.ComponentVisibilityScope.ComponentVisibilityScope
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.ComponentVisibilityScope.ComponentVisibilityScope
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.ComponentVisibilityScope.ComponentVisibilityScope
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.ComponentVisibilityScope.ComponentVisibilityScope
instance GHC.Classes.Ord Amazonka.GreengrassV2.Types.ComponentVisibilityScope.ComponentVisibilityScope
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.ComponentVisibilityScope.ComponentVisibilityScope
instance GHC.Read.Read Amazonka.GreengrassV2.Types.ComponentVisibilityScope.ComponentVisibilityScope
instance GHC.Show.Show Amazonka.GreengrassV2.Types.ComponentVisibilityScope.ComponentVisibilityScope


module Amazonka.GreengrassV2.Types.CoreDeviceStatus
newtype CoreDeviceStatus
CoreDeviceStatus' :: Text -> CoreDeviceStatus
[fromCoreDeviceStatus] :: CoreDeviceStatus -> Text
pattern CoreDeviceStatus_HEALTHY :: CoreDeviceStatus
pattern CoreDeviceStatus_UNHEALTHY :: CoreDeviceStatus
instance Amazonka.Data.XML.ToXML Amazonka.GreengrassV2.Types.CoreDeviceStatus.CoreDeviceStatus
instance Amazonka.Data.XML.FromXML Amazonka.GreengrassV2.Types.CoreDeviceStatus.CoreDeviceStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.GreengrassV2.Types.CoreDeviceStatus.CoreDeviceStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.Types.CoreDeviceStatus.CoreDeviceStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.GreengrassV2.Types.CoreDeviceStatus.CoreDeviceStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.CoreDeviceStatus.CoreDeviceStatus
instance Amazonka.Data.Query.ToQuery Amazonka.GreengrassV2.Types.CoreDeviceStatus.CoreDeviceStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.GreengrassV2.Types.CoreDeviceStatus.CoreDeviceStatus
instance Amazonka.Data.Log.ToLog Amazonka.GreengrassV2.Types.CoreDeviceStatus.CoreDeviceStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.GreengrassV2.Types.CoreDeviceStatus.CoreDeviceStatus
instance Amazonka.Data.Text.ToText Amazonka.GreengrassV2.Types.CoreDeviceStatus.CoreDeviceStatus
instance Amazonka.Data.Text.FromText Amazonka.GreengrassV2.Types.CoreDeviceStatus.CoreDeviceStatus
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.CoreDeviceStatus.CoreDeviceStatus
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.CoreDeviceStatus.CoreDeviceStatus
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.CoreDeviceStatus.CoreDeviceStatus
instance GHC.Classes.Ord Amazonka.GreengrassV2.Types.CoreDeviceStatus.CoreDeviceStatus
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.CoreDeviceStatus.CoreDeviceStatus
instance GHC.Read.Read Amazonka.GreengrassV2.Types.CoreDeviceStatus.CoreDeviceStatus
instance GHC.Show.Show Amazonka.GreengrassV2.Types.CoreDeviceStatus.CoreDeviceStatus


module Amazonka.GreengrassV2.Types.CoreDevice

-- | Contains information about a Greengrass core device, which is an IoT
--   thing that runs the IoT Greengrass Core software.
--   
--   <i>See:</i> <a>newCoreDevice</a> smart constructor.
data CoreDevice
CoreDevice' :: Maybe CoreDeviceStatus -> Maybe Text -> Maybe POSIX -> CoreDevice

-- | The status of the core device. Core devices can have the following
--   statuses:
--   
--   <ul>
--   <li><tt>HEALTHY</tt> – The IoT Greengrass Core software and all
--   components run on the core device without issue.</li>
--   <li><tt>UNHEALTHY</tt> – The IoT Greengrass Core software or a
--   component is in a failed state on the core device.</li>
--   </ul>
[$sel:status:CoreDevice'] :: CoreDevice -> Maybe CoreDeviceStatus

-- | The name of the core device. This is also the name of the IoT thing.
[$sel:coreDeviceThingName:CoreDevice'] :: CoreDevice -> Maybe Text

-- | The time at which the core device's status last updated, expressed in
--   ISO 8601 format.
[$sel:lastStatusUpdateTimestamp:CoreDevice'] :: CoreDevice -> Maybe POSIX

-- | Create a value of <a>CoreDevice</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:CoreDevice'</a>, <a>coreDevice_status</a> - The status
--   of the core device. Core devices can have the following statuses:
--   
--   <ul>
--   <li><tt>HEALTHY</tt> – The IoT Greengrass Core software and all
--   components run on the core device without issue.</li>
--   <li><tt>UNHEALTHY</tt> – The IoT Greengrass Core software or a
--   component is in a failed state on the core device.</li>
--   </ul>
--   
--   <a>$sel:coreDeviceThingName:CoreDevice'</a>,
--   <a>coreDevice_coreDeviceThingName</a> - The name of the core device.
--   This is also the name of the IoT thing.
--   
--   <a>$sel:lastStatusUpdateTimestamp:CoreDevice'</a>,
--   <a>coreDevice_lastStatusUpdateTimestamp</a> - The time at which the
--   core device's status last updated, expressed in ISO 8601 format.
newCoreDevice :: CoreDevice

-- | The status of the core device. Core devices can have the following
--   statuses:
--   
--   <ul>
--   <li><tt>HEALTHY</tt> – The IoT Greengrass Core software and all
--   components run on the core device without issue.</li>
--   <li><tt>UNHEALTHY</tt> – The IoT Greengrass Core software or a
--   component is in a failed state on the core device.</li>
--   </ul>
coreDevice_status :: Lens' CoreDevice (Maybe CoreDeviceStatus)

-- | The name of the core device. This is also the name of the IoT thing.
coreDevice_coreDeviceThingName :: Lens' CoreDevice (Maybe Text)

-- | The time at which the core device's status last updated, expressed in
--   ISO 8601 format.
coreDevice_lastStatusUpdateTimestamp :: Lens' CoreDevice (Maybe UTCTime)
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.CoreDevice.CoreDevice
instance GHC.Show.Show Amazonka.GreengrassV2.Types.CoreDevice.CoreDevice
instance GHC.Read.Read Amazonka.GreengrassV2.Types.CoreDevice.CoreDevice
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.CoreDevice.CoreDevice
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.CoreDevice.CoreDevice
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.CoreDevice.CoreDevice
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.CoreDevice.CoreDevice


module Amazonka.GreengrassV2.Types.DeploymentComponentUpdatePolicyAction
newtype DeploymentComponentUpdatePolicyAction
DeploymentComponentUpdatePolicyAction' :: Text -> DeploymentComponentUpdatePolicyAction
[fromDeploymentComponentUpdatePolicyAction] :: DeploymentComponentUpdatePolicyAction -> Text
pattern DeploymentComponentUpdatePolicyAction_NOTIFY_COMPONENTS :: DeploymentComponentUpdatePolicyAction
pattern DeploymentComponentUpdatePolicyAction_SKIP_NOTIFY_COMPONENTS :: DeploymentComponentUpdatePolicyAction
instance Amazonka.Data.XML.ToXML Amazonka.GreengrassV2.Types.DeploymentComponentUpdatePolicyAction.DeploymentComponentUpdatePolicyAction
instance Amazonka.Data.XML.FromXML Amazonka.GreengrassV2.Types.DeploymentComponentUpdatePolicyAction.DeploymentComponentUpdatePolicyAction
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.GreengrassV2.Types.DeploymentComponentUpdatePolicyAction.DeploymentComponentUpdatePolicyAction
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.Types.DeploymentComponentUpdatePolicyAction.DeploymentComponentUpdatePolicyAction
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.GreengrassV2.Types.DeploymentComponentUpdatePolicyAction.DeploymentComponentUpdatePolicyAction
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.DeploymentComponentUpdatePolicyAction.DeploymentComponentUpdatePolicyAction
instance Amazonka.Data.Query.ToQuery Amazonka.GreengrassV2.Types.DeploymentComponentUpdatePolicyAction.DeploymentComponentUpdatePolicyAction
instance Amazonka.Data.Headers.ToHeader Amazonka.GreengrassV2.Types.DeploymentComponentUpdatePolicyAction.DeploymentComponentUpdatePolicyAction
instance Amazonka.Data.Log.ToLog Amazonka.GreengrassV2.Types.DeploymentComponentUpdatePolicyAction.DeploymentComponentUpdatePolicyAction
instance Amazonka.Data.ByteString.ToByteString Amazonka.GreengrassV2.Types.DeploymentComponentUpdatePolicyAction.DeploymentComponentUpdatePolicyAction
instance Amazonka.Data.Text.ToText Amazonka.GreengrassV2.Types.DeploymentComponentUpdatePolicyAction.DeploymentComponentUpdatePolicyAction
instance Amazonka.Data.Text.FromText Amazonka.GreengrassV2.Types.DeploymentComponentUpdatePolicyAction.DeploymentComponentUpdatePolicyAction
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.DeploymentComponentUpdatePolicyAction.DeploymentComponentUpdatePolicyAction
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.DeploymentComponentUpdatePolicyAction.DeploymentComponentUpdatePolicyAction
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.DeploymentComponentUpdatePolicyAction.DeploymentComponentUpdatePolicyAction
instance GHC.Classes.Ord Amazonka.GreengrassV2.Types.DeploymentComponentUpdatePolicyAction.DeploymentComponentUpdatePolicyAction
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.DeploymentComponentUpdatePolicyAction.DeploymentComponentUpdatePolicyAction
instance GHC.Read.Read Amazonka.GreengrassV2.Types.DeploymentComponentUpdatePolicyAction.DeploymentComponentUpdatePolicyAction
instance GHC.Show.Show Amazonka.GreengrassV2.Types.DeploymentComponentUpdatePolicyAction.DeploymentComponentUpdatePolicyAction


module Amazonka.GreengrassV2.Types.DeploymentComponentUpdatePolicy

-- | Contains information about a deployment's policy that defines when
--   components are safe to update.
--   
--   Each component on a device can report whether or not it's ready to
--   update. After a component and its dependencies are ready, they can
--   apply the update in the deployment. You can configure whether or not
--   the deployment notifies components of an update and waits for a
--   response. You specify the amount of time each component has to respond
--   to the update notification.
--   
--   <i>See:</i> <a>newDeploymentComponentUpdatePolicy</a> smart
--   constructor.
data DeploymentComponentUpdatePolicy
DeploymentComponentUpdatePolicy' :: Maybe DeploymentComponentUpdatePolicyAction -> Maybe Int -> DeploymentComponentUpdatePolicy

-- | Whether or not to notify components and wait for components to become
--   safe to update. Choose from the following options:
--   
--   <ul>
--   <li><tt>NOTIFY_COMPONENTS</tt> – The deployment notifies each
--   component before it stops and updates that component. Components can
--   use the <a>SubscribeToComponentUpdates</a> IPC operation to receive
--   these notifications. Then, components can respond with the
--   <a>DeferComponentUpdate</a> IPC operation. For more information, see
--   <a>Create deployments</a> in the <i>IoT Greengrass V2 Developer
--   Guide</i>.</li>
--   <li><tt>SKIP_NOTIFY_COMPONENTS</tt> – The deployment doesn't notify
--   components or wait for them to be safe to update.</li>
--   </ul>
--   
--   Default: <tt>NOTIFY_COMPONENTS</tt>
[$sel:action:DeploymentComponentUpdatePolicy'] :: DeploymentComponentUpdatePolicy -> Maybe DeploymentComponentUpdatePolicyAction

-- | The amount of time in seconds that each component on a device has to
--   report that it's safe to update. If the component waits for longer
--   than this timeout, then the deployment proceeds on the device.
--   
--   Default: <tt>60</tt>
[$sel:timeoutInSeconds:DeploymentComponentUpdatePolicy'] :: DeploymentComponentUpdatePolicy -> Maybe Int

-- | Create a value of <a>DeploymentComponentUpdatePolicy</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:action:DeploymentComponentUpdatePolicy'</a>,
--   <a>deploymentComponentUpdatePolicy_action</a> - Whether or not to
--   notify components and wait for components to become safe to update.
--   Choose from the following options:
--   
--   <ul>
--   <li><tt>NOTIFY_COMPONENTS</tt> – The deployment notifies each
--   component before it stops and updates that component. Components can
--   use the <a>SubscribeToComponentUpdates</a> IPC operation to receive
--   these notifications. Then, components can respond with the
--   <a>DeferComponentUpdate</a> IPC operation. For more information, see
--   <a>Create deployments</a> in the <i>IoT Greengrass V2 Developer
--   Guide</i>.</li>
--   <li><tt>SKIP_NOTIFY_COMPONENTS</tt> – The deployment doesn't notify
--   components or wait for them to be safe to update.</li>
--   </ul>
--   
--   Default: <tt>NOTIFY_COMPONENTS</tt>
--   
--   <a>$sel:timeoutInSeconds:DeploymentComponentUpdatePolicy'</a>,
--   <a>deploymentComponentUpdatePolicy_timeoutInSeconds</a> - The amount
--   of time in seconds that each component on a device has to report that
--   it's safe to update. If the component waits for longer than this
--   timeout, then the deployment proceeds on the device.
--   
--   Default: <tt>60</tt>
newDeploymentComponentUpdatePolicy :: DeploymentComponentUpdatePolicy

-- | Whether or not to notify components and wait for components to become
--   safe to update. Choose from the following options:
--   
--   <ul>
--   <li><tt>NOTIFY_COMPONENTS</tt> – The deployment notifies each
--   component before it stops and updates that component. Components can
--   use the <a>SubscribeToComponentUpdates</a> IPC operation to receive
--   these notifications. Then, components can respond with the
--   <a>DeferComponentUpdate</a> IPC operation. For more information, see
--   <a>Create deployments</a> in the <i>IoT Greengrass V2 Developer
--   Guide</i>.</li>
--   <li><tt>SKIP_NOTIFY_COMPONENTS</tt> – The deployment doesn't notify
--   components or wait for them to be safe to update.</li>
--   </ul>
--   
--   Default: <tt>NOTIFY_COMPONENTS</tt>
deploymentComponentUpdatePolicy_action :: Lens' DeploymentComponentUpdatePolicy (Maybe DeploymentComponentUpdatePolicyAction)

-- | The amount of time in seconds that each component on a device has to
--   report that it's safe to update. If the component waits for longer
--   than this timeout, then the deployment proceeds on the device.
--   
--   Default: <tt>60</tt>
deploymentComponentUpdatePolicy_timeoutInSeconds :: Lens' DeploymentComponentUpdatePolicy (Maybe Int)
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.DeploymentComponentUpdatePolicy.DeploymentComponentUpdatePolicy
instance GHC.Show.Show Amazonka.GreengrassV2.Types.DeploymentComponentUpdatePolicy.DeploymentComponentUpdatePolicy
instance GHC.Read.Read Amazonka.GreengrassV2.Types.DeploymentComponentUpdatePolicy.DeploymentComponentUpdatePolicy
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.DeploymentComponentUpdatePolicy.DeploymentComponentUpdatePolicy
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.DeploymentComponentUpdatePolicy.DeploymentComponentUpdatePolicy
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.DeploymentComponentUpdatePolicy.DeploymentComponentUpdatePolicy
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.DeploymentComponentUpdatePolicy.DeploymentComponentUpdatePolicy
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.Types.DeploymentComponentUpdatePolicy.DeploymentComponentUpdatePolicy


module Amazonka.GreengrassV2.Types.DeploymentConfigurationValidationPolicy

-- | Contains information about how long a component on a core device can
--   validate its configuration updates before it times out. Components can
--   use the <a>SubscribeToValidateConfigurationUpdates</a> IPC operation
--   to receive notifications when a deployment specifies a configuration
--   update. Then, components can respond with the
--   <a>SendConfigurationValidityReport</a> IPC operation. For more
--   information, see <a>Create deployments</a> in the <i>IoT Greengrass V2
--   Developer Guide</i>.
--   
--   <i>See:</i> <a>newDeploymentConfigurationValidationPolicy</a> smart
--   constructor.
data DeploymentConfigurationValidationPolicy
DeploymentConfigurationValidationPolicy' :: Maybe Int -> DeploymentConfigurationValidationPolicy

-- | The amount of time in seconds that a component can validate its
--   configuration updates. If the validation time exceeds this timeout,
--   then the deployment proceeds for the device.
--   
--   Default: <tt>30</tt>
[$sel:timeoutInSeconds:DeploymentConfigurationValidationPolicy'] :: DeploymentConfigurationValidationPolicy -> Maybe Int

-- | Create a value of <a>DeploymentConfigurationValidationPolicy</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:timeoutInSeconds:DeploymentConfigurationValidationPolicy'</a>,
--   <a>deploymentConfigurationValidationPolicy_timeoutInSeconds</a> - The
--   amount of time in seconds that a component can validate its
--   configuration updates. If the validation time exceeds this timeout,
--   then the deployment proceeds for the device.
--   
--   Default: <tt>30</tt>
newDeploymentConfigurationValidationPolicy :: DeploymentConfigurationValidationPolicy

-- | The amount of time in seconds that a component can validate its
--   configuration updates. If the validation time exceeds this timeout,
--   then the deployment proceeds for the device.
--   
--   Default: <tt>30</tt>
deploymentConfigurationValidationPolicy_timeoutInSeconds :: Lens' DeploymentConfigurationValidationPolicy (Maybe Int)
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.DeploymentConfigurationValidationPolicy.DeploymentConfigurationValidationPolicy
instance GHC.Show.Show Amazonka.GreengrassV2.Types.DeploymentConfigurationValidationPolicy.DeploymentConfigurationValidationPolicy
instance GHC.Read.Read Amazonka.GreengrassV2.Types.DeploymentConfigurationValidationPolicy.DeploymentConfigurationValidationPolicy
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.DeploymentConfigurationValidationPolicy.DeploymentConfigurationValidationPolicy
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.DeploymentConfigurationValidationPolicy.DeploymentConfigurationValidationPolicy
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.DeploymentConfigurationValidationPolicy.DeploymentConfigurationValidationPolicy
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.DeploymentConfigurationValidationPolicy.DeploymentConfigurationValidationPolicy
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.Types.DeploymentConfigurationValidationPolicy.DeploymentConfigurationValidationPolicy


module Amazonka.GreengrassV2.Types.DeploymentFailureHandlingPolicy
newtype DeploymentFailureHandlingPolicy
DeploymentFailureHandlingPolicy' :: Text -> DeploymentFailureHandlingPolicy
[fromDeploymentFailureHandlingPolicy] :: DeploymentFailureHandlingPolicy -> Text
pattern DeploymentFailureHandlingPolicy_DO_NOTHING :: DeploymentFailureHandlingPolicy
pattern DeploymentFailureHandlingPolicy_ROLLBACK :: DeploymentFailureHandlingPolicy
instance Amazonka.Data.XML.ToXML Amazonka.GreengrassV2.Types.DeploymentFailureHandlingPolicy.DeploymentFailureHandlingPolicy
instance Amazonka.Data.XML.FromXML Amazonka.GreengrassV2.Types.DeploymentFailureHandlingPolicy.DeploymentFailureHandlingPolicy
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.GreengrassV2.Types.DeploymentFailureHandlingPolicy.DeploymentFailureHandlingPolicy
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.Types.DeploymentFailureHandlingPolicy.DeploymentFailureHandlingPolicy
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.GreengrassV2.Types.DeploymentFailureHandlingPolicy.DeploymentFailureHandlingPolicy
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.DeploymentFailureHandlingPolicy.DeploymentFailureHandlingPolicy
instance Amazonka.Data.Query.ToQuery Amazonka.GreengrassV2.Types.DeploymentFailureHandlingPolicy.DeploymentFailureHandlingPolicy
instance Amazonka.Data.Headers.ToHeader Amazonka.GreengrassV2.Types.DeploymentFailureHandlingPolicy.DeploymentFailureHandlingPolicy
instance Amazonka.Data.Log.ToLog Amazonka.GreengrassV2.Types.DeploymentFailureHandlingPolicy.DeploymentFailureHandlingPolicy
instance Amazonka.Data.ByteString.ToByteString Amazonka.GreengrassV2.Types.DeploymentFailureHandlingPolicy.DeploymentFailureHandlingPolicy
instance Amazonka.Data.Text.ToText Amazonka.GreengrassV2.Types.DeploymentFailureHandlingPolicy.DeploymentFailureHandlingPolicy
instance Amazonka.Data.Text.FromText Amazonka.GreengrassV2.Types.DeploymentFailureHandlingPolicy.DeploymentFailureHandlingPolicy
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.DeploymentFailureHandlingPolicy.DeploymentFailureHandlingPolicy
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.DeploymentFailureHandlingPolicy.DeploymentFailureHandlingPolicy
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.DeploymentFailureHandlingPolicy.DeploymentFailureHandlingPolicy
instance GHC.Classes.Ord Amazonka.GreengrassV2.Types.DeploymentFailureHandlingPolicy.DeploymentFailureHandlingPolicy
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.DeploymentFailureHandlingPolicy.DeploymentFailureHandlingPolicy
instance GHC.Read.Read Amazonka.GreengrassV2.Types.DeploymentFailureHandlingPolicy.DeploymentFailureHandlingPolicy
instance GHC.Show.Show Amazonka.GreengrassV2.Types.DeploymentFailureHandlingPolicy.DeploymentFailureHandlingPolicy


module Amazonka.GreengrassV2.Types.DeploymentHistoryFilter
newtype DeploymentHistoryFilter
DeploymentHistoryFilter' :: Text -> DeploymentHistoryFilter
[fromDeploymentHistoryFilter] :: DeploymentHistoryFilter -> Text
pattern DeploymentHistoryFilter_ALL :: DeploymentHistoryFilter
pattern DeploymentHistoryFilter_LATEST_ONLY :: DeploymentHistoryFilter
instance Amazonka.Data.XML.ToXML Amazonka.GreengrassV2.Types.DeploymentHistoryFilter.DeploymentHistoryFilter
instance Amazonka.Data.XML.FromXML Amazonka.GreengrassV2.Types.DeploymentHistoryFilter.DeploymentHistoryFilter
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.GreengrassV2.Types.DeploymentHistoryFilter.DeploymentHistoryFilter
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.Types.DeploymentHistoryFilter.DeploymentHistoryFilter
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.GreengrassV2.Types.DeploymentHistoryFilter.DeploymentHistoryFilter
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.DeploymentHistoryFilter.DeploymentHistoryFilter
instance Amazonka.Data.Query.ToQuery Amazonka.GreengrassV2.Types.DeploymentHistoryFilter.DeploymentHistoryFilter
instance Amazonka.Data.Headers.ToHeader Amazonka.GreengrassV2.Types.DeploymentHistoryFilter.DeploymentHistoryFilter
instance Amazonka.Data.Log.ToLog Amazonka.GreengrassV2.Types.DeploymentHistoryFilter.DeploymentHistoryFilter
instance Amazonka.Data.ByteString.ToByteString Amazonka.GreengrassV2.Types.DeploymentHistoryFilter.DeploymentHistoryFilter
instance Amazonka.Data.Text.ToText Amazonka.GreengrassV2.Types.DeploymentHistoryFilter.DeploymentHistoryFilter
instance Amazonka.Data.Text.FromText Amazonka.GreengrassV2.Types.DeploymentHistoryFilter.DeploymentHistoryFilter
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.DeploymentHistoryFilter.DeploymentHistoryFilter
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.DeploymentHistoryFilter.DeploymentHistoryFilter
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.DeploymentHistoryFilter.DeploymentHistoryFilter
instance GHC.Classes.Ord Amazonka.GreengrassV2.Types.DeploymentHistoryFilter.DeploymentHistoryFilter
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.DeploymentHistoryFilter.DeploymentHistoryFilter
instance GHC.Read.Read Amazonka.GreengrassV2.Types.DeploymentHistoryFilter.DeploymentHistoryFilter
instance GHC.Show.Show Amazonka.GreengrassV2.Types.DeploymentHistoryFilter.DeploymentHistoryFilter


module Amazonka.GreengrassV2.Types.DeploymentPolicies

-- | Contains information about policies that define how a deployment
--   updates components and handles failure.
--   
--   <i>See:</i> <a>newDeploymentPolicies</a> smart constructor.
data DeploymentPolicies
DeploymentPolicies' :: Maybe DeploymentFailureHandlingPolicy -> Maybe DeploymentConfigurationValidationPolicy -> Maybe DeploymentComponentUpdatePolicy -> DeploymentPolicies

-- | The failure handling policy for the configuration deployment. This
--   policy defines what to do if the deployment fails.
--   
--   Default: <tt>ROLLBACK</tt>
[$sel:failureHandlingPolicy:DeploymentPolicies'] :: DeploymentPolicies -> Maybe DeploymentFailureHandlingPolicy

-- | The configuration validation policy for the configuration deployment.
--   This policy defines how long each component has to validate its
--   configure updates.
[$sel:configurationValidationPolicy:DeploymentPolicies'] :: DeploymentPolicies -> Maybe DeploymentConfigurationValidationPolicy

-- | The component update policy for the configuration deployment. This
--   policy defines when it's safe to deploy the configuration to devices.
[$sel:componentUpdatePolicy:DeploymentPolicies'] :: DeploymentPolicies -> Maybe DeploymentComponentUpdatePolicy

-- | Create a value of <a>DeploymentPolicies</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failureHandlingPolicy:DeploymentPolicies'</a>,
--   <a>deploymentPolicies_failureHandlingPolicy</a> - The failure handling
--   policy for the configuration deployment. This policy defines what to
--   do if the deployment fails.
--   
--   Default: <tt>ROLLBACK</tt>
--   
--   <a>$sel:configurationValidationPolicy:DeploymentPolicies'</a>,
--   <a>deploymentPolicies_configurationValidationPolicy</a> - The
--   configuration validation policy for the configuration deployment. This
--   policy defines how long each component has to validate its configure
--   updates.
--   
--   <a>$sel:componentUpdatePolicy:DeploymentPolicies'</a>,
--   <a>deploymentPolicies_componentUpdatePolicy</a> - The component update
--   policy for the configuration deployment. This policy defines when it's
--   safe to deploy the configuration to devices.
newDeploymentPolicies :: DeploymentPolicies

-- | The failure handling policy for the configuration deployment. This
--   policy defines what to do if the deployment fails.
--   
--   Default: <tt>ROLLBACK</tt>
deploymentPolicies_failureHandlingPolicy :: Lens' DeploymentPolicies (Maybe DeploymentFailureHandlingPolicy)

-- | The configuration validation policy for the configuration deployment.
--   This policy defines how long each component has to validate its
--   configure updates.
deploymentPolicies_configurationValidationPolicy :: Lens' DeploymentPolicies (Maybe DeploymentConfigurationValidationPolicy)

-- | The component update policy for the configuration deployment. This
--   policy defines when it's safe to deploy the configuration to devices.
deploymentPolicies_componentUpdatePolicy :: Lens' DeploymentPolicies (Maybe DeploymentComponentUpdatePolicy)
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.DeploymentPolicies.DeploymentPolicies
instance GHC.Show.Show Amazonka.GreengrassV2.Types.DeploymentPolicies.DeploymentPolicies
instance GHC.Read.Read Amazonka.GreengrassV2.Types.DeploymentPolicies.DeploymentPolicies
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.DeploymentPolicies.DeploymentPolicies
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.DeploymentPolicies.DeploymentPolicies
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.DeploymentPolicies.DeploymentPolicies
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.DeploymentPolicies.DeploymentPolicies
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.Types.DeploymentPolicies.DeploymentPolicies


module Amazonka.GreengrassV2.Types.DeploymentStatus
newtype DeploymentStatus
DeploymentStatus' :: Text -> DeploymentStatus
[fromDeploymentStatus] :: DeploymentStatus -> Text
pattern DeploymentStatus_ACTIVE :: DeploymentStatus
pattern DeploymentStatus_CANCELED :: DeploymentStatus
pattern DeploymentStatus_COMPLETED :: DeploymentStatus
pattern DeploymentStatus_FAILED :: DeploymentStatus
pattern DeploymentStatus_INACTIVE :: DeploymentStatus
instance Amazonka.Data.XML.ToXML Amazonka.GreengrassV2.Types.DeploymentStatus.DeploymentStatus
instance Amazonka.Data.XML.FromXML Amazonka.GreengrassV2.Types.DeploymentStatus.DeploymentStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.GreengrassV2.Types.DeploymentStatus.DeploymentStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.Types.DeploymentStatus.DeploymentStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.GreengrassV2.Types.DeploymentStatus.DeploymentStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.DeploymentStatus.DeploymentStatus
instance Amazonka.Data.Query.ToQuery Amazonka.GreengrassV2.Types.DeploymentStatus.DeploymentStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.GreengrassV2.Types.DeploymentStatus.DeploymentStatus
instance Amazonka.Data.Log.ToLog Amazonka.GreengrassV2.Types.DeploymentStatus.DeploymentStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.GreengrassV2.Types.DeploymentStatus.DeploymentStatus
instance Amazonka.Data.Text.ToText Amazonka.GreengrassV2.Types.DeploymentStatus.DeploymentStatus
instance Amazonka.Data.Text.FromText Amazonka.GreengrassV2.Types.DeploymentStatus.DeploymentStatus
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.DeploymentStatus.DeploymentStatus
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.DeploymentStatus.DeploymentStatus
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.DeploymentStatus.DeploymentStatus
instance GHC.Classes.Ord Amazonka.GreengrassV2.Types.DeploymentStatus.DeploymentStatus
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.DeploymentStatus.DeploymentStatus
instance GHC.Read.Read Amazonka.GreengrassV2.Types.DeploymentStatus.DeploymentStatus
instance GHC.Show.Show Amazonka.GreengrassV2.Types.DeploymentStatus.DeploymentStatus


module Amazonka.GreengrassV2.Types.Deployment

-- | Contains information about a deployment.
--   
--   <i>See:</i> <a>newDeployment</a> smart constructor.
data Deployment
Deployment' :: Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe DeploymentStatus -> Maybe Bool -> Maybe Text -> Maybe Text -> Deployment

-- | The <a>ARN</a> of the target IoT thing or thing group.
[$sel:targetArn:Deployment'] :: Deployment -> Maybe Text

-- | The ID of the deployment.
[$sel:deploymentId:Deployment'] :: Deployment -> Maybe Text

-- | The time at which the deployment was created, expressed in ISO 8601
--   format.
[$sel:creationTimestamp:Deployment'] :: Deployment -> Maybe POSIX

-- | The status of the deployment.
[$sel:deploymentStatus:Deployment'] :: Deployment -> Maybe DeploymentStatus

-- | Whether or not the deployment is the latest revision for its target.
[$sel:isLatestForTarget:Deployment'] :: Deployment -> Maybe Bool

-- | The revision number of the deployment.
[$sel:revisionId:Deployment'] :: Deployment -> Maybe Text

-- | The name of the deployment.
[$sel:deploymentName:Deployment'] :: Deployment -> Maybe Text

-- | Create a value of <a>Deployment</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:targetArn:Deployment'</a>, <a>deployment_targetArn</a> - The
--   <a>ARN</a> of the target IoT thing or thing group.
--   
--   <a>$sel:deploymentId:Deployment'</a>, <a>deployment_deploymentId</a> -
--   The ID of the deployment.
--   
--   <a>$sel:creationTimestamp:Deployment'</a>,
--   <a>deployment_creationTimestamp</a> - The time at which the deployment
--   was created, expressed in ISO 8601 format.
--   
--   <a>$sel:deploymentStatus:Deployment'</a>,
--   <a>deployment_deploymentStatus</a> - The status of the deployment.
--   
--   <a>$sel:isLatestForTarget:Deployment'</a>,
--   <a>deployment_isLatestForTarget</a> - Whether or not the deployment is
--   the latest revision for its target.
--   
--   <a>$sel:revisionId:Deployment'</a>, <a>deployment_revisionId</a> - The
--   revision number of the deployment.
--   
--   <a>$sel:deploymentName:Deployment'</a>,
--   <a>deployment_deploymentName</a> - The name of the deployment.
newDeployment :: Deployment

-- | The <a>ARN</a> of the target IoT thing or thing group.
deployment_targetArn :: Lens' Deployment (Maybe Text)

-- | The ID of the deployment.
deployment_deploymentId :: Lens' Deployment (Maybe Text)

-- | The time at which the deployment was created, expressed in ISO 8601
--   format.
deployment_creationTimestamp :: Lens' Deployment (Maybe UTCTime)

-- | The status of the deployment.
deployment_deploymentStatus :: Lens' Deployment (Maybe DeploymentStatus)

-- | Whether or not the deployment is the latest revision for its target.
deployment_isLatestForTarget :: Lens' Deployment (Maybe Bool)

-- | The revision number of the deployment.
deployment_revisionId :: Lens' Deployment (Maybe Text)

-- | The name of the deployment.
deployment_deploymentName :: Lens' Deployment (Maybe Text)
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.Deployment.Deployment
instance GHC.Show.Show Amazonka.GreengrassV2.Types.Deployment.Deployment
instance GHC.Read.Read Amazonka.GreengrassV2.Types.Deployment.Deployment
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.Deployment.Deployment
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.Deployment.Deployment
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.Deployment.Deployment
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.Deployment.Deployment


module Amazonka.GreengrassV2.Types.DisassociateClientDeviceFromCoreDeviceEntry

-- | Contains a request to disassociate a client device from a core device.
--   The <a>BatchDisassociateClientDeviceWithCoreDevice</a> operation
--   consumes a list of these requests.
--   
--   <i>See:</i> <a>newDisassociateClientDeviceFromCoreDeviceEntry</a>
--   smart constructor.
data DisassociateClientDeviceFromCoreDeviceEntry
DisassociateClientDeviceFromCoreDeviceEntry' :: Text -> DisassociateClientDeviceFromCoreDeviceEntry

-- | The name of the IoT thing that represents the client device to
--   disassociate.
[$sel:thingName:DisassociateClientDeviceFromCoreDeviceEntry'] :: DisassociateClientDeviceFromCoreDeviceEntry -> Text

-- | Create a value of <a>DisassociateClientDeviceFromCoreDeviceEntry</a>
--   with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:thingName:DisassociateClientDeviceFromCoreDeviceEntry'</a>,
--   <a>disassociateClientDeviceFromCoreDeviceEntry_thingName</a> - The
--   name of the IoT thing that represents the client device to
--   disassociate.
newDisassociateClientDeviceFromCoreDeviceEntry :: Text -> DisassociateClientDeviceFromCoreDeviceEntry

-- | The name of the IoT thing that represents the client device to
--   disassociate.
disassociateClientDeviceFromCoreDeviceEntry_thingName :: Lens' DisassociateClientDeviceFromCoreDeviceEntry Text
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.DisassociateClientDeviceFromCoreDeviceEntry.DisassociateClientDeviceFromCoreDeviceEntry
instance GHC.Show.Show Amazonka.GreengrassV2.Types.DisassociateClientDeviceFromCoreDeviceEntry.DisassociateClientDeviceFromCoreDeviceEntry
instance GHC.Read.Read Amazonka.GreengrassV2.Types.DisassociateClientDeviceFromCoreDeviceEntry.DisassociateClientDeviceFromCoreDeviceEntry
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.DisassociateClientDeviceFromCoreDeviceEntry.DisassociateClientDeviceFromCoreDeviceEntry
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.DisassociateClientDeviceFromCoreDeviceEntry.DisassociateClientDeviceFromCoreDeviceEntry
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.DisassociateClientDeviceFromCoreDeviceEntry.DisassociateClientDeviceFromCoreDeviceEntry
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.Types.DisassociateClientDeviceFromCoreDeviceEntry.DisassociateClientDeviceFromCoreDeviceEntry


module Amazonka.GreengrassV2.Types.DisassociateClientDeviceFromCoreDeviceErrorEntry

-- | Contains an error that occurs from a request to disassociate a client
--   device from a core device. The
--   <a>BatchDisassociateClientDeviceWithCoreDevice</a> operation returns a
--   list of these errors.
--   
--   <i>See:</i> <a>newDisassociateClientDeviceFromCoreDeviceErrorEntry</a>
--   smart constructor.
data DisassociateClientDeviceFromCoreDeviceErrorEntry
DisassociateClientDeviceFromCoreDeviceErrorEntry' :: Maybe Text -> Maybe Text -> Maybe Text -> DisassociateClientDeviceFromCoreDeviceErrorEntry

-- | The error code for the request.
[$sel:code:DisassociateClientDeviceFromCoreDeviceErrorEntry'] :: DisassociateClientDeviceFromCoreDeviceErrorEntry -> Maybe Text

-- | A message that provides additional information about the error.
[$sel:message:DisassociateClientDeviceFromCoreDeviceErrorEntry'] :: DisassociateClientDeviceFromCoreDeviceErrorEntry -> Maybe Text

-- | The name of the IoT thing whose disassociate request failed.
[$sel:thingName:DisassociateClientDeviceFromCoreDeviceErrorEntry'] :: DisassociateClientDeviceFromCoreDeviceErrorEntry -> Maybe Text

-- | Create a value of
--   <a>DisassociateClientDeviceFromCoreDeviceErrorEntry</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:code:DisassociateClientDeviceFromCoreDeviceErrorEntry'</a>,
--   <a>disassociateClientDeviceFromCoreDeviceErrorEntry_code</a> - The
--   error code for the request.
--   
--   <a>$sel:message:DisassociateClientDeviceFromCoreDeviceErrorEntry'</a>,
--   <a>disassociateClientDeviceFromCoreDeviceErrorEntry_message</a> - A
--   message that provides additional information about the error.
--   
--   
--   <a>$sel:thingName:DisassociateClientDeviceFromCoreDeviceErrorEntry'</a>,
--   <a>disassociateClientDeviceFromCoreDeviceErrorEntry_thingName</a> -
--   The name of the IoT thing whose disassociate request failed.
newDisassociateClientDeviceFromCoreDeviceErrorEntry :: DisassociateClientDeviceFromCoreDeviceErrorEntry

-- | The error code for the request.
disassociateClientDeviceFromCoreDeviceErrorEntry_code :: Lens' DisassociateClientDeviceFromCoreDeviceErrorEntry (Maybe Text)

-- | A message that provides additional information about the error.
disassociateClientDeviceFromCoreDeviceErrorEntry_message :: Lens' DisassociateClientDeviceFromCoreDeviceErrorEntry (Maybe Text)

-- | The name of the IoT thing whose disassociate request failed.
disassociateClientDeviceFromCoreDeviceErrorEntry_thingName :: Lens' DisassociateClientDeviceFromCoreDeviceErrorEntry (Maybe Text)
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.DisassociateClientDeviceFromCoreDeviceErrorEntry.DisassociateClientDeviceFromCoreDeviceErrorEntry
instance GHC.Show.Show Amazonka.GreengrassV2.Types.DisassociateClientDeviceFromCoreDeviceErrorEntry.DisassociateClientDeviceFromCoreDeviceErrorEntry
instance GHC.Read.Read Amazonka.GreengrassV2.Types.DisassociateClientDeviceFromCoreDeviceErrorEntry.DisassociateClientDeviceFromCoreDeviceErrorEntry
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.DisassociateClientDeviceFromCoreDeviceErrorEntry.DisassociateClientDeviceFromCoreDeviceErrorEntry
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.DisassociateClientDeviceFromCoreDeviceErrorEntry.DisassociateClientDeviceFromCoreDeviceErrorEntry
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.DisassociateClientDeviceFromCoreDeviceErrorEntry.DisassociateClientDeviceFromCoreDeviceErrorEntry
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.DisassociateClientDeviceFromCoreDeviceErrorEntry.DisassociateClientDeviceFromCoreDeviceErrorEntry


module Amazonka.GreengrassV2.Types.EffectiveDeploymentExecutionStatus
newtype EffectiveDeploymentExecutionStatus
EffectiveDeploymentExecutionStatus' :: Text -> EffectiveDeploymentExecutionStatus
[fromEffectiveDeploymentExecutionStatus] :: EffectiveDeploymentExecutionStatus -> Text
pattern EffectiveDeploymentExecutionStatus_CANCELED :: EffectiveDeploymentExecutionStatus
pattern EffectiveDeploymentExecutionStatus_COMPLETED :: EffectiveDeploymentExecutionStatus
pattern EffectiveDeploymentExecutionStatus_FAILED :: EffectiveDeploymentExecutionStatus
pattern EffectiveDeploymentExecutionStatus_IN_PROGRESS :: EffectiveDeploymentExecutionStatus
pattern EffectiveDeploymentExecutionStatus_QUEUED :: EffectiveDeploymentExecutionStatus
pattern EffectiveDeploymentExecutionStatus_REJECTED :: EffectiveDeploymentExecutionStatus
pattern EffectiveDeploymentExecutionStatus_TIMED_OUT :: EffectiveDeploymentExecutionStatus
instance Amazonka.Data.XML.ToXML Amazonka.GreengrassV2.Types.EffectiveDeploymentExecutionStatus.EffectiveDeploymentExecutionStatus
instance Amazonka.Data.XML.FromXML Amazonka.GreengrassV2.Types.EffectiveDeploymentExecutionStatus.EffectiveDeploymentExecutionStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.GreengrassV2.Types.EffectiveDeploymentExecutionStatus.EffectiveDeploymentExecutionStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.Types.EffectiveDeploymentExecutionStatus.EffectiveDeploymentExecutionStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.GreengrassV2.Types.EffectiveDeploymentExecutionStatus.EffectiveDeploymentExecutionStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.EffectiveDeploymentExecutionStatus.EffectiveDeploymentExecutionStatus
instance Amazonka.Data.Query.ToQuery Amazonka.GreengrassV2.Types.EffectiveDeploymentExecutionStatus.EffectiveDeploymentExecutionStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.GreengrassV2.Types.EffectiveDeploymentExecutionStatus.EffectiveDeploymentExecutionStatus
instance Amazonka.Data.Log.ToLog Amazonka.GreengrassV2.Types.EffectiveDeploymentExecutionStatus.EffectiveDeploymentExecutionStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.GreengrassV2.Types.EffectiveDeploymentExecutionStatus.EffectiveDeploymentExecutionStatus
instance Amazonka.Data.Text.ToText Amazonka.GreengrassV2.Types.EffectiveDeploymentExecutionStatus.EffectiveDeploymentExecutionStatus
instance Amazonka.Data.Text.FromText Amazonka.GreengrassV2.Types.EffectiveDeploymentExecutionStatus.EffectiveDeploymentExecutionStatus
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.EffectiveDeploymentExecutionStatus.EffectiveDeploymentExecutionStatus
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.EffectiveDeploymentExecutionStatus.EffectiveDeploymentExecutionStatus
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.EffectiveDeploymentExecutionStatus.EffectiveDeploymentExecutionStatus
instance GHC.Classes.Ord Amazonka.GreengrassV2.Types.EffectiveDeploymentExecutionStatus.EffectiveDeploymentExecutionStatus
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.EffectiveDeploymentExecutionStatus.EffectiveDeploymentExecutionStatus
instance GHC.Read.Read Amazonka.GreengrassV2.Types.EffectiveDeploymentExecutionStatus.EffectiveDeploymentExecutionStatus
instance GHC.Show.Show Amazonka.GreengrassV2.Types.EffectiveDeploymentExecutionStatus.EffectiveDeploymentExecutionStatus


module Amazonka.GreengrassV2.Types.EffectiveDeployment

-- | Contains information about a deployment job that IoT Greengrass sends
--   to a Greengrass core device.
--   
--   <i>See:</i> <a>newEffectiveDeployment</a> smart constructor.
data EffectiveDeployment
EffectiveDeployment' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Text -> Text -> Text -> EffectiveDeploymentExecutionStatus -> POSIX -> POSIX -> EffectiveDeployment

-- | The ID of the IoT job that applies the deployment to target devices.
[$sel:iotJobId:EffectiveDeployment'] :: EffectiveDeployment -> Maybe Text

-- | The <a>ARN</a> of the IoT job that applies the deployment to target
--   devices.
[$sel:iotJobArn:EffectiveDeployment'] :: EffectiveDeployment -> Maybe Text

-- | The reason code for the update, if the job was updated.
[$sel:reason:EffectiveDeployment'] :: EffectiveDeployment -> Maybe Text

-- | The description of the deployment job.
[$sel:description:EffectiveDeployment'] :: EffectiveDeployment -> Maybe Text

-- | The ID of the deployment.
[$sel:deploymentId:EffectiveDeployment'] :: EffectiveDeployment -> Text

-- | The name of the deployment.
[$sel:deploymentName:EffectiveDeployment'] :: EffectiveDeployment -> Text

-- | The <a>ARN</a> of the target IoT thing or thing group.
[$sel:targetArn:EffectiveDeployment'] :: EffectiveDeployment -> Text

-- | The status of the deployment job on the Greengrass core device.
[$sel:coreDeviceExecutionStatus:EffectiveDeployment'] :: EffectiveDeployment -> EffectiveDeploymentExecutionStatus

-- | The time at which the deployment was created, expressed in ISO 8601
--   format.
[$sel:creationTimestamp:EffectiveDeployment'] :: EffectiveDeployment -> POSIX

-- | The time at which the deployment job was last modified, expressed in
--   ISO 8601 format.
[$sel:modifiedTimestamp:EffectiveDeployment'] :: EffectiveDeployment -> POSIX

-- | Create a value of <a>EffectiveDeployment</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:iotJobId:EffectiveDeployment'</a>,
--   <a>effectiveDeployment_iotJobId</a> - The ID of the IoT job that
--   applies the deployment to target devices.
--   
--   <a>$sel:iotJobArn:EffectiveDeployment'</a>,
--   <a>effectiveDeployment_iotJobArn</a> - The <a>ARN</a> of the IoT job
--   that applies the deployment to target devices.
--   
--   <a>$sel:reason:EffectiveDeployment'</a>,
--   <a>effectiveDeployment_reason</a> - The reason code for the update, if
--   the job was updated.
--   
--   <a>$sel:description:EffectiveDeployment'</a>,
--   <a>effectiveDeployment_description</a> - The description of the
--   deployment job.
--   
--   <a>$sel:deploymentId:EffectiveDeployment'</a>,
--   <a>effectiveDeployment_deploymentId</a> - The ID of the deployment.
--   
--   <a>$sel:deploymentName:EffectiveDeployment'</a>,
--   <a>effectiveDeployment_deploymentName</a> - The name of the
--   deployment.
--   
--   <a>$sel:targetArn:EffectiveDeployment'</a>,
--   <a>effectiveDeployment_targetArn</a> - The <a>ARN</a> of the target
--   IoT thing or thing group.
--   
--   <a>$sel:coreDeviceExecutionStatus:EffectiveDeployment'</a>,
--   <a>effectiveDeployment_coreDeviceExecutionStatus</a> - The status of
--   the deployment job on the Greengrass core device.
--   
--   <a>$sel:creationTimestamp:EffectiveDeployment'</a>,
--   <a>effectiveDeployment_creationTimestamp</a> - The time at which the
--   deployment was created, expressed in ISO 8601 format.
--   
--   <a>$sel:modifiedTimestamp:EffectiveDeployment'</a>,
--   <a>effectiveDeployment_modifiedTimestamp</a> - The time at which the
--   deployment job was last modified, expressed in ISO 8601 format.
newEffectiveDeployment :: Text -> Text -> Text -> EffectiveDeploymentExecutionStatus -> UTCTime -> UTCTime -> EffectiveDeployment

-- | The ID of the IoT job that applies the deployment to target devices.
effectiveDeployment_iotJobId :: Lens' EffectiveDeployment (Maybe Text)

-- | The <a>ARN</a> of the IoT job that applies the deployment to target
--   devices.
effectiveDeployment_iotJobArn :: Lens' EffectiveDeployment (Maybe Text)

-- | The reason code for the update, if the job was updated.
effectiveDeployment_reason :: Lens' EffectiveDeployment (Maybe Text)

-- | The description of the deployment job.
effectiveDeployment_description :: Lens' EffectiveDeployment (Maybe Text)

-- | The ID of the deployment.
effectiveDeployment_deploymentId :: Lens' EffectiveDeployment Text

-- | The name of the deployment.
effectiveDeployment_deploymentName :: Lens' EffectiveDeployment Text

-- | The <a>ARN</a> of the target IoT thing or thing group.
effectiveDeployment_targetArn :: Lens' EffectiveDeployment Text

-- | The status of the deployment job on the Greengrass core device.
effectiveDeployment_coreDeviceExecutionStatus :: Lens' EffectiveDeployment EffectiveDeploymentExecutionStatus

-- | The time at which the deployment was created, expressed in ISO 8601
--   format.
effectiveDeployment_creationTimestamp :: Lens' EffectiveDeployment UTCTime

-- | The time at which the deployment job was last modified, expressed in
--   ISO 8601 format.
effectiveDeployment_modifiedTimestamp :: Lens' EffectiveDeployment UTCTime
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.EffectiveDeployment.EffectiveDeployment
instance GHC.Show.Show Amazonka.GreengrassV2.Types.EffectiveDeployment.EffectiveDeployment
instance GHC.Read.Read Amazonka.GreengrassV2.Types.EffectiveDeployment.EffectiveDeployment
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.EffectiveDeployment.EffectiveDeployment
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.EffectiveDeployment.EffectiveDeployment
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.EffectiveDeployment.EffectiveDeployment
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.EffectiveDeployment.EffectiveDeployment


module Amazonka.GreengrassV2.Types.InstalledComponentLifecycleState
newtype InstalledComponentLifecycleState
InstalledComponentLifecycleState' :: Text -> InstalledComponentLifecycleState
[fromInstalledComponentLifecycleState] :: InstalledComponentLifecycleState -> Text
pattern InstalledComponentLifecycleState_BROKEN :: InstalledComponentLifecycleState
pattern InstalledComponentLifecycleState_ERRORED :: InstalledComponentLifecycleState
pattern InstalledComponentLifecycleState_FINISHED :: InstalledComponentLifecycleState
pattern InstalledComponentLifecycleState_INSTALLED :: InstalledComponentLifecycleState
pattern InstalledComponentLifecycleState_NEW :: InstalledComponentLifecycleState
pattern InstalledComponentLifecycleState_RUNNING :: InstalledComponentLifecycleState
pattern InstalledComponentLifecycleState_STARTING :: InstalledComponentLifecycleState
pattern InstalledComponentLifecycleState_STOPPING :: InstalledComponentLifecycleState
instance Amazonka.Data.XML.ToXML Amazonka.GreengrassV2.Types.InstalledComponentLifecycleState.InstalledComponentLifecycleState
instance Amazonka.Data.XML.FromXML Amazonka.GreengrassV2.Types.InstalledComponentLifecycleState.InstalledComponentLifecycleState
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.GreengrassV2.Types.InstalledComponentLifecycleState.InstalledComponentLifecycleState
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.Types.InstalledComponentLifecycleState.InstalledComponentLifecycleState
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.GreengrassV2.Types.InstalledComponentLifecycleState.InstalledComponentLifecycleState
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.InstalledComponentLifecycleState.InstalledComponentLifecycleState
instance Amazonka.Data.Query.ToQuery Amazonka.GreengrassV2.Types.InstalledComponentLifecycleState.InstalledComponentLifecycleState
instance Amazonka.Data.Headers.ToHeader Amazonka.GreengrassV2.Types.InstalledComponentLifecycleState.InstalledComponentLifecycleState
instance Amazonka.Data.Log.ToLog Amazonka.GreengrassV2.Types.InstalledComponentLifecycleState.InstalledComponentLifecycleState
instance Amazonka.Data.ByteString.ToByteString Amazonka.GreengrassV2.Types.InstalledComponentLifecycleState.InstalledComponentLifecycleState
instance Amazonka.Data.Text.ToText Amazonka.GreengrassV2.Types.InstalledComponentLifecycleState.InstalledComponentLifecycleState
instance Amazonka.Data.Text.FromText Amazonka.GreengrassV2.Types.InstalledComponentLifecycleState.InstalledComponentLifecycleState
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.InstalledComponentLifecycleState.InstalledComponentLifecycleState
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.InstalledComponentLifecycleState.InstalledComponentLifecycleState
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.InstalledComponentLifecycleState.InstalledComponentLifecycleState
instance GHC.Classes.Ord Amazonka.GreengrassV2.Types.InstalledComponentLifecycleState.InstalledComponentLifecycleState
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.InstalledComponentLifecycleState.InstalledComponentLifecycleState
instance GHC.Read.Read Amazonka.GreengrassV2.Types.InstalledComponentLifecycleState.InstalledComponentLifecycleState
instance GHC.Show.Show Amazonka.GreengrassV2.Types.InstalledComponentLifecycleState.InstalledComponentLifecycleState


module Amazonka.GreengrassV2.Types.InstalledComponent

-- | Contains information about a component on a Greengrass core device.
--   
--   <i>See:</i> <a>newInstalledComponent</a> smart constructor.
data InstalledComponent
InstalledComponent' :: Maybe Bool -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe InstalledComponentLifecycleState -> InstalledComponent

-- | Whether or not the component is a root component.
[$sel:isRoot:InstalledComponent'] :: InstalledComponent -> Maybe Bool

-- | The version of the component.
[$sel:componentVersion:InstalledComponent'] :: InstalledComponent -> Maybe Text

-- | The name of the component.
[$sel:componentName:InstalledComponent'] :: InstalledComponent -> Maybe Text

-- | The details about the lifecycle state of the component.
[$sel:lifecycleStateDetails:InstalledComponent'] :: InstalledComponent -> Maybe Text

-- | The lifecycle state of the component.
[$sel:lifecycleState:InstalledComponent'] :: InstalledComponent -> Maybe InstalledComponentLifecycleState

-- | Create a value of <a>InstalledComponent</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:isRoot:InstalledComponent'</a>,
--   <a>installedComponent_isRoot</a> - Whether or not the component is a
--   root component.
--   
--   <a>$sel:componentVersion:InstalledComponent'</a>,
--   <a>installedComponent_componentVersion</a> - The version of the
--   component.
--   
--   <a>$sel:componentName:InstalledComponent'</a>,
--   <a>installedComponent_componentName</a> - The name of the component.
--   
--   <a>$sel:lifecycleStateDetails:InstalledComponent'</a>,
--   <a>installedComponent_lifecycleStateDetails</a> - The details about
--   the lifecycle state of the component.
--   
--   <a>$sel:lifecycleState:InstalledComponent'</a>,
--   <a>installedComponent_lifecycleState</a> - The lifecycle state of the
--   component.
newInstalledComponent :: InstalledComponent

-- | Whether or not the component is a root component.
installedComponent_isRoot :: Lens' InstalledComponent (Maybe Bool)

-- | The version of the component.
installedComponent_componentVersion :: Lens' InstalledComponent (Maybe Text)

-- | The name of the component.
installedComponent_componentName :: Lens' InstalledComponent (Maybe Text)

-- | The details about the lifecycle state of the component.
installedComponent_lifecycleStateDetails :: Lens' InstalledComponent (Maybe Text)

-- | The lifecycle state of the component.
installedComponent_lifecycleState :: Lens' InstalledComponent (Maybe InstalledComponentLifecycleState)
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.InstalledComponent.InstalledComponent
instance GHC.Show.Show Amazonka.GreengrassV2.Types.InstalledComponent.InstalledComponent
instance GHC.Read.Read Amazonka.GreengrassV2.Types.InstalledComponent.InstalledComponent
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.InstalledComponent.InstalledComponent
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.InstalledComponent.InstalledComponent
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.InstalledComponent.InstalledComponent
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.InstalledComponent.InstalledComponent


module Amazonka.GreengrassV2.Types.IoTJobAbortAction
newtype IoTJobAbortAction
IoTJobAbortAction' :: Text -> IoTJobAbortAction
[fromIoTJobAbortAction] :: IoTJobAbortAction -> Text
pattern IoTJobAbortAction_CANCEL :: IoTJobAbortAction
instance Amazonka.Data.XML.ToXML Amazonka.GreengrassV2.Types.IoTJobAbortAction.IoTJobAbortAction
instance Amazonka.Data.XML.FromXML Amazonka.GreengrassV2.Types.IoTJobAbortAction.IoTJobAbortAction
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.GreengrassV2.Types.IoTJobAbortAction.IoTJobAbortAction
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.Types.IoTJobAbortAction.IoTJobAbortAction
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.GreengrassV2.Types.IoTJobAbortAction.IoTJobAbortAction
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.IoTJobAbortAction.IoTJobAbortAction
instance Amazonka.Data.Query.ToQuery Amazonka.GreengrassV2.Types.IoTJobAbortAction.IoTJobAbortAction
instance Amazonka.Data.Headers.ToHeader Amazonka.GreengrassV2.Types.IoTJobAbortAction.IoTJobAbortAction
instance Amazonka.Data.Log.ToLog Amazonka.GreengrassV2.Types.IoTJobAbortAction.IoTJobAbortAction
instance Amazonka.Data.ByteString.ToByteString Amazonka.GreengrassV2.Types.IoTJobAbortAction.IoTJobAbortAction
instance Amazonka.Data.Text.ToText Amazonka.GreengrassV2.Types.IoTJobAbortAction.IoTJobAbortAction
instance Amazonka.Data.Text.FromText Amazonka.GreengrassV2.Types.IoTJobAbortAction.IoTJobAbortAction
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.IoTJobAbortAction.IoTJobAbortAction
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.IoTJobAbortAction.IoTJobAbortAction
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.IoTJobAbortAction.IoTJobAbortAction
instance GHC.Classes.Ord Amazonka.GreengrassV2.Types.IoTJobAbortAction.IoTJobAbortAction
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.IoTJobAbortAction.IoTJobAbortAction
instance GHC.Read.Read Amazonka.GreengrassV2.Types.IoTJobAbortAction.IoTJobAbortAction
instance GHC.Show.Show Amazonka.GreengrassV2.Types.IoTJobAbortAction.IoTJobAbortAction


module Amazonka.GreengrassV2.Types.IoTJobExecutionFailureType
newtype IoTJobExecutionFailureType
IoTJobExecutionFailureType' :: Text -> IoTJobExecutionFailureType
[fromIoTJobExecutionFailureType] :: IoTJobExecutionFailureType -> Text
pattern IoTJobExecutionFailureType_ALL :: IoTJobExecutionFailureType
pattern IoTJobExecutionFailureType_FAILED :: IoTJobExecutionFailureType
pattern IoTJobExecutionFailureType_REJECTED :: IoTJobExecutionFailureType
pattern IoTJobExecutionFailureType_TIMED_OUT :: IoTJobExecutionFailureType
instance Amazonka.Data.XML.ToXML Amazonka.GreengrassV2.Types.IoTJobExecutionFailureType.IoTJobExecutionFailureType
instance Amazonka.Data.XML.FromXML Amazonka.GreengrassV2.Types.IoTJobExecutionFailureType.IoTJobExecutionFailureType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.GreengrassV2.Types.IoTJobExecutionFailureType.IoTJobExecutionFailureType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.Types.IoTJobExecutionFailureType.IoTJobExecutionFailureType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.GreengrassV2.Types.IoTJobExecutionFailureType.IoTJobExecutionFailureType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.IoTJobExecutionFailureType.IoTJobExecutionFailureType
instance Amazonka.Data.Query.ToQuery Amazonka.GreengrassV2.Types.IoTJobExecutionFailureType.IoTJobExecutionFailureType
instance Amazonka.Data.Headers.ToHeader Amazonka.GreengrassV2.Types.IoTJobExecutionFailureType.IoTJobExecutionFailureType
instance Amazonka.Data.Log.ToLog Amazonka.GreengrassV2.Types.IoTJobExecutionFailureType.IoTJobExecutionFailureType
instance Amazonka.Data.ByteString.ToByteString Amazonka.GreengrassV2.Types.IoTJobExecutionFailureType.IoTJobExecutionFailureType
instance Amazonka.Data.Text.ToText Amazonka.GreengrassV2.Types.IoTJobExecutionFailureType.IoTJobExecutionFailureType
instance Amazonka.Data.Text.FromText Amazonka.GreengrassV2.Types.IoTJobExecutionFailureType.IoTJobExecutionFailureType
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.IoTJobExecutionFailureType.IoTJobExecutionFailureType
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.IoTJobExecutionFailureType.IoTJobExecutionFailureType
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.IoTJobExecutionFailureType.IoTJobExecutionFailureType
instance GHC.Classes.Ord Amazonka.GreengrassV2.Types.IoTJobExecutionFailureType.IoTJobExecutionFailureType
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.IoTJobExecutionFailureType.IoTJobExecutionFailureType
instance GHC.Read.Read Amazonka.GreengrassV2.Types.IoTJobExecutionFailureType.IoTJobExecutionFailureType
instance GHC.Show.Show Amazonka.GreengrassV2.Types.IoTJobExecutionFailureType.IoTJobExecutionFailureType


module Amazonka.GreengrassV2.Types.IoTJobAbortCriteria

-- | Contains criteria that define when and how to cancel a job.
--   
--   The deployment stops if the following conditions are true:
--   
--   <ol>
--   <li>The number of things that receive the deployment exceeds the
--   <tt>minNumberOfExecutedThings</tt>.</li>
--   <li>The percentage of failures with type <tt>failureType</tt> exceeds
--   the <tt>thresholdPercentage</tt>.</li>
--   </ol>
--   
--   <i>See:</i> <a>newIoTJobAbortCriteria</a> smart constructor.
data IoTJobAbortCriteria
IoTJobAbortCriteria' :: IoTJobExecutionFailureType -> IoTJobAbortAction -> Double -> Natural -> IoTJobAbortCriteria

-- | The type of job deployment failure that can cancel a job.
[$sel:failureType:IoTJobAbortCriteria'] :: IoTJobAbortCriteria -> IoTJobExecutionFailureType

-- | The action to perform when the criteria are met.
[$sel:action:IoTJobAbortCriteria'] :: IoTJobAbortCriteria -> IoTJobAbortAction

-- | The minimum percentage of <tt>failureType</tt> failures that occur
--   before the job can cancel.
--   
--   This parameter supports up to two digits after the decimal (for
--   example, you can specify <tt>10.9</tt> or <tt>10.99</tt>, but not
--   <tt>10.999</tt>).
[$sel:thresholdPercentage:IoTJobAbortCriteria'] :: IoTJobAbortCriteria -> Double

-- | The minimum number of things that receive the configuration before the
--   job can cancel.
[$sel:minNumberOfExecutedThings:IoTJobAbortCriteria'] :: IoTJobAbortCriteria -> Natural

-- | Create a value of <a>IoTJobAbortCriteria</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failureType:IoTJobAbortCriteria'</a>,
--   <a>ioTJobAbortCriteria_failureType</a> - The type of job deployment
--   failure that can cancel a job.
--   
--   <a>$sel:action:IoTJobAbortCriteria'</a>,
--   <a>ioTJobAbortCriteria_action</a> - The action to perform when the
--   criteria are met.
--   
--   <a>$sel:thresholdPercentage:IoTJobAbortCriteria'</a>,
--   <a>ioTJobAbortCriteria_thresholdPercentage</a> - The minimum
--   percentage of <tt>failureType</tt> failures that occur before the job
--   can cancel.
--   
--   This parameter supports up to two digits after the decimal (for
--   example, you can specify <tt>10.9</tt> or <tt>10.99</tt>, but not
--   <tt>10.999</tt>).
--   
--   <a>$sel:minNumberOfExecutedThings:IoTJobAbortCriteria'</a>,
--   <a>ioTJobAbortCriteria_minNumberOfExecutedThings</a> - The minimum
--   number of things that receive the configuration before the job can
--   cancel.
newIoTJobAbortCriteria :: IoTJobExecutionFailureType -> IoTJobAbortAction -> Double -> Natural -> IoTJobAbortCriteria

-- | The type of job deployment failure that can cancel a job.
ioTJobAbortCriteria_failureType :: Lens' IoTJobAbortCriteria IoTJobExecutionFailureType

-- | The action to perform when the criteria are met.
ioTJobAbortCriteria_action :: Lens' IoTJobAbortCriteria IoTJobAbortAction

-- | The minimum percentage of <tt>failureType</tt> failures that occur
--   before the job can cancel.
--   
--   This parameter supports up to two digits after the decimal (for
--   example, you can specify <tt>10.9</tt> or <tt>10.99</tt>, but not
--   <tt>10.999</tt>).
ioTJobAbortCriteria_thresholdPercentage :: Lens' IoTJobAbortCriteria Double

-- | The minimum number of things that receive the configuration before the
--   job can cancel.
ioTJobAbortCriteria_minNumberOfExecutedThings :: Lens' IoTJobAbortCriteria Natural
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.IoTJobAbortCriteria.IoTJobAbortCriteria
instance GHC.Show.Show Amazonka.GreengrassV2.Types.IoTJobAbortCriteria.IoTJobAbortCriteria
instance GHC.Read.Read Amazonka.GreengrassV2.Types.IoTJobAbortCriteria.IoTJobAbortCriteria
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.IoTJobAbortCriteria.IoTJobAbortCriteria
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.IoTJobAbortCriteria.IoTJobAbortCriteria
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.IoTJobAbortCriteria.IoTJobAbortCriteria
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.IoTJobAbortCriteria.IoTJobAbortCriteria
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.Types.IoTJobAbortCriteria.IoTJobAbortCriteria


module Amazonka.GreengrassV2.Types.IoTJobAbortConfig

-- | Contains a list of criteria that define when and how to cancel a
--   configuration deployment.
--   
--   <i>See:</i> <a>newIoTJobAbortConfig</a> smart constructor.
data IoTJobAbortConfig
IoTJobAbortConfig' :: NonEmpty IoTJobAbortCriteria -> IoTJobAbortConfig

-- | The list of criteria that define when and how to cancel the
--   configuration deployment.
[$sel:criteriaList:IoTJobAbortConfig'] :: IoTJobAbortConfig -> NonEmpty IoTJobAbortCriteria

-- | Create a value of <a>IoTJobAbortConfig</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:criteriaList:IoTJobAbortConfig'</a>,
--   <a>ioTJobAbortConfig_criteriaList</a> - The list of criteria that
--   define when and how to cancel the configuration deployment.
newIoTJobAbortConfig :: NonEmpty IoTJobAbortCriteria -> IoTJobAbortConfig

-- | The list of criteria that define when and how to cancel the
--   configuration deployment.
ioTJobAbortConfig_criteriaList :: Lens' IoTJobAbortConfig (NonEmpty IoTJobAbortCriteria)
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.IoTJobAbortConfig.IoTJobAbortConfig
instance GHC.Show.Show Amazonka.GreengrassV2.Types.IoTJobAbortConfig.IoTJobAbortConfig
instance GHC.Read.Read Amazonka.GreengrassV2.Types.IoTJobAbortConfig.IoTJobAbortConfig
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.IoTJobAbortConfig.IoTJobAbortConfig
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.IoTJobAbortConfig.IoTJobAbortConfig
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.IoTJobAbortConfig.IoTJobAbortConfig
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.IoTJobAbortConfig.IoTJobAbortConfig
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.Types.IoTJobAbortConfig.IoTJobAbortConfig


module Amazonka.GreengrassV2.Types.IoTJobRateIncreaseCriteria

-- | Contains information about criteria to meet before a job increases its
--   rollout rate. Specify either <tt>numberOfNotifiedThings</tt> or
--   <tt>numberOfSucceededThings</tt>.
--   
--   <i>See:</i> <a>newIoTJobRateIncreaseCriteria</a> smart constructor.
data IoTJobRateIncreaseCriteria
IoTJobRateIncreaseCriteria' :: Maybe Natural -> Maybe Natural -> IoTJobRateIncreaseCriteria

-- | The number of devices to receive the job notification before the
--   rollout rate increases.
[$sel:numberOfNotifiedThings:IoTJobRateIncreaseCriteria'] :: IoTJobRateIncreaseCriteria -> Maybe Natural

-- | The number of devices to successfully run the configuration job before
--   the rollout rate increases.
[$sel:numberOfSucceededThings:IoTJobRateIncreaseCriteria'] :: IoTJobRateIncreaseCriteria -> Maybe Natural

-- | Create a value of <a>IoTJobRateIncreaseCriteria</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:numberOfNotifiedThings:IoTJobRateIncreaseCriteria'</a>,
--   <a>ioTJobRateIncreaseCriteria_numberOfNotifiedThings</a> - The number
--   of devices to receive the job notification before the rollout rate
--   increases.
--   
--   <a>$sel:numberOfSucceededThings:IoTJobRateIncreaseCriteria'</a>,
--   <a>ioTJobRateIncreaseCriteria_numberOfSucceededThings</a> - The number
--   of devices to successfully run the configuration job before the
--   rollout rate increases.
newIoTJobRateIncreaseCriteria :: IoTJobRateIncreaseCriteria

-- | The number of devices to receive the job notification before the
--   rollout rate increases.
ioTJobRateIncreaseCriteria_numberOfNotifiedThings :: Lens' IoTJobRateIncreaseCriteria (Maybe Natural)

-- | The number of devices to successfully run the configuration job before
--   the rollout rate increases.
ioTJobRateIncreaseCriteria_numberOfSucceededThings :: Lens' IoTJobRateIncreaseCriteria (Maybe Natural)
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.IoTJobRateIncreaseCriteria.IoTJobRateIncreaseCriteria
instance GHC.Show.Show Amazonka.GreengrassV2.Types.IoTJobRateIncreaseCriteria.IoTJobRateIncreaseCriteria
instance GHC.Read.Read Amazonka.GreengrassV2.Types.IoTJobRateIncreaseCriteria.IoTJobRateIncreaseCriteria
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.IoTJobRateIncreaseCriteria.IoTJobRateIncreaseCriteria
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.IoTJobRateIncreaseCriteria.IoTJobRateIncreaseCriteria
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.IoTJobRateIncreaseCriteria.IoTJobRateIncreaseCriteria
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.IoTJobRateIncreaseCriteria.IoTJobRateIncreaseCriteria
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.Types.IoTJobRateIncreaseCriteria.IoTJobRateIncreaseCriteria


module Amazonka.GreengrassV2.Types.IoTJobExponentialRolloutRate

-- | Contains information about an exponential rollout rate for a
--   configuration deployment job.
--   
--   <i>See:</i> <a>newIoTJobExponentialRolloutRate</a> smart constructor.
data IoTJobExponentialRolloutRate
IoTJobExponentialRolloutRate' :: Natural -> Double -> IoTJobRateIncreaseCriteria -> IoTJobExponentialRolloutRate

-- | The minimum number of devices that receive a pending job notification,
--   per minute, when the job starts. This parameter defines the initial
--   rollout rate of the job.
[$sel:baseRatePerMinute:IoTJobExponentialRolloutRate'] :: IoTJobExponentialRolloutRate -> Natural

-- | The exponential factor to increase the rollout rate for the job.
--   
--   This parameter supports up to one digit after the decimal (for
--   example, you can specify <tt>1.5</tt>, but not <tt>1.55</tt>).
[$sel:incrementFactor:IoTJobExponentialRolloutRate'] :: IoTJobExponentialRolloutRate -> Double

-- | The criteria to increase the rollout rate for the job.
[$sel:rateIncreaseCriteria:IoTJobExponentialRolloutRate'] :: IoTJobExponentialRolloutRate -> IoTJobRateIncreaseCriteria

-- | Create a value of <a>IoTJobExponentialRolloutRate</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:baseRatePerMinute:IoTJobExponentialRolloutRate'</a>,
--   <a>ioTJobExponentialRolloutRate_baseRatePerMinute</a> - The minimum
--   number of devices that receive a pending job notification, per minute,
--   when the job starts. This parameter defines the initial rollout rate
--   of the job.
--   
--   <a>$sel:incrementFactor:IoTJobExponentialRolloutRate'</a>,
--   <a>ioTJobExponentialRolloutRate_incrementFactor</a> - The exponential
--   factor to increase the rollout rate for the job.
--   
--   This parameter supports up to one digit after the decimal (for
--   example, you can specify <tt>1.5</tt>, but not <tt>1.55</tt>).
--   
--   <a>$sel:rateIncreaseCriteria:IoTJobExponentialRolloutRate'</a>,
--   <a>ioTJobExponentialRolloutRate_rateIncreaseCriteria</a> - The
--   criteria to increase the rollout rate for the job.
newIoTJobExponentialRolloutRate :: Natural -> Double -> IoTJobRateIncreaseCriteria -> IoTJobExponentialRolloutRate

-- | The minimum number of devices that receive a pending job notification,
--   per minute, when the job starts. This parameter defines the initial
--   rollout rate of the job.
ioTJobExponentialRolloutRate_baseRatePerMinute :: Lens' IoTJobExponentialRolloutRate Natural

-- | The exponential factor to increase the rollout rate for the job.
--   
--   This parameter supports up to one digit after the decimal (for
--   example, you can specify <tt>1.5</tt>, but not <tt>1.55</tt>).
ioTJobExponentialRolloutRate_incrementFactor :: Lens' IoTJobExponentialRolloutRate Double

-- | The criteria to increase the rollout rate for the job.
ioTJobExponentialRolloutRate_rateIncreaseCriteria :: Lens' IoTJobExponentialRolloutRate IoTJobRateIncreaseCriteria
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.IoTJobExponentialRolloutRate.IoTJobExponentialRolloutRate
instance GHC.Show.Show Amazonka.GreengrassV2.Types.IoTJobExponentialRolloutRate.IoTJobExponentialRolloutRate
instance GHC.Read.Read Amazonka.GreengrassV2.Types.IoTJobExponentialRolloutRate.IoTJobExponentialRolloutRate
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.IoTJobExponentialRolloutRate.IoTJobExponentialRolloutRate
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.IoTJobExponentialRolloutRate.IoTJobExponentialRolloutRate
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.IoTJobExponentialRolloutRate.IoTJobExponentialRolloutRate
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.IoTJobExponentialRolloutRate.IoTJobExponentialRolloutRate
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.Types.IoTJobExponentialRolloutRate.IoTJobExponentialRolloutRate


module Amazonka.GreengrassV2.Types.IoTJobExecutionsRolloutConfig

-- | Contains information about the rollout configuration for a job. This
--   configuration defines the rate at which the job deploys a
--   configuration to a fleet of target devices.
--   
--   <i>See:</i> <a>newIoTJobExecutionsRolloutConfig</a> smart constructor.
data IoTJobExecutionsRolloutConfig
IoTJobExecutionsRolloutConfig' :: Maybe IoTJobExponentialRolloutRate -> Maybe Natural -> IoTJobExecutionsRolloutConfig

-- | The exponential rate to increase the job rollout rate.
[$sel:exponentialRate:IoTJobExecutionsRolloutConfig'] :: IoTJobExecutionsRolloutConfig -> Maybe IoTJobExponentialRolloutRate

-- | The maximum number of devices that receive a pending job notification,
--   per minute.
[$sel:maximumPerMinute:IoTJobExecutionsRolloutConfig'] :: IoTJobExecutionsRolloutConfig -> Maybe Natural

-- | Create a value of <a>IoTJobExecutionsRolloutConfig</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:exponentialRate:IoTJobExecutionsRolloutConfig'</a>,
--   <a>ioTJobExecutionsRolloutConfig_exponentialRate</a> - The exponential
--   rate to increase the job rollout rate.
--   
--   <a>$sel:maximumPerMinute:IoTJobExecutionsRolloutConfig'</a>,
--   <a>ioTJobExecutionsRolloutConfig_maximumPerMinute</a> - The maximum
--   number of devices that receive a pending job notification, per minute.
newIoTJobExecutionsRolloutConfig :: IoTJobExecutionsRolloutConfig

-- | The exponential rate to increase the job rollout rate.
ioTJobExecutionsRolloutConfig_exponentialRate :: Lens' IoTJobExecutionsRolloutConfig (Maybe IoTJobExponentialRolloutRate)

-- | The maximum number of devices that receive a pending job notification,
--   per minute.
ioTJobExecutionsRolloutConfig_maximumPerMinute :: Lens' IoTJobExecutionsRolloutConfig (Maybe Natural)
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.IoTJobExecutionsRolloutConfig.IoTJobExecutionsRolloutConfig
instance GHC.Show.Show Amazonka.GreengrassV2.Types.IoTJobExecutionsRolloutConfig.IoTJobExecutionsRolloutConfig
instance GHC.Read.Read Amazonka.GreengrassV2.Types.IoTJobExecutionsRolloutConfig.IoTJobExecutionsRolloutConfig
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.IoTJobExecutionsRolloutConfig.IoTJobExecutionsRolloutConfig
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.IoTJobExecutionsRolloutConfig.IoTJobExecutionsRolloutConfig
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.IoTJobExecutionsRolloutConfig.IoTJobExecutionsRolloutConfig
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.IoTJobExecutionsRolloutConfig.IoTJobExecutionsRolloutConfig
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.Types.IoTJobExecutionsRolloutConfig.IoTJobExecutionsRolloutConfig


module Amazonka.GreengrassV2.Types.IoTJobTimeoutConfig

-- | Contains information about the timeout configuration for a job.
--   
--   <i>See:</i> <a>newIoTJobTimeoutConfig</a> smart constructor.
data IoTJobTimeoutConfig
IoTJobTimeoutConfig' :: Maybe Integer -> IoTJobTimeoutConfig

-- | The amount of time, in minutes, that devices have to complete the job.
--   The timer starts when the job status is set to <tt>IN_PROGRESS</tt>.
--   If the job status doesn't change to a terminal state before the time
--   expires, then the job status is set to <tt>TIMED_OUT</tt>.
--   
--   The timeout interval must be between 1 minute and 7 days (10080
--   minutes).
[$sel:inProgressTimeoutInMinutes:IoTJobTimeoutConfig'] :: IoTJobTimeoutConfig -> Maybe Integer

-- | Create a value of <a>IoTJobTimeoutConfig</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:inProgressTimeoutInMinutes:IoTJobTimeoutConfig'</a>,
--   <a>ioTJobTimeoutConfig_inProgressTimeoutInMinutes</a> - The amount of
--   time, in minutes, that devices have to complete the job. The timer
--   starts when the job status is set to <tt>IN_PROGRESS</tt>. If the job
--   status doesn't change to a terminal state before the time expires,
--   then the job status is set to <tt>TIMED_OUT</tt>.
--   
--   The timeout interval must be between 1 minute and 7 days (10080
--   minutes).
newIoTJobTimeoutConfig :: IoTJobTimeoutConfig

-- | The amount of time, in minutes, that devices have to complete the job.
--   The timer starts when the job status is set to <tt>IN_PROGRESS</tt>.
--   If the job status doesn't change to a terminal state before the time
--   expires, then the job status is set to <tt>TIMED_OUT</tt>.
--   
--   The timeout interval must be between 1 minute and 7 days (10080
--   minutes).
ioTJobTimeoutConfig_inProgressTimeoutInMinutes :: Lens' IoTJobTimeoutConfig (Maybe Integer)
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.IoTJobTimeoutConfig.IoTJobTimeoutConfig
instance GHC.Show.Show Amazonka.GreengrassV2.Types.IoTJobTimeoutConfig.IoTJobTimeoutConfig
instance GHC.Read.Read Amazonka.GreengrassV2.Types.IoTJobTimeoutConfig.IoTJobTimeoutConfig
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.IoTJobTimeoutConfig.IoTJobTimeoutConfig
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.IoTJobTimeoutConfig.IoTJobTimeoutConfig
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.IoTJobTimeoutConfig.IoTJobTimeoutConfig
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.IoTJobTimeoutConfig.IoTJobTimeoutConfig
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.Types.IoTJobTimeoutConfig.IoTJobTimeoutConfig


module Amazonka.GreengrassV2.Types.DeploymentIoTJobConfiguration

-- | Contains information about an IoT job configuration.
--   
--   <i>See:</i> <a>newDeploymentIoTJobConfiguration</a> smart constructor.
data DeploymentIoTJobConfiguration
DeploymentIoTJobConfiguration' :: Maybe IoTJobExecutionsRolloutConfig -> Maybe IoTJobAbortConfig -> Maybe IoTJobTimeoutConfig -> DeploymentIoTJobConfiguration

-- | The rollout configuration for the job. This configuration defines the
--   rate at which the job rolls out to the fleet of target devices.
[$sel:jobExecutionsRolloutConfig:DeploymentIoTJobConfiguration'] :: DeploymentIoTJobConfiguration -> Maybe IoTJobExecutionsRolloutConfig

-- | The stop configuration for the job. This configuration defines when
--   and how to stop a job rollout.
[$sel:abortConfig:DeploymentIoTJobConfiguration'] :: DeploymentIoTJobConfiguration -> Maybe IoTJobAbortConfig

-- | The timeout configuration for the job. This configuration defines the
--   amount of time each device has to complete the job.
[$sel:timeoutConfig:DeploymentIoTJobConfiguration'] :: DeploymentIoTJobConfiguration -> Maybe IoTJobTimeoutConfig

-- | Create a value of <a>DeploymentIoTJobConfiguration</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:jobExecutionsRolloutConfig:DeploymentIoTJobConfiguration'</a>,
--   <a>deploymentIoTJobConfiguration_jobExecutionsRolloutConfig</a> - The
--   rollout configuration for the job. This configuration defines the rate
--   at which the job rolls out to the fleet of target devices.
--   
--   <a>$sel:abortConfig:DeploymentIoTJobConfiguration'</a>,
--   <a>deploymentIoTJobConfiguration_abortConfig</a> - The stop
--   configuration for the job. This configuration defines when and how to
--   stop a job rollout.
--   
--   <a>$sel:timeoutConfig:DeploymentIoTJobConfiguration'</a>,
--   <a>deploymentIoTJobConfiguration_timeoutConfig</a> - The timeout
--   configuration for the job. This configuration defines the amount of
--   time each device has to complete the job.
newDeploymentIoTJobConfiguration :: DeploymentIoTJobConfiguration

-- | The rollout configuration for the job. This configuration defines the
--   rate at which the job rolls out to the fleet of target devices.
deploymentIoTJobConfiguration_jobExecutionsRolloutConfig :: Lens' DeploymentIoTJobConfiguration (Maybe IoTJobExecutionsRolloutConfig)

-- | The stop configuration for the job. This configuration defines when
--   and how to stop a job rollout.
deploymentIoTJobConfiguration_abortConfig :: Lens' DeploymentIoTJobConfiguration (Maybe IoTJobAbortConfig)

-- | The timeout configuration for the job. This configuration defines the
--   amount of time each device has to complete the job.
deploymentIoTJobConfiguration_timeoutConfig :: Lens' DeploymentIoTJobConfiguration (Maybe IoTJobTimeoutConfig)
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.DeploymentIoTJobConfiguration.DeploymentIoTJobConfiguration
instance GHC.Show.Show Amazonka.GreengrassV2.Types.DeploymentIoTJobConfiguration.DeploymentIoTJobConfiguration
instance GHC.Read.Read Amazonka.GreengrassV2.Types.DeploymentIoTJobConfiguration.DeploymentIoTJobConfiguration
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.DeploymentIoTJobConfiguration.DeploymentIoTJobConfiguration
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.DeploymentIoTJobConfiguration.DeploymentIoTJobConfiguration
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.DeploymentIoTJobConfiguration.DeploymentIoTJobConfiguration
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.DeploymentIoTJobConfiguration.DeploymentIoTJobConfiguration
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.Types.DeploymentIoTJobConfiguration.DeploymentIoTJobConfiguration


module Amazonka.GreengrassV2.Types.LambdaEventSourceType
newtype LambdaEventSourceType
LambdaEventSourceType' :: Text -> LambdaEventSourceType
[fromLambdaEventSourceType] :: LambdaEventSourceType -> Text
pattern LambdaEventSourceType_IOT_CORE :: LambdaEventSourceType
pattern LambdaEventSourceType_PUB_SUB :: LambdaEventSourceType
instance Amazonka.Data.XML.ToXML Amazonka.GreengrassV2.Types.LambdaEventSourceType.LambdaEventSourceType
instance Amazonka.Data.XML.FromXML Amazonka.GreengrassV2.Types.LambdaEventSourceType.LambdaEventSourceType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.GreengrassV2.Types.LambdaEventSourceType.LambdaEventSourceType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.Types.LambdaEventSourceType.LambdaEventSourceType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.GreengrassV2.Types.LambdaEventSourceType.LambdaEventSourceType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.LambdaEventSourceType.LambdaEventSourceType
instance Amazonka.Data.Query.ToQuery Amazonka.GreengrassV2.Types.LambdaEventSourceType.LambdaEventSourceType
instance Amazonka.Data.Headers.ToHeader Amazonka.GreengrassV2.Types.LambdaEventSourceType.LambdaEventSourceType
instance Amazonka.Data.Log.ToLog Amazonka.GreengrassV2.Types.LambdaEventSourceType.LambdaEventSourceType
instance Amazonka.Data.ByteString.ToByteString Amazonka.GreengrassV2.Types.LambdaEventSourceType.LambdaEventSourceType
instance Amazonka.Data.Text.ToText Amazonka.GreengrassV2.Types.LambdaEventSourceType.LambdaEventSourceType
instance Amazonka.Data.Text.FromText Amazonka.GreengrassV2.Types.LambdaEventSourceType.LambdaEventSourceType
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.LambdaEventSourceType.LambdaEventSourceType
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.LambdaEventSourceType.LambdaEventSourceType
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.LambdaEventSourceType.LambdaEventSourceType
instance GHC.Classes.Ord Amazonka.GreengrassV2.Types.LambdaEventSourceType.LambdaEventSourceType
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.LambdaEventSourceType.LambdaEventSourceType
instance GHC.Read.Read Amazonka.GreengrassV2.Types.LambdaEventSourceType.LambdaEventSourceType
instance GHC.Show.Show Amazonka.GreengrassV2.Types.LambdaEventSourceType.LambdaEventSourceType


module Amazonka.GreengrassV2.Types.LambdaEventSource

-- | Contains information about an event source for an Lambda function. The
--   event source defines the topics on which this Lambda function
--   subscribes to receive messages that run the function.
--   
--   <i>See:</i> <a>newLambdaEventSource</a> smart constructor.
data LambdaEventSource
LambdaEventSource' :: Text -> LambdaEventSourceType -> LambdaEventSource

-- | The topic to which to subscribe to receive event messages.
[$sel:topic:LambdaEventSource'] :: LambdaEventSource -> Text

-- | The type of event source. Choose from the following options:
--   
--   <ul>
--   <li><tt>PUB_SUB</tt> – Subscribe to local publish/subscribe messages.
--   This event source type doesn't support MQTT wildcards (<tt>+</tt> and
--   <tt>#</tt>) in the event source topic.</li>
--   <li><tt>IOT_CORE</tt> – Subscribe to Amazon Web Services IoT Core MQTT
--   messages. This event source type supports MQTT wildcards (<tt>+</tt>
--   and <tt>#</tt>) in the event source topic.</li>
--   </ul>
[$sel:type':LambdaEventSource'] :: LambdaEventSource -> LambdaEventSourceType

-- | Create a value of <a>LambdaEventSource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:topic:LambdaEventSource'</a>, <a>lambdaEventSource_topic</a> -
--   The topic to which to subscribe to receive event messages.
--   
--   <a>$sel:type':LambdaEventSource'</a>, <a>lambdaEventSource_type</a> -
--   The type of event source. Choose from the following options:
--   
--   <ul>
--   <li><tt>PUB_SUB</tt> – Subscribe to local publish/subscribe messages.
--   This event source type doesn't support MQTT wildcards (<tt>+</tt> and
--   <tt>#</tt>) in the event source topic.</li>
--   <li><tt>IOT_CORE</tt> – Subscribe to Amazon Web Services IoT Core MQTT
--   messages. This event source type supports MQTT wildcards (<tt>+</tt>
--   and <tt>#</tt>) in the event source topic.</li>
--   </ul>
newLambdaEventSource :: Text -> LambdaEventSourceType -> LambdaEventSource

-- | The topic to which to subscribe to receive event messages.
lambdaEventSource_topic :: Lens' LambdaEventSource Text

-- | The type of event source. Choose from the following options:
--   
--   <ul>
--   <li><tt>PUB_SUB</tt> – Subscribe to local publish/subscribe messages.
--   This event source type doesn't support MQTT wildcards (<tt>+</tt> and
--   <tt>#</tt>) in the event source topic.</li>
--   <li><tt>IOT_CORE</tt> – Subscribe to Amazon Web Services IoT Core MQTT
--   messages. This event source type supports MQTT wildcards (<tt>+</tt>
--   and <tt>#</tt>) in the event source topic.</li>
--   </ul>
lambdaEventSource_type :: Lens' LambdaEventSource LambdaEventSourceType
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.LambdaEventSource.LambdaEventSource
instance GHC.Show.Show Amazonka.GreengrassV2.Types.LambdaEventSource.LambdaEventSource
instance GHC.Read.Read Amazonka.GreengrassV2.Types.LambdaEventSource.LambdaEventSource
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.LambdaEventSource.LambdaEventSource
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.LambdaEventSource.LambdaEventSource
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.LambdaEventSource.LambdaEventSource
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.Types.LambdaEventSource.LambdaEventSource


module Amazonka.GreengrassV2.Types.LambdaFilesystemPermission
newtype LambdaFilesystemPermission
LambdaFilesystemPermission' :: Text -> LambdaFilesystemPermission
[fromLambdaFilesystemPermission] :: LambdaFilesystemPermission -> Text
pattern LambdaFilesystemPermission_Ro :: LambdaFilesystemPermission
pattern LambdaFilesystemPermission_Rw :: LambdaFilesystemPermission
instance Amazonka.Data.XML.ToXML Amazonka.GreengrassV2.Types.LambdaFilesystemPermission.LambdaFilesystemPermission
instance Amazonka.Data.XML.FromXML Amazonka.GreengrassV2.Types.LambdaFilesystemPermission.LambdaFilesystemPermission
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.GreengrassV2.Types.LambdaFilesystemPermission.LambdaFilesystemPermission
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.Types.LambdaFilesystemPermission.LambdaFilesystemPermission
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.GreengrassV2.Types.LambdaFilesystemPermission.LambdaFilesystemPermission
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.LambdaFilesystemPermission.LambdaFilesystemPermission
instance Amazonka.Data.Query.ToQuery Amazonka.GreengrassV2.Types.LambdaFilesystemPermission.LambdaFilesystemPermission
instance Amazonka.Data.Headers.ToHeader Amazonka.GreengrassV2.Types.LambdaFilesystemPermission.LambdaFilesystemPermission
instance Amazonka.Data.Log.ToLog Amazonka.GreengrassV2.Types.LambdaFilesystemPermission.LambdaFilesystemPermission
instance Amazonka.Data.ByteString.ToByteString Amazonka.GreengrassV2.Types.LambdaFilesystemPermission.LambdaFilesystemPermission
instance Amazonka.Data.Text.ToText Amazonka.GreengrassV2.Types.LambdaFilesystemPermission.LambdaFilesystemPermission
instance Amazonka.Data.Text.FromText Amazonka.GreengrassV2.Types.LambdaFilesystemPermission.LambdaFilesystemPermission
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.LambdaFilesystemPermission.LambdaFilesystemPermission
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.LambdaFilesystemPermission.LambdaFilesystemPermission
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.LambdaFilesystemPermission.LambdaFilesystemPermission
instance GHC.Classes.Ord Amazonka.GreengrassV2.Types.LambdaFilesystemPermission.LambdaFilesystemPermission
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.LambdaFilesystemPermission.LambdaFilesystemPermission
instance GHC.Read.Read Amazonka.GreengrassV2.Types.LambdaFilesystemPermission.LambdaFilesystemPermission
instance GHC.Show.Show Amazonka.GreengrassV2.Types.LambdaFilesystemPermission.LambdaFilesystemPermission


module Amazonka.GreengrassV2.Types.LambdaDeviceMount

-- | Contains information about a device that Linux processes in a
--   container can access.
--   
--   <i>See:</i> <a>newLambdaDeviceMount</a> smart constructor.
data LambdaDeviceMount
LambdaDeviceMount' :: Maybe Bool -> Maybe LambdaFilesystemPermission -> Text -> LambdaDeviceMount

-- | Whether or not to add the component's system user as an owner of the
--   device.
--   
--   Default: <tt>false</tt>
[$sel:addGroupOwner:LambdaDeviceMount'] :: LambdaDeviceMount -> Maybe Bool

-- | The permission to access the device: read/only (<tt>ro</tt>) or
--   read/write (<tt>rw</tt>).
--   
--   Default: <tt>ro</tt>
[$sel:permission:LambdaDeviceMount'] :: LambdaDeviceMount -> Maybe LambdaFilesystemPermission

-- | The mount path for the device in the file system.
[$sel:path:LambdaDeviceMount'] :: LambdaDeviceMount -> Text

-- | Create a value of <a>LambdaDeviceMount</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:addGroupOwner:LambdaDeviceMount'</a>,
--   <a>lambdaDeviceMount_addGroupOwner</a> - Whether or not to add the
--   component's system user as an owner of the device.
--   
--   Default: <tt>false</tt>
--   
--   <a>$sel:permission:LambdaDeviceMount'</a>,
--   <a>lambdaDeviceMount_permission</a> - The permission to access the
--   device: read/only (<tt>ro</tt>) or read/write (<tt>rw</tt>).
--   
--   Default: <tt>ro</tt>
--   
--   <a>$sel:path:LambdaDeviceMount'</a>, <a>lambdaDeviceMount_path</a> -
--   The mount path for the device in the file system.
newLambdaDeviceMount :: Text -> LambdaDeviceMount

-- | Whether or not to add the component's system user as an owner of the
--   device.
--   
--   Default: <tt>false</tt>
lambdaDeviceMount_addGroupOwner :: Lens' LambdaDeviceMount (Maybe Bool)

-- | The permission to access the device: read/only (<tt>ro</tt>) or
--   read/write (<tt>rw</tt>).
--   
--   Default: <tt>ro</tt>
lambdaDeviceMount_permission :: Lens' LambdaDeviceMount (Maybe LambdaFilesystemPermission)

-- | The mount path for the device in the file system.
lambdaDeviceMount_path :: Lens' LambdaDeviceMount Text
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.LambdaDeviceMount.LambdaDeviceMount
instance GHC.Show.Show Amazonka.GreengrassV2.Types.LambdaDeviceMount.LambdaDeviceMount
instance GHC.Read.Read Amazonka.GreengrassV2.Types.LambdaDeviceMount.LambdaDeviceMount
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.LambdaDeviceMount.LambdaDeviceMount
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.LambdaDeviceMount.LambdaDeviceMount
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.LambdaDeviceMount.LambdaDeviceMount
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.Types.LambdaDeviceMount.LambdaDeviceMount


module Amazonka.GreengrassV2.Types.LambdaInputPayloadEncodingType
newtype LambdaInputPayloadEncodingType
LambdaInputPayloadEncodingType' :: Text -> LambdaInputPayloadEncodingType
[fromLambdaInputPayloadEncodingType] :: LambdaInputPayloadEncodingType -> Text
pattern LambdaInputPayloadEncodingType_Binary :: LambdaInputPayloadEncodingType
pattern LambdaInputPayloadEncodingType_Json :: LambdaInputPayloadEncodingType
instance Amazonka.Data.XML.ToXML Amazonka.GreengrassV2.Types.LambdaInputPayloadEncodingType.LambdaInputPayloadEncodingType
instance Amazonka.Data.XML.FromXML Amazonka.GreengrassV2.Types.LambdaInputPayloadEncodingType.LambdaInputPayloadEncodingType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.GreengrassV2.Types.LambdaInputPayloadEncodingType.LambdaInputPayloadEncodingType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.Types.LambdaInputPayloadEncodingType.LambdaInputPayloadEncodingType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.GreengrassV2.Types.LambdaInputPayloadEncodingType.LambdaInputPayloadEncodingType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.LambdaInputPayloadEncodingType.LambdaInputPayloadEncodingType
instance Amazonka.Data.Query.ToQuery Amazonka.GreengrassV2.Types.LambdaInputPayloadEncodingType.LambdaInputPayloadEncodingType
instance Amazonka.Data.Headers.ToHeader Amazonka.GreengrassV2.Types.LambdaInputPayloadEncodingType.LambdaInputPayloadEncodingType
instance Amazonka.Data.Log.ToLog Amazonka.GreengrassV2.Types.LambdaInputPayloadEncodingType.LambdaInputPayloadEncodingType
instance Amazonka.Data.ByteString.ToByteString Amazonka.GreengrassV2.Types.LambdaInputPayloadEncodingType.LambdaInputPayloadEncodingType
instance Amazonka.Data.Text.ToText Amazonka.GreengrassV2.Types.LambdaInputPayloadEncodingType.LambdaInputPayloadEncodingType
instance Amazonka.Data.Text.FromText Amazonka.GreengrassV2.Types.LambdaInputPayloadEncodingType.LambdaInputPayloadEncodingType
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.LambdaInputPayloadEncodingType.LambdaInputPayloadEncodingType
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.LambdaInputPayloadEncodingType.LambdaInputPayloadEncodingType
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.LambdaInputPayloadEncodingType.LambdaInputPayloadEncodingType
instance GHC.Classes.Ord Amazonka.GreengrassV2.Types.LambdaInputPayloadEncodingType.LambdaInputPayloadEncodingType
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.LambdaInputPayloadEncodingType.LambdaInputPayloadEncodingType
instance GHC.Read.Read Amazonka.GreengrassV2.Types.LambdaInputPayloadEncodingType.LambdaInputPayloadEncodingType
instance GHC.Show.Show Amazonka.GreengrassV2.Types.LambdaInputPayloadEncodingType.LambdaInputPayloadEncodingType


module Amazonka.GreengrassV2.Types.LambdaIsolationMode
newtype LambdaIsolationMode
LambdaIsolationMode' :: Text -> LambdaIsolationMode
[fromLambdaIsolationMode] :: LambdaIsolationMode -> Text
pattern LambdaIsolationMode_GreengrassContainer :: LambdaIsolationMode
pattern LambdaIsolationMode_NoContainer :: LambdaIsolationMode
instance Amazonka.Data.XML.ToXML Amazonka.GreengrassV2.Types.LambdaIsolationMode.LambdaIsolationMode
instance Amazonka.Data.XML.FromXML Amazonka.GreengrassV2.Types.LambdaIsolationMode.LambdaIsolationMode
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.GreengrassV2.Types.LambdaIsolationMode.LambdaIsolationMode
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.Types.LambdaIsolationMode.LambdaIsolationMode
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.GreengrassV2.Types.LambdaIsolationMode.LambdaIsolationMode
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.LambdaIsolationMode.LambdaIsolationMode
instance Amazonka.Data.Query.ToQuery Amazonka.GreengrassV2.Types.LambdaIsolationMode.LambdaIsolationMode
instance Amazonka.Data.Headers.ToHeader Amazonka.GreengrassV2.Types.LambdaIsolationMode.LambdaIsolationMode
instance Amazonka.Data.Log.ToLog Amazonka.GreengrassV2.Types.LambdaIsolationMode.LambdaIsolationMode
instance Amazonka.Data.ByteString.ToByteString Amazonka.GreengrassV2.Types.LambdaIsolationMode.LambdaIsolationMode
instance Amazonka.Data.Text.ToText Amazonka.GreengrassV2.Types.LambdaIsolationMode.LambdaIsolationMode
instance Amazonka.Data.Text.FromText Amazonka.GreengrassV2.Types.LambdaIsolationMode.LambdaIsolationMode
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.LambdaIsolationMode.LambdaIsolationMode
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.LambdaIsolationMode.LambdaIsolationMode
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.LambdaIsolationMode.LambdaIsolationMode
instance GHC.Classes.Ord Amazonka.GreengrassV2.Types.LambdaIsolationMode.LambdaIsolationMode
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.LambdaIsolationMode.LambdaIsolationMode
instance GHC.Read.Read Amazonka.GreengrassV2.Types.LambdaIsolationMode.LambdaIsolationMode
instance GHC.Show.Show Amazonka.GreengrassV2.Types.LambdaIsolationMode.LambdaIsolationMode


module Amazonka.GreengrassV2.Types.LambdaVolumeMount

-- | Contains information about a volume that Linux processes in a
--   container can access. When you define a volume, the IoT Greengrass
--   Core software mounts the source files to the destination inside the
--   container.
--   
--   <i>See:</i> <a>newLambdaVolumeMount</a> smart constructor.
data LambdaVolumeMount
LambdaVolumeMount' :: Maybe Bool -> Maybe LambdaFilesystemPermission -> Text -> Text -> LambdaVolumeMount

-- | Whether or not to add the IoT Greengrass user group as an owner of the
--   volume.
--   
--   Default: <tt>false</tt>
[$sel:addGroupOwner:LambdaVolumeMount'] :: LambdaVolumeMount -> Maybe Bool

-- | The permission to access the volume: read/only (<tt>ro</tt>) or
--   read/write (<tt>rw</tt>).
--   
--   Default: <tt>ro</tt>
[$sel:permission:LambdaVolumeMount'] :: LambdaVolumeMount -> Maybe LambdaFilesystemPermission

-- | The path to the physical volume in the file system.
[$sel:sourcePath:LambdaVolumeMount'] :: LambdaVolumeMount -> Text

-- | The path to the logical volume in the file system.
[$sel:destinationPath:LambdaVolumeMount'] :: LambdaVolumeMount -> Text

-- | Create a value of <a>LambdaVolumeMount</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:addGroupOwner:LambdaVolumeMount'</a>,
--   <a>lambdaVolumeMount_addGroupOwner</a> - Whether or not to add the IoT
--   Greengrass user group as an owner of the volume.
--   
--   Default: <tt>false</tt>
--   
--   <a>$sel:permission:LambdaVolumeMount'</a>,
--   <a>lambdaVolumeMount_permission</a> - The permission to access the
--   volume: read/only (<tt>ro</tt>) or read/write (<tt>rw</tt>).
--   
--   Default: <tt>ro</tt>
--   
--   <a>$sel:sourcePath:LambdaVolumeMount'</a>,
--   <a>lambdaVolumeMount_sourcePath</a> - The path to the physical volume
--   in the file system.
--   
--   <a>$sel:destinationPath:LambdaVolumeMount'</a>,
--   <a>lambdaVolumeMount_destinationPath</a> - The path to the logical
--   volume in the file system.
newLambdaVolumeMount :: Text -> Text -> LambdaVolumeMount

-- | Whether or not to add the IoT Greengrass user group as an owner of the
--   volume.
--   
--   Default: <tt>false</tt>
lambdaVolumeMount_addGroupOwner :: Lens' LambdaVolumeMount (Maybe Bool)

-- | The permission to access the volume: read/only (<tt>ro</tt>) or
--   read/write (<tt>rw</tt>).
--   
--   Default: <tt>ro</tt>
lambdaVolumeMount_permission :: Lens' LambdaVolumeMount (Maybe LambdaFilesystemPermission)

-- | The path to the physical volume in the file system.
lambdaVolumeMount_sourcePath :: Lens' LambdaVolumeMount Text

-- | The path to the logical volume in the file system.
lambdaVolumeMount_destinationPath :: Lens' LambdaVolumeMount Text
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.LambdaVolumeMount.LambdaVolumeMount
instance GHC.Show.Show Amazonka.GreengrassV2.Types.LambdaVolumeMount.LambdaVolumeMount
instance GHC.Read.Read Amazonka.GreengrassV2.Types.LambdaVolumeMount.LambdaVolumeMount
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.LambdaVolumeMount.LambdaVolumeMount
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.LambdaVolumeMount.LambdaVolumeMount
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.LambdaVolumeMount.LambdaVolumeMount
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.Types.LambdaVolumeMount.LambdaVolumeMount


module Amazonka.GreengrassV2.Types.LambdaContainerParams

-- | Contains information about a container in which Lambda functions run
--   on Greengrass core devices.
--   
--   <i>See:</i> <a>newLambdaContainerParams</a> smart constructor.
data LambdaContainerParams
LambdaContainerParams' :: Maybe Bool -> Maybe Int -> Maybe [LambdaDeviceMount] -> Maybe [LambdaVolumeMount] -> LambdaContainerParams

-- | Whether or not the container can read information from the device's
--   <tt>/sys</tt> folder.
--   
--   Default: <tt>false</tt>
[$sel:mountROSysfs:LambdaContainerParams'] :: LambdaContainerParams -> Maybe Bool

-- | The memory size of the container, expressed in kilobytes.
--   
--   Default: <tt>16384</tt> (16 MB)
[$sel:memorySizeInKB:LambdaContainerParams'] :: LambdaContainerParams -> Maybe Int

-- | The list of system devices that the container can access.
[$sel:devices:LambdaContainerParams'] :: LambdaContainerParams -> Maybe [LambdaDeviceMount]

-- | The list of volumes that the container can access.
[$sel:volumes:LambdaContainerParams'] :: LambdaContainerParams -> Maybe [LambdaVolumeMount]

-- | Create a value of <a>LambdaContainerParams</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:mountROSysfs:LambdaContainerParams'</a>,
--   <a>lambdaContainerParams_mountROSysfs</a> - Whether or not the
--   container can read information from the device's <tt>/sys</tt> folder.
--   
--   Default: <tt>false</tt>
--   
--   <a>$sel:memorySizeInKB:LambdaContainerParams'</a>,
--   <a>lambdaContainerParams_memorySizeInKB</a> - The memory size of the
--   container, expressed in kilobytes.
--   
--   Default: <tt>16384</tt> (16 MB)
--   
--   <a>$sel:devices:LambdaContainerParams'</a>,
--   <a>lambdaContainerParams_devices</a> - The list of system devices that
--   the container can access.
--   
--   <a>$sel:volumes:LambdaContainerParams'</a>,
--   <a>lambdaContainerParams_volumes</a> - The list of volumes that the
--   container can access.
newLambdaContainerParams :: LambdaContainerParams

-- | Whether or not the container can read information from the device's
--   <tt>/sys</tt> folder.
--   
--   Default: <tt>false</tt>
lambdaContainerParams_mountROSysfs :: Lens' LambdaContainerParams (Maybe Bool)

-- | The memory size of the container, expressed in kilobytes.
--   
--   Default: <tt>16384</tt> (16 MB)
lambdaContainerParams_memorySizeInKB :: Lens' LambdaContainerParams (Maybe Int)

-- | The list of system devices that the container can access.
lambdaContainerParams_devices :: Lens' LambdaContainerParams (Maybe [LambdaDeviceMount])

-- | The list of volumes that the container can access.
lambdaContainerParams_volumes :: Lens' LambdaContainerParams (Maybe [LambdaVolumeMount])
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.LambdaContainerParams.LambdaContainerParams
instance GHC.Show.Show Amazonka.GreengrassV2.Types.LambdaContainerParams.LambdaContainerParams
instance GHC.Read.Read Amazonka.GreengrassV2.Types.LambdaContainerParams.LambdaContainerParams
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.LambdaContainerParams.LambdaContainerParams
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.LambdaContainerParams.LambdaContainerParams
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.LambdaContainerParams.LambdaContainerParams
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.Types.LambdaContainerParams.LambdaContainerParams


module Amazonka.GreengrassV2.Types.LambdaLinuxProcessParams

-- | Contains parameters for a Linux process that contains an Lambda
--   function.
--   
--   <i>See:</i> <a>newLambdaLinuxProcessParams</a> smart constructor.
data LambdaLinuxProcessParams
LambdaLinuxProcessParams' :: Maybe LambdaContainerParams -> Maybe LambdaIsolationMode -> LambdaLinuxProcessParams

-- | The parameters for the container in which the Lambda function runs.
[$sel:containerParams:LambdaLinuxProcessParams'] :: LambdaLinuxProcessParams -> Maybe LambdaContainerParams

-- | The isolation mode for the process that contains the Lambda function.
--   The process can run in an isolated runtime environment inside the IoT
--   Greengrass container, or as a regular process outside any container.
--   
--   Default: <tt>GreengrassContainer</tt>
[$sel:isolationMode:LambdaLinuxProcessParams'] :: LambdaLinuxProcessParams -> Maybe LambdaIsolationMode

-- | Create a value of <a>LambdaLinuxProcessParams</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerParams:LambdaLinuxProcessParams'</a>,
--   <a>lambdaLinuxProcessParams_containerParams</a> - The parameters for
--   the container in which the Lambda function runs.
--   
--   <a>$sel:isolationMode:LambdaLinuxProcessParams'</a>,
--   <a>lambdaLinuxProcessParams_isolationMode</a> - The isolation mode for
--   the process that contains the Lambda function. The process can run in
--   an isolated runtime environment inside the IoT Greengrass container,
--   or as a regular process outside any container.
--   
--   Default: <tt>GreengrassContainer</tt>
newLambdaLinuxProcessParams :: LambdaLinuxProcessParams

-- | The parameters for the container in which the Lambda function runs.
lambdaLinuxProcessParams_containerParams :: Lens' LambdaLinuxProcessParams (Maybe LambdaContainerParams)

-- | The isolation mode for the process that contains the Lambda function.
--   The process can run in an isolated runtime environment inside the IoT
--   Greengrass container, or as a regular process outside any container.
--   
--   Default: <tt>GreengrassContainer</tt>
lambdaLinuxProcessParams_isolationMode :: Lens' LambdaLinuxProcessParams (Maybe LambdaIsolationMode)
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.LambdaLinuxProcessParams.LambdaLinuxProcessParams
instance GHC.Show.Show Amazonka.GreengrassV2.Types.LambdaLinuxProcessParams.LambdaLinuxProcessParams
instance GHC.Read.Read Amazonka.GreengrassV2.Types.LambdaLinuxProcessParams.LambdaLinuxProcessParams
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.LambdaLinuxProcessParams.LambdaLinuxProcessParams
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.LambdaLinuxProcessParams.LambdaLinuxProcessParams
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.LambdaLinuxProcessParams.LambdaLinuxProcessParams
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.Types.LambdaLinuxProcessParams.LambdaLinuxProcessParams


module Amazonka.GreengrassV2.Types.LambdaExecutionParameters

-- | Contains parameters for a Lambda function that runs on IoT Greengrass.
--   
--   <i>See:</i> <a>newLambdaExecutionParameters</a> smart constructor.
data LambdaExecutionParameters
LambdaExecutionParameters' :: Maybe [Text] -> Maybe Int -> Maybe Bool -> Maybe LambdaInputPayloadEncodingType -> Maybe Int -> Maybe Int -> Maybe [LambdaEventSource] -> Maybe Int -> Maybe (HashMap Text Text) -> Maybe Int -> Maybe LambdaLinuxProcessParams -> LambdaExecutionParameters

-- | The list of arguments to pass to the Lambda function when it runs.
[$sel:execArgs:LambdaExecutionParameters'] :: LambdaExecutionParameters -> Maybe [Text]

-- | The maximum size of the message queue for the Lambda function
--   component. The IoT Greengrass core stores messages in a FIFO
--   (first-in-first-out) queue until it can run the Lambda function to
--   consume each message.
[$sel:maxQueueSize:LambdaExecutionParameters'] :: LambdaExecutionParameters -> Maybe Int

-- | Whether or not the Lambda function is pinned, or long-lived.
--   
--   <ul>
--   <li>A pinned Lambda function starts when IoT Greengrass starts and
--   keeps running in its own container.</li>
--   <li>A non-pinned Lambda function starts only when it receives a work
--   item and exists after it idles for <tt>maxIdleTimeInSeconds</tt>. If
--   the function has multiple work items, the IoT Greengrass Core software
--   creates multiple instances of the function.</li>
--   </ul>
--   
--   Default: <tt>true</tt>
[$sel:pinned:LambdaExecutionParameters'] :: LambdaExecutionParameters -> Maybe Bool

-- | The encoding type that the Lambda function supports.
--   
--   Default: <tt>json</tt>
[$sel:inputPayloadEncodingType:LambdaExecutionParameters'] :: LambdaExecutionParameters -> Maybe LambdaInputPayloadEncodingType

-- | The maximum amount of time in seconds that a non-pinned Lambda
--   function can idle before the IoT Greengrass Core software stops its
--   process.
[$sel:maxIdleTimeInSeconds:LambdaExecutionParameters'] :: LambdaExecutionParameters -> Maybe Int

-- | The maximum amount of time in seconds that the Lambda function can
--   process a work item.
[$sel:timeoutInSeconds:LambdaExecutionParameters'] :: LambdaExecutionParameters -> Maybe Int

-- | The list of event sources to which to subscribe to receive work
--   messages. The Lambda function runs when it receives a message from an
--   event source. You can subscribe this function to local
--   publish/subscribe messages and Amazon Web Services IoT Core MQTT
--   messages.
[$sel:eventSources:LambdaExecutionParameters'] :: LambdaExecutionParameters -> Maybe [LambdaEventSource]

-- | The maximum number of instances that a non-pinned Lambda function can
--   run at the same time.
[$sel:maxInstancesCount:LambdaExecutionParameters'] :: LambdaExecutionParameters -> Maybe Int

-- | The map of environment variables that are available to the Lambda
--   function when it runs.
[$sel:environmentVariables:LambdaExecutionParameters'] :: LambdaExecutionParameters -> Maybe (HashMap Text Text)

-- | The interval in seconds at which a pinned (also known as long-lived)
--   Lambda function component sends status updates to the Lambda manager
--   component.
[$sel:statusTimeoutInSeconds:LambdaExecutionParameters'] :: LambdaExecutionParameters -> Maybe Int

-- | The parameters for the Linux process that contains the Lambda
--   function.
[$sel:linuxProcessParams:LambdaExecutionParameters'] :: LambdaExecutionParameters -> Maybe LambdaLinuxProcessParams

-- | Create a value of <a>LambdaExecutionParameters</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:execArgs:LambdaExecutionParameters'</a>,
--   <a>lambdaExecutionParameters_execArgs</a> - The list of arguments to
--   pass to the Lambda function when it runs.
--   
--   <a>$sel:maxQueueSize:LambdaExecutionParameters'</a>,
--   <a>lambdaExecutionParameters_maxQueueSize</a> - The maximum size of
--   the message queue for the Lambda function component. The IoT
--   Greengrass core stores messages in a FIFO (first-in-first-out) queue
--   until it can run the Lambda function to consume each message.
--   
--   <a>$sel:pinned:LambdaExecutionParameters'</a>,
--   <a>lambdaExecutionParameters_pinned</a> - Whether or not the Lambda
--   function is pinned, or long-lived.
--   
--   <ul>
--   <li>A pinned Lambda function starts when IoT Greengrass starts and
--   keeps running in its own container.</li>
--   <li>A non-pinned Lambda function starts only when it receives a work
--   item and exists after it idles for <tt>maxIdleTimeInSeconds</tt>. If
--   the function has multiple work items, the IoT Greengrass Core software
--   creates multiple instances of the function.</li>
--   </ul>
--   
--   Default: <tt>true</tt>
--   
--   <a>$sel:inputPayloadEncodingType:LambdaExecutionParameters'</a>,
--   <a>lambdaExecutionParameters_inputPayloadEncodingType</a> - The
--   encoding type that the Lambda function supports.
--   
--   Default: <tt>json</tt>
--   
--   <a>$sel:maxIdleTimeInSeconds:LambdaExecutionParameters'</a>,
--   <a>lambdaExecutionParameters_maxIdleTimeInSeconds</a> - The maximum
--   amount of time in seconds that a non-pinned Lambda function can idle
--   before the IoT Greengrass Core software stops its process.
--   
--   <a>$sel:timeoutInSeconds:LambdaExecutionParameters'</a>,
--   <a>lambdaExecutionParameters_timeoutInSeconds</a> - The maximum amount
--   of time in seconds that the Lambda function can process a work item.
--   
--   <a>$sel:eventSources:LambdaExecutionParameters'</a>,
--   <a>lambdaExecutionParameters_eventSources</a> - The list of event
--   sources to which to subscribe to receive work messages. The Lambda
--   function runs when it receives a message from an event source. You can
--   subscribe this function to local publish/subscribe messages and Amazon
--   Web Services IoT Core MQTT messages.
--   
--   <a>$sel:maxInstancesCount:LambdaExecutionParameters'</a>,
--   <a>lambdaExecutionParameters_maxInstancesCount</a> - The maximum
--   number of instances that a non-pinned Lambda function can run at the
--   same time.
--   
--   <a>$sel:environmentVariables:LambdaExecutionParameters'</a>,
--   <a>lambdaExecutionParameters_environmentVariables</a> - The map of
--   environment variables that are available to the Lambda function when
--   it runs.
--   
--   <a>$sel:statusTimeoutInSeconds:LambdaExecutionParameters'</a>,
--   <a>lambdaExecutionParameters_statusTimeoutInSeconds</a> - The interval
--   in seconds at which a pinned (also known as long-lived) Lambda
--   function component sends status updates to the Lambda manager
--   component.
--   
--   <a>$sel:linuxProcessParams:LambdaExecutionParameters'</a>,
--   <a>lambdaExecutionParameters_linuxProcessParams</a> - The parameters
--   for the Linux process that contains the Lambda function.
newLambdaExecutionParameters :: LambdaExecutionParameters

-- | The list of arguments to pass to the Lambda function when it runs.
lambdaExecutionParameters_execArgs :: Lens' LambdaExecutionParameters (Maybe [Text])

-- | The maximum size of the message queue for the Lambda function
--   component. The IoT Greengrass core stores messages in a FIFO
--   (first-in-first-out) queue until it can run the Lambda function to
--   consume each message.
lambdaExecutionParameters_maxQueueSize :: Lens' LambdaExecutionParameters (Maybe Int)

-- | Whether or not the Lambda function is pinned, or long-lived.
--   
--   <ul>
--   <li>A pinned Lambda function starts when IoT Greengrass starts and
--   keeps running in its own container.</li>
--   <li>A non-pinned Lambda function starts only when it receives a work
--   item and exists after it idles for <tt>maxIdleTimeInSeconds</tt>. If
--   the function has multiple work items, the IoT Greengrass Core software
--   creates multiple instances of the function.</li>
--   </ul>
--   
--   Default: <tt>true</tt>
lambdaExecutionParameters_pinned :: Lens' LambdaExecutionParameters (Maybe Bool)

-- | The encoding type that the Lambda function supports.
--   
--   Default: <tt>json</tt>
lambdaExecutionParameters_inputPayloadEncodingType :: Lens' LambdaExecutionParameters (Maybe LambdaInputPayloadEncodingType)

-- | The maximum amount of time in seconds that a non-pinned Lambda
--   function can idle before the IoT Greengrass Core software stops its
--   process.
lambdaExecutionParameters_maxIdleTimeInSeconds :: Lens' LambdaExecutionParameters (Maybe Int)

-- | The maximum amount of time in seconds that the Lambda function can
--   process a work item.
lambdaExecutionParameters_timeoutInSeconds :: Lens' LambdaExecutionParameters (Maybe Int)

-- | The list of event sources to which to subscribe to receive work
--   messages. The Lambda function runs when it receives a message from an
--   event source. You can subscribe this function to local
--   publish/subscribe messages and Amazon Web Services IoT Core MQTT
--   messages.
lambdaExecutionParameters_eventSources :: Lens' LambdaExecutionParameters (Maybe [LambdaEventSource])

-- | The maximum number of instances that a non-pinned Lambda function can
--   run at the same time.
lambdaExecutionParameters_maxInstancesCount :: Lens' LambdaExecutionParameters (Maybe Int)

-- | The map of environment variables that are available to the Lambda
--   function when it runs.
lambdaExecutionParameters_environmentVariables :: Lens' LambdaExecutionParameters (Maybe (HashMap Text Text))

-- | The interval in seconds at which a pinned (also known as long-lived)
--   Lambda function component sends status updates to the Lambda manager
--   component.
lambdaExecutionParameters_statusTimeoutInSeconds :: Lens' LambdaExecutionParameters (Maybe Int)

-- | The parameters for the Linux process that contains the Lambda
--   function.
lambdaExecutionParameters_linuxProcessParams :: Lens' LambdaExecutionParameters (Maybe LambdaLinuxProcessParams)
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.LambdaExecutionParameters.LambdaExecutionParameters
instance GHC.Show.Show Amazonka.GreengrassV2.Types.LambdaExecutionParameters.LambdaExecutionParameters
instance GHC.Read.Read Amazonka.GreengrassV2.Types.LambdaExecutionParameters.LambdaExecutionParameters
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.LambdaExecutionParameters.LambdaExecutionParameters
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.LambdaExecutionParameters.LambdaExecutionParameters
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.LambdaExecutionParameters.LambdaExecutionParameters
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.Types.LambdaExecutionParameters.LambdaExecutionParameters


module Amazonka.GreengrassV2.Types.LambdaFunctionRecipeSource

-- | Contains information about an Lambda function to import to create a
--   component.
--   
--   <i>See:</i> <a>newLambdaFunctionRecipeSource</a> smart constructor.
data LambdaFunctionRecipeSource
LambdaFunctionRecipeSource' :: Maybe LambdaExecutionParameters -> Maybe Text -> Maybe Text -> Maybe [ComponentPlatform] -> Maybe (HashMap Text ComponentDependencyRequirement) -> Text -> LambdaFunctionRecipeSource

-- | The system and runtime parameters for the Lambda function as it runs
--   on the Greengrass core device.
[$sel:componentLambdaParameters:LambdaFunctionRecipeSource'] :: LambdaFunctionRecipeSource -> Maybe LambdaExecutionParameters

-- | The version of the component.
--   
--   Defaults to the version of the Lambda function as a semantic version.
--   For example, if your function version is <tt>3</tt>, the component
--   version becomes <tt>3.0.0</tt>.
[$sel:componentVersion:LambdaFunctionRecipeSource'] :: LambdaFunctionRecipeSource -> Maybe Text

-- | The name of the component.
--   
--   Defaults to the name of the Lambda function.
[$sel:componentName:LambdaFunctionRecipeSource'] :: LambdaFunctionRecipeSource -> Maybe Text

-- | The platforms that the component version supports.
[$sel:componentPlatforms:LambdaFunctionRecipeSource'] :: LambdaFunctionRecipeSource -> Maybe [ComponentPlatform]

-- | The component versions on which this Lambda function component
--   depends.
[$sel:componentDependencies:LambdaFunctionRecipeSource'] :: LambdaFunctionRecipeSource -> Maybe (HashMap Text ComponentDependencyRequirement)

-- | The <a>ARN</a> of the Lambda function. The ARN must include the
--   version of the function to import. You can't use version aliases like
--   <tt>$LATEST</tt>.
[$sel:lambdaArn:LambdaFunctionRecipeSource'] :: LambdaFunctionRecipeSource -> Text

-- | Create a value of <a>LambdaFunctionRecipeSource</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:componentLambdaParameters:LambdaFunctionRecipeSource'</a>,
--   <a>lambdaFunctionRecipeSource_componentLambdaParameters</a> - The
--   system and runtime parameters for the Lambda function as it runs on
--   the Greengrass core device.
--   
--   <a>$sel:componentVersion:LambdaFunctionRecipeSource'</a>,
--   <a>lambdaFunctionRecipeSource_componentVersion</a> - The version of
--   the component.
--   
--   Defaults to the version of the Lambda function as a semantic version.
--   For example, if your function version is <tt>3</tt>, the component
--   version becomes <tt>3.0.0</tt>.
--   
--   <a>$sel:componentName:LambdaFunctionRecipeSource'</a>,
--   <a>lambdaFunctionRecipeSource_componentName</a> - The name of the
--   component.
--   
--   Defaults to the name of the Lambda function.
--   
--   <a>$sel:componentPlatforms:LambdaFunctionRecipeSource'</a>,
--   <a>lambdaFunctionRecipeSource_componentPlatforms</a> - The platforms
--   that the component version supports.
--   
--   <a>$sel:componentDependencies:LambdaFunctionRecipeSource'</a>,
--   <a>lambdaFunctionRecipeSource_componentDependencies</a> - The
--   component versions on which this Lambda function component depends.
--   
--   <a>$sel:lambdaArn:LambdaFunctionRecipeSource'</a>,
--   <a>lambdaFunctionRecipeSource_lambdaArn</a> - The <a>ARN</a> of the
--   Lambda function. The ARN must include the version of the function to
--   import. You can't use version aliases like <tt>$LATEST</tt>.
newLambdaFunctionRecipeSource :: Text -> LambdaFunctionRecipeSource

-- | The system and runtime parameters for the Lambda function as it runs
--   on the Greengrass core device.
lambdaFunctionRecipeSource_componentLambdaParameters :: Lens' LambdaFunctionRecipeSource (Maybe LambdaExecutionParameters)

-- | The version of the component.
--   
--   Defaults to the version of the Lambda function as a semantic version.
--   For example, if your function version is <tt>3</tt>, the component
--   version becomes <tt>3.0.0</tt>.
lambdaFunctionRecipeSource_componentVersion :: Lens' LambdaFunctionRecipeSource (Maybe Text)

-- | The name of the component.
--   
--   Defaults to the name of the Lambda function.
lambdaFunctionRecipeSource_componentName :: Lens' LambdaFunctionRecipeSource (Maybe Text)

-- | The platforms that the component version supports.
lambdaFunctionRecipeSource_componentPlatforms :: Lens' LambdaFunctionRecipeSource (Maybe [ComponentPlatform])

-- | The component versions on which this Lambda function component
--   depends.
lambdaFunctionRecipeSource_componentDependencies :: Lens' LambdaFunctionRecipeSource (Maybe (HashMap Text ComponentDependencyRequirement))

-- | The <a>ARN</a> of the Lambda function. The ARN must include the
--   version of the function to import. You can't use version aliases like
--   <tt>$LATEST</tt>.
lambdaFunctionRecipeSource_lambdaArn :: Lens' LambdaFunctionRecipeSource Text
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.LambdaFunctionRecipeSource.LambdaFunctionRecipeSource
instance GHC.Show.Show Amazonka.GreengrassV2.Types.LambdaFunctionRecipeSource.LambdaFunctionRecipeSource
instance GHC.Read.Read Amazonka.GreengrassV2.Types.LambdaFunctionRecipeSource.LambdaFunctionRecipeSource
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.LambdaFunctionRecipeSource.LambdaFunctionRecipeSource
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.LambdaFunctionRecipeSource.LambdaFunctionRecipeSource
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.LambdaFunctionRecipeSource.LambdaFunctionRecipeSource
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.Types.LambdaFunctionRecipeSource.LambdaFunctionRecipeSource


module Amazonka.GreengrassV2.Types.RecipeOutputFormat
newtype RecipeOutputFormat
RecipeOutputFormat' :: Text -> RecipeOutputFormat
[fromRecipeOutputFormat] :: RecipeOutputFormat -> Text
pattern RecipeOutputFormat_JSON :: RecipeOutputFormat
pattern RecipeOutputFormat_YAML :: RecipeOutputFormat
instance Amazonka.Data.XML.ToXML Amazonka.GreengrassV2.Types.RecipeOutputFormat.RecipeOutputFormat
instance Amazonka.Data.XML.FromXML Amazonka.GreengrassV2.Types.RecipeOutputFormat.RecipeOutputFormat
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.GreengrassV2.Types.RecipeOutputFormat.RecipeOutputFormat
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.Types.RecipeOutputFormat.RecipeOutputFormat
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.GreengrassV2.Types.RecipeOutputFormat.RecipeOutputFormat
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.RecipeOutputFormat.RecipeOutputFormat
instance Amazonka.Data.Query.ToQuery Amazonka.GreengrassV2.Types.RecipeOutputFormat.RecipeOutputFormat
instance Amazonka.Data.Headers.ToHeader Amazonka.GreengrassV2.Types.RecipeOutputFormat.RecipeOutputFormat
instance Amazonka.Data.Log.ToLog Amazonka.GreengrassV2.Types.RecipeOutputFormat.RecipeOutputFormat
instance Amazonka.Data.ByteString.ToByteString Amazonka.GreengrassV2.Types.RecipeOutputFormat.RecipeOutputFormat
instance Amazonka.Data.Text.ToText Amazonka.GreengrassV2.Types.RecipeOutputFormat.RecipeOutputFormat
instance Amazonka.Data.Text.FromText Amazonka.GreengrassV2.Types.RecipeOutputFormat.RecipeOutputFormat
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.RecipeOutputFormat.RecipeOutputFormat
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.RecipeOutputFormat.RecipeOutputFormat
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.RecipeOutputFormat.RecipeOutputFormat
instance GHC.Classes.Ord Amazonka.GreengrassV2.Types.RecipeOutputFormat.RecipeOutputFormat
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.RecipeOutputFormat.RecipeOutputFormat
instance GHC.Read.Read Amazonka.GreengrassV2.Types.RecipeOutputFormat.RecipeOutputFormat
instance GHC.Show.Show Amazonka.GreengrassV2.Types.RecipeOutputFormat.RecipeOutputFormat


module Amazonka.GreengrassV2.Types.ResolvedComponentVersion

-- | Contains information about a component version that is compatible to
--   run on a Greengrass core device.
--   
--   <i>See:</i> <a>newResolvedComponentVersion</a> smart constructor.
data ResolvedComponentVersion
ResolvedComponentVersion' :: Maybe Text -> Maybe Text -> Maybe Base64 -> Maybe Text -> ResolvedComponentVersion

-- | The <a>ARN</a> of the component version.
[$sel:arn:ResolvedComponentVersion'] :: ResolvedComponentVersion -> Maybe Text

-- | The version of the component.
[$sel:componentVersion:ResolvedComponentVersion'] :: ResolvedComponentVersion -> Maybe Text

-- | The recipe of the component version.
[$sel:recipe:ResolvedComponentVersion'] :: ResolvedComponentVersion -> Maybe Base64

-- | The name of the component.
[$sel:componentName:ResolvedComponentVersion'] :: ResolvedComponentVersion -> Maybe Text

-- | Create a value of <a>ResolvedComponentVersion</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:arn:ResolvedComponentVersion'</a>,
--   <a>resolvedComponentVersion_arn</a> - The <a>ARN</a> of the component
--   version.
--   
--   <a>$sel:componentVersion:ResolvedComponentVersion'</a>,
--   <a>resolvedComponentVersion_componentVersion</a> - The version of the
--   component.
--   
--   <a>$sel:recipe:ResolvedComponentVersion'</a>,
--   <a>resolvedComponentVersion_recipe</a> - The recipe of the component
--   version.-- -- <i>Note:</i> This <tt>Lens</tt> automatically encodes
--   and decodes Base64 data. -- The underlying isomorphism will encode to
--   Base64 representation during -- serialisation, and decode from Base64
--   representation during deserialisation. -- This <tt>Lens</tt> accepts
--   and returns only raw unencoded data.
--   
--   <a>$sel:componentName:ResolvedComponentVersion'</a>,
--   <a>resolvedComponentVersion_componentName</a> - The name of the
--   component.
newResolvedComponentVersion :: ResolvedComponentVersion

-- | The <a>ARN</a> of the component version.
resolvedComponentVersion_arn :: Lens' ResolvedComponentVersion (Maybe Text)

-- | The version of the component.
resolvedComponentVersion_componentVersion :: Lens' ResolvedComponentVersion (Maybe Text)

-- | The recipe of the component version.-- -- <i>Note:</i> This
--   <tt>Lens</tt> automatically encodes and decodes Base64 data. -- The
--   underlying isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
resolvedComponentVersion_recipe :: Lens' ResolvedComponentVersion (Maybe ByteString)

-- | The name of the component.
resolvedComponentVersion_componentName :: Lens' ResolvedComponentVersion (Maybe Text)
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.ResolvedComponentVersion.ResolvedComponentVersion
instance GHC.Show.Show Amazonka.GreengrassV2.Types.ResolvedComponentVersion.ResolvedComponentVersion
instance GHC.Read.Read Amazonka.GreengrassV2.Types.ResolvedComponentVersion.ResolvedComponentVersion
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.ResolvedComponentVersion.ResolvedComponentVersion
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.ResolvedComponentVersion.ResolvedComponentVersion
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.ResolvedComponentVersion.ResolvedComponentVersion
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.ResolvedComponentVersion.ResolvedComponentVersion


module Amazonka.GreengrassV2.Types.SystemResourceLimits

-- | Contains information about system resource limits that the IoT
--   Greengrass Core software applies to a component's processes. For more
--   information, see <a>Configure system resource limits for
--   components</a>.
--   
--   <i>See:</i> <a>newSystemResourceLimits</a> smart constructor.
data SystemResourceLimits
SystemResourceLimits' :: Maybe Natural -> Maybe Double -> SystemResourceLimits

-- | The maximum amount of RAM, expressed in kilobytes, that a component's
--   processes can use on the core device.
[$sel:memory:SystemResourceLimits'] :: SystemResourceLimits -> Maybe Natural

-- | The maximum amount of CPU time that a component's processes can use on
--   the core device. A core device's total CPU time is equivalent to the
--   device's number of CPU cores. For example, on a core device with 4 CPU
--   cores, you can set this value to <tt>2</tt> to limit the component's
--   processes to 50 percent usage of each CPU core. On a device with 1 CPU
--   core, you can set this value to <tt>0.25</tt> to limit the component's
--   processes to 25 percent usage of the CPU. If you set this value to a
--   number greater than the number of CPU cores, the IoT Greengrass Core
--   software doesn't limit the component's CPU usage.
[$sel:cpus:SystemResourceLimits'] :: SystemResourceLimits -> Maybe Double

-- | Create a value of <a>SystemResourceLimits</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:memory:SystemResourceLimits'</a>,
--   <a>systemResourceLimits_memory</a> - The maximum amount of RAM,
--   expressed in kilobytes, that a component's processes can use on the
--   core device.
--   
--   <a>$sel:cpus:SystemResourceLimits'</a>,
--   <a>systemResourceLimits_cpus</a> - The maximum amount of CPU time that
--   a component's processes can use on the core device. A core device's
--   total CPU time is equivalent to the device's number of CPU cores. For
--   example, on a core device with 4 CPU cores, you can set this value to
--   <tt>2</tt> to limit the component's processes to 50 percent usage of
--   each CPU core. On a device with 1 CPU core, you can set this value to
--   <tt>0.25</tt> to limit the component's processes to 25 percent usage
--   of the CPU. If you set this value to a number greater than the number
--   of CPU cores, the IoT Greengrass Core software doesn't limit the
--   component's CPU usage.
newSystemResourceLimits :: SystemResourceLimits

-- | The maximum amount of RAM, expressed in kilobytes, that a component's
--   processes can use on the core device.
systemResourceLimits_memory :: Lens' SystemResourceLimits (Maybe Natural)

-- | The maximum amount of CPU time that a component's processes can use on
--   the core device. A core device's total CPU time is equivalent to the
--   device's number of CPU cores. For example, on a core device with 4 CPU
--   cores, you can set this value to <tt>2</tt> to limit the component's
--   processes to 50 percent usage of each CPU core. On a device with 1 CPU
--   core, you can set this value to <tt>0.25</tt> to limit the component's
--   processes to 25 percent usage of the CPU. If you set this value to a
--   number greater than the number of CPU cores, the IoT Greengrass Core
--   software doesn't limit the component's CPU usage.
systemResourceLimits_cpus :: Lens' SystemResourceLimits (Maybe Double)
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.SystemResourceLimits.SystemResourceLimits
instance GHC.Show.Show Amazonka.GreengrassV2.Types.SystemResourceLimits.SystemResourceLimits
instance GHC.Read.Read Amazonka.GreengrassV2.Types.SystemResourceLimits.SystemResourceLimits
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.SystemResourceLimits.SystemResourceLimits
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.SystemResourceLimits.SystemResourceLimits
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.SystemResourceLimits.SystemResourceLimits
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.SystemResourceLimits.SystemResourceLimits
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.Types.SystemResourceLimits.SystemResourceLimits


module Amazonka.GreengrassV2.Types.ComponentRunWith

-- | Contains information system user and group that the IoT Greengrass
--   Core software uses to run component processes on the core device. For
--   more information, see <a>Configure the user and group that run
--   components</a> in the <i>IoT Greengrass V2 Developer Guide</i>.
--   
--   <i>See:</i> <a>newComponentRunWith</a> smart constructor.
data ComponentRunWith
ComponentRunWith' :: Maybe Text -> Maybe SystemResourceLimits -> ComponentRunWith

-- | The POSIX system user and (optional) group to use to run this
--   component. Specify the user and group separated by a colon
--   (<tt>:</tt>) in the following format: <tt>user:group</tt>. The group
--   is optional. If you don't specify a group, the IoT Greengrass Core
--   software uses the primary user for the group.
--   
--   If you omit this parameter, the IoT Greengrass Core software uses the
--   default system user and group that you configure on the Greengrass
--   nucleus component. For more information, see <a>Configure the user and
--   group that run components</a>.
[$sel:posixUser:ComponentRunWith'] :: ComponentRunWith -> Maybe Text

-- | The system resource limits to apply to this component's process on the
--   core device.
--   
--   If you omit this parameter, the IoT Greengrass Core software uses the
--   default system resource limits that you configure on the Greengrass
--   nucleus component. For more information, see <a>Configure system
--   resource limits for components</a>.
[$sel:systemResourceLimits:ComponentRunWith'] :: ComponentRunWith -> Maybe SystemResourceLimits

-- | Create a value of <a>ComponentRunWith</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:posixUser:ComponentRunWith'</a>,
--   <a>componentRunWith_posixUser</a> - The POSIX system user and
--   (optional) group to use to run this component. Specify the user and
--   group separated by a colon (<tt>:</tt>) in the following format:
--   <tt>user:group</tt>. The group is optional. If you don't specify a
--   group, the IoT Greengrass Core software uses the primary user for the
--   group.
--   
--   If you omit this parameter, the IoT Greengrass Core software uses the
--   default system user and group that you configure on the Greengrass
--   nucleus component. For more information, see <a>Configure the user and
--   group that run components</a>.
--   
--   <a>$sel:systemResourceLimits:ComponentRunWith'</a>,
--   <a>componentRunWith_systemResourceLimits</a> - The system resource
--   limits to apply to this component's process on the core device.
--   
--   If you omit this parameter, the IoT Greengrass Core software uses the
--   default system resource limits that you configure on the Greengrass
--   nucleus component. For more information, see <a>Configure system
--   resource limits for components</a>.
newComponentRunWith :: ComponentRunWith

-- | The POSIX system user and (optional) group to use to run this
--   component. Specify the user and group separated by a colon
--   (<tt>:</tt>) in the following format: <tt>user:group</tt>. The group
--   is optional. If you don't specify a group, the IoT Greengrass Core
--   software uses the primary user for the group.
--   
--   If you omit this parameter, the IoT Greengrass Core software uses the
--   default system user and group that you configure on the Greengrass
--   nucleus component. For more information, see <a>Configure the user and
--   group that run components</a>.
componentRunWith_posixUser :: Lens' ComponentRunWith (Maybe Text)

-- | The system resource limits to apply to this component's process on the
--   core device.
--   
--   If you omit this parameter, the IoT Greengrass Core software uses the
--   default system resource limits that you configure on the Greengrass
--   nucleus component. For more information, see <a>Configure system
--   resource limits for components</a>.
componentRunWith_systemResourceLimits :: Lens' ComponentRunWith (Maybe SystemResourceLimits)
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.ComponentRunWith.ComponentRunWith
instance GHC.Show.Show Amazonka.GreengrassV2.Types.ComponentRunWith.ComponentRunWith
instance GHC.Read.Read Amazonka.GreengrassV2.Types.ComponentRunWith.ComponentRunWith
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.ComponentRunWith.ComponentRunWith
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.ComponentRunWith.ComponentRunWith
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.ComponentRunWith.ComponentRunWith
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.ComponentRunWith.ComponentRunWith
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.Types.ComponentRunWith.ComponentRunWith


module Amazonka.GreengrassV2.Types.ComponentDeploymentSpecification

-- | Contains information about a component to deploy.
--   
--   <i>See:</i> <a>newComponentDeploymentSpecification</a> smart
--   constructor.
data ComponentDeploymentSpecification
ComponentDeploymentSpecification' :: Maybe Text -> Maybe ComponentRunWith -> Maybe ComponentConfigurationUpdate -> ComponentDeploymentSpecification

-- | The version of the component.
[$sel:componentVersion:ComponentDeploymentSpecification'] :: ComponentDeploymentSpecification -> Maybe Text

-- | The system user and group that the IoT Greengrass Core software uses
--   to run component processes on the core device. If you omit this
--   parameter, the IoT Greengrass Core software uses the system user and
--   group that you configure for the core device. For more information,
--   see <a>Configure the user and group that run components</a> in the
--   <i>IoT Greengrass V2 Developer Guide</i>.
[$sel:runWith:ComponentDeploymentSpecification'] :: ComponentDeploymentSpecification -> Maybe ComponentRunWith

-- | The configuration updates to deploy for the component. You can define
--   <i>reset</i> updates and <i>merge</i> updates. A reset updates the
--   keys that you specify to the default configuration for the component.
--   A merge updates the core device's component configuration with the
--   keys and values that you specify. The IoT Greengrass Core software
--   applies reset updates before it applies merge updates. For more
--   information, see <a>Update component configurations</a> in the <i>IoT
--   Greengrass V2 Developer Guide</i>.
[$sel:configurationUpdate:ComponentDeploymentSpecification'] :: ComponentDeploymentSpecification -> Maybe ComponentConfigurationUpdate

-- | Create a value of <a>ComponentDeploymentSpecification</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:componentVersion:ComponentDeploymentSpecification'</a>,
--   <a>componentDeploymentSpecification_componentVersion</a> - The version
--   of the component.
--   
--   <a>$sel:runWith:ComponentDeploymentSpecification'</a>,
--   <a>componentDeploymentSpecification_runWith</a> - The system user and
--   group that the IoT Greengrass Core software uses to run component
--   processes on the core device. If you omit this parameter, the IoT
--   Greengrass Core software uses the system user and group that you
--   configure for the core device. For more information, see <a>Configure
--   the user and group that run components</a> in the <i>IoT Greengrass V2
--   Developer Guide</i>.
--   
--   <a>$sel:configurationUpdate:ComponentDeploymentSpecification'</a>,
--   <a>componentDeploymentSpecification_configurationUpdate</a> - The
--   configuration updates to deploy for the component. You can define
--   <i>reset</i> updates and <i>merge</i> updates. A reset updates the
--   keys that you specify to the default configuration for the component.
--   A merge updates the core device's component configuration with the
--   keys and values that you specify. The IoT Greengrass Core software
--   applies reset updates before it applies merge updates. For more
--   information, see <a>Update component configurations</a> in the <i>IoT
--   Greengrass V2 Developer Guide</i>.
newComponentDeploymentSpecification :: ComponentDeploymentSpecification

-- | The version of the component.
componentDeploymentSpecification_componentVersion :: Lens' ComponentDeploymentSpecification (Maybe Text)

-- | The system user and group that the IoT Greengrass Core software uses
--   to run component processes on the core device. If you omit this
--   parameter, the IoT Greengrass Core software uses the system user and
--   group that you configure for the core device. For more information,
--   see <a>Configure the user and group that run components</a> in the
--   <i>IoT Greengrass V2 Developer Guide</i>.
componentDeploymentSpecification_runWith :: Lens' ComponentDeploymentSpecification (Maybe ComponentRunWith)

-- | The configuration updates to deploy for the component. You can define
--   <i>reset</i> updates and <i>merge</i> updates. A reset updates the
--   keys that you specify to the default configuration for the component.
--   A merge updates the core device's component configuration with the
--   keys and values that you specify. The IoT Greengrass Core software
--   applies reset updates before it applies merge updates. For more
--   information, see <a>Update component configurations</a> in the <i>IoT
--   Greengrass V2 Developer Guide</i>.
componentDeploymentSpecification_configurationUpdate :: Lens' ComponentDeploymentSpecification (Maybe ComponentConfigurationUpdate)
instance GHC.Generics.Generic Amazonka.GreengrassV2.Types.ComponentDeploymentSpecification.ComponentDeploymentSpecification
instance GHC.Show.Show Amazonka.GreengrassV2.Types.ComponentDeploymentSpecification.ComponentDeploymentSpecification
instance GHC.Read.Read Amazonka.GreengrassV2.Types.ComponentDeploymentSpecification.ComponentDeploymentSpecification
instance GHC.Classes.Eq Amazonka.GreengrassV2.Types.ComponentDeploymentSpecification.ComponentDeploymentSpecification
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.GreengrassV2.Types.ComponentDeploymentSpecification.ComponentDeploymentSpecification
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.Types.ComponentDeploymentSpecification.ComponentDeploymentSpecification
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.Types.ComponentDeploymentSpecification.ComponentDeploymentSpecification
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.Types.ComponentDeploymentSpecification.ComponentDeploymentSpecification


module Amazonka.GreengrassV2.Types

-- | API version <tt>2020-11-30</tt> of the Amazon IoT Greengrass V2 SDK
--   configuration.
defaultService :: Service

-- | The request isn't valid. This can occur if your request contains
--   malformed JSON or unsupported characters.
_ValidationException :: AsError a => Getting (First ServiceError) a ServiceError

-- | You don't have permission to perform the action.
_AccessDeniedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Your request has conflicting operations. This can occur if you're
--   trying to perform more than one operation on the same resource at the
--   same time.
_ConflictException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Your request exceeds a service quota. For example, you might have the
--   maximum number of components that you can create.
_ServiceQuotaExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Your request exceeded a request rate quota. For example, you might
--   have exceeded the amount of times that you can retrieve device or
--   deployment status per second.
_ThrottlingException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request is already in progress. This exception occurs when you use
--   a client token for multiple requests while IoT Greengrass is still
--   processing an earlier request that uses the same client token.
_RequestAlreadyInProgressException :: AsError a => Getting (First ServiceError) a ServiceError

-- | IoT Greengrass can't process your request right now. Try again later.
_InternalServerException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The requested resource can't be found.
_ResourceNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError
newtype CloudComponentState
CloudComponentState' :: Text -> CloudComponentState
[fromCloudComponentState] :: CloudComponentState -> Text
pattern CloudComponentState_DEPLOYABLE :: CloudComponentState
pattern CloudComponentState_DEPRECATED :: CloudComponentState
pattern CloudComponentState_FAILED :: CloudComponentState
pattern CloudComponentState_INITIATED :: CloudComponentState
pattern CloudComponentState_REQUESTED :: CloudComponentState
newtype ComponentDependencyType
ComponentDependencyType' :: Text -> ComponentDependencyType
[fromComponentDependencyType] :: ComponentDependencyType -> Text
pattern ComponentDependencyType_HARD :: ComponentDependencyType
pattern ComponentDependencyType_SOFT :: ComponentDependencyType
newtype ComponentVisibilityScope
ComponentVisibilityScope' :: Text -> ComponentVisibilityScope
[fromComponentVisibilityScope] :: ComponentVisibilityScope -> Text
pattern ComponentVisibilityScope_PRIVATE :: ComponentVisibilityScope
pattern ComponentVisibilityScope_PUBLIC :: ComponentVisibilityScope
newtype CoreDeviceStatus
CoreDeviceStatus' :: Text -> CoreDeviceStatus
[fromCoreDeviceStatus] :: CoreDeviceStatus -> Text
pattern CoreDeviceStatus_HEALTHY :: CoreDeviceStatus
pattern CoreDeviceStatus_UNHEALTHY :: CoreDeviceStatus
newtype DeploymentComponentUpdatePolicyAction
DeploymentComponentUpdatePolicyAction' :: Text -> DeploymentComponentUpdatePolicyAction
[fromDeploymentComponentUpdatePolicyAction] :: DeploymentComponentUpdatePolicyAction -> Text
pattern DeploymentComponentUpdatePolicyAction_NOTIFY_COMPONENTS :: DeploymentComponentUpdatePolicyAction
pattern DeploymentComponentUpdatePolicyAction_SKIP_NOTIFY_COMPONENTS :: DeploymentComponentUpdatePolicyAction
newtype DeploymentFailureHandlingPolicy
DeploymentFailureHandlingPolicy' :: Text -> DeploymentFailureHandlingPolicy
[fromDeploymentFailureHandlingPolicy] :: DeploymentFailureHandlingPolicy -> Text
pattern DeploymentFailureHandlingPolicy_DO_NOTHING :: DeploymentFailureHandlingPolicy
pattern DeploymentFailureHandlingPolicy_ROLLBACK :: DeploymentFailureHandlingPolicy
newtype DeploymentHistoryFilter
DeploymentHistoryFilter' :: Text -> DeploymentHistoryFilter
[fromDeploymentHistoryFilter] :: DeploymentHistoryFilter -> Text
pattern DeploymentHistoryFilter_ALL :: DeploymentHistoryFilter
pattern DeploymentHistoryFilter_LATEST_ONLY :: DeploymentHistoryFilter
newtype DeploymentStatus
DeploymentStatus' :: Text -> DeploymentStatus
[fromDeploymentStatus] :: DeploymentStatus -> Text
pattern DeploymentStatus_ACTIVE :: DeploymentStatus
pattern DeploymentStatus_CANCELED :: DeploymentStatus
pattern DeploymentStatus_COMPLETED :: DeploymentStatus
pattern DeploymentStatus_FAILED :: DeploymentStatus
pattern DeploymentStatus_INACTIVE :: DeploymentStatus
newtype EffectiveDeploymentExecutionStatus
EffectiveDeploymentExecutionStatus' :: Text -> EffectiveDeploymentExecutionStatus
[fromEffectiveDeploymentExecutionStatus] :: EffectiveDeploymentExecutionStatus -> Text
pattern EffectiveDeploymentExecutionStatus_CANCELED :: EffectiveDeploymentExecutionStatus
pattern EffectiveDeploymentExecutionStatus_COMPLETED :: EffectiveDeploymentExecutionStatus
pattern EffectiveDeploymentExecutionStatus_FAILED :: EffectiveDeploymentExecutionStatus
pattern EffectiveDeploymentExecutionStatus_IN_PROGRESS :: EffectiveDeploymentExecutionStatus
pattern EffectiveDeploymentExecutionStatus_QUEUED :: EffectiveDeploymentExecutionStatus
pattern EffectiveDeploymentExecutionStatus_REJECTED :: EffectiveDeploymentExecutionStatus
pattern EffectiveDeploymentExecutionStatus_TIMED_OUT :: EffectiveDeploymentExecutionStatus
newtype InstalledComponentLifecycleState
InstalledComponentLifecycleState' :: Text -> InstalledComponentLifecycleState
[fromInstalledComponentLifecycleState] :: InstalledComponentLifecycleState -> Text
pattern InstalledComponentLifecycleState_BROKEN :: InstalledComponentLifecycleState
pattern InstalledComponentLifecycleState_ERRORED :: InstalledComponentLifecycleState
pattern InstalledComponentLifecycleState_FINISHED :: InstalledComponentLifecycleState
pattern InstalledComponentLifecycleState_INSTALLED :: InstalledComponentLifecycleState
pattern InstalledComponentLifecycleState_NEW :: InstalledComponentLifecycleState
pattern InstalledComponentLifecycleState_RUNNING :: InstalledComponentLifecycleState
pattern InstalledComponentLifecycleState_STARTING :: InstalledComponentLifecycleState
pattern InstalledComponentLifecycleState_STOPPING :: InstalledComponentLifecycleState
newtype IoTJobAbortAction
IoTJobAbortAction' :: Text -> IoTJobAbortAction
[fromIoTJobAbortAction] :: IoTJobAbortAction -> Text
pattern IoTJobAbortAction_CANCEL :: IoTJobAbortAction
newtype IoTJobExecutionFailureType
IoTJobExecutionFailureType' :: Text -> IoTJobExecutionFailureType
[fromIoTJobExecutionFailureType] :: IoTJobExecutionFailureType -> Text
pattern IoTJobExecutionFailureType_ALL :: IoTJobExecutionFailureType
pattern IoTJobExecutionFailureType_FAILED :: IoTJobExecutionFailureType
pattern IoTJobExecutionFailureType_REJECTED :: IoTJobExecutionFailureType
pattern IoTJobExecutionFailureType_TIMED_OUT :: IoTJobExecutionFailureType
newtype LambdaEventSourceType
LambdaEventSourceType' :: Text -> LambdaEventSourceType
[fromLambdaEventSourceType] :: LambdaEventSourceType -> Text
pattern LambdaEventSourceType_IOT_CORE :: LambdaEventSourceType
pattern LambdaEventSourceType_PUB_SUB :: LambdaEventSourceType
newtype LambdaFilesystemPermission
LambdaFilesystemPermission' :: Text -> LambdaFilesystemPermission
[fromLambdaFilesystemPermission] :: LambdaFilesystemPermission -> Text
pattern LambdaFilesystemPermission_Ro :: LambdaFilesystemPermission
pattern LambdaFilesystemPermission_Rw :: LambdaFilesystemPermission
newtype LambdaInputPayloadEncodingType
LambdaInputPayloadEncodingType' :: Text -> LambdaInputPayloadEncodingType
[fromLambdaInputPayloadEncodingType] :: LambdaInputPayloadEncodingType -> Text
pattern LambdaInputPayloadEncodingType_Binary :: LambdaInputPayloadEncodingType
pattern LambdaInputPayloadEncodingType_Json :: LambdaInputPayloadEncodingType
newtype LambdaIsolationMode
LambdaIsolationMode' :: Text -> LambdaIsolationMode
[fromLambdaIsolationMode] :: LambdaIsolationMode -> Text
pattern LambdaIsolationMode_GreengrassContainer :: LambdaIsolationMode
pattern LambdaIsolationMode_NoContainer :: LambdaIsolationMode
newtype RecipeOutputFormat
RecipeOutputFormat' :: Text -> RecipeOutputFormat
[fromRecipeOutputFormat] :: RecipeOutputFormat -> Text
pattern RecipeOutputFormat_JSON :: RecipeOutputFormat
pattern RecipeOutputFormat_YAML :: RecipeOutputFormat

-- | Contains a request to associate a client device with a core device.
--   The <a>BatchAssociateClientDeviceWithCoreDevice</a> operation consumes
--   a list of these requests.
--   
--   <i>See:</i> <a>newAssociateClientDeviceWithCoreDeviceEntry</a> smart
--   constructor.
data AssociateClientDeviceWithCoreDeviceEntry
AssociateClientDeviceWithCoreDeviceEntry' :: Text -> AssociateClientDeviceWithCoreDeviceEntry

-- | The name of the IoT thing that represents the client device to
--   associate.
[$sel:thingName:AssociateClientDeviceWithCoreDeviceEntry'] :: AssociateClientDeviceWithCoreDeviceEntry -> Text

-- | Create a value of <a>AssociateClientDeviceWithCoreDeviceEntry</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:thingName:AssociateClientDeviceWithCoreDeviceEntry'</a>,
--   <a>associateClientDeviceWithCoreDeviceEntry_thingName</a> - The name
--   of the IoT thing that represents the client device to associate.
newAssociateClientDeviceWithCoreDeviceEntry :: Text -> AssociateClientDeviceWithCoreDeviceEntry

-- | The name of the IoT thing that represents the client device to
--   associate.
associateClientDeviceWithCoreDeviceEntry_thingName :: Lens' AssociateClientDeviceWithCoreDeviceEntry Text

-- | Contains an error that occurs from a request to associate a client
--   device with a core device. The
--   <a>BatchAssociateClientDeviceWithCoreDevice</a> operation returns a
--   list of these errors.
--   
--   <i>See:</i> <a>newAssociateClientDeviceWithCoreDeviceErrorEntry</a>
--   smart constructor.
data AssociateClientDeviceWithCoreDeviceErrorEntry
AssociateClientDeviceWithCoreDeviceErrorEntry' :: Maybe Text -> Maybe Text -> Maybe Text -> AssociateClientDeviceWithCoreDeviceErrorEntry

-- | The error code for the request.
[$sel:code:AssociateClientDeviceWithCoreDeviceErrorEntry'] :: AssociateClientDeviceWithCoreDeviceErrorEntry -> Maybe Text

-- | A message that provides additional information about the error.
[$sel:message:AssociateClientDeviceWithCoreDeviceErrorEntry'] :: AssociateClientDeviceWithCoreDeviceErrorEntry -> Maybe Text

-- | The name of the IoT thing whose associate request failed.
[$sel:thingName:AssociateClientDeviceWithCoreDeviceErrorEntry'] :: AssociateClientDeviceWithCoreDeviceErrorEntry -> Maybe Text

-- | Create a value of <a>AssociateClientDeviceWithCoreDeviceErrorEntry</a>
--   with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:code:AssociateClientDeviceWithCoreDeviceErrorEntry'</a>,
--   <a>associateClientDeviceWithCoreDeviceErrorEntry_code</a> - The error
--   code for the request.
--   
--   <a>$sel:message:AssociateClientDeviceWithCoreDeviceErrorEntry'</a>,
--   <a>associateClientDeviceWithCoreDeviceErrorEntry_message</a> - A
--   message that provides additional information about the error.
--   
--   <a>$sel:thingName:AssociateClientDeviceWithCoreDeviceErrorEntry'</a>,
--   <a>associateClientDeviceWithCoreDeviceErrorEntry_thingName</a> - The
--   name of the IoT thing whose associate request failed.
newAssociateClientDeviceWithCoreDeviceErrorEntry :: AssociateClientDeviceWithCoreDeviceErrorEntry

-- | The error code for the request.
associateClientDeviceWithCoreDeviceErrorEntry_code :: Lens' AssociateClientDeviceWithCoreDeviceErrorEntry (Maybe Text)

-- | A message that provides additional information about the error.
associateClientDeviceWithCoreDeviceErrorEntry_message :: Lens' AssociateClientDeviceWithCoreDeviceErrorEntry (Maybe Text)

-- | The name of the IoT thing whose associate request failed.
associateClientDeviceWithCoreDeviceErrorEntry_thingName :: Lens' AssociateClientDeviceWithCoreDeviceErrorEntry (Maybe Text)

-- | Contains information about a client device that is associated to a
--   core device for cloud discovery.
--   
--   <i>See:</i> <a>newAssociatedClientDevice</a> smart constructor.
data AssociatedClientDevice
AssociatedClientDevice' :: Maybe POSIX -> Maybe Text -> AssociatedClientDevice

-- | The time that the client device was associated, expressed in ISO 8601
--   format.
[$sel:associationTimestamp:AssociatedClientDevice'] :: AssociatedClientDevice -> Maybe POSIX

-- | The name of the IoT thing that represents the associated client
--   device.
[$sel:thingName:AssociatedClientDevice'] :: AssociatedClientDevice -> Maybe Text

-- | Create a value of <a>AssociatedClientDevice</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:associationTimestamp:AssociatedClientDevice'</a>,
--   <a>associatedClientDevice_associationTimestamp</a> - The time that the
--   client device was associated, expressed in ISO 8601 format.
--   
--   <a>$sel:thingName:AssociatedClientDevice'</a>,
--   <a>associatedClientDevice_thingName</a> - The name of the IoT thing
--   that represents the associated client device.
newAssociatedClientDevice :: AssociatedClientDevice

-- | The time that the client device was associated, expressed in ISO 8601
--   format.
associatedClientDevice_associationTimestamp :: Lens' AssociatedClientDevice (Maybe UTCTime)

-- | The name of the IoT thing that represents the associated client
--   device.
associatedClientDevice_thingName :: Lens' AssociatedClientDevice (Maybe Text)

-- | Contains the status of a component in the IoT Greengrass service.
--   
--   <i>See:</i> <a>newCloudComponentStatus</a> smart constructor.
data CloudComponentStatus
CloudComponentStatus' :: Maybe CloudComponentState -> Maybe Text -> Maybe (HashMap Text Text) -> CloudComponentStatus

-- | The state of the component.
[$sel:componentState:CloudComponentStatus'] :: CloudComponentStatus -> Maybe CloudComponentState

-- | A message that communicates details, such as errors, about the status
--   of the component.
[$sel:message:CloudComponentStatus'] :: CloudComponentStatus -> Maybe Text

-- | A dictionary of errors that communicate why the component is in an
--   error state. For example, if IoT Greengrass can't access an artifact
--   for the component, then <tt>errors</tt> contains the artifact's URI as
--   a key, and the error message as the value for that key.
[$sel:errors:CloudComponentStatus'] :: CloudComponentStatus -> Maybe (HashMap Text Text)

-- | Create a value of <a>CloudComponentStatus</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:componentState:CloudComponentStatus'</a>,
--   <a>cloudComponentStatus_componentState</a> - The state of the
--   component.
--   
--   <a>$sel:message:CloudComponentStatus'</a>,
--   <a>cloudComponentStatus_message</a> - A message that communicates
--   details, such as errors, about the status of the component.
--   
--   <a>$sel:errors:CloudComponentStatus'</a>,
--   <a>cloudComponentStatus_errors</a> - A dictionary of errors that
--   communicate why the component is in an error state. For example, if
--   IoT Greengrass can't access an artifact for the component, then
--   <tt>errors</tt> contains the artifact's URI as a key, and the error
--   message as the value for that key.
newCloudComponentStatus :: CloudComponentStatus

-- | The state of the component.
cloudComponentStatus_componentState :: Lens' CloudComponentStatus (Maybe CloudComponentState)

-- | A message that communicates details, such as errors, about the status
--   of the component.
cloudComponentStatus_message :: Lens' CloudComponentStatus (Maybe Text)

-- | A dictionary of errors that communicate why the component is in an
--   error state. For example, if IoT Greengrass can't access an artifact
--   for the component, then <tt>errors</tt> contains the artifact's URI as
--   a key, and the error message as the value for that key.
cloudComponentStatus_errors :: Lens' CloudComponentStatus (Maybe (HashMap Text Text))

-- | Contains information about a component.
--   
--   <i>See:</i> <a>newComponent</a> smart constructor.
data Component
Component' :: Maybe Text -> Maybe Text -> Maybe ComponentLatestVersion -> Component

-- | The <a>ARN</a> of the component version.
[$sel:arn:Component'] :: Component -> Maybe Text

-- | The name of the component.
[$sel:componentName:Component'] :: Component -> Maybe Text

-- | The latest version of the component and its details.
[$sel:latestVersion:Component'] :: Component -> Maybe ComponentLatestVersion

-- | Create a value of <a>Component</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:arn:Component'</a>, <a>component_arn</a> - The <a>ARN</a> of
--   the component version.
--   
--   <a>$sel:componentName:Component'</a>, <a>component_componentName</a> -
--   The name of the component.
--   
--   <a>$sel:latestVersion:Component'</a>, <a>component_latestVersion</a> -
--   The latest version of the component and its details.
newComponent :: Component

-- | The <a>ARN</a> of the component version.
component_arn :: Lens' Component (Maybe Text)

-- | The name of the component.
component_componentName :: Lens' Component (Maybe Text)

-- | The latest version of the component and its details.
component_latestVersion :: Lens' Component (Maybe ComponentLatestVersion)

-- | Contains information about a component that is a candidate to deploy
--   to a Greengrass core device.
--   
--   <i>See:</i> <a>newComponentCandidate</a> smart constructor.
data ComponentCandidate
ComponentCandidate' :: Maybe Text -> Maybe (HashMap Text Text) -> Maybe Text -> ComponentCandidate

-- | The version of the component.
[$sel:componentVersion:ComponentCandidate'] :: ComponentCandidate -> Maybe Text

-- | The version requirements for the component's dependencies. Greengrass
--   core devices get the version requirements from component recipes.
--   
--   IoT Greengrass V2 uses semantic version constraints. For more
--   information, see <a>Semantic Versioning</a>.
[$sel:versionRequirements:ComponentCandidate'] :: ComponentCandidate -> Maybe (HashMap Text Text)

-- | The name of the component.
[$sel:componentName:ComponentCandidate'] :: ComponentCandidate -> Maybe Text

-- | Create a value of <a>ComponentCandidate</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:componentVersion:ComponentCandidate'</a>,
--   <a>componentCandidate_componentVersion</a> - The version of the
--   component.
--   
--   <a>$sel:versionRequirements:ComponentCandidate'</a>,
--   <a>componentCandidate_versionRequirements</a> - The version
--   requirements for the component's dependencies. Greengrass core devices
--   get the version requirements from component recipes.
--   
--   IoT Greengrass V2 uses semantic version constraints. For more
--   information, see <a>Semantic Versioning</a>.
--   
--   <a>$sel:componentName:ComponentCandidate'</a>,
--   <a>componentCandidate_componentName</a> - The name of the component.
newComponentCandidate :: ComponentCandidate

-- | The version of the component.
componentCandidate_componentVersion :: Lens' ComponentCandidate (Maybe Text)

-- | The version requirements for the component's dependencies. Greengrass
--   core devices get the version requirements from component recipes.
--   
--   IoT Greengrass V2 uses semantic version constraints. For more
--   information, see <a>Semantic Versioning</a>.
componentCandidate_versionRequirements :: Lens' ComponentCandidate (Maybe (HashMap Text Text))

-- | The name of the component.
componentCandidate_componentName :: Lens' ComponentCandidate (Maybe Text)

-- | Contains information about a deployment's update to a component's
--   configuration on Greengrass core devices. For more information, see
--   <a>Update component configurations</a> in the <i>IoT Greengrass V2
--   Developer Guide</i>.
--   
--   <i>See:</i> <a>newComponentConfigurationUpdate</a> smart constructor.
data ComponentConfigurationUpdate
ComponentConfigurationUpdate' :: Maybe [Text] -> Maybe Text -> ComponentConfigurationUpdate

-- | The list of configuration nodes to reset to default values on target
--   devices. Use JSON pointers to specify each node to reset. JSON
--   pointers start with a forward slash (<tt>/</tt>) and use forward
--   slashes to separate the key for each level in the object. For more
--   information, see the <a>JSON pointer specification</a> and <a>Reset
--   configuration updates</a> in the <i>IoT Greengrass V2 Developer
--   Guide</i>.
[$sel:reset:ComponentConfigurationUpdate'] :: ComponentConfigurationUpdate -> Maybe [Text]

-- | A serialized JSON string that contains the configuration object to
--   merge to target devices. The core device merges this configuration
--   with the component's existing configuration. If this is the first time
--   a component deploys on a device, the core device merges this
--   configuration with the component's default configuration. This means
--   that the core device keeps it's existing configuration for keys and
--   values that you don't specify in this object. For more information,
--   see <a>Merge configuration updates</a> in the <i>IoT Greengrass V2
--   Developer Guide</i>.
[$sel:merge:ComponentConfigurationUpdate'] :: ComponentConfigurationUpdate -> Maybe Text

-- | Create a value of <a>ComponentConfigurationUpdate</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:reset:ComponentConfigurationUpdate'</a>,
--   <a>componentConfigurationUpdate_reset</a> - The list of configuration
--   nodes to reset to default values on target devices. Use JSON pointers
--   to specify each node to reset. JSON pointers start with a forward
--   slash (<tt>/</tt>) and use forward slashes to separate the key for
--   each level in the object. For more information, see the <a>JSON
--   pointer specification</a> and <a>Reset configuration updates</a> in
--   the <i>IoT Greengrass V2 Developer Guide</i>.
--   
--   <a>$sel:merge:ComponentConfigurationUpdate'</a>,
--   <a>componentConfigurationUpdate_merge</a> - A serialized JSON string
--   that contains the configuration object to merge to target devices. The
--   core device merges this configuration with the component's existing
--   configuration. If this is the first time a component deploys on a
--   device, the core device merges this configuration with the component's
--   default configuration. This means that the core device keeps it's
--   existing configuration for keys and values that you don't specify in
--   this object. For more information, see <a>Merge configuration
--   updates</a> in the <i>IoT Greengrass V2 Developer Guide</i>.
newComponentConfigurationUpdate :: ComponentConfigurationUpdate

-- | The list of configuration nodes to reset to default values on target
--   devices. Use JSON pointers to specify each node to reset. JSON
--   pointers start with a forward slash (<tt>/</tt>) and use forward
--   slashes to separate the key for each level in the object. For more
--   information, see the <a>JSON pointer specification</a> and <a>Reset
--   configuration updates</a> in the <i>IoT Greengrass V2 Developer
--   Guide</i>.
componentConfigurationUpdate_reset :: Lens' ComponentConfigurationUpdate (Maybe [Text])

-- | A serialized JSON string that contains the configuration object to
--   merge to target devices. The core device merges this configuration
--   with the component's existing configuration. If this is the first time
--   a component deploys on a device, the core device merges this
--   configuration with the component's default configuration. This means
--   that the core device keeps it's existing configuration for keys and
--   values that you don't specify in this object. For more information,
--   see <a>Merge configuration updates</a> in the <i>IoT Greengrass V2
--   Developer Guide</i>.
componentConfigurationUpdate_merge :: Lens' ComponentConfigurationUpdate (Maybe Text)

-- | Contains information about a component dependency for a Lambda
--   function component.
--   
--   <i>See:</i> <a>newComponentDependencyRequirement</a> smart
--   constructor.
data ComponentDependencyRequirement
ComponentDependencyRequirement' :: Maybe ComponentDependencyType -> Maybe Text -> ComponentDependencyRequirement

-- | The type of this dependency. Choose from the following options:
--   
--   <ul>
--   <li><tt>SOFT</tt> – The component doesn't restart if the dependency
--   changes state.</li>
--   <li><tt>HARD</tt> – The component restarts if the dependency changes
--   state.</li>
--   </ul>
--   
--   Default: <tt>HARD</tt>
[$sel:dependencyType:ComponentDependencyRequirement'] :: ComponentDependencyRequirement -> Maybe ComponentDependencyType

-- | The component version requirement for the component dependency.
--   
--   IoT Greengrass V2 uses semantic version constraints. For more
--   information, see <a>Semantic Versioning</a>.
[$sel:versionRequirement:ComponentDependencyRequirement'] :: ComponentDependencyRequirement -> Maybe Text

-- | Create a value of <a>ComponentDependencyRequirement</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dependencyType:ComponentDependencyRequirement'</a>,
--   <a>componentDependencyRequirement_dependencyType</a> - The type of
--   this dependency. Choose from the following options:
--   
--   <ul>
--   <li><tt>SOFT</tt> – The component doesn't restart if the dependency
--   changes state.</li>
--   <li><tt>HARD</tt> – The component restarts if the dependency changes
--   state.</li>
--   </ul>
--   
--   Default: <tt>HARD</tt>
--   
--   <a>$sel:versionRequirement:ComponentDependencyRequirement'</a>,
--   <a>componentDependencyRequirement_versionRequirement</a> - The
--   component version requirement for the component dependency.
--   
--   IoT Greengrass V2 uses semantic version constraints. For more
--   information, see <a>Semantic Versioning</a>.
newComponentDependencyRequirement :: ComponentDependencyRequirement

-- | The type of this dependency. Choose from the following options:
--   
--   <ul>
--   <li><tt>SOFT</tt> – The component doesn't restart if the dependency
--   changes state.</li>
--   <li><tt>HARD</tt> – The component restarts if the dependency changes
--   state.</li>
--   </ul>
--   
--   Default: <tt>HARD</tt>
componentDependencyRequirement_dependencyType :: Lens' ComponentDependencyRequirement (Maybe ComponentDependencyType)

-- | The component version requirement for the component dependency.
--   
--   IoT Greengrass V2 uses semantic version constraints. For more
--   information, see <a>Semantic Versioning</a>.
componentDependencyRequirement_versionRequirement :: Lens' ComponentDependencyRequirement (Maybe Text)

-- | Contains information about a component to deploy.
--   
--   <i>See:</i> <a>newComponentDeploymentSpecification</a> smart
--   constructor.
data ComponentDeploymentSpecification
ComponentDeploymentSpecification' :: Maybe Text -> Maybe ComponentRunWith -> Maybe ComponentConfigurationUpdate -> ComponentDeploymentSpecification

-- | The version of the component.
[$sel:componentVersion:ComponentDeploymentSpecification'] :: ComponentDeploymentSpecification -> Maybe Text

-- | The system user and group that the IoT Greengrass Core software uses
--   to run component processes on the core device. If you omit this
--   parameter, the IoT Greengrass Core software uses the system user and
--   group that you configure for the core device. For more information,
--   see <a>Configure the user and group that run components</a> in the
--   <i>IoT Greengrass V2 Developer Guide</i>.
[$sel:runWith:ComponentDeploymentSpecification'] :: ComponentDeploymentSpecification -> Maybe ComponentRunWith

-- | The configuration updates to deploy for the component. You can define
--   <i>reset</i> updates and <i>merge</i> updates. A reset updates the
--   keys that you specify to the default configuration for the component.
--   A merge updates the core device's component configuration with the
--   keys and values that you specify. The IoT Greengrass Core software
--   applies reset updates before it applies merge updates. For more
--   information, see <a>Update component configurations</a> in the <i>IoT
--   Greengrass V2 Developer Guide</i>.
[$sel:configurationUpdate:ComponentDeploymentSpecification'] :: ComponentDeploymentSpecification -> Maybe ComponentConfigurationUpdate

-- | Create a value of <a>ComponentDeploymentSpecification</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:componentVersion:ComponentDeploymentSpecification'</a>,
--   <a>componentDeploymentSpecification_componentVersion</a> - The version
--   of the component.
--   
--   <a>$sel:runWith:ComponentDeploymentSpecification'</a>,
--   <a>componentDeploymentSpecification_runWith</a> - The system user and
--   group that the IoT Greengrass Core software uses to run component
--   processes on the core device. If you omit this parameter, the IoT
--   Greengrass Core software uses the system user and group that you
--   configure for the core device. For more information, see <a>Configure
--   the user and group that run components</a> in the <i>IoT Greengrass V2
--   Developer Guide</i>.
--   
--   <a>$sel:configurationUpdate:ComponentDeploymentSpecification'</a>,
--   <a>componentDeploymentSpecification_configurationUpdate</a> - The
--   configuration updates to deploy for the component. You can define
--   <i>reset</i> updates and <i>merge</i> updates. A reset updates the
--   keys that you specify to the default configuration for the component.
--   A merge updates the core device's component configuration with the
--   keys and values that you specify. The IoT Greengrass Core software
--   applies reset updates before it applies merge updates. For more
--   information, see <a>Update component configurations</a> in the <i>IoT
--   Greengrass V2 Developer Guide</i>.
newComponentDeploymentSpecification :: ComponentDeploymentSpecification

-- | The version of the component.
componentDeploymentSpecification_componentVersion :: Lens' ComponentDeploymentSpecification (Maybe Text)

-- | The system user and group that the IoT Greengrass Core software uses
--   to run component processes on the core device. If you omit this
--   parameter, the IoT Greengrass Core software uses the system user and
--   group that you configure for the core device. For more information,
--   see <a>Configure the user and group that run components</a> in the
--   <i>IoT Greengrass V2 Developer Guide</i>.
componentDeploymentSpecification_runWith :: Lens' ComponentDeploymentSpecification (Maybe ComponentRunWith)

-- | The configuration updates to deploy for the component. You can define
--   <i>reset</i> updates and <i>merge</i> updates. A reset updates the
--   keys that you specify to the default configuration for the component.
--   A merge updates the core device's component configuration with the
--   keys and values that you specify. The IoT Greengrass Core software
--   applies reset updates before it applies merge updates. For more
--   information, see <a>Update component configurations</a> in the <i>IoT
--   Greengrass V2 Developer Guide</i>.
componentDeploymentSpecification_configurationUpdate :: Lens' ComponentDeploymentSpecification (Maybe ComponentConfigurationUpdate)

-- | Contains information about the latest version of a component.
--   
--   <i>See:</i> <a>newComponentLatestVersion</a> smart constructor.
data ComponentLatestVersion
ComponentLatestVersion' :: Maybe [ComponentPlatform] -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe Text -> ComponentLatestVersion

-- | The platforms that the component version supports.
[$sel:platforms:ComponentLatestVersion'] :: ComponentLatestVersion -> Maybe [ComponentPlatform]

-- | The <a>ARN</a> of the component version.
[$sel:arn:ComponentLatestVersion'] :: ComponentLatestVersion -> Maybe Text

-- | The version of the component.
[$sel:componentVersion:ComponentLatestVersion'] :: ComponentLatestVersion -> Maybe Text

-- | The time at which the component was created, expressed in ISO 8601
--   format.
[$sel:creationTimestamp:ComponentLatestVersion'] :: ComponentLatestVersion -> Maybe POSIX

-- | The publisher of the component version.
[$sel:publisher:ComponentLatestVersion'] :: ComponentLatestVersion -> Maybe Text

-- | The description of the component version.
[$sel:description:ComponentLatestVersion'] :: ComponentLatestVersion -> Maybe Text

-- | Create a value of <a>ComponentLatestVersion</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:platforms:ComponentLatestVersion'</a>,
--   <a>componentLatestVersion_platforms</a> - The platforms that the
--   component version supports.
--   
--   <a>$sel:arn:ComponentLatestVersion'</a>,
--   <a>componentLatestVersion_arn</a> - The <a>ARN</a> of the component
--   version.
--   
--   <a>$sel:componentVersion:ComponentLatestVersion'</a>,
--   <a>componentLatestVersion_componentVersion</a> - The version of the
--   component.
--   
--   <a>$sel:creationTimestamp:ComponentLatestVersion'</a>,
--   <a>componentLatestVersion_creationTimestamp</a> - The time at which
--   the component was created, expressed in ISO 8601 format.
--   
--   <a>$sel:publisher:ComponentLatestVersion'</a>,
--   <a>componentLatestVersion_publisher</a> - The publisher of the
--   component version.
--   
--   <a>$sel:description:ComponentLatestVersion'</a>,
--   <a>componentLatestVersion_description</a> - The description of the
--   component version.
newComponentLatestVersion :: ComponentLatestVersion

-- | The platforms that the component version supports.
componentLatestVersion_platforms :: Lens' ComponentLatestVersion (Maybe [ComponentPlatform])

-- | The <a>ARN</a> of the component version.
componentLatestVersion_arn :: Lens' ComponentLatestVersion (Maybe Text)

-- | The version of the component.
componentLatestVersion_componentVersion :: Lens' ComponentLatestVersion (Maybe Text)

-- | The time at which the component was created, expressed in ISO 8601
--   format.
componentLatestVersion_creationTimestamp :: Lens' ComponentLatestVersion (Maybe UTCTime)

-- | The publisher of the component version.
componentLatestVersion_publisher :: Lens' ComponentLatestVersion (Maybe Text)

-- | The description of the component version.
componentLatestVersion_description :: Lens' ComponentLatestVersion (Maybe Text)

-- | Contains information about a platform that a component supports.
--   
--   <i>See:</i> <a>newComponentPlatform</a> smart constructor.
data ComponentPlatform
ComponentPlatform' :: Maybe Text -> Maybe (HashMap Text Text) -> ComponentPlatform

-- | The friendly name of the platform. This name helps you identify the
--   platform.
--   
--   If you omit this parameter, IoT Greengrass creates a friendly name
--   from the <tt>os</tt> and <tt>architecture</tt> of the platform.
[$sel:name:ComponentPlatform'] :: ComponentPlatform -> Maybe Text

-- | A dictionary of attributes for the platform. The IoT Greengrass Core
--   software defines the <tt>os</tt> and <tt>platform</tt> by default. You
--   can specify additional platform attributes for a core device when you
--   deploy the Greengrass nucleus component. For more information, see the
--   <a>Greengrass nucleus component</a> in the <i>IoT Greengrass V2
--   Developer Guide</i>.
[$sel:attributes:ComponentPlatform'] :: ComponentPlatform -> Maybe (HashMap Text Text)

-- | Create a value of <a>ComponentPlatform</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:name:ComponentPlatform'</a>, <a>componentPlatform_name</a> -
--   The friendly name of the platform. This name helps you identify the
--   platform.
--   
--   If you omit this parameter, IoT Greengrass creates a friendly name
--   from the <tt>os</tt> and <tt>architecture</tt> of the platform.
--   
--   <a>$sel:attributes:ComponentPlatform'</a>,
--   <a>componentPlatform_attributes</a> - A dictionary of attributes for
--   the platform. The IoT Greengrass Core software defines the <tt>os</tt>
--   and <tt>platform</tt> by default. You can specify additional platform
--   attributes for a core device when you deploy the Greengrass nucleus
--   component. For more information, see the <a>Greengrass nucleus
--   component</a> in the <i>IoT Greengrass V2 Developer Guide</i>.
newComponentPlatform :: ComponentPlatform

-- | The friendly name of the platform. This name helps you identify the
--   platform.
--   
--   If you omit this parameter, IoT Greengrass creates a friendly name
--   from the <tt>os</tt> and <tt>architecture</tt> of the platform.
componentPlatform_name :: Lens' ComponentPlatform (Maybe Text)

-- | A dictionary of attributes for the platform. The IoT Greengrass Core
--   software defines the <tt>os</tt> and <tt>platform</tt> by default. You
--   can specify additional platform attributes for a core device when you
--   deploy the Greengrass nucleus component. For more information, see the
--   <a>Greengrass nucleus component</a> in the <i>IoT Greengrass V2
--   Developer Guide</i>.
componentPlatform_attributes :: Lens' ComponentPlatform (Maybe (HashMap Text Text))

-- | Contains information system user and group that the IoT Greengrass
--   Core software uses to run component processes on the core device. For
--   more information, see <a>Configure the user and group that run
--   components</a> in the <i>IoT Greengrass V2 Developer Guide</i>.
--   
--   <i>See:</i> <a>newComponentRunWith</a> smart constructor.
data ComponentRunWith
ComponentRunWith' :: Maybe Text -> Maybe SystemResourceLimits -> ComponentRunWith

-- | The POSIX system user and (optional) group to use to run this
--   component. Specify the user and group separated by a colon
--   (<tt>:</tt>) in the following format: <tt>user:group</tt>. The group
--   is optional. If you don't specify a group, the IoT Greengrass Core
--   software uses the primary user for the group.
--   
--   If you omit this parameter, the IoT Greengrass Core software uses the
--   default system user and group that you configure on the Greengrass
--   nucleus component. For more information, see <a>Configure the user and
--   group that run components</a>.
[$sel:posixUser:ComponentRunWith'] :: ComponentRunWith -> Maybe Text

-- | The system resource limits to apply to this component's process on the
--   core device.
--   
--   If you omit this parameter, the IoT Greengrass Core software uses the
--   default system resource limits that you configure on the Greengrass
--   nucleus component. For more information, see <a>Configure system
--   resource limits for components</a>.
[$sel:systemResourceLimits:ComponentRunWith'] :: ComponentRunWith -> Maybe SystemResourceLimits

-- | Create a value of <a>ComponentRunWith</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:posixUser:ComponentRunWith'</a>,
--   <a>componentRunWith_posixUser</a> - The POSIX system user and
--   (optional) group to use to run this component. Specify the user and
--   group separated by a colon (<tt>:</tt>) in the following format:
--   <tt>user:group</tt>. The group is optional. If you don't specify a
--   group, the IoT Greengrass Core software uses the primary user for the
--   group.
--   
--   If you omit this parameter, the IoT Greengrass Core software uses the
--   default system user and group that you configure on the Greengrass
--   nucleus component. For more information, see <a>Configure the user and
--   group that run components</a>.
--   
--   <a>$sel:systemResourceLimits:ComponentRunWith'</a>,
--   <a>componentRunWith_systemResourceLimits</a> - The system resource
--   limits to apply to this component's process on the core device.
--   
--   If you omit this parameter, the IoT Greengrass Core software uses the
--   default system resource limits that you configure on the Greengrass
--   nucleus component. For more information, see <a>Configure system
--   resource limits for components</a>.
newComponentRunWith :: ComponentRunWith

-- | The POSIX system user and (optional) group to use to run this
--   component. Specify the user and group separated by a colon
--   (<tt>:</tt>) in the following format: <tt>user:group</tt>. The group
--   is optional. If you don't specify a group, the IoT Greengrass Core
--   software uses the primary user for the group.
--   
--   If you omit this parameter, the IoT Greengrass Core software uses the
--   default system user and group that you configure on the Greengrass
--   nucleus component. For more information, see <a>Configure the user and
--   group that run components</a>.
componentRunWith_posixUser :: Lens' ComponentRunWith (Maybe Text)

-- | The system resource limits to apply to this component's process on the
--   core device.
--   
--   If you omit this parameter, the IoT Greengrass Core software uses the
--   default system resource limits that you configure on the Greengrass
--   nucleus component. For more information, see <a>Configure system
--   resource limits for components</a>.
componentRunWith_systemResourceLimits :: Lens' ComponentRunWith (Maybe SystemResourceLimits)

-- | Contains information about a component version in a list.
--   
--   <i>See:</i> <a>newComponentVersionListItem</a> smart constructor.
data ComponentVersionListItem
ComponentVersionListItem' :: Maybe Text -> Maybe Text -> Maybe Text -> ComponentVersionListItem

-- | The <a>ARN</a> of the component version.
[$sel:arn:ComponentVersionListItem'] :: ComponentVersionListItem -> Maybe Text

-- | The version of the component.
[$sel:componentVersion:ComponentVersionListItem'] :: ComponentVersionListItem -> Maybe Text

-- | The name of the component.
[$sel:componentName:ComponentVersionListItem'] :: ComponentVersionListItem -> Maybe Text

-- | Create a value of <a>ComponentVersionListItem</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:arn:ComponentVersionListItem'</a>,
--   <a>componentVersionListItem_arn</a> - The <a>ARN</a> of the component
--   version.
--   
--   <a>$sel:componentVersion:ComponentVersionListItem'</a>,
--   <a>componentVersionListItem_componentVersion</a> - The version of the
--   component.
--   
--   <a>$sel:componentName:ComponentVersionListItem'</a>,
--   <a>componentVersionListItem_componentName</a> - The name of the
--   component.
newComponentVersionListItem :: ComponentVersionListItem

-- | The <a>ARN</a> of the component version.
componentVersionListItem_arn :: Lens' ComponentVersionListItem (Maybe Text)

-- | The version of the component.
componentVersionListItem_componentVersion :: Lens' ComponentVersionListItem (Maybe Text)

-- | The name of the component.
componentVersionListItem_componentName :: Lens' ComponentVersionListItem (Maybe Text)

-- | Contains information about a Greengrass core device, which is an IoT
--   thing that runs the IoT Greengrass Core software.
--   
--   <i>See:</i> <a>newCoreDevice</a> smart constructor.
data CoreDevice
CoreDevice' :: Maybe CoreDeviceStatus -> Maybe Text -> Maybe POSIX -> CoreDevice

-- | The status of the core device. Core devices can have the following
--   statuses:
--   
--   <ul>
--   <li><tt>HEALTHY</tt> – The IoT Greengrass Core software and all
--   components run on the core device without issue.</li>
--   <li><tt>UNHEALTHY</tt> – The IoT Greengrass Core software or a
--   component is in a failed state on the core device.</li>
--   </ul>
[$sel:status:CoreDevice'] :: CoreDevice -> Maybe CoreDeviceStatus

-- | The name of the core device. This is also the name of the IoT thing.
[$sel:coreDeviceThingName:CoreDevice'] :: CoreDevice -> Maybe Text

-- | The time at which the core device's status last updated, expressed in
--   ISO 8601 format.
[$sel:lastStatusUpdateTimestamp:CoreDevice'] :: CoreDevice -> Maybe POSIX

-- | Create a value of <a>CoreDevice</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:CoreDevice'</a>, <a>coreDevice_status</a> - The status
--   of the core device. Core devices can have the following statuses:
--   
--   <ul>
--   <li><tt>HEALTHY</tt> – The IoT Greengrass Core software and all
--   components run on the core device without issue.</li>
--   <li><tt>UNHEALTHY</tt> – The IoT Greengrass Core software or a
--   component is in a failed state on the core device.</li>
--   </ul>
--   
--   <a>$sel:coreDeviceThingName:CoreDevice'</a>,
--   <a>coreDevice_coreDeviceThingName</a> - The name of the core device.
--   This is also the name of the IoT thing.
--   
--   <a>$sel:lastStatusUpdateTimestamp:CoreDevice'</a>,
--   <a>coreDevice_lastStatusUpdateTimestamp</a> - The time at which the
--   core device's status last updated, expressed in ISO 8601 format.
newCoreDevice :: CoreDevice

-- | The status of the core device. Core devices can have the following
--   statuses:
--   
--   <ul>
--   <li><tt>HEALTHY</tt> – The IoT Greengrass Core software and all
--   components run on the core device without issue.</li>
--   <li><tt>UNHEALTHY</tt> – The IoT Greengrass Core software or a
--   component is in a failed state on the core device.</li>
--   </ul>
coreDevice_status :: Lens' CoreDevice (Maybe CoreDeviceStatus)

-- | The name of the core device. This is also the name of the IoT thing.
coreDevice_coreDeviceThingName :: Lens' CoreDevice (Maybe Text)

-- | The time at which the core device's status last updated, expressed in
--   ISO 8601 format.
coreDevice_lastStatusUpdateTimestamp :: Lens' CoreDevice (Maybe UTCTime)

-- | Contains information about a deployment.
--   
--   <i>See:</i> <a>newDeployment</a> smart constructor.
data Deployment
Deployment' :: Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe DeploymentStatus -> Maybe Bool -> Maybe Text -> Maybe Text -> Deployment

-- | The <a>ARN</a> of the target IoT thing or thing group.
[$sel:targetArn:Deployment'] :: Deployment -> Maybe Text

-- | The ID of the deployment.
[$sel:deploymentId:Deployment'] :: Deployment -> Maybe Text

-- | The time at which the deployment was created, expressed in ISO 8601
--   format.
[$sel:creationTimestamp:Deployment'] :: Deployment -> Maybe POSIX

-- | The status of the deployment.
[$sel:deploymentStatus:Deployment'] :: Deployment -> Maybe DeploymentStatus

-- | Whether or not the deployment is the latest revision for its target.
[$sel:isLatestForTarget:Deployment'] :: Deployment -> Maybe Bool

-- | The revision number of the deployment.
[$sel:revisionId:Deployment'] :: Deployment -> Maybe Text

-- | The name of the deployment.
[$sel:deploymentName:Deployment'] :: Deployment -> Maybe Text

-- | Create a value of <a>Deployment</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:targetArn:Deployment'</a>, <a>deployment_targetArn</a> - The
--   <a>ARN</a> of the target IoT thing or thing group.
--   
--   <a>$sel:deploymentId:Deployment'</a>, <a>deployment_deploymentId</a> -
--   The ID of the deployment.
--   
--   <a>$sel:creationTimestamp:Deployment'</a>,
--   <a>deployment_creationTimestamp</a> - The time at which the deployment
--   was created, expressed in ISO 8601 format.
--   
--   <a>$sel:deploymentStatus:Deployment'</a>,
--   <a>deployment_deploymentStatus</a> - The status of the deployment.
--   
--   <a>$sel:isLatestForTarget:Deployment'</a>,
--   <a>deployment_isLatestForTarget</a> - Whether or not the deployment is
--   the latest revision for its target.
--   
--   <a>$sel:revisionId:Deployment'</a>, <a>deployment_revisionId</a> - The
--   revision number of the deployment.
--   
--   <a>$sel:deploymentName:Deployment'</a>,
--   <a>deployment_deploymentName</a> - The name of the deployment.
newDeployment :: Deployment

-- | The <a>ARN</a> of the target IoT thing or thing group.
deployment_targetArn :: Lens' Deployment (Maybe Text)

-- | The ID of the deployment.
deployment_deploymentId :: Lens' Deployment (Maybe Text)

-- | The time at which the deployment was created, expressed in ISO 8601
--   format.
deployment_creationTimestamp :: Lens' Deployment (Maybe UTCTime)

-- | The status of the deployment.
deployment_deploymentStatus :: Lens' Deployment (Maybe DeploymentStatus)

-- | Whether or not the deployment is the latest revision for its target.
deployment_isLatestForTarget :: Lens' Deployment (Maybe Bool)

-- | The revision number of the deployment.
deployment_revisionId :: Lens' Deployment (Maybe Text)

-- | The name of the deployment.
deployment_deploymentName :: Lens' Deployment (Maybe Text)

-- | Contains information about a deployment's policy that defines when
--   components are safe to update.
--   
--   Each component on a device can report whether or not it's ready to
--   update. After a component and its dependencies are ready, they can
--   apply the update in the deployment. You can configure whether or not
--   the deployment notifies components of an update and waits for a
--   response. You specify the amount of time each component has to respond
--   to the update notification.
--   
--   <i>See:</i> <a>newDeploymentComponentUpdatePolicy</a> smart
--   constructor.
data DeploymentComponentUpdatePolicy
DeploymentComponentUpdatePolicy' :: Maybe DeploymentComponentUpdatePolicyAction -> Maybe Int -> DeploymentComponentUpdatePolicy

-- | Whether or not to notify components and wait for components to become
--   safe to update. Choose from the following options:
--   
--   <ul>
--   <li><tt>NOTIFY_COMPONENTS</tt> – The deployment notifies each
--   component before it stops and updates that component. Components can
--   use the <a>SubscribeToComponentUpdates</a> IPC operation to receive
--   these notifications. Then, components can respond with the
--   <a>DeferComponentUpdate</a> IPC operation. For more information, see
--   <a>Create deployments</a> in the <i>IoT Greengrass V2 Developer
--   Guide</i>.</li>
--   <li><tt>SKIP_NOTIFY_COMPONENTS</tt> – The deployment doesn't notify
--   components or wait for them to be safe to update.</li>
--   </ul>
--   
--   Default: <tt>NOTIFY_COMPONENTS</tt>
[$sel:action:DeploymentComponentUpdatePolicy'] :: DeploymentComponentUpdatePolicy -> Maybe DeploymentComponentUpdatePolicyAction

-- | The amount of time in seconds that each component on a device has to
--   report that it's safe to update. If the component waits for longer
--   than this timeout, then the deployment proceeds on the device.
--   
--   Default: <tt>60</tt>
[$sel:timeoutInSeconds:DeploymentComponentUpdatePolicy'] :: DeploymentComponentUpdatePolicy -> Maybe Int

-- | Create a value of <a>DeploymentComponentUpdatePolicy</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:action:DeploymentComponentUpdatePolicy'</a>,
--   <a>deploymentComponentUpdatePolicy_action</a> - Whether or not to
--   notify components and wait for components to become safe to update.
--   Choose from the following options:
--   
--   <ul>
--   <li><tt>NOTIFY_COMPONENTS</tt> – The deployment notifies each
--   component before it stops and updates that component. Components can
--   use the <a>SubscribeToComponentUpdates</a> IPC operation to receive
--   these notifications. Then, components can respond with the
--   <a>DeferComponentUpdate</a> IPC operation. For more information, see
--   <a>Create deployments</a> in the <i>IoT Greengrass V2 Developer
--   Guide</i>.</li>
--   <li><tt>SKIP_NOTIFY_COMPONENTS</tt> – The deployment doesn't notify
--   components or wait for them to be safe to update.</li>
--   </ul>
--   
--   Default: <tt>NOTIFY_COMPONENTS</tt>
--   
--   <a>$sel:timeoutInSeconds:DeploymentComponentUpdatePolicy'</a>,
--   <a>deploymentComponentUpdatePolicy_timeoutInSeconds</a> - The amount
--   of time in seconds that each component on a device has to report that
--   it's safe to update. If the component waits for longer than this
--   timeout, then the deployment proceeds on the device.
--   
--   Default: <tt>60</tt>
newDeploymentComponentUpdatePolicy :: DeploymentComponentUpdatePolicy

-- | Whether or not to notify components and wait for components to become
--   safe to update. Choose from the following options:
--   
--   <ul>
--   <li><tt>NOTIFY_COMPONENTS</tt> – The deployment notifies each
--   component before it stops and updates that component. Components can
--   use the <a>SubscribeToComponentUpdates</a> IPC operation to receive
--   these notifications. Then, components can respond with the
--   <a>DeferComponentUpdate</a> IPC operation. For more information, see
--   <a>Create deployments</a> in the <i>IoT Greengrass V2 Developer
--   Guide</i>.</li>
--   <li><tt>SKIP_NOTIFY_COMPONENTS</tt> – The deployment doesn't notify
--   components or wait for them to be safe to update.</li>
--   </ul>
--   
--   Default: <tt>NOTIFY_COMPONENTS</tt>
deploymentComponentUpdatePolicy_action :: Lens' DeploymentComponentUpdatePolicy (Maybe DeploymentComponentUpdatePolicyAction)

-- | The amount of time in seconds that each component on a device has to
--   report that it's safe to update. If the component waits for longer
--   than this timeout, then the deployment proceeds on the device.
--   
--   Default: <tt>60</tt>
deploymentComponentUpdatePolicy_timeoutInSeconds :: Lens' DeploymentComponentUpdatePolicy (Maybe Int)

-- | Contains information about how long a component on a core device can
--   validate its configuration updates before it times out. Components can
--   use the <a>SubscribeToValidateConfigurationUpdates</a> IPC operation
--   to receive notifications when a deployment specifies a configuration
--   update. Then, components can respond with the
--   <a>SendConfigurationValidityReport</a> IPC operation. For more
--   information, see <a>Create deployments</a> in the <i>IoT Greengrass V2
--   Developer Guide</i>.
--   
--   <i>See:</i> <a>newDeploymentConfigurationValidationPolicy</a> smart
--   constructor.
data DeploymentConfigurationValidationPolicy
DeploymentConfigurationValidationPolicy' :: Maybe Int -> DeploymentConfigurationValidationPolicy

-- | The amount of time in seconds that a component can validate its
--   configuration updates. If the validation time exceeds this timeout,
--   then the deployment proceeds for the device.
--   
--   Default: <tt>30</tt>
[$sel:timeoutInSeconds:DeploymentConfigurationValidationPolicy'] :: DeploymentConfigurationValidationPolicy -> Maybe Int

-- | Create a value of <a>DeploymentConfigurationValidationPolicy</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:timeoutInSeconds:DeploymentConfigurationValidationPolicy'</a>,
--   <a>deploymentConfigurationValidationPolicy_timeoutInSeconds</a> - The
--   amount of time in seconds that a component can validate its
--   configuration updates. If the validation time exceeds this timeout,
--   then the deployment proceeds for the device.
--   
--   Default: <tt>30</tt>
newDeploymentConfigurationValidationPolicy :: DeploymentConfigurationValidationPolicy

-- | The amount of time in seconds that a component can validate its
--   configuration updates. If the validation time exceeds this timeout,
--   then the deployment proceeds for the device.
--   
--   Default: <tt>30</tt>
deploymentConfigurationValidationPolicy_timeoutInSeconds :: Lens' DeploymentConfigurationValidationPolicy (Maybe Int)

-- | Contains information about an IoT job configuration.
--   
--   <i>See:</i> <a>newDeploymentIoTJobConfiguration</a> smart constructor.
data DeploymentIoTJobConfiguration
DeploymentIoTJobConfiguration' :: Maybe IoTJobExecutionsRolloutConfig -> Maybe IoTJobAbortConfig -> Maybe IoTJobTimeoutConfig -> DeploymentIoTJobConfiguration

-- | The rollout configuration for the job. This configuration defines the
--   rate at which the job rolls out to the fleet of target devices.
[$sel:jobExecutionsRolloutConfig:DeploymentIoTJobConfiguration'] :: DeploymentIoTJobConfiguration -> Maybe IoTJobExecutionsRolloutConfig

-- | The stop configuration for the job. This configuration defines when
--   and how to stop a job rollout.
[$sel:abortConfig:DeploymentIoTJobConfiguration'] :: DeploymentIoTJobConfiguration -> Maybe IoTJobAbortConfig

-- | The timeout configuration for the job. This configuration defines the
--   amount of time each device has to complete the job.
[$sel:timeoutConfig:DeploymentIoTJobConfiguration'] :: DeploymentIoTJobConfiguration -> Maybe IoTJobTimeoutConfig

-- | Create a value of <a>DeploymentIoTJobConfiguration</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:jobExecutionsRolloutConfig:DeploymentIoTJobConfiguration'</a>,
--   <a>deploymentIoTJobConfiguration_jobExecutionsRolloutConfig</a> - The
--   rollout configuration for the job. This configuration defines the rate
--   at which the job rolls out to the fleet of target devices.
--   
--   <a>$sel:abortConfig:DeploymentIoTJobConfiguration'</a>,
--   <a>deploymentIoTJobConfiguration_abortConfig</a> - The stop
--   configuration for the job. This configuration defines when and how to
--   stop a job rollout.
--   
--   <a>$sel:timeoutConfig:DeploymentIoTJobConfiguration'</a>,
--   <a>deploymentIoTJobConfiguration_timeoutConfig</a> - The timeout
--   configuration for the job. This configuration defines the amount of
--   time each device has to complete the job.
newDeploymentIoTJobConfiguration :: DeploymentIoTJobConfiguration

-- | The rollout configuration for the job. This configuration defines the
--   rate at which the job rolls out to the fleet of target devices.
deploymentIoTJobConfiguration_jobExecutionsRolloutConfig :: Lens' DeploymentIoTJobConfiguration (Maybe IoTJobExecutionsRolloutConfig)

-- | The stop configuration for the job. This configuration defines when
--   and how to stop a job rollout.
deploymentIoTJobConfiguration_abortConfig :: Lens' DeploymentIoTJobConfiguration (Maybe IoTJobAbortConfig)

-- | The timeout configuration for the job. This configuration defines the
--   amount of time each device has to complete the job.
deploymentIoTJobConfiguration_timeoutConfig :: Lens' DeploymentIoTJobConfiguration (Maybe IoTJobTimeoutConfig)

-- | Contains information about policies that define how a deployment
--   updates components and handles failure.
--   
--   <i>See:</i> <a>newDeploymentPolicies</a> smart constructor.
data DeploymentPolicies
DeploymentPolicies' :: Maybe DeploymentFailureHandlingPolicy -> Maybe DeploymentConfigurationValidationPolicy -> Maybe DeploymentComponentUpdatePolicy -> DeploymentPolicies

-- | The failure handling policy for the configuration deployment. This
--   policy defines what to do if the deployment fails.
--   
--   Default: <tt>ROLLBACK</tt>
[$sel:failureHandlingPolicy:DeploymentPolicies'] :: DeploymentPolicies -> Maybe DeploymentFailureHandlingPolicy

-- | The configuration validation policy for the configuration deployment.
--   This policy defines how long each component has to validate its
--   configure updates.
[$sel:configurationValidationPolicy:DeploymentPolicies'] :: DeploymentPolicies -> Maybe DeploymentConfigurationValidationPolicy

-- | The component update policy for the configuration deployment. This
--   policy defines when it's safe to deploy the configuration to devices.
[$sel:componentUpdatePolicy:DeploymentPolicies'] :: DeploymentPolicies -> Maybe DeploymentComponentUpdatePolicy

-- | Create a value of <a>DeploymentPolicies</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failureHandlingPolicy:DeploymentPolicies'</a>,
--   <a>deploymentPolicies_failureHandlingPolicy</a> - The failure handling
--   policy for the configuration deployment. This policy defines what to
--   do if the deployment fails.
--   
--   Default: <tt>ROLLBACK</tt>
--   
--   <a>$sel:configurationValidationPolicy:DeploymentPolicies'</a>,
--   <a>deploymentPolicies_configurationValidationPolicy</a> - The
--   configuration validation policy for the configuration deployment. This
--   policy defines how long each component has to validate its configure
--   updates.
--   
--   <a>$sel:componentUpdatePolicy:DeploymentPolicies'</a>,
--   <a>deploymentPolicies_componentUpdatePolicy</a> - The component update
--   policy for the configuration deployment. This policy defines when it's
--   safe to deploy the configuration to devices.
newDeploymentPolicies :: DeploymentPolicies

-- | The failure handling policy for the configuration deployment. This
--   policy defines what to do if the deployment fails.
--   
--   Default: <tt>ROLLBACK</tt>
deploymentPolicies_failureHandlingPolicy :: Lens' DeploymentPolicies (Maybe DeploymentFailureHandlingPolicy)

-- | The configuration validation policy for the configuration deployment.
--   This policy defines how long each component has to validate its
--   configure updates.
deploymentPolicies_configurationValidationPolicy :: Lens' DeploymentPolicies (Maybe DeploymentConfigurationValidationPolicy)

-- | The component update policy for the configuration deployment. This
--   policy defines when it's safe to deploy the configuration to devices.
deploymentPolicies_componentUpdatePolicy :: Lens' DeploymentPolicies (Maybe DeploymentComponentUpdatePolicy)

-- | Contains a request to disassociate a client device from a core device.
--   The <a>BatchDisassociateClientDeviceWithCoreDevice</a> operation
--   consumes a list of these requests.
--   
--   <i>See:</i> <a>newDisassociateClientDeviceFromCoreDeviceEntry</a>
--   smart constructor.
data DisassociateClientDeviceFromCoreDeviceEntry
DisassociateClientDeviceFromCoreDeviceEntry' :: Text -> DisassociateClientDeviceFromCoreDeviceEntry

-- | The name of the IoT thing that represents the client device to
--   disassociate.
[$sel:thingName:DisassociateClientDeviceFromCoreDeviceEntry'] :: DisassociateClientDeviceFromCoreDeviceEntry -> Text

-- | Create a value of <a>DisassociateClientDeviceFromCoreDeviceEntry</a>
--   with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:thingName:DisassociateClientDeviceFromCoreDeviceEntry'</a>,
--   <a>disassociateClientDeviceFromCoreDeviceEntry_thingName</a> - The
--   name of the IoT thing that represents the client device to
--   disassociate.
newDisassociateClientDeviceFromCoreDeviceEntry :: Text -> DisassociateClientDeviceFromCoreDeviceEntry

-- | The name of the IoT thing that represents the client device to
--   disassociate.
disassociateClientDeviceFromCoreDeviceEntry_thingName :: Lens' DisassociateClientDeviceFromCoreDeviceEntry Text

-- | Contains an error that occurs from a request to disassociate a client
--   device from a core device. The
--   <a>BatchDisassociateClientDeviceWithCoreDevice</a> operation returns a
--   list of these errors.
--   
--   <i>See:</i> <a>newDisassociateClientDeviceFromCoreDeviceErrorEntry</a>
--   smart constructor.
data DisassociateClientDeviceFromCoreDeviceErrorEntry
DisassociateClientDeviceFromCoreDeviceErrorEntry' :: Maybe Text -> Maybe Text -> Maybe Text -> DisassociateClientDeviceFromCoreDeviceErrorEntry

-- | The error code for the request.
[$sel:code:DisassociateClientDeviceFromCoreDeviceErrorEntry'] :: DisassociateClientDeviceFromCoreDeviceErrorEntry -> Maybe Text

-- | A message that provides additional information about the error.
[$sel:message:DisassociateClientDeviceFromCoreDeviceErrorEntry'] :: DisassociateClientDeviceFromCoreDeviceErrorEntry -> Maybe Text

-- | The name of the IoT thing whose disassociate request failed.
[$sel:thingName:DisassociateClientDeviceFromCoreDeviceErrorEntry'] :: DisassociateClientDeviceFromCoreDeviceErrorEntry -> Maybe Text

-- | Create a value of
--   <a>DisassociateClientDeviceFromCoreDeviceErrorEntry</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:code:DisassociateClientDeviceFromCoreDeviceErrorEntry'</a>,
--   <a>disassociateClientDeviceFromCoreDeviceErrorEntry_code</a> - The
--   error code for the request.
--   
--   <a>$sel:message:DisassociateClientDeviceFromCoreDeviceErrorEntry'</a>,
--   <a>disassociateClientDeviceFromCoreDeviceErrorEntry_message</a> - A
--   message that provides additional information about the error.
--   
--   
--   <a>$sel:thingName:DisassociateClientDeviceFromCoreDeviceErrorEntry'</a>,
--   <a>disassociateClientDeviceFromCoreDeviceErrorEntry_thingName</a> -
--   The name of the IoT thing whose disassociate request failed.
newDisassociateClientDeviceFromCoreDeviceErrorEntry :: DisassociateClientDeviceFromCoreDeviceErrorEntry

-- | The error code for the request.
disassociateClientDeviceFromCoreDeviceErrorEntry_code :: Lens' DisassociateClientDeviceFromCoreDeviceErrorEntry (Maybe Text)

-- | A message that provides additional information about the error.
disassociateClientDeviceFromCoreDeviceErrorEntry_message :: Lens' DisassociateClientDeviceFromCoreDeviceErrorEntry (Maybe Text)

-- | The name of the IoT thing whose disassociate request failed.
disassociateClientDeviceFromCoreDeviceErrorEntry_thingName :: Lens' DisassociateClientDeviceFromCoreDeviceErrorEntry (Maybe Text)

-- | Contains information about a deployment job that IoT Greengrass sends
--   to a Greengrass core device.
--   
--   <i>See:</i> <a>newEffectiveDeployment</a> smart constructor.
data EffectiveDeployment
EffectiveDeployment' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Text -> Text -> Text -> EffectiveDeploymentExecutionStatus -> POSIX -> POSIX -> EffectiveDeployment

-- | The ID of the IoT job that applies the deployment to target devices.
[$sel:iotJobId:EffectiveDeployment'] :: EffectiveDeployment -> Maybe Text

-- | The <a>ARN</a> of the IoT job that applies the deployment to target
--   devices.
[$sel:iotJobArn:EffectiveDeployment'] :: EffectiveDeployment -> Maybe Text

-- | The reason code for the update, if the job was updated.
[$sel:reason:EffectiveDeployment'] :: EffectiveDeployment -> Maybe Text

-- | The description of the deployment job.
[$sel:description:EffectiveDeployment'] :: EffectiveDeployment -> Maybe Text

-- | The ID of the deployment.
[$sel:deploymentId:EffectiveDeployment'] :: EffectiveDeployment -> Text

-- | The name of the deployment.
[$sel:deploymentName:EffectiveDeployment'] :: EffectiveDeployment -> Text

-- | The <a>ARN</a> of the target IoT thing or thing group.
[$sel:targetArn:EffectiveDeployment'] :: EffectiveDeployment -> Text

-- | The status of the deployment job on the Greengrass core device.
[$sel:coreDeviceExecutionStatus:EffectiveDeployment'] :: EffectiveDeployment -> EffectiveDeploymentExecutionStatus

-- | The time at which the deployment was created, expressed in ISO 8601
--   format.
[$sel:creationTimestamp:EffectiveDeployment'] :: EffectiveDeployment -> POSIX

-- | The time at which the deployment job was last modified, expressed in
--   ISO 8601 format.
[$sel:modifiedTimestamp:EffectiveDeployment'] :: EffectiveDeployment -> POSIX

-- | Create a value of <a>EffectiveDeployment</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:iotJobId:EffectiveDeployment'</a>,
--   <a>effectiveDeployment_iotJobId</a> - The ID of the IoT job that
--   applies the deployment to target devices.
--   
--   <a>$sel:iotJobArn:EffectiveDeployment'</a>,
--   <a>effectiveDeployment_iotJobArn</a> - The <a>ARN</a> of the IoT job
--   that applies the deployment to target devices.
--   
--   <a>$sel:reason:EffectiveDeployment'</a>,
--   <a>effectiveDeployment_reason</a> - The reason code for the update, if
--   the job was updated.
--   
--   <a>$sel:description:EffectiveDeployment'</a>,
--   <a>effectiveDeployment_description</a> - The description of the
--   deployment job.
--   
--   <a>$sel:deploymentId:EffectiveDeployment'</a>,
--   <a>effectiveDeployment_deploymentId</a> - The ID of the deployment.
--   
--   <a>$sel:deploymentName:EffectiveDeployment'</a>,
--   <a>effectiveDeployment_deploymentName</a> - The name of the
--   deployment.
--   
--   <a>$sel:targetArn:EffectiveDeployment'</a>,
--   <a>effectiveDeployment_targetArn</a> - The <a>ARN</a> of the target
--   IoT thing or thing group.
--   
--   <a>$sel:coreDeviceExecutionStatus:EffectiveDeployment'</a>,
--   <a>effectiveDeployment_coreDeviceExecutionStatus</a> - The status of
--   the deployment job on the Greengrass core device.
--   
--   <a>$sel:creationTimestamp:EffectiveDeployment'</a>,
--   <a>effectiveDeployment_creationTimestamp</a> - The time at which the
--   deployment was created, expressed in ISO 8601 format.
--   
--   <a>$sel:modifiedTimestamp:EffectiveDeployment'</a>,
--   <a>effectiveDeployment_modifiedTimestamp</a> - The time at which the
--   deployment job was last modified, expressed in ISO 8601 format.
newEffectiveDeployment :: Text -> Text -> Text -> EffectiveDeploymentExecutionStatus -> UTCTime -> UTCTime -> EffectiveDeployment

-- | The ID of the IoT job that applies the deployment to target devices.
effectiveDeployment_iotJobId :: Lens' EffectiveDeployment (Maybe Text)

-- | The <a>ARN</a> of the IoT job that applies the deployment to target
--   devices.
effectiveDeployment_iotJobArn :: Lens' EffectiveDeployment (Maybe Text)

-- | The reason code for the update, if the job was updated.
effectiveDeployment_reason :: Lens' EffectiveDeployment (Maybe Text)

-- | The description of the deployment job.
effectiveDeployment_description :: Lens' EffectiveDeployment (Maybe Text)

-- | The ID of the deployment.
effectiveDeployment_deploymentId :: Lens' EffectiveDeployment Text

-- | The name of the deployment.
effectiveDeployment_deploymentName :: Lens' EffectiveDeployment Text

-- | The <a>ARN</a> of the target IoT thing or thing group.
effectiveDeployment_targetArn :: Lens' EffectiveDeployment Text

-- | The status of the deployment job on the Greengrass core device.
effectiveDeployment_coreDeviceExecutionStatus :: Lens' EffectiveDeployment EffectiveDeploymentExecutionStatus

-- | The time at which the deployment was created, expressed in ISO 8601
--   format.
effectiveDeployment_creationTimestamp :: Lens' EffectiveDeployment UTCTime

-- | The time at which the deployment job was last modified, expressed in
--   ISO 8601 format.
effectiveDeployment_modifiedTimestamp :: Lens' EffectiveDeployment UTCTime

-- | Contains information about a component on a Greengrass core device.
--   
--   <i>See:</i> <a>newInstalledComponent</a> smart constructor.
data InstalledComponent
InstalledComponent' :: Maybe Bool -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe InstalledComponentLifecycleState -> InstalledComponent

-- | Whether or not the component is a root component.
[$sel:isRoot:InstalledComponent'] :: InstalledComponent -> Maybe Bool

-- | The version of the component.
[$sel:componentVersion:InstalledComponent'] :: InstalledComponent -> Maybe Text

-- | The name of the component.
[$sel:componentName:InstalledComponent'] :: InstalledComponent -> Maybe Text

-- | The details about the lifecycle state of the component.
[$sel:lifecycleStateDetails:InstalledComponent'] :: InstalledComponent -> Maybe Text

-- | The lifecycle state of the component.
[$sel:lifecycleState:InstalledComponent'] :: InstalledComponent -> Maybe InstalledComponentLifecycleState

-- | Create a value of <a>InstalledComponent</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:isRoot:InstalledComponent'</a>,
--   <a>installedComponent_isRoot</a> - Whether or not the component is a
--   root component.
--   
--   <a>$sel:componentVersion:InstalledComponent'</a>,
--   <a>installedComponent_componentVersion</a> - The version of the
--   component.
--   
--   <a>$sel:componentName:InstalledComponent'</a>,
--   <a>installedComponent_componentName</a> - The name of the component.
--   
--   <a>$sel:lifecycleStateDetails:InstalledComponent'</a>,
--   <a>installedComponent_lifecycleStateDetails</a> - The details about
--   the lifecycle state of the component.
--   
--   <a>$sel:lifecycleState:InstalledComponent'</a>,
--   <a>installedComponent_lifecycleState</a> - The lifecycle state of the
--   component.
newInstalledComponent :: InstalledComponent

-- | Whether or not the component is a root component.
installedComponent_isRoot :: Lens' InstalledComponent (Maybe Bool)

-- | The version of the component.
installedComponent_componentVersion :: Lens' InstalledComponent (Maybe Text)

-- | The name of the component.
installedComponent_componentName :: Lens' InstalledComponent (Maybe Text)

-- | The details about the lifecycle state of the component.
installedComponent_lifecycleStateDetails :: Lens' InstalledComponent (Maybe Text)

-- | The lifecycle state of the component.
installedComponent_lifecycleState :: Lens' InstalledComponent (Maybe InstalledComponentLifecycleState)

-- | Contains a list of criteria that define when and how to cancel a
--   configuration deployment.
--   
--   <i>See:</i> <a>newIoTJobAbortConfig</a> smart constructor.
data IoTJobAbortConfig
IoTJobAbortConfig' :: NonEmpty IoTJobAbortCriteria -> IoTJobAbortConfig

-- | The list of criteria that define when and how to cancel the
--   configuration deployment.
[$sel:criteriaList:IoTJobAbortConfig'] :: IoTJobAbortConfig -> NonEmpty IoTJobAbortCriteria

-- | Create a value of <a>IoTJobAbortConfig</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:criteriaList:IoTJobAbortConfig'</a>,
--   <a>ioTJobAbortConfig_criteriaList</a> - The list of criteria that
--   define when and how to cancel the configuration deployment.
newIoTJobAbortConfig :: NonEmpty IoTJobAbortCriteria -> IoTJobAbortConfig

-- | The list of criteria that define when and how to cancel the
--   configuration deployment.
ioTJobAbortConfig_criteriaList :: Lens' IoTJobAbortConfig (NonEmpty IoTJobAbortCriteria)

-- | Contains criteria that define when and how to cancel a job.
--   
--   The deployment stops if the following conditions are true:
--   
--   <ol>
--   <li>The number of things that receive the deployment exceeds the
--   <tt>minNumberOfExecutedThings</tt>.</li>
--   <li>The percentage of failures with type <tt>failureType</tt> exceeds
--   the <tt>thresholdPercentage</tt>.</li>
--   </ol>
--   
--   <i>See:</i> <a>newIoTJobAbortCriteria</a> smart constructor.
data IoTJobAbortCriteria
IoTJobAbortCriteria' :: IoTJobExecutionFailureType -> IoTJobAbortAction -> Double -> Natural -> IoTJobAbortCriteria

-- | The type of job deployment failure that can cancel a job.
[$sel:failureType:IoTJobAbortCriteria'] :: IoTJobAbortCriteria -> IoTJobExecutionFailureType

-- | The action to perform when the criteria are met.
[$sel:action:IoTJobAbortCriteria'] :: IoTJobAbortCriteria -> IoTJobAbortAction

-- | The minimum percentage of <tt>failureType</tt> failures that occur
--   before the job can cancel.
--   
--   This parameter supports up to two digits after the decimal (for
--   example, you can specify <tt>10.9</tt> or <tt>10.99</tt>, but not
--   <tt>10.999</tt>).
[$sel:thresholdPercentage:IoTJobAbortCriteria'] :: IoTJobAbortCriteria -> Double

-- | The minimum number of things that receive the configuration before the
--   job can cancel.
[$sel:minNumberOfExecutedThings:IoTJobAbortCriteria'] :: IoTJobAbortCriteria -> Natural

-- | Create a value of <a>IoTJobAbortCriteria</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failureType:IoTJobAbortCriteria'</a>,
--   <a>ioTJobAbortCriteria_failureType</a> - The type of job deployment
--   failure that can cancel a job.
--   
--   <a>$sel:action:IoTJobAbortCriteria'</a>,
--   <a>ioTJobAbortCriteria_action</a> - The action to perform when the
--   criteria are met.
--   
--   <a>$sel:thresholdPercentage:IoTJobAbortCriteria'</a>,
--   <a>ioTJobAbortCriteria_thresholdPercentage</a> - The minimum
--   percentage of <tt>failureType</tt> failures that occur before the job
--   can cancel.
--   
--   This parameter supports up to two digits after the decimal (for
--   example, you can specify <tt>10.9</tt> or <tt>10.99</tt>, but not
--   <tt>10.999</tt>).
--   
--   <a>$sel:minNumberOfExecutedThings:IoTJobAbortCriteria'</a>,
--   <a>ioTJobAbortCriteria_minNumberOfExecutedThings</a> - The minimum
--   number of things that receive the configuration before the job can
--   cancel.
newIoTJobAbortCriteria :: IoTJobExecutionFailureType -> IoTJobAbortAction -> Double -> Natural -> IoTJobAbortCriteria

-- | The type of job deployment failure that can cancel a job.
ioTJobAbortCriteria_failureType :: Lens' IoTJobAbortCriteria IoTJobExecutionFailureType

-- | The action to perform when the criteria are met.
ioTJobAbortCriteria_action :: Lens' IoTJobAbortCriteria IoTJobAbortAction

-- | The minimum percentage of <tt>failureType</tt> failures that occur
--   before the job can cancel.
--   
--   This parameter supports up to two digits after the decimal (for
--   example, you can specify <tt>10.9</tt> or <tt>10.99</tt>, but not
--   <tt>10.999</tt>).
ioTJobAbortCriteria_thresholdPercentage :: Lens' IoTJobAbortCriteria Double

-- | The minimum number of things that receive the configuration before the
--   job can cancel.
ioTJobAbortCriteria_minNumberOfExecutedThings :: Lens' IoTJobAbortCriteria Natural

-- | Contains information about the rollout configuration for a job. This
--   configuration defines the rate at which the job deploys a
--   configuration to a fleet of target devices.
--   
--   <i>See:</i> <a>newIoTJobExecutionsRolloutConfig</a> smart constructor.
data IoTJobExecutionsRolloutConfig
IoTJobExecutionsRolloutConfig' :: Maybe IoTJobExponentialRolloutRate -> Maybe Natural -> IoTJobExecutionsRolloutConfig

-- | The exponential rate to increase the job rollout rate.
[$sel:exponentialRate:IoTJobExecutionsRolloutConfig'] :: IoTJobExecutionsRolloutConfig -> Maybe IoTJobExponentialRolloutRate

-- | The maximum number of devices that receive a pending job notification,
--   per minute.
[$sel:maximumPerMinute:IoTJobExecutionsRolloutConfig'] :: IoTJobExecutionsRolloutConfig -> Maybe Natural

-- | Create a value of <a>IoTJobExecutionsRolloutConfig</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:exponentialRate:IoTJobExecutionsRolloutConfig'</a>,
--   <a>ioTJobExecutionsRolloutConfig_exponentialRate</a> - The exponential
--   rate to increase the job rollout rate.
--   
--   <a>$sel:maximumPerMinute:IoTJobExecutionsRolloutConfig'</a>,
--   <a>ioTJobExecutionsRolloutConfig_maximumPerMinute</a> - The maximum
--   number of devices that receive a pending job notification, per minute.
newIoTJobExecutionsRolloutConfig :: IoTJobExecutionsRolloutConfig

-- | The exponential rate to increase the job rollout rate.
ioTJobExecutionsRolloutConfig_exponentialRate :: Lens' IoTJobExecutionsRolloutConfig (Maybe IoTJobExponentialRolloutRate)

-- | The maximum number of devices that receive a pending job notification,
--   per minute.
ioTJobExecutionsRolloutConfig_maximumPerMinute :: Lens' IoTJobExecutionsRolloutConfig (Maybe Natural)

-- | Contains information about an exponential rollout rate for a
--   configuration deployment job.
--   
--   <i>See:</i> <a>newIoTJobExponentialRolloutRate</a> smart constructor.
data IoTJobExponentialRolloutRate
IoTJobExponentialRolloutRate' :: Natural -> Double -> IoTJobRateIncreaseCriteria -> IoTJobExponentialRolloutRate

-- | The minimum number of devices that receive a pending job notification,
--   per minute, when the job starts. This parameter defines the initial
--   rollout rate of the job.
[$sel:baseRatePerMinute:IoTJobExponentialRolloutRate'] :: IoTJobExponentialRolloutRate -> Natural

-- | The exponential factor to increase the rollout rate for the job.
--   
--   This parameter supports up to one digit after the decimal (for
--   example, you can specify <tt>1.5</tt>, but not <tt>1.55</tt>).
[$sel:incrementFactor:IoTJobExponentialRolloutRate'] :: IoTJobExponentialRolloutRate -> Double

-- | The criteria to increase the rollout rate for the job.
[$sel:rateIncreaseCriteria:IoTJobExponentialRolloutRate'] :: IoTJobExponentialRolloutRate -> IoTJobRateIncreaseCriteria

-- | Create a value of <a>IoTJobExponentialRolloutRate</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:baseRatePerMinute:IoTJobExponentialRolloutRate'</a>,
--   <a>ioTJobExponentialRolloutRate_baseRatePerMinute</a> - The minimum
--   number of devices that receive a pending job notification, per minute,
--   when the job starts. This parameter defines the initial rollout rate
--   of the job.
--   
--   <a>$sel:incrementFactor:IoTJobExponentialRolloutRate'</a>,
--   <a>ioTJobExponentialRolloutRate_incrementFactor</a> - The exponential
--   factor to increase the rollout rate for the job.
--   
--   This parameter supports up to one digit after the decimal (for
--   example, you can specify <tt>1.5</tt>, but not <tt>1.55</tt>).
--   
--   <a>$sel:rateIncreaseCriteria:IoTJobExponentialRolloutRate'</a>,
--   <a>ioTJobExponentialRolloutRate_rateIncreaseCriteria</a> - The
--   criteria to increase the rollout rate for the job.
newIoTJobExponentialRolloutRate :: Natural -> Double -> IoTJobRateIncreaseCriteria -> IoTJobExponentialRolloutRate

-- | The minimum number of devices that receive a pending job notification,
--   per minute, when the job starts. This parameter defines the initial
--   rollout rate of the job.
ioTJobExponentialRolloutRate_baseRatePerMinute :: Lens' IoTJobExponentialRolloutRate Natural

-- | The exponential factor to increase the rollout rate for the job.
--   
--   This parameter supports up to one digit after the decimal (for
--   example, you can specify <tt>1.5</tt>, but not <tt>1.55</tt>).
ioTJobExponentialRolloutRate_incrementFactor :: Lens' IoTJobExponentialRolloutRate Double

-- | The criteria to increase the rollout rate for the job.
ioTJobExponentialRolloutRate_rateIncreaseCriteria :: Lens' IoTJobExponentialRolloutRate IoTJobRateIncreaseCriteria

-- | Contains information about criteria to meet before a job increases its
--   rollout rate. Specify either <tt>numberOfNotifiedThings</tt> or
--   <tt>numberOfSucceededThings</tt>.
--   
--   <i>See:</i> <a>newIoTJobRateIncreaseCriteria</a> smart constructor.
data IoTJobRateIncreaseCriteria
IoTJobRateIncreaseCriteria' :: Maybe Natural -> Maybe Natural -> IoTJobRateIncreaseCriteria

-- | The number of devices to receive the job notification before the
--   rollout rate increases.
[$sel:numberOfNotifiedThings:IoTJobRateIncreaseCriteria'] :: IoTJobRateIncreaseCriteria -> Maybe Natural

-- | The number of devices to successfully run the configuration job before
--   the rollout rate increases.
[$sel:numberOfSucceededThings:IoTJobRateIncreaseCriteria'] :: IoTJobRateIncreaseCriteria -> Maybe Natural

-- | Create a value of <a>IoTJobRateIncreaseCriteria</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:numberOfNotifiedThings:IoTJobRateIncreaseCriteria'</a>,
--   <a>ioTJobRateIncreaseCriteria_numberOfNotifiedThings</a> - The number
--   of devices to receive the job notification before the rollout rate
--   increases.
--   
--   <a>$sel:numberOfSucceededThings:IoTJobRateIncreaseCriteria'</a>,
--   <a>ioTJobRateIncreaseCriteria_numberOfSucceededThings</a> - The number
--   of devices to successfully run the configuration job before the
--   rollout rate increases.
newIoTJobRateIncreaseCriteria :: IoTJobRateIncreaseCriteria

-- | The number of devices to receive the job notification before the
--   rollout rate increases.
ioTJobRateIncreaseCriteria_numberOfNotifiedThings :: Lens' IoTJobRateIncreaseCriteria (Maybe Natural)

-- | The number of devices to successfully run the configuration job before
--   the rollout rate increases.
ioTJobRateIncreaseCriteria_numberOfSucceededThings :: Lens' IoTJobRateIncreaseCriteria (Maybe Natural)

-- | Contains information about the timeout configuration for a job.
--   
--   <i>See:</i> <a>newIoTJobTimeoutConfig</a> smart constructor.
data IoTJobTimeoutConfig
IoTJobTimeoutConfig' :: Maybe Integer -> IoTJobTimeoutConfig

-- | The amount of time, in minutes, that devices have to complete the job.
--   The timer starts when the job status is set to <tt>IN_PROGRESS</tt>.
--   If the job status doesn't change to a terminal state before the time
--   expires, then the job status is set to <tt>TIMED_OUT</tt>.
--   
--   The timeout interval must be between 1 minute and 7 days (10080
--   minutes).
[$sel:inProgressTimeoutInMinutes:IoTJobTimeoutConfig'] :: IoTJobTimeoutConfig -> Maybe Integer

-- | Create a value of <a>IoTJobTimeoutConfig</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:inProgressTimeoutInMinutes:IoTJobTimeoutConfig'</a>,
--   <a>ioTJobTimeoutConfig_inProgressTimeoutInMinutes</a> - The amount of
--   time, in minutes, that devices have to complete the job. The timer
--   starts when the job status is set to <tt>IN_PROGRESS</tt>. If the job
--   status doesn't change to a terminal state before the time expires,
--   then the job status is set to <tt>TIMED_OUT</tt>.
--   
--   The timeout interval must be between 1 minute and 7 days (10080
--   minutes).
newIoTJobTimeoutConfig :: IoTJobTimeoutConfig

-- | The amount of time, in minutes, that devices have to complete the job.
--   The timer starts when the job status is set to <tt>IN_PROGRESS</tt>.
--   If the job status doesn't change to a terminal state before the time
--   expires, then the job status is set to <tt>TIMED_OUT</tt>.
--   
--   The timeout interval must be between 1 minute and 7 days (10080
--   minutes).
ioTJobTimeoutConfig_inProgressTimeoutInMinutes :: Lens' IoTJobTimeoutConfig (Maybe Integer)

-- | Contains information about a container in which Lambda functions run
--   on Greengrass core devices.
--   
--   <i>See:</i> <a>newLambdaContainerParams</a> smart constructor.
data LambdaContainerParams
LambdaContainerParams' :: Maybe Bool -> Maybe Int -> Maybe [LambdaDeviceMount] -> Maybe [LambdaVolumeMount] -> LambdaContainerParams

-- | Whether or not the container can read information from the device's
--   <tt>/sys</tt> folder.
--   
--   Default: <tt>false</tt>
[$sel:mountROSysfs:LambdaContainerParams'] :: LambdaContainerParams -> Maybe Bool

-- | The memory size of the container, expressed in kilobytes.
--   
--   Default: <tt>16384</tt> (16 MB)
[$sel:memorySizeInKB:LambdaContainerParams'] :: LambdaContainerParams -> Maybe Int

-- | The list of system devices that the container can access.
[$sel:devices:LambdaContainerParams'] :: LambdaContainerParams -> Maybe [LambdaDeviceMount]

-- | The list of volumes that the container can access.
[$sel:volumes:LambdaContainerParams'] :: LambdaContainerParams -> Maybe [LambdaVolumeMount]

-- | Create a value of <a>LambdaContainerParams</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:mountROSysfs:LambdaContainerParams'</a>,
--   <a>lambdaContainerParams_mountROSysfs</a> - Whether or not the
--   container can read information from the device's <tt>/sys</tt> folder.
--   
--   Default: <tt>false</tt>
--   
--   <a>$sel:memorySizeInKB:LambdaContainerParams'</a>,
--   <a>lambdaContainerParams_memorySizeInKB</a> - The memory size of the
--   container, expressed in kilobytes.
--   
--   Default: <tt>16384</tt> (16 MB)
--   
--   <a>$sel:devices:LambdaContainerParams'</a>,
--   <a>lambdaContainerParams_devices</a> - The list of system devices that
--   the container can access.
--   
--   <a>$sel:volumes:LambdaContainerParams'</a>,
--   <a>lambdaContainerParams_volumes</a> - The list of volumes that the
--   container can access.
newLambdaContainerParams :: LambdaContainerParams

-- | Whether or not the container can read information from the device's
--   <tt>/sys</tt> folder.
--   
--   Default: <tt>false</tt>
lambdaContainerParams_mountROSysfs :: Lens' LambdaContainerParams (Maybe Bool)

-- | The memory size of the container, expressed in kilobytes.
--   
--   Default: <tt>16384</tt> (16 MB)
lambdaContainerParams_memorySizeInKB :: Lens' LambdaContainerParams (Maybe Int)

-- | The list of system devices that the container can access.
lambdaContainerParams_devices :: Lens' LambdaContainerParams (Maybe [LambdaDeviceMount])

-- | The list of volumes that the container can access.
lambdaContainerParams_volumes :: Lens' LambdaContainerParams (Maybe [LambdaVolumeMount])

-- | Contains information about a device that Linux processes in a
--   container can access.
--   
--   <i>See:</i> <a>newLambdaDeviceMount</a> smart constructor.
data LambdaDeviceMount
LambdaDeviceMount' :: Maybe Bool -> Maybe LambdaFilesystemPermission -> Text -> LambdaDeviceMount

-- | Whether or not to add the component's system user as an owner of the
--   device.
--   
--   Default: <tt>false</tt>
[$sel:addGroupOwner:LambdaDeviceMount'] :: LambdaDeviceMount -> Maybe Bool

-- | The permission to access the device: read/only (<tt>ro</tt>) or
--   read/write (<tt>rw</tt>).
--   
--   Default: <tt>ro</tt>
[$sel:permission:LambdaDeviceMount'] :: LambdaDeviceMount -> Maybe LambdaFilesystemPermission

-- | The mount path for the device in the file system.
[$sel:path:LambdaDeviceMount'] :: LambdaDeviceMount -> Text

-- | Create a value of <a>LambdaDeviceMount</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:addGroupOwner:LambdaDeviceMount'</a>,
--   <a>lambdaDeviceMount_addGroupOwner</a> - Whether or not to add the
--   component's system user as an owner of the device.
--   
--   Default: <tt>false</tt>
--   
--   <a>$sel:permission:LambdaDeviceMount'</a>,
--   <a>lambdaDeviceMount_permission</a> - The permission to access the
--   device: read/only (<tt>ro</tt>) or read/write (<tt>rw</tt>).
--   
--   Default: <tt>ro</tt>
--   
--   <a>$sel:path:LambdaDeviceMount'</a>, <a>lambdaDeviceMount_path</a> -
--   The mount path for the device in the file system.
newLambdaDeviceMount :: Text -> LambdaDeviceMount

-- | Whether or not to add the component's system user as an owner of the
--   device.
--   
--   Default: <tt>false</tt>
lambdaDeviceMount_addGroupOwner :: Lens' LambdaDeviceMount (Maybe Bool)

-- | The permission to access the device: read/only (<tt>ro</tt>) or
--   read/write (<tt>rw</tt>).
--   
--   Default: <tt>ro</tt>
lambdaDeviceMount_permission :: Lens' LambdaDeviceMount (Maybe LambdaFilesystemPermission)

-- | The mount path for the device in the file system.
lambdaDeviceMount_path :: Lens' LambdaDeviceMount Text

-- | Contains information about an event source for an Lambda function. The
--   event source defines the topics on which this Lambda function
--   subscribes to receive messages that run the function.
--   
--   <i>See:</i> <a>newLambdaEventSource</a> smart constructor.
data LambdaEventSource
LambdaEventSource' :: Text -> LambdaEventSourceType -> LambdaEventSource

-- | The topic to which to subscribe to receive event messages.
[$sel:topic:LambdaEventSource'] :: LambdaEventSource -> Text

-- | The type of event source. Choose from the following options:
--   
--   <ul>
--   <li><tt>PUB_SUB</tt> – Subscribe to local publish/subscribe messages.
--   This event source type doesn't support MQTT wildcards (<tt>+</tt> and
--   <tt>#</tt>) in the event source topic.</li>
--   <li><tt>IOT_CORE</tt> – Subscribe to Amazon Web Services IoT Core MQTT
--   messages. This event source type supports MQTT wildcards (<tt>+</tt>
--   and <tt>#</tt>) in the event source topic.</li>
--   </ul>
[$sel:type':LambdaEventSource'] :: LambdaEventSource -> LambdaEventSourceType

-- | Create a value of <a>LambdaEventSource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:topic:LambdaEventSource'</a>, <a>lambdaEventSource_topic</a> -
--   The topic to which to subscribe to receive event messages.
--   
--   <a>$sel:type':LambdaEventSource'</a>, <a>lambdaEventSource_type</a> -
--   The type of event source. Choose from the following options:
--   
--   <ul>
--   <li><tt>PUB_SUB</tt> – Subscribe to local publish/subscribe messages.
--   This event source type doesn't support MQTT wildcards (<tt>+</tt> and
--   <tt>#</tt>) in the event source topic.</li>
--   <li><tt>IOT_CORE</tt> – Subscribe to Amazon Web Services IoT Core MQTT
--   messages. This event source type supports MQTT wildcards (<tt>+</tt>
--   and <tt>#</tt>) in the event source topic.</li>
--   </ul>
newLambdaEventSource :: Text -> LambdaEventSourceType -> LambdaEventSource

-- | The topic to which to subscribe to receive event messages.
lambdaEventSource_topic :: Lens' LambdaEventSource Text

-- | The type of event source. Choose from the following options:
--   
--   <ul>
--   <li><tt>PUB_SUB</tt> – Subscribe to local publish/subscribe messages.
--   This event source type doesn't support MQTT wildcards (<tt>+</tt> and
--   <tt>#</tt>) in the event source topic.</li>
--   <li><tt>IOT_CORE</tt> – Subscribe to Amazon Web Services IoT Core MQTT
--   messages. This event source type supports MQTT wildcards (<tt>+</tt>
--   and <tt>#</tt>) in the event source topic.</li>
--   </ul>
lambdaEventSource_type :: Lens' LambdaEventSource LambdaEventSourceType

-- | Contains parameters for a Lambda function that runs on IoT Greengrass.
--   
--   <i>See:</i> <a>newLambdaExecutionParameters</a> smart constructor.
data LambdaExecutionParameters
LambdaExecutionParameters' :: Maybe [Text] -> Maybe Int -> Maybe Bool -> Maybe LambdaInputPayloadEncodingType -> Maybe Int -> Maybe Int -> Maybe [LambdaEventSource] -> Maybe Int -> Maybe (HashMap Text Text) -> Maybe Int -> Maybe LambdaLinuxProcessParams -> LambdaExecutionParameters

-- | The list of arguments to pass to the Lambda function when it runs.
[$sel:execArgs:LambdaExecutionParameters'] :: LambdaExecutionParameters -> Maybe [Text]

-- | The maximum size of the message queue for the Lambda function
--   component. The IoT Greengrass core stores messages in a FIFO
--   (first-in-first-out) queue until it can run the Lambda function to
--   consume each message.
[$sel:maxQueueSize:LambdaExecutionParameters'] :: LambdaExecutionParameters -> Maybe Int

-- | Whether or not the Lambda function is pinned, or long-lived.
--   
--   <ul>
--   <li>A pinned Lambda function starts when IoT Greengrass starts and
--   keeps running in its own container.</li>
--   <li>A non-pinned Lambda function starts only when it receives a work
--   item and exists after it idles for <tt>maxIdleTimeInSeconds</tt>. If
--   the function has multiple work items, the IoT Greengrass Core software
--   creates multiple instances of the function.</li>
--   </ul>
--   
--   Default: <tt>true</tt>
[$sel:pinned:LambdaExecutionParameters'] :: LambdaExecutionParameters -> Maybe Bool

-- | The encoding type that the Lambda function supports.
--   
--   Default: <tt>json</tt>
[$sel:inputPayloadEncodingType:LambdaExecutionParameters'] :: LambdaExecutionParameters -> Maybe LambdaInputPayloadEncodingType

-- | The maximum amount of time in seconds that a non-pinned Lambda
--   function can idle before the IoT Greengrass Core software stops its
--   process.
[$sel:maxIdleTimeInSeconds:LambdaExecutionParameters'] :: LambdaExecutionParameters -> Maybe Int

-- | The maximum amount of time in seconds that the Lambda function can
--   process a work item.
[$sel:timeoutInSeconds:LambdaExecutionParameters'] :: LambdaExecutionParameters -> Maybe Int

-- | The list of event sources to which to subscribe to receive work
--   messages. The Lambda function runs when it receives a message from an
--   event source. You can subscribe this function to local
--   publish/subscribe messages and Amazon Web Services IoT Core MQTT
--   messages.
[$sel:eventSources:LambdaExecutionParameters'] :: LambdaExecutionParameters -> Maybe [LambdaEventSource]

-- | The maximum number of instances that a non-pinned Lambda function can
--   run at the same time.
[$sel:maxInstancesCount:LambdaExecutionParameters'] :: LambdaExecutionParameters -> Maybe Int

-- | The map of environment variables that are available to the Lambda
--   function when it runs.
[$sel:environmentVariables:LambdaExecutionParameters'] :: LambdaExecutionParameters -> Maybe (HashMap Text Text)

-- | The interval in seconds at which a pinned (also known as long-lived)
--   Lambda function component sends status updates to the Lambda manager
--   component.
[$sel:statusTimeoutInSeconds:LambdaExecutionParameters'] :: LambdaExecutionParameters -> Maybe Int

-- | The parameters for the Linux process that contains the Lambda
--   function.
[$sel:linuxProcessParams:LambdaExecutionParameters'] :: LambdaExecutionParameters -> Maybe LambdaLinuxProcessParams

-- | Create a value of <a>LambdaExecutionParameters</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:execArgs:LambdaExecutionParameters'</a>,
--   <a>lambdaExecutionParameters_execArgs</a> - The list of arguments to
--   pass to the Lambda function when it runs.
--   
--   <a>$sel:maxQueueSize:LambdaExecutionParameters'</a>,
--   <a>lambdaExecutionParameters_maxQueueSize</a> - The maximum size of
--   the message queue for the Lambda function component. The IoT
--   Greengrass core stores messages in a FIFO (first-in-first-out) queue
--   until it can run the Lambda function to consume each message.
--   
--   <a>$sel:pinned:LambdaExecutionParameters'</a>,
--   <a>lambdaExecutionParameters_pinned</a> - Whether or not the Lambda
--   function is pinned, or long-lived.
--   
--   <ul>
--   <li>A pinned Lambda function starts when IoT Greengrass starts and
--   keeps running in its own container.</li>
--   <li>A non-pinned Lambda function starts only when it receives a work
--   item and exists after it idles for <tt>maxIdleTimeInSeconds</tt>. If
--   the function has multiple work items, the IoT Greengrass Core software
--   creates multiple instances of the function.</li>
--   </ul>
--   
--   Default: <tt>true</tt>
--   
--   <a>$sel:inputPayloadEncodingType:LambdaExecutionParameters'</a>,
--   <a>lambdaExecutionParameters_inputPayloadEncodingType</a> - The
--   encoding type that the Lambda function supports.
--   
--   Default: <tt>json</tt>
--   
--   <a>$sel:maxIdleTimeInSeconds:LambdaExecutionParameters'</a>,
--   <a>lambdaExecutionParameters_maxIdleTimeInSeconds</a> - The maximum
--   amount of time in seconds that a non-pinned Lambda function can idle
--   before the IoT Greengrass Core software stops its process.
--   
--   <a>$sel:timeoutInSeconds:LambdaExecutionParameters'</a>,
--   <a>lambdaExecutionParameters_timeoutInSeconds</a> - The maximum amount
--   of time in seconds that the Lambda function can process a work item.
--   
--   <a>$sel:eventSources:LambdaExecutionParameters'</a>,
--   <a>lambdaExecutionParameters_eventSources</a> - The list of event
--   sources to which to subscribe to receive work messages. The Lambda
--   function runs when it receives a message from an event source. You can
--   subscribe this function to local publish/subscribe messages and Amazon
--   Web Services IoT Core MQTT messages.
--   
--   <a>$sel:maxInstancesCount:LambdaExecutionParameters'</a>,
--   <a>lambdaExecutionParameters_maxInstancesCount</a> - The maximum
--   number of instances that a non-pinned Lambda function can run at the
--   same time.
--   
--   <a>$sel:environmentVariables:LambdaExecutionParameters'</a>,
--   <a>lambdaExecutionParameters_environmentVariables</a> - The map of
--   environment variables that are available to the Lambda function when
--   it runs.
--   
--   <a>$sel:statusTimeoutInSeconds:LambdaExecutionParameters'</a>,
--   <a>lambdaExecutionParameters_statusTimeoutInSeconds</a> - The interval
--   in seconds at which a pinned (also known as long-lived) Lambda
--   function component sends status updates to the Lambda manager
--   component.
--   
--   <a>$sel:linuxProcessParams:LambdaExecutionParameters'</a>,
--   <a>lambdaExecutionParameters_linuxProcessParams</a> - The parameters
--   for the Linux process that contains the Lambda function.
newLambdaExecutionParameters :: LambdaExecutionParameters

-- | The list of arguments to pass to the Lambda function when it runs.
lambdaExecutionParameters_execArgs :: Lens' LambdaExecutionParameters (Maybe [Text])

-- | The maximum size of the message queue for the Lambda function
--   component. The IoT Greengrass core stores messages in a FIFO
--   (first-in-first-out) queue until it can run the Lambda function to
--   consume each message.
lambdaExecutionParameters_maxQueueSize :: Lens' LambdaExecutionParameters (Maybe Int)

-- | Whether or not the Lambda function is pinned, or long-lived.
--   
--   <ul>
--   <li>A pinned Lambda function starts when IoT Greengrass starts and
--   keeps running in its own container.</li>
--   <li>A non-pinned Lambda function starts only when it receives a work
--   item and exists after it idles for <tt>maxIdleTimeInSeconds</tt>. If
--   the function has multiple work items, the IoT Greengrass Core software
--   creates multiple instances of the function.</li>
--   </ul>
--   
--   Default: <tt>true</tt>
lambdaExecutionParameters_pinned :: Lens' LambdaExecutionParameters (Maybe Bool)

-- | The encoding type that the Lambda function supports.
--   
--   Default: <tt>json</tt>
lambdaExecutionParameters_inputPayloadEncodingType :: Lens' LambdaExecutionParameters (Maybe LambdaInputPayloadEncodingType)

-- | The maximum amount of time in seconds that a non-pinned Lambda
--   function can idle before the IoT Greengrass Core software stops its
--   process.
lambdaExecutionParameters_maxIdleTimeInSeconds :: Lens' LambdaExecutionParameters (Maybe Int)

-- | The maximum amount of time in seconds that the Lambda function can
--   process a work item.
lambdaExecutionParameters_timeoutInSeconds :: Lens' LambdaExecutionParameters (Maybe Int)

-- | The list of event sources to which to subscribe to receive work
--   messages. The Lambda function runs when it receives a message from an
--   event source. You can subscribe this function to local
--   publish/subscribe messages and Amazon Web Services IoT Core MQTT
--   messages.
lambdaExecutionParameters_eventSources :: Lens' LambdaExecutionParameters (Maybe [LambdaEventSource])

-- | The maximum number of instances that a non-pinned Lambda function can
--   run at the same time.
lambdaExecutionParameters_maxInstancesCount :: Lens' LambdaExecutionParameters (Maybe Int)

-- | The map of environment variables that are available to the Lambda
--   function when it runs.
lambdaExecutionParameters_environmentVariables :: Lens' LambdaExecutionParameters (Maybe (HashMap Text Text))

-- | The interval in seconds at which a pinned (also known as long-lived)
--   Lambda function component sends status updates to the Lambda manager
--   component.
lambdaExecutionParameters_statusTimeoutInSeconds :: Lens' LambdaExecutionParameters (Maybe Int)

-- | The parameters for the Linux process that contains the Lambda
--   function.
lambdaExecutionParameters_linuxProcessParams :: Lens' LambdaExecutionParameters (Maybe LambdaLinuxProcessParams)

-- | Contains information about an Lambda function to import to create a
--   component.
--   
--   <i>See:</i> <a>newLambdaFunctionRecipeSource</a> smart constructor.
data LambdaFunctionRecipeSource
LambdaFunctionRecipeSource' :: Maybe LambdaExecutionParameters -> Maybe Text -> Maybe Text -> Maybe [ComponentPlatform] -> Maybe (HashMap Text ComponentDependencyRequirement) -> Text -> LambdaFunctionRecipeSource

-- | The system and runtime parameters for the Lambda function as it runs
--   on the Greengrass core device.
[$sel:componentLambdaParameters:LambdaFunctionRecipeSource'] :: LambdaFunctionRecipeSource -> Maybe LambdaExecutionParameters

-- | The version of the component.
--   
--   Defaults to the version of the Lambda function as a semantic version.
--   For example, if your function version is <tt>3</tt>, the component
--   version becomes <tt>3.0.0</tt>.
[$sel:componentVersion:LambdaFunctionRecipeSource'] :: LambdaFunctionRecipeSource -> Maybe Text

-- | The name of the component.
--   
--   Defaults to the name of the Lambda function.
[$sel:componentName:LambdaFunctionRecipeSource'] :: LambdaFunctionRecipeSource -> Maybe Text

-- | The platforms that the component version supports.
[$sel:componentPlatforms:LambdaFunctionRecipeSource'] :: LambdaFunctionRecipeSource -> Maybe [ComponentPlatform]

-- | The component versions on which this Lambda function component
--   depends.
[$sel:componentDependencies:LambdaFunctionRecipeSource'] :: LambdaFunctionRecipeSource -> Maybe (HashMap Text ComponentDependencyRequirement)

-- | The <a>ARN</a> of the Lambda function. The ARN must include the
--   version of the function to import. You can't use version aliases like
--   <tt>$LATEST</tt>.
[$sel:lambdaArn:LambdaFunctionRecipeSource'] :: LambdaFunctionRecipeSource -> Text

-- | Create a value of <a>LambdaFunctionRecipeSource</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:componentLambdaParameters:LambdaFunctionRecipeSource'</a>,
--   <a>lambdaFunctionRecipeSource_componentLambdaParameters</a> - The
--   system and runtime parameters for the Lambda function as it runs on
--   the Greengrass core device.
--   
--   <a>$sel:componentVersion:LambdaFunctionRecipeSource'</a>,
--   <a>lambdaFunctionRecipeSource_componentVersion</a> - The version of
--   the component.
--   
--   Defaults to the version of the Lambda function as a semantic version.
--   For example, if your function version is <tt>3</tt>, the component
--   version becomes <tt>3.0.0</tt>.
--   
--   <a>$sel:componentName:LambdaFunctionRecipeSource'</a>,
--   <a>lambdaFunctionRecipeSource_componentName</a> - The name of the
--   component.
--   
--   Defaults to the name of the Lambda function.
--   
--   <a>$sel:componentPlatforms:LambdaFunctionRecipeSource'</a>,
--   <a>lambdaFunctionRecipeSource_componentPlatforms</a> - The platforms
--   that the component version supports.
--   
--   <a>$sel:componentDependencies:LambdaFunctionRecipeSource'</a>,
--   <a>lambdaFunctionRecipeSource_componentDependencies</a> - The
--   component versions on which this Lambda function component depends.
--   
--   <a>$sel:lambdaArn:LambdaFunctionRecipeSource'</a>,
--   <a>lambdaFunctionRecipeSource_lambdaArn</a> - The <a>ARN</a> of the
--   Lambda function. The ARN must include the version of the function to
--   import. You can't use version aliases like <tt>$LATEST</tt>.
newLambdaFunctionRecipeSource :: Text -> LambdaFunctionRecipeSource

-- | The system and runtime parameters for the Lambda function as it runs
--   on the Greengrass core device.
lambdaFunctionRecipeSource_componentLambdaParameters :: Lens' LambdaFunctionRecipeSource (Maybe LambdaExecutionParameters)

-- | The version of the component.
--   
--   Defaults to the version of the Lambda function as a semantic version.
--   For example, if your function version is <tt>3</tt>, the component
--   version becomes <tt>3.0.0</tt>.
lambdaFunctionRecipeSource_componentVersion :: Lens' LambdaFunctionRecipeSource (Maybe Text)

-- | The name of the component.
--   
--   Defaults to the name of the Lambda function.
lambdaFunctionRecipeSource_componentName :: Lens' LambdaFunctionRecipeSource (Maybe Text)

-- | The platforms that the component version supports.
lambdaFunctionRecipeSource_componentPlatforms :: Lens' LambdaFunctionRecipeSource (Maybe [ComponentPlatform])

-- | The component versions on which this Lambda function component
--   depends.
lambdaFunctionRecipeSource_componentDependencies :: Lens' LambdaFunctionRecipeSource (Maybe (HashMap Text ComponentDependencyRequirement))

-- | The <a>ARN</a> of the Lambda function. The ARN must include the
--   version of the function to import. You can't use version aliases like
--   <tt>$LATEST</tt>.
lambdaFunctionRecipeSource_lambdaArn :: Lens' LambdaFunctionRecipeSource Text

-- | Contains parameters for a Linux process that contains an Lambda
--   function.
--   
--   <i>See:</i> <a>newLambdaLinuxProcessParams</a> smart constructor.
data LambdaLinuxProcessParams
LambdaLinuxProcessParams' :: Maybe LambdaContainerParams -> Maybe LambdaIsolationMode -> LambdaLinuxProcessParams

-- | The parameters for the container in which the Lambda function runs.
[$sel:containerParams:LambdaLinuxProcessParams'] :: LambdaLinuxProcessParams -> Maybe LambdaContainerParams

-- | The isolation mode for the process that contains the Lambda function.
--   The process can run in an isolated runtime environment inside the IoT
--   Greengrass container, or as a regular process outside any container.
--   
--   Default: <tt>GreengrassContainer</tt>
[$sel:isolationMode:LambdaLinuxProcessParams'] :: LambdaLinuxProcessParams -> Maybe LambdaIsolationMode

-- | Create a value of <a>LambdaLinuxProcessParams</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerParams:LambdaLinuxProcessParams'</a>,
--   <a>lambdaLinuxProcessParams_containerParams</a> - The parameters for
--   the container in which the Lambda function runs.
--   
--   <a>$sel:isolationMode:LambdaLinuxProcessParams'</a>,
--   <a>lambdaLinuxProcessParams_isolationMode</a> - The isolation mode for
--   the process that contains the Lambda function. The process can run in
--   an isolated runtime environment inside the IoT Greengrass container,
--   or as a regular process outside any container.
--   
--   Default: <tt>GreengrassContainer</tt>
newLambdaLinuxProcessParams :: LambdaLinuxProcessParams

-- | The parameters for the container in which the Lambda function runs.
lambdaLinuxProcessParams_containerParams :: Lens' LambdaLinuxProcessParams (Maybe LambdaContainerParams)

-- | The isolation mode for the process that contains the Lambda function.
--   The process can run in an isolated runtime environment inside the IoT
--   Greengrass container, or as a regular process outside any container.
--   
--   Default: <tt>GreengrassContainer</tt>
lambdaLinuxProcessParams_isolationMode :: Lens' LambdaLinuxProcessParams (Maybe LambdaIsolationMode)

-- | Contains information about a volume that Linux processes in a
--   container can access. When you define a volume, the IoT Greengrass
--   Core software mounts the source files to the destination inside the
--   container.
--   
--   <i>See:</i> <a>newLambdaVolumeMount</a> smart constructor.
data LambdaVolumeMount
LambdaVolumeMount' :: Maybe Bool -> Maybe LambdaFilesystemPermission -> Text -> Text -> LambdaVolumeMount

-- | Whether or not to add the IoT Greengrass user group as an owner of the
--   volume.
--   
--   Default: <tt>false</tt>
[$sel:addGroupOwner:LambdaVolumeMount'] :: LambdaVolumeMount -> Maybe Bool

-- | The permission to access the volume: read/only (<tt>ro</tt>) or
--   read/write (<tt>rw</tt>).
--   
--   Default: <tt>ro</tt>
[$sel:permission:LambdaVolumeMount'] :: LambdaVolumeMount -> Maybe LambdaFilesystemPermission

-- | The path to the physical volume in the file system.
[$sel:sourcePath:LambdaVolumeMount'] :: LambdaVolumeMount -> Text

-- | The path to the logical volume in the file system.
[$sel:destinationPath:LambdaVolumeMount'] :: LambdaVolumeMount -> Text

-- | Create a value of <a>LambdaVolumeMount</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:addGroupOwner:LambdaVolumeMount'</a>,
--   <a>lambdaVolumeMount_addGroupOwner</a> - Whether or not to add the IoT
--   Greengrass user group as an owner of the volume.
--   
--   Default: <tt>false</tt>
--   
--   <a>$sel:permission:LambdaVolumeMount'</a>,
--   <a>lambdaVolumeMount_permission</a> - The permission to access the
--   volume: read/only (<tt>ro</tt>) or read/write (<tt>rw</tt>).
--   
--   Default: <tt>ro</tt>
--   
--   <a>$sel:sourcePath:LambdaVolumeMount'</a>,
--   <a>lambdaVolumeMount_sourcePath</a> - The path to the physical volume
--   in the file system.
--   
--   <a>$sel:destinationPath:LambdaVolumeMount'</a>,
--   <a>lambdaVolumeMount_destinationPath</a> - The path to the logical
--   volume in the file system.
newLambdaVolumeMount :: Text -> Text -> LambdaVolumeMount

-- | Whether or not to add the IoT Greengrass user group as an owner of the
--   volume.
--   
--   Default: <tt>false</tt>
lambdaVolumeMount_addGroupOwner :: Lens' LambdaVolumeMount (Maybe Bool)

-- | The permission to access the volume: read/only (<tt>ro</tt>) or
--   read/write (<tt>rw</tt>).
--   
--   Default: <tt>ro</tt>
lambdaVolumeMount_permission :: Lens' LambdaVolumeMount (Maybe LambdaFilesystemPermission)

-- | The path to the physical volume in the file system.
lambdaVolumeMount_sourcePath :: Lens' LambdaVolumeMount Text

-- | The path to the logical volume in the file system.
lambdaVolumeMount_destinationPath :: Lens' LambdaVolumeMount Text

-- | Contains information about a component version that is compatible to
--   run on a Greengrass core device.
--   
--   <i>See:</i> <a>newResolvedComponentVersion</a> smart constructor.
data ResolvedComponentVersion
ResolvedComponentVersion' :: Maybe Text -> Maybe Text -> Maybe Base64 -> Maybe Text -> ResolvedComponentVersion

-- | The <a>ARN</a> of the component version.
[$sel:arn:ResolvedComponentVersion'] :: ResolvedComponentVersion -> Maybe Text

-- | The version of the component.
[$sel:componentVersion:ResolvedComponentVersion'] :: ResolvedComponentVersion -> Maybe Text

-- | The recipe of the component version.
[$sel:recipe:ResolvedComponentVersion'] :: ResolvedComponentVersion -> Maybe Base64

-- | The name of the component.
[$sel:componentName:ResolvedComponentVersion'] :: ResolvedComponentVersion -> Maybe Text

-- | Create a value of <a>ResolvedComponentVersion</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:arn:ResolvedComponentVersion'</a>,
--   <a>resolvedComponentVersion_arn</a> - The <a>ARN</a> of the component
--   version.
--   
--   <a>$sel:componentVersion:ResolvedComponentVersion'</a>,
--   <a>resolvedComponentVersion_componentVersion</a> - The version of the
--   component.
--   
--   <a>$sel:recipe:ResolvedComponentVersion'</a>,
--   <a>resolvedComponentVersion_recipe</a> - The recipe of the component
--   version.-- -- <i>Note:</i> This <tt>Lens</tt> automatically encodes
--   and decodes Base64 data. -- The underlying isomorphism will encode to
--   Base64 representation during -- serialisation, and decode from Base64
--   representation during deserialisation. -- This <tt>Lens</tt> accepts
--   and returns only raw unencoded data.
--   
--   <a>$sel:componentName:ResolvedComponentVersion'</a>,
--   <a>resolvedComponentVersion_componentName</a> - The name of the
--   component.
newResolvedComponentVersion :: ResolvedComponentVersion

-- | The <a>ARN</a> of the component version.
resolvedComponentVersion_arn :: Lens' ResolvedComponentVersion (Maybe Text)

-- | The version of the component.
resolvedComponentVersion_componentVersion :: Lens' ResolvedComponentVersion (Maybe Text)

-- | The recipe of the component version.-- -- <i>Note:</i> This
--   <tt>Lens</tt> automatically encodes and decodes Base64 data. -- The
--   underlying isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
resolvedComponentVersion_recipe :: Lens' ResolvedComponentVersion (Maybe ByteString)

-- | The name of the component.
resolvedComponentVersion_componentName :: Lens' ResolvedComponentVersion (Maybe Text)

-- | Contains information about system resource limits that the IoT
--   Greengrass Core software applies to a component's processes. For more
--   information, see <a>Configure system resource limits for
--   components</a>.
--   
--   <i>See:</i> <a>newSystemResourceLimits</a> smart constructor.
data SystemResourceLimits
SystemResourceLimits' :: Maybe Natural -> Maybe Double -> SystemResourceLimits

-- | The maximum amount of RAM, expressed in kilobytes, that a component's
--   processes can use on the core device.
[$sel:memory:SystemResourceLimits'] :: SystemResourceLimits -> Maybe Natural

-- | The maximum amount of CPU time that a component's processes can use on
--   the core device. A core device's total CPU time is equivalent to the
--   device's number of CPU cores. For example, on a core device with 4 CPU
--   cores, you can set this value to <tt>2</tt> to limit the component's
--   processes to 50 percent usage of each CPU core. On a device with 1 CPU
--   core, you can set this value to <tt>0.25</tt> to limit the component's
--   processes to 25 percent usage of the CPU. If you set this value to a
--   number greater than the number of CPU cores, the IoT Greengrass Core
--   software doesn't limit the component's CPU usage.
[$sel:cpus:SystemResourceLimits'] :: SystemResourceLimits -> Maybe Double

-- | Create a value of <a>SystemResourceLimits</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:memory:SystemResourceLimits'</a>,
--   <a>systemResourceLimits_memory</a> - The maximum amount of RAM,
--   expressed in kilobytes, that a component's processes can use on the
--   core device.
--   
--   <a>$sel:cpus:SystemResourceLimits'</a>,
--   <a>systemResourceLimits_cpus</a> - The maximum amount of CPU time that
--   a component's processes can use on the core device. A core device's
--   total CPU time is equivalent to the device's number of CPU cores. For
--   example, on a core device with 4 CPU cores, you can set this value to
--   <tt>2</tt> to limit the component's processes to 50 percent usage of
--   each CPU core. On a device with 1 CPU core, you can set this value to
--   <tt>0.25</tt> to limit the component's processes to 25 percent usage
--   of the CPU. If you set this value to a number greater than the number
--   of CPU cores, the IoT Greengrass Core software doesn't limit the
--   component's CPU usage.
newSystemResourceLimits :: SystemResourceLimits

-- | The maximum amount of RAM, expressed in kilobytes, that a component's
--   processes can use on the core device.
systemResourceLimits_memory :: Lens' SystemResourceLimits (Maybe Natural)

-- | The maximum amount of CPU time that a component's processes can use on
--   the core device. A core device's total CPU time is equivalent to the
--   device's number of CPU cores. For example, on a core device with 4 CPU
--   cores, you can set this value to <tt>2</tt> to limit the component's
--   processes to 50 percent usage of each CPU core. On a device with 1 CPU
--   core, you can set this value to <tt>0.25</tt> to limit the component's
--   processes to 25 percent usage of the CPU. If you set this value to a
--   number greater than the number of CPU cores, the IoT Greengrass Core
--   software doesn't limit the component's CPU usage.
systemResourceLimits_cpus :: Lens' SystemResourceLimits (Maybe Double)


-- | Adds tags to an IoT Greengrass resource. If a tag already exists for
--   the resource, this operation updates the tag's value.
module Amazonka.GreengrassV2.TagResource

-- | <i>See:</i> <a>newTagResource</a> smart constructor.
data TagResource
TagResource' :: Text -> HashMap Text Text -> TagResource

-- | The <a>ARN</a> of the resource to tag.
[$sel:resourceArn:TagResource'] :: TagResource -> Text

-- | A list of key-value pairs that contain metadata for the resource. For
--   more information, see <a>Tag your resources</a> in the <i>IoT
--   Greengrass V2 Developer Guide</i>.
[$sel:tags:TagResource'] :: TagResource -> HashMap Text Text

-- | Create a value of <a>TagResource</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:TagResource'</a>, <a>tagResource_resourceArn</a> -
--   The <a>ARN</a> of the resource to tag.
--   
--   <a>$sel:tags:TagResource'</a>, <a>tagResource_tags</a> - A list of
--   key-value pairs that contain metadata for the resource. For more
--   information, see <a>Tag your resources</a> in the <i>IoT Greengrass V2
--   Developer Guide</i>.
newTagResource :: Text -> TagResource

-- | The <a>ARN</a> of the resource to tag.
tagResource_resourceArn :: Lens' TagResource Text

-- | A list of key-value pairs that contain metadata for the resource. For
--   more information, see <a>Tag your resources</a> in the <i>IoT
--   Greengrass V2 Developer Guide</i>.
tagResource_tags :: Lens' TagResource (HashMap Text Text)

-- | <i>See:</i> <a>newTagResourceResponse</a> smart constructor.
data TagResourceResponse
TagResourceResponse' :: Int -> TagResourceResponse

-- | The response's http status code.
[$sel:httpStatus:TagResourceResponse'] :: TagResourceResponse -> Int

-- | Create a value of <a>TagResourceResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:TagResourceResponse'</a>,
--   <a>tagResourceResponse_httpStatus</a> - The response's http status
--   code.
newTagResourceResponse :: Int -> TagResourceResponse

-- | The response's http status code.
tagResourceResponse_httpStatus :: Lens' TagResourceResponse Int
instance GHC.Generics.Generic Amazonka.GreengrassV2.TagResource.TagResource
instance GHC.Show.Show Amazonka.GreengrassV2.TagResource.TagResource
instance GHC.Read.Read Amazonka.GreengrassV2.TagResource.TagResource
instance GHC.Classes.Eq Amazonka.GreengrassV2.TagResource.TagResource
instance GHC.Generics.Generic Amazonka.GreengrassV2.TagResource.TagResourceResponse
instance GHC.Show.Show Amazonka.GreengrassV2.TagResource.TagResourceResponse
instance GHC.Read.Read Amazonka.GreengrassV2.TagResource.TagResourceResponse
instance GHC.Classes.Eq Amazonka.GreengrassV2.TagResource.TagResourceResponse
instance Amazonka.Types.AWSRequest Amazonka.GreengrassV2.TagResource.TagResource
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.TagResource.TagResourceResponse
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.TagResource.TagResource
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.TagResource.TagResource
instance Amazonka.Data.Headers.ToHeaders Amazonka.GreengrassV2.TagResource.TagResource
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.TagResource.TagResource
instance Amazonka.Data.Path.ToPath Amazonka.GreengrassV2.TagResource.TagResource
instance Amazonka.Data.Query.ToQuery Amazonka.GreengrassV2.TagResource.TagResource


-- | Retrieves a list of components that meet the component, version, and
--   platform requirements of a deployment. Greengrass core devices call
--   this operation when they receive a deployment to identify the
--   components to install.
--   
--   This operation identifies components that meet all dependency
--   requirements for a deployment. If the requirements conflict, then this
--   operation returns an error and the deployment fails. For example, this
--   occurs if component <tt>A</tt> requires version <tt>&gt;2.0.0</tt> and
--   component <tt>B</tt> requires version <tt>&lt;2.0.0</tt> of a
--   component dependency.
--   
--   When you specify the component candidates to resolve, IoT Greengrass
--   compares each component's digest from the core device with the
--   component's digest in the Amazon Web Services Cloud. If the digests
--   don't match, then IoT Greengrass specifies to use the version from the
--   Amazon Web Services Cloud.
--   
--   To use this operation, you must use the data plane API endpoint and
--   authenticate with an IoT device certificate. For more information, see
--   <a>IoT Greengrass endpoints and quotas</a>.
module Amazonka.GreengrassV2.ResolveComponentCandidates

-- | <i>See:</i> <a>newResolveComponentCandidates</a> smart constructor.
data ResolveComponentCandidates
ResolveComponentCandidates' :: ComponentPlatform -> [ComponentCandidate] -> ResolveComponentCandidates

-- | The platform to use to resolve compatible components.
[$sel:platform:ResolveComponentCandidates'] :: ResolveComponentCandidates -> ComponentPlatform

-- | The list of components to resolve.
[$sel:componentCandidates:ResolveComponentCandidates'] :: ResolveComponentCandidates -> [ComponentCandidate]

-- | Create a value of <a>ResolveComponentCandidates</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:platform:ResolveComponentCandidates'</a>,
--   <a>resolveComponentCandidates_platform</a> - The platform to use to
--   resolve compatible components.
--   
--   <a>$sel:componentCandidates:ResolveComponentCandidates'</a>,
--   <a>resolveComponentCandidates_componentCandidates</a> - The list of
--   components to resolve.
newResolveComponentCandidates :: ComponentPlatform -> ResolveComponentCandidates

-- | The platform to use to resolve compatible components.
resolveComponentCandidates_platform :: Lens' ResolveComponentCandidates ComponentPlatform

-- | The list of components to resolve.
resolveComponentCandidates_componentCandidates :: Lens' ResolveComponentCandidates [ComponentCandidate]

-- | <i>See:</i> <a>newResolveComponentCandidatesResponse</a> smart
--   constructor.
data ResolveComponentCandidatesResponse
ResolveComponentCandidatesResponse' :: Maybe [ResolvedComponentVersion] -> Int -> ResolveComponentCandidatesResponse

-- | A list of components that meet the requirements that you specify in
--   the request. This list includes each component's recipe that you can
--   use to install the component.
[$sel:resolvedComponentVersions:ResolveComponentCandidatesResponse'] :: ResolveComponentCandidatesResponse -> Maybe [ResolvedComponentVersion]

-- | The response's http status code.
[$sel:httpStatus:ResolveComponentCandidatesResponse'] :: ResolveComponentCandidatesResponse -> Int

-- | Create a value of <a>ResolveComponentCandidatesResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:resolvedComponentVersions:ResolveComponentCandidatesResponse'</a>,
--   <a>resolveComponentCandidatesResponse_resolvedComponentVersions</a> -
--   A list of components that meet the requirements that you specify in
--   the request. This list includes each component's recipe that you can
--   use to install the component.
--   
--   <a>$sel:httpStatus:ResolveComponentCandidatesResponse'</a>,
--   <a>resolveComponentCandidatesResponse_httpStatus</a> - The response's
--   http status code.
newResolveComponentCandidatesResponse :: Int -> ResolveComponentCandidatesResponse

-- | A list of components that meet the requirements that you specify in
--   the request. This list includes each component's recipe that you can
--   use to install the component.
resolveComponentCandidatesResponse_resolvedComponentVersions :: Lens' ResolveComponentCandidatesResponse (Maybe [ResolvedComponentVersion])

-- | The response's http status code.
resolveComponentCandidatesResponse_httpStatus :: Lens' ResolveComponentCandidatesResponse Int
instance GHC.Generics.Generic Amazonka.GreengrassV2.ResolveComponentCandidates.ResolveComponentCandidates
instance GHC.Show.Show Amazonka.GreengrassV2.ResolveComponentCandidates.ResolveComponentCandidates
instance GHC.Read.Read Amazonka.GreengrassV2.ResolveComponentCandidates.ResolveComponentCandidates
instance GHC.Classes.Eq Amazonka.GreengrassV2.ResolveComponentCandidates.ResolveComponentCandidates
instance GHC.Generics.Generic Amazonka.GreengrassV2.ResolveComponentCandidates.ResolveComponentCandidatesResponse
instance GHC.Show.Show Amazonka.GreengrassV2.ResolveComponentCandidates.ResolveComponentCandidatesResponse
instance GHC.Read.Read Amazonka.GreengrassV2.ResolveComponentCandidates.ResolveComponentCandidatesResponse
instance GHC.Classes.Eq Amazonka.GreengrassV2.ResolveComponentCandidates.ResolveComponentCandidatesResponse
instance Amazonka.Types.AWSRequest Amazonka.GreengrassV2.ResolveComponentCandidates.ResolveComponentCandidates
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.ResolveComponentCandidates.ResolveComponentCandidatesResponse
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.ResolveComponentCandidates.ResolveComponentCandidates
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.ResolveComponentCandidates.ResolveComponentCandidates
instance Amazonka.Data.Headers.ToHeaders Amazonka.GreengrassV2.ResolveComponentCandidates.ResolveComponentCandidates
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.ResolveComponentCandidates.ResolveComponentCandidates
instance Amazonka.Data.Path.ToPath Amazonka.GreengrassV2.ResolveComponentCandidates.ResolveComponentCandidates
instance Amazonka.Data.Query.ToQuery Amazonka.GreengrassV2.ResolveComponentCandidates.ResolveComponentCandidates


-- | Retrieves the list of tags for an IoT Greengrass resource.
module Amazonka.GreengrassV2.ListTagsForResource

-- | <i>See:</i> <a>newListTagsForResource</a> smart constructor.
data ListTagsForResource
ListTagsForResource' :: Text -> ListTagsForResource

-- | The <a>ARN</a> of the resource.
[$sel:resourceArn:ListTagsForResource'] :: ListTagsForResource -> Text

-- | Create a value of <a>ListTagsForResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:ListTagsForResource'</a>,
--   <a>listTagsForResource_resourceArn</a> - The <a>ARN</a> of the
--   resource.
newListTagsForResource :: Text -> ListTagsForResource

-- | The <a>ARN</a> of the resource.
listTagsForResource_resourceArn :: Lens' ListTagsForResource Text

-- | <i>See:</i> <a>newListTagsForResourceResponse</a> smart constructor.
data ListTagsForResourceResponse
ListTagsForResourceResponse' :: Maybe (HashMap Text Text) -> Int -> ListTagsForResourceResponse

-- | A list of key-value pairs that contain metadata for the resource. For
--   more information, see <a>Tag your resources</a> in the <i>IoT
--   Greengrass V2 Developer Guide</i>.
[$sel:tags:ListTagsForResourceResponse'] :: ListTagsForResourceResponse -> Maybe (HashMap Text Text)

-- | The response's http status code.
[$sel:httpStatus:ListTagsForResourceResponse'] :: ListTagsForResourceResponse -> Int

-- | Create a value of <a>ListTagsForResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tags:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_tags</a> - A list of key-value pairs
--   that contain metadata for the resource. For more information, see
--   <a>Tag your resources</a> in the <i>IoT Greengrass V2 Developer
--   Guide</i>.
--   
--   <a>$sel:httpStatus:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_httpStatus</a> - The response's http
--   status code.
newListTagsForResourceResponse :: Int -> ListTagsForResourceResponse

-- | A list of key-value pairs that contain metadata for the resource. For
--   more information, see <a>Tag your resources</a> in the <i>IoT
--   Greengrass V2 Developer Guide</i>.
listTagsForResourceResponse_tags :: Lens' ListTagsForResourceResponse (Maybe (HashMap Text Text))

-- | The response's http status code.
listTagsForResourceResponse_httpStatus :: Lens' ListTagsForResourceResponse Int
instance GHC.Generics.Generic Amazonka.GreengrassV2.ListTagsForResource.ListTagsForResource
instance GHC.Show.Show Amazonka.GreengrassV2.ListTagsForResource.ListTagsForResource
instance GHC.Read.Read Amazonka.GreengrassV2.ListTagsForResource.ListTagsForResource
instance GHC.Classes.Eq Amazonka.GreengrassV2.ListTagsForResource.ListTagsForResource
instance GHC.Generics.Generic Amazonka.GreengrassV2.ListTagsForResource.ListTagsForResourceResponse
instance GHC.Show.Show Amazonka.GreengrassV2.ListTagsForResource.ListTagsForResourceResponse
instance GHC.Read.Read Amazonka.GreengrassV2.ListTagsForResource.ListTagsForResourceResponse
instance GHC.Classes.Eq Amazonka.GreengrassV2.ListTagsForResource.ListTagsForResourceResponse
instance Amazonka.Types.AWSRequest Amazonka.GreengrassV2.ListTagsForResource.ListTagsForResource
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.ListTagsForResource.ListTagsForResourceResponse
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.ListTagsForResource.ListTagsForResource
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.ListTagsForResource.ListTagsForResource
instance Amazonka.Data.Headers.ToHeaders Amazonka.GreengrassV2.ListTagsForResource.ListTagsForResource
instance Amazonka.Data.Path.ToPath Amazonka.GreengrassV2.ListTagsForResource.ListTagsForResource
instance Amazonka.Data.Query.ToQuery Amazonka.GreengrassV2.ListTagsForResource.ListTagsForResource


-- | Retrieves a paginated list of the components that a Greengrass core
--   device runs.
--   
--   This operation returns paginated results.
module Amazonka.GreengrassV2.ListInstalledComponents

-- | <i>See:</i> <a>newListInstalledComponents</a> smart constructor.
data ListInstalledComponents
ListInstalledComponents' :: Maybe Text -> Maybe Natural -> Text -> ListInstalledComponents

-- | The token to be used for the next set of paginated results.
[$sel:nextToken:ListInstalledComponents'] :: ListInstalledComponents -> Maybe Text

-- | The maximum number of results to be returned per paginated request.
[$sel:maxResults:ListInstalledComponents'] :: ListInstalledComponents -> Maybe Natural

-- | The name of the core device. This is also the name of the IoT thing.
[$sel:coreDeviceThingName:ListInstalledComponents'] :: ListInstalledComponents -> Text

-- | Create a value of <a>ListInstalledComponents</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListInstalledComponents'</a>,
--   <a>listInstalledComponents_nextToken</a> - The token to be used for
--   the next set of paginated results.
--   
--   <a>$sel:maxResults:ListInstalledComponents'</a>,
--   <a>listInstalledComponents_maxResults</a> - The maximum number of
--   results to be returned per paginated request.
--   
--   <a>$sel:coreDeviceThingName:ListInstalledComponents'</a>,
--   <a>listInstalledComponents_coreDeviceThingName</a> - The name of the
--   core device. This is also the name of the IoT thing.
newListInstalledComponents :: Text -> ListInstalledComponents

-- | The token to be used for the next set of paginated results.
listInstalledComponents_nextToken :: Lens' ListInstalledComponents (Maybe Text)

-- | The maximum number of results to be returned per paginated request.
listInstalledComponents_maxResults :: Lens' ListInstalledComponents (Maybe Natural)

-- | The name of the core device. This is also the name of the IoT thing.
listInstalledComponents_coreDeviceThingName :: Lens' ListInstalledComponents Text

-- | <i>See:</i> <a>newListInstalledComponentsResponse</a> smart
--   constructor.
data ListInstalledComponentsResponse
ListInstalledComponentsResponse' :: Maybe [InstalledComponent] -> Maybe Text -> Int -> ListInstalledComponentsResponse

-- | A list that summarizes each component on the core device.
[$sel:installedComponents:ListInstalledComponentsResponse'] :: ListInstalledComponentsResponse -> Maybe [InstalledComponent]

-- | The token for the next set of results, or null if there are no
--   additional results.
[$sel:nextToken:ListInstalledComponentsResponse'] :: ListInstalledComponentsResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:ListInstalledComponentsResponse'] :: ListInstalledComponentsResponse -> Int

-- | Create a value of <a>ListInstalledComponentsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:installedComponents:ListInstalledComponentsResponse'</a>,
--   <a>listInstalledComponentsResponse_installedComponents</a> - A list
--   that summarizes each component on the core device.
--   
--   <a>$sel:nextToken:ListInstalledComponents'</a>,
--   <a>listInstalledComponentsResponse_nextToken</a> - The token for the
--   next set of results, or null if there are no additional results.
--   
--   <a>$sel:httpStatus:ListInstalledComponentsResponse'</a>,
--   <a>listInstalledComponentsResponse_httpStatus</a> - The response's
--   http status code.
newListInstalledComponentsResponse :: Int -> ListInstalledComponentsResponse

-- | A list that summarizes each component on the core device.
listInstalledComponentsResponse_installedComponents :: Lens' ListInstalledComponentsResponse (Maybe [InstalledComponent])

-- | The token for the next set of results, or null if there are no
--   additional results.
listInstalledComponentsResponse_nextToken :: Lens' ListInstalledComponentsResponse (Maybe Text)

-- | The response's http status code.
listInstalledComponentsResponse_httpStatus :: Lens' ListInstalledComponentsResponse Int
instance GHC.Generics.Generic Amazonka.GreengrassV2.ListInstalledComponents.ListInstalledComponents
instance GHC.Show.Show Amazonka.GreengrassV2.ListInstalledComponents.ListInstalledComponents
instance GHC.Read.Read Amazonka.GreengrassV2.ListInstalledComponents.ListInstalledComponents
instance GHC.Classes.Eq Amazonka.GreengrassV2.ListInstalledComponents.ListInstalledComponents
instance GHC.Generics.Generic Amazonka.GreengrassV2.ListInstalledComponents.ListInstalledComponentsResponse
instance GHC.Show.Show Amazonka.GreengrassV2.ListInstalledComponents.ListInstalledComponentsResponse
instance GHC.Read.Read Amazonka.GreengrassV2.ListInstalledComponents.ListInstalledComponentsResponse
instance GHC.Classes.Eq Amazonka.GreengrassV2.ListInstalledComponents.ListInstalledComponentsResponse
instance Amazonka.Types.AWSRequest Amazonka.GreengrassV2.ListInstalledComponents.ListInstalledComponents
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.ListInstalledComponents.ListInstalledComponentsResponse
instance Amazonka.Pager.AWSPager Amazonka.GreengrassV2.ListInstalledComponents.ListInstalledComponents
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.ListInstalledComponents.ListInstalledComponents
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.ListInstalledComponents.ListInstalledComponents
instance Amazonka.Data.Headers.ToHeaders Amazonka.GreengrassV2.ListInstalledComponents.ListInstalledComponents
instance Amazonka.Data.Path.ToPath Amazonka.GreengrassV2.ListInstalledComponents.ListInstalledComponents
instance Amazonka.Data.Query.ToQuery Amazonka.GreengrassV2.ListInstalledComponents.ListInstalledComponents


-- | Retrieves a paginated list of deployment jobs that IoT Greengrass
--   sends to Greengrass core devices.
--   
--   This operation returns paginated results.
module Amazonka.GreengrassV2.ListEffectiveDeployments

-- | <i>See:</i> <a>newListEffectiveDeployments</a> smart constructor.
data ListEffectiveDeployments
ListEffectiveDeployments' :: Maybe Text -> Maybe Natural -> Text -> ListEffectiveDeployments

-- | The token to be used for the next set of paginated results.
[$sel:nextToken:ListEffectiveDeployments'] :: ListEffectiveDeployments -> Maybe Text

-- | The maximum number of results to be returned per paginated request.
[$sel:maxResults:ListEffectiveDeployments'] :: ListEffectiveDeployments -> Maybe Natural

-- | The name of the core device. This is also the name of the IoT thing.
[$sel:coreDeviceThingName:ListEffectiveDeployments'] :: ListEffectiveDeployments -> Text

-- | Create a value of <a>ListEffectiveDeployments</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListEffectiveDeployments'</a>,
--   <a>listEffectiveDeployments_nextToken</a> - The token to be used for
--   the next set of paginated results.
--   
--   <a>$sel:maxResults:ListEffectiveDeployments'</a>,
--   <a>listEffectiveDeployments_maxResults</a> - The maximum number of
--   results to be returned per paginated request.
--   
--   <a>$sel:coreDeviceThingName:ListEffectiveDeployments'</a>,
--   <a>listEffectiveDeployments_coreDeviceThingName</a> - The name of the
--   core device. This is also the name of the IoT thing.
newListEffectiveDeployments :: Text -> ListEffectiveDeployments

-- | The token to be used for the next set of paginated results.
listEffectiveDeployments_nextToken :: Lens' ListEffectiveDeployments (Maybe Text)

-- | The maximum number of results to be returned per paginated request.
listEffectiveDeployments_maxResults :: Lens' ListEffectiveDeployments (Maybe Natural)

-- | The name of the core device. This is also the name of the IoT thing.
listEffectiveDeployments_coreDeviceThingName :: Lens' ListEffectiveDeployments Text

-- | <i>See:</i> <a>newListEffectiveDeploymentsResponse</a> smart
--   constructor.
data ListEffectiveDeploymentsResponse
ListEffectiveDeploymentsResponse' :: Maybe Text -> Maybe [EffectiveDeployment] -> Int -> ListEffectiveDeploymentsResponse

-- | The token for the next set of results, or null if there are no
--   additional results.
[$sel:nextToken:ListEffectiveDeploymentsResponse'] :: ListEffectiveDeploymentsResponse -> Maybe Text

-- | A list that summarizes each deployment on the core device.
[$sel:effectiveDeployments:ListEffectiveDeploymentsResponse'] :: ListEffectiveDeploymentsResponse -> Maybe [EffectiveDeployment]

-- | The response's http status code.
[$sel:httpStatus:ListEffectiveDeploymentsResponse'] :: ListEffectiveDeploymentsResponse -> Int

-- | Create a value of <a>ListEffectiveDeploymentsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListEffectiveDeployments'</a>,
--   <a>listEffectiveDeploymentsResponse_nextToken</a> - The token for the
--   next set of results, or null if there are no additional results.
--   
--   <a>$sel:effectiveDeployments:ListEffectiveDeploymentsResponse'</a>,
--   <a>listEffectiveDeploymentsResponse_effectiveDeployments</a> - A list
--   that summarizes each deployment on the core device.
--   
--   <a>$sel:httpStatus:ListEffectiveDeploymentsResponse'</a>,
--   <a>listEffectiveDeploymentsResponse_httpStatus</a> - The response's
--   http status code.
newListEffectiveDeploymentsResponse :: Int -> ListEffectiveDeploymentsResponse

-- | The token for the next set of results, or null if there are no
--   additional results.
listEffectiveDeploymentsResponse_nextToken :: Lens' ListEffectiveDeploymentsResponse (Maybe Text)

-- | A list that summarizes each deployment on the core device.
listEffectiveDeploymentsResponse_effectiveDeployments :: Lens' ListEffectiveDeploymentsResponse (Maybe [EffectiveDeployment])

-- | The response's http status code.
listEffectiveDeploymentsResponse_httpStatus :: Lens' ListEffectiveDeploymentsResponse Int
instance GHC.Generics.Generic Amazonka.GreengrassV2.ListEffectiveDeployments.ListEffectiveDeployments
instance GHC.Show.Show Amazonka.GreengrassV2.ListEffectiveDeployments.ListEffectiveDeployments
instance GHC.Read.Read Amazonka.GreengrassV2.ListEffectiveDeployments.ListEffectiveDeployments
instance GHC.Classes.Eq Amazonka.GreengrassV2.ListEffectiveDeployments.ListEffectiveDeployments
instance GHC.Generics.Generic Amazonka.GreengrassV2.ListEffectiveDeployments.ListEffectiveDeploymentsResponse
instance GHC.Show.Show Amazonka.GreengrassV2.ListEffectiveDeployments.ListEffectiveDeploymentsResponse
instance GHC.Read.Read Amazonka.GreengrassV2.ListEffectiveDeployments.ListEffectiveDeploymentsResponse
instance GHC.Classes.Eq Amazonka.GreengrassV2.ListEffectiveDeployments.ListEffectiveDeploymentsResponse
instance Amazonka.Types.AWSRequest Amazonka.GreengrassV2.ListEffectiveDeployments.ListEffectiveDeployments
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.ListEffectiveDeployments.ListEffectiveDeploymentsResponse
instance Amazonka.Pager.AWSPager Amazonka.GreengrassV2.ListEffectiveDeployments.ListEffectiveDeployments
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.ListEffectiveDeployments.ListEffectiveDeployments
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.ListEffectiveDeployments.ListEffectiveDeployments
instance Amazonka.Data.Headers.ToHeaders Amazonka.GreengrassV2.ListEffectiveDeployments.ListEffectiveDeployments
instance Amazonka.Data.Path.ToPath Amazonka.GreengrassV2.ListEffectiveDeployments.ListEffectiveDeployments
instance Amazonka.Data.Query.ToQuery Amazonka.GreengrassV2.ListEffectiveDeployments.ListEffectiveDeployments


-- | Retrieves a paginated list of deployments.
--   
--   This operation returns paginated results.
module Amazonka.GreengrassV2.ListDeployments

-- | <i>See:</i> <a>newListDeployments</a> smart constructor.
data ListDeployments
ListDeployments' :: Maybe Text -> Maybe Text -> Maybe DeploymentHistoryFilter -> Maybe Natural -> ListDeployments

-- | The <a>ARN</a> of the target IoT thing or thing group.
[$sel:targetArn:ListDeployments'] :: ListDeployments -> Maybe Text

-- | The token to be used for the next set of paginated results.
[$sel:nextToken:ListDeployments'] :: ListDeployments -> Maybe Text

-- | The filter for the list of deployments. Choose one of the following
--   options:
--   
--   <ul>
--   <li><tt>ALL</tt> – The list includes all deployments.</li>
--   <li><tt>LATEST_ONLY</tt> – The list includes only the latest revision
--   of each deployment.</li>
--   </ul>
--   
--   Default: <tt>LATEST_ONLY</tt>
[$sel:historyFilter:ListDeployments'] :: ListDeployments -> Maybe DeploymentHistoryFilter

-- | The maximum number of results to be returned per paginated request.
[$sel:maxResults:ListDeployments'] :: ListDeployments -> Maybe Natural

-- | Create a value of <a>ListDeployments</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:targetArn:ListDeployments'</a>,
--   <a>listDeployments_targetArn</a> - The <a>ARN</a> of the target IoT
--   thing or thing group.
--   
--   <a>$sel:nextToken:ListDeployments'</a>,
--   <a>listDeployments_nextToken</a> - The token to be used for the next
--   set of paginated results.
--   
--   <a>$sel:historyFilter:ListDeployments'</a>,
--   <a>listDeployments_historyFilter</a> - The filter for the list of
--   deployments. Choose one of the following options:
--   
--   <ul>
--   <li><tt>ALL</tt> – The list includes all deployments.</li>
--   <li><tt>LATEST_ONLY</tt> – The list includes only the latest revision
--   of each deployment.</li>
--   </ul>
--   
--   Default: <tt>LATEST_ONLY</tt>
--   
--   <a>$sel:maxResults:ListDeployments'</a>,
--   <a>listDeployments_maxResults</a> - The maximum number of results to
--   be returned per paginated request.
newListDeployments :: ListDeployments

-- | The <a>ARN</a> of the target IoT thing or thing group.
listDeployments_targetArn :: Lens' ListDeployments (Maybe Text)

-- | The token to be used for the next set of paginated results.
listDeployments_nextToken :: Lens' ListDeployments (Maybe Text)

-- | The filter for the list of deployments. Choose one of the following
--   options:
--   
--   <ul>
--   <li><tt>ALL</tt> – The list includes all deployments.</li>
--   <li><tt>LATEST_ONLY</tt> – The list includes only the latest revision
--   of each deployment.</li>
--   </ul>
--   
--   Default: <tt>LATEST_ONLY</tt>
listDeployments_historyFilter :: Lens' ListDeployments (Maybe DeploymentHistoryFilter)

-- | The maximum number of results to be returned per paginated request.
listDeployments_maxResults :: Lens' ListDeployments (Maybe Natural)

-- | <i>See:</i> <a>newListDeploymentsResponse</a> smart constructor.
data ListDeploymentsResponse
ListDeploymentsResponse' :: Maybe Text -> Maybe [Deployment] -> Int -> ListDeploymentsResponse

-- | The token for the next set of results, or null if there are no
--   additional results.
[$sel:nextToken:ListDeploymentsResponse'] :: ListDeploymentsResponse -> Maybe Text

-- | A list that summarizes each deployment.
[$sel:deployments:ListDeploymentsResponse'] :: ListDeploymentsResponse -> Maybe [Deployment]

-- | The response's http status code.
[$sel:httpStatus:ListDeploymentsResponse'] :: ListDeploymentsResponse -> Int

-- | Create a value of <a>ListDeploymentsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListDeployments'</a>,
--   <a>listDeploymentsResponse_nextToken</a> - The token for the next set
--   of results, or null if there are no additional results.
--   
--   <a>$sel:deployments:ListDeploymentsResponse'</a>,
--   <a>listDeploymentsResponse_deployments</a> - A list that summarizes
--   each deployment.
--   
--   <a>$sel:httpStatus:ListDeploymentsResponse'</a>,
--   <a>listDeploymentsResponse_httpStatus</a> - The response's http status
--   code.
newListDeploymentsResponse :: Int -> ListDeploymentsResponse

-- | The token for the next set of results, or null if there are no
--   additional results.
listDeploymentsResponse_nextToken :: Lens' ListDeploymentsResponse (Maybe Text)

-- | A list that summarizes each deployment.
listDeploymentsResponse_deployments :: Lens' ListDeploymentsResponse (Maybe [Deployment])

-- | The response's http status code.
listDeploymentsResponse_httpStatus :: Lens' ListDeploymentsResponse Int
instance GHC.Generics.Generic Amazonka.GreengrassV2.ListDeployments.ListDeployments
instance GHC.Show.Show Amazonka.GreengrassV2.ListDeployments.ListDeployments
instance GHC.Read.Read Amazonka.GreengrassV2.ListDeployments.ListDeployments
instance GHC.Classes.Eq Amazonka.GreengrassV2.ListDeployments.ListDeployments
instance GHC.Generics.Generic Amazonka.GreengrassV2.ListDeployments.ListDeploymentsResponse
instance GHC.Show.Show Amazonka.GreengrassV2.ListDeployments.ListDeploymentsResponse
instance GHC.Read.Read Amazonka.GreengrassV2.ListDeployments.ListDeploymentsResponse
instance GHC.Classes.Eq Amazonka.GreengrassV2.ListDeployments.ListDeploymentsResponse
instance Amazonka.Types.AWSRequest Amazonka.GreengrassV2.ListDeployments.ListDeployments
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.ListDeployments.ListDeploymentsResponse
instance Amazonka.Pager.AWSPager Amazonka.GreengrassV2.ListDeployments.ListDeployments
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.ListDeployments.ListDeployments
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.ListDeployments.ListDeployments
instance Amazonka.Data.Headers.ToHeaders Amazonka.GreengrassV2.ListDeployments.ListDeployments
instance Amazonka.Data.Path.ToPath Amazonka.GreengrassV2.ListDeployments.ListDeployments
instance Amazonka.Data.Query.ToQuery Amazonka.GreengrassV2.ListDeployments.ListDeployments


-- | Retrieves a paginated list of Greengrass core devices.
--   
--   This operation returns paginated results.
module Amazonka.GreengrassV2.ListCoreDevices

-- | <i>See:</i> <a>newListCoreDevices</a> smart constructor.
data ListCoreDevices
ListCoreDevices' :: Maybe CoreDeviceStatus -> Maybe Text -> Maybe Text -> Maybe Natural -> ListCoreDevices

-- | The core device status by which to filter. If you specify this
--   parameter, the list includes only core devices that have this status.
--   Choose one of the following options:
--   
--   <ul>
--   <li><tt>HEALTHY</tt> – The IoT Greengrass Core software and all
--   components run on the core device without issue.</li>
--   <li><tt>UNHEALTHY</tt> – The IoT Greengrass Core software or a
--   component is in a failed state on the core device.</li>
--   </ul>
[$sel:status:ListCoreDevices'] :: ListCoreDevices -> Maybe CoreDeviceStatus

-- | The <a>ARN</a> of the IoT thing group by which to filter. If you
--   specify this parameter, the list includes only core devices that are
--   members of this thing group.
[$sel:thingGroupArn:ListCoreDevices'] :: ListCoreDevices -> Maybe Text

-- | The token to be used for the next set of paginated results.
[$sel:nextToken:ListCoreDevices'] :: ListCoreDevices -> Maybe Text

-- | The maximum number of results to be returned per paginated request.
[$sel:maxResults:ListCoreDevices'] :: ListCoreDevices -> Maybe Natural

-- | Create a value of <a>ListCoreDevices</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:ListCoreDevices'</a>, <a>listCoreDevices_status</a> -
--   The core device status by which to filter. If you specify this
--   parameter, the list includes only core devices that have this status.
--   Choose one of the following options:
--   
--   <ul>
--   <li><tt>HEALTHY</tt> – The IoT Greengrass Core software and all
--   components run on the core device without issue.</li>
--   <li><tt>UNHEALTHY</tt> – The IoT Greengrass Core software or a
--   component is in a failed state on the core device.</li>
--   </ul>
--   
--   <a>$sel:thingGroupArn:ListCoreDevices'</a>,
--   <a>listCoreDevices_thingGroupArn</a> - The <a>ARN</a> of the IoT thing
--   group by which to filter. If you specify this parameter, the list
--   includes only core devices that are members of this thing group.
--   
--   <a>$sel:nextToken:ListCoreDevices'</a>,
--   <a>listCoreDevices_nextToken</a> - The token to be used for the next
--   set of paginated results.
--   
--   <a>$sel:maxResults:ListCoreDevices'</a>,
--   <a>listCoreDevices_maxResults</a> - The maximum number of results to
--   be returned per paginated request.
newListCoreDevices :: ListCoreDevices

-- | The core device status by which to filter. If you specify this
--   parameter, the list includes only core devices that have this status.
--   Choose one of the following options:
--   
--   <ul>
--   <li><tt>HEALTHY</tt> – The IoT Greengrass Core software and all
--   components run on the core device without issue.</li>
--   <li><tt>UNHEALTHY</tt> – The IoT Greengrass Core software or a
--   component is in a failed state on the core device.</li>
--   </ul>
listCoreDevices_status :: Lens' ListCoreDevices (Maybe CoreDeviceStatus)

-- | The <a>ARN</a> of the IoT thing group by which to filter. If you
--   specify this parameter, the list includes only core devices that are
--   members of this thing group.
listCoreDevices_thingGroupArn :: Lens' ListCoreDevices (Maybe Text)

-- | The token to be used for the next set of paginated results.
listCoreDevices_nextToken :: Lens' ListCoreDevices (Maybe Text)

-- | The maximum number of results to be returned per paginated request.
listCoreDevices_maxResults :: Lens' ListCoreDevices (Maybe Natural)

-- | <i>See:</i> <a>newListCoreDevicesResponse</a> smart constructor.
data ListCoreDevicesResponse
ListCoreDevicesResponse' :: Maybe Text -> Maybe [CoreDevice] -> Int -> ListCoreDevicesResponse

-- | The token for the next set of results, or null if there are no
--   additional results.
[$sel:nextToken:ListCoreDevicesResponse'] :: ListCoreDevicesResponse -> Maybe Text

-- | A list that summarizes each core device.
[$sel:coreDevices:ListCoreDevicesResponse'] :: ListCoreDevicesResponse -> Maybe [CoreDevice]

-- | The response's http status code.
[$sel:httpStatus:ListCoreDevicesResponse'] :: ListCoreDevicesResponse -> Int

-- | Create a value of <a>ListCoreDevicesResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListCoreDevices'</a>,
--   <a>listCoreDevicesResponse_nextToken</a> - The token for the next set
--   of results, or null if there are no additional results.
--   
--   <a>$sel:coreDevices:ListCoreDevicesResponse'</a>,
--   <a>listCoreDevicesResponse_coreDevices</a> - A list that summarizes
--   each core device.
--   
--   <a>$sel:httpStatus:ListCoreDevicesResponse'</a>,
--   <a>listCoreDevicesResponse_httpStatus</a> - The response's http status
--   code.
newListCoreDevicesResponse :: Int -> ListCoreDevicesResponse

-- | The token for the next set of results, or null if there are no
--   additional results.
listCoreDevicesResponse_nextToken :: Lens' ListCoreDevicesResponse (Maybe Text)

-- | A list that summarizes each core device.
listCoreDevicesResponse_coreDevices :: Lens' ListCoreDevicesResponse (Maybe [CoreDevice])

-- | The response's http status code.
listCoreDevicesResponse_httpStatus :: Lens' ListCoreDevicesResponse Int
instance GHC.Generics.Generic Amazonka.GreengrassV2.ListCoreDevices.ListCoreDevices
instance GHC.Show.Show Amazonka.GreengrassV2.ListCoreDevices.ListCoreDevices
instance GHC.Read.Read Amazonka.GreengrassV2.ListCoreDevices.ListCoreDevices
instance GHC.Classes.Eq Amazonka.GreengrassV2.ListCoreDevices.ListCoreDevices
instance GHC.Generics.Generic Amazonka.GreengrassV2.ListCoreDevices.ListCoreDevicesResponse
instance GHC.Show.Show Amazonka.GreengrassV2.ListCoreDevices.ListCoreDevicesResponse
instance GHC.Read.Read Amazonka.GreengrassV2.ListCoreDevices.ListCoreDevicesResponse
instance GHC.Classes.Eq Amazonka.GreengrassV2.ListCoreDevices.ListCoreDevicesResponse
instance Amazonka.Types.AWSRequest Amazonka.GreengrassV2.ListCoreDevices.ListCoreDevices
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.ListCoreDevices.ListCoreDevicesResponse
instance Amazonka.Pager.AWSPager Amazonka.GreengrassV2.ListCoreDevices.ListCoreDevices
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.ListCoreDevices.ListCoreDevices
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.ListCoreDevices.ListCoreDevices
instance Amazonka.Data.Headers.ToHeaders Amazonka.GreengrassV2.ListCoreDevices.ListCoreDevices
instance Amazonka.Data.Path.ToPath Amazonka.GreengrassV2.ListCoreDevices.ListCoreDevices
instance Amazonka.Data.Query.ToQuery Amazonka.GreengrassV2.ListCoreDevices.ListCoreDevices


-- | Retrieves a paginated list of component summaries. This list includes
--   components that you have permission to view.
--   
--   This operation returns paginated results.
module Amazonka.GreengrassV2.ListComponents

-- | <i>See:</i> <a>newListComponents</a> smart constructor.
data ListComponents
ListComponents' :: Maybe Text -> Maybe ComponentVisibilityScope -> Maybe Natural -> ListComponents

-- | The token to be used for the next set of paginated results.
[$sel:nextToken:ListComponents'] :: ListComponents -> Maybe Text

-- | The scope of the components to list.
--   
--   Default: <tt>PRIVATE</tt>
[$sel:scope:ListComponents'] :: ListComponents -> Maybe ComponentVisibilityScope

-- | The maximum number of results to be returned per paginated request.
[$sel:maxResults:ListComponents'] :: ListComponents -> Maybe Natural

-- | Create a value of <a>ListComponents</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListComponents'</a>, <a>listComponents_nextToken</a>
--   - The token to be used for the next set of paginated results.
--   
--   <a>$sel:scope:ListComponents'</a>, <a>listComponents_scope</a> - The
--   scope of the components to list.
--   
--   Default: <tt>PRIVATE</tt>
--   
--   <a>$sel:maxResults:ListComponents'</a>,
--   <a>listComponents_maxResults</a> - The maximum number of results to be
--   returned per paginated request.
newListComponents :: ListComponents

-- | The token to be used for the next set of paginated results.
listComponents_nextToken :: Lens' ListComponents (Maybe Text)

-- | The scope of the components to list.
--   
--   Default: <tt>PRIVATE</tt>
listComponents_scope :: Lens' ListComponents (Maybe ComponentVisibilityScope)

-- | The maximum number of results to be returned per paginated request.
listComponents_maxResults :: Lens' ListComponents (Maybe Natural)

-- | <i>See:</i> <a>newListComponentsResponse</a> smart constructor.
data ListComponentsResponse
ListComponentsResponse' :: Maybe [Component] -> Maybe Text -> Int -> ListComponentsResponse

-- | A list that summarizes each component.
[$sel:components:ListComponentsResponse'] :: ListComponentsResponse -> Maybe [Component]

-- | The token for the next set of results, or null if there are no
--   additional results.
[$sel:nextToken:ListComponentsResponse'] :: ListComponentsResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:ListComponentsResponse'] :: ListComponentsResponse -> Int

-- | Create a value of <a>ListComponentsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:components:ListComponentsResponse'</a>,
--   <a>listComponentsResponse_components</a> - A list that summarizes each
--   component.
--   
--   <a>$sel:nextToken:ListComponents'</a>,
--   <a>listComponentsResponse_nextToken</a> - The token for the next set
--   of results, or null if there are no additional results.
--   
--   <a>$sel:httpStatus:ListComponentsResponse'</a>,
--   <a>listComponentsResponse_httpStatus</a> - The response's http status
--   code.
newListComponentsResponse :: Int -> ListComponentsResponse

-- | A list that summarizes each component.
listComponentsResponse_components :: Lens' ListComponentsResponse (Maybe [Component])

-- | The token for the next set of results, or null if there are no
--   additional results.
listComponentsResponse_nextToken :: Lens' ListComponentsResponse (Maybe Text)

-- | The response's http status code.
listComponentsResponse_httpStatus :: Lens' ListComponentsResponse Int
instance GHC.Generics.Generic Amazonka.GreengrassV2.ListComponents.ListComponents
instance GHC.Show.Show Amazonka.GreengrassV2.ListComponents.ListComponents
instance GHC.Read.Read Amazonka.GreengrassV2.ListComponents.ListComponents
instance GHC.Classes.Eq Amazonka.GreengrassV2.ListComponents.ListComponents
instance GHC.Generics.Generic Amazonka.GreengrassV2.ListComponents.ListComponentsResponse
instance GHC.Show.Show Amazonka.GreengrassV2.ListComponents.ListComponentsResponse
instance GHC.Read.Read Amazonka.GreengrassV2.ListComponents.ListComponentsResponse
instance GHC.Classes.Eq Amazonka.GreengrassV2.ListComponents.ListComponentsResponse
instance Amazonka.Types.AWSRequest Amazonka.GreengrassV2.ListComponents.ListComponents
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.ListComponents.ListComponentsResponse
instance Amazonka.Pager.AWSPager Amazonka.GreengrassV2.ListComponents.ListComponents
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.ListComponents.ListComponents
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.ListComponents.ListComponents
instance Amazonka.Data.Headers.ToHeaders Amazonka.GreengrassV2.ListComponents.ListComponents
instance Amazonka.Data.Path.ToPath Amazonka.GreengrassV2.ListComponents.ListComponents
instance Amazonka.Data.Query.ToQuery Amazonka.GreengrassV2.ListComponents.ListComponents


-- | Retrieves a paginated list of all versions for a component. Greater
--   versions are listed first.
--   
--   This operation returns paginated results.
module Amazonka.GreengrassV2.ListComponentVersions

-- | <i>See:</i> <a>newListComponentVersions</a> smart constructor.
data ListComponentVersions
ListComponentVersions' :: Maybe Text -> Maybe Natural -> Text -> ListComponentVersions

-- | The token to be used for the next set of paginated results.
[$sel:nextToken:ListComponentVersions'] :: ListComponentVersions -> Maybe Text

-- | The maximum number of results to be returned per paginated request.
[$sel:maxResults:ListComponentVersions'] :: ListComponentVersions -> Maybe Natural

-- | The <a>ARN</a> of the component version.
[$sel:arn:ListComponentVersions'] :: ListComponentVersions -> Text

-- | Create a value of <a>ListComponentVersions</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListComponentVersions'</a>,
--   <a>listComponentVersions_nextToken</a> - The token to be used for the
--   next set of paginated results.
--   
--   <a>$sel:maxResults:ListComponentVersions'</a>,
--   <a>listComponentVersions_maxResults</a> - The maximum number of
--   results to be returned per paginated request.
--   
--   <a>$sel:arn:ListComponentVersions'</a>,
--   <a>listComponentVersions_arn</a> - The <a>ARN</a> of the component
--   version.
newListComponentVersions :: Text -> ListComponentVersions

-- | The token to be used for the next set of paginated results.
listComponentVersions_nextToken :: Lens' ListComponentVersions (Maybe Text)

-- | The maximum number of results to be returned per paginated request.
listComponentVersions_maxResults :: Lens' ListComponentVersions (Maybe Natural)

-- | The <a>ARN</a> of the component version.
listComponentVersions_arn :: Lens' ListComponentVersions Text

-- | <i>See:</i> <a>newListComponentVersionsResponse</a> smart constructor.
data ListComponentVersionsResponse
ListComponentVersionsResponse' :: Maybe Text -> Maybe [ComponentVersionListItem] -> Int -> ListComponentVersionsResponse

-- | The token for the next set of results, or null if there are no
--   additional results.
[$sel:nextToken:ListComponentVersionsResponse'] :: ListComponentVersionsResponse -> Maybe Text

-- | A list of versions that exist for the component.
[$sel:componentVersions:ListComponentVersionsResponse'] :: ListComponentVersionsResponse -> Maybe [ComponentVersionListItem]

-- | The response's http status code.
[$sel:httpStatus:ListComponentVersionsResponse'] :: ListComponentVersionsResponse -> Int

-- | Create a value of <a>ListComponentVersionsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListComponentVersions'</a>,
--   <a>listComponentVersionsResponse_nextToken</a> - The token for the
--   next set of results, or null if there are no additional results.
--   
--   <a>$sel:componentVersions:ListComponentVersionsResponse'</a>,
--   <a>listComponentVersionsResponse_componentVersions</a> - A list of
--   versions that exist for the component.
--   
--   <a>$sel:httpStatus:ListComponentVersionsResponse'</a>,
--   <a>listComponentVersionsResponse_httpStatus</a> - The response's http
--   status code.
newListComponentVersionsResponse :: Int -> ListComponentVersionsResponse

-- | The token for the next set of results, or null if there are no
--   additional results.
listComponentVersionsResponse_nextToken :: Lens' ListComponentVersionsResponse (Maybe Text)

-- | A list of versions that exist for the component.
listComponentVersionsResponse_componentVersions :: Lens' ListComponentVersionsResponse (Maybe [ComponentVersionListItem])

-- | The response's http status code.
listComponentVersionsResponse_httpStatus :: Lens' ListComponentVersionsResponse Int
instance GHC.Generics.Generic Amazonka.GreengrassV2.ListComponentVersions.ListComponentVersions
instance GHC.Show.Show Amazonka.GreengrassV2.ListComponentVersions.ListComponentVersions
instance GHC.Read.Read Amazonka.GreengrassV2.ListComponentVersions.ListComponentVersions
instance GHC.Classes.Eq Amazonka.GreengrassV2.ListComponentVersions.ListComponentVersions
instance GHC.Generics.Generic Amazonka.GreengrassV2.ListComponentVersions.ListComponentVersionsResponse
instance GHC.Show.Show Amazonka.GreengrassV2.ListComponentVersions.ListComponentVersionsResponse
instance GHC.Read.Read Amazonka.GreengrassV2.ListComponentVersions.ListComponentVersionsResponse
instance GHC.Classes.Eq Amazonka.GreengrassV2.ListComponentVersions.ListComponentVersionsResponse
instance Amazonka.Types.AWSRequest Amazonka.GreengrassV2.ListComponentVersions.ListComponentVersions
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.ListComponentVersions.ListComponentVersionsResponse
instance Amazonka.Pager.AWSPager Amazonka.GreengrassV2.ListComponentVersions.ListComponentVersions
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.ListComponentVersions.ListComponentVersions
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.ListComponentVersions.ListComponentVersions
instance Amazonka.Data.Headers.ToHeaders Amazonka.GreengrassV2.ListComponentVersions.ListComponentVersions
instance Amazonka.Data.Path.ToPath Amazonka.GreengrassV2.ListComponentVersions.ListComponentVersions
instance Amazonka.Data.Query.ToQuery Amazonka.GreengrassV2.ListComponentVersions.ListComponentVersions


-- | Retrieves a paginated list of client devices that are associated with
--   a core device.
--   
--   This operation returns paginated results.
module Amazonka.GreengrassV2.ListClientDevicesAssociatedWithCoreDevice

-- | <i>See:</i> <a>newListClientDevicesAssociatedWithCoreDevice</a> smart
--   constructor.
data ListClientDevicesAssociatedWithCoreDevice
ListClientDevicesAssociatedWithCoreDevice' :: Maybe Text -> Maybe Natural -> Text -> ListClientDevicesAssociatedWithCoreDevice

-- | The token to be used for the next set of paginated results.
[$sel:nextToken:ListClientDevicesAssociatedWithCoreDevice'] :: ListClientDevicesAssociatedWithCoreDevice -> Maybe Text

-- | The maximum number of results to be returned per paginated request.
[$sel:maxResults:ListClientDevicesAssociatedWithCoreDevice'] :: ListClientDevicesAssociatedWithCoreDevice -> Maybe Natural

-- | The name of the core device. This is also the name of the IoT thing.
[$sel:coreDeviceThingName:ListClientDevicesAssociatedWithCoreDevice'] :: ListClientDevicesAssociatedWithCoreDevice -> Text

-- | Create a value of <a>ListClientDevicesAssociatedWithCoreDevice</a>
--   with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListClientDevicesAssociatedWithCoreDevice'</a>,
--   <a>listClientDevicesAssociatedWithCoreDevice_nextToken</a> - The token
--   to be used for the next set of paginated results.
--   
--   <a>$sel:maxResults:ListClientDevicesAssociatedWithCoreDevice'</a>,
--   <a>listClientDevicesAssociatedWithCoreDevice_maxResults</a> - The
--   maximum number of results to be returned per paginated request.
--   
--   
--   <a>$sel:coreDeviceThingName:ListClientDevicesAssociatedWithCoreDevice'</a>,
--   <a>listClientDevicesAssociatedWithCoreDevice_coreDeviceThingName</a> -
--   The name of the core device. This is also the name of the IoT thing.
newListClientDevicesAssociatedWithCoreDevice :: Text -> ListClientDevicesAssociatedWithCoreDevice

-- | The token to be used for the next set of paginated results.
listClientDevicesAssociatedWithCoreDevice_nextToken :: Lens' ListClientDevicesAssociatedWithCoreDevice (Maybe Text)

-- | The maximum number of results to be returned per paginated request.
listClientDevicesAssociatedWithCoreDevice_maxResults :: Lens' ListClientDevicesAssociatedWithCoreDevice (Maybe Natural)

-- | The name of the core device. This is also the name of the IoT thing.
listClientDevicesAssociatedWithCoreDevice_coreDeviceThingName :: Lens' ListClientDevicesAssociatedWithCoreDevice Text

-- | <i>See:</i>
--   <a>newListClientDevicesAssociatedWithCoreDeviceResponse</a> smart
--   constructor.
data ListClientDevicesAssociatedWithCoreDeviceResponse
ListClientDevicesAssociatedWithCoreDeviceResponse' :: Maybe (NonEmpty AssociatedClientDevice) -> Maybe Text -> Int -> ListClientDevicesAssociatedWithCoreDeviceResponse

-- | A list that describes the client devices that are associated with the
--   core device.
[$sel:associatedClientDevices:ListClientDevicesAssociatedWithCoreDeviceResponse'] :: ListClientDevicesAssociatedWithCoreDeviceResponse -> Maybe (NonEmpty AssociatedClientDevice)

-- | The token for the next set of results, or null if there are no
--   additional results.
[$sel:nextToken:ListClientDevicesAssociatedWithCoreDeviceResponse'] :: ListClientDevicesAssociatedWithCoreDeviceResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:ListClientDevicesAssociatedWithCoreDeviceResponse'] :: ListClientDevicesAssociatedWithCoreDeviceResponse -> Int

-- | Create a value of
--   <a>ListClientDevicesAssociatedWithCoreDeviceResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:associatedClientDevices:ListClientDevicesAssociatedWithCoreDeviceResponse'</a>,
--   <a>listClientDevicesAssociatedWithCoreDeviceResponse_associatedClientDevices</a>
--   - A list that describes the client devices that are associated with
--   the core device.
--   
--   <a>$sel:nextToken:ListClientDevicesAssociatedWithCoreDevice'</a>,
--   <a>listClientDevicesAssociatedWithCoreDeviceResponse_nextToken</a> -
--   The token for the next set of results, or null if there are no
--   additional results.
--   
--   
--   <a>$sel:httpStatus:ListClientDevicesAssociatedWithCoreDeviceResponse'</a>,
--   <a>listClientDevicesAssociatedWithCoreDeviceResponse_httpStatus</a> -
--   The response's http status code.
newListClientDevicesAssociatedWithCoreDeviceResponse :: Int -> ListClientDevicesAssociatedWithCoreDeviceResponse

-- | A list that describes the client devices that are associated with the
--   core device.
listClientDevicesAssociatedWithCoreDeviceResponse_associatedClientDevices :: Lens' ListClientDevicesAssociatedWithCoreDeviceResponse (Maybe (NonEmpty AssociatedClientDevice))

-- | The token for the next set of results, or null if there are no
--   additional results.
listClientDevicesAssociatedWithCoreDeviceResponse_nextToken :: Lens' ListClientDevicesAssociatedWithCoreDeviceResponse (Maybe Text)

-- | The response's http status code.
listClientDevicesAssociatedWithCoreDeviceResponse_httpStatus :: Lens' ListClientDevicesAssociatedWithCoreDeviceResponse Int
instance GHC.Generics.Generic Amazonka.GreengrassV2.ListClientDevicesAssociatedWithCoreDevice.ListClientDevicesAssociatedWithCoreDevice
instance GHC.Show.Show Amazonka.GreengrassV2.ListClientDevicesAssociatedWithCoreDevice.ListClientDevicesAssociatedWithCoreDevice
instance GHC.Read.Read Amazonka.GreengrassV2.ListClientDevicesAssociatedWithCoreDevice.ListClientDevicesAssociatedWithCoreDevice
instance GHC.Classes.Eq Amazonka.GreengrassV2.ListClientDevicesAssociatedWithCoreDevice.ListClientDevicesAssociatedWithCoreDevice
instance GHC.Generics.Generic Amazonka.GreengrassV2.ListClientDevicesAssociatedWithCoreDevice.ListClientDevicesAssociatedWithCoreDeviceResponse
instance GHC.Show.Show Amazonka.GreengrassV2.ListClientDevicesAssociatedWithCoreDevice.ListClientDevicesAssociatedWithCoreDeviceResponse
instance GHC.Read.Read Amazonka.GreengrassV2.ListClientDevicesAssociatedWithCoreDevice.ListClientDevicesAssociatedWithCoreDeviceResponse
instance GHC.Classes.Eq Amazonka.GreengrassV2.ListClientDevicesAssociatedWithCoreDevice.ListClientDevicesAssociatedWithCoreDeviceResponse
instance Amazonka.Types.AWSRequest Amazonka.GreengrassV2.ListClientDevicesAssociatedWithCoreDevice.ListClientDevicesAssociatedWithCoreDevice
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.ListClientDevicesAssociatedWithCoreDevice.ListClientDevicesAssociatedWithCoreDeviceResponse
instance Amazonka.Pager.AWSPager Amazonka.GreengrassV2.ListClientDevicesAssociatedWithCoreDevice.ListClientDevicesAssociatedWithCoreDevice
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.ListClientDevicesAssociatedWithCoreDevice.ListClientDevicesAssociatedWithCoreDevice
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.ListClientDevicesAssociatedWithCoreDevice.ListClientDevicesAssociatedWithCoreDevice
instance Amazonka.Data.Headers.ToHeaders Amazonka.GreengrassV2.ListClientDevicesAssociatedWithCoreDevice.ListClientDevicesAssociatedWithCoreDevice
instance Amazonka.Data.Path.ToPath Amazonka.GreengrassV2.ListClientDevicesAssociatedWithCoreDevice.ListClientDevicesAssociatedWithCoreDevice
instance Amazonka.Data.Query.ToQuery Amazonka.GreengrassV2.ListClientDevicesAssociatedWithCoreDevice.ListClientDevicesAssociatedWithCoreDevice


-- | Gets a deployment. Deployments define the components that run on
--   Greengrass core devices.
module Amazonka.GreengrassV2.GetDeployment

-- | <i>See:</i> <a>newGetDeployment</a> smart constructor.
data GetDeployment
GetDeployment' :: Text -> GetDeployment

-- | The ID of the deployment.
[$sel:deploymentId:GetDeployment'] :: GetDeployment -> Text

-- | Create a value of <a>GetDeployment</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:deploymentId:GetDeployment'</a>,
--   <a>getDeployment_deploymentId</a> - The ID of the deployment.
newGetDeployment :: Text -> GetDeployment

-- | The ID of the deployment.
getDeployment_deploymentId :: Lens' GetDeployment Text

-- | <i>See:</i> <a>newGetDeploymentResponse</a> smart constructor.
data GetDeploymentResponse
GetDeploymentResponse' :: Maybe Text -> Maybe (HashMap Text ComponentDeploymentSpecification) -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe DeploymentPolicies -> Maybe POSIX -> Maybe DeploymentIoTJobConfiguration -> Maybe DeploymentStatus -> Maybe Bool -> Maybe Text -> Maybe Text -> Maybe (HashMap Text Text) -> Int -> GetDeploymentResponse

-- | The <a>ARN</a> of the target IoT thing or thing group.
[$sel:targetArn:GetDeploymentResponse'] :: GetDeploymentResponse -> Maybe Text

-- | The components to deploy. This is a dictionary, where each key is the
--   name of a component, and each key's value is the version and
--   configuration to deploy for that component.
[$sel:components:GetDeploymentResponse'] :: GetDeploymentResponse -> Maybe (HashMap Text ComponentDeploymentSpecification)

-- | The ID of the deployment.
[$sel:deploymentId:GetDeploymentResponse'] :: GetDeploymentResponse -> Maybe Text

-- | The ID of the IoT job that applies the deployment to target devices.
[$sel:iotJobId:GetDeploymentResponse'] :: GetDeploymentResponse -> Maybe Text

-- | The <a>ARN</a> of the IoT job that applies the deployment to target
--   devices.
[$sel:iotJobArn:GetDeploymentResponse'] :: GetDeploymentResponse -> Maybe Text

-- | The deployment policies for the deployment. These policies define how
--   the deployment updates components and handles failure.
[$sel:deploymentPolicies:GetDeploymentResponse'] :: GetDeploymentResponse -> Maybe DeploymentPolicies

-- | The time at which the deployment was created, expressed in ISO 8601
--   format.
[$sel:creationTimestamp:GetDeploymentResponse'] :: GetDeploymentResponse -> Maybe POSIX

-- | The job configuration for the deployment configuration. The job
--   configuration specifies the rollout, timeout, and stop configurations
--   for the deployment configuration.
[$sel:iotJobConfiguration:GetDeploymentResponse'] :: GetDeploymentResponse -> Maybe DeploymentIoTJobConfiguration

-- | The status of the deployment.
[$sel:deploymentStatus:GetDeploymentResponse'] :: GetDeploymentResponse -> Maybe DeploymentStatus

-- | Whether or not the deployment is the latest revision for its target.
[$sel:isLatestForTarget:GetDeploymentResponse'] :: GetDeploymentResponse -> Maybe Bool

-- | The revision number of the deployment.
[$sel:revisionId:GetDeploymentResponse'] :: GetDeploymentResponse -> Maybe Text

-- | The name of the deployment.
[$sel:deploymentName:GetDeploymentResponse'] :: GetDeploymentResponse -> Maybe Text

-- | A list of key-value pairs that contain metadata for the resource. For
--   more information, see <a>Tag your resources</a> in the <i>IoT
--   Greengrass V2 Developer Guide</i>.
[$sel:tags:GetDeploymentResponse'] :: GetDeploymentResponse -> Maybe (HashMap Text Text)

-- | The response's http status code.
[$sel:httpStatus:GetDeploymentResponse'] :: GetDeploymentResponse -> Int

-- | Create a value of <a>GetDeploymentResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:targetArn:GetDeploymentResponse'</a>,
--   <a>getDeploymentResponse_targetArn</a> - The <a>ARN</a> of the target
--   IoT thing or thing group.
--   
--   <a>$sel:components:GetDeploymentResponse'</a>,
--   <a>getDeploymentResponse_components</a> - The components to deploy.
--   This is a dictionary, where each key is the name of a component, and
--   each key's value is the version and configuration to deploy for that
--   component.
--   
--   <a>$sel:deploymentId:GetDeployment'</a>,
--   <a>getDeploymentResponse_deploymentId</a> - The ID of the deployment.
--   
--   <a>$sel:iotJobId:GetDeploymentResponse'</a>,
--   <a>getDeploymentResponse_iotJobId</a> - The ID of the IoT job that
--   applies the deployment to target devices.
--   
--   <a>$sel:iotJobArn:GetDeploymentResponse'</a>,
--   <a>getDeploymentResponse_iotJobArn</a> - The <a>ARN</a> of the IoT job
--   that applies the deployment to target devices.
--   
--   <a>$sel:deploymentPolicies:GetDeploymentResponse'</a>,
--   <a>getDeploymentResponse_deploymentPolicies</a> - The deployment
--   policies for the deployment. These policies define how the deployment
--   updates components and handles failure.
--   
--   <a>$sel:creationTimestamp:GetDeploymentResponse'</a>,
--   <a>getDeploymentResponse_creationTimestamp</a> - The time at which the
--   deployment was created, expressed in ISO 8601 format.
--   
--   <a>$sel:iotJobConfiguration:GetDeploymentResponse'</a>,
--   <a>getDeploymentResponse_iotJobConfiguration</a> - The job
--   configuration for the deployment configuration. The job configuration
--   specifies the rollout, timeout, and stop configurations for the
--   deployment configuration.
--   
--   <a>$sel:deploymentStatus:GetDeploymentResponse'</a>,
--   <a>getDeploymentResponse_deploymentStatus</a> - The status of the
--   deployment.
--   
--   <a>$sel:isLatestForTarget:GetDeploymentResponse'</a>,
--   <a>getDeploymentResponse_isLatestForTarget</a> - Whether or not the
--   deployment is the latest revision for its target.
--   
--   <a>$sel:revisionId:GetDeploymentResponse'</a>,
--   <a>getDeploymentResponse_revisionId</a> - The revision number of the
--   deployment.
--   
--   <a>$sel:deploymentName:GetDeploymentResponse'</a>,
--   <a>getDeploymentResponse_deploymentName</a> - The name of the
--   deployment.
--   
--   <a>$sel:tags:GetDeploymentResponse'</a>,
--   <a>getDeploymentResponse_tags</a> - A list of key-value pairs that
--   contain metadata for the resource. For more information, see <a>Tag
--   your resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>.
--   
--   <a>$sel:httpStatus:GetDeploymentResponse'</a>,
--   <a>getDeploymentResponse_httpStatus</a> - The response's http status
--   code.
newGetDeploymentResponse :: Int -> GetDeploymentResponse

-- | The <a>ARN</a> of the target IoT thing or thing group.
getDeploymentResponse_targetArn :: Lens' GetDeploymentResponse (Maybe Text)

-- | The components to deploy. This is a dictionary, where each key is the
--   name of a component, and each key's value is the version and
--   configuration to deploy for that component.
getDeploymentResponse_components :: Lens' GetDeploymentResponse (Maybe (HashMap Text ComponentDeploymentSpecification))

-- | The ID of the deployment.
getDeploymentResponse_deploymentId :: Lens' GetDeploymentResponse (Maybe Text)

-- | The ID of the IoT job that applies the deployment to target devices.
getDeploymentResponse_iotJobId :: Lens' GetDeploymentResponse (Maybe Text)

-- | The <a>ARN</a> of the IoT job that applies the deployment to target
--   devices.
getDeploymentResponse_iotJobArn :: Lens' GetDeploymentResponse (Maybe Text)

-- | The deployment policies for the deployment. These policies define how
--   the deployment updates components and handles failure.
getDeploymentResponse_deploymentPolicies :: Lens' GetDeploymentResponse (Maybe DeploymentPolicies)

-- | The time at which the deployment was created, expressed in ISO 8601
--   format.
getDeploymentResponse_creationTimestamp :: Lens' GetDeploymentResponse (Maybe UTCTime)

-- | The job configuration for the deployment configuration. The job
--   configuration specifies the rollout, timeout, and stop configurations
--   for the deployment configuration.
getDeploymentResponse_iotJobConfiguration :: Lens' GetDeploymentResponse (Maybe DeploymentIoTJobConfiguration)

-- | The status of the deployment.
getDeploymentResponse_deploymentStatus :: Lens' GetDeploymentResponse (Maybe DeploymentStatus)

-- | Whether or not the deployment is the latest revision for its target.
getDeploymentResponse_isLatestForTarget :: Lens' GetDeploymentResponse (Maybe Bool)

-- | The revision number of the deployment.
getDeploymentResponse_revisionId :: Lens' GetDeploymentResponse (Maybe Text)

-- | The name of the deployment.
getDeploymentResponse_deploymentName :: Lens' GetDeploymentResponse (Maybe Text)

-- | A list of key-value pairs that contain metadata for the resource. For
--   more information, see <a>Tag your resources</a> in the <i>IoT
--   Greengrass V2 Developer Guide</i>.
getDeploymentResponse_tags :: Lens' GetDeploymentResponse (Maybe (HashMap Text Text))

-- | The response's http status code.
getDeploymentResponse_httpStatus :: Lens' GetDeploymentResponse Int
instance GHC.Generics.Generic Amazonka.GreengrassV2.GetDeployment.GetDeployment
instance GHC.Show.Show Amazonka.GreengrassV2.GetDeployment.GetDeployment
instance GHC.Read.Read Amazonka.GreengrassV2.GetDeployment.GetDeployment
instance GHC.Classes.Eq Amazonka.GreengrassV2.GetDeployment.GetDeployment
instance GHC.Generics.Generic Amazonka.GreengrassV2.GetDeployment.GetDeploymentResponse
instance GHC.Show.Show Amazonka.GreengrassV2.GetDeployment.GetDeploymentResponse
instance GHC.Read.Read Amazonka.GreengrassV2.GetDeployment.GetDeploymentResponse
instance GHC.Classes.Eq Amazonka.GreengrassV2.GetDeployment.GetDeploymentResponse
instance Amazonka.Types.AWSRequest Amazonka.GreengrassV2.GetDeployment.GetDeployment
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.GetDeployment.GetDeploymentResponse
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.GetDeployment.GetDeployment
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.GetDeployment.GetDeployment
instance Amazonka.Data.Headers.ToHeaders Amazonka.GreengrassV2.GetDeployment.GetDeployment
instance Amazonka.Data.Path.ToPath Amazonka.GreengrassV2.GetDeployment.GetDeployment
instance Amazonka.Data.Query.ToQuery Amazonka.GreengrassV2.GetDeployment.GetDeployment


-- | Retrieves metadata for a Greengrass core device.
module Amazonka.GreengrassV2.GetCoreDevice

-- | <i>See:</i> <a>newGetCoreDevice</a> smart constructor.
data GetCoreDevice
GetCoreDevice' :: Text -> GetCoreDevice

-- | The name of the core device. This is also the name of the IoT thing.
[$sel:coreDeviceThingName:GetCoreDevice'] :: GetCoreDevice -> Text

-- | Create a value of <a>GetCoreDevice</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:coreDeviceThingName:GetCoreDevice'</a>,
--   <a>getCoreDevice_coreDeviceThingName</a> - The name of the core
--   device. This is also the name of the IoT thing.
newGetCoreDevice :: Text -> GetCoreDevice

-- | The name of the core device. This is also the name of the IoT thing.
getCoreDevice_coreDeviceThingName :: Lens' GetCoreDevice Text

-- | <i>See:</i> <a>newGetCoreDeviceResponse</a> smart constructor.
data GetCoreDeviceResponse
GetCoreDeviceResponse' :: Maybe CoreDeviceStatus -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe (HashMap Text Text) -> Maybe Text -> Maybe POSIX -> Int -> GetCoreDeviceResponse

-- | The status of the core device. The core device status can be:
--   
--   <ul>
--   <li><tt>HEALTHY</tt> – The IoT Greengrass Core software and all
--   components run on the core device without issue.</li>
--   <li><tt>UNHEALTHY</tt> – The IoT Greengrass Core software or a
--   component is in a failed state on the core device.</li>
--   </ul>
[$sel:status:GetCoreDeviceResponse'] :: GetCoreDeviceResponse -> Maybe CoreDeviceStatus

-- | The operating system platform that the core device runs.
[$sel:platform:GetCoreDeviceResponse'] :: GetCoreDeviceResponse -> Maybe Text

-- | The computer architecture of the core device.
[$sel:architecture:GetCoreDeviceResponse'] :: GetCoreDeviceResponse -> Maybe Text

-- | The name of the core device. This is also the name of the IoT thing.
[$sel:coreDeviceThingName:GetCoreDeviceResponse'] :: GetCoreDeviceResponse -> Maybe Text

-- | A list of key-value pairs that contain metadata for the resource. For
--   more information, see <a>Tag your resources</a> in the <i>IoT
--   Greengrass V2 Developer Guide</i>.
[$sel:tags:GetCoreDeviceResponse'] :: GetCoreDeviceResponse -> Maybe (HashMap Text Text)

-- | The version of the IoT Greengrass Core software that the core device
--   runs. This version is equivalent to the version of the Greengrass
--   nucleus component that runs on the core device. For more information,
--   see the <a>Greengrass nucleus component</a> in the <i>IoT Greengrass
--   V2 Developer Guide</i>.
[$sel:coreVersion:GetCoreDeviceResponse'] :: GetCoreDeviceResponse -> Maybe Text

-- | The time at which the core device's status last updated, expressed in
--   ISO 8601 format.
[$sel:lastStatusUpdateTimestamp:GetCoreDeviceResponse'] :: GetCoreDeviceResponse -> Maybe POSIX

-- | The response's http status code.
[$sel:httpStatus:GetCoreDeviceResponse'] :: GetCoreDeviceResponse -> Int

-- | Create a value of <a>GetCoreDeviceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:GetCoreDeviceResponse'</a>,
--   <a>getCoreDeviceResponse_status</a> - The status of the core device.
--   The core device status can be:
--   
--   <ul>
--   <li><tt>HEALTHY</tt> – The IoT Greengrass Core software and all
--   components run on the core device without issue.</li>
--   <li><tt>UNHEALTHY</tt> – The IoT Greengrass Core software or a
--   component is in a failed state on the core device.</li>
--   </ul>
--   
--   <a>$sel:platform:GetCoreDeviceResponse'</a>,
--   <a>getCoreDeviceResponse_platform</a> - The operating system platform
--   that the core device runs.
--   
--   <a>$sel:architecture:GetCoreDeviceResponse'</a>,
--   <a>getCoreDeviceResponse_architecture</a> - The computer architecture
--   of the core device.
--   
--   <a>$sel:coreDeviceThingName:GetCoreDevice'</a>,
--   <a>getCoreDeviceResponse_coreDeviceThingName</a> - The name of the
--   core device. This is also the name of the IoT thing.
--   
--   <a>$sel:tags:GetCoreDeviceResponse'</a>,
--   <a>getCoreDeviceResponse_tags</a> - A list of key-value pairs that
--   contain metadata for the resource. For more information, see <a>Tag
--   your resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>.
--   
--   <a>$sel:coreVersion:GetCoreDeviceResponse'</a>,
--   <a>getCoreDeviceResponse_coreVersion</a> - The version of the IoT
--   Greengrass Core software that the core device runs. This version is
--   equivalent to the version of the Greengrass nucleus component that
--   runs on the core device. For more information, see the <a>Greengrass
--   nucleus component</a> in the <i>IoT Greengrass V2 Developer Guide</i>.
--   
--   <a>$sel:lastStatusUpdateTimestamp:GetCoreDeviceResponse'</a>,
--   <a>getCoreDeviceResponse_lastStatusUpdateTimestamp</a> - The time at
--   which the core device's status last updated, expressed in ISO 8601
--   format.
--   
--   <a>$sel:httpStatus:GetCoreDeviceResponse'</a>,
--   <a>getCoreDeviceResponse_httpStatus</a> - The response's http status
--   code.
newGetCoreDeviceResponse :: Int -> GetCoreDeviceResponse

-- | The status of the core device. The core device status can be:
--   
--   <ul>
--   <li><tt>HEALTHY</tt> – The IoT Greengrass Core software and all
--   components run on the core device without issue.</li>
--   <li><tt>UNHEALTHY</tt> – The IoT Greengrass Core software or a
--   component is in a failed state on the core device.</li>
--   </ul>
getCoreDeviceResponse_status :: Lens' GetCoreDeviceResponse (Maybe CoreDeviceStatus)

-- | The operating system platform that the core device runs.
getCoreDeviceResponse_platform :: Lens' GetCoreDeviceResponse (Maybe Text)

-- | The computer architecture of the core device.
getCoreDeviceResponse_architecture :: Lens' GetCoreDeviceResponse (Maybe Text)

-- | The name of the core device. This is also the name of the IoT thing.
getCoreDeviceResponse_coreDeviceThingName :: Lens' GetCoreDeviceResponse (Maybe Text)

-- | A list of key-value pairs that contain metadata for the resource. For
--   more information, see <a>Tag your resources</a> in the <i>IoT
--   Greengrass V2 Developer Guide</i>.
getCoreDeviceResponse_tags :: Lens' GetCoreDeviceResponse (Maybe (HashMap Text Text))

-- | The version of the IoT Greengrass Core software that the core device
--   runs. This version is equivalent to the version of the Greengrass
--   nucleus component that runs on the core device. For more information,
--   see the <a>Greengrass nucleus component</a> in the <i>IoT Greengrass
--   V2 Developer Guide</i>.
getCoreDeviceResponse_coreVersion :: Lens' GetCoreDeviceResponse (Maybe Text)

-- | The time at which the core device's status last updated, expressed in
--   ISO 8601 format.
getCoreDeviceResponse_lastStatusUpdateTimestamp :: Lens' GetCoreDeviceResponse (Maybe UTCTime)

-- | The response's http status code.
getCoreDeviceResponse_httpStatus :: Lens' GetCoreDeviceResponse Int
instance GHC.Generics.Generic Amazonka.GreengrassV2.GetCoreDevice.GetCoreDevice
instance GHC.Show.Show Amazonka.GreengrassV2.GetCoreDevice.GetCoreDevice
instance GHC.Read.Read Amazonka.GreengrassV2.GetCoreDevice.GetCoreDevice
instance GHC.Classes.Eq Amazonka.GreengrassV2.GetCoreDevice.GetCoreDevice
instance GHC.Generics.Generic Amazonka.GreengrassV2.GetCoreDevice.GetCoreDeviceResponse
instance GHC.Show.Show Amazonka.GreengrassV2.GetCoreDevice.GetCoreDeviceResponse
instance GHC.Read.Read Amazonka.GreengrassV2.GetCoreDevice.GetCoreDeviceResponse
instance GHC.Classes.Eq Amazonka.GreengrassV2.GetCoreDevice.GetCoreDeviceResponse
instance Amazonka.Types.AWSRequest Amazonka.GreengrassV2.GetCoreDevice.GetCoreDevice
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.GetCoreDevice.GetCoreDeviceResponse
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.GetCoreDevice.GetCoreDevice
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.GetCoreDevice.GetCoreDevice
instance Amazonka.Data.Headers.ToHeaders Amazonka.GreengrassV2.GetCoreDevice.GetCoreDevice
instance Amazonka.Data.Path.ToPath Amazonka.GreengrassV2.GetCoreDevice.GetCoreDevice
instance Amazonka.Data.Query.ToQuery Amazonka.GreengrassV2.GetCoreDevice.GetCoreDevice


-- | Gets the pre-signed URL to download a public component artifact. Core
--   devices call this operation to identify the URL that they can use to
--   download an artifact to install.
module Amazonka.GreengrassV2.GetComponentVersionArtifact

-- | <i>See:</i> <a>newGetComponentVersionArtifact</a> smart constructor.
data GetComponentVersionArtifact
GetComponentVersionArtifact' :: Text -> Text -> GetComponentVersionArtifact

-- | The <a>ARN</a> of the component version. Specify the ARN of a public
--   component version.
[$sel:arn:GetComponentVersionArtifact'] :: GetComponentVersionArtifact -> Text

-- | The name of the artifact.
--   
--   You can use the <a>GetComponent</a> operation to download the
--   component recipe, which includes the URI of the artifact. The artifact
--   name is the section of the URI after the scheme. For example, in the
--   artifact URI <tt>greengrass:SomeArtifact.zip</tt>, the artifact name
--   is <tt>SomeArtifact.zip</tt>.
[$sel:artifactName:GetComponentVersionArtifact'] :: GetComponentVersionArtifact -> Text

-- | Create a value of <a>GetComponentVersionArtifact</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:arn:GetComponentVersionArtifact'</a>,
--   <a>getComponentVersionArtifact_arn</a> - The <a>ARN</a> of the
--   component version. Specify the ARN of a public component version.
--   
--   <a>$sel:artifactName:GetComponentVersionArtifact'</a>,
--   <a>getComponentVersionArtifact_artifactName</a> - The name of the
--   artifact.
--   
--   You can use the <a>GetComponent</a> operation to download the
--   component recipe, which includes the URI of the artifact. The artifact
--   name is the section of the URI after the scheme. For example, in the
--   artifact URI <tt>greengrass:SomeArtifact.zip</tt>, the artifact name
--   is <tt>SomeArtifact.zip</tt>.
newGetComponentVersionArtifact :: Text -> Text -> GetComponentVersionArtifact

-- | The <a>ARN</a> of the component version. Specify the ARN of a public
--   component version.
getComponentVersionArtifact_arn :: Lens' GetComponentVersionArtifact Text

-- | The name of the artifact.
--   
--   You can use the <a>GetComponent</a> operation to download the
--   component recipe, which includes the URI of the artifact. The artifact
--   name is the section of the URI after the scheme. For example, in the
--   artifact URI <tt>greengrass:SomeArtifact.zip</tt>, the artifact name
--   is <tt>SomeArtifact.zip</tt>.
getComponentVersionArtifact_artifactName :: Lens' GetComponentVersionArtifact Text

-- | <i>See:</i> <a>newGetComponentVersionArtifactResponse</a> smart
--   constructor.
data GetComponentVersionArtifactResponse
GetComponentVersionArtifactResponse' :: Int -> Text -> GetComponentVersionArtifactResponse

-- | The response's http status code.
[$sel:httpStatus:GetComponentVersionArtifactResponse'] :: GetComponentVersionArtifactResponse -> Int

-- | The URL of the artifact.
[$sel:preSignedUrl:GetComponentVersionArtifactResponse'] :: GetComponentVersionArtifactResponse -> Text

-- | Create a value of <a>GetComponentVersionArtifactResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:GetComponentVersionArtifactResponse'</a>,
--   <a>getComponentVersionArtifactResponse_httpStatus</a> - The response's
--   http status code.
--   
--   <a>$sel:preSignedUrl:GetComponentVersionArtifactResponse'</a>,
--   <a>getComponentVersionArtifactResponse_preSignedUrl</a> - The URL of
--   the artifact.
newGetComponentVersionArtifactResponse :: Int -> Text -> GetComponentVersionArtifactResponse

-- | The response's http status code.
getComponentVersionArtifactResponse_httpStatus :: Lens' GetComponentVersionArtifactResponse Int

-- | The URL of the artifact.
getComponentVersionArtifactResponse_preSignedUrl :: Lens' GetComponentVersionArtifactResponse Text
instance GHC.Generics.Generic Amazonka.GreengrassV2.GetComponentVersionArtifact.GetComponentVersionArtifact
instance GHC.Show.Show Amazonka.GreengrassV2.GetComponentVersionArtifact.GetComponentVersionArtifact
instance GHC.Read.Read Amazonka.GreengrassV2.GetComponentVersionArtifact.GetComponentVersionArtifact
instance GHC.Classes.Eq Amazonka.GreengrassV2.GetComponentVersionArtifact.GetComponentVersionArtifact
instance GHC.Generics.Generic Amazonka.GreengrassV2.GetComponentVersionArtifact.GetComponentVersionArtifactResponse
instance GHC.Show.Show Amazonka.GreengrassV2.GetComponentVersionArtifact.GetComponentVersionArtifactResponse
instance GHC.Read.Read Amazonka.GreengrassV2.GetComponentVersionArtifact.GetComponentVersionArtifactResponse
instance GHC.Classes.Eq Amazonka.GreengrassV2.GetComponentVersionArtifact.GetComponentVersionArtifactResponse
instance Amazonka.Types.AWSRequest Amazonka.GreengrassV2.GetComponentVersionArtifact.GetComponentVersionArtifact
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.GetComponentVersionArtifact.GetComponentVersionArtifactResponse
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.GetComponentVersionArtifact.GetComponentVersionArtifact
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.GetComponentVersionArtifact.GetComponentVersionArtifact
instance Amazonka.Data.Headers.ToHeaders Amazonka.GreengrassV2.GetComponentVersionArtifact.GetComponentVersionArtifact
instance Amazonka.Data.Path.ToPath Amazonka.GreengrassV2.GetComponentVersionArtifact.GetComponentVersionArtifact
instance Amazonka.Data.Query.ToQuery Amazonka.GreengrassV2.GetComponentVersionArtifact.GetComponentVersionArtifact


-- | Gets the recipe for a version of a component. Core devices can call
--   this operation to identify the artifacts and requirements to install a
--   component.
module Amazonka.GreengrassV2.GetComponent

-- | <i>See:</i> <a>newGetComponent</a> smart constructor.
data GetComponent
GetComponent' :: Maybe RecipeOutputFormat -> Text -> GetComponent

-- | The format of the recipe.
[$sel:recipeOutputFormat:GetComponent'] :: GetComponent -> Maybe RecipeOutputFormat

-- | The <a>ARN</a> of the component version.
[$sel:arn:GetComponent'] :: GetComponent -> Text

-- | Create a value of <a>GetComponent</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:recipeOutputFormat:GetComponent'</a>,
--   <a>getComponent_recipeOutputFormat</a> - The format of the recipe.
--   
--   <a>$sel:arn:GetComponent'</a>, <a>getComponent_arn</a> - The
--   <a>ARN</a> of the component version.
newGetComponent :: Text -> GetComponent

-- | The format of the recipe.
getComponent_recipeOutputFormat :: Lens' GetComponent (Maybe RecipeOutputFormat)

-- | The <a>ARN</a> of the component version.
getComponent_arn :: Lens' GetComponent Text

-- | <i>See:</i> <a>newGetComponentResponse</a> smart constructor.
data GetComponentResponse
GetComponentResponse' :: Maybe (HashMap Text Text) -> Int -> RecipeOutputFormat -> Base64 -> GetComponentResponse

-- | A list of key-value pairs that contain metadata for the resource. For
--   more information, see <a>Tag your resources</a> in the <i>IoT
--   Greengrass V2 Developer Guide</i>.
[$sel:tags:GetComponentResponse'] :: GetComponentResponse -> Maybe (HashMap Text Text)

-- | The response's http status code.
[$sel:httpStatus:GetComponentResponse'] :: GetComponentResponse -> Int

-- | The format of the recipe.
[$sel:recipeOutputFormat:GetComponentResponse'] :: GetComponentResponse -> RecipeOutputFormat

-- | The recipe of the component version.
[$sel:recipe:GetComponentResponse'] :: GetComponentResponse -> Base64

-- | Create a value of <a>GetComponentResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tags:GetComponentResponse'</a>,
--   <a>getComponentResponse_tags</a> - A list of key-value pairs that
--   contain metadata for the resource. For more information, see <a>Tag
--   your resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>.
--   
--   <a>$sel:httpStatus:GetComponentResponse'</a>,
--   <a>getComponentResponse_httpStatus</a> - The response's http status
--   code.
--   
--   <a>$sel:recipeOutputFormat:GetComponent'</a>,
--   <a>getComponentResponse_recipeOutputFormat</a> - The format of the
--   recipe.
--   
--   <a>$sel:recipe:GetComponentResponse'</a>,
--   <a>getComponentResponse_recipe</a> - The recipe of the component
--   version.-- -- <i>Note:</i> This <tt>Lens</tt> automatically encodes
--   and decodes Base64 data. -- The underlying isomorphism will encode to
--   Base64 representation during -- serialisation, and decode from Base64
--   representation during deserialisation. -- This <tt>Lens</tt> accepts
--   and returns only raw unencoded data.
newGetComponentResponse :: Int -> RecipeOutputFormat -> ByteString -> GetComponentResponse

-- | A list of key-value pairs that contain metadata for the resource. For
--   more information, see <a>Tag your resources</a> in the <i>IoT
--   Greengrass V2 Developer Guide</i>.
getComponentResponse_tags :: Lens' GetComponentResponse (Maybe (HashMap Text Text))

-- | The response's http status code.
getComponentResponse_httpStatus :: Lens' GetComponentResponse Int

-- | The format of the recipe.
getComponentResponse_recipeOutputFormat :: Lens' GetComponentResponse RecipeOutputFormat

-- | The recipe of the component version.-- -- <i>Note:</i> This
--   <tt>Lens</tt> automatically encodes and decodes Base64 data. -- The
--   underlying isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
getComponentResponse_recipe :: Lens' GetComponentResponse ByteString
instance GHC.Generics.Generic Amazonka.GreengrassV2.GetComponent.GetComponent
instance GHC.Show.Show Amazonka.GreengrassV2.GetComponent.GetComponent
instance GHC.Read.Read Amazonka.GreengrassV2.GetComponent.GetComponent
instance GHC.Classes.Eq Amazonka.GreengrassV2.GetComponent.GetComponent
instance GHC.Generics.Generic Amazonka.GreengrassV2.GetComponent.GetComponentResponse
instance GHC.Show.Show Amazonka.GreengrassV2.GetComponent.GetComponentResponse
instance GHC.Read.Read Amazonka.GreengrassV2.GetComponent.GetComponentResponse
instance GHC.Classes.Eq Amazonka.GreengrassV2.GetComponent.GetComponentResponse
instance Amazonka.Types.AWSRequest Amazonka.GreengrassV2.GetComponent.GetComponent
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.GetComponent.GetComponentResponse
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.GetComponent.GetComponent
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.GetComponent.GetComponent
instance Amazonka.Data.Headers.ToHeaders Amazonka.GreengrassV2.GetComponent.GetComponent
instance Amazonka.Data.Path.ToPath Amazonka.GreengrassV2.GetComponent.GetComponent
instance Amazonka.Data.Query.ToQuery Amazonka.GreengrassV2.GetComponent.GetComponent


-- | Retrieves metadata for a version of a component.
module Amazonka.GreengrassV2.DescribeComponent

-- | <i>See:</i> <a>newDescribeComponent</a> smart constructor.
data DescribeComponent
DescribeComponent' :: Text -> DescribeComponent

-- | The <a>ARN</a> of the component version.
[$sel:arn:DescribeComponent'] :: DescribeComponent -> Text

-- | Create a value of <a>DescribeComponent</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:arn:DescribeComponent'</a>, <a>describeComponent_arn</a> - The
--   <a>ARN</a> of the component version.
newDescribeComponent :: Text -> DescribeComponent

-- | The <a>ARN</a> of the component version.
describeComponent_arn :: Lens' DescribeComponent Text

-- | <i>See:</i> <a>newDescribeComponentResponse</a> smart constructor.
data DescribeComponentResponse
DescribeComponentResponse' :: Maybe [ComponentPlatform] -> Maybe CloudComponentStatus -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe (HashMap Text Text) -> Int -> DescribeComponentResponse

-- | The platforms that the component version supports.
[$sel:platforms:DescribeComponentResponse'] :: DescribeComponentResponse -> Maybe [ComponentPlatform]

-- | The status of the component version in IoT Greengrass V2. This status
--   is different from the status of the component on a core device.
[$sel:status:DescribeComponentResponse'] :: DescribeComponentResponse -> Maybe CloudComponentStatus

-- | The <a>ARN</a> of the component version.
[$sel:arn:DescribeComponentResponse'] :: DescribeComponentResponse -> Maybe Text

-- | The version of the component.
[$sel:componentVersion:DescribeComponentResponse'] :: DescribeComponentResponse -> Maybe Text

-- | The time at which the component was created, expressed in ISO 8601
--   format.
[$sel:creationTimestamp:DescribeComponentResponse'] :: DescribeComponentResponse -> Maybe POSIX

-- | The name of the component.
[$sel:componentName:DescribeComponentResponse'] :: DescribeComponentResponse -> Maybe Text

-- | The publisher of the component version.
[$sel:publisher:DescribeComponentResponse'] :: DescribeComponentResponse -> Maybe Text

-- | The description of the component version.
[$sel:description:DescribeComponentResponse'] :: DescribeComponentResponse -> Maybe Text

-- | A list of key-value pairs that contain metadata for the resource. For
--   more information, see <a>Tag your resources</a> in the <i>IoT
--   Greengrass V2 Developer Guide</i>.
[$sel:tags:DescribeComponentResponse'] :: DescribeComponentResponse -> Maybe (HashMap Text Text)

-- | The response's http status code.
[$sel:httpStatus:DescribeComponentResponse'] :: DescribeComponentResponse -> Int

-- | Create a value of <a>DescribeComponentResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:platforms:DescribeComponentResponse'</a>,
--   <a>describeComponentResponse_platforms</a> - The platforms that the
--   component version supports.
--   
--   <a>$sel:status:DescribeComponentResponse'</a>,
--   <a>describeComponentResponse_status</a> - The status of the component
--   version in IoT Greengrass V2. This status is different from the status
--   of the component on a core device.
--   
--   <a>$sel:arn:DescribeComponent'</a>,
--   <a>describeComponentResponse_arn</a> - The <a>ARN</a> of the component
--   version.
--   
--   <a>$sel:componentVersion:DescribeComponentResponse'</a>,
--   <a>describeComponentResponse_componentVersion</a> - The version of the
--   component.
--   
--   <a>$sel:creationTimestamp:DescribeComponentResponse'</a>,
--   <a>describeComponentResponse_creationTimestamp</a> - The time at which
--   the component was created, expressed in ISO 8601 format.
--   
--   <a>$sel:componentName:DescribeComponentResponse'</a>,
--   <a>describeComponentResponse_componentName</a> - The name of the
--   component.
--   
--   <a>$sel:publisher:DescribeComponentResponse'</a>,
--   <a>describeComponentResponse_publisher</a> - The publisher of the
--   component version.
--   
--   <a>$sel:description:DescribeComponentResponse'</a>,
--   <a>describeComponentResponse_description</a> - The description of the
--   component version.
--   
--   <a>$sel:tags:DescribeComponentResponse'</a>,
--   <a>describeComponentResponse_tags</a> - A list of key-value pairs that
--   contain metadata for the resource. For more information, see <a>Tag
--   your resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>.
--   
--   <a>$sel:httpStatus:DescribeComponentResponse'</a>,
--   <a>describeComponentResponse_httpStatus</a> - The response's http
--   status code.
newDescribeComponentResponse :: Int -> DescribeComponentResponse

-- | The platforms that the component version supports.
describeComponentResponse_platforms :: Lens' DescribeComponentResponse (Maybe [ComponentPlatform])

-- | The status of the component version in IoT Greengrass V2. This status
--   is different from the status of the component on a core device.
describeComponentResponse_status :: Lens' DescribeComponentResponse (Maybe CloudComponentStatus)

-- | The <a>ARN</a> of the component version.
describeComponentResponse_arn :: Lens' DescribeComponentResponse (Maybe Text)

-- | The version of the component.
describeComponentResponse_componentVersion :: Lens' DescribeComponentResponse (Maybe Text)

-- | The time at which the component was created, expressed in ISO 8601
--   format.
describeComponentResponse_creationTimestamp :: Lens' DescribeComponentResponse (Maybe UTCTime)

-- | The name of the component.
describeComponentResponse_componentName :: Lens' DescribeComponentResponse (Maybe Text)

-- | The publisher of the component version.
describeComponentResponse_publisher :: Lens' DescribeComponentResponse (Maybe Text)

-- | The description of the component version.
describeComponentResponse_description :: Lens' DescribeComponentResponse (Maybe Text)

-- | A list of key-value pairs that contain metadata for the resource. For
--   more information, see <a>Tag your resources</a> in the <i>IoT
--   Greengrass V2 Developer Guide</i>.
describeComponentResponse_tags :: Lens' DescribeComponentResponse (Maybe (HashMap Text Text))

-- | The response's http status code.
describeComponentResponse_httpStatus :: Lens' DescribeComponentResponse Int
instance GHC.Generics.Generic Amazonka.GreengrassV2.DescribeComponent.DescribeComponent
instance GHC.Show.Show Amazonka.GreengrassV2.DescribeComponent.DescribeComponent
instance GHC.Read.Read Amazonka.GreengrassV2.DescribeComponent.DescribeComponent
instance GHC.Classes.Eq Amazonka.GreengrassV2.DescribeComponent.DescribeComponent
instance GHC.Generics.Generic Amazonka.GreengrassV2.DescribeComponent.DescribeComponentResponse
instance GHC.Show.Show Amazonka.GreengrassV2.DescribeComponent.DescribeComponentResponse
instance GHC.Read.Read Amazonka.GreengrassV2.DescribeComponent.DescribeComponentResponse
instance GHC.Classes.Eq Amazonka.GreengrassV2.DescribeComponent.DescribeComponentResponse
instance Amazonka.Types.AWSRequest Amazonka.GreengrassV2.DescribeComponent.DescribeComponent
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.DescribeComponent.DescribeComponentResponse
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.DescribeComponent.DescribeComponent
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.DescribeComponent.DescribeComponent
instance Amazonka.Data.Headers.ToHeaders Amazonka.GreengrassV2.DescribeComponent.DescribeComponent
instance Amazonka.Data.Path.ToPath Amazonka.GreengrassV2.DescribeComponent.DescribeComponent
instance Amazonka.Data.Query.ToQuery Amazonka.GreengrassV2.DescribeComponent.DescribeComponent


-- | Deletes a Greengrass core device, which is an IoT thing. This
--   operation removes the core device from the list of core devices. This
--   operation doesn't delete the IoT thing. For more information about how
--   to delete the IoT thing, see <a>DeleteThing</a> in the <i>IoT API
--   Reference</i>.
module Amazonka.GreengrassV2.DeleteCoreDevice

-- | <i>See:</i> <a>newDeleteCoreDevice</a> smart constructor.
data DeleteCoreDevice
DeleteCoreDevice' :: Text -> DeleteCoreDevice

-- | The name of the core device. This is also the name of the IoT thing.
[$sel:coreDeviceThingName:DeleteCoreDevice'] :: DeleteCoreDevice -> Text

-- | Create a value of <a>DeleteCoreDevice</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:coreDeviceThingName:DeleteCoreDevice'</a>,
--   <a>deleteCoreDevice_coreDeviceThingName</a> - The name of the core
--   device. This is also the name of the IoT thing.
newDeleteCoreDevice :: Text -> DeleteCoreDevice

-- | The name of the core device. This is also the name of the IoT thing.
deleteCoreDevice_coreDeviceThingName :: Lens' DeleteCoreDevice Text

-- | <i>See:</i> <a>newDeleteCoreDeviceResponse</a> smart constructor.
data DeleteCoreDeviceResponse
DeleteCoreDeviceResponse' :: DeleteCoreDeviceResponse

-- | Create a value of <a>DeleteCoreDeviceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newDeleteCoreDeviceResponse :: DeleteCoreDeviceResponse
instance GHC.Generics.Generic Amazonka.GreengrassV2.DeleteCoreDevice.DeleteCoreDevice
instance GHC.Show.Show Amazonka.GreengrassV2.DeleteCoreDevice.DeleteCoreDevice
instance GHC.Read.Read Amazonka.GreengrassV2.DeleteCoreDevice.DeleteCoreDevice
instance GHC.Classes.Eq Amazonka.GreengrassV2.DeleteCoreDevice.DeleteCoreDevice
instance GHC.Generics.Generic Amazonka.GreengrassV2.DeleteCoreDevice.DeleteCoreDeviceResponse
instance GHC.Show.Show Amazonka.GreengrassV2.DeleteCoreDevice.DeleteCoreDeviceResponse
instance GHC.Read.Read Amazonka.GreengrassV2.DeleteCoreDevice.DeleteCoreDeviceResponse
instance GHC.Classes.Eq Amazonka.GreengrassV2.DeleteCoreDevice.DeleteCoreDeviceResponse
instance Amazonka.Types.AWSRequest Amazonka.GreengrassV2.DeleteCoreDevice.DeleteCoreDevice
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.DeleteCoreDevice.DeleteCoreDeviceResponse
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.DeleteCoreDevice.DeleteCoreDevice
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.DeleteCoreDevice.DeleteCoreDevice
instance Amazonka.Data.Headers.ToHeaders Amazonka.GreengrassV2.DeleteCoreDevice.DeleteCoreDevice
instance Amazonka.Data.Path.ToPath Amazonka.GreengrassV2.DeleteCoreDevice.DeleteCoreDevice
instance Amazonka.Data.Query.ToQuery Amazonka.GreengrassV2.DeleteCoreDevice.DeleteCoreDevice


-- | Deletes a version of a component from IoT Greengrass.
--   
--   This operation deletes the component's recipe and artifacts. As a
--   result, deployments that refer to this component version will fail. If
--   you have deployments that use this component version, you can remove
--   the component from the deployment or update the deployment to use a
--   valid version.
module Amazonka.GreengrassV2.DeleteComponent

-- | <i>See:</i> <a>newDeleteComponent</a> smart constructor.
data DeleteComponent
DeleteComponent' :: Text -> DeleteComponent

-- | The <a>ARN</a> of the component version.
[$sel:arn:DeleteComponent'] :: DeleteComponent -> Text

-- | Create a value of <a>DeleteComponent</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:arn:DeleteComponent'</a>, <a>deleteComponent_arn</a> - The
--   <a>ARN</a> of the component version.
newDeleteComponent :: Text -> DeleteComponent

-- | The <a>ARN</a> of the component version.
deleteComponent_arn :: Lens' DeleteComponent Text

-- | <i>See:</i> <a>newDeleteComponentResponse</a> smart constructor.
data DeleteComponentResponse
DeleteComponentResponse' :: DeleteComponentResponse

-- | Create a value of <a>DeleteComponentResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newDeleteComponentResponse :: DeleteComponentResponse
instance GHC.Generics.Generic Amazonka.GreengrassV2.DeleteComponent.DeleteComponent
instance GHC.Show.Show Amazonka.GreengrassV2.DeleteComponent.DeleteComponent
instance GHC.Read.Read Amazonka.GreengrassV2.DeleteComponent.DeleteComponent
instance GHC.Classes.Eq Amazonka.GreengrassV2.DeleteComponent.DeleteComponent
instance GHC.Generics.Generic Amazonka.GreengrassV2.DeleteComponent.DeleteComponentResponse
instance GHC.Show.Show Amazonka.GreengrassV2.DeleteComponent.DeleteComponentResponse
instance GHC.Read.Read Amazonka.GreengrassV2.DeleteComponent.DeleteComponentResponse
instance GHC.Classes.Eq Amazonka.GreengrassV2.DeleteComponent.DeleteComponentResponse
instance Amazonka.Types.AWSRequest Amazonka.GreengrassV2.DeleteComponent.DeleteComponent
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.DeleteComponent.DeleteComponentResponse
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.DeleteComponent.DeleteComponent
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.DeleteComponent.DeleteComponent
instance Amazonka.Data.Headers.ToHeaders Amazonka.GreengrassV2.DeleteComponent.DeleteComponent
instance Amazonka.Data.Path.ToPath Amazonka.GreengrassV2.DeleteComponent.DeleteComponent
instance Amazonka.Data.Query.ToQuery Amazonka.GreengrassV2.DeleteComponent.DeleteComponent


-- | Creates a continuous deployment for a target, which is a Greengrass
--   core device or group of core devices. When you add a new core device
--   to a group of core devices that has a deployment, IoT Greengrass
--   deploys that group's deployment to the new device.
--   
--   You can define one deployment for each target. When you create a new
--   deployment for a target that has an existing deployment, you replace
--   the previous deployment. IoT Greengrass applies the new deployment to
--   the target devices.
--   
--   Every deployment has a revision number that indicates how many
--   deployment revisions you define for a target. Use this operation to
--   create a new revision of an existing deployment. This operation
--   returns the revision number of the new deployment when you create it.
--   
--   For more information, see the <a>Create deployments</a> in the <i>IoT
--   Greengrass V2 Developer Guide</i>.
module Amazonka.GreengrassV2.CreateDeployment

-- | <i>See:</i> <a>newCreateDeployment</a> smart constructor.
data CreateDeployment
CreateDeployment' :: Maybe (HashMap Text ComponentDeploymentSpecification) -> Maybe Text -> Maybe DeploymentPolicies -> Maybe DeploymentIoTJobConfiguration -> Maybe Text -> Maybe (HashMap Text Text) -> Text -> CreateDeployment

-- | The components to deploy. This is a dictionary, where each key is the
--   name of a component, and each key's value is the version and
--   configuration to deploy for that component.
[$sel:components:CreateDeployment'] :: CreateDeployment -> Maybe (HashMap Text ComponentDeploymentSpecification)

-- | A unique, case-sensitive identifier that you can provide to ensure
--   that the request is idempotent. Idempotency means that the request is
--   successfully processed only once, even if you send the request
--   multiple times. When a request succeeds, and you specify the same
--   client token for subsequent successful requests, the IoT Greengrass V2
--   service returns the successful response that it caches from the
--   previous request. IoT Greengrass V2 caches successful responses for
--   idempotent requests for up to 8 hours.
[$sel:clientToken:CreateDeployment'] :: CreateDeployment -> Maybe Text

-- | The deployment policies for the deployment. These policies define how
--   the deployment updates components and handles failure.
[$sel:deploymentPolicies:CreateDeployment'] :: CreateDeployment -> Maybe DeploymentPolicies

-- | The job configuration for the deployment configuration. The job
--   configuration specifies the rollout, timeout, and stop configurations
--   for the deployment configuration.
[$sel:iotJobConfiguration:CreateDeployment'] :: CreateDeployment -> Maybe DeploymentIoTJobConfiguration

-- | The name of the deployment.
[$sel:deploymentName:CreateDeployment'] :: CreateDeployment -> Maybe Text

-- | A list of key-value pairs that contain metadata for the resource. For
--   more information, see <a>Tag your resources</a> in the <i>IoT
--   Greengrass V2 Developer Guide</i>.
[$sel:tags:CreateDeployment'] :: CreateDeployment -> Maybe (HashMap Text Text)

-- | The <a>ARN</a> of the target IoT thing or thing group.
[$sel:targetArn:CreateDeployment'] :: CreateDeployment -> Text

-- | Create a value of <a>CreateDeployment</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:components:CreateDeployment'</a>,
--   <a>createDeployment_components</a> - The components to deploy. This is
--   a dictionary, where each key is the name of a component, and each
--   key's value is the version and configuration to deploy for that
--   component.
--   
--   <a>$sel:clientToken:CreateDeployment'</a>,
--   <a>createDeployment_clientToken</a> - A unique, case-sensitive
--   identifier that you can provide to ensure that the request is
--   idempotent. Idempotency means that the request is successfully
--   processed only once, even if you send the request multiple times. When
--   a request succeeds, and you specify the same client token for
--   subsequent successful requests, the IoT Greengrass V2 service returns
--   the successful response that it caches from the previous request. IoT
--   Greengrass V2 caches successful responses for idempotent requests for
--   up to 8 hours.
--   
--   <a>$sel:deploymentPolicies:CreateDeployment'</a>,
--   <a>createDeployment_deploymentPolicies</a> - The deployment policies
--   for the deployment. These policies define how the deployment updates
--   components and handles failure.
--   
--   <a>$sel:iotJobConfiguration:CreateDeployment'</a>,
--   <a>createDeployment_iotJobConfiguration</a> - The job configuration
--   for the deployment configuration. The job configuration specifies the
--   rollout, timeout, and stop configurations for the deployment
--   configuration.
--   
--   <a>$sel:deploymentName:CreateDeployment'</a>,
--   <a>createDeployment_deploymentName</a> - The name of the deployment.
--   
--   <a>$sel:tags:CreateDeployment'</a>, <a>createDeployment_tags</a> - A
--   list of key-value pairs that contain metadata for the resource. For
--   more information, see <a>Tag your resources</a> in the <i>IoT
--   Greengrass V2 Developer Guide</i>.
--   
--   <a>$sel:targetArn:CreateDeployment'</a>,
--   <a>createDeployment_targetArn</a> - The <a>ARN</a> of the target IoT
--   thing or thing group.
newCreateDeployment :: Text -> CreateDeployment

-- | The components to deploy. This is a dictionary, where each key is the
--   name of a component, and each key's value is the version and
--   configuration to deploy for that component.
createDeployment_components :: Lens' CreateDeployment (Maybe (HashMap Text ComponentDeploymentSpecification))

-- | A unique, case-sensitive identifier that you can provide to ensure
--   that the request is idempotent. Idempotency means that the request is
--   successfully processed only once, even if you send the request
--   multiple times. When a request succeeds, and you specify the same
--   client token for subsequent successful requests, the IoT Greengrass V2
--   service returns the successful response that it caches from the
--   previous request. IoT Greengrass V2 caches successful responses for
--   idempotent requests for up to 8 hours.
createDeployment_clientToken :: Lens' CreateDeployment (Maybe Text)

-- | The deployment policies for the deployment. These policies define how
--   the deployment updates components and handles failure.
createDeployment_deploymentPolicies :: Lens' CreateDeployment (Maybe DeploymentPolicies)

-- | The job configuration for the deployment configuration. The job
--   configuration specifies the rollout, timeout, and stop configurations
--   for the deployment configuration.
createDeployment_iotJobConfiguration :: Lens' CreateDeployment (Maybe DeploymentIoTJobConfiguration)

-- | The name of the deployment.
createDeployment_deploymentName :: Lens' CreateDeployment (Maybe Text)

-- | A list of key-value pairs that contain metadata for the resource. For
--   more information, see <a>Tag your resources</a> in the <i>IoT
--   Greengrass V2 Developer Guide</i>.
createDeployment_tags :: Lens' CreateDeployment (Maybe (HashMap Text Text))

-- | The <a>ARN</a> of the target IoT thing or thing group.
createDeployment_targetArn :: Lens' CreateDeployment Text

-- | <i>See:</i> <a>newCreateDeploymentResponse</a> smart constructor.
data CreateDeploymentResponse
CreateDeploymentResponse' :: Maybe Text -> Maybe Text -> Maybe Text -> Int -> CreateDeploymentResponse

-- | The ID of the deployment.
[$sel:deploymentId:CreateDeploymentResponse'] :: CreateDeploymentResponse -> Maybe Text

-- | The ID of the IoT job that applies the deployment to target devices.
[$sel:iotJobId:CreateDeploymentResponse'] :: CreateDeploymentResponse -> Maybe Text

-- | The <a>ARN</a> of the IoT job that applies the deployment to target
--   devices.
[$sel:iotJobArn:CreateDeploymentResponse'] :: CreateDeploymentResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:CreateDeploymentResponse'] :: CreateDeploymentResponse -> Int

-- | Create a value of <a>CreateDeploymentResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:deploymentId:CreateDeploymentResponse'</a>,
--   <a>createDeploymentResponse_deploymentId</a> - The ID of the
--   deployment.
--   
--   <a>$sel:iotJobId:CreateDeploymentResponse'</a>,
--   <a>createDeploymentResponse_iotJobId</a> - The ID of the IoT job that
--   applies the deployment to target devices.
--   
--   <a>$sel:iotJobArn:CreateDeploymentResponse'</a>,
--   <a>createDeploymentResponse_iotJobArn</a> - The <a>ARN</a> of the IoT
--   job that applies the deployment to target devices.
--   
--   <a>$sel:httpStatus:CreateDeploymentResponse'</a>,
--   <a>createDeploymentResponse_httpStatus</a> - The response's http
--   status code.
newCreateDeploymentResponse :: Int -> CreateDeploymentResponse

-- | The ID of the deployment.
createDeploymentResponse_deploymentId :: Lens' CreateDeploymentResponse (Maybe Text)

-- | The ID of the IoT job that applies the deployment to target devices.
createDeploymentResponse_iotJobId :: Lens' CreateDeploymentResponse (Maybe Text)

-- | The <a>ARN</a> of the IoT job that applies the deployment to target
--   devices.
createDeploymentResponse_iotJobArn :: Lens' CreateDeploymentResponse (Maybe Text)

-- | The response's http status code.
createDeploymentResponse_httpStatus :: Lens' CreateDeploymentResponse Int
instance GHC.Generics.Generic Amazonka.GreengrassV2.CreateDeployment.CreateDeployment
instance GHC.Show.Show Amazonka.GreengrassV2.CreateDeployment.CreateDeployment
instance GHC.Read.Read Amazonka.GreengrassV2.CreateDeployment.CreateDeployment
instance GHC.Classes.Eq Amazonka.GreengrassV2.CreateDeployment.CreateDeployment
instance GHC.Generics.Generic Amazonka.GreengrassV2.CreateDeployment.CreateDeploymentResponse
instance GHC.Show.Show Amazonka.GreengrassV2.CreateDeployment.CreateDeploymentResponse
instance GHC.Read.Read Amazonka.GreengrassV2.CreateDeployment.CreateDeploymentResponse
instance GHC.Classes.Eq Amazonka.GreengrassV2.CreateDeployment.CreateDeploymentResponse
instance Amazonka.Types.AWSRequest Amazonka.GreengrassV2.CreateDeployment.CreateDeployment
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.CreateDeployment.CreateDeploymentResponse
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.CreateDeployment.CreateDeployment
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.CreateDeployment.CreateDeployment
instance Amazonka.Data.Headers.ToHeaders Amazonka.GreengrassV2.CreateDeployment.CreateDeployment
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.CreateDeployment.CreateDeployment
instance Amazonka.Data.Path.ToPath Amazonka.GreengrassV2.CreateDeployment.CreateDeployment
instance Amazonka.Data.Query.ToQuery Amazonka.GreengrassV2.CreateDeployment.CreateDeployment


-- | Creates a component. Components are software that run on Greengrass
--   core devices. After you develop and test a component on your core
--   device, you can use this operation to upload your component to IoT
--   Greengrass. Then, you can deploy the component to other core devices.
--   
--   You can use this operation to do the following:
--   
--   <ul>
--   <li><b>Create components from recipes</b>Create a component from a
--   recipe, which is a file that defines the component's metadata,
--   parameters, dependencies, lifecycle, artifacts, and platform
--   capability. For more information, see <a>IoT Greengrass component
--   recipe reference</a> in the <i>IoT Greengrass V2 Developer
--   Guide</i>.To create a component from a recipe, specify
--   <tt>inlineRecipe</tt> when you call this operation.</li>
--   <li><b>Create components from Lambda functions</b>Create a component
--   from an Lambda function that runs on IoT Greengrass. This creates a
--   recipe and artifacts from the Lambda function's deployment package.
--   You can use this operation to migrate Lambda functions from IoT
--   Greengrass V1 to IoT Greengrass V2.This function only accepts Lambda
--   functions that use the following runtimes:<ul><li>Python 2.7 –
--   <tt>python2.7</tt></li><li>Python 3.7 –
--   <tt>python3.7</tt></li><li>Python 3.8 –
--   <tt>python3.8</tt></li><li>Java 8 – <tt>java8</tt></li><li>Node.js 10
--   – <tt>nodejs10.x</tt></li><li>Node.js 12 –
--   <tt>nodejs12.x</tt></li></ul>To create a component from a Lambda
--   function, specify <tt>lambdaFunction</tt> when you call this
--   operation.</li>
--   </ul>
module Amazonka.GreengrassV2.CreateComponentVersion

-- | <i>See:</i> <a>newCreateComponentVersion</a> smart constructor.
data CreateComponentVersion
CreateComponentVersion' :: Maybe Text -> Maybe Base64 -> Maybe LambdaFunctionRecipeSource -> Maybe (HashMap Text Text) -> CreateComponentVersion

-- | A unique, case-sensitive identifier that you can provide to ensure
--   that the request is idempotent. Idempotency means that the request is
--   successfully processed only once, even if you send the request
--   multiple times. When a request succeeds, and you specify the same
--   client token for subsequent successful requests, the IoT Greengrass V2
--   service returns the successful response that it caches from the
--   previous request. IoT Greengrass V2 caches successful responses for
--   idempotent requests for up to 8 hours.
[$sel:clientToken:CreateComponentVersion'] :: CreateComponentVersion -> Maybe Text

-- | The recipe to use to create the component. The recipe defines the
--   component's metadata, parameters, dependencies, lifecycle, artifacts,
--   and platform compatibility.
--   
--   You must specify either <tt>inlineRecipe</tt> or
--   <tt>lambdaFunction</tt>.
[$sel:inlineRecipe:CreateComponentVersion'] :: CreateComponentVersion -> Maybe Base64

-- | The parameters to create a component from a Lambda function.
--   
--   You must specify either <tt>inlineRecipe</tt> or
--   <tt>lambdaFunction</tt>.
[$sel:lambdaFunction:CreateComponentVersion'] :: CreateComponentVersion -> Maybe LambdaFunctionRecipeSource

-- | A list of key-value pairs that contain metadata for the resource. For
--   more information, see <a>Tag your resources</a> in the <i>IoT
--   Greengrass V2 Developer Guide</i>.
[$sel:tags:CreateComponentVersion'] :: CreateComponentVersion -> Maybe (HashMap Text Text)

-- | Create a value of <a>CreateComponentVersion</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:clientToken:CreateComponentVersion'</a>,
--   <a>createComponentVersion_clientToken</a> - A unique, case-sensitive
--   identifier that you can provide to ensure that the request is
--   idempotent. Idempotency means that the request is successfully
--   processed only once, even if you send the request multiple times. When
--   a request succeeds, and you specify the same client token for
--   subsequent successful requests, the IoT Greengrass V2 service returns
--   the successful response that it caches from the previous request. IoT
--   Greengrass V2 caches successful responses for idempotent requests for
--   up to 8 hours.
--   
--   <a>$sel:inlineRecipe:CreateComponentVersion'</a>,
--   <a>createComponentVersion_inlineRecipe</a> - The recipe to use to
--   create the component. The recipe defines the component's metadata,
--   parameters, dependencies, lifecycle, artifacts, and platform
--   compatibility.
--   
--   You must specify either <tt>inlineRecipe</tt> or
--   <tt>lambdaFunction</tt>.-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
--   
--   <a>$sel:lambdaFunction:CreateComponentVersion'</a>,
--   <a>createComponentVersion_lambdaFunction</a> - The parameters to
--   create a component from a Lambda function.
--   
--   You must specify either <tt>inlineRecipe</tt> or
--   <tt>lambdaFunction</tt>.
--   
--   <a>$sel:tags:CreateComponentVersion'</a>,
--   <a>createComponentVersion_tags</a> - A list of key-value pairs that
--   contain metadata for the resource. For more information, see <a>Tag
--   your resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>.
newCreateComponentVersion :: CreateComponentVersion

-- | A unique, case-sensitive identifier that you can provide to ensure
--   that the request is idempotent. Idempotency means that the request is
--   successfully processed only once, even if you send the request
--   multiple times. When a request succeeds, and you specify the same
--   client token for subsequent successful requests, the IoT Greengrass V2
--   service returns the successful response that it caches from the
--   previous request. IoT Greengrass V2 caches successful responses for
--   idempotent requests for up to 8 hours.
createComponentVersion_clientToken :: Lens' CreateComponentVersion (Maybe Text)

-- | The recipe to use to create the component. The recipe defines the
--   component's metadata, parameters, dependencies, lifecycle, artifacts,
--   and platform compatibility.
--   
--   You must specify either <tt>inlineRecipe</tt> or
--   <tt>lambdaFunction</tt>.-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
createComponentVersion_inlineRecipe :: Lens' CreateComponentVersion (Maybe ByteString)

-- | The parameters to create a component from a Lambda function.
--   
--   You must specify either <tt>inlineRecipe</tt> or
--   <tt>lambdaFunction</tt>.
createComponentVersion_lambdaFunction :: Lens' CreateComponentVersion (Maybe LambdaFunctionRecipeSource)

-- | A list of key-value pairs that contain metadata for the resource. For
--   more information, see <a>Tag your resources</a> in the <i>IoT
--   Greengrass V2 Developer Guide</i>.
createComponentVersion_tags :: Lens' CreateComponentVersion (Maybe (HashMap Text Text))

-- | <i>See:</i> <a>newCreateComponentVersionResponse</a> smart
--   constructor.
data CreateComponentVersionResponse
CreateComponentVersionResponse' :: Maybe Text -> Int -> Text -> Text -> POSIX -> CloudComponentStatus -> CreateComponentVersionResponse

-- | The <a>ARN</a> of the component version.
[$sel:arn:CreateComponentVersionResponse'] :: CreateComponentVersionResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:CreateComponentVersionResponse'] :: CreateComponentVersionResponse -> Int

-- | The name of the component.
[$sel:componentName:CreateComponentVersionResponse'] :: CreateComponentVersionResponse -> Text

-- | The version of the component.
[$sel:componentVersion:CreateComponentVersionResponse'] :: CreateComponentVersionResponse -> Text

-- | The time at which the component was created, expressed in ISO 8601
--   format.
[$sel:creationTimestamp:CreateComponentVersionResponse'] :: CreateComponentVersionResponse -> POSIX

-- | The status of the component version in IoT Greengrass V2. This status
--   is different from the status of the component on a core device.
[$sel:status:CreateComponentVersionResponse'] :: CreateComponentVersionResponse -> CloudComponentStatus

-- | Create a value of <a>CreateComponentVersionResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:arn:CreateComponentVersionResponse'</a>,
--   <a>createComponentVersionResponse_arn</a> - The <a>ARN</a> of the
--   component version.
--   
--   <a>$sel:httpStatus:CreateComponentVersionResponse'</a>,
--   <a>createComponentVersionResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:componentName:CreateComponentVersionResponse'</a>,
--   <a>createComponentVersionResponse_componentName</a> - The name of the
--   component.
--   
--   <a>$sel:componentVersion:CreateComponentVersionResponse'</a>,
--   <a>createComponentVersionResponse_componentVersion</a> - The version
--   of the component.
--   
--   <a>$sel:creationTimestamp:CreateComponentVersionResponse'</a>,
--   <a>createComponentVersionResponse_creationTimestamp</a> - The time at
--   which the component was created, expressed in ISO 8601 format.
--   
--   <a>$sel:status:CreateComponentVersionResponse'</a>,
--   <a>createComponentVersionResponse_status</a> - The status of the
--   component version in IoT Greengrass V2. This status is different from
--   the status of the component on a core device.
newCreateComponentVersionResponse :: Int -> Text -> Text -> UTCTime -> CloudComponentStatus -> CreateComponentVersionResponse

-- | The <a>ARN</a> of the component version.
createComponentVersionResponse_arn :: Lens' CreateComponentVersionResponse (Maybe Text)

-- | The response's http status code.
createComponentVersionResponse_httpStatus :: Lens' CreateComponentVersionResponse Int

-- | The name of the component.
createComponentVersionResponse_componentName :: Lens' CreateComponentVersionResponse Text

-- | The version of the component.
createComponentVersionResponse_componentVersion :: Lens' CreateComponentVersionResponse Text

-- | The time at which the component was created, expressed in ISO 8601
--   format.
createComponentVersionResponse_creationTimestamp :: Lens' CreateComponentVersionResponse UTCTime

-- | The status of the component version in IoT Greengrass V2. This status
--   is different from the status of the component on a core device.
createComponentVersionResponse_status :: Lens' CreateComponentVersionResponse CloudComponentStatus
instance GHC.Generics.Generic Amazonka.GreengrassV2.CreateComponentVersion.CreateComponentVersion
instance GHC.Show.Show Amazonka.GreengrassV2.CreateComponentVersion.CreateComponentVersion
instance GHC.Read.Read Amazonka.GreengrassV2.CreateComponentVersion.CreateComponentVersion
instance GHC.Classes.Eq Amazonka.GreengrassV2.CreateComponentVersion.CreateComponentVersion
instance GHC.Generics.Generic Amazonka.GreengrassV2.CreateComponentVersion.CreateComponentVersionResponse
instance GHC.Show.Show Amazonka.GreengrassV2.CreateComponentVersion.CreateComponentVersionResponse
instance GHC.Read.Read Amazonka.GreengrassV2.CreateComponentVersion.CreateComponentVersionResponse
instance GHC.Classes.Eq Amazonka.GreengrassV2.CreateComponentVersion.CreateComponentVersionResponse
instance Amazonka.Types.AWSRequest Amazonka.GreengrassV2.CreateComponentVersion.CreateComponentVersion
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.CreateComponentVersion.CreateComponentVersionResponse
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.CreateComponentVersion.CreateComponentVersion
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.CreateComponentVersion.CreateComponentVersion
instance Amazonka.Data.Headers.ToHeaders Amazonka.GreengrassV2.CreateComponentVersion.CreateComponentVersion
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.CreateComponentVersion.CreateComponentVersion
instance Amazonka.Data.Path.ToPath Amazonka.GreengrassV2.CreateComponentVersion.CreateComponentVersion
instance Amazonka.Data.Query.ToQuery Amazonka.GreengrassV2.CreateComponentVersion.CreateComponentVersion


-- | Cancels a deployment. This operation cancels the deployment for
--   devices that haven't yet received it. If a device already received the
--   deployment, this operation doesn't change anything for that device.
module Amazonka.GreengrassV2.CancelDeployment

-- | <i>See:</i> <a>newCancelDeployment</a> smart constructor.
data CancelDeployment
CancelDeployment' :: Text -> CancelDeployment

-- | The ID of the deployment.
[$sel:deploymentId:CancelDeployment'] :: CancelDeployment -> Text

-- | Create a value of <a>CancelDeployment</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:deploymentId:CancelDeployment'</a>,
--   <a>cancelDeployment_deploymentId</a> - The ID of the deployment.
newCancelDeployment :: Text -> CancelDeployment

-- | The ID of the deployment.
cancelDeployment_deploymentId :: Lens' CancelDeployment Text

-- | <i>See:</i> <a>newCancelDeploymentResponse</a> smart constructor.
data CancelDeploymentResponse
CancelDeploymentResponse' :: Maybe Text -> Int -> CancelDeploymentResponse

-- | A message that communicates if the cancel was successful.
[$sel:message:CancelDeploymentResponse'] :: CancelDeploymentResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:CancelDeploymentResponse'] :: CancelDeploymentResponse -> Int

-- | Create a value of <a>CancelDeploymentResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:message:CancelDeploymentResponse'</a>,
--   <a>cancelDeploymentResponse_message</a> - A message that communicates
--   if the cancel was successful.
--   
--   <a>$sel:httpStatus:CancelDeploymentResponse'</a>,
--   <a>cancelDeploymentResponse_httpStatus</a> - The response's http
--   status code.
newCancelDeploymentResponse :: Int -> CancelDeploymentResponse

-- | A message that communicates if the cancel was successful.
cancelDeploymentResponse_message :: Lens' CancelDeploymentResponse (Maybe Text)

-- | The response's http status code.
cancelDeploymentResponse_httpStatus :: Lens' CancelDeploymentResponse Int
instance GHC.Generics.Generic Amazonka.GreengrassV2.CancelDeployment.CancelDeployment
instance GHC.Show.Show Amazonka.GreengrassV2.CancelDeployment.CancelDeployment
instance GHC.Read.Read Amazonka.GreengrassV2.CancelDeployment.CancelDeployment
instance GHC.Classes.Eq Amazonka.GreengrassV2.CancelDeployment.CancelDeployment
instance GHC.Generics.Generic Amazonka.GreengrassV2.CancelDeployment.CancelDeploymentResponse
instance GHC.Show.Show Amazonka.GreengrassV2.CancelDeployment.CancelDeploymentResponse
instance GHC.Read.Read Amazonka.GreengrassV2.CancelDeployment.CancelDeploymentResponse
instance GHC.Classes.Eq Amazonka.GreengrassV2.CancelDeployment.CancelDeploymentResponse
instance Amazonka.Types.AWSRequest Amazonka.GreengrassV2.CancelDeployment.CancelDeployment
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.CancelDeployment.CancelDeploymentResponse
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.CancelDeployment.CancelDeployment
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.CancelDeployment.CancelDeployment
instance Amazonka.Data.Headers.ToHeaders Amazonka.GreengrassV2.CancelDeployment.CancelDeployment
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.CancelDeployment.CancelDeployment
instance Amazonka.Data.Path.ToPath Amazonka.GreengrassV2.CancelDeployment.CancelDeployment
instance Amazonka.Data.Query.ToQuery Amazonka.GreengrassV2.CancelDeployment.CancelDeployment


-- | Disassociate a list of client devices from a core device. After you
--   disassociate a client device from a core device, the client device
--   won't be able to use cloud discovery to retrieve the core device's
--   connectivity information and certificates.
module Amazonka.GreengrassV2.BatchDisassociateClientDeviceFromCoreDevice

-- | <i>See:</i> <a>newBatchDisassociateClientDeviceFromCoreDevice</a>
--   smart constructor.
data BatchDisassociateClientDeviceFromCoreDevice
BatchDisassociateClientDeviceFromCoreDevice' :: Maybe (NonEmpty DisassociateClientDeviceFromCoreDeviceEntry) -> Text -> BatchDisassociateClientDeviceFromCoreDevice

-- | The list of client devices to disassociate.
[$sel:entries:BatchDisassociateClientDeviceFromCoreDevice'] :: BatchDisassociateClientDeviceFromCoreDevice -> Maybe (NonEmpty DisassociateClientDeviceFromCoreDeviceEntry)

-- | The name of the core device. This is also the name of the IoT thing.
[$sel:coreDeviceThingName:BatchDisassociateClientDeviceFromCoreDevice'] :: BatchDisassociateClientDeviceFromCoreDevice -> Text

-- | Create a value of <a>BatchDisassociateClientDeviceFromCoreDevice</a>
--   with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:entries:BatchDisassociateClientDeviceFromCoreDevice'</a>,
--   <a>batchDisassociateClientDeviceFromCoreDevice_entries</a> - The list
--   of client devices to disassociate.
--   
--   
--   <a>$sel:coreDeviceThingName:BatchDisassociateClientDeviceFromCoreDevice'</a>,
--   <a>batchDisassociateClientDeviceFromCoreDevice_coreDeviceThingName</a>
--   - The name of the core device. This is also the name of the IoT thing.
newBatchDisassociateClientDeviceFromCoreDevice :: Text -> BatchDisassociateClientDeviceFromCoreDevice

-- | The list of client devices to disassociate.
batchDisassociateClientDeviceFromCoreDevice_entries :: Lens' BatchDisassociateClientDeviceFromCoreDevice (Maybe (NonEmpty DisassociateClientDeviceFromCoreDeviceEntry))

-- | The name of the core device. This is also the name of the IoT thing.
batchDisassociateClientDeviceFromCoreDevice_coreDeviceThingName :: Lens' BatchDisassociateClientDeviceFromCoreDevice Text

-- | <i>See:</i>
--   <a>newBatchDisassociateClientDeviceFromCoreDeviceResponse</a> smart
--   constructor.
data BatchDisassociateClientDeviceFromCoreDeviceResponse
BatchDisassociateClientDeviceFromCoreDeviceResponse' :: Maybe (NonEmpty DisassociateClientDeviceFromCoreDeviceErrorEntry) -> Int -> BatchDisassociateClientDeviceFromCoreDeviceResponse

-- | The list of errors (if any) for the entries in the request. Each error
--   entry contains the name of the IoT thing that failed to disassociate.
[$sel:errorEntries:BatchDisassociateClientDeviceFromCoreDeviceResponse'] :: BatchDisassociateClientDeviceFromCoreDeviceResponse -> Maybe (NonEmpty DisassociateClientDeviceFromCoreDeviceErrorEntry)

-- | The response's http status code.
[$sel:httpStatus:BatchDisassociateClientDeviceFromCoreDeviceResponse'] :: BatchDisassociateClientDeviceFromCoreDeviceResponse -> Int

-- | Create a value of
--   <a>BatchDisassociateClientDeviceFromCoreDeviceResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:errorEntries:BatchDisassociateClientDeviceFromCoreDeviceResponse'</a>,
--   <a>batchDisassociateClientDeviceFromCoreDeviceResponse_errorEntries</a>
--   - The list of errors (if any) for the entries in the request. Each
--   error entry contains the name of the IoT thing that failed to
--   disassociate.
--   
--   
--   <a>$sel:httpStatus:BatchDisassociateClientDeviceFromCoreDeviceResponse'</a>,
--   <a>batchDisassociateClientDeviceFromCoreDeviceResponse_httpStatus</a>
--   - The response's http status code.
newBatchDisassociateClientDeviceFromCoreDeviceResponse :: Int -> BatchDisassociateClientDeviceFromCoreDeviceResponse

-- | The list of errors (if any) for the entries in the request. Each error
--   entry contains the name of the IoT thing that failed to disassociate.
batchDisassociateClientDeviceFromCoreDeviceResponse_errorEntries :: Lens' BatchDisassociateClientDeviceFromCoreDeviceResponse (Maybe (NonEmpty DisassociateClientDeviceFromCoreDeviceErrorEntry))

-- | The response's http status code.
batchDisassociateClientDeviceFromCoreDeviceResponse_httpStatus :: Lens' BatchDisassociateClientDeviceFromCoreDeviceResponse Int
instance GHC.Generics.Generic Amazonka.GreengrassV2.BatchDisassociateClientDeviceFromCoreDevice.BatchDisassociateClientDeviceFromCoreDevice
instance GHC.Show.Show Amazonka.GreengrassV2.BatchDisassociateClientDeviceFromCoreDevice.BatchDisassociateClientDeviceFromCoreDevice
instance GHC.Read.Read Amazonka.GreengrassV2.BatchDisassociateClientDeviceFromCoreDevice.BatchDisassociateClientDeviceFromCoreDevice
instance GHC.Classes.Eq Amazonka.GreengrassV2.BatchDisassociateClientDeviceFromCoreDevice.BatchDisassociateClientDeviceFromCoreDevice
instance GHC.Generics.Generic Amazonka.GreengrassV2.BatchDisassociateClientDeviceFromCoreDevice.BatchDisassociateClientDeviceFromCoreDeviceResponse
instance GHC.Show.Show Amazonka.GreengrassV2.BatchDisassociateClientDeviceFromCoreDevice.BatchDisassociateClientDeviceFromCoreDeviceResponse
instance GHC.Read.Read Amazonka.GreengrassV2.BatchDisassociateClientDeviceFromCoreDevice.BatchDisassociateClientDeviceFromCoreDeviceResponse
instance GHC.Classes.Eq Amazonka.GreengrassV2.BatchDisassociateClientDeviceFromCoreDevice.BatchDisassociateClientDeviceFromCoreDeviceResponse
instance Amazonka.Types.AWSRequest Amazonka.GreengrassV2.BatchDisassociateClientDeviceFromCoreDevice.BatchDisassociateClientDeviceFromCoreDevice
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.BatchDisassociateClientDeviceFromCoreDevice.BatchDisassociateClientDeviceFromCoreDeviceResponse
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.BatchDisassociateClientDeviceFromCoreDevice.BatchDisassociateClientDeviceFromCoreDevice
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.BatchDisassociateClientDeviceFromCoreDevice.BatchDisassociateClientDeviceFromCoreDevice
instance Amazonka.Data.Headers.ToHeaders Amazonka.GreengrassV2.BatchDisassociateClientDeviceFromCoreDevice.BatchDisassociateClientDeviceFromCoreDevice
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.BatchDisassociateClientDeviceFromCoreDevice.BatchDisassociateClientDeviceFromCoreDevice
instance Amazonka.Data.Path.ToPath Amazonka.GreengrassV2.BatchDisassociateClientDeviceFromCoreDevice.BatchDisassociateClientDeviceFromCoreDevice
instance Amazonka.Data.Query.ToQuery Amazonka.GreengrassV2.BatchDisassociateClientDeviceFromCoreDevice.BatchDisassociateClientDeviceFromCoreDevice


-- | Associate a list of client devices with a core device. Use this API
--   operation to specify which client devices can discover a core device
--   through cloud discovery. With cloud discovery, client devices connect
--   to IoT Greengrass to retrieve associated core devices' connectivity
--   information and certificates. For more information, see <a>Configure
--   cloud discovery</a> in the <i>IoT Greengrass V2 Developer Guide</i>.
--   
--   Client devices are local IoT devices that connect to and communicate
--   with an IoT Greengrass core device over MQTT. You can connect client
--   devices to a core device to sync MQTT messages and data to Amazon Web
--   Services IoT Core and interact with client devices in Greengrass
--   components. For more information, see <a>Interact with local IoT
--   devices</a> in the <i>IoT Greengrass V2 Developer Guide</i>.
module Amazonka.GreengrassV2.BatchAssociateClientDeviceWithCoreDevice

-- | <i>See:</i> <a>newBatchAssociateClientDeviceWithCoreDevice</a> smart
--   constructor.
data BatchAssociateClientDeviceWithCoreDevice
BatchAssociateClientDeviceWithCoreDevice' :: Maybe (NonEmpty AssociateClientDeviceWithCoreDeviceEntry) -> Text -> BatchAssociateClientDeviceWithCoreDevice

-- | The list of client devices to associate.
[$sel:entries:BatchAssociateClientDeviceWithCoreDevice'] :: BatchAssociateClientDeviceWithCoreDevice -> Maybe (NonEmpty AssociateClientDeviceWithCoreDeviceEntry)

-- | The name of the core device. This is also the name of the IoT thing.
[$sel:coreDeviceThingName:BatchAssociateClientDeviceWithCoreDevice'] :: BatchAssociateClientDeviceWithCoreDevice -> Text

-- | Create a value of <a>BatchAssociateClientDeviceWithCoreDevice</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:entries:BatchAssociateClientDeviceWithCoreDevice'</a>,
--   <a>batchAssociateClientDeviceWithCoreDevice_entries</a> - The list of
--   client devices to associate.
--   
--   
--   <a>$sel:coreDeviceThingName:BatchAssociateClientDeviceWithCoreDevice'</a>,
--   <a>batchAssociateClientDeviceWithCoreDevice_coreDeviceThingName</a> -
--   The name of the core device. This is also the name of the IoT thing.
newBatchAssociateClientDeviceWithCoreDevice :: Text -> BatchAssociateClientDeviceWithCoreDevice

-- | The list of client devices to associate.
batchAssociateClientDeviceWithCoreDevice_entries :: Lens' BatchAssociateClientDeviceWithCoreDevice (Maybe (NonEmpty AssociateClientDeviceWithCoreDeviceEntry))

-- | The name of the core device. This is also the name of the IoT thing.
batchAssociateClientDeviceWithCoreDevice_coreDeviceThingName :: Lens' BatchAssociateClientDeviceWithCoreDevice Text

-- | <i>See:</i> <a>newBatchAssociateClientDeviceWithCoreDeviceResponse</a>
--   smart constructor.
data BatchAssociateClientDeviceWithCoreDeviceResponse
BatchAssociateClientDeviceWithCoreDeviceResponse' :: Maybe (NonEmpty AssociateClientDeviceWithCoreDeviceErrorEntry) -> Int -> BatchAssociateClientDeviceWithCoreDeviceResponse

-- | The list of any errors for the entries in the request. Each error
--   entry contains the name of the IoT thing that failed to associate.
[$sel:errorEntries:BatchAssociateClientDeviceWithCoreDeviceResponse'] :: BatchAssociateClientDeviceWithCoreDeviceResponse -> Maybe (NonEmpty AssociateClientDeviceWithCoreDeviceErrorEntry)

-- | The response's http status code.
[$sel:httpStatus:BatchAssociateClientDeviceWithCoreDeviceResponse'] :: BatchAssociateClientDeviceWithCoreDeviceResponse -> Int

-- | Create a value of
--   <a>BatchAssociateClientDeviceWithCoreDeviceResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:errorEntries:BatchAssociateClientDeviceWithCoreDeviceResponse'</a>,
--   <a>batchAssociateClientDeviceWithCoreDeviceResponse_errorEntries</a> -
--   The list of any errors for the entries in the request. Each error
--   entry contains the name of the IoT thing that failed to associate.
--   
--   
--   <a>$sel:httpStatus:BatchAssociateClientDeviceWithCoreDeviceResponse'</a>,
--   <a>batchAssociateClientDeviceWithCoreDeviceResponse_httpStatus</a> -
--   The response's http status code.
newBatchAssociateClientDeviceWithCoreDeviceResponse :: Int -> BatchAssociateClientDeviceWithCoreDeviceResponse

-- | The list of any errors for the entries in the request. Each error
--   entry contains the name of the IoT thing that failed to associate.
batchAssociateClientDeviceWithCoreDeviceResponse_errorEntries :: Lens' BatchAssociateClientDeviceWithCoreDeviceResponse (Maybe (NonEmpty AssociateClientDeviceWithCoreDeviceErrorEntry))

-- | The response's http status code.
batchAssociateClientDeviceWithCoreDeviceResponse_httpStatus :: Lens' BatchAssociateClientDeviceWithCoreDeviceResponse Int
instance GHC.Generics.Generic Amazonka.GreengrassV2.BatchAssociateClientDeviceWithCoreDevice.BatchAssociateClientDeviceWithCoreDevice
instance GHC.Show.Show Amazonka.GreengrassV2.BatchAssociateClientDeviceWithCoreDevice.BatchAssociateClientDeviceWithCoreDevice
instance GHC.Read.Read Amazonka.GreengrassV2.BatchAssociateClientDeviceWithCoreDevice.BatchAssociateClientDeviceWithCoreDevice
instance GHC.Classes.Eq Amazonka.GreengrassV2.BatchAssociateClientDeviceWithCoreDevice.BatchAssociateClientDeviceWithCoreDevice
instance GHC.Generics.Generic Amazonka.GreengrassV2.BatchAssociateClientDeviceWithCoreDevice.BatchAssociateClientDeviceWithCoreDeviceResponse
instance GHC.Show.Show Amazonka.GreengrassV2.BatchAssociateClientDeviceWithCoreDevice.BatchAssociateClientDeviceWithCoreDeviceResponse
instance GHC.Read.Read Amazonka.GreengrassV2.BatchAssociateClientDeviceWithCoreDevice.BatchAssociateClientDeviceWithCoreDeviceResponse
instance GHC.Classes.Eq Amazonka.GreengrassV2.BatchAssociateClientDeviceWithCoreDevice.BatchAssociateClientDeviceWithCoreDeviceResponse
instance Amazonka.Types.AWSRequest Amazonka.GreengrassV2.BatchAssociateClientDeviceWithCoreDevice.BatchAssociateClientDeviceWithCoreDevice
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.BatchAssociateClientDeviceWithCoreDevice.BatchAssociateClientDeviceWithCoreDeviceResponse
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.BatchAssociateClientDeviceWithCoreDevice.BatchAssociateClientDeviceWithCoreDevice
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.BatchAssociateClientDeviceWithCoreDevice.BatchAssociateClientDeviceWithCoreDevice
instance Amazonka.Data.Headers.ToHeaders Amazonka.GreengrassV2.BatchAssociateClientDeviceWithCoreDevice.BatchAssociateClientDeviceWithCoreDevice
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.GreengrassV2.BatchAssociateClientDeviceWithCoreDevice.BatchAssociateClientDeviceWithCoreDevice
instance Amazonka.Data.Path.ToPath Amazonka.GreengrassV2.BatchAssociateClientDeviceWithCoreDevice.BatchAssociateClientDeviceWithCoreDevice
instance Amazonka.Data.Query.ToQuery Amazonka.GreengrassV2.BatchAssociateClientDeviceWithCoreDevice.BatchAssociateClientDeviceWithCoreDevice


-- | Removes a tag from an IoT Greengrass resource.
module Amazonka.GreengrassV2.UntagResource

-- | <i>See:</i> <a>newUntagResource</a> smart constructor.
data UntagResource
UntagResource' :: Text -> NonEmpty Text -> UntagResource

-- | The <a>ARN</a> of the resource to untag.
[$sel:resourceArn:UntagResource'] :: UntagResource -> Text

-- | A list of keys for tags to remove from the resource.
[$sel:tagKeys:UntagResource'] :: UntagResource -> NonEmpty Text

-- | Create a value of <a>UntagResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:UntagResource'</a>,
--   <a>untagResource_resourceArn</a> - The <a>ARN</a> of the resource to
--   untag.
--   
--   <a>$sel:tagKeys:UntagResource'</a>, <a>untagResource_tagKeys</a> - A
--   list of keys for tags to remove from the resource.
newUntagResource :: Text -> NonEmpty Text -> UntagResource

-- | The <a>ARN</a> of the resource to untag.
untagResource_resourceArn :: Lens' UntagResource Text

-- | A list of keys for tags to remove from the resource.
untagResource_tagKeys :: Lens' UntagResource (NonEmpty Text)

-- | <i>See:</i> <a>newUntagResourceResponse</a> smart constructor.
data UntagResourceResponse
UntagResourceResponse' :: Int -> UntagResourceResponse

-- | The response's http status code.
[$sel:httpStatus:UntagResourceResponse'] :: UntagResourceResponse -> Int

-- | Create a value of <a>UntagResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UntagResourceResponse'</a>,
--   <a>untagResourceResponse_httpStatus</a> - The response's http status
--   code.
newUntagResourceResponse :: Int -> UntagResourceResponse

-- | The response's http status code.
untagResourceResponse_httpStatus :: Lens' UntagResourceResponse Int
instance GHC.Generics.Generic Amazonka.GreengrassV2.UntagResource.UntagResource
instance GHC.Show.Show Amazonka.GreengrassV2.UntagResource.UntagResource
instance GHC.Read.Read Amazonka.GreengrassV2.UntagResource.UntagResource
instance GHC.Classes.Eq Amazonka.GreengrassV2.UntagResource.UntagResource
instance GHC.Generics.Generic Amazonka.GreengrassV2.UntagResource.UntagResourceResponse
instance GHC.Show.Show Amazonka.GreengrassV2.UntagResource.UntagResourceResponse
instance GHC.Read.Read Amazonka.GreengrassV2.UntagResource.UntagResourceResponse
instance GHC.Classes.Eq Amazonka.GreengrassV2.UntagResource.UntagResourceResponse
instance Amazonka.Types.AWSRequest Amazonka.GreengrassV2.UntagResource.UntagResource
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.UntagResource.UntagResourceResponse
instance Data.Hashable.Class.Hashable Amazonka.GreengrassV2.UntagResource.UntagResource
instance Control.DeepSeq.NFData Amazonka.GreengrassV2.UntagResource.UntagResource
instance Amazonka.Data.Headers.ToHeaders Amazonka.GreengrassV2.UntagResource.UntagResource
instance Amazonka.Data.Path.ToPath Amazonka.GreengrassV2.UntagResource.UntagResource
instance Amazonka.Data.Query.ToQuery Amazonka.GreengrassV2.UntagResource.UntagResource


module Amazonka.GreengrassV2.Lens

-- | The token to be used for the next set of paginated results.
listComponentVersions_nextToken :: Lens' ListComponentVersions (Maybe Text)

-- | The maximum number of results to be returned per paginated request.
listComponentVersions_maxResults :: Lens' ListComponentVersions (Maybe Natural)

-- | The <a>ARN</a> of the component version.
listComponentVersions_arn :: Lens' ListComponentVersions Text

-- | The token for the next set of results, or null if there are no
--   additional results.
listComponentVersionsResponse_nextToken :: Lens' ListComponentVersionsResponse (Maybe Text)

-- | A list of versions that exist for the component.
listComponentVersionsResponse_componentVersions :: Lens' ListComponentVersionsResponse (Maybe [ComponentVersionListItem])

-- | The response's http status code.
listComponentVersionsResponse_httpStatus :: Lens' ListComponentVersionsResponse Int

-- | The ID of the deployment.
getDeployment_deploymentId :: Lens' GetDeployment Text

-- | The <a>ARN</a> of the target IoT thing or thing group.
getDeploymentResponse_targetArn :: Lens' GetDeploymentResponse (Maybe Text)

-- | The components to deploy. This is a dictionary, where each key is the
--   name of a component, and each key's value is the version and
--   configuration to deploy for that component.
getDeploymentResponse_components :: Lens' GetDeploymentResponse (Maybe (HashMap Text ComponentDeploymentSpecification))

-- | The ID of the deployment.
getDeploymentResponse_deploymentId :: Lens' GetDeploymentResponse (Maybe Text)

-- | The ID of the IoT job that applies the deployment to target devices.
getDeploymentResponse_iotJobId :: Lens' GetDeploymentResponse (Maybe Text)

-- | The <a>ARN</a> of the IoT job that applies the deployment to target
--   devices.
getDeploymentResponse_iotJobArn :: Lens' GetDeploymentResponse (Maybe Text)

-- | The deployment policies for the deployment. These policies define how
--   the deployment updates components and handles failure.
getDeploymentResponse_deploymentPolicies :: Lens' GetDeploymentResponse (Maybe DeploymentPolicies)

-- | The time at which the deployment was created, expressed in ISO 8601
--   format.
getDeploymentResponse_creationTimestamp :: Lens' GetDeploymentResponse (Maybe UTCTime)

-- | The job configuration for the deployment configuration. The job
--   configuration specifies the rollout, timeout, and stop configurations
--   for the deployment configuration.
getDeploymentResponse_iotJobConfiguration :: Lens' GetDeploymentResponse (Maybe DeploymentIoTJobConfiguration)

-- | The status of the deployment.
getDeploymentResponse_deploymentStatus :: Lens' GetDeploymentResponse (Maybe DeploymentStatus)

-- | Whether or not the deployment is the latest revision for its target.
getDeploymentResponse_isLatestForTarget :: Lens' GetDeploymentResponse (Maybe Bool)

-- | The revision number of the deployment.
getDeploymentResponse_revisionId :: Lens' GetDeploymentResponse (Maybe Text)

-- | The name of the deployment.
getDeploymentResponse_deploymentName :: Lens' GetDeploymentResponse (Maybe Text)

-- | A list of key-value pairs that contain metadata for the resource. For
--   more information, see <a>Tag your resources</a> in the <i>IoT
--   Greengrass V2 Developer Guide</i>.
getDeploymentResponse_tags :: Lens' GetDeploymentResponse (Maybe (HashMap Text Text))

-- | The response's http status code.
getDeploymentResponse_httpStatus :: Lens' GetDeploymentResponse Int

-- | The <a>ARN</a> of the component version.
describeComponent_arn :: Lens' DescribeComponent Text

-- | The platforms that the component version supports.
describeComponentResponse_platforms :: Lens' DescribeComponentResponse (Maybe [ComponentPlatform])

-- | The status of the component version in IoT Greengrass V2. This status
--   is different from the status of the component on a core device.
describeComponentResponse_status :: Lens' DescribeComponentResponse (Maybe CloudComponentStatus)

-- | The <a>ARN</a> of the component version.
describeComponentResponse_arn :: Lens' DescribeComponentResponse (Maybe Text)

-- | The version of the component.
describeComponentResponse_componentVersion :: Lens' DescribeComponentResponse (Maybe Text)

-- | The time at which the component was created, expressed in ISO 8601
--   format.
describeComponentResponse_creationTimestamp :: Lens' DescribeComponentResponse (Maybe UTCTime)

-- | The name of the component.
describeComponentResponse_componentName :: Lens' DescribeComponentResponse (Maybe Text)

-- | The publisher of the component version.
describeComponentResponse_publisher :: Lens' DescribeComponentResponse (Maybe Text)

-- | The description of the component version.
describeComponentResponse_description :: Lens' DescribeComponentResponse (Maybe Text)

-- | A list of key-value pairs that contain metadata for the resource. For
--   more information, see <a>Tag your resources</a> in the <i>IoT
--   Greengrass V2 Developer Guide</i>.
describeComponentResponse_tags :: Lens' DescribeComponentResponse (Maybe (HashMap Text Text))

-- | The response's http status code.
describeComponentResponse_httpStatus :: Lens' DescribeComponentResponse Int

-- | The name of the core device. This is also the name of the IoT thing.
deleteCoreDevice_coreDeviceThingName :: Lens' DeleteCoreDevice Text

-- | The <a>ARN</a> of the resource.
listTagsForResource_resourceArn :: Lens' ListTagsForResource Text

-- | A list of key-value pairs that contain metadata for the resource. For
--   more information, see <a>Tag your resources</a> in the <i>IoT
--   Greengrass V2 Developer Guide</i>.
listTagsForResourceResponse_tags :: Lens' ListTagsForResourceResponse (Maybe (HashMap Text Text))

-- | The response's http status code.
listTagsForResourceResponse_httpStatus :: Lens' ListTagsForResourceResponse Int

-- | The name of the core device. This is also the name of the IoT thing.
getCoreDevice_coreDeviceThingName :: Lens' GetCoreDevice Text

-- | The status of the core device. The core device status can be:
--   
--   <ul>
--   <li><tt>HEALTHY</tt> – The IoT Greengrass Core software and all
--   components run on the core device without issue.</li>
--   <li><tt>UNHEALTHY</tt> – The IoT Greengrass Core software or a
--   component is in a failed state on the core device.</li>
--   </ul>
getCoreDeviceResponse_status :: Lens' GetCoreDeviceResponse (Maybe CoreDeviceStatus)

-- | The operating system platform that the core device runs.
getCoreDeviceResponse_platform :: Lens' GetCoreDeviceResponse (Maybe Text)

-- | The computer architecture of the core device.
getCoreDeviceResponse_architecture :: Lens' GetCoreDeviceResponse (Maybe Text)

-- | The name of the core device. This is also the name of the IoT thing.
getCoreDeviceResponse_coreDeviceThingName :: Lens' GetCoreDeviceResponse (Maybe Text)

-- | A list of key-value pairs that contain metadata for the resource. For
--   more information, see <a>Tag your resources</a> in the <i>IoT
--   Greengrass V2 Developer Guide</i>.
getCoreDeviceResponse_tags :: Lens' GetCoreDeviceResponse (Maybe (HashMap Text Text))

-- | The version of the IoT Greengrass Core software that the core device
--   runs. This version is equivalent to the version of the Greengrass
--   nucleus component that runs on the core device. For more information,
--   see the <a>Greengrass nucleus component</a> in the <i>IoT Greengrass
--   V2 Developer Guide</i>.
getCoreDeviceResponse_coreVersion :: Lens' GetCoreDeviceResponse (Maybe Text)

-- | The time at which the core device's status last updated, expressed in
--   ISO 8601 format.
getCoreDeviceResponse_lastStatusUpdateTimestamp :: Lens' GetCoreDeviceResponse (Maybe UTCTime)

-- | The response's http status code.
getCoreDeviceResponse_httpStatus :: Lens' GetCoreDeviceResponse Int

-- | The <a>ARN</a> of the component version. Specify the ARN of a public
--   component version.
getComponentVersionArtifact_arn :: Lens' GetComponentVersionArtifact Text

-- | The name of the artifact.
--   
--   You can use the <a>GetComponent</a> operation to download the
--   component recipe, which includes the URI of the artifact. The artifact
--   name is the section of the URI after the scheme. For example, in the
--   artifact URI <tt>greengrass:SomeArtifact.zip</tt>, the artifact name
--   is <tt>SomeArtifact.zip</tt>.
getComponentVersionArtifact_artifactName :: Lens' GetComponentVersionArtifact Text

-- | The response's http status code.
getComponentVersionArtifactResponse_httpStatus :: Lens' GetComponentVersionArtifactResponse Int

-- | The URL of the artifact.
getComponentVersionArtifactResponse_preSignedUrl :: Lens' GetComponentVersionArtifactResponse Text

-- | The components to deploy. This is a dictionary, where each key is the
--   name of a component, and each key's value is the version and
--   configuration to deploy for that component.
createDeployment_components :: Lens' CreateDeployment (Maybe (HashMap Text ComponentDeploymentSpecification))

-- | A unique, case-sensitive identifier that you can provide to ensure
--   that the request is idempotent. Idempotency means that the request is
--   successfully processed only once, even if you send the request
--   multiple times. When a request succeeds, and you specify the same
--   client token for subsequent successful requests, the IoT Greengrass V2
--   service returns the successful response that it caches from the
--   previous request. IoT Greengrass V2 caches successful responses for
--   idempotent requests for up to 8 hours.
createDeployment_clientToken :: Lens' CreateDeployment (Maybe Text)

-- | The deployment policies for the deployment. These policies define how
--   the deployment updates components and handles failure.
createDeployment_deploymentPolicies :: Lens' CreateDeployment (Maybe DeploymentPolicies)

-- | The job configuration for the deployment configuration. The job
--   configuration specifies the rollout, timeout, and stop configurations
--   for the deployment configuration.
createDeployment_iotJobConfiguration :: Lens' CreateDeployment (Maybe DeploymentIoTJobConfiguration)

-- | The name of the deployment.
createDeployment_deploymentName :: Lens' CreateDeployment (Maybe Text)

-- | A list of key-value pairs that contain metadata for the resource. For
--   more information, see <a>Tag your resources</a> in the <i>IoT
--   Greengrass V2 Developer Guide</i>.
createDeployment_tags :: Lens' CreateDeployment (Maybe (HashMap Text Text))

-- | The <a>ARN</a> of the target IoT thing or thing group.
createDeployment_targetArn :: Lens' CreateDeployment Text

-- | The ID of the deployment.
createDeploymentResponse_deploymentId :: Lens' CreateDeploymentResponse (Maybe Text)

-- | The ID of the IoT job that applies the deployment to target devices.
createDeploymentResponse_iotJobId :: Lens' CreateDeploymentResponse (Maybe Text)

-- | The <a>ARN</a> of the IoT job that applies the deployment to target
--   devices.
createDeploymentResponse_iotJobArn :: Lens' CreateDeploymentResponse (Maybe Text)

-- | The response's http status code.
createDeploymentResponse_httpStatus :: Lens' CreateDeploymentResponse Int

-- | The list of client devices to associate.
batchAssociateClientDeviceWithCoreDevice_entries :: Lens' BatchAssociateClientDeviceWithCoreDevice (Maybe (NonEmpty AssociateClientDeviceWithCoreDeviceEntry))

-- | The name of the core device. This is also the name of the IoT thing.
batchAssociateClientDeviceWithCoreDevice_coreDeviceThingName :: Lens' BatchAssociateClientDeviceWithCoreDevice Text

-- | The list of any errors for the entries in the request. Each error
--   entry contains the name of the IoT thing that failed to associate.
batchAssociateClientDeviceWithCoreDeviceResponse_errorEntries :: Lens' BatchAssociateClientDeviceWithCoreDeviceResponse (Maybe (NonEmpty AssociateClientDeviceWithCoreDeviceErrorEntry))

-- | The response's http status code.
batchAssociateClientDeviceWithCoreDeviceResponse_httpStatus :: Lens' BatchAssociateClientDeviceWithCoreDeviceResponse Int

-- | The token to be used for the next set of paginated results.
listInstalledComponents_nextToken :: Lens' ListInstalledComponents (Maybe Text)

-- | The maximum number of results to be returned per paginated request.
listInstalledComponents_maxResults :: Lens' ListInstalledComponents (Maybe Natural)

-- | The name of the core device. This is also the name of the IoT thing.
listInstalledComponents_coreDeviceThingName :: Lens' ListInstalledComponents Text

-- | A list that summarizes each component on the core device.
listInstalledComponentsResponse_installedComponents :: Lens' ListInstalledComponentsResponse (Maybe [InstalledComponent])

-- | The token for the next set of results, or null if there are no
--   additional results.
listInstalledComponentsResponse_nextToken :: Lens' ListInstalledComponentsResponse (Maybe Text)

-- | The response's http status code.
listInstalledComponentsResponse_httpStatus :: Lens' ListInstalledComponentsResponse Int

-- | The ID of the deployment.
cancelDeployment_deploymentId :: Lens' CancelDeployment Text

-- | A message that communicates if the cancel was successful.
cancelDeploymentResponse_message :: Lens' CancelDeploymentResponse (Maybe Text)

-- | The response's http status code.
cancelDeploymentResponse_httpStatus :: Lens' CancelDeploymentResponse Int

-- | The list of client devices to disassociate.
batchDisassociateClientDeviceFromCoreDevice_entries :: Lens' BatchDisassociateClientDeviceFromCoreDevice (Maybe (NonEmpty DisassociateClientDeviceFromCoreDeviceEntry))

-- | The name of the core device. This is also the name of the IoT thing.
batchDisassociateClientDeviceFromCoreDevice_coreDeviceThingName :: Lens' BatchDisassociateClientDeviceFromCoreDevice Text

-- | The list of errors (if any) for the entries in the request. Each error
--   entry contains the name of the IoT thing that failed to disassociate.
batchDisassociateClientDeviceFromCoreDeviceResponse_errorEntries :: Lens' BatchDisassociateClientDeviceFromCoreDeviceResponse (Maybe (NonEmpty DisassociateClientDeviceFromCoreDeviceErrorEntry))

-- | The response's http status code.
batchDisassociateClientDeviceFromCoreDeviceResponse_httpStatus :: Lens' BatchDisassociateClientDeviceFromCoreDeviceResponse Int

-- | The core device status by which to filter. If you specify this
--   parameter, the list includes only core devices that have this status.
--   Choose one of the following options:
--   
--   <ul>
--   <li><tt>HEALTHY</tt> – The IoT Greengrass Core software and all
--   components run on the core device without issue.</li>
--   <li><tt>UNHEALTHY</tt> – The IoT Greengrass Core software or a
--   component is in a failed state on the core device.</li>
--   </ul>
listCoreDevices_status :: Lens' ListCoreDevices (Maybe CoreDeviceStatus)

-- | The <a>ARN</a> of the IoT thing group by which to filter. If you
--   specify this parameter, the list includes only core devices that are
--   members of this thing group.
listCoreDevices_thingGroupArn :: Lens' ListCoreDevices (Maybe Text)

-- | The token to be used for the next set of paginated results.
listCoreDevices_nextToken :: Lens' ListCoreDevices (Maybe Text)

-- | The maximum number of results to be returned per paginated request.
listCoreDevices_maxResults :: Lens' ListCoreDevices (Maybe Natural)

-- | The token for the next set of results, or null if there are no
--   additional results.
listCoreDevicesResponse_nextToken :: Lens' ListCoreDevicesResponse (Maybe Text)

-- | A list that summarizes each core device.
listCoreDevicesResponse_coreDevices :: Lens' ListCoreDevicesResponse (Maybe [CoreDevice])

-- | The response's http status code.
listCoreDevicesResponse_httpStatus :: Lens' ListCoreDevicesResponse Int

-- | The platform to use to resolve compatible components.
resolveComponentCandidates_platform :: Lens' ResolveComponentCandidates ComponentPlatform

-- | The list of components to resolve.
resolveComponentCandidates_componentCandidates :: Lens' ResolveComponentCandidates [ComponentCandidate]

-- | A list of components that meet the requirements that you specify in
--   the request. This list includes each component's recipe that you can
--   use to install the component.
resolveComponentCandidatesResponse_resolvedComponentVersions :: Lens' ResolveComponentCandidatesResponse (Maybe [ResolvedComponentVersion])

-- | The response's http status code.
resolveComponentCandidatesResponse_httpStatus :: Lens' ResolveComponentCandidatesResponse Int

-- | The token to be used for the next set of paginated results.
listEffectiveDeployments_nextToken :: Lens' ListEffectiveDeployments (Maybe Text)

-- | The maximum number of results to be returned per paginated request.
listEffectiveDeployments_maxResults :: Lens' ListEffectiveDeployments (Maybe Natural)

-- | The name of the core device. This is also the name of the IoT thing.
listEffectiveDeployments_coreDeviceThingName :: Lens' ListEffectiveDeployments Text

-- | The token for the next set of results, or null if there are no
--   additional results.
listEffectiveDeploymentsResponse_nextToken :: Lens' ListEffectiveDeploymentsResponse (Maybe Text)

-- | A list that summarizes each deployment on the core device.
listEffectiveDeploymentsResponse_effectiveDeployments :: Lens' ListEffectiveDeploymentsResponse (Maybe [EffectiveDeployment])

-- | The response's http status code.
listEffectiveDeploymentsResponse_httpStatus :: Lens' ListEffectiveDeploymentsResponse Int

-- | The <a>ARN</a> of the target IoT thing or thing group.
listDeployments_targetArn :: Lens' ListDeployments (Maybe Text)

-- | The token to be used for the next set of paginated results.
listDeployments_nextToken :: Lens' ListDeployments (Maybe Text)

-- | The filter for the list of deployments. Choose one of the following
--   options:
--   
--   <ul>
--   <li><tt>ALL</tt> – The list includes all deployments.</li>
--   <li><tt>LATEST_ONLY</tt> – The list includes only the latest revision
--   of each deployment.</li>
--   </ul>
--   
--   Default: <tt>LATEST_ONLY</tt>
listDeployments_historyFilter :: Lens' ListDeployments (Maybe DeploymentHistoryFilter)

-- | The maximum number of results to be returned per paginated request.
listDeployments_maxResults :: Lens' ListDeployments (Maybe Natural)

-- | The token for the next set of results, or null if there are no
--   additional results.
listDeploymentsResponse_nextToken :: Lens' ListDeploymentsResponse (Maybe Text)

-- | A list that summarizes each deployment.
listDeploymentsResponse_deployments :: Lens' ListDeploymentsResponse (Maybe [Deployment])

-- | The response's http status code.
listDeploymentsResponse_httpStatus :: Lens' ListDeploymentsResponse Int

-- | The <a>ARN</a> of the resource to tag.
tagResource_resourceArn :: Lens' TagResource Text

-- | A list of key-value pairs that contain metadata for the resource. For
--   more information, see <a>Tag your resources</a> in the <i>IoT
--   Greengrass V2 Developer Guide</i>.
tagResource_tags :: Lens' TagResource (HashMap Text Text)

-- | The response's http status code.
tagResourceResponse_httpStatus :: Lens' TagResourceResponse Int

-- | The <a>ARN</a> of the resource to untag.
untagResource_resourceArn :: Lens' UntagResource Text

-- | A list of keys for tags to remove from the resource.
untagResource_tagKeys :: Lens' UntagResource (NonEmpty Text)

-- | The response's http status code.
untagResourceResponse_httpStatus :: Lens' UntagResourceResponse Int

-- | The token to be used for the next set of paginated results.
listComponents_nextToken :: Lens' ListComponents (Maybe Text)

-- | The scope of the components to list.
--   
--   Default: <tt>PRIVATE</tt>
listComponents_scope :: Lens' ListComponents (Maybe ComponentVisibilityScope)

-- | The maximum number of results to be returned per paginated request.
listComponents_maxResults :: Lens' ListComponents (Maybe Natural)

-- | A list that summarizes each component.
listComponentsResponse_components :: Lens' ListComponentsResponse (Maybe [Component])

-- | The token for the next set of results, or null if there are no
--   additional results.
listComponentsResponse_nextToken :: Lens' ListComponentsResponse (Maybe Text)

-- | The response's http status code.
listComponentsResponse_httpStatus :: Lens' ListComponentsResponse Int

-- | The <a>ARN</a> of the component version.
deleteComponent_arn :: Lens' DeleteComponent Text

-- | A unique, case-sensitive identifier that you can provide to ensure
--   that the request is idempotent. Idempotency means that the request is
--   successfully processed only once, even if you send the request
--   multiple times. When a request succeeds, and you specify the same
--   client token for subsequent successful requests, the IoT Greengrass V2
--   service returns the successful response that it caches from the
--   previous request. IoT Greengrass V2 caches successful responses for
--   idempotent requests for up to 8 hours.
createComponentVersion_clientToken :: Lens' CreateComponentVersion (Maybe Text)

-- | The recipe to use to create the component. The recipe defines the
--   component's metadata, parameters, dependencies, lifecycle, artifacts,
--   and platform compatibility.
--   
--   You must specify either <tt>inlineRecipe</tt> or
--   <tt>lambdaFunction</tt>.-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
createComponentVersion_inlineRecipe :: Lens' CreateComponentVersion (Maybe ByteString)

-- | The parameters to create a component from a Lambda function.
--   
--   You must specify either <tt>inlineRecipe</tt> or
--   <tt>lambdaFunction</tt>.
createComponentVersion_lambdaFunction :: Lens' CreateComponentVersion (Maybe LambdaFunctionRecipeSource)

-- | A list of key-value pairs that contain metadata for the resource. For
--   more information, see <a>Tag your resources</a> in the <i>IoT
--   Greengrass V2 Developer Guide</i>.
createComponentVersion_tags :: Lens' CreateComponentVersion (Maybe (HashMap Text Text))

-- | The <a>ARN</a> of the component version.
createComponentVersionResponse_arn :: Lens' CreateComponentVersionResponse (Maybe Text)

-- | The response's http status code.
createComponentVersionResponse_httpStatus :: Lens' CreateComponentVersionResponse Int

-- | The name of the component.
createComponentVersionResponse_componentName :: Lens' CreateComponentVersionResponse Text

-- | The version of the component.
createComponentVersionResponse_componentVersion :: Lens' CreateComponentVersionResponse Text

-- | The time at which the component was created, expressed in ISO 8601
--   format.
createComponentVersionResponse_creationTimestamp :: Lens' CreateComponentVersionResponse UTCTime

-- | The status of the component version in IoT Greengrass V2. This status
--   is different from the status of the component on a core device.
createComponentVersionResponse_status :: Lens' CreateComponentVersionResponse CloudComponentStatus

-- | The format of the recipe.
getComponent_recipeOutputFormat :: Lens' GetComponent (Maybe RecipeOutputFormat)

-- | The <a>ARN</a> of the component version.
getComponent_arn :: Lens' GetComponent Text

-- | A list of key-value pairs that contain metadata for the resource. For
--   more information, see <a>Tag your resources</a> in the <i>IoT
--   Greengrass V2 Developer Guide</i>.
getComponentResponse_tags :: Lens' GetComponentResponse (Maybe (HashMap Text Text))

-- | The response's http status code.
getComponentResponse_httpStatus :: Lens' GetComponentResponse Int

-- | The format of the recipe.
getComponentResponse_recipeOutputFormat :: Lens' GetComponentResponse RecipeOutputFormat

-- | The recipe of the component version.-- -- <i>Note:</i> This
--   <tt>Lens</tt> automatically encodes and decodes Base64 data. -- The
--   underlying isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
getComponentResponse_recipe :: Lens' GetComponentResponse ByteString

-- | The token to be used for the next set of paginated results.
listClientDevicesAssociatedWithCoreDevice_nextToken :: Lens' ListClientDevicesAssociatedWithCoreDevice (Maybe Text)

-- | The maximum number of results to be returned per paginated request.
listClientDevicesAssociatedWithCoreDevice_maxResults :: Lens' ListClientDevicesAssociatedWithCoreDevice (Maybe Natural)

-- | The name of the core device. This is also the name of the IoT thing.
listClientDevicesAssociatedWithCoreDevice_coreDeviceThingName :: Lens' ListClientDevicesAssociatedWithCoreDevice Text

-- | A list that describes the client devices that are associated with the
--   core device.
listClientDevicesAssociatedWithCoreDeviceResponse_associatedClientDevices :: Lens' ListClientDevicesAssociatedWithCoreDeviceResponse (Maybe (NonEmpty AssociatedClientDevice))

-- | The token for the next set of results, or null if there are no
--   additional results.
listClientDevicesAssociatedWithCoreDeviceResponse_nextToken :: Lens' ListClientDevicesAssociatedWithCoreDeviceResponse (Maybe Text)

-- | The response's http status code.
listClientDevicesAssociatedWithCoreDeviceResponse_httpStatus :: Lens' ListClientDevicesAssociatedWithCoreDeviceResponse Int

-- | The name of the IoT thing that represents the client device to
--   associate.
associateClientDeviceWithCoreDeviceEntry_thingName :: Lens' AssociateClientDeviceWithCoreDeviceEntry Text

-- | The error code for the request.
associateClientDeviceWithCoreDeviceErrorEntry_code :: Lens' AssociateClientDeviceWithCoreDeviceErrorEntry (Maybe Text)

-- | A message that provides additional information about the error.
associateClientDeviceWithCoreDeviceErrorEntry_message :: Lens' AssociateClientDeviceWithCoreDeviceErrorEntry (Maybe Text)

-- | The name of the IoT thing whose associate request failed.
associateClientDeviceWithCoreDeviceErrorEntry_thingName :: Lens' AssociateClientDeviceWithCoreDeviceErrorEntry (Maybe Text)

-- | The time that the client device was associated, expressed in ISO 8601
--   format.
associatedClientDevice_associationTimestamp :: Lens' AssociatedClientDevice (Maybe UTCTime)

-- | The name of the IoT thing that represents the associated client
--   device.
associatedClientDevice_thingName :: Lens' AssociatedClientDevice (Maybe Text)

-- | The state of the component.
cloudComponentStatus_componentState :: Lens' CloudComponentStatus (Maybe CloudComponentState)

-- | A message that communicates details, such as errors, about the status
--   of the component.
cloudComponentStatus_message :: Lens' CloudComponentStatus (Maybe Text)

-- | A dictionary of errors that communicate why the component is in an
--   error state. For example, if IoT Greengrass can't access an artifact
--   for the component, then <tt>errors</tt> contains the artifact's URI as
--   a key, and the error message as the value for that key.
cloudComponentStatus_errors :: Lens' CloudComponentStatus (Maybe (HashMap Text Text))

-- | The <a>ARN</a> of the component version.
component_arn :: Lens' Component (Maybe Text)

-- | The name of the component.
component_componentName :: Lens' Component (Maybe Text)

-- | The latest version of the component and its details.
component_latestVersion :: Lens' Component (Maybe ComponentLatestVersion)

-- | The version of the component.
componentCandidate_componentVersion :: Lens' ComponentCandidate (Maybe Text)

-- | The version requirements for the component's dependencies. Greengrass
--   core devices get the version requirements from component recipes.
--   
--   IoT Greengrass V2 uses semantic version constraints. For more
--   information, see <a>Semantic Versioning</a>.
componentCandidate_versionRequirements :: Lens' ComponentCandidate (Maybe (HashMap Text Text))

-- | The name of the component.
componentCandidate_componentName :: Lens' ComponentCandidate (Maybe Text)

-- | The list of configuration nodes to reset to default values on target
--   devices. Use JSON pointers to specify each node to reset. JSON
--   pointers start with a forward slash (<tt>/</tt>) and use forward
--   slashes to separate the key for each level in the object. For more
--   information, see the <a>JSON pointer specification</a> and <a>Reset
--   configuration updates</a> in the <i>IoT Greengrass V2 Developer
--   Guide</i>.
componentConfigurationUpdate_reset :: Lens' ComponentConfigurationUpdate (Maybe [Text])

-- | A serialized JSON string that contains the configuration object to
--   merge to target devices. The core device merges this configuration
--   with the component's existing configuration. If this is the first time
--   a component deploys on a device, the core device merges this
--   configuration with the component's default configuration. This means
--   that the core device keeps it's existing configuration for keys and
--   values that you don't specify in this object. For more information,
--   see <a>Merge configuration updates</a> in the <i>IoT Greengrass V2
--   Developer Guide</i>.
componentConfigurationUpdate_merge :: Lens' ComponentConfigurationUpdate (Maybe Text)

-- | The type of this dependency. Choose from the following options:
--   
--   <ul>
--   <li><tt>SOFT</tt> – The component doesn't restart if the dependency
--   changes state.</li>
--   <li><tt>HARD</tt> – The component restarts if the dependency changes
--   state.</li>
--   </ul>
--   
--   Default: <tt>HARD</tt>
componentDependencyRequirement_dependencyType :: Lens' ComponentDependencyRequirement (Maybe ComponentDependencyType)

-- | The component version requirement for the component dependency.
--   
--   IoT Greengrass V2 uses semantic version constraints. For more
--   information, see <a>Semantic Versioning</a>.
componentDependencyRequirement_versionRequirement :: Lens' ComponentDependencyRequirement (Maybe Text)

-- | The version of the component.
componentDeploymentSpecification_componentVersion :: Lens' ComponentDeploymentSpecification (Maybe Text)

-- | The system user and group that the IoT Greengrass Core software uses
--   to run component processes on the core device. If you omit this
--   parameter, the IoT Greengrass Core software uses the system user and
--   group that you configure for the core device. For more information,
--   see <a>Configure the user and group that run components</a> in the
--   <i>IoT Greengrass V2 Developer Guide</i>.
componentDeploymentSpecification_runWith :: Lens' ComponentDeploymentSpecification (Maybe ComponentRunWith)

-- | The configuration updates to deploy for the component. You can define
--   <i>reset</i> updates and <i>merge</i> updates. A reset updates the
--   keys that you specify to the default configuration for the component.
--   A merge updates the core device's component configuration with the
--   keys and values that you specify. The IoT Greengrass Core software
--   applies reset updates before it applies merge updates. For more
--   information, see <a>Update component configurations</a> in the <i>IoT
--   Greengrass V2 Developer Guide</i>.
componentDeploymentSpecification_configurationUpdate :: Lens' ComponentDeploymentSpecification (Maybe ComponentConfigurationUpdate)

-- | The platforms that the component version supports.
componentLatestVersion_platforms :: Lens' ComponentLatestVersion (Maybe [ComponentPlatform])

-- | The <a>ARN</a> of the component version.
componentLatestVersion_arn :: Lens' ComponentLatestVersion (Maybe Text)

-- | The version of the component.
componentLatestVersion_componentVersion :: Lens' ComponentLatestVersion (Maybe Text)

-- | The time at which the component was created, expressed in ISO 8601
--   format.
componentLatestVersion_creationTimestamp :: Lens' ComponentLatestVersion (Maybe UTCTime)

-- | The publisher of the component version.
componentLatestVersion_publisher :: Lens' ComponentLatestVersion (Maybe Text)

-- | The description of the component version.
componentLatestVersion_description :: Lens' ComponentLatestVersion (Maybe Text)

-- | The friendly name of the platform. This name helps you identify the
--   platform.
--   
--   If you omit this parameter, IoT Greengrass creates a friendly name
--   from the <tt>os</tt> and <tt>architecture</tt> of the platform.
componentPlatform_name :: Lens' ComponentPlatform (Maybe Text)

-- | A dictionary of attributes for the platform. The IoT Greengrass Core
--   software defines the <tt>os</tt> and <tt>platform</tt> by default. You
--   can specify additional platform attributes for a core device when you
--   deploy the Greengrass nucleus component. For more information, see the
--   <a>Greengrass nucleus component</a> in the <i>IoT Greengrass V2
--   Developer Guide</i>.
componentPlatform_attributes :: Lens' ComponentPlatform (Maybe (HashMap Text Text))

-- | The POSIX system user and (optional) group to use to run this
--   component. Specify the user and group separated by a colon
--   (<tt>:</tt>) in the following format: <tt>user:group</tt>. The group
--   is optional. If you don't specify a group, the IoT Greengrass Core
--   software uses the primary user for the group.
--   
--   If you omit this parameter, the IoT Greengrass Core software uses the
--   default system user and group that you configure on the Greengrass
--   nucleus component. For more information, see <a>Configure the user and
--   group that run components</a>.
componentRunWith_posixUser :: Lens' ComponentRunWith (Maybe Text)

-- | The system resource limits to apply to this component's process on the
--   core device.
--   
--   If you omit this parameter, the IoT Greengrass Core software uses the
--   default system resource limits that you configure on the Greengrass
--   nucleus component. For more information, see <a>Configure system
--   resource limits for components</a>.
componentRunWith_systemResourceLimits :: Lens' ComponentRunWith (Maybe SystemResourceLimits)

-- | The <a>ARN</a> of the component version.
componentVersionListItem_arn :: Lens' ComponentVersionListItem (Maybe Text)

-- | The version of the component.
componentVersionListItem_componentVersion :: Lens' ComponentVersionListItem (Maybe Text)

-- | The name of the component.
componentVersionListItem_componentName :: Lens' ComponentVersionListItem (Maybe Text)

-- | The status of the core device. Core devices can have the following
--   statuses:
--   
--   <ul>
--   <li><tt>HEALTHY</tt> – The IoT Greengrass Core software and all
--   components run on the core device without issue.</li>
--   <li><tt>UNHEALTHY</tt> – The IoT Greengrass Core software or a
--   component is in a failed state on the core device.</li>
--   </ul>
coreDevice_status :: Lens' CoreDevice (Maybe CoreDeviceStatus)

-- | The name of the core device. This is also the name of the IoT thing.
coreDevice_coreDeviceThingName :: Lens' CoreDevice (Maybe Text)

-- | The time at which the core device's status last updated, expressed in
--   ISO 8601 format.
coreDevice_lastStatusUpdateTimestamp :: Lens' CoreDevice (Maybe UTCTime)

-- | The <a>ARN</a> of the target IoT thing or thing group.
deployment_targetArn :: Lens' Deployment (Maybe Text)

-- | The ID of the deployment.
deployment_deploymentId :: Lens' Deployment (Maybe Text)

-- | The time at which the deployment was created, expressed in ISO 8601
--   format.
deployment_creationTimestamp :: Lens' Deployment (Maybe UTCTime)

-- | The status of the deployment.
deployment_deploymentStatus :: Lens' Deployment (Maybe DeploymentStatus)

-- | Whether or not the deployment is the latest revision for its target.
deployment_isLatestForTarget :: Lens' Deployment (Maybe Bool)

-- | The revision number of the deployment.
deployment_revisionId :: Lens' Deployment (Maybe Text)

-- | The name of the deployment.
deployment_deploymentName :: Lens' Deployment (Maybe Text)

-- | Whether or not to notify components and wait for components to become
--   safe to update. Choose from the following options:
--   
--   <ul>
--   <li><tt>NOTIFY_COMPONENTS</tt> – The deployment notifies each
--   component before it stops and updates that component. Components can
--   use the <a>SubscribeToComponentUpdates</a> IPC operation to receive
--   these notifications. Then, components can respond with the
--   <a>DeferComponentUpdate</a> IPC operation. For more information, see
--   <a>Create deployments</a> in the <i>IoT Greengrass V2 Developer
--   Guide</i>.</li>
--   <li><tt>SKIP_NOTIFY_COMPONENTS</tt> – The deployment doesn't notify
--   components or wait for them to be safe to update.</li>
--   </ul>
--   
--   Default: <tt>NOTIFY_COMPONENTS</tt>
deploymentComponentUpdatePolicy_action :: Lens' DeploymentComponentUpdatePolicy (Maybe DeploymentComponentUpdatePolicyAction)

-- | The amount of time in seconds that each component on a device has to
--   report that it's safe to update. If the component waits for longer
--   than this timeout, then the deployment proceeds on the device.
--   
--   Default: <tt>60</tt>
deploymentComponentUpdatePolicy_timeoutInSeconds :: Lens' DeploymentComponentUpdatePolicy (Maybe Int)

-- | The amount of time in seconds that a component can validate its
--   configuration updates. If the validation time exceeds this timeout,
--   then the deployment proceeds for the device.
--   
--   Default: <tt>30</tt>
deploymentConfigurationValidationPolicy_timeoutInSeconds :: Lens' DeploymentConfigurationValidationPolicy (Maybe Int)

-- | The rollout configuration for the job. This configuration defines the
--   rate at which the job rolls out to the fleet of target devices.
deploymentIoTJobConfiguration_jobExecutionsRolloutConfig :: Lens' DeploymentIoTJobConfiguration (Maybe IoTJobExecutionsRolloutConfig)

-- | The stop configuration for the job. This configuration defines when
--   and how to stop a job rollout.
deploymentIoTJobConfiguration_abortConfig :: Lens' DeploymentIoTJobConfiguration (Maybe IoTJobAbortConfig)

-- | The timeout configuration for the job. This configuration defines the
--   amount of time each device has to complete the job.
deploymentIoTJobConfiguration_timeoutConfig :: Lens' DeploymentIoTJobConfiguration (Maybe IoTJobTimeoutConfig)

-- | The failure handling policy for the configuration deployment. This
--   policy defines what to do if the deployment fails.
--   
--   Default: <tt>ROLLBACK</tt>
deploymentPolicies_failureHandlingPolicy :: Lens' DeploymentPolicies (Maybe DeploymentFailureHandlingPolicy)

-- | The configuration validation policy for the configuration deployment.
--   This policy defines how long each component has to validate its
--   configure updates.
deploymentPolicies_configurationValidationPolicy :: Lens' DeploymentPolicies (Maybe DeploymentConfigurationValidationPolicy)

-- | The component update policy for the configuration deployment. This
--   policy defines when it's safe to deploy the configuration to devices.
deploymentPolicies_componentUpdatePolicy :: Lens' DeploymentPolicies (Maybe DeploymentComponentUpdatePolicy)

-- | The name of the IoT thing that represents the client device to
--   disassociate.
disassociateClientDeviceFromCoreDeviceEntry_thingName :: Lens' DisassociateClientDeviceFromCoreDeviceEntry Text

-- | The error code for the request.
disassociateClientDeviceFromCoreDeviceErrorEntry_code :: Lens' DisassociateClientDeviceFromCoreDeviceErrorEntry (Maybe Text)

-- | A message that provides additional information about the error.
disassociateClientDeviceFromCoreDeviceErrorEntry_message :: Lens' DisassociateClientDeviceFromCoreDeviceErrorEntry (Maybe Text)

-- | The name of the IoT thing whose disassociate request failed.
disassociateClientDeviceFromCoreDeviceErrorEntry_thingName :: Lens' DisassociateClientDeviceFromCoreDeviceErrorEntry (Maybe Text)

-- | The ID of the IoT job that applies the deployment to target devices.
effectiveDeployment_iotJobId :: Lens' EffectiveDeployment (Maybe Text)

-- | The <a>ARN</a> of the IoT job that applies the deployment to target
--   devices.
effectiveDeployment_iotJobArn :: Lens' EffectiveDeployment (Maybe Text)

-- | The reason code for the update, if the job was updated.
effectiveDeployment_reason :: Lens' EffectiveDeployment (Maybe Text)

-- | The description of the deployment job.
effectiveDeployment_description :: Lens' EffectiveDeployment (Maybe Text)

-- | The ID of the deployment.
effectiveDeployment_deploymentId :: Lens' EffectiveDeployment Text

-- | The name of the deployment.
effectiveDeployment_deploymentName :: Lens' EffectiveDeployment Text

-- | The <a>ARN</a> of the target IoT thing or thing group.
effectiveDeployment_targetArn :: Lens' EffectiveDeployment Text

-- | The status of the deployment job on the Greengrass core device.
effectiveDeployment_coreDeviceExecutionStatus :: Lens' EffectiveDeployment EffectiveDeploymentExecutionStatus

-- | The time at which the deployment was created, expressed in ISO 8601
--   format.
effectiveDeployment_creationTimestamp :: Lens' EffectiveDeployment UTCTime

-- | The time at which the deployment job was last modified, expressed in
--   ISO 8601 format.
effectiveDeployment_modifiedTimestamp :: Lens' EffectiveDeployment UTCTime

-- | Whether or not the component is a root component.
installedComponent_isRoot :: Lens' InstalledComponent (Maybe Bool)

-- | The version of the component.
installedComponent_componentVersion :: Lens' InstalledComponent (Maybe Text)

-- | The name of the component.
installedComponent_componentName :: Lens' InstalledComponent (Maybe Text)

-- | The details about the lifecycle state of the component.
installedComponent_lifecycleStateDetails :: Lens' InstalledComponent (Maybe Text)

-- | The lifecycle state of the component.
installedComponent_lifecycleState :: Lens' InstalledComponent (Maybe InstalledComponentLifecycleState)

-- | The list of criteria that define when and how to cancel the
--   configuration deployment.
ioTJobAbortConfig_criteriaList :: Lens' IoTJobAbortConfig (NonEmpty IoTJobAbortCriteria)

-- | The type of job deployment failure that can cancel a job.
ioTJobAbortCriteria_failureType :: Lens' IoTJobAbortCriteria IoTJobExecutionFailureType

-- | The action to perform when the criteria are met.
ioTJobAbortCriteria_action :: Lens' IoTJobAbortCriteria IoTJobAbortAction

-- | The minimum percentage of <tt>failureType</tt> failures that occur
--   before the job can cancel.
--   
--   This parameter supports up to two digits after the decimal (for
--   example, you can specify <tt>10.9</tt> or <tt>10.99</tt>, but not
--   <tt>10.999</tt>).
ioTJobAbortCriteria_thresholdPercentage :: Lens' IoTJobAbortCriteria Double

-- | The minimum number of things that receive the configuration before the
--   job can cancel.
ioTJobAbortCriteria_minNumberOfExecutedThings :: Lens' IoTJobAbortCriteria Natural

-- | The exponential rate to increase the job rollout rate.
ioTJobExecutionsRolloutConfig_exponentialRate :: Lens' IoTJobExecutionsRolloutConfig (Maybe IoTJobExponentialRolloutRate)

-- | The maximum number of devices that receive a pending job notification,
--   per minute.
ioTJobExecutionsRolloutConfig_maximumPerMinute :: Lens' IoTJobExecutionsRolloutConfig (Maybe Natural)

-- | The minimum number of devices that receive a pending job notification,
--   per minute, when the job starts. This parameter defines the initial
--   rollout rate of the job.
ioTJobExponentialRolloutRate_baseRatePerMinute :: Lens' IoTJobExponentialRolloutRate Natural

-- | The exponential factor to increase the rollout rate for the job.
--   
--   This parameter supports up to one digit after the decimal (for
--   example, you can specify <tt>1.5</tt>, but not <tt>1.55</tt>).
ioTJobExponentialRolloutRate_incrementFactor :: Lens' IoTJobExponentialRolloutRate Double

-- | The criteria to increase the rollout rate for the job.
ioTJobExponentialRolloutRate_rateIncreaseCriteria :: Lens' IoTJobExponentialRolloutRate IoTJobRateIncreaseCriteria

-- | The number of devices to receive the job notification before the
--   rollout rate increases.
ioTJobRateIncreaseCriteria_numberOfNotifiedThings :: Lens' IoTJobRateIncreaseCriteria (Maybe Natural)

-- | The number of devices to successfully run the configuration job before
--   the rollout rate increases.
ioTJobRateIncreaseCriteria_numberOfSucceededThings :: Lens' IoTJobRateIncreaseCriteria (Maybe Natural)

-- | The amount of time, in minutes, that devices have to complete the job.
--   The timer starts when the job status is set to <tt>IN_PROGRESS</tt>.
--   If the job status doesn't change to a terminal state before the time
--   expires, then the job status is set to <tt>TIMED_OUT</tt>.
--   
--   The timeout interval must be between 1 minute and 7 days (10080
--   minutes).
ioTJobTimeoutConfig_inProgressTimeoutInMinutes :: Lens' IoTJobTimeoutConfig (Maybe Integer)

-- | Whether or not the container can read information from the device's
--   <tt>/sys</tt> folder.
--   
--   Default: <tt>false</tt>
lambdaContainerParams_mountROSysfs :: Lens' LambdaContainerParams (Maybe Bool)

-- | The memory size of the container, expressed in kilobytes.
--   
--   Default: <tt>16384</tt> (16 MB)
lambdaContainerParams_memorySizeInKB :: Lens' LambdaContainerParams (Maybe Int)

-- | The list of system devices that the container can access.
lambdaContainerParams_devices :: Lens' LambdaContainerParams (Maybe [LambdaDeviceMount])

-- | The list of volumes that the container can access.
lambdaContainerParams_volumes :: Lens' LambdaContainerParams (Maybe [LambdaVolumeMount])

-- | Whether or not to add the component's system user as an owner of the
--   device.
--   
--   Default: <tt>false</tt>
lambdaDeviceMount_addGroupOwner :: Lens' LambdaDeviceMount (Maybe Bool)

-- | The permission to access the device: read/only (<tt>ro</tt>) or
--   read/write (<tt>rw</tt>).
--   
--   Default: <tt>ro</tt>
lambdaDeviceMount_permission :: Lens' LambdaDeviceMount (Maybe LambdaFilesystemPermission)

-- | The mount path for the device in the file system.
lambdaDeviceMount_path :: Lens' LambdaDeviceMount Text

-- | The topic to which to subscribe to receive event messages.
lambdaEventSource_topic :: Lens' LambdaEventSource Text

-- | The type of event source. Choose from the following options:
--   
--   <ul>
--   <li><tt>PUB_SUB</tt> – Subscribe to local publish/subscribe messages.
--   This event source type doesn't support MQTT wildcards (<tt>+</tt> and
--   <tt>#</tt>) in the event source topic.</li>
--   <li><tt>IOT_CORE</tt> – Subscribe to Amazon Web Services IoT Core MQTT
--   messages. This event source type supports MQTT wildcards (<tt>+</tt>
--   and <tt>#</tt>) in the event source topic.</li>
--   </ul>
lambdaEventSource_type :: Lens' LambdaEventSource LambdaEventSourceType

-- | The list of arguments to pass to the Lambda function when it runs.
lambdaExecutionParameters_execArgs :: Lens' LambdaExecutionParameters (Maybe [Text])

-- | The maximum size of the message queue for the Lambda function
--   component. The IoT Greengrass core stores messages in a FIFO
--   (first-in-first-out) queue until it can run the Lambda function to
--   consume each message.
lambdaExecutionParameters_maxQueueSize :: Lens' LambdaExecutionParameters (Maybe Int)

-- | Whether or not the Lambda function is pinned, or long-lived.
--   
--   <ul>
--   <li>A pinned Lambda function starts when IoT Greengrass starts and
--   keeps running in its own container.</li>
--   <li>A non-pinned Lambda function starts only when it receives a work
--   item and exists after it idles for <tt>maxIdleTimeInSeconds</tt>. If
--   the function has multiple work items, the IoT Greengrass Core software
--   creates multiple instances of the function.</li>
--   </ul>
--   
--   Default: <tt>true</tt>
lambdaExecutionParameters_pinned :: Lens' LambdaExecutionParameters (Maybe Bool)

-- | The encoding type that the Lambda function supports.
--   
--   Default: <tt>json</tt>
lambdaExecutionParameters_inputPayloadEncodingType :: Lens' LambdaExecutionParameters (Maybe LambdaInputPayloadEncodingType)

-- | The maximum amount of time in seconds that a non-pinned Lambda
--   function can idle before the IoT Greengrass Core software stops its
--   process.
lambdaExecutionParameters_maxIdleTimeInSeconds :: Lens' LambdaExecutionParameters (Maybe Int)

-- | The maximum amount of time in seconds that the Lambda function can
--   process a work item.
lambdaExecutionParameters_timeoutInSeconds :: Lens' LambdaExecutionParameters (Maybe Int)

-- | The list of event sources to which to subscribe to receive work
--   messages. The Lambda function runs when it receives a message from an
--   event source. You can subscribe this function to local
--   publish/subscribe messages and Amazon Web Services IoT Core MQTT
--   messages.
lambdaExecutionParameters_eventSources :: Lens' LambdaExecutionParameters (Maybe [LambdaEventSource])

-- | The maximum number of instances that a non-pinned Lambda function can
--   run at the same time.
lambdaExecutionParameters_maxInstancesCount :: Lens' LambdaExecutionParameters (Maybe Int)

-- | The map of environment variables that are available to the Lambda
--   function when it runs.
lambdaExecutionParameters_environmentVariables :: Lens' LambdaExecutionParameters (Maybe (HashMap Text Text))

-- | The interval in seconds at which a pinned (also known as long-lived)
--   Lambda function component sends status updates to the Lambda manager
--   component.
lambdaExecutionParameters_statusTimeoutInSeconds :: Lens' LambdaExecutionParameters (Maybe Int)

-- | The parameters for the Linux process that contains the Lambda
--   function.
lambdaExecutionParameters_linuxProcessParams :: Lens' LambdaExecutionParameters (Maybe LambdaLinuxProcessParams)

-- | The system and runtime parameters for the Lambda function as it runs
--   on the Greengrass core device.
lambdaFunctionRecipeSource_componentLambdaParameters :: Lens' LambdaFunctionRecipeSource (Maybe LambdaExecutionParameters)

-- | The version of the component.
--   
--   Defaults to the version of the Lambda function as a semantic version.
--   For example, if your function version is <tt>3</tt>, the component
--   version becomes <tt>3.0.0</tt>.
lambdaFunctionRecipeSource_componentVersion :: Lens' LambdaFunctionRecipeSource (Maybe Text)

-- | The name of the component.
--   
--   Defaults to the name of the Lambda function.
lambdaFunctionRecipeSource_componentName :: Lens' LambdaFunctionRecipeSource (Maybe Text)

-- | The platforms that the component version supports.
lambdaFunctionRecipeSource_componentPlatforms :: Lens' LambdaFunctionRecipeSource (Maybe [ComponentPlatform])

-- | The component versions on which this Lambda function component
--   depends.
lambdaFunctionRecipeSource_componentDependencies :: Lens' LambdaFunctionRecipeSource (Maybe (HashMap Text ComponentDependencyRequirement))

-- | The <a>ARN</a> of the Lambda function. The ARN must include the
--   version of the function to import. You can't use version aliases like
--   <tt>$LATEST</tt>.
lambdaFunctionRecipeSource_lambdaArn :: Lens' LambdaFunctionRecipeSource Text

-- | The parameters for the container in which the Lambda function runs.
lambdaLinuxProcessParams_containerParams :: Lens' LambdaLinuxProcessParams (Maybe LambdaContainerParams)

-- | The isolation mode for the process that contains the Lambda function.
--   The process can run in an isolated runtime environment inside the IoT
--   Greengrass container, or as a regular process outside any container.
--   
--   Default: <tt>GreengrassContainer</tt>
lambdaLinuxProcessParams_isolationMode :: Lens' LambdaLinuxProcessParams (Maybe LambdaIsolationMode)

-- | Whether or not to add the IoT Greengrass user group as an owner of the
--   volume.
--   
--   Default: <tt>false</tt>
lambdaVolumeMount_addGroupOwner :: Lens' LambdaVolumeMount (Maybe Bool)

-- | The permission to access the volume: read/only (<tt>ro</tt>) or
--   read/write (<tt>rw</tt>).
--   
--   Default: <tt>ro</tt>
lambdaVolumeMount_permission :: Lens' LambdaVolumeMount (Maybe LambdaFilesystemPermission)

-- | The path to the physical volume in the file system.
lambdaVolumeMount_sourcePath :: Lens' LambdaVolumeMount Text

-- | The path to the logical volume in the file system.
lambdaVolumeMount_destinationPath :: Lens' LambdaVolumeMount Text

-- | The <a>ARN</a> of the component version.
resolvedComponentVersion_arn :: Lens' ResolvedComponentVersion (Maybe Text)

-- | The version of the component.
resolvedComponentVersion_componentVersion :: Lens' ResolvedComponentVersion (Maybe Text)

-- | The recipe of the component version.-- -- <i>Note:</i> This
--   <tt>Lens</tt> automatically encodes and decodes Base64 data. -- The
--   underlying isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
resolvedComponentVersion_recipe :: Lens' ResolvedComponentVersion (Maybe ByteString)

-- | The name of the component.
resolvedComponentVersion_componentName :: Lens' ResolvedComponentVersion (Maybe Text)

-- | The maximum amount of RAM, expressed in kilobytes, that a component's
--   processes can use on the core device.
systemResourceLimits_memory :: Lens' SystemResourceLimits (Maybe Natural)

-- | The maximum amount of CPU time that a component's processes can use on
--   the core device. A core device's total CPU time is equivalent to the
--   device's number of CPU cores. For example, on a core device with 4 CPU
--   cores, you can set this value to <tt>2</tt> to limit the component's
--   processes to 50 percent usage of each CPU core. On a device with 1 CPU
--   core, you can set this value to <tt>0.25</tt> to limit the component's
--   processes to 25 percent usage of the CPU. If you set this value to a
--   number greater than the number of CPU cores, the IoT Greengrass Core
--   software doesn't limit the component's CPU usage.
systemResourceLimits_cpus :: Lens' SystemResourceLimits (Maybe Double)


module Amazonka.GreengrassV2.Waiters


-- | Derived from API version <tt>2020-11-30</tt> of the AWS service
--   descriptions, licensed under Apache 2.0.
--   
--   IoT Greengrass brings local compute, messaging, data management, sync,
--   and ML inference capabilities to edge devices. This enables devices to
--   collect and analyze data closer to the source of information, react
--   autonomously to local events, and communicate securely with each other
--   on local networks. Local devices can also communicate securely with
--   Amazon Web Services IoT Core and export IoT data to the Amazon Web
--   Services Cloud. IoT Greengrass developers can use Lambda functions and
--   components to create and deploy applications to fleets of edge devices
--   for local operation.
--   
--   IoT Greengrass Version 2 provides a new major version of the IoT
--   Greengrass Core software, new APIs, and a new console. Use this API
--   reference to learn how to use the IoT Greengrass V2 API operations to
--   manage components, manage deployments, and core devices.
--   
--   For more information, see <a>What is IoT Greengrass?</a> in the <i>IoT
--   Greengrass V2 Developer Guide</i>.
module Amazonka.GreengrassV2

-- | API version <tt>2020-11-30</tt> of the Amazon IoT Greengrass V2 SDK
--   configuration.
defaultService :: Service

-- | The request isn't valid. This can occur if your request contains
--   malformed JSON or unsupported characters.
_ValidationException :: AsError a => Getting (First ServiceError) a ServiceError

-- | You don't have permission to perform the action.
_AccessDeniedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Your request has conflicting operations. This can occur if you're
--   trying to perform more than one operation on the same resource at the
--   same time.
_ConflictException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Your request exceeds a service quota. For example, you might have the
--   maximum number of components that you can create.
_ServiceQuotaExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Your request exceeded a request rate quota. For example, you might
--   have exceeded the amount of times that you can retrieve device or
--   deployment status per second.
_ThrottlingException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request is already in progress. This exception occurs when you use
--   a client token for multiple requests while IoT Greengrass is still
--   processing an earlier request that uses the same client token.
_RequestAlreadyInProgressException :: AsError a => Getting (First ServiceError) a ServiceError

-- | IoT Greengrass can't process your request right now. Try again later.
_InternalServerException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The requested resource can't be found.
_ResourceNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | <i>See:</i> <a>newListComponentVersions</a> smart constructor.
data ListComponentVersions
ListComponentVersions' :: Maybe Text -> Maybe Natural -> Text -> ListComponentVersions

-- | Create a value of <a>ListComponentVersions</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListComponentVersions'</a>,
--   <a>listComponentVersions_nextToken</a> - The token to be used for the
--   next set of paginated results.
--   
--   <a>$sel:maxResults:ListComponentVersions'</a>,
--   <a>listComponentVersions_maxResults</a> - The maximum number of
--   results to be returned per paginated request.
--   
--   <a>$sel:arn:ListComponentVersions'</a>,
--   <a>listComponentVersions_arn</a> - The <a>ARN</a> of the component
--   version.
newListComponentVersions :: Text -> ListComponentVersions

-- | <i>See:</i> <a>newListComponentVersionsResponse</a> smart constructor.
data ListComponentVersionsResponse
ListComponentVersionsResponse' :: Maybe Text -> Maybe [ComponentVersionListItem] -> Int -> ListComponentVersionsResponse

-- | Create a value of <a>ListComponentVersionsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListComponentVersions'</a>,
--   <a>listComponentVersionsResponse_nextToken</a> - The token for the
--   next set of results, or null if there are no additional results.
--   
--   <a>$sel:componentVersions:ListComponentVersionsResponse'</a>,
--   <a>listComponentVersionsResponse_componentVersions</a> - A list of
--   versions that exist for the component.
--   
--   <a>$sel:httpStatus:ListComponentVersionsResponse'</a>,
--   <a>listComponentVersionsResponse_httpStatus</a> - The response's http
--   status code.
newListComponentVersionsResponse :: Int -> ListComponentVersionsResponse

-- | <i>See:</i> <a>newGetDeployment</a> smart constructor.
data GetDeployment
GetDeployment' :: Text -> GetDeployment

-- | Create a value of <a>GetDeployment</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:deploymentId:GetDeployment'</a>,
--   <a>getDeployment_deploymentId</a> - The ID of the deployment.
newGetDeployment :: Text -> GetDeployment

-- | <i>See:</i> <a>newGetDeploymentResponse</a> smart constructor.
data GetDeploymentResponse
GetDeploymentResponse' :: Maybe Text -> Maybe (HashMap Text ComponentDeploymentSpecification) -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe DeploymentPolicies -> Maybe POSIX -> Maybe DeploymentIoTJobConfiguration -> Maybe DeploymentStatus -> Maybe Bool -> Maybe Text -> Maybe Text -> Maybe (HashMap Text Text) -> Int -> GetDeploymentResponse

-- | Create a value of <a>GetDeploymentResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:targetArn:GetDeploymentResponse'</a>,
--   <a>getDeploymentResponse_targetArn</a> - The <a>ARN</a> of the target
--   IoT thing or thing group.
--   
--   <a>$sel:components:GetDeploymentResponse'</a>,
--   <a>getDeploymentResponse_components</a> - The components to deploy.
--   This is a dictionary, where each key is the name of a component, and
--   each key's value is the version and configuration to deploy for that
--   component.
--   
--   <a>$sel:deploymentId:GetDeployment'</a>,
--   <a>getDeploymentResponse_deploymentId</a> - The ID of the deployment.
--   
--   <a>$sel:iotJobId:GetDeploymentResponse'</a>,
--   <a>getDeploymentResponse_iotJobId</a> - The ID of the IoT job that
--   applies the deployment to target devices.
--   
--   <a>$sel:iotJobArn:GetDeploymentResponse'</a>,
--   <a>getDeploymentResponse_iotJobArn</a> - The <a>ARN</a> of the IoT job
--   that applies the deployment to target devices.
--   
--   <a>$sel:deploymentPolicies:GetDeploymentResponse'</a>,
--   <a>getDeploymentResponse_deploymentPolicies</a> - The deployment
--   policies for the deployment. These policies define how the deployment
--   updates components and handles failure.
--   
--   <a>$sel:creationTimestamp:GetDeploymentResponse'</a>,
--   <a>getDeploymentResponse_creationTimestamp</a> - The time at which the
--   deployment was created, expressed in ISO 8601 format.
--   
--   <a>$sel:iotJobConfiguration:GetDeploymentResponse'</a>,
--   <a>getDeploymentResponse_iotJobConfiguration</a> - The job
--   configuration for the deployment configuration. The job configuration
--   specifies the rollout, timeout, and stop configurations for the
--   deployment configuration.
--   
--   <a>$sel:deploymentStatus:GetDeploymentResponse'</a>,
--   <a>getDeploymentResponse_deploymentStatus</a> - The status of the
--   deployment.
--   
--   <a>$sel:isLatestForTarget:GetDeploymentResponse'</a>,
--   <a>getDeploymentResponse_isLatestForTarget</a> - Whether or not the
--   deployment is the latest revision for its target.
--   
--   <a>$sel:revisionId:GetDeploymentResponse'</a>,
--   <a>getDeploymentResponse_revisionId</a> - The revision number of the
--   deployment.
--   
--   <a>$sel:deploymentName:GetDeploymentResponse'</a>,
--   <a>getDeploymentResponse_deploymentName</a> - The name of the
--   deployment.
--   
--   <a>$sel:tags:GetDeploymentResponse'</a>,
--   <a>getDeploymentResponse_tags</a> - A list of key-value pairs that
--   contain metadata for the resource. For more information, see <a>Tag
--   your resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>.
--   
--   <a>$sel:httpStatus:GetDeploymentResponse'</a>,
--   <a>getDeploymentResponse_httpStatus</a> - The response's http status
--   code.
newGetDeploymentResponse :: Int -> GetDeploymentResponse

-- | <i>See:</i> <a>newDescribeComponent</a> smart constructor.
data DescribeComponent
DescribeComponent' :: Text -> DescribeComponent

-- | Create a value of <a>DescribeComponent</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:arn:DescribeComponent'</a>, <a>describeComponent_arn</a> - The
--   <a>ARN</a> of the component version.
newDescribeComponent :: Text -> DescribeComponent

-- | <i>See:</i> <a>newDescribeComponentResponse</a> smart constructor.
data DescribeComponentResponse
DescribeComponentResponse' :: Maybe [ComponentPlatform] -> Maybe CloudComponentStatus -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe (HashMap Text Text) -> Int -> DescribeComponentResponse

-- | Create a value of <a>DescribeComponentResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:platforms:DescribeComponentResponse'</a>,
--   <a>describeComponentResponse_platforms</a> - The platforms that the
--   component version supports.
--   
--   <a>$sel:status:DescribeComponentResponse'</a>,
--   <a>describeComponentResponse_status</a> - The status of the component
--   version in IoT Greengrass V2. This status is different from the status
--   of the component on a core device.
--   
--   <a>$sel:arn:DescribeComponent'</a>,
--   <a>describeComponentResponse_arn</a> - The <a>ARN</a> of the component
--   version.
--   
--   <a>$sel:componentVersion:DescribeComponentResponse'</a>,
--   <a>describeComponentResponse_componentVersion</a> - The version of the
--   component.
--   
--   <a>$sel:creationTimestamp:DescribeComponentResponse'</a>,
--   <a>describeComponentResponse_creationTimestamp</a> - The time at which
--   the component was created, expressed in ISO 8601 format.
--   
--   <a>$sel:componentName:DescribeComponentResponse'</a>,
--   <a>describeComponentResponse_componentName</a> - The name of the
--   component.
--   
--   <a>$sel:publisher:DescribeComponentResponse'</a>,
--   <a>describeComponentResponse_publisher</a> - The publisher of the
--   component version.
--   
--   <a>$sel:description:DescribeComponentResponse'</a>,
--   <a>describeComponentResponse_description</a> - The description of the
--   component version.
--   
--   <a>$sel:tags:DescribeComponentResponse'</a>,
--   <a>describeComponentResponse_tags</a> - A list of key-value pairs that
--   contain metadata for the resource. For more information, see <a>Tag
--   your resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>.
--   
--   <a>$sel:httpStatus:DescribeComponentResponse'</a>,
--   <a>describeComponentResponse_httpStatus</a> - The response's http
--   status code.
newDescribeComponentResponse :: Int -> DescribeComponentResponse

-- | <i>See:</i> <a>newDeleteCoreDevice</a> smart constructor.
data DeleteCoreDevice
DeleteCoreDevice' :: Text -> DeleteCoreDevice

-- | Create a value of <a>DeleteCoreDevice</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:coreDeviceThingName:DeleteCoreDevice'</a>,
--   <a>deleteCoreDevice_coreDeviceThingName</a> - The name of the core
--   device. This is also the name of the IoT thing.
newDeleteCoreDevice :: Text -> DeleteCoreDevice

-- | <i>See:</i> <a>newDeleteCoreDeviceResponse</a> smart constructor.
data DeleteCoreDeviceResponse
DeleteCoreDeviceResponse' :: DeleteCoreDeviceResponse

-- | Create a value of <a>DeleteCoreDeviceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newDeleteCoreDeviceResponse :: DeleteCoreDeviceResponse

-- | <i>See:</i> <a>newListTagsForResource</a> smart constructor.
data ListTagsForResource
ListTagsForResource' :: Text -> ListTagsForResource

-- | Create a value of <a>ListTagsForResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:ListTagsForResource'</a>,
--   <a>listTagsForResource_resourceArn</a> - The <a>ARN</a> of the
--   resource.
newListTagsForResource :: Text -> ListTagsForResource

-- | <i>See:</i> <a>newListTagsForResourceResponse</a> smart constructor.
data ListTagsForResourceResponse
ListTagsForResourceResponse' :: Maybe (HashMap Text Text) -> Int -> ListTagsForResourceResponse

-- | Create a value of <a>ListTagsForResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tags:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_tags</a> - A list of key-value pairs
--   that contain metadata for the resource. For more information, see
--   <a>Tag your resources</a> in the <i>IoT Greengrass V2 Developer
--   Guide</i>.
--   
--   <a>$sel:httpStatus:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_httpStatus</a> - The response's http
--   status code.
newListTagsForResourceResponse :: Int -> ListTagsForResourceResponse

-- | <i>See:</i> <a>newGetCoreDevice</a> smart constructor.
data GetCoreDevice
GetCoreDevice' :: Text -> GetCoreDevice

-- | Create a value of <a>GetCoreDevice</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:coreDeviceThingName:GetCoreDevice'</a>,
--   <a>getCoreDevice_coreDeviceThingName</a> - The name of the core
--   device. This is also the name of the IoT thing.
newGetCoreDevice :: Text -> GetCoreDevice

-- | <i>See:</i> <a>newGetCoreDeviceResponse</a> smart constructor.
data GetCoreDeviceResponse
GetCoreDeviceResponse' :: Maybe CoreDeviceStatus -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe (HashMap Text Text) -> Maybe Text -> Maybe POSIX -> Int -> GetCoreDeviceResponse

-- | Create a value of <a>GetCoreDeviceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:GetCoreDeviceResponse'</a>,
--   <a>getCoreDeviceResponse_status</a> - The status of the core device.
--   The core device status can be:
--   
--   <ul>
--   <li><tt>HEALTHY</tt> – The IoT Greengrass Core software and all
--   components run on the core device without issue.</li>
--   <li><tt>UNHEALTHY</tt> – The IoT Greengrass Core software or a
--   component is in a failed state on the core device.</li>
--   </ul>
--   
--   <a>$sel:platform:GetCoreDeviceResponse'</a>,
--   <a>getCoreDeviceResponse_platform</a> - The operating system platform
--   that the core device runs.
--   
--   <a>$sel:architecture:GetCoreDeviceResponse'</a>,
--   <a>getCoreDeviceResponse_architecture</a> - The computer architecture
--   of the core device.
--   
--   <a>$sel:coreDeviceThingName:GetCoreDevice'</a>,
--   <a>getCoreDeviceResponse_coreDeviceThingName</a> - The name of the
--   core device. This is also the name of the IoT thing.
--   
--   <a>$sel:tags:GetCoreDeviceResponse'</a>,
--   <a>getCoreDeviceResponse_tags</a> - A list of key-value pairs that
--   contain metadata for the resource. For more information, see <a>Tag
--   your resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>.
--   
--   <a>$sel:coreVersion:GetCoreDeviceResponse'</a>,
--   <a>getCoreDeviceResponse_coreVersion</a> - The version of the IoT
--   Greengrass Core software that the core device runs. This version is
--   equivalent to the version of the Greengrass nucleus component that
--   runs on the core device. For more information, see the <a>Greengrass
--   nucleus component</a> in the <i>IoT Greengrass V2 Developer Guide</i>.
--   
--   <a>$sel:lastStatusUpdateTimestamp:GetCoreDeviceResponse'</a>,
--   <a>getCoreDeviceResponse_lastStatusUpdateTimestamp</a> - The time at
--   which the core device's status last updated, expressed in ISO 8601
--   format.
--   
--   <a>$sel:httpStatus:GetCoreDeviceResponse'</a>,
--   <a>getCoreDeviceResponse_httpStatus</a> - The response's http status
--   code.
newGetCoreDeviceResponse :: Int -> GetCoreDeviceResponse

-- | <i>See:</i> <a>newGetComponentVersionArtifact</a> smart constructor.
data GetComponentVersionArtifact
GetComponentVersionArtifact' :: Text -> Text -> GetComponentVersionArtifact

-- | Create a value of <a>GetComponentVersionArtifact</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:arn:GetComponentVersionArtifact'</a>,
--   <a>getComponentVersionArtifact_arn</a> - The <a>ARN</a> of the
--   component version. Specify the ARN of a public component version.
--   
--   <a>$sel:artifactName:GetComponentVersionArtifact'</a>,
--   <a>getComponentVersionArtifact_artifactName</a> - The name of the
--   artifact.
--   
--   You can use the <a>GetComponent</a> operation to download the
--   component recipe, which includes the URI of the artifact. The artifact
--   name is the section of the URI after the scheme. For example, in the
--   artifact URI <tt>greengrass:SomeArtifact.zip</tt>, the artifact name
--   is <tt>SomeArtifact.zip</tt>.
newGetComponentVersionArtifact :: Text -> Text -> GetComponentVersionArtifact

-- | <i>See:</i> <a>newGetComponentVersionArtifactResponse</a> smart
--   constructor.
data GetComponentVersionArtifactResponse
GetComponentVersionArtifactResponse' :: Int -> Text -> GetComponentVersionArtifactResponse

-- | Create a value of <a>GetComponentVersionArtifactResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:GetComponentVersionArtifactResponse'</a>,
--   <a>getComponentVersionArtifactResponse_httpStatus</a> - The response's
--   http status code.
--   
--   <a>$sel:preSignedUrl:GetComponentVersionArtifactResponse'</a>,
--   <a>getComponentVersionArtifactResponse_preSignedUrl</a> - The URL of
--   the artifact.
newGetComponentVersionArtifactResponse :: Int -> Text -> GetComponentVersionArtifactResponse

-- | <i>See:</i> <a>newCreateDeployment</a> smart constructor.
data CreateDeployment
CreateDeployment' :: Maybe (HashMap Text ComponentDeploymentSpecification) -> Maybe Text -> Maybe DeploymentPolicies -> Maybe DeploymentIoTJobConfiguration -> Maybe Text -> Maybe (HashMap Text Text) -> Text -> CreateDeployment

-- | Create a value of <a>CreateDeployment</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:components:CreateDeployment'</a>,
--   <a>createDeployment_components</a> - The components to deploy. This is
--   a dictionary, where each key is the name of a component, and each
--   key's value is the version and configuration to deploy for that
--   component.
--   
--   <a>$sel:clientToken:CreateDeployment'</a>,
--   <a>createDeployment_clientToken</a> - A unique, case-sensitive
--   identifier that you can provide to ensure that the request is
--   idempotent. Idempotency means that the request is successfully
--   processed only once, even if you send the request multiple times. When
--   a request succeeds, and you specify the same client token for
--   subsequent successful requests, the IoT Greengrass V2 service returns
--   the successful response that it caches from the previous request. IoT
--   Greengrass V2 caches successful responses for idempotent requests for
--   up to 8 hours.
--   
--   <a>$sel:deploymentPolicies:CreateDeployment'</a>,
--   <a>createDeployment_deploymentPolicies</a> - The deployment policies
--   for the deployment. These policies define how the deployment updates
--   components and handles failure.
--   
--   <a>$sel:iotJobConfiguration:CreateDeployment'</a>,
--   <a>createDeployment_iotJobConfiguration</a> - The job configuration
--   for the deployment configuration. The job configuration specifies the
--   rollout, timeout, and stop configurations for the deployment
--   configuration.
--   
--   <a>$sel:deploymentName:CreateDeployment'</a>,
--   <a>createDeployment_deploymentName</a> - The name of the deployment.
--   
--   <a>$sel:tags:CreateDeployment'</a>, <a>createDeployment_tags</a> - A
--   list of key-value pairs that contain metadata for the resource. For
--   more information, see <a>Tag your resources</a> in the <i>IoT
--   Greengrass V2 Developer Guide</i>.
--   
--   <a>$sel:targetArn:CreateDeployment'</a>,
--   <a>createDeployment_targetArn</a> - The <a>ARN</a> of the target IoT
--   thing or thing group.
newCreateDeployment :: Text -> CreateDeployment

-- | <i>See:</i> <a>newCreateDeploymentResponse</a> smart constructor.
data CreateDeploymentResponse
CreateDeploymentResponse' :: Maybe Text -> Maybe Text -> Maybe Text -> Int -> CreateDeploymentResponse

-- | Create a value of <a>CreateDeploymentResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:deploymentId:CreateDeploymentResponse'</a>,
--   <a>createDeploymentResponse_deploymentId</a> - The ID of the
--   deployment.
--   
--   <a>$sel:iotJobId:CreateDeploymentResponse'</a>,
--   <a>createDeploymentResponse_iotJobId</a> - The ID of the IoT job that
--   applies the deployment to target devices.
--   
--   <a>$sel:iotJobArn:CreateDeploymentResponse'</a>,
--   <a>createDeploymentResponse_iotJobArn</a> - The <a>ARN</a> of the IoT
--   job that applies the deployment to target devices.
--   
--   <a>$sel:httpStatus:CreateDeploymentResponse'</a>,
--   <a>createDeploymentResponse_httpStatus</a> - The response's http
--   status code.
newCreateDeploymentResponse :: Int -> CreateDeploymentResponse

-- | <i>See:</i> <a>newBatchAssociateClientDeviceWithCoreDevice</a> smart
--   constructor.
data BatchAssociateClientDeviceWithCoreDevice
BatchAssociateClientDeviceWithCoreDevice' :: Maybe (NonEmpty AssociateClientDeviceWithCoreDeviceEntry) -> Text -> BatchAssociateClientDeviceWithCoreDevice

-- | Create a value of <a>BatchAssociateClientDeviceWithCoreDevice</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:entries:BatchAssociateClientDeviceWithCoreDevice'</a>,
--   <a>batchAssociateClientDeviceWithCoreDevice_entries</a> - The list of
--   client devices to associate.
--   
--   
--   <a>$sel:coreDeviceThingName:BatchAssociateClientDeviceWithCoreDevice'</a>,
--   <a>batchAssociateClientDeviceWithCoreDevice_coreDeviceThingName</a> -
--   The name of the core device. This is also the name of the IoT thing.
newBatchAssociateClientDeviceWithCoreDevice :: Text -> BatchAssociateClientDeviceWithCoreDevice

-- | <i>See:</i> <a>newBatchAssociateClientDeviceWithCoreDeviceResponse</a>
--   smart constructor.
data BatchAssociateClientDeviceWithCoreDeviceResponse
BatchAssociateClientDeviceWithCoreDeviceResponse' :: Maybe (NonEmpty AssociateClientDeviceWithCoreDeviceErrorEntry) -> Int -> BatchAssociateClientDeviceWithCoreDeviceResponse

-- | Create a value of
--   <a>BatchAssociateClientDeviceWithCoreDeviceResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:errorEntries:BatchAssociateClientDeviceWithCoreDeviceResponse'</a>,
--   <a>batchAssociateClientDeviceWithCoreDeviceResponse_errorEntries</a> -
--   The list of any errors for the entries in the request. Each error
--   entry contains the name of the IoT thing that failed to associate.
--   
--   
--   <a>$sel:httpStatus:BatchAssociateClientDeviceWithCoreDeviceResponse'</a>,
--   <a>batchAssociateClientDeviceWithCoreDeviceResponse_httpStatus</a> -
--   The response's http status code.
newBatchAssociateClientDeviceWithCoreDeviceResponse :: Int -> BatchAssociateClientDeviceWithCoreDeviceResponse

-- | <i>See:</i> <a>newListInstalledComponents</a> smart constructor.
data ListInstalledComponents
ListInstalledComponents' :: Maybe Text -> Maybe Natural -> Text -> ListInstalledComponents

-- | Create a value of <a>ListInstalledComponents</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListInstalledComponents'</a>,
--   <a>listInstalledComponents_nextToken</a> - The token to be used for
--   the next set of paginated results.
--   
--   <a>$sel:maxResults:ListInstalledComponents'</a>,
--   <a>listInstalledComponents_maxResults</a> - The maximum number of
--   results to be returned per paginated request.
--   
--   <a>$sel:coreDeviceThingName:ListInstalledComponents'</a>,
--   <a>listInstalledComponents_coreDeviceThingName</a> - The name of the
--   core device. This is also the name of the IoT thing.
newListInstalledComponents :: Text -> ListInstalledComponents

-- | <i>See:</i> <a>newListInstalledComponentsResponse</a> smart
--   constructor.
data ListInstalledComponentsResponse
ListInstalledComponentsResponse' :: Maybe [InstalledComponent] -> Maybe Text -> Int -> ListInstalledComponentsResponse

-- | Create a value of <a>ListInstalledComponentsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:installedComponents:ListInstalledComponentsResponse'</a>,
--   <a>listInstalledComponentsResponse_installedComponents</a> - A list
--   that summarizes each component on the core device.
--   
--   <a>$sel:nextToken:ListInstalledComponents'</a>,
--   <a>listInstalledComponentsResponse_nextToken</a> - The token for the
--   next set of results, or null if there are no additional results.
--   
--   <a>$sel:httpStatus:ListInstalledComponentsResponse'</a>,
--   <a>listInstalledComponentsResponse_httpStatus</a> - The response's
--   http status code.
newListInstalledComponentsResponse :: Int -> ListInstalledComponentsResponse

-- | <i>See:</i> <a>newCancelDeployment</a> smart constructor.
data CancelDeployment
CancelDeployment' :: Text -> CancelDeployment

-- | Create a value of <a>CancelDeployment</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:deploymentId:CancelDeployment'</a>,
--   <a>cancelDeployment_deploymentId</a> - The ID of the deployment.
newCancelDeployment :: Text -> CancelDeployment

-- | <i>See:</i> <a>newCancelDeploymentResponse</a> smart constructor.
data CancelDeploymentResponse
CancelDeploymentResponse' :: Maybe Text -> Int -> CancelDeploymentResponse

-- | Create a value of <a>CancelDeploymentResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:message:CancelDeploymentResponse'</a>,
--   <a>cancelDeploymentResponse_message</a> - A message that communicates
--   if the cancel was successful.
--   
--   <a>$sel:httpStatus:CancelDeploymentResponse'</a>,
--   <a>cancelDeploymentResponse_httpStatus</a> - The response's http
--   status code.
newCancelDeploymentResponse :: Int -> CancelDeploymentResponse

-- | <i>See:</i> <a>newBatchDisassociateClientDeviceFromCoreDevice</a>
--   smart constructor.
data BatchDisassociateClientDeviceFromCoreDevice
BatchDisassociateClientDeviceFromCoreDevice' :: Maybe (NonEmpty DisassociateClientDeviceFromCoreDeviceEntry) -> Text -> BatchDisassociateClientDeviceFromCoreDevice

-- | Create a value of <a>BatchDisassociateClientDeviceFromCoreDevice</a>
--   with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:entries:BatchDisassociateClientDeviceFromCoreDevice'</a>,
--   <a>batchDisassociateClientDeviceFromCoreDevice_entries</a> - The list
--   of client devices to disassociate.
--   
--   
--   <a>$sel:coreDeviceThingName:BatchDisassociateClientDeviceFromCoreDevice'</a>,
--   <a>batchDisassociateClientDeviceFromCoreDevice_coreDeviceThingName</a>
--   - The name of the core device. This is also the name of the IoT thing.
newBatchDisassociateClientDeviceFromCoreDevice :: Text -> BatchDisassociateClientDeviceFromCoreDevice

-- | <i>See:</i>
--   <a>newBatchDisassociateClientDeviceFromCoreDeviceResponse</a> smart
--   constructor.
data BatchDisassociateClientDeviceFromCoreDeviceResponse
BatchDisassociateClientDeviceFromCoreDeviceResponse' :: Maybe (NonEmpty DisassociateClientDeviceFromCoreDeviceErrorEntry) -> Int -> BatchDisassociateClientDeviceFromCoreDeviceResponse

-- | Create a value of
--   <a>BatchDisassociateClientDeviceFromCoreDeviceResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:errorEntries:BatchDisassociateClientDeviceFromCoreDeviceResponse'</a>,
--   <a>batchDisassociateClientDeviceFromCoreDeviceResponse_errorEntries</a>
--   - The list of errors (if any) for the entries in the request. Each
--   error entry contains the name of the IoT thing that failed to
--   disassociate.
--   
--   
--   <a>$sel:httpStatus:BatchDisassociateClientDeviceFromCoreDeviceResponse'</a>,
--   <a>batchDisassociateClientDeviceFromCoreDeviceResponse_httpStatus</a>
--   - The response's http status code.
newBatchDisassociateClientDeviceFromCoreDeviceResponse :: Int -> BatchDisassociateClientDeviceFromCoreDeviceResponse

-- | <i>See:</i> <a>newListCoreDevices</a> smart constructor.
data ListCoreDevices
ListCoreDevices' :: Maybe CoreDeviceStatus -> Maybe Text -> Maybe Text -> Maybe Natural -> ListCoreDevices

-- | Create a value of <a>ListCoreDevices</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:ListCoreDevices'</a>, <a>listCoreDevices_status</a> -
--   The core device status by which to filter. If you specify this
--   parameter, the list includes only core devices that have this status.
--   Choose one of the following options:
--   
--   <ul>
--   <li><tt>HEALTHY</tt> – The IoT Greengrass Core software and all
--   components run on the core device without issue.</li>
--   <li><tt>UNHEALTHY</tt> – The IoT Greengrass Core software or a
--   component is in a failed state on the core device.</li>
--   </ul>
--   
--   <a>$sel:thingGroupArn:ListCoreDevices'</a>,
--   <a>listCoreDevices_thingGroupArn</a> - The <a>ARN</a> of the IoT thing
--   group by which to filter. If you specify this parameter, the list
--   includes only core devices that are members of this thing group.
--   
--   <a>$sel:nextToken:ListCoreDevices'</a>,
--   <a>listCoreDevices_nextToken</a> - The token to be used for the next
--   set of paginated results.
--   
--   <a>$sel:maxResults:ListCoreDevices'</a>,
--   <a>listCoreDevices_maxResults</a> - The maximum number of results to
--   be returned per paginated request.
newListCoreDevices :: ListCoreDevices

-- | <i>See:</i> <a>newListCoreDevicesResponse</a> smart constructor.
data ListCoreDevicesResponse
ListCoreDevicesResponse' :: Maybe Text -> Maybe [CoreDevice] -> Int -> ListCoreDevicesResponse

-- | Create a value of <a>ListCoreDevicesResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListCoreDevices'</a>,
--   <a>listCoreDevicesResponse_nextToken</a> - The token for the next set
--   of results, or null if there are no additional results.
--   
--   <a>$sel:coreDevices:ListCoreDevicesResponse'</a>,
--   <a>listCoreDevicesResponse_coreDevices</a> - A list that summarizes
--   each core device.
--   
--   <a>$sel:httpStatus:ListCoreDevicesResponse'</a>,
--   <a>listCoreDevicesResponse_httpStatus</a> - The response's http status
--   code.
newListCoreDevicesResponse :: Int -> ListCoreDevicesResponse

-- | <i>See:</i> <a>newResolveComponentCandidates</a> smart constructor.
data ResolveComponentCandidates
ResolveComponentCandidates' :: ComponentPlatform -> [ComponentCandidate] -> ResolveComponentCandidates

-- | Create a value of <a>ResolveComponentCandidates</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:platform:ResolveComponentCandidates'</a>,
--   <a>resolveComponentCandidates_platform</a> - The platform to use to
--   resolve compatible components.
--   
--   <a>$sel:componentCandidates:ResolveComponentCandidates'</a>,
--   <a>resolveComponentCandidates_componentCandidates</a> - The list of
--   components to resolve.
newResolveComponentCandidates :: ComponentPlatform -> ResolveComponentCandidates

-- | <i>See:</i> <a>newResolveComponentCandidatesResponse</a> smart
--   constructor.
data ResolveComponentCandidatesResponse
ResolveComponentCandidatesResponse' :: Maybe [ResolvedComponentVersion] -> Int -> ResolveComponentCandidatesResponse

-- | Create a value of <a>ResolveComponentCandidatesResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:resolvedComponentVersions:ResolveComponentCandidatesResponse'</a>,
--   <a>resolveComponentCandidatesResponse_resolvedComponentVersions</a> -
--   A list of components that meet the requirements that you specify in
--   the request. This list includes each component's recipe that you can
--   use to install the component.
--   
--   <a>$sel:httpStatus:ResolveComponentCandidatesResponse'</a>,
--   <a>resolveComponentCandidatesResponse_httpStatus</a> - The response's
--   http status code.
newResolveComponentCandidatesResponse :: Int -> ResolveComponentCandidatesResponse

-- | <i>See:</i> <a>newListEffectiveDeployments</a> smart constructor.
data ListEffectiveDeployments
ListEffectiveDeployments' :: Maybe Text -> Maybe Natural -> Text -> ListEffectiveDeployments

-- | Create a value of <a>ListEffectiveDeployments</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListEffectiveDeployments'</a>,
--   <a>listEffectiveDeployments_nextToken</a> - The token to be used for
--   the next set of paginated results.
--   
--   <a>$sel:maxResults:ListEffectiveDeployments'</a>,
--   <a>listEffectiveDeployments_maxResults</a> - The maximum number of
--   results to be returned per paginated request.
--   
--   <a>$sel:coreDeviceThingName:ListEffectiveDeployments'</a>,
--   <a>listEffectiveDeployments_coreDeviceThingName</a> - The name of the
--   core device. This is also the name of the IoT thing.
newListEffectiveDeployments :: Text -> ListEffectiveDeployments

-- | <i>See:</i> <a>newListEffectiveDeploymentsResponse</a> smart
--   constructor.
data ListEffectiveDeploymentsResponse
ListEffectiveDeploymentsResponse' :: Maybe Text -> Maybe [EffectiveDeployment] -> Int -> ListEffectiveDeploymentsResponse

-- | Create a value of <a>ListEffectiveDeploymentsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListEffectiveDeployments'</a>,
--   <a>listEffectiveDeploymentsResponse_nextToken</a> - The token for the
--   next set of results, or null if there are no additional results.
--   
--   <a>$sel:effectiveDeployments:ListEffectiveDeploymentsResponse'</a>,
--   <a>listEffectiveDeploymentsResponse_effectiveDeployments</a> - A list
--   that summarizes each deployment on the core device.
--   
--   <a>$sel:httpStatus:ListEffectiveDeploymentsResponse'</a>,
--   <a>listEffectiveDeploymentsResponse_httpStatus</a> - The response's
--   http status code.
newListEffectiveDeploymentsResponse :: Int -> ListEffectiveDeploymentsResponse

-- | <i>See:</i> <a>newListDeployments</a> smart constructor.
data ListDeployments
ListDeployments' :: Maybe Text -> Maybe Text -> Maybe DeploymentHistoryFilter -> Maybe Natural -> ListDeployments

-- | Create a value of <a>ListDeployments</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:targetArn:ListDeployments'</a>,
--   <a>listDeployments_targetArn</a> - The <a>ARN</a> of the target IoT
--   thing or thing group.
--   
--   <a>$sel:nextToken:ListDeployments'</a>,
--   <a>listDeployments_nextToken</a> - The token to be used for the next
--   set of paginated results.
--   
--   <a>$sel:historyFilter:ListDeployments'</a>,
--   <a>listDeployments_historyFilter</a> - The filter for the list of
--   deployments. Choose one of the following options:
--   
--   <ul>
--   <li><tt>ALL</tt> – The list includes all deployments.</li>
--   <li><tt>LATEST_ONLY</tt> – The list includes only the latest revision
--   of each deployment.</li>
--   </ul>
--   
--   Default: <tt>LATEST_ONLY</tt>
--   
--   <a>$sel:maxResults:ListDeployments'</a>,
--   <a>listDeployments_maxResults</a> - The maximum number of results to
--   be returned per paginated request.
newListDeployments :: ListDeployments

-- | <i>See:</i> <a>newListDeploymentsResponse</a> smart constructor.
data ListDeploymentsResponse
ListDeploymentsResponse' :: Maybe Text -> Maybe [Deployment] -> Int -> ListDeploymentsResponse

-- | Create a value of <a>ListDeploymentsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListDeployments'</a>,
--   <a>listDeploymentsResponse_nextToken</a> - The token for the next set
--   of results, or null if there are no additional results.
--   
--   <a>$sel:deployments:ListDeploymentsResponse'</a>,
--   <a>listDeploymentsResponse_deployments</a> - A list that summarizes
--   each deployment.
--   
--   <a>$sel:httpStatus:ListDeploymentsResponse'</a>,
--   <a>listDeploymentsResponse_httpStatus</a> - The response's http status
--   code.
newListDeploymentsResponse :: Int -> ListDeploymentsResponse

-- | <i>See:</i> <a>newTagResource</a> smart constructor.
data TagResource
TagResource' :: Text -> HashMap Text Text -> TagResource

-- | Create a value of <a>TagResource</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:TagResource'</a>, <a>tagResource_resourceArn</a> -
--   The <a>ARN</a> of the resource to tag.
--   
--   <a>$sel:tags:TagResource'</a>, <a>tagResource_tags</a> - A list of
--   key-value pairs that contain metadata for the resource. For more
--   information, see <a>Tag your resources</a> in the <i>IoT Greengrass V2
--   Developer Guide</i>.
newTagResource :: Text -> TagResource

-- | <i>See:</i> <a>newTagResourceResponse</a> smart constructor.
data TagResourceResponse
TagResourceResponse' :: Int -> TagResourceResponse

-- | Create a value of <a>TagResourceResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:TagResourceResponse'</a>,
--   <a>tagResourceResponse_httpStatus</a> - The response's http status
--   code.
newTagResourceResponse :: Int -> TagResourceResponse

-- | <i>See:</i> <a>newUntagResource</a> smart constructor.
data UntagResource
UntagResource' :: Text -> NonEmpty Text -> UntagResource

-- | Create a value of <a>UntagResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:UntagResource'</a>,
--   <a>untagResource_resourceArn</a> - The <a>ARN</a> of the resource to
--   untag.
--   
--   <a>$sel:tagKeys:UntagResource'</a>, <a>untagResource_tagKeys</a> - A
--   list of keys for tags to remove from the resource.
newUntagResource :: Text -> NonEmpty Text -> UntagResource

-- | <i>See:</i> <a>newUntagResourceResponse</a> smart constructor.
data UntagResourceResponse
UntagResourceResponse' :: Int -> UntagResourceResponse

-- | Create a value of <a>UntagResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UntagResourceResponse'</a>,
--   <a>untagResourceResponse_httpStatus</a> - The response's http status
--   code.
newUntagResourceResponse :: Int -> UntagResourceResponse

-- | <i>See:</i> <a>newListComponents</a> smart constructor.
data ListComponents
ListComponents' :: Maybe Text -> Maybe ComponentVisibilityScope -> Maybe Natural -> ListComponents

-- | Create a value of <a>ListComponents</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListComponents'</a>, <a>listComponents_nextToken</a>
--   - The token to be used for the next set of paginated results.
--   
--   <a>$sel:scope:ListComponents'</a>, <a>listComponents_scope</a> - The
--   scope of the components to list.
--   
--   Default: <tt>PRIVATE</tt>
--   
--   <a>$sel:maxResults:ListComponents'</a>,
--   <a>listComponents_maxResults</a> - The maximum number of results to be
--   returned per paginated request.
newListComponents :: ListComponents

-- | <i>See:</i> <a>newListComponentsResponse</a> smart constructor.
data ListComponentsResponse
ListComponentsResponse' :: Maybe [Component] -> Maybe Text -> Int -> ListComponentsResponse

-- | Create a value of <a>ListComponentsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:components:ListComponentsResponse'</a>,
--   <a>listComponentsResponse_components</a> - A list that summarizes each
--   component.
--   
--   <a>$sel:nextToken:ListComponents'</a>,
--   <a>listComponentsResponse_nextToken</a> - The token for the next set
--   of results, or null if there are no additional results.
--   
--   <a>$sel:httpStatus:ListComponentsResponse'</a>,
--   <a>listComponentsResponse_httpStatus</a> - The response's http status
--   code.
newListComponentsResponse :: Int -> ListComponentsResponse

-- | <i>See:</i> <a>newDeleteComponent</a> smart constructor.
data DeleteComponent
DeleteComponent' :: Text -> DeleteComponent

-- | Create a value of <a>DeleteComponent</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:arn:DeleteComponent'</a>, <a>deleteComponent_arn</a> - The
--   <a>ARN</a> of the component version.
newDeleteComponent :: Text -> DeleteComponent

-- | <i>See:</i> <a>newDeleteComponentResponse</a> smart constructor.
data DeleteComponentResponse
DeleteComponentResponse' :: DeleteComponentResponse

-- | Create a value of <a>DeleteComponentResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newDeleteComponentResponse :: DeleteComponentResponse

-- | <i>See:</i> <a>newCreateComponentVersion</a> smart constructor.
data CreateComponentVersion
CreateComponentVersion' :: Maybe Text -> Maybe Base64 -> Maybe LambdaFunctionRecipeSource -> Maybe (HashMap Text Text) -> CreateComponentVersion

-- | Create a value of <a>CreateComponentVersion</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:clientToken:CreateComponentVersion'</a>,
--   <a>createComponentVersion_clientToken</a> - A unique, case-sensitive
--   identifier that you can provide to ensure that the request is
--   idempotent. Idempotency means that the request is successfully
--   processed only once, even if you send the request multiple times. When
--   a request succeeds, and you specify the same client token for
--   subsequent successful requests, the IoT Greengrass V2 service returns
--   the successful response that it caches from the previous request. IoT
--   Greengrass V2 caches successful responses for idempotent requests for
--   up to 8 hours.
--   
--   <a>$sel:inlineRecipe:CreateComponentVersion'</a>,
--   <a>createComponentVersion_inlineRecipe</a> - The recipe to use to
--   create the component. The recipe defines the component's metadata,
--   parameters, dependencies, lifecycle, artifacts, and platform
--   compatibility.
--   
--   You must specify either <tt>inlineRecipe</tt> or
--   <tt>lambdaFunction</tt>.-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
--   
--   <a>$sel:lambdaFunction:CreateComponentVersion'</a>,
--   <a>createComponentVersion_lambdaFunction</a> - The parameters to
--   create a component from a Lambda function.
--   
--   You must specify either <tt>inlineRecipe</tt> or
--   <tt>lambdaFunction</tt>.
--   
--   <a>$sel:tags:CreateComponentVersion'</a>,
--   <a>createComponentVersion_tags</a> - A list of key-value pairs that
--   contain metadata for the resource. For more information, see <a>Tag
--   your resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>.
newCreateComponentVersion :: CreateComponentVersion

-- | <i>See:</i> <a>newCreateComponentVersionResponse</a> smart
--   constructor.
data CreateComponentVersionResponse
CreateComponentVersionResponse' :: Maybe Text -> Int -> Text -> Text -> POSIX -> CloudComponentStatus -> CreateComponentVersionResponse

-- | Create a value of <a>CreateComponentVersionResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:arn:CreateComponentVersionResponse'</a>,
--   <a>createComponentVersionResponse_arn</a> - The <a>ARN</a> of the
--   component version.
--   
--   <a>$sel:httpStatus:CreateComponentVersionResponse'</a>,
--   <a>createComponentVersionResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:componentName:CreateComponentVersionResponse'</a>,
--   <a>createComponentVersionResponse_componentName</a> - The name of the
--   component.
--   
--   <a>$sel:componentVersion:CreateComponentVersionResponse'</a>,
--   <a>createComponentVersionResponse_componentVersion</a> - The version
--   of the component.
--   
--   <a>$sel:creationTimestamp:CreateComponentVersionResponse'</a>,
--   <a>createComponentVersionResponse_creationTimestamp</a> - The time at
--   which the component was created, expressed in ISO 8601 format.
--   
--   <a>$sel:status:CreateComponentVersionResponse'</a>,
--   <a>createComponentVersionResponse_status</a> - The status of the
--   component version in IoT Greengrass V2. This status is different from
--   the status of the component on a core device.
newCreateComponentVersionResponse :: Int -> Text -> Text -> UTCTime -> CloudComponentStatus -> CreateComponentVersionResponse

-- | <i>See:</i> <a>newGetComponent</a> smart constructor.
data GetComponent
GetComponent' :: Maybe RecipeOutputFormat -> Text -> GetComponent

-- | Create a value of <a>GetComponent</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:recipeOutputFormat:GetComponent'</a>,
--   <a>getComponent_recipeOutputFormat</a> - The format of the recipe.
--   
--   <a>$sel:arn:GetComponent'</a>, <a>getComponent_arn</a> - The
--   <a>ARN</a> of the component version.
newGetComponent :: Text -> GetComponent

-- | <i>See:</i> <a>newGetComponentResponse</a> smart constructor.
data GetComponentResponse
GetComponentResponse' :: Maybe (HashMap Text Text) -> Int -> RecipeOutputFormat -> Base64 -> GetComponentResponse

-- | Create a value of <a>GetComponentResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tags:GetComponentResponse'</a>,
--   <a>getComponentResponse_tags</a> - A list of key-value pairs that
--   contain metadata for the resource. For more information, see <a>Tag
--   your resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>.
--   
--   <a>$sel:httpStatus:GetComponentResponse'</a>,
--   <a>getComponentResponse_httpStatus</a> - The response's http status
--   code.
--   
--   <a>$sel:recipeOutputFormat:GetComponent'</a>,
--   <a>getComponentResponse_recipeOutputFormat</a> - The format of the
--   recipe.
--   
--   <a>$sel:recipe:GetComponentResponse'</a>,
--   <a>getComponentResponse_recipe</a> - The recipe of the component
--   version.-- -- <i>Note:</i> This <tt>Lens</tt> automatically encodes
--   and decodes Base64 data. -- The underlying isomorphism will encode to
--   Base64 representation during -- serialisation, and decode from Base64
--   representation during deserialisation. -- This <tt>Lens</tt> accepts
--   and returns only raw unencoded data.
newGetComponentResponse :: Int -> RecipeOutputFormat -> ByteString -> GetComponentResponse

-- | <i>See:</i> <a>newListClientDevicesAssociatedWithCoreDevice</a> smart
--   constructor.
data ListClientDevicesAssociatedWithCoreDevice
ListClientDevicesAssociatedWithCoreDevice' :: Maybe Text -> Maybe Natural -> Text -> ListClientDevicesAssociatedWithCoreDevice

-- | Create a value of <a>ListClientDevicesAssociatedWithCoreDevice</a>
--   with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListClientDevicesAssociatedWithCoreDevice'</a>,
--   <a>listClientDevicesAssociatedWithCoreDevice_nextToken</a> - The token
--   to be used for the next set of paginated results.
--   
--   <a>$sel:maxResults:ListClientDevicesAssociatedWithCoreDevice'</a>,
--   <a>listClientDevicesAssociatedWithCoreDevice_maxResults</a> - The
--   maximum number of results to be returned per paginated request.
--   
--   
--   <a>$sel:coreDeviceThingName:ListClientDevicesAssociatedWithCoreDevice'</a>,
--   <a>listClientDevicesAssociatedWithCoreDevice_coreDeviceThingName</a> -
--   The name of the core device. This is also the name of the IoT thing.
newListClientDevicesAssociatedWithCoreDevice :: Text -> ListClientDevicesAssociatedWithCoreDevice

-- | <i>See:</i>
--   <a>newListClientDevicesAssociatedWithCoreDeviceResponse</a> smart
--   constructor.
data ListClientDevicesAssociatedWithCoreDeviceResponse
ListClientDevicesAssociatedWithCoreDeviceResponse' :: Maybe (NonEmpty AssociatedClientDevice) -> Maybe Text -> Int -> ListClientDevicesAssociatedWithCoreDeviceResponse

-- | Create a value of
--   <a>ListClientDevicesAssociatedWithCoreDeviceResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:associatedClientDevices:ListClientDevicesAssociatedWithCoreDeviceResponse'</a>,
--   <a>listClientDevicesAssociatedWithCoreDeviceResponse_associatedClientDevices</a>
--   - A list that describes the client devices that are associated with
--   the core device.
--   
--   <a>$sel:nextToken:ListClientDevicesAssociatedWithCoreDevice'</a>,
--   <a>listClientDevicesAssociatedWithCoreDeviceResponse_nextToken</a> -
--   The token for the next set of results, or null if there are no
--   additional results.
--   
--   
--   <a>$sel:httpStatus:ListClientDevicesAssociatedWithCoreDeviceResponse'</a>,
--   <a>listClientDevicesAssociatedWithCoreDeviceResponse_httpStatus</a> -
--   The response's http status code.
newListClientDevicesAssociatedWithCoreDeviceResponse :: Int -> ListClientDevicesAssociatedWithCoreDeviceResponse
newtype CloudComponentState
CloudComponentState' :: Text -> CloudComponentState
[fromCloudComponentState] :: CloudComponentState -> Text
pattern CloudComponentState_DEPLOYABLE :: CloudComponentState
pattern CloudComponentState_DEPRECATED :: CloudComponentState
pattern CloudComponentState_FAILED :: CloudComponentState
pattern CloudComponentState_INITIATED :: CloudComponentState
pattern CloudComponentState_REQUESTED :: CloudComponentState
newtype ComponentDependencyType
ComponentDependencyType' :: Text -> ComponentDependencyType
[fromComponentDependencyType] :: ComponentDependencyType -> Text
pattern ComponentDependencyType_HARD :: ComponentDependencyType
pattern ComponentDependencyType_SOFT :: ComponentDependencyType
newtype ComponentVisibilityScope
ComponentVisibilityScope' :: Text -> ComponentVisibilityScope
[fromComponentVisibilityScope] :: ComponentVisibilityScope -> Text
pattern ComponentVisibilityScope_PRIVATE :: ComponentVisibilityScope
pattern ComponentVisibilityScope_PUBLIC :: ComponentVisibilityScope
newtype CoreDeviceStatus
CoreDeviceStatus' :: Text -> CoreDeviceStatus
[fromCoreDeviceStatus] :: CoreDeviceStatus -> Text
pattern CoreDeviceStatus_HEALTHY :: CoreDeviceStatus
pattern CoreDeviceStatus_UNHEALTHY :: CoreDeviceStatus
newtype DeploymentComponentUpdatePolicyAction
DeploymentComponentUpdatePolicyAction' :: Text -> DeploymentComponentUpdatePolicyAction
[fromDeploymentComponentUpdatePolicyAction] :: DeploymentComponentUpdatePolicyAction -> Text
pattern DeploymentComponentUpdatePolicyAction_NOTIFY_COMPONENTS :: DeploymentComponentUpdatePolicyAction
pattern DeploymentComponentUpdatePolicyAction_SKIP_NOTIFY_COMPONENTS :: DeploymentComponentUpdatePolicyAction
newtype DeploymentFailureHandlingPolicy
DeploymentFailureHandlingPolicy' :: Text -> DeploymentFailureHandlingPolicy
[fromDeploymentFailureHandlingPolicy] :: DeploymentFailureHandlingPolicy -> Text
pattern DeploymentFailureHandlingPolicy_DO_NOTHING :: DeploymentFailureHandlingPolicy
pattern DeploymentFailureHandlingPolicy_ROLLBACK :: DeploymentFailureHandlingPolicy
newtype DeploymentHistoryFilter
DeploymentHistoryFilter' :: Text -> DeploymentHistoryFilter
[fromDeploymentHistoryFilter] :: DeploymentHistoryFilter -> Text
pattern DeploymentHistoryFilter_ALL :: DeploymentHistoryFilter
pattern DeploymentHistoryFilter_LATEST_ONLY :: DeploymentHistoryFilter
newtype DeploymentStatus
DeploymentStatus' :: Text -> DeploymentStatus
[fromDeploymentStatus] :: DeploymentStatus -> Text
pattern DeploymentStatus_ACTIVE :: DeploymentStatus
pattern DeploymentStatus_CANCELED :: DeploymentStatus
pattern DeploymentStatus_COMPLETED :: DeploymentStatus
pattern DeploymentStatus_FAILED :: DeploymentStatus
pattern DeploymentStatus_INACTIVE :: DeploymentStatus
newtype EffectiveDeploymentExecutionStatus
EffectiveDeploymentExecutionStatus' :: Text -> EffectiveDeploymentExecutionStatus
[fromEffectiveDeploymentExecutionStatus] :: EffectiveDeploymentExecutionStatus -> Text
pattern EffectiveDeploymentExecutionStatus_CANCELED :: EffectiveDeploymentExecutionStatus
pattern EffectiveDeploymentExecutionStatus_COMPLETED :: EffectiveDeploymentExecutionStatus
pattern EffectiveDeploymentExecutionStatus_FAILED :: EffectiveDeploymentExecutionStatus
pattern EffectiveDeploymentExecutionStatus_IN_PROGRESS :: EffectiveDeploymentExecutionStatus
pattern EffectiveDeploymentExecutionStatus_QUEUED :: EffectiveDeploymentExecutionStatus
pattern EffectiveDeploymentExecutionStatus_REJECTED :: EffectiveDeploymentExecutionStatus
pattern EffectiveDeploymentExecutionStatus_TIMED_OUT :: EffectiveDeploymentExecutionStatus
newtype InstalledComponentLifecycleState
InstalledComponentLifecycleState' :: Text -> InstalledComponentLifecycleState
[fromInstalledComponentLifecycleState] :: InstalledComponentLifecycleState -> Text
pattern InstalledComponentLifecycleState_BROKEN :: InstalledComponentLifecycleState
pattern InstalledComponentLifecycleState_ERRORED :: InstalledComponentLifecycleState
pattern InstalledComponentLifecycleState_FINISHED :: InstalledComponentLifecycleState
pattern InstalledComponentLifecycleState_INSTALLED :: InstalledComponentLifecycleState
pattern InstalledComponentLifecycleState_NEW :: InstalledComponentLifecycleState
pattern InstalledComponentLifecycleState_RUNNING :: InstalledComponentLifecycleState
pattern InstalledComponentLifecycleState_STARTING :: InstalledComponentLifecycleState
pattern InstalledComponentLifecycleState_STOPPING :: InstalledComponentLifecycleState
newtype IoTJobAbortAction
IoTJobAbortAction' :: Text -> IoTJobAbortAction
[fromIoTJobAbortAction] :: IoTJobAbortAction -> Text
pattern IoTJobAbortAction_CANCEL :: IoTJobAbortAction
newtype IoTJobExecutionFailureType
IoTJobExecutionFailureType' :: Text -> IoTJobExecutionFailureType
[fromIoTJobExecutionFailureType] :: IoTJobExecutionFailureType -> Text
pattern IoTJobExecutionFailureType_ALL :: IoTJobExecutionFailureType
pattern IoTJobExecutionFailureType_FAILED :: IoTJobExecutionFailureType
pattern IoTJobExecutionFailureType_REJECTED :: IoTJobExecutionFailureType
pattern IoTJobExecutionFailureType_TIMED_OUT :: IoTJobExecutionFailureType
newtype LambdaEventSourceType
LambdaEventSourceType' :: Text -> LambdaEventSourceType
[fromLambdaEventSourceType] :: LambdaEventSourceType -> Text
pattern LambdaEventSourceType_IOT_CORE :: LambdaEventSourceType
pattern LambdaEventSourceType_PUB_SUB :: LambdaEventSourceType
newtype LambdaFilesystemPermission
LambdaFilesystemPermission' :: Text -> LambdaFilesystemPermission
[fromLambdaFilesystemPermission] :: LambdaFilesystemPermission -> Text
pattern LambdaFilesystemPermission_Ro :: LambdaFilesystemPermission
pattern LambdaFilesystemPermission_Rw :: LambdaFilesystemPermission
newtype LambdaInputPayloadEncodingType
LambdaInputPayloadEncodingType' :: Text -> LambdaInputPayloadEncodingType
[fromLambdaInputPayloadEncodingType] :: LambdaInputPayloadEncodingType -> Text
pattern LambdaInputPayloadEncodingType_Binary :: LambdaInputPayloadEncodingType
pattern LambdaInputPayloadEncodingType_Json :: LambdaInputPayloadEncodingType
newtype LambdaIsolationMode
LambdaIsolationMode' :: Text -> LambdaIsolationMode
[fromLambdaIsolationMode] :: LambdaIsolationMode -> Text
pattern LambdaIsolationMode_GreengrassContainer :: LambdaIsolationMode
pattern LambdaIsolationMode_NoContainer :: LambdaIsolationMode
newtype RecipeOutputFormat
RecipeOutputFormat' :: Text -> RecipeOutputFormat
[fromRecipeOutputFormat] :: RecipeOutputFormat -> Text
pattern RecipeOutputFormat_JSON :: RecipeOutputFormat
pattern RecipeOutputFormat_YAML :: RecipeOutputFormat

-- | Contains a request to associate a client device with a core device.
--   The <a>BatchAssociateClientDeviceWithCoreDevice</a> operation consumes
--   a list of these requests.
--   
--   <i>See:</i> <a>newAssociateClientDeviceWithCoreDeviceEntry</a> smart
--   constructor.
data AssociateClientDeviceWithCoreDeviceEntry
AssociateClientDeviceWithCoreDeviceEntry' :: Text -> AssociateClientDeviceWithCoreDeviceEntry

-- | Create a value of <a>AssociateClientDeviceWithCoreDeviceEntry</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:thingName:AssociateClientDeviceWithCoreDeviceEntry'</a>,
--   <a>associateClientDeviceWithCoreDeviceEntry_thingName</a> - The name
--   of the IoT thing that represents the client device to associate.
newAssociateClientDeviceWithCoreDeviceEntry :: Text -> AssociateClientDeviceWithCoreDeviceEntry

-- | Contains an error that occurs from a request to associate a client
--   device with a core device. The
--   <a>BatchAssociateClientDeviceWithCoreDevice</a> operation returns a
--   list of these errors.
--   
--   <i>See:</i> <a>newAssociateClientDeviceWithCoreDeviceErrorEntry</a>
--   smart constructor.
data AssociateClientDeviceWithCoreDeviceErrorEntry
AssociateClientDeviceWithCoreDeviceErrorEntry' :: Maybe Text -> Maybe Text -> Maybe Text -> AssociateClientDeviceWithCoreDeviceErrorEntry

-- | Create a value of <a>AssociateClientDeviceWithCoreDeviceErrorEntry</a>
--   with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:code:AssociateClientDeviceWithCoreDeviceErrorEntry'</a>,
--   <a>associateClientDeviceWithCoreDeviceErrorEntry_code</a> - The error
--   code for the request.
--   
--   <a>$sel:message:AssociateClientDeviceWithCoreDeviceErrorEntry'</a>,
--   <a>associateClientDeviceWithCoreDeviceErrorEntry_message</a> - A
--   message that provides additional information about the error.
--   
--   <a>$sel:thingName:AssociateClientDeviceWithCoreDeviceErrorEntry'</a>,
--   <a>associateClientDeviceWithCoreDeviceErrorEntry_thingName</a> - The
--   name of the IoT thing whose associate request failed.
newAssociateClientDeviceWithCoreDeviceErrorEntry :: AssociateClientDeviceWithCoreDeviceErrorEntry

-- | Contains information about a client device that is associated to a
--   core device for cloud discovery.
--   
--   <i>See:</i> <a>newAssociatedClientDevice</a> smart constructor.
data AssociatedClientDevice
AssociatedClientDevice' :: Maybe POSIX -> Maybe Text -> AssociatedClientDevice

-- | Create a value of <a>AssociatedClientDevice</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:associationTimestamp:AssociatedClientDevice'</a>,
--   <a>associatedClientDevice_associationTimestamp</a> - The time that the
--   client device was associated, expressed in ISO 8601 format.
--   
--   <a>$sel:thingName:AssociatedClientDevice'</a>,
--   <a>associatedClientDevice_thingName</a> - The name of the IoT thing
--   that represents the associated client device.
newAssociatedClientDevice :: AssociatedClientDevice

-- | Contains the status of a component in the IoT Greengrass service.
--   
--   <i>See:</i> <a>newCloudComponentStatus</a> smart constructor.
data CloudComponentStatus
CloudComponentStatus' :: Maybe CloudComponentState -> Maybe Text -> Maybe (HashMap Text Text) -> CloudComponentStatus

-- | Create a value of <a>CloudComponentStatus</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:componentState:CloudComponentStatus'</a>,
--   <a>cloudComponentStatus_componentState</a> - The state of the
--   component.
--   
--   <a>$sel:message:CloudComponentStatus'</a>,
--   <a>cloudComponentStatus_message</a> - A message that communicates
--   details, such as errors, about the status of the component.
--   
--   <a>$sel:errors:CloudComponentStatus'</a>,
--   <a>cloudComponentStatus_errors</a> - A dictionary of errors that
--   communicate why the component is in an error state. For example, if
--   IoT Greengrass can't access an artifact for the component, then
--   <tt>errors</tt> contains the artifact's URI as a key, and the error
--   message as the value for that key.
newCloudComponentStatus :: CloudComponentStatus

-- | Contains information about a component.
--   
--   <i>See:</i> <a>newComponent</a> smart constructor.
data Component
Component' :: Maybe Text -> Maybe Text -> Maybe ComponentLatestVersion -> Component

-- | Create a value of <a>Component</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:arn:Component'</a>, <a>component_arn</a> - The <a>ARN</a> of
--   the component version.
--   
--   <a>$sel:componentName:Component'</a>, <a>component_componentName</a> -
--   The name of the component.
--   
--   <a>$sel:latestVersion:Component'</a>, <a>component_latestVersion</a> -
--   The latest version of the component and its details.
newComponent :: Component

-- | Contains information about a component that is a candidate to deploy
--   to a Greengrass core device.
--   
--   <i>See:</i> <a>newComponentCandidate</a> smart constructor.
data ComponentCandidate
ComponentCandidate' :: Maybe Text -> Maybe (HashMap Text Text) -> Maybe Text -> ComponentCandidate

-- | Create a value of <a>ComponentCandidate</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:componentVersion:ComponentCandidate'</a>,
--   <a>componentCandidate_componentVersion</a> - The version of the
--   component.
--   
--   <a>$sel:versionRequirements:ComponentCandidate'</a>,
--   <a>componentCandidate_versionRequirements</a> - The version
--   requirements for the component's dependencies. Greengrass core devices
--   get the version requirements from component recipes.
--   
--   IoT Greengrass V2 uses semantic version constraints. For more
--   information, see <a>Semantic Versioning</a>.
--   
--   <a>$sel:componentName:ComponentCandidate'</a>,
--   <a>componentCandidate_componentName</a> - The name of the component.
newComponentCandidate :: ComponentCandidate

-- | Contains information about a deployment's update to a component's
--   configuration on Greengrass core devices. For more information, see
--   <a>Update component configurations</a> in the <i>IoT Greengrass V2
--   Developer Guide</i>.
--   
--   <i>See:</i> <a>newComponentConfigurationUpdate</a> smart constructor.
data ComponentConfigurationUpdate
ComponentConfigurationUpdate' :: Maybe [Text] -> Maybe Text -> ComponentConfigurationUpdate

-- | Create a value of <a>ComponentConfigurationUpdate</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:reset:ComponentConfigurationUpdate'</a>,
--   <a>componentConfigurationUpdate_reset</a> - The list of configuration
--   nodes to reset to default values on target devices. Use JSON pointers
--   to specify each node to reset. JSON pointers start with a forward
--   slash (<tt>/</tt>) and use forward slashes to separate the key for
--   each level in the object. For more information, see the <a>JSON
--   pointer specification</a> and <a>Reset configuration updates</a> in
--   the <i>IoT Greengrass V2 Developer Guide</i>.
--   
--   <a>$sel:merge:ComponentConfigurationUpdate'</a>,
--   <a>componentConfigurationUpdate_merge</a> - A serialized JSON string
--   that contains the configuration object to merge to target devices. The
--   core device merges this configuration with the component's existing
--   configuration. If this is the first time a component deploys on a
--   device, the core device merges this configuration with the component's
--   default configuration. This means that the core device keeps it's
--   existing configuration for keys and values that you don't specify in
--   this object. For more information, see <a>Merge configuration
--   updates</a> in the <i>IoT Greengrass V2 Developer Guide</i>.
newComponentConfigurationUpdate :: ComponentConfigurationUpdate

-- | Contains information about a component dependency for a Lambda
--   function component.
--   
--   <i>See:</i> <a>newComponentDependencyRequirement</a> smart
--   constructor.
data ComponentDependencyRequirement
ComponentDependencyRequirement' :: Maybe ComponentDependencyType -> Maybe Text -> ComponentDependencyRequirement

-- | Create a value of <a>ComponentDependencyRequirement</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dependencyType:ComponentDependencyRequirement'</a>,
--   <a>componentDependencyRequirement_dependencyType</a> - The type of
--   this dependency. Choose from the following options:
--   
--   <ul>
--   <li><tt>SOFT</tt> – The component doesn't restart if the dependency
--   changes state.</li>
--   <li><tt>HARD</tt> – The component restarts if the dependency changes
--   state.</li>
--   </ul>
--   
--   Default: <tt>HARD</tt>
--   
--   <a>$sel:versionRequirement:ComponentDependencyRequirement'</a>,
--   <a>componentDependencyRequirement_versionRequirement</a> - The
--   component version requirement for the component dependency.
--   
--   IoT Greengrass V2 uses semantic version constraints. For more
--   information, see <a>Semantic Versioning</a>.
newComponentDependencyRequirement :: ComponentDependencyRequirement

-- | Contains information about a component to deploy.
--   
--   <i>See:</i> <a>newComponentDeploymentSpecification</a> smart
--   constructor.
data ComponentDeploymentSpecification
ComponentDeploymentSpecification' :: Maybe Text -> Maybe ComponentRunWith -> Maybe ComponentConfigurationUpdate -> ComponentDeploymentSpecification

-- | Create a value of <a>ComponentDeploymentSpecification</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:componentVersion:ComponentDeploymentSpecification'</a>,
--   <a>componentDeploymentSpecification_componentVersion</a> - The version
--   of the component.
--   
--   <a>$sel:runWith:ComponentDeploymentSpecification'</a>,
--   <a>componentDeploymentSpecification_runWith</a> - The system user and
--   group that the IoT Greengrass Core software uses to run component
--   processes on the core device. If you omit this parameter, the IoT
--   Greengrass Core software uses the system user and group that you
--   configure for the core device. For more information, see <a>Configure
--   the user and group that run components</a> in the <i>IoT Greengrass V2
--   Developer Guide</i>.
--   
--   <a>$sel:configurationUpdate:ComponentDeploymentSpecification'</a>,
--   <a>componentDeploymentSpecification_configurationUpdate</a> - The
--   configuration updates to deploy for the component. You can define
--   <i>reset</i> updates and <i>merge</i> updates. A reset updates the
--   keys that you specify to the default configuration for the component.
--   A merge updates the core device's component configuration with the
--   keys and values that you specify. The IoT Greengrass Core software
--   applies reset updates before it applies merge updates. For more
--   information, see <a>Update component configurations</a> in the <i>IoT
--   Greengrass V2 Developer Guide</i>.
newComponentDeploymentSpecification :: ComponentDeploymentSpecification

-- | Contains information about the latest version of a component.
--   
--   <i>See:</i> <a>newComponentLatestVersion</a> smart constructor.
data ComponentLatestVersion
ComponentLatestVersion' :: Maybe [ComponentPlatform] -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe Text -> ComponentLatestVersion

-- | Create a value of <a>ComponentLatestVersion</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:platforms:ComponentLatestVersion'</a>,
--   <a>componentLatestVersion_platforms</a> - The platforms that the
--   component version supports.
--   
--   <a>$sel:arn:ComponentLatestVersion'</a>,
--   <a>componentLatestVersion_arn</a> - The <a>ARN</a> of the component
--   version.
--   
--   <a>$sel:componentVersion:ComponentLatestVersion'</a>,
--   <a>componentLatestVersion_componentVersion</a> - The version of the
--   component.
--   
--   <a>$sel:creationTimestamp:ComponentLatestVersion'</a>,
--   <a>componentLatestVersion_creationTimestamp</a> - The time at which
--   the component was created, expressed in ISO 8601 format.
--   
--   <a>$sel:publisher:ComponentLatestVersion'</a>,
--   <a>componentLatestVersion_publisher</a> - The publisher of the
--   component version.
--   
--   <a>$sel:description:ComponentLatestVersion'</a>,
--   <a>componentLatestVersion_description</a> - The description of the
--   component version.
newComponentLatestVersion :: ComponentLatestVersion

-- | Contains information about a platform that a component supports.
--   
--   <i>See:</i> <a>newComponentPlatform</a> smart constructor.
data ComponentPlatform
ComponentPlatform' :: Maybe Text -> Maybe (HashMap Text Text) -> ComponentPlatform

-- | Create a value of <a>ComponentPlatform</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:name:ComponentPlatform'</a>, <a>componentPlatform_name</a> -
--   The friendly name of the platform. This name helps you identify the
--   platform.
--   
--   If you omit this parameter, IoT Greengrass creates a friendly name
--   from the <tt>os</tt> and <tt>architecture</tt> of the platform.
--   
--   <a>$sel:attributes:ComponentPlatform'</a>,
--   <a>componentPlatform_attributes</a> - A dictionary of attributes for
--   the platform. The IoT Greengrass Core software defines the <tt>os</tt>
--   and <tt>platform</tt> by default. You can specify additional platform
--   attributes for a core device when you deploy the Greengrass nucleus
--   component. For more information, see the <a>Greengrass nucleus
--   component</a> in the <i>IoT Greengrass V2 Developer Guide</i>.
newComponentPlatform :: ComponentPlatform

-- | Contains information system user and group that the IoT Greengrass
--   Core software uses to run component processes on the core device. For
--   more information, see <a>Configure the user and group that run
--   components</a> in the <i>IoT Greengrass V2 Developer Guide</i>.
--   
--   <i>See:</i> <a>newComponentRunWith</a> smart constructor.
data ComponentRunWith
ComponentRunWith' :: Maybe Text -> Maybe SystemResourceLimits -> ComponentRunWith

-- | Create a value of <a>ComponentRunWith</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:posixUser:ComponentRunWith'</a>,
--   <a>componentRunWith_posixUser</a> - The POSIX system user and
--   (optional) group to use to run this component. Specify the user and
--   group separated by a colon (<tt>:</tt>) in the following format:
--   <tt>user:group</tt>. The group is optional. If you don't specify a
--   group, the IoT Greengrass Core software uses the primary user for the
--   group.
--   
--   If you omit this parameter, the IoT Greengrass Core software uses the
--   default system user and group that you configure on the Greengrass
--   nucleus component. For more information, see <a>Configure the user and
--   group that run components</a>.
--   
--   <a>$sel:systemResourceLimits:ComponentRunWith'</a>,
--   <a>componentRunWith_systemResourceLimits</a> - The system resource
--   limits to apply to this component's process on the core device.
--   
--   If you omit this parameter, the IoT Greengrass Core software uses the
--   default system resource limits that you configure on the Greengrass
--   nucleus component. For more information, see <a>Configure system
--   resource limits for components</a>.
newComponentRunWith :: ComponentRunWith

-- | Contains information about a component version in a list.
--   
--   <i>See:</i> <a>newComponentVersionListItem</a> smart constructor.
data ComponentVersionListItem
ComponentVersionListItem' :: Maybe Text -> Maybe Text -> Maybe Text -> ComponentVersionListItem

-- | Create a value of <a>ComponentVersionListItem</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:arn:ComponentVersionListItem'</a>,
--   <a>componentVersionListItem_arn</a> - The <a>ARN</a> of the component
--   version.
--   
--   <a>$sel:componentVersion:ComponentVersionListItem'</a>,
--   <a>componentVersionListItem_componentVersion</a> - The version of the
--   component.
--   
--   <a>$sel:componentName:ComponentVersionListItem'</a>,
--   <a>componentVersionListItem_componentName</a> - The name of the
--   component.
newComponentVersionListItem :: ComponentVersionListItem

-- | Contains information about a Greengrass core device, which is an IoT
--   thing that runs the IoT Greengrass Core software.
--   
--   <i>See:</i> <a>newCoreDevice</a> smart constructor.
data CoreDevice
CoreDevice' :: Maybe CoreDeviceStatus -> Maybe Text -> Maybe POSIX -> CoreDevice

-- | Create a value of <a>CoreDevice</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:CoreDevice'</a>, <a>coreDevice_status</a> - The status
--   of the core device. Core devices can have the following statuses:
--   
--   <ul>
--   <li><tt>HEALTHY</tt> – The IoT Greengrass Core software and all
--   components run on the core device without issue.</li>
--   <li><tt>UNHEALTHY</tt> – The IoT Greengrass Core software or a
--   component is in a failed state on the core device.</li>
--   </ul>
--   
--   <a>$sel:coreDeviceThingName:CoreDevice'</a>,
--   <a>coreDevice_coreDeviceThingName</a> - The name of the core device.
--   This is also the name of the IoT thing.
--   
--   <a>$sel:lastStatusUpdateTimestamp:CoreDevice'</a>,
--   <a>coreDevice_lastStatusUpdateTimestamp</a> - The time at which the
--   core device's status last updated, expressed in ISO 8601 format.
newCoreDevice :: CoreDevice

-- | Contains information about a deployment.
--   
--   <i>See:</i> <a>newDeployment</a> smart constructor.
data Deployment
Deployment' :: Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe DeploymentStatus -> Maybe Bool -> Maybe Text -> Maybe Text -> Deployment

-- | Create a value of <a>Deployment</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:targetArn:Deployment'</a>, <a>deployment_targetArn</a> - The
--   <a>ARN</a> of the target IoT thing or thing group.
--   
--   <a>$sel:deploymentId:Deployment'</a>, <a>deployment_deploymentId</a> -
--   The ID of the deployment.
--   
--   <a>$sel:creationTimestamp:Deployment'</a>,
--   <a>deployment_creationTimestamp</a> - The time at which the deployment
--   was created, expressed in ISO 8601 format.
--   
--   <a>$sel:deploymentStatus:Deployment'</a>,
--   <a>deployment_deploymentStatus</a> - The status of the deployment.
--   
--   <a>$sel:isLatestForTarget:Deployment'</a>,
--   <a>deployment_isLatestForTarget</a> - Whether or not the deployment is
--   the latest revision for its target.
--   
--   <a>$sel:revisionId:Deployment'</a>, <a>deployment_revisionId</a> - The
--   revision number of the deployment.
--   
--   <a>$sel:deploymentName:Deployment'</a>,
--   <a>deployment_deploymentName</a> - The name of the deployment.
newDeployment :: Deployment

-- | Contains information about a deployment's policy that defines when
--   components are safe to update.
--   
--   Each component on a device can report whether or not it's ready to
--   update. After a component and its dependencies are ready, they can
--   apply the update in the deployment. You can configure whether or not
--   the deployment notifies components of an update and waits for a
--   response. You specify the amount of time each component has to respond
--   to the update notification.
--   
--   <i>See:</i> <a>newDeploymentComponentUpdatePolicy</a> smart
--   constructor.
data DeploymentComponentUpdatePolicy
DeploymentComponentUpdatePolicy' :: Maybe DeploymentComponentUpdatePolicyAction -> Maybe Int -> DeploymentComponentUpdatePolicy

-- | Create a value of <a>DeploymentComponentUpdatePolicy</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:action:DeploymentComponentUpdatePolicy'</a>,
--   <a>deploymentComponentUpdatePolicy_action</a> - Whether or not to
--   notify components and wait for components to become safe to update.
--   Choose from the following options:
--   
--   <ul>
--   <li><tt>NOTIFY_COMPONENTS</tt> – The deployment notifies each
--   component before it stops and updates that component. Components can
--   use the <a>SubscribeToComponentUpdates</a> IPC operation to receive
--   these notifications. Then, components can respond with the
--   <a>DeferComponentUpdate</a> IPC operation. For more information, see
--   <a>Create deployments</a> in the <i>IoT Greengrass V2 Developer
--   Guide</i>.</li>
--   <li><tt>SKIP_NOTIFY_COMPONENTS</tt> – The deployment doesn't notify
--   components or wait for them to be safe to update.</li>
--   </ul>
--   
--   Default: <tt>NOTIFY_COMPONENTS</tt>
--   
--   <a>$sel:timeoutInSeconds:DeploymentComponentUpdatePolicy'</a>,
--   <a>deploymentComponentUpdatePolicy_timeoutInSeconds</a> - The amount
--   of time in seconds that each component on a device has to report that
--   it's safe to update. If the component waits for longer than this
--   timeout, then the deployment proceeds on the device.
--   
--   Default: <tt>60</tt>
newDeploymentComponentUpdatePolicy :: DeploymentComponentUpdatePolicy

-- | Contains information about how long a component on a core device can
--   validate its configuration updates before it times out. Components can
--   use the <a>SubscribeToValidateConfigurationUpdates</a> IPC operation
--   to receive notifications when a deployment specifies a configuration
--   update. Then, components can respond with the
--   <a>SendConfigurationValidityReport</a> IPC operation. For more
--   information, see <a>Create deployments</a> in the <i>IoT Greengrass V2
--   Developer Guide</i>.
--   
--   <i>See:</i> <a>newDeploymentConfigurationValidationPolicy</a> smart
--   constructor.
data DeploymentConfigurationValidationPolicy
DeploymentConfigurationValidationPolicy' :: Maybe Int -> DeploymentConfigurationValidationPolicy

-- | Create a value of <a>DeploymentConfigurationValidationPolicy</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:timeoutInSeconds:DeploymentConfigurationValidationPolicy'</a>,
--   <a>deploymentConfigurationValidationPolicy_timeoutInSeconds</a> - The
--   amount of time in seconds that a component can validate its
--   configuration updates. If the validation time exceeds this timeout,
--   then the deployment proceeds for the device.
--   
--   Default: <tt>30</tt>
newDeploymentConfigurationValidationPolicy :: DeploymentConfigurationValidationPolicy

-- | Contains information about an IoT job configuration.
--   
--   <i>See:</i> <a>newDeploymentIoTJobConfiguration</a> smart constructor.
data DeploymentIoTJobConfiguration
DeploymentIoTJobConfiguration' :: Maybe IoTJobExecutionsRolloutConfig -> Maybe IoTJobAbortConfig -> Maybe IoTJobTimeoutConfig -> DeploymentIoTJobConfiguration

-- | Create a value of <a>DeploymentIoTJobConfiguration</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:jobExecutionsRolloutConfig:DeploymentIoTJobConfiguration'</a>,
--   <a>deploymentIoTJobConfiguration_jobExecutionsRolloutConfig</a> - The
--   rollout configuration for the job. This configuration defines the rate
--   at which the job rolls out to the fleet of target devices.
--   
--   <a>$sel:abortConfig:DeploymentIoTJobConfiguration'</a>,
--   <a>deploymentIoTJobConfiguration_abortConfig</a> - The stop
--   configuration for the job. This configuration defines when and how to
--   stop a job rollout.
--   
--   <a>$sel:timeoutConfig:DeploymentIoTJobConfiguration'</a>,
--   <a>deploymentIoTJobConfiguration_timeoutConfig</a> - The timeout
--   configuration for the job. This configuration defines the amount of
--   time each device has to complete the job.
newDeploymentIoTJobConfiguration :: DeploymentIoTJobConfiguration

-- | Contains information about policies that define how a deployment
--   updates components and handles failure.
--   
--   <i>See:</i> <a>newDeploymentPolicies</a> smart constructor.
data DeploymentPolicies
DeploymentPolicies' :: Maybe DeploymentFailureHandlingPolicy -> Maybe DeploymentConfigurationValidationPolicy -> Maybe DeploymentComponentUpdatePolicy -> DeploymentPolicies

-- | Create a value of <a>DeploymentPolicies</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failureHandlingPolicy:DeploymentPolicies'</a>,
--   <a>deploymentPolicies_failureHandlingPolicy</a> - The failure handling
--   policy for the configuration deployment. This policy defines what to
--   do if the deployment fails.
--   
--   Default: <tt>ROLLBACK</tt>
--   
--   <a>$sel:configurationValidationPolicy:DeploymentPolicies'</a>,
--   <a>deploymentPolicies_configurationValidationPolicy</a> - The
--   configuration validation policy for the configuration deployment. This
--   policy defines how long each component has to validate its configure
--   updates.
--   
--   <a>$sel:componentUpdatePolicy:DeploymentPolicies'</a>,
--   <a>deploymentPolicies_componentUpdatePolicy</a> - The component update
--   policy for the configuration deployment. This policy defines when it's
--   safe to deploy the configuration to devices.
newDeploymentPolicies :: DeploymentPolicies

-- | Contains a request to disassociate a client device from a core device.
--   The <a>BatchDisassociateClientDeviceWithCoreDevice</a> operation
--   consumes a list of these requests.
--   
--   <i>See:</i> <a>newDisassociateClientDeviceFromCoreDeviceEntry</a>
--   smart constructor.
data DisassociateClientDeviceFromCoreDeviceEntry
DisassociateClientDeviceFromCoreDeviceEntry' :: Text -> DisassociateClientDeviceFromCoreDeviceEntry

-- | Create a value of <a>DisassociateClientDeviceFromCoreDeviceEntry</a>
--   with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:thingName:DisassociateClientDeviceFromCoreDeviceEntry'</a>,
--   <a>disassociateClientDeviceFromCoreDeviceEntry_thingName</a> - The
--   name of the IoT thing that represents the client device to
--   disassociate.
newDisassociateClientDeviceFromCoreDeviceEntry :: Text -> DisassociateClientDeviceFromCoreDeviceEntry

-- | Contains an error that occurs from a request to disassociate a client
--   device from a core device. The
--   <a>BatchDisassociateClientDeviceWithCoreDevice</a> operation returns a
--   list of these errors.
--   
--   <i>See:</i> <a>newDisassociateClientDeviceFromCoreDeviceErrorEntry</a>
--   smart constructor.
data DisassociateClientDeviceFromCoreDeviceErrorEntry
DisassociateClientDeviceFromCoreDeviceErrorEntry' :: Maybe Text -> Maybe Text -> Maybe Text -> DisassociateClientDeviceFromCoreDeviceErrorEntry

-- | Create a value of
--   <a>DisassociateClientDeviceFromCoreDeviceErrorEntry</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:code:DisassociateClientDeviceFromCoreDeviceErrorEntry'</a>,
--   <a>disassociateClientDeviceFromCoreDeviceErrorEntry_code</a> - The
--   error code for the request.
--   
--   <a>$sel:message:DisassociateClientDeviceFromCoreDeviceErrorEntry'</a>,
--   <a>disassociateClientDeviceFromCoreDeviceErrorEntry_message</a> - A
--   message that provides additional information about the error.
--   
--   
--   <a>$sel:thingName:DisassociateClientDeviceFromCoreDeviceErrorEntry'</a>,
--   <a>disassociateClientDeviceFromCoreDeviceErrorEntry_thingName</a> -
--   The name of the IoT thing whose disassociate request failed.
newDisassociateClientDeviceFromCoreDeviceErrorEntry :: DisassociateClientDeviceFromCoreDeviceErrorEntry

-- | Contains information about a deployment job that IoT Greengrass sends
--   to a Greengrass core device.
--   
--   <i>See:</i> <a>newEffectiveDeployment</a> smart constructor.
data EffectiveDeployment
EffectiveDeployment' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Text -> Text -> Text -> EffectiveDeploymentExecutionStatus -> POSIX -> POSIX -> EffectiveDeployment

-- | Create a value of <a>EffectiveDeployment</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:iotJobId:EffectiveDeployment'</a>,
--   <a>effectiveDeployment_iotJobId</a> - The ID of the IoT job that
--   applies the deployment to target devices.
--   
--   <a>$sel:iotJobArn:EffectiveDeployment'</a>,
--   <a>effectiveDeployment_iotJobArn</a> - The <a>ARN</a> of the IoT job
--   that applies the deployment to target devices.
--   
--   <a>$sel:reason:EffectiveDeployment'</a>,
--   <a>effectiveDeployment_reason</a> - The reason code for the update, if
--   the job was updated.
--   
--   <a>$sel:description:EffectiveDeployment'</a>,
--   <a>effectiveDeployment_description</a> - The description of the
--   deployment job.
--   
--   <a>$sel:deploymentId:EffectiveDeployment'</a>,
--   <a>effectiveDeployment_deploymentId</a> - The ID of the deployment.
--   
--   <a>$sel:deploymentName:EffectiveDeployment'</a>,
--   <a>effectiveDeployment_deploymentName</a> - The name of the
--   deployment.
--   
--   <a>$sel:targetArn:EffectiveDeployment'</a>,
--   <a>effectiveDeployment_targetArn</a> - The <a>ARN</a> of the target
--   IoT thing or thing group.
--   
--   <a>$sel:coreDeviceExecutionStatus:EffectiveDeployment'</a>,
--   <a>effectiveDeployment_coreDeviceExecutionStatus</a> - The status of
--   the deployment job on the Greengrass core device.
--   
--   <a>$sel:creationTimestamp:EffectiveDeployment'</a>,
--   <a>effectiveDeployment_creationTimestamp</a> - The time at which the
--   deployment was created, expressed in ISO 8601 format.
--   
--   <a>$sel:modifiedTimestamp:EffectiveDeployment'</a>,
--   <a>effectiveDeployment_modifiedTimestamp</a> - The time at which the
--   deployment job was last modified, expressed in ISO 8601 format.
newEffectiveDeployment :: Text -> Text -> Text -> EffectiveDeploymentExecutionStatus -> UTCTime -> UTCTime -> EffectiveDeployment

-- | Contains information about a component on a Greengrass core device.
--   
--   <i>See:</i> <a>newInstalledComponent</a> smart constructor.
data InstalledComponent
InstalledComponent' :: Maybe Bool -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe InstalledComponentLifecycleState -> InstalledComponent

-- | Create a value of <a>InstalledComponent</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:isRoot:InstalledComponent'</a>,
--   <a>installedComponent_isRoot</a> - Whether or not the component is a
--   root component.
--   
--   <a>$sel:componentVersion:InstalledComponent'</a>,
--   <a>installedComponent_componentVersion</a> - The version of the
--   component.
--   
--   <a>$sel:componentName:InstalledComponent'</a>,
--   <a>installedComponent_componentName</a> - The name of the component.
--   
--   <a>$sel:lifecycleStateDetails:InstalledComponent'</a>,
--   <a>installedComponent_lifecycleStateDetails</a> - The details about
--   the lifecycle state of the component.
--   
--   <a>$sel:lifecycleState:InstalledComponent'</a>,
--   <a>installedComponent_lifecycleState</a> - The lifecycle state of the
--   component.
newInstalledComponent :: InstalledComponent

-- | Contains a list of criteria that define when and how to cancel a
--   configuration deployment.
--   
--   <i>See:</i> <a>newIoTJobAbortConfig</a> smart constructor.
data IoTJobAbortConfig
IoTJobAbortConfig' :: NonEmpty IoTJobAbortCriteria -> IoTJobAbortConfig

-- | Create a value of <a>IoTJobAbortConfig</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:criteriaList:IoTJobAbortConfig'</a>,
--   <a>ioTJobAbortConfig_criteriaList</a> - The list of criteria that
--   define when and how to cancel the configuration deployment.
newIoTJobAbortConfig :: NonEmpty IoTJobAbortCriteria -> IoTJobAbortConfig

-- | Contains criteria that define when and how to cancel a job.
--   
--   The deployment stops if the following conditions are true:
--   
--   <ol>
--   <li>The number of things that receive the deployment exceeds the
--   <tt>minNumberOfExecutedThings</tt>.</li>
--   <li>The percentage of failures with type <tt>failureType</tt> exceeds
--   the <tt>thresholdPercentage</tt>.</li>
--   </ol>
--   
--   <i>See:</i> <a>newIoTJobAbortCriteria</a> smart constructor.
data IoTJobAbortCriteria
IoTJobAbortCriteria' :: IoTJobExecutionFailureType -> IoTJobAbortAction -> Double -> Natural -> IoTJobAbortCriteria

-- | Create a value of <a>IoTJobAbortCriteria</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failureType:IoTJobAbortCriteria'</a>,
--   <a>ioTJobAbortCriteria_failureType</a> - The type of job deployment
--   failure that can cancel a job.
--   
--   <a>$sel:action:IoTJobAbortCriteria'</a>,
--   <a>ioTJobAbortCriteria_action</a> - The action to perform when the
--   criteria are met.
--   
--   <a>$sel:thresholdPercentage:IoTJobAbortCriteria'</a>,
--   <a>ioTJobAbortCriteria_thresholdPercentage</a> - The minimum
--   percentage of <tt>failureType</tt> failures that occur before the job
--   can cancel.
--   
--   This parameter supports up to two digits after the decimal (for
--   example, you can specify <tt>10.9</tt> or <tt>10.99</tt>, but not
--   <tt>10.999</tt>).
--   
--   <a>$sel:minNumberOfExecutedThings:IoTJobAbortCriteria'</a>,
--   <a>ioTJobAbortCriteria_minNumberOfExecutedThings</a> - The minimum
--   number of things that receive the configuration before the job can
--   cancel.
newIoTJobAbortCriteria :: IoTJobExecutionFailureType -> IoTJobAbortAction -> Double -> Natural -> IoTJobAbortCriteria

-- | Contains information about the rollout configuration for a job. This
--   configuration defines the rate at which the job deploys a
--   configuration to a fleet of target devices.
--   
--   <i>See:</i> <a>newIoTJobExecutionsRolloutConfig</a> smart constructor.
data IoTJobExecutionsRolloutConfig
IoTJobExecutionsRolloutConfig' :: Maybe IoTJobExponentialRolloutRate -> Maybe Natural -> IoTJobExecutionsRolloutConfig

-- | Create a value of <a>IoTJobExecutionsRolloutConfig</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:exponentialRate:IoTJobExecutionsRolloutConfig'</a>,
--   <a>ioTJobExecutionsRolloutConfig_exponentialRate</a> - The exponential
--   rate to increase the job rollout rate.
--   
--   <a>$sel:maximumPerMinute:IoTJobExecutionsRolloutConfig'</a>,
--   <a>ioTJobExecutionsRolloutConfig_maximumPerMinute</a> - The maximum
--   number of devices that receive a pending job notification, per minute.
newIoTJobExecutionsRolloutConfig :: IoTJobExecutionsRolloutConfig

-- | Contains information about an exponential rollout rate for a
--   configuration deployment job.
--   
--   <i>See:</i> <a>newIoTJobExponentialRolloutRate</a> smart constructor.
data IoTJobExponentialRolloutRate
IoTJobExponentialRolloutRate' :: Natural -> Double -> IoTJobRateIncreaseCriteria -> IoTJobExponentialRolloutRate

-- | Create a value of <a>IoTJobExponentialRolloutRate</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:baseRatePerMinute:IoTJobExponentialRolloutRate'</a>,
--   <a>ioTJobExponentialRolloutRate_baseRatePerMinute</a> - The minimum
--   number of devices that receive a pending job notification, per minute,
--   when the job starts. This parameter defines the initial rollout rate
--   of the job.
--   
--   <a>$sel:incrementFactor:IoTJobExponentialRolloutRate'</a>,
--   <a>ioTJobExponentialRolloutRate_incrementFactor</a> - The exponential
--   factor to increase the rollout rate for the job.
--   
--   This parameter supports up to one digit after the decimal (for
--   example, you can specify <tt>1.5</tt>, but not <tt>1.55</tt>).
--   
--   <a>$sel:rateIncreaseCriteria:IoTJobExponentialRolloutRate'</a>,
--   <a>ioTJobExponentialRolloutRate_rateIncreaseCriteria</a> - The
--   criteria to increase the rollout rate for the job.
newIoTJobExponentialRolloutRate :: Natural -> Double -> IoTJobRateIncreaseCriteria -> IoTJobExponentialRolloutRate

-- | Contains information about criteria to meet before a job increases its
--   rollout rate. Specify either <tt>numberOfNotifiedThings</tt> or
--   <tt>numberOfSucceededThings</tt>.
--   
--   <i>See:</i> <a>newIoTJobRateIncreaseCriteria</a> smart constructor.
data IoTJobRateIncreaseCriteria
IoTJobRateIncreaseCriteria' :: Maybe Natural -> Maybe Natural -> IoTJobRateIncreaseCriteria

-- | Create a value of <a>IoTJobRateIncreaseCriteria</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:numberOfNotifiedThings:IoTJobRateIncreaseCriteria'</a>,
--   <a>ioTJobRateIncreaseCriteria_numberOfNotifiedThings</a> - The number
--   of devices to receive the job notification before the rollout rate
--   increases.
--   
--   <a>$sel:numberOfSucceededThings:IoTJobRateIncreaseCriteria'</a>,
--   <a>ioTJobRateIncreaseCriteria_numberOfSucceededThings</a> - The number
--   of devices to successfully run the configuration job before the
--   rollout rate increases.
newIoTJobRateIncreaseCriteria :: IoTJobRateIncreaseCriteria

-- | Contains information about the timeout configuration for a job.
--   
--   <i>See:</i> <a>newIoTJobTimeoutConfig</a> smart constructor.
data IoTJobTimeoutConfig
IoTJobTimeoutConfig' :: Maybe Integer -> IoTJobTimeoutConfig

-- | Create a value of <a>IoTJobTimeoutConfig</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:inProgressTimeoutInMinutes:IoTJobTimeoutConfig'</a>,
--   <a>ioTJobTimeoutConfig_inProgressTimeoutInMinutes</a> - The amount of
--   time, in minutes, that devices have to complete the job. The timer
--   starts when the job status is set to <tt>IN_PROGRESS</tt>. If the job
--   status doesn't change to a terminal state before the time expires,
--   then the job status is set to <tt>TIMED_OUT</tt>.
--   
--   The timeout interval must be between 1 minute and 7 days (10080
--   minutes).
newIoTJobTimeoutConfig :: IoTJobTimeoutConfig

-- | Contains information about a container in which Lambda functions run
--   on Greengrass core devices.
--   
--   <i>See:</i> <a>newLambdaContainerParams</a> smart constructor.
data LambdaContainerParams
LambdaContainerParams' :: Maybe Bool -> Maybe Int -> Maybe [LambdaDeviceMount] -> Maybe [LambdaVolumeMount] -> LambdaContainerParams

-- | Create a value of <a>LambdaContainerParams</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:mountROSysfs:LambdaContainerParams'</a>,
--   <a>lambdaContainerParams_mountROSysfs</a> - Whether or not the
--   container can read information from the device's <tt>/sys</tt> folder.
--   
--   Default: <tt>false</tt>
--   
--   <a>$sel:memorySizeInKB:LambdaContainerParams'</a>,
--   <a>lambdaContainerParams_memorySizeInKB</a> - The memory size of the
--   container, expressed in kilobytes.
--   
--   Default: <tt>16384</tt> (16 MB)
--   
--   <a>$sel:devices:LambdaContainerParams'</a>,
--   <a>lambdaContainerParams_devices</a> - The list of system devices that
--   the container can access.
--   
--   <a>$sel:volumes:LambdaContainerParams'</a>,
--   <a>lambdaContainerParams_volumes</a> - The list of volumes that the
--   container can access.
newLambdaContainerParams :: LambdaContainerParams

-- | Contains information about a device that Linux processes in a
--   container can access.
--   
--   <i>See:</i> <a>newLambdaDeviceMount</a> smart constructor.
data LambdaDeviceMount
LambdaDeviceMount' :: Maybe Bool -> Maybe LambdaFilesystemPermission -> Text -> LambdaDeviceMount

-- | Create a value of <a>LambdaDeviceMount</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:addGroupOwner:LambdaDeviceMount'</a>,
--   <a>lambdaDeviceMount_addGroupOwner</a> - Whether or not to add the
--   component's system user as an owner of the device.
--   
--   Default: <tt>false</tt>
--   
--   <a>$sel:permission:LambdaDeviceMount'</a>,
--   <a>lambdaDeviceMount_permission</a> - The permission to access the
--   device: read/only (<tt>ro</tt>) or read/write (<tt>rw</tt>).
--   
--   Default: <tt>ro</tt>
--   
--   <a>$sel:path:LambdaDeviceMount'</a>, <a>lambdaDeviceMount_path</a> -
--   The mount path for the device in the file system.
newLambdaDeviceMount :: Text -> LambdaDeviceMount

-- | Contains information about an event source for an Lambda function. The
--   event source defines the topics on which this Lambda function
--   subscribes to receive messages that run the function.
--   
--   <i>See:</i> <a>newLambdaEventSource</a> smart constructor.
data LambdaEventSource
LambdaEventSource' :: Text -> LambdaEventSourceType -> LambdaEventSource

-- | Create a value of <a>LambdaEventSource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:topic:LambdaEventSource'</a>, <a>lambdaEventSource_topic</a> -
--   The topic to which to subscribe to receive event messages.
--   
--   <a>$sel:type':LambdaEventSource'</a>, <a>lambdaEventSource_type</a> -
--   The type of event source. Choose from the following options:
--   
--   <ul>
--   <li><tt>PUB_SUB</tt> – Subscribe to local publish/subscribe messages.
--   This event source type doesn't support MQTT wildcards (<tt>+</tt> and
--   <tt>#</tt>) in the event source topic.</li>
--   <li><tt>IOT_CORE</tt> – Subscribe to Amazon Web Services IoT Core MQTT
--   messages. This event source type supports MQTT wildcards (<tt>+</tt>
--   and <tt>#</tt>) in the event source topic.</li>
--   </ul>
newLambdaEventSource :: Text -> LambdaEventSourceType -> LambdaEventSource

-- | Contains parameters for a Lambda function that runs on IoT Greengrass.
--   
--   <i>See:</i> <a>newLambdaExecutionParameters</a> smart constructor.
data LambdaExecutionParameters
LambdaExecutionParameters' :: Maybe [Text] -> Maybe Int -> Maybe Bool -> Maybe LambdaInputPayloadEncodingType -> Maybe Int -> Maybe Int -> Maybe [LambdaEventSource] -> Maybe Int -> Maybe (HashMap Text Text) -> Maybe Int -> Maybe LambdaLinuxProcessParams -> LambdaExecutionParameters

-- | Create a value of <a>LambdaExecutionParameters</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:execArgs:LambdaExecutionParameters'</a>,
--   <a>lambdaExecutionParameters_execArgs</a> - The list of arguments to
--   pass to the Lambda function when it runs.
--   
--   <a>$sel:maxQueueSize:LambdaExecutionParameters'</a>,
--   <a>lambdaExecutionParameters_maxQueueSize</a> - The maximum size of
--   the message queue for the Lambda function component. The IoT
--   Greengrass core stores messages in a FIFO (first-in-first-out) queue
--   until it can run the Lambda function to consume each message.
--   
--   <a>$sel:pinned:LambdaExecutionParameters'</a>,
--   <a>lambdaExecutionParameters_pinned</a> - Whether or not the Lambda
--   function is pinned, or long-lived.
--   
--   <ul>
--   <li>A pinned Lambda function starts when IoT Greengrass starts and
--   keeps running in its own container.</li>
--   <li>A non-pinned Lambda function starts only when it receives a work
--   item and exists after it idles for <tt>maxIdleTimeInSeconds</tt>. If
--   the function has multiple work items, the IoT Greengrass Core software
--   creates multiple instances of the function.</li>
--   </ul>
--   
--   Default: <tt>true</tt>
--   
--   <a>$sel:inputPayloadEncodingType:LambdaExecutionParameters'</a>,
--   <a>lambdaExecutionParameters_inputPayloadEncodingType</a> - The
--   encoding type that the Lambda function supports.
--   
--   Default: <tt>json</tt>
--   
--   <a>$sel:maxIdleTimeInSeconds:LambdaExecutionParameters'</a>,
--   <a>lambdaExecutionParameters_maxIdleTimeInSeconds</a> - The maximum
--   amount of time in seconds that a non-pinned Lambda function can idle
--   before the IoT Greengrass Core software stops its process.
--   
--   <a>$sel:timeoutInSeconds:LambdaExecutionParameters'</a>,
--   <a>lambdaExecutionParameters_timeoutInSeconds</a> - The maximum amount
--   of time in seconds that the Lambda function can process a work item.
--   
--   <a>$sel:eventSources:LambdaExecutionParameters'</a>,
--   <a>lambdaExecutionParameters_eventSources</a> - The list of event
--   sources to which to subscribe to receive work messages. The Lambda
--   function runs when it receives a message from an event source. You can
--   subscribe this function to local publish/subscribe messages and Amazon
--   Web Services IoT Core MQTT messages.
--   
--   <a>$sel:maxInstancesCount:LambdaExecutionParameters'</a>,
--   <a>lambdaExecutionParameters_maxInstancesCount</a> - The maximum
--   number of instances that a non-pinned Lambda function can run at the
--   same time.
--   
--   <a>$sel:environmentVariables:LambdaExecutionParameters'</a>,
--   <a>lambdaExecutionParameters_environmentVariables</a> - The map of
--   environment variables that are available to the Lambda function when
--   it runs.
--   
--   <a>$sel:statusTimeoutInSeconds:LambdaExecutionParameters'</a>,
--   <a>lambdaExecutionParameters_statusTimeoutInSeconds</a> - The interval
--   in seconds at which a pinned (also known as long-lived) Lambda
--   function component sends status updates to the Lambda manager
--   component.
--   
--   <a>$sel:linuxProcessParams:LambdaExecutionParameters'</a>,
--   <a>lambdaExecutionParameters_linuxProcessParams</a> - The parameters
--   for the Linux process that contains the Lambda function.
newLambdaExecutionParameters :: LambdaExecutionParameters

-- | Contains information about an Lambda function to import to create a
--   component.
--   
--   <i>See:</i> <a>newLambdaFunctionRecipeSource</a> smart constructor.
data LambdaFunctionRecipeSource
LambdaFunctionRecipeSource' :: Maybe LambdaExecutionParameters -> Maybe Text -> Maybe Text -> Maybe [ComponentPlatform] -> Maybe (HashMap Text ComponentDependencyRequirement) -> Text -> LambdaFunctionRecipeSource

-- | Create a value of <a>LambdaFunctionRecipeSource</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:componentLambdaParameters:LambdaFunctionRecipeSource'</a>,
--   <a>lambdaFunctionRecipeSource_componentLambdaParameters</a> - The
--   system and runtime parameters for the Lambda function as it runs on
--   the Greengrass core device.
--   
--   <a>$sel:componentVersion:LambdaFunctionRecipeSource'</a>,
--   <a>lambdaFunctionRecipeSource_componentVersion</a> - The version of
--   the component.
--   
--   Defaults to the version of the Lambda function as a semantic version.
--   For example, if your function version is <tt>3</tt>, the component
--   version becomes <tt>3.0.0</tt>.
--   
--   <a>$sel:componentName:LambdaFunctionRecipeSource'</a>,
--   <a>lambdaFunctionRecipeSource_componentName</a> - The name of the
--   component.
--   
--   Defaults to the name of the Lambda function.
--   
--   <a>$sel:componentPlatforms:LambdaFunctionRecipeSource'</a>,
--   <a>lambdaFunctionRecipeSource_componentPlatforms</a> - The platforms
--   that the component version supports.
--   
--   <a>$sel:componentDependencies:LambdaFunctionRecipeSource'</a>,
--   <a>lambdaFunctionRecipeSource_componentDependencies</a> - The
--   component versions on which this Lambda function component depends.
--   
--   <a>$sel:lambdaArn:LambdaFunctionRecipeSource'</a>,
--   <a>lambdaFunctionRecipeSource_lambdaArn</a> - The <a>ARN</a> of the
--   Lambda function. The ARN must include the version of the function to
--   import. You can't use version aliases like <tt>$LATEST</tt>.
newLambdaFunctionRecipeSource :: Text -> LambdaFunctionRecipeSource

-- | Contains parameters for a Linux process that contains an Lambda
--   function.
--   
--   <i>See:</i> <a>newLambdaLinuxProcessParams</a> smart constructor.
data LambdaLinuxProcessParams
LambdaLinuxProcessParams' :: Maybe LambdaContainerParams -> Maybe LambdaIsolationMode -> LambdaLinuxProcessParams

-- | Create a value of <a>LambdaLinuxProcessParams</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerParams:LambdaLinuxProcessParams'</a>,
--   <a>lambdaLinuxProcessParams_containerParams</a> - The parameters for
--   the container in which the Lambda function runs.
--   
--   <a>$sel:isolationMode:LambdaLinuxProcessParams'</a>,
--   <a>lambdaLinuxProcessParams_isolationMode</a> - The isolation mode for
--   the process that contains the Lambda function. The process can run in
--   an isolated runtime environment inside the IoT Greengrass container,
--   or as a regular process outside any container.
--   
--   Default: <tt>GreengrassContainer</tt>
newLambdaLinuxProcessParams :: LambdaLinuxProcessParams

-- | Contains information about a volume that Linux processes in a
--   container can access. When you define a volume, the IoT Greengrass
--   Core software mounts the source files to the destination inside the
--   container.
--   
--   <i>See:</i> <a>newLambdaVolumeMount</a> smart constructor.
data LambdaVolumeMount
LambdaVolumeMount' :: Maybe Bool -> Maybe LambdaFilesystemPermission -> Text -> Text -> LambdaVolumeMount

-- | Create a value of <a>LambdaVolumeMount</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:addGroupOwner:LambdaVolumeMount'</a>,
--   <a>lambdaVolumeMount_addGroupOwner</a> - Whether or not to add the IoT
--   Greengrass user group as an owner of the volume.
--   
--   Default: <tt>false</tt>
--   
--   <a>$sel:permission:LambdaVolumeMount'</a>,
--   <a>lambdaVolumeMount_permission</a> - The permission to access the
--   volume: read/only (<tt>ro</tt>) or read/write (<tt>rw</tt>).
--   
--   Default: <tt>ro</tt>
--   
--   <a>$sel:sourcePath:LambdaVolumeMount'</a>,
--   <a>lambdaVolumeMount_sourcePath</a> - The path to the physical volume
--   in the file system.
--   
--   <a>$sel:destinationPath:LambdaVolumeMount'</a>,
--   <a>lambdaVolumeMount_destinationPath</a> - The path to the logical
--   volume in the file system.
newLambdaVolumeMount :: Text -> Text -> LambdaVolumeMount

-- | Contains information about a component version that is compatible to
--   run on a Greengrass core device.
--   
--   <i>See:</i> <a>newResolvedComponentVersion</a> smart constructor.
data ResolvedComponentVersion
ResolvedComponentVersion' :: Maybe Text -> Maybe Text -> Maybe Base64 -> Maybe Text -> ResolvedComponentVersion

-- | Create a value of <a>ResolvedComponentVersion</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:arn:ResolvedComponentVersion'</a>,
--   <a>resolvedComponentVersion_arn</a> - The <a>ARN</a> of the component
--   version.
--   
--   <a>$sel:componentVersion:ResolvedComponentVersion'</a>,
--   <a>resolvedComponentVersion_componentVersion</a> - The version of the
--   component.
--   
--   <a>$sel:recipe:ResolvedComponentVersion'</a>,
--   <a>resolvedComponentVersion_recipe</a> - The recipe of the component
--   version.-- -- <i>Note:</i> This <tt>Lens</tt> automatically encodes
--   and decodes Base64 data. -- The underlying isomorphism will encode to
--   Base64 representation during -- serialisation, and decode from Base64
--   representation during deserialisation. -- This <tt>Lens</tt> accepts
--   and returns only raw unencoded data.
--   
--   <a>$sel:componentName:ResolvedComponentVersion'</a>,
--   <a>resolvedComponentVersion_componentName</a> - The name of the
--   component.
newResolvedComponentVersion :: ResolvedComponentVersion

-- | Contains information about system resource limits that the IoT
--   Greengrass Core software applies to a component's processes. For more
--   information, see <a>Configure system resource limits for
--   components</a>.
--   
--   <i>See:</i> <a>newSystemResourceLimits</a> smart constructor.
data SystemResourceLimits
SystemResourceLimits' :: Maybe Natural -> Maybe Double -> SystemResourceLimits

-- | Create a value of <a>SystemResourceLimits</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:memory:SystemResourceLimits'</a>,
--   <a>systemResourceLimits_memory</a> - The maximum amount of RAM,
--   expressed in kilobytes, that a component's processes can use on the
--   core device.
--   
--   <a>$sel:cpus:SystemResourceLimits'</a>,
--   <a>systemResourceLimits_cpus</a> - The maximum amount of CPU time that
--   a component's processes can use on the core device. A core device's
--   total CPU time is equivalent to the device's number of CPU cores. For
--   example, on a core device with 4 CPU cores, you can set this value to
--   <tt>2</tt> to limit the component's processes to 50 percent usage of
--   each CPU core. On a device with 1 CPU core, you can set this value to
--   <tt>0.25</tt> to limit the component's processes to 25 percent usage
--   of the CPU. If you set this value to a number greater than the number
--   of CPU cores, the IoT Greengrass Core software doesn't limit the
--   component's CPU usage.
newSystemResourceLimits :: SystemResourceLimits
