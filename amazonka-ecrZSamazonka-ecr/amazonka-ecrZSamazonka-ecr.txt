-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/

@package amazonka-ecrZSamazonka-ecr
@version 1.6.1


module Network.AWS.ECR.Types.Attribute

-- | This data type is used in the ImageScanFinding data type.
--   
--   <i>See:</i> <a>newAttribute</a> smart constructor.
data Attribute
Attribute' :: Maybe Text -> Text -> Attribute

-- | The value assigned to the attribute key.
[$sel:value:Attribute'] :: Attribute -> Maybe Text

-- | The attribute key.
[$sel:key:Attribute'] :: Attribute -> Text

-- | Create a value of <a>Attribute</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:Attribute'</a>, <a>attribute_value</a> - The value
--   assigned to the attribute key.
--   
--   <a>$sel:key:Attribute'</a>, <a>attribute_key</a> - The attribute key.
newAttribute :: Text -> Attribute

-- | The value assigned to the attribute key.
attribute_value :: Lens' Attribute (Maybe Text)

-- | The attribute key.
attribute_key :: Lens' Attribute Text
instance GHC.Generics.Generic Network.AWS.ECR.Types.Attribute.Attribute
instance GHC.Show.Show Network.AWS.ECR.Types.Attribute.Attribute
instance GHC.Read.Read Network.AWS.ECR.Types.Attribute.Attribute
instance GHC.Classes.Eq Network.AWS.ECR.Types.Attribute.Attribute
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.ECR.Types.Attribute.Attribute
instance Data.Hashable.Class.Hashable Network.AWS.ECR.Types.Attribute.Attribute
instance Control.DeepSeq.NFData Network.AWS.ECR.Types.Attribute.Attribute


module Network.AWS.ECR.Types.AuthorizationData

-- | An object representing authorization data for an Amazon ECR registry.
--   
--   <i>See:</i> <a>newAuthorizationData</a> smart constructor.
data AuthorizationData
AuthorizationData' :: Maybe Text -> Maybe POSIX -> Maybe Text -> AuthorizationData

-- | The registry URL to use for this authorization token in a <tt>docker
--   login</tt> command. The Amazon ECR registry URL format is
--   <tt>https://aws_account_id.dkr.ecr.region.amazonaws.com</tt>. For
--   example,
--   <tt>https://012345678910.dkr.ecr.us-east-1.amazonaws.com</tt>..
[$sel:proxyEndpoint:AuthorizationData'] :: AuthorizationData -> Maybe Text

-- | The Unix time in seconds and milliseconds when the authorization token
--   expires. Authorization tokens are valid for 12 hours.
[$sel:expiresAt:AuthorizationData'] :: AuthorizationData -> Maybe POSIX

-- | A base64-encoded string that contains authorization data for the
--   specified Amazon ECR registry. When the string is decoded, it is
--   presented in the format <tt>user:password</tt> for private registry
--   authentication using <tt>docker login</tt>.
[$sel:authorizationToken:AuthorizationData'] :: AuthorizationData -> Maybe Text

-- | Create a value of <a>AuthorizationData</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:proxyEndpoint:AuthorizationData'</a>,
--   <a>authorizationData_proxyEndpoint</a> - The registry URL to use for
--   this authorization token in a <tt>docker login</tt> command. The
--   Amazon ECR registry URL format is
--   <tt>https://aws_account_id.dkr.ecr.region.amazonaws.com</tt>. For
--   example,
--   <tt>https://012345678910.dkr.ecr.us-east-1.amazonaws.com</tt>..
--   
--   <a>$sel:expiresAt:AuthorizationData'</a>,
--   <a>authorizationData_expiresAt</a> - The Unix time in seconds and
--   milliseconds when the authorization token expires. Authorization
--   tokens are valid for 12 hours.
--   
--   <a>$sel:authorizationToken:AuthorizationData'</a>,
--   <a>authorizationData_authorizationToken</a> - A base64-encoded string
--   that contains authorization data for the specified Amazon ECR
--   registry. When the string is decoded, it is presented in the format
--   <tt>user:password</tt> for private registry authentication using
--   <tt>docker login</tt>.
newAuthorizationData :: AuthorizationData

-- | The registry URL to use for this authorization token in a <tt>docker
--   login</tt> command. The Amazon ECR registry URL format is
--   <tt>https://aws_account_id.dkr.ecr.region.amazonaws.com</tt>. For
--   example,
--   <tt>https://012345678910.dkr.ecr.us-east-1.amazonaws.com</tt>..
authorizationData_proxyEndpoint :: Lens' AuthorizationData (Maybe Text)

-- | The Unix time in seconds and milliseconds when the authorization token
--   expires. Authorization tokens are valid for 12 hours.
authorizationData_expiresAt :: Lens' AuthorizationData (Maybe UTCTime)

-- | A base64-encoded string that contains authorization data for the
--   specified Amazon ECR registry. When the string is decoded, it is
--   presented in the format <tt>user:password</tt> for private registry
--   authentication using <tt>docker login</tt>.
authorizationData_authorizationToken :: Lens' AuthorizationData (Maybe Text)
instance GHC.Generics.Generic Network.AWS.ECR.Types.AuthorizationData.AuthorizationData
instance GHC.Show.Show Network.AWS.ECR.Types.AuthorizationData.AuthorizationData
instance GHC.Read.Read Network.AWS.ECR.Types.AuthorizationData.AuthorizationData
instance GHC.Classes.Eq Network.AWS.ECR.Types.AuthorizationData.AuthorizationData
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.ECR.Types.AuthorizationData.AuthorizationData
instance Data.Hashable.Class.Hashable Network.AWS.ECR.Types.AuthorizationData.AuthorizationData
instance Control.DeepSeq.NFData Network.AWS.ECR.Types.AuthorizationData.AuthorizationData


module Network.AWS.ECR.Types.EncryptionType
newtype EncryptionType
EncryptionType' :: Text -> EncryptionType
[fromEncryptionType] :: EncryptionType -> Text
pattern EncryptionType_AES256 :: EncryptionType
pattern EncryptionType_KMS :: EncryptionType
instance Network.AWS.Data.XML.ToXML Network.AWS.ECR.Types.EncryptionType.EncryptionType
instance Network.AWS.Data.XML.FromXML Network.AWS.ECR.Types.EncryptionType.EncryptionType
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.ECR.Types.EncryptionType.EncryptionType
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.Types.EncryptionType.EncryptionType
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.ECR.Types.EncryptionType.EncryptionType
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.ECR.Types.EncryptionType.EncryptionType
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.Types.EncryptionType.EncryptionType
instance Network.AWS.Data.Headers.ToHeader Network.AWS.ECR.Types.EncryptionType.EncryptionType
instance Network.AWS.Data.Log.ToLog Network.AWS.ECR.Types.EncryptionType.EncryptionType
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.ECR.Types.EncryptionType.EncryptionType
instance Network.AWS.Data.Text.ToText Network.AWS.ECR.Types.EncryptionType.EncryptionType
instance Network.AWS.Data.Text.FromText Network.AWS.ECR.Types.EncryptionType.EncryptionType
instance Control.DeepSeq.NFData Network.AWS.ECR.Types.EncryptionType.EncryptionType
instance Data.Hashable.Class.Hashable Network.AWS.ECR.Types.EncryptionType.EncryptionType
instance GHC.Generics.Generic Network.AWS.ECR.Types.EncryptionType.EncryptionType
instance GHC.Classes.Ord Network.AWS.ECR.Types.EncryptionType.EncryptionType
instance GHC.Classes.Eq Network.AWS.ECR.Types.EncryptionType.EncryptionType
instance GHC.Read.Read Network.AWS.ECR.Types.EncryptionType.EncryptionType
instance GHC.Show.Show Network.AWS.ECR.Types.EncryptionType.EncryptionType


module Network.AWS.ECR.Types.EncryptionConfiguration

-- | The encryption configuration for the repository. This determines how
--   the contents of your repository are encrypted at rest.
--   
--   By default, when no encryption configuration is set or the
--   <tt>AES256</tt> encryption type is used, Amazon ECR uses server-side
--   encryption with Amazon S3-managed encryption keys which encrypts your
--   data at rest using an AES-256 encryption algorithm. This does not
--   require any action on your part.
--   
--   For more control over the encryption of the contents of your
--   repository, you can use server-side encryption with Key Management
--   Service key stored in Key Management Service (KMS) to encrypt your
--   images. For more information, see <a>Amazon ECR encryption at rest</a>
--   in the <i>Amazon Elastic Container Registry User Guide</i>.
--   
--   <i>See:</i> <a>newEncryptionConfiguration</a> smart constructor.
data EncryptionConfiguration
EncryptionConfiguration' :: Maybe Text -> EncryptionType -> EncryptionConfiguration

-- | If you use the <tt>KMS</tt> encryption type, specify the KMS key to
--   use for encryption. The alias, key ID, or full ARN of the KMS key can
--   be specified. The key must exist in the same Region as the repository.
--   If no key is specified, the default Amazon Web Services managed KMS
--   key for Amazon ECR will be used.
[$sel:kmsKey:EncryptionConfiguration'] :: EncryptionConfiguration -> Maybe Text

-- | The encryption type to use.
--   
--   If you use the <tt>KMS</tt> encryption type, the contents of the
--   repository will be encrypted using server-side encryption with Key
--   Management Service key stored in KMS. When you use KMS to encrypt your
--   data, you can either use the default Amazon Web Services managed KMS
--   key for Amazon ECR, or specify your own KMS key, which you already
--   created. For more information, see <a>Protecting data using
--   server-side encryption with an KMS key stored in Key Management
--   Service (SSE-KMS)</a> in the <i>Amazon Simple Storage Service Console
--   Developer Guide.</i>.
--   
--   If you use the <tt>AES256</tt> encryption type, Amazon ECR uses
--   server-side encryption with Amazon S3-managed encryption keys which
--   encrypts the images in the repository using an AES-256 encryption
--   algorithm. For more information, see <a>Protecting data using
--   server-side encryption with Amazon S3-managed encryption keys
--   (SSE-S3)</a> in the <i>Amazon Simple Storage Service Console Developer
--   Guide.</i>.
[$sel:encryptionType:EncryptionConfiguration'] :: EncryptionConfiguration -> EncryptionType

-- | Create a value of <a>EncryptionConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:kmsKey:EncryptionConfiguration'</a>,
--   <a>encryptionConfiguration_kmsKey</a> - If you use the <tt>KMS</tt>
--   encryption type, specify the KMS key to use for encryption. The alias,
--   key ID, or full ARN of the KMS key can be specified. The key must
--   exist in the same Region as the repository. If no key is specified,
--   the default Amazon Web Services managed KMS key for Amazon ECR will be
--   used.
--   
--   <a>$sel:encryptionType:EncryptionConfiguration'</a>,
--   <a>encryptionConfiguration_encryptionType</a> - The encryption type to
--   use.
--   
--   If you use the <tt>KMS</tt> encryption type, the contents of the
--   repository will be encrypted using server-side encryption with Key
--   Management Service key stored in KMS. When you use KMS to encrypt your
--   data, you can either use the default Amazon Web Services managed KMS
--   key for Amazon ECR, or specify your own KMS key, which you already
--   created. For more information, see <a>Protecting data using
--   server-side encryption with an KMS key stored in Key Management
--   Service (SSE-KMS)</a> in the <i>Amazon Simple Storage Service Console
--   Developer Guide.</i>.
--   
--   If you use the <tt>AES256</tt> encryption type, Amazon ECR uses
--   server-side encryption with Amazon S3-managed encryption keys which
--   encrypts the images in the repository using an AES-256 encryption
--   algorithm. For more information, see <a>Protecting data using
--   server-side encryption with Amazon S3-managed encryption keys
--   (SSE-S3)</a> in the <i>Amazon Simple Storage Service Console Developer
--   Guide.</i>.
newEncryptionConfiguration :: EncryptionType -> EncryptionConfiguration

-- | If you use the <tt>KMS</tt> encryption type, specify the KMS key to
--   use for encryption. The alias, key ID, or full ARN of the KMS key can
--   be specified. The key must exist in the same Region as the repository.
--   If no key is specified, the default Amazon Web Services managed KMS
--   key for Amazon ECR will be used.
encryptionConfiguration_kmsKey :: Lens' EncryptionConfiguration (Maybe Text)

-- | The encryption type to use.
--   
--   If you use the <tt>KMS</tt> encryption type, the contents of the
--   repository will be encrypted using server-side encryption with Key
--   Management Service key stored in KMS. When you use KMS to encrypt your
--   data, you can either use the default Amazon Web Services managed KMS
--   key for Amazon ECR, or specify your own KMS key, which you already
--   created. For more information, see <a>Protecting data using
--   server-side encryption with an KMS key stored in Key Management
--   Service (SSE-KMS)</a> in the <i>Amazon Simple Storage Service Console
--   Developer Guide.</i>.
--   
--   If you use the <tt>AES256</tt> encryption type, Amazon ECR uses
--   server-side encryption with Amazon S3-managed encryption keys which
--   encrypts the images in the repository using an AES-256 encryption
--   algorithm. For more information, see <a>Protecting data using
--   server-side encryption with Amazon S3-managed encryption keys
--   (SSE-S3)</a> in the <i>Amazon Simple Storage Service Console Developer
--   Guide.</i>.
encryptionConfiguration_encryptionType :: Lens' EncryptionConfiguration EncryptionType
instance GHC.Generics.Generic Network.AWS.ECR.Types.EncryptionConfiguration.EncryptionConfiguration
instance GHC.Show.Show Network.AWS.ECR.Types.EncryptionConfiguration.EncryptionConfiguration
instance GHC.Read.Read Network.AWS.ECR.Types.EncryptionConfiguration.EncryptionConfiguration
instance GHC.Classes.Eq Network.AWS.ECR.Types.EncryptionConfiguration.EncryptionConfiguration
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.ECR.Types.EncryptionConfiguration.EncryptionConfiguration
instance Data.Hashable.Class.Hashable Network.AWS.ECR.Types.EncryptionConfiguration.EncryptionConfiguration
instance Control.DeepSeq.NFData Network.AWS.ECR.Types.EncryptionConfiguration.EncryptionConfiguration
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.Types.EncryptionConfiguration.EncryptionConfiguration


module Network.AWS.ECR.Types.FindingSeverity
newtype FindingSeverity
FindingSeverity' :: Text -> FindingSeverity
[fromFindingSeverity] :: FindingSeverity -> Text
pattern FindingSeverity_CRITICAL :: FindingSeverity
pattern FindingSeverity_HIGH :: FindingSeverity
pattern FindingSeverity_INFORMATIONAL :: FindingSeverity
pattern FindingSeverity_LOW :: FindingSeverity
pattern FindingSeverity_MEDIUM :: FindingSeverity
pattern FindingSeverity_UNDEFINED :: FindingSeverity
instance Network.AWS.Data.XML.ToXML Network.AWS.ECR.Types.FindingSeverity.FindingSeverity
instance Network.AWS.Data.XML.FromXML Network.AWS.ECR.Types.FindingSeverity.FindingSeverity
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.ECR.Types.FindingSeverity.FindingSeverity
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.Types.FindingSeverity.FindingSeverity
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.ECR.Types.FindingSeverity.FindingSeverity
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.ECR.Types.FindingSeverity.FindingSeverity
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.Types.FindingSeverity.FindingSeverity
instance Network.AWS.Data.Headers.ToHeader Network.AWS.ECR.Types.FindingSeverity.FindingSeverity
instance Network.AWS.Data.Log.ToLog Network.AWS.ECR.Types.FindingSeverity.FindingSeverity
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.ECR.Types.FindingSeverity.FindingSeverity
instance Network.AWS.Data.Text.ToText Network.AWS.ECR.Types.FindingSeverity.FindingSeverity
instance Network.AWS.Data.Text.FromText Network.AWS.ECR.Types.FindingSeverity.FindingSeverity
instance Control.DeepSeq.NFData Network.AWS.ECR.Types.FindingSeverity.FindingSeverity
instance Data.Hashable.Class.Hashable Network.AWS.ECR.Types.FindingSeverity.FindingSeverity
instance GHC.Generics.Generic Network.AWS.ECR.Types.FindingSeverity.FindingSeverity
instance GHC.Classes.Ord Network.AWS.ECR.Types.FindingSeverity.FindingSeverity
instance GHC.Classes.Eq Network.AWS.ECR.Types.FindingSeverity.FindingSeverity
instance GHC.Read.Read Network.AWS.ECR.Types.FindingSeverity.FindingSeverity
instance GHC.Show.Show Network.AWS.ECR.Types.FindingSeverity.FindingSeverity


module Network.AWS.ECR.Types.ImageActionType
newtype ImageActionType
ImageActionType' :: Text -> ImageActionType
[fromImageActionType] :: ImageActionType -> Text
pattern ImageActionType_EXPIRE :: ImageActionType
instance Network.AWS.Data.XML.ToXML Network.AWS.ECR.Types.ImageActionType.ImageActionType
instance Network.AWS.Data.XML.FromXML Network.AWS.ECR.Types.ImageActionType.ImageActionType
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.ECR.Types.ImageActionType.ImageActionType
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.Types.ImageActionType.ImageActionType
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.ECR.Types.ImageActionType.ImageActionType
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.ECR.Types.ImageActionType.ImageActionType
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.Types.ImageActionType.ImageActionType
instance Network.AWS.Data.Headers.ToHeader Network.AWS.ECR.Types.ImageActionType.ImageActionType
instance Network.AWS.Data.Log.ToLog Network.AWS.ECR.Types.ImageActionType.ImageActionType
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.ECR.Types.ImageActionType.ImageActionType
instance Network.AWS.Data.Text.ToText Network.AWS.ECR.Types.ImageActionType.ImageActionType
instance Network.AWS.Data.Text.FromText Network.AWS.ECR.Types.ImageActionType.ImageActionType
instance Control.DeepSeq.NFData Network.AWS.ECR.Types.ImageActionType.ImageActionType
instance Data.Hashable.Class.Hashable Network.AWS.ECR.Types.ImageActionType.ImageActionType
instance GHC.Generics.Generic Network.AWS.ECR.Types.ImageActionType.ImageActionType
instance GHC.Classes.Ord Network.AWS.ECR.Types.ImageActionType.ImageActionType
instance GHC.Classes.Eq Network.AWS.ECR.Types.ImageActionType.ImageActionType
instance GHC.Read.Read Network.AWS.ECR.Types.ImageActionType.ImageActionType
instance GHC.Show.Show Network.AWS.ECR.Types.ImageActionType.ImageActionType


module Network.AWS.ECR.Types.ImageFailureCode
newtype ImageFailureCode
ImageFailureCode' :: Text -> ImageFailureCode
[fromImageFailureCode] :: ImageFailureCode -> Text
pattern ImageFailureCode_ImageNotFound :: ImageFailureCode
pattern ImageFailureCode_ImageReferencedByManifestList :: ImageFailureCode
pattern ImageFailureCode_ImageTagDoesNotMatchDigest :: ImageFailureCode
pattern ImageFailureCode_InvalidImageDigest :: ImageFailureCode
pattern ImageFailureCode_InvalidImageTag :: ImageFailureCode
pattern ImageFailureCode_KmsError :: ImageFailureCode
pattern ImageFailureCode_MissingDigestAndTag :: ImageFailureCode
instance Network.AWS.Data.XML.ToXML Network.AWS.ECR.Types.ImageFailureCode.ImageFailureCode
instance Network.AWS.Data.XML.FromXML Network.AWS.ECR.Types.ImageFailureCode.ImageFailureCode
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.ECR.Types.ImageFailureCode.ImageFailureCode
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.Types.ImageFailureCode.ImageFailureCode
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.ECR.Types.ImageFailureCode.ImageFailureCode
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.ECR.Types.ImageFailureCode.ImageFailureCode
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.Types.ImageFailureCode.ImageFailureCode
instance Network.AWS.Data.Headers.ToHeader Network.AWS.ECR.Types.ImageFailureCode.ImageFailureCode
instance Network.AWS.Data.Log.ToLog Network.AWS.ECR.Types.ImageFailureCode.ImageFailureCode
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.ECR.Types.ImageFailureCode.ImageFailureCode
instance Network.AWS.Data.Text.ToText Network.AWS.ECR.Types.ImageFailureCode.ImageFailureCode
instance Network.AWS.Data.Text.FromText Network.AWS.ECR.Types.ImageFailureCode.ImageFailureCode
instance Control.DeepSeq.NFData Network.AWS.ECR.Types.ImageFailureCode.ImageFailureCode
instance Data.Hashable.Class.Hashable Network.AWS.ECR.Types.ImageFailureCode.ImageFailureCode
instance GHC.Generics.Generic Network.AWS.ECR.Types.ImageFailureCode.ImageFailureCode
instance GHC.Classes.Ord Network.AWS.ECR.Types.ImageFailureCode.ImageFailureCode
instance GHC.Classes.Eq Network.AWS.ECR.Types.ImageFailureCode.ImageFailureCode
instance GHC.Read.Read Network.AWS.ECR.Types.ImageFailureCode.ImageFailureCode
instance GHC.Show.Show Network.AWS.ECR.Types.ImageFailureCode.ImageFailureCode


module Network.AWS.ECR.Types.ImageIdentifier

-- | An object with identifying information for an image in an Amazon ECR
--   repository.
--   
--   <i>See:</i> <a>newImageIdentifier</a> smart constructor.
data ImageIdentifier
ImageIdentifier' :: Maybe Text -> Maybe Text -> ImageIdentifier

-- | The <tt>sha256</tt> digest of the image manifest.
[$sel:imageDigest:ImageIdentifier'] :: ImageIdentifier -> Maybe Text

-- | The tag used for the image.
[$sel:imageTag:ImageIdentifier'] :: ImageIdentifier -> Maybe Text

-- | Create a value of <a>ImageIdentifier</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:imageDigest:ImageIdentifier'</a>,
--   <a>imageIdentifier_imageDigest</a> - The <tt>sha256</tt> digest of the
--   image manifest.
--   
--   <a>$sel:imageTag:ImageIdentifier'</a>, <a>imageIdentifier_imageTag</a>
--   - The tag used for the image.
newImageIdentifier :: ImageIdentifier

-- | The <tt>sha256</tt> digest of the image manifest.
imageIdentifier_imageDigest :: Lens' ImageIdentifier (Maybe Text)

-- | The tag used for the image.
imageIdentifier_imageTag :: Lens' ImageIdentifier (Maybe Text)
instance GHC.Generics.Generic Network.AWS.ECR.Types.ImageIdentifier.ImageIdentifier
instance GHC.Show.Show Network.AWS.ECR.Types.ImageIdentifier.ImageIdentifier
instance GHC.Read.Read Network.AWS.ECR.Types.ImageIdentifier.ImageIdentifier
instance GHC.Classes.Eq Network.AWS.ECR.Types.ImageIdentifier.ImageIdentifier
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.ECR.Types.ImageIdentifier.ImageIdentifier
instance Data.Hashable.Class.Hashable Network.AWS.ECR.Types.ImageIdentifier.ImageIdentifier
instance Control.DeepSeq.NFData Network.AWS.ECR.Types.ImageIdentifier.ImageIdentifier
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.Types.ImageIdentifier.ImageIdentifier


module Network.AWS.ECR.Types.ImageFailure

-- | An object representing an Amazon ECR image failure.
--   
--   <i>See:</i> <a>newImageFailure</a> smart constructor.
data ImageFailure
ImageFailure' :: Maybe ImageFailureCode -> Maybe ImageIdentifier -> Maybe Text -> ImageFailure

-- | The code associated with the failure.
[$sel:failureCode:ImageFailure'] :: ImageFailure -> Maybe ImageFailureCode

-- | The image ID associated with the failure.
[$sel:imageId:ImageFailure'] :: ImageFailure -> Maybe ImageIdentifier

-- | The reason for the failure.
[$sel:failureReason:ImageFailure'] :: ImageFailure -> Maybe Text

-- | Create a value of <a>ImageFailure</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failureCode:ImageFailure'</a>, <a>imageFailure_failureCode</a>
--   - The code associated with the failure.
--   
--   <a>$sel:imageId:ImageFailure'</a>, <a>imageFailure_imageId</a> - The
--   image ID associated with the failure.
--   
--   <a>$sel:failureReason:ImageFailure'</a>,
--   <a>imageFailure_failureReason</a> - The reason for the failure.
newImageFailure :: ImageFailure

-- | The code associated with the failure.
imageFailure_failureCode :: Lens' ImageFailure (Maybe ImageFailureCode)

-- | The image ID associated with the failure.
imageFailure_imageId :: Lens' ImageFailure (Maybe ImageIdentifier)

-- | The reason for the failure.
imageFailure_failureReason :: Lens' ImageFailure (Maybe Text)
instance GHC.Generics.Generic Network.AWS.ECR.Types.ImageFailure.ImageFailure
instance GHC.Show.Show Network.AWS.ECR.Types.ImageFailure.ImageFailure
instance GHC.Read.Read Network.AWS.ECR.Types.ImageFailure.ImageFailure
instance GHC.Classes.Eq Network.AWS.ECR.Types.ImageFailure.ImageFailure
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.ECR.Types.ImageFailure.ImageFailure
instance Data.Hashable.Class.Hashable Network.AWS.ECR.Types.ImageFailure.ImageFailure
instance Control.DeepSeq.NFData Network.AWS.ECR.Types.ImageFailure.ImageFailure


module Network.AWS.ECR.Types.Image

-- | An object representing an Amazon ECR image.
--   
--   <i>See:</i> <a>newImage</a> smart constructor.
data Image
Image' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe ImageIdentifier -> Maybe Text -> Image

-- | The Amazon Web Services account ID associated with the registry
--   containing the image.
[$sel:registryId:Image'] :: Image -> Maybe Text

-- | The image manifest associated with the image.
[$sel:imageManifest:Image'] :: Image -> Maybe Text

-- | The name of the repository associated with the image.
[$sel:repositoryName:Image'] :: Image -> Maybe Text

-- | An object containing the image tag and image digest associated with an
--   image.
[$sel:imageId:Image'] :: Image -> Maybe ImageIdentifier

-- | The manifest media type of the image.
[$sel:imageManifestMediaType:Image'] :: Image -> Maybe Text

-- | Create a value of <a>Image</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:Image'</a>, <a>image_registryId</a> - The Amazon
--   Web Services account ID associated with the registry containing the
--   image.
--   
--   <a>$sel:imageManifest:Image'</a>, <a>image_imageManifest</a> - The
--   image manifest associated with the image.
--   
--   <a>$sel:repositoryName:Image'</a>, <a>image_repositoryName</a> - The
--   name of the repository associated with the image.
--   
--   <a>$sel:imageId:Image'</a>, <a>image_imageId</a> - An object
--   containing the image tag and image digest associated with an image.
--   
--   <a>$sel:imageManifestMediaType:Image'</a>,
--   <a>image_imageManifestMediaType</a> - The manifest media type of the
--   image.
newImage :: Image

-- | The Amazon Web Services account ID associated with the registry
--   containing the image.
image_registryId :: Lens' Image (Maybe Text)

-- | The image manifest associated with the image.
image_imageManifest :: Lens' Image (Maybe Text)

-- | The name of the repository associated with the image.
image_repositoryName :: Lens' Image (Maybe Text)

-- | An object containing the image tag and image digest associated with an
--   image.
image_imageId :: Lens' Image (Maybe ImageIdentifier)

-- | The manifest media type of the image.
image_imageManifestMediaType :: Lens' Image (Maybe Text)
instance GHC.Generics.Generic Network.AWS.ECR.Types.Image.Image
instance GHC.Show.Show Network.AWS.ECR.Types.Image.Image
instance GHC.Read.Read Network.AWS.ECR.Types.Image.Image
instance GHC.Classes.Eq Network.AWS.ECR.Types.Image.Image
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.ECR.Types.Image.Image
instance Data.Hashable.Class.Hashable Network.AWS.ECR.Types.Image.Image
instance Control.DeepSeq.NFData Network.AWS.ECR.Types.Image.Image


module Network.AWS.ECR.Types.ImageScanFinding

-- | Contains information about an image scan finding.
--   
--   <i>See:</i> <a>newImageScanFinding</a> smart constructor.
data ImageScanFinding
ImageScanFinding' :: Maybe Text -> Maybe FindingSeverity -> Maybe Text -> Maybe [Attribute] -> Maybe Text -> ImageScanFinding

-- | A link containing additional details about the security vulnerability.
[$sel:uri:ImageScanFinding'] :: ImageScanFinding -> Maybe Text

-- | The finding severity.
[$sel:severity:ImageScanFinding'] :: ImageScanFinding -> Maybe FindingSeverity

-- | The name associated with the finding, usually a CVE number.
[$sel:name:ImageScanFinding'] :: ImageScanFinding -> Maybe Text

-- | A collection of attributes of the host from which the finding is
--   generated.
[$sel:attributes:ImageScanFinding'] :: ImageScanFinding -> Maybe [Attribute]

-- | The description of the finding.
[$sel:description:ImageScanFinding'] :: ImageScanFinding -> Maybe Text

-- | Create a value of <a>ImageScanFinding</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:uri:ImageScanFinding'</a>, <a>imageScanFinding_uri</a> - A
--   link containing additional details about the security vulnerability.
--   
--   <a>$sel:severity:ImageScanFinding'</a>,
--   <a>imageScanFinding_severity</a> - The finding severity.
--   
--   <a>$sel:name:ImageScanFinding'</a>, <a>imageScanFinding_name</a> - The
--   name associated with the finding, usually a CVE number.
--   
--   <a>$sel:attributes:ImageScanFinding'</a>,
--   <a>imageScanFinding_attributes</a> - A collection of attributes of the
--   host from which the finding is generated.
--   
--   <a>$sel:description:ImageScanFinding'</a>,
--   <a>imageScanFinding_description</a> - The description of the finding.
newImageScanFinding :: ImageScanFinding

-- | A link containing additional details about the security vulnerability.
imageScanFinding_uri :: Lens' ImageScanFinding (Maybe Text)

-- | The finding severity.
imageScanFinding_severity :: Lens' ImageScanFinding (Maybe FindingSeverity)

-- | The name associated with the finding, usually a CVE number.
imageScanFinding_name :: Lens' ImageScanFinding (Maybe Text)

-- | A collection of attributes of the host from which the finding is
--   generated.
imageScanFinding_attributes :: Lens' ImageScanFinding (Maybe [Attribute])

-- | The description of the finding.
imageScanFinding_description :: Lens' ImageScanFinding (Maybe Text)
instance GHC.Generics.Generic Network.AWS.ECR.Types.ImageScanFinding.ImageScanFinding
instance GHC.Show.Show Network.AWS.ECR.Types.ImageScanFinding.ImageScanFinding
instance GHC.Read.Read Network.AWS.ECR.Types.ImageScanFinding.ImageScanFinding
instance GHC.Classes.Eq Network.AWS.ECR.Types.ImageScanFinding.ImageScanFinding
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.ECR.Types.ImageScanFinding.ImageScanFinding
instance Data.Hashable.Class.Hashable Network.AWS.ECR.Types.ImageScanFinding.ImageScanFinding
instance Control.DeepSeq.NFData Network.AWS.ECR.Types.ImageScanFinding.ImageScanFinding


module Network.AWS.ECR.Types.ImageScanFindings

-- | The details of an image scan.
--   
--   <i>See:</i> <a>newImageScanFindings</a> smart constructor.
data ImageScanFindings
ImageScanFindings' :: Maybe [ImageScanFinding] -> Maybe POSIX -> Maybe POSIX -> Maybe (HashMap FindingSeverity Natural) -> ImageScanFindings

-- | The findings from the image scan.
[$sel:findings:ImageScanFindings'] :: ImageScanFindings -> Maybe [ImageScanFinding]

-- | The time of the last completed image scan.
[$sel:imageScanCompletedAt:ImageScanFindings'] :: ImageScanFindings -> Maybe POSIX

-- | The time when the vulnerability data was last scanned.
[$sel:vulnerabilitySourceUpdatedAt:ImageScanFindings'] :: ImageScanFindings -> Maybe POSIX

-- | The image vulnerability counts, sorted by severity.
[$sel:findingSeverityCounts:ImageScanFindings'] :: ImageScanFindings -> Maybe (HashMap FindingSeverity Natural)

-- | Create a value of <a>ImageScanFindings</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:findings:ImageScanFindings'</a>,
--   <a>imageScanFindings_findings</a> - The findings from the image scan.
--   
--   <a>$sel:imageScanCompletedAt:ImageScanFindings'</a>,
--   <a>imageScanFindings_imageScanCompletedAt</a> - The time of the last
--   completed image scan.
--   
--   <a>$sel:vulnerabilitySourceUpdatedAt:ImageScanFindings'</a>,
--   <a>imageScanFindings_vulnerabilitySourceUpdatedAt</a> - The time when
--   the vulnerability data was last scanned.
--   
--   <a>$sel:findingSeverityCounts:ImageScanFindings'</a>,
--   <a>imageScanFindings_findingSeverityCounts</a> - The image
--   vulnerability counts, sorted by severity.
newImageScanFindings :: ImageScanFindings

-- | The findings from the image scan.
imageScanFindings_findings :: Lens' ImageScanFindings (Maybe [ImageScanFinding])

-- | The time of the last completed image scan.
imageScanFindings_imageScanCompletedAt :: Lens' ImageScanFindings (Maybe UTCTime)

-- | The time when the vulnerability data was last scanned.
imageScanFindings_vulnerabilitySourceUpdatedAt :: Lens' ImageScanFindings (Maybe UTCTime)

-- | The image vulnerability counts, sorted by severity.
imageScanFindings_findingSeverityCounts :: Lens' ImageScanFindings (Maybe (HashMap FindingSeverity Natural))
instance GHC.Generics.Generic Network.AWS.ECR.Types.ImageScanFindings.ImageScanFindings
instance GHC.Show.Show Network.AWS.ECR.Types.ImageScanFindings.ImageScanFindings
instance GHC.Read.Read Network.AWS.ECR.Types.ImageScanFindings.ImageScanFindings
instance GHC.Classes.Eq Network.AWS.ECR.Types.ImageScanFindings.ImageScanFindings
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.ECR.Types.ImageScanFindings.ImageScanFindings
instance Data.Hashable.Class.Hashable Network.AWS.ECR.Types.ImageScanFindings.ImageScanFindings
instance Control.DeepSeq.NFData Network.AWS.ECR.Types.ImageScanFindings.ImageScanFindings


module Network.AWS.ECR.Types.ImageScanFindingsSummary

-- | A summary of the last completed image scan.
--   
--   <i>See:</i> <a>newImageScanFindingsSummary</a> smart constructor.
data ImageScanFindingsSummary
ImageScanFindingsSummary' :: Maybe POSIX -> Maybe POSIX -> Maybe (HashMap FindingSeverity Natural) -> ImageScanFindingsSummary

-- | The time of the last completed image scan.
[$sel:imageScanCompletedAt:ImageScanFindingsSummary'] :: ImageScanFindingsSummary -> Maybe POSIX

-- | The time when the vulnerability data was last scanned.
[$sel:vulnerabilitySourceUpdatedAt:ImageScanFindingsSummary'] :: ImageScanFindingsSummary -> Maybe POSIX

-- | The image vulnerability counts, sorted by severity.
[$sel:findingSeverityCounts:ImageScanFindingsSummary'] :: ImageScanFindingsSummary -> Maybe (HashMap FindingSeverity Natural)

-- | Create a value of <a>ImageScanFindingsSummary</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:imageScanCompletedAt:ImageScanFindingsSummary'</a>,
--   <a>imageScanFindingsSummary_imageScanCompletedAt</a> - The time of the
--   last completed image scan.
--   
--   <a>$sel:vulnerabilitySourceUpdatedAt:ImageScanFindingsSummary'</a>,
--   <a>imageScanFindingsSummary_vulnerabilitySourceUpdatedAt</a> - The
--   time when the vulnerability data was last scanned.
--   
--   <a>$sel:findingSeverityCounts:ImageScanFindingsSummary'</a>,
--   <a>imageScanFindingsSummary_findingSeverityCounts</a> - The image
--   vulnerability counts, sorted by severity.
newImageScanFindingsSummary :: ImageScanFindingsSummary

-- | The time of the last completed image scan.
imageScanFindingsSummary_imageScanCompletedAt :: Lens' ImageScanFindingsSummary (Maybe UTCTime)

-- | The time when the vulnerability data was last scanned.
imageScanFindingsSummary_vulnerabilitySourceUpdatedAt :: Lens' ImageScanFindingsSummary (Maybe UTCTime)

-- | The image vulnerability counts, sorted by severity.
imageScanFindingsSummary_findingSeverityCounts :: Lens' ImageScanFindingsSummary (Maybe (HashMap FindingSeverity Natural))
instance GHC.Generics.Generic Network.AWS.ECR.Types.ImageScanFindingsSummary.ImageScanFindingsSummary
instance GHC.Show.Show Network.AWS.ECR.Types.ImageScanFindingsSummary.ImageScanFindingsSummary
instance GHC.Read.Read Network.AWS.ECR.Types.ImageScanFindingsSummary.ImageScanFindingsSummary
instance GHC.Classes.Eq Network.AWS.ECR.Types.ImageScanFindingsSummary.ImageScanFindingsSummary
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.ECR.Types.ImageScanFindingsSummary.ImageScanFindingsSummary
instance Data.Hashable.Class.Hashable Network.AWS.ECR.Types.ImageScanFindingsSummary.ImageScanFindingsSummary
instance Control.DeepSeq.NFData Network.AWS.ECR.Types.ImageScanFindingsSummary.ImageScanFindingsSummary


module Network.AWS.ECR.Types.ImageScanningConfiguration

-- | The image scanning configuration for a repository.
--   
--   <i>See:</i> <a>newImageScanningConfiguration</a> smart constructor.
data ImageScanningConfiguration
ImageScanningConfiguration' :: Maybe Bool -> ImageScanningConfiguration

-- | The setting that determines whether images are scanned after being
--   pushed to a repository. If set to <tt>true</tt>, images will be
--   scanned after being pushed. If this parameter is not specified, it
--   will default to <tt>false</tt> and images will not be scanned unless a
--   scan is manually started with the <a>API_StartImageScan</a> API.
[$sel:scanOnPush:ImageScanningConfiguration'] :: ImageScanningConfiguration -> Maybe Bool

-- | Create a value of <a>ImageScanningConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:scanOnPush:ImageScanningConfiguration'</a>,
--   <a>imageScanningConfiguration_scanOnPush</a> - The setting that
--   determines whether images are scanned after being pushed to a
--   repository. If set to <tt>true</tt>, images will be scanned after
--   being pushed. If this parameter is not specified, it will default to
--   <tt>false</tt> and images will not be scanned unless a scan is
--   manually started with the <a>API_StartImageScan</a> API.
newImageScanningConfiguration :: ImageScanningConfiguration

-- | The setting that determines whether images are scanned after being
--   pushed to a repository. If set to <tt>true</tt>, images will be
--   scanned after being pushed. If this parameter is not specified, it
--   will default to <tt>false</tt> and images will not be scanned unless a
--   scan is manually started with the <a>API_StartImageScan</a> API.
imageScanningConfiguration_scanOnPush :: Lens' ImageScanningConfiguration (Maybe Bool)
instance GHC.Generics.Generic Network.AWS.ECR.Types.ImageScanningConfiguration.ImageScanningConfiguration
instance GHC.Show.Show Network.AWS.ECR.Types.ImageScanningConfiguration.ImageScanningConfiguration
instance GHC.Read.Read Network.AWS.ECR.Types.ImageScanningConfiguration.ImageScanningConfiguration
instance GHC.Classes.Eq Network.AWS.ECR.Types.ImageScanningConfiguration.ImageScanningConfiguration
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.ECR.Types.ImageScanningConfiguration.ImageScanningConfiguration
instance Data.Hashable.Class.Hashable Network.AWS.ECR.Types.ImageScanningConfiguration.ImageScanningConfiguration
instance Control.DeepSeq.NFData Network.AWS.ECR.Types.ImageScanningConfiguration.ImageScanningConfiguration
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.Types.ImageScanningConfiguration.ImageScanningConfiguration


module Network.AWS.ECR.Types.ImageTagMutability
newtype ImageTagMutability
ImageTagMutability' :: Text -> ImageTagMutability
[fromImageTagMutability] :: ImageTagMutability -> Text
pattern ImageTagMutability_IMMUTABLE :: ImageTagMutability
pattern ImageTagMutability_MUTABLE :: ImageTagMutability
instance Network.AWS.Data.XML.ToXML Network.AWS.ECR.Types.ImageTagMutability.ImageTagMutability
instance Network.AWS.Data.XML.FromXML Network.AWS.ECR.Types.ImageTagMutability.ImageTagMutability
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.ECR.Types.ImageTagMutability.ImageTagMutability
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.Types.ImageTagMutability.ImageTagMutability
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.ECR.Types.ImageTagMutability.ImageTagMutability
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.ECR.Types.ImageTagMutability.ImageTagMutability
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.Types.ImageTagMutability.ImageTagMutability
instance Network.AWS.Data.Headers.ToHeader Network.AWS.ECR.Types.ImageTagMutability.ImageTagMutability
instance Network.AWS.Data.Log.ToLog Network.AWS.ECR.Types.ImageTagMutability.ImageTagMutability
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.ECR.Types.ImageTagMutability.ImageTagMutability
instance Network.AWS.Data.Text.ToText Network.AWS.ECR.Types.ImageTagMutability.ImageTagMutability
instance Network.AWS.Data.Text.FromText Network.AWS.ECR.Types.ImageTagMutability.ImageTagMutability
instance Control.DeepSeq.NFData Network.AWS.ECR.Types.ImageTagMutability.ImageTagMutability
instance Data.Hashable.Class.Hashable Network.AWS.ECR.Types.ImageTagMutability.ImageTagMutability
instance GHC.Generics.Generic Network.AWS.ECR.Types.ImageTagMutability.ImageTagMutability
instance GHC.Classes.Ord Network.AWS.ECR.Types.ImageTagMutability.ImageTagMutability
instance GHC.Classes.Eq Network.AWS.ECR.Types.ImageTagMutability.ImageTagMutability
instance GHC.Read.Read Network.AWS.ECR.Types.ImageTagMutability.ImageTagMutability
instance GHC.Show.Show Network.AWS.ECR.Types.ImageTagMutability.ImageTagMutability


module Network.AWS.ECR.Types.LayerAvailability
newtype LayerAvailability
LayerAvailability' :: Text -> LayerAvailability
[fromLayerAvailability] :: LayerAvailability -> Text
pattern LayerAvailability_AVAILABLE :: LayerAvailability
pattern LayerAvailability_UNAVAILABLE :: LayerAvailability
instance Network.AWS.Data.XML.ToXML Network.AWS.ECR.Types.LayerAvailability.LayerAvailability
instance Network.AWS.Data.XML.FromXML Network.AWS.ECR.Types.LayerAvailability.LayerAvailability
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.ECR.Types.LayerAvailability.LayerAvailability
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.Types.LayerAvailability.LayerAvailability
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.ECR.Types.LayerAvailability.LayerAvailability
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.ECR.Types.LayerAvailability.LayerAvailability
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.Types.LayerAvailability.LayerAvailability
instance Network.AWS.Data.Headers.ToHeader Network.AWS.ECR.Types.LayerAvailability.LayerAvailability
instance Network.AWS.Data.Log.ToLog Network.AWS.ECR.Types.LayerAvailability.LayerAvailability
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.ECR.Types.LayerAvailability.LayerAvailability
instance Network.AWS.Data.Text.ToText Network.AWS.ECR.Types.LayerAvailability.LayerAvailability
instance Network.AWS.Data.Text.FromText Network.AWS.ECR.Types.LayerAvailability.LayerAvailability
instance Control.DeepSeq.NFData Network.AWS.ECR.Types.LayerAvailability.LayerAvailability
instance Data.Hashable.Class.Hashable Network.AWS.ECR.Types.LayerAvailability.LayerAvailability
instance GHC.Generics.Generic Network.AWS.ECR.Types.LayerAvailability.LayerAvailability
instance GHC.Classes.Ord Network.AWS.ECR.Types.LayerAvailability.LayerAvailability
instance GHC.Classes.Eq Network.AWS.ECR.Types.LayerAvailability.LayerAvailability
instance GHC.Read.Read Network.AWS.ECR.Types.LayerAvailability.LayerAvailability
instance GHC.Show.Show Network.AWS.ECR.Types.LayerAvailability.LayerAvailability


module Network.AWS.ECR.Types.Layer

-- | An object representing an Amazon ECR image layer.
--   
--   <i>See:</i> <a>newLayer</a> smart constructor.
data Layer
Layer' :: Maybe Integer -> Maybe LayerAvailability -> Maybe Text -> Maybe Text -> Layer

-- | The size, in bytes, of the image layer.
[$sel:layerSize:Layer'] :: Layer -> Maybe Integer

-- | The availability status of the image layer.
[$sel:layerAvailability:Layer'] :: Layer -> Maybe LayerAvailability

-- | The media type of the layer, such as
--   <tt>application/vnd.docker.image.rootfs.diff.tar.gzip</tt> or
--   <tt>application/vnd.oci.image.layer.v1.tar+gzip</tt>.
[$sel:mediaType:Layer'] :: Layer -> Maybe Text

-- | The <tt>sha256</tt> digest of the image layer.
[$sel:layerDigest:Layer'] :: Layer -> Maybe Text

-- | Create a value of <a>Layer</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:layerSize:Layer'</a>, <a>layer_layerSize</a> - The size, in
--   bytes, of the image layer.
--   
--   <a>$sel:layerAvailability:Layer'</a>, <a>layer_layerAvailability</a> -
--   The availability status of the image layer.
--   
--   <a>$sel:mediaType:Layer'</a>, <a>layer_mediaType</a> - The media type
--   of the layer, such as
--   <tt>application/vnd.docker.image.rootfs.diff.tar.gzip</tt> or
--   <tt>application/vnd.oci.image.layer.v1.tar+gzip</tt>.
--   
--   <a>$sel:layerDigest:Layer'</a>, <a>layer_layerDigest</a> - The
--   <tt>sha256</tt> digest of the image layer.
newLayer :: Layer

-- | The size, in bytes, of the image layer.
layer_layerSize :: Lens' Layer (Maybe Integer)

-- | The availability status of the image layer.
layer_layerAvailability :: Lens' Layer (Maybe LayerAvailability)

-- | The media type of the layer, such as
--   <tt>application/vnd.docker.image.rootfs.diff.tar.gzip</tt> or
--   <tt>application/vnd.oci.image.layer.v1.tar+gzip</tt>.
layer_mediaType :: Lens' Layer (Maybe Text)

-- | The <tt>sha256</tt> digest of the image layer.
layer_layerDigest :: Lens' Layer (Maybe Text)
instance GHC.Generics.Generic Network.AWS.ECR.Types.Layer.Layer
instance GHC.Show.Show Network.AWS.ECR.Types.Layer.Layer
instance GHC.Read.Read Network.AWS.ECR.Types.Layer.Layer
instance GHC.Classes.Eq Network.AWS.ECR.Types.Layer.Layer
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.ECR.Types.Layer.Layer
instance Data.Hashable.Class.Hashable Network.AWS.ECR.Types.Layer.Layer
instance Control.DeepSeq.NFData Network.AWS.ECR.Types.Layer.Layer


module Network.AWS.ECR.Types.LayerFailureCode
newtype LayerFailureCode
LayerFailureCode' :: Text -> LayerFailureCode
[fromLayerFailureCode] :: LayerFailureCode -> Text
pattern LayerFailureCode_InvalidLayerDigest :: LayerFailureCode
pattern LayerFailureCode_MissingLayerDigest :: LayerFailureCode
instance Network.AWS.Data.XML.ToXML Network.AWS.ECR.Types.LayerFailureCode.LayerFailureCode
instance Network.AWS.Data.XML.FromXML Network.AWS.ECR.Types.LayerFailureCode.LayerFailureCode
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.ECR.Types.LayerFailureCode.LayerFailureCode
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.Types.LayerFailureCode.LayerFailureCode
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.ECR.Types.LayerFailureCode.LayerFailureCode
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.ECR.Types.LayerFailureCode.LayerFailureCode
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.Types.LayerFailureCode.LayerFailureCode
instance Network.AWS.Data.Headers.ToHeader Network.AWS.ECR.Types.LayerFailureCode.LayerFailureCode
instance Network.AWS.Data.Log.ToLog Network.AWS.ECR.Types.LayerFailureCode.LayerFailureCode
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.ECR.Types.LayerFailureCode.LayerFailureCode
instance Network.AWS.Data.Text.ToText Network.AWS.ECR.Types.LayerFailureCode.LayerFailureCode
instance Network.AWS.Data.Text.FromText Network.AWS.ECR.Types.LayerFailureCode.LayerFailureCode
instance Control.DeepSeq.NFData Network.AWS.ECR.Types.LayerFailureCode.LayerFailureCode
instance Data.Hashable.Class.Hashable Network.AWS.ECR.Types.LayerFailureCode.LayerFailureCode
instance GHC.Generics.Generic Network.AWS.ECR.Types.LayerFailureCode.LayerFailureCode
instance GHC.Classes.Ord Network.AWS.ECR.Types.LayerFailureCode.LayerFailureCode
instance GHC.Classes.Eq Network.AWS.ECR.Types.LayerFailureCode.LayerFailureCode
instance GHC.Read.Read Network.AWS.ECR.Types.LayerFailureCode.LayerFailureCode
instance GHC.Show.Show Network.AWS.ECR.Types.LayerFailureCode.LayerFailureCode


module Network.AWS.ECR.Types.LayerFailure

-- | An object representing an Amazon ECR image layer failure.
--   
--   <i>See:</i> <a>newLayerFailure</a> smart constructor.
data LayerFailure
LayerFailure' :: Maybe LayerFailureCode -> Maybe Text -> Maybe Text -> LayerFailure

-- | The failure code associated with the failure.
[$sel:failureCode:LayerFailure'] :: LayerFailure -> Maybe LayerFailureCode

-- | The reason for the failure.
[$sel:failureReason:LayerFailure'] :: LayerFailure -> Maybe Text

-- | The layer digest associated with the failure.
[$sel:layerDigest:LayerFailure'] :: LayerFailure -> Maybe Text

-- | Create a value of <a>LayerFailure</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failureCode:LayerFailure'</a>, <a>layerFailure_failureCode</a>
--   - The failure code associated with the failure.
--   
--   <a>$sel:failureReason:LayerFailure'</a>,
--   <a>layerFailure_failureReason</a> - The reason for the failure.
--   
--   <a>$sel:layerDigest:LayerFailure'</a>, <a>layerFailure_layerDigest</a>
--   - The layer digest associated with the failure.
newLayerFailure :: LayerFailure

-- | The failure code associated with the failure.
layerFailure_failureCode :: Lens' LayerFailure (Maybe LayerFailureCode)

-- | The reason for the failure.
layerFailure_failureReason :: Lens' LayerFailure (Maybe Text)

-- | The layer digest associated with the failure.
layerFailure_layerDigest :: Lens' LayerFailure (Maybe Text)
instance GHC.Generics.Generic Network.AWS.ECR.Types.LayerFailure.LayerFailure
instance GHC.Show.Show Network.AWS.ECR.Types.LayerFailure.LayerFailure
instance GHC.Read.Read Network.AWS.ECR.Types.LayerFailure.LayerFailure
instance GHC.Classes.Eq Network.AWS.ECR.Types.LayerFailure.LayerFailure
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.ECR.Types.LayerFailure.LayerFailure
instance Data.Hashable.Class.Hashable Network.AWS.ECR.Types.LayerFailure.LayerFailure
instance Control.DeepSeq.NFData Network.AWS.ECR.Types.LayerFailure.LayerFailure


module Network.AWS.ECR.Types.LifecyclePolicyPreviewStatus
newtype LifecyclePolicyPreviewStatus
LifecyclePolicyPreviewStatus' :: Text -> LifecyclePolicyPreviewStatus
[fromLifecyclePolicyPreviewStatus] :: LifecyclePolicyPreviewStatus -> Text
pattern LifecyclePolicyPreviewStatus_COMPLETE :: LifecyclePolicyPreviewStatus
pattern LifecyclePolicyPreviewStatus_EXPIRED :: LifecyclePolicyPreviewStatus
pattern LifecyclePolicyPreviewStatus_FAILED :: LifecyclePolicyPreviewStatus
pattern LifecyclePolicyPreviewStatus_IN_PROGRESS :: LifecyclePolicyPreviewStatus
instance Network.AWS.Data.XML.ToXML Network.AWS.ECR.Types.LifecyclePolicyPreviewStatus.LifecyclePolicyPreviewStatus
instance Network.AWS.Data.XML.FromXML Network.AWS.ECR.Types.LifecyclePolicyPreviewStatus.LifecyclePolicyPreviewStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.ECR.Types.LifecyclePolicyPreviewStatus.LifecyclePolicyPreviewStatus
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.Types.LifecyclePolicyPreviewStatus.LifecyclePolicyPreviewStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.ECR.Types.LifecyclePolicyPreviewStatus.LifecyclePolicyPreviewStatus
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.ECR.Types.LifecyclePolicyPreviewStatus.LifecyclePolicyPreviewStatus
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.Types.LifecyclePolicyPreviewStatus.LifecyclePolicyPreviewStatus
instance Network.AWS.Data.Headers.ToHeader Network.AWS.ECR.Types.LifecyclePolicyPreviewStatus.LifecyclePolicyPreviewStatus
instance Network.AWS.Data.Log.ToLog Network.AWS.ECR.Types.LifecyclePolicyPreviewStatus.LifecyclePolicyPreviewStatus
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.ECR.Types.LifecyclePolicyPreviewStatus.LifecyclePolicyPreviewStatus
instance Network.AWS.Data.Text.ToText Network.AWS.ECR.Types.LifecyclePolicyPreviewStatus.LifecyclePolicyPreviewStatus
instance Network.AWS.Data.Text.FromText Network.AWS.ECR.Types.LifecyclePolicyPreviewStatus.LifecyclePolicyPreviewStatus
instance Control.DeepSeq.NFData Network.AWS.ECR.Types.LifecyclePolicyPreviewStatus.LifecyclePolicyPreviewStatus
instance Data.Hashable.Class.Hashable Network.AWS.ECR.Types.LifecyclePolicyPreviewStatus.LifecyclePolicyPreviewStatus
instance GHC.Generics.Generic Network.AWS.ECR.Types.LifecyclePolicyPreviewStatus.LifecyclePolicyPreviewStatus
instance GHC.Classes.Ord Network.AWS.ECR.Types.LifecyclePolicyPreviewStatus.LifecyclePolicyPreviewStatus
instance GHC.Classes.Eq Network.AWS.ECR.Types.LifecyclePolicyPreviewStatus.LifecyclePolicyPreviewStatus
instance GHC.Read.Read Network.AWS.ECR.Types.LifecyclePolicyPreviewStatus.LifecyclePolicyPreviewStatus
instance GHC.Show.Show Network.AWS.ECR.Types.LifecyclePolicyPreviewStatus.LifecyclePolicyPreviewStatus


module Network.AWS.ECR.Types.LifecyclePolicyPreviewSummary

-- | The summary of the lifecycle policy preview request.
--   
--   <i>See:</i> <a>newLifecyclePolicyPreviewSummary</a> smart constructor.
data LifecyclePolicyPreviewSummary
LifecyclePolicyPreviewSummary' :: Maybe Natural -> LifecyclePolicyPreviewSummary

-- | The number of expiring images.
[$sel:expiringImageTotalCount:LifecyclePolicyPreviewSummary'] :: LifecyclePolicyPreviewSummary -> Maybe Natural

-- | Create a value of <a>LifecyclePolicyPreviewSummary</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:expiringImageTotalCount:LifecyclePolicyPreviewSummary'</a>,
--   <a>lifecyclePolicyPreviewSummary_expiringImageTotalCount</a> - The
--   number of expiring images.
newLifecyclePolicyPreviewSummary :: LifecyclePolicyPreviewSummary

-- | The number of expiring images.
lifecyclePolicyPreviewSummary_expiringImageTotalCount :: Lens' LifecyclePolicyPreviewSummary (Maybe Natural)
instance GHC.Generics.Generic Network.AWS.ECR.Types.LifecyclePolicyPreviewSummary.LifecyclePolicyPreviewSummary
instance GHC.Show.Show Network.AWS.ECR.Types.LifecyclePolicyPreviewSummary.LifecyclePolicyPreviewSummary
instance GHC.Read.Read Network.AWS.ECR.Types.LifecyclePolicyPreviewSummary.LifecyclePolicyPreviewSummary
instance GHC.Classes.Eq Network.AWS.ECR.Types.LifecyclePolicyPreviewSummary.LifecyclePolicyPreviewSummary
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.ECR.Types.LifecyclePolicyPreviewSummary.LifecyclePolicyPreviewSummary
instance Data.Hashable.Class.Hashable Network.AWS.ECR.Types.LifecyclePolicyPreviewSummary.LifecyclePolicyPreviewSummary
instance Control.DeepSeq.NFData Network.AWS.ECR.Types.LifecyclePolicyPreviewSummary.LifecyclePolicyPreviewSummary


module Network.AWS.ECR.Types.LifecyclePolicyRuleAction

-- | The type of action to be taken.
--   
--   <i>See:</i> <a>newLifecyclePolicyRuleAction</a> smart constructor.
data LifecyclePolicyRuleAction
LifecyclePolicyRuleAction' :: Maybe ImageActionType -> LifecyclePolicyRuleAction

-- | The type of action to be taken.
[$sel:type':LifecyclePolicyRuleAction'] :: LifecyclePolicyRuleAction -> Maybe ImageActionType

-- | Create a value of <a>LifecyclePolicyRuleAction</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:type':LifecyclePolicyRuleAction'</a>,
--   <a>lifecyclePolicyRuleAction_type</a> - The type of action to be
--   taken.
newLifecyclePolicyRuleAction :: LifecyclePolicyRuleAction

-- | The type of action to be taken.
lifecyclePolicyRuleAction_type :: Lens' LifecyclePolicyRuleAction (Maybe ImageActionType)
instance GHC.Generics.Generic Network.AWS.ECR.Types.LifecyclePolicyRuleAction.LifecyclePolicyRuleAction
instance GHC.Show.Show Network.AWS.ECR.Types.LifecyclePolicyRuleAction.LifecyclePolicyRuleAction
instance GHC.Read.Read Network.AWS.ECR.Types.LifecyclePolicyRuleAction.LifecyclePolicyRuleAction
instance GHC.Classes.Eq Network.AWS.ECR.Types.LifecyclePolicyRuleAction.LifecyclePolicyRuleAction
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.ECR.Types.LifecyclePolicyRuleAction.LifecyclePolicyRuleAction
instance Data.Hashable.Class.Hashable Network.AWS.ECR.Types.LifecyclePolicyRuleAction.LifecyclePolicyRuleAction
instance Control.DeepSeq.NFData Network.AWS.ECR.Types.LifecyclePolicyRuleAction.LifecyclePolicyRuleAction


module Network.AWS.ECR.Types.LifecyclePolicyPreviewResult

-- | The result of the lifecycle policy preview.
--   
--   <i>See:</i> <a>newLifecyclePolicyPreviewResult</a> smart constructor.
data LifecyclePolicyPreviewResult
LifecyclePolicyPreviewResult' :: Maybe Text -> Maybe Natural -> Maybe [Text] -> Maybe LifecyclePolicyRuleAction -> Maybe POSIX -> LifecyclePolicyPreviewResult

-- | The <tt>sha256</tt> digest of the image manifest.
[$sel:imageDigest:LifecyclePolicyPreviewResult'] :: LifecyclePolicyPreviewResult -> Maybe Text

-- | The priority of the applied rule.
[$sel:appliedRulePriority:LifecyclePolicyPreviewResult'] :: LifecyclePolicyPreviewResult -> Maybe Natural

-- | The list of tags associated with this image.
[$sel:imageTags:LifecyclePolicyPreviewResult'] :: LifecyclePolicyPreviewResult -> Maybe [Text]

-- | The type of action to be taken.
[$sel:action:LifecyclePolicyPreviewResult'] :: LifecyclePolicyPreviewResult -> Maybe LifecyclePolicyRuleAction

-- | The date and time, expressed in standard JavaScript date format, at
--   which the current image was pushed to the repository.
[$sel:imagePushedAt:LifecyclePolicyPreviewResult'] :: LifecyclePolicyPreviewResult -> Maybe POSIX

-- | Create a value of <a>LifecyclePolicyPreviewResult</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:imageDigest:LifecyclePolicyPreviewResult'</a>,
--   <a>lifecyclePolicyPreviewResult_imageDigest</a> - The <tt>sha256</tt>
--   digest of the image manifest.
--   
--   <a>$sel:appliedRulePriority:LifecyclePolicyPreviewResult'</a>,
--   <a>lifecyclePolicyPreviewResult_appliedRulePriority</a> - The priority
--   of the applied rule.
--   
--   <a>$sel:imageTags:LifecyclePolicyPreviewResult'</a>,
--   <a>lifecyclePolicyPreviewResult_imageTags</a> - The list of tags
--   associated with this image.
--   
--   <a>$sel:action:LifecyclePolicyPreviewResult'</a>,
--   <a>lifecyclePolicyPreviewResult_action</a> - The type of action to be
--   taken.
--   
--   <a>$sel:imagePushedAt:LifecyclePolicyPreviewResult'</a>,
--   <a>lifecyclePolicyPreviewResult_imagePushedAt</a> - The date and time,
--   expressed in standard JavaScript date format, at which the current
--   image was pushed to the repository.
newLifecyclePolicyPreviewResult :: LifecyclePolicyPreviewResult

-- | The <tt>sha256</tt> digest of the image manifest.
lifecyclePolicyPreviewResult_imageDigest :: Lens' LifecyclePolicyPreviewResult (Maybe Text)

-- | The priority of the applied rule.
lifecyclePolicyPreviewResult_appliedRulePriority :: Lens' LifecyclePolicyPreviewResult (Maybe Natural)

-- | The list of tags associated with this image.
lifecyclePolicyPreviewResult_imageTags :: Lens' LifecyclePolicyPreviewResult (Maybe [Text])

-- | The type of action to be taken.
lifecyclePolicyPreviewResult_action :: Lens' LifecyclePolicyPreviewResult (Maybe LifecyclePolicyRuleAction)

-- | The date and time, expressed in standard JavaScript date format, at
--   which the current image was pushed to the repository.
lifecyclePolicyPreviewResult_imagePushedAt :: Lens' LifecyclePolicyPreviewResult (Maybe UTCTime)
instance GHC.Generics.Generic Network.AWS.ECR.Types.LifecyclePolicyPreviewResult.LifecyclePolicyPreviewResult
instance GHC.Show.Show Network.AWS.ECR.Types.LifecyclePolicyPreviewResult.LifecyclePolicyPreviewResult
instance GHC.Read.Read Network.AWS.ECR.Types.LifecyclePolicyPreviewResult.LifecyclePolicyPreviewResult
instance GHC.Classes.Eq Network.AWS.ECR.Types.LifecyclePolicyPreviewResult.LifecyclePolicyPreviewResult
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.ECR.Types.LifecyclePolicyPreviewResult.LifecyclePolicyPreviewResult
instance Data.Hashable.Class.Hashable Network.AWS.ECR.Types.LifecyclePolicyPreviewResult.LifecyclePolicyPreviewResult
instance Control.DeepSeq.NFData Network.AWS.ECR.Types.LifecyclePolicyPreviewResult.LifecyclePolicyPreviewResult


module Network.AWS.ECR.Types.ReplicationDestination

-- | An array of objects representing the destination for a replication
--   rule.
--   
--   <i>See:</i> <a>newReplicationDestination</a> smart constructor.
data ReplicationDestination
ReplicationDestination' :: Text -> Text -> ReplicationDestination

-- | The Region to replicate to.
[$sel:region:ReplicationDestination'] :: ReplicationDestination -> Text

-- | The Amazon Web Services account ID of the Amazon ECR private registry
--   to replicate to. When configuring cross-Region replication within your
--   own registry, specify your own account ID.
[$sel:registryId:ReplicationDestination'] :: ReplicationDestination -> Text

-- | Create a value of <a>ReplicationDestination</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:region:ReplicationDestination'</a>,
--   <a>replicationDestination_region</a> - The Region to replicate to.
--   
--   <a>$sel:registryId:ReplicationDestination'</a>,
--   <a>replicationDestination_registryId</a> - The Amazon Web Services
--   account ID of the Amazon ECR private registry to replicate to. When
--   configuring cross-Region replication within your own registry, specify
--   your own account ID.
newReplicationDestination :: Text -> Text -> ReplicationDestination

-- | The Region to replicate to.
replicationDestination_region :: Lens' ReplicationDestination Text

-- | The Amazon Web Services account ID of the Amazon ECR private registry
--   to replicate to. When configuring cross-Region replication within your
--   own registry, specify your own account ID.
replicationDestination_registryId :: Lens' ReplicationDestination Text
instance GHC.Generics.Generic Network.AWS.ECR.Types.ReplicationDestination.ReplicationDestination
instance GHC.Show.Show Network.AWS.ECR.Types.ReplicationDestination.ReplicationDestination
instance GHC.Read.Read Network.AWS.ECR.Types.ReplicationDestination.ReplicationDestination
instance GHC.Classes.Eq Network.AWS.ECR.Types.ReplicationDestination.ReplicationDestination
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.ECR.Types.ReplicationDestination.ReplicationDestination
instance Data.Hashable.Class.Hashable Network.AWS.ECR.Types.ReplicationDestination.ReplicationDestination
instance Control.DeepSeq.NFData Network.AWS.ECR.Types.ReplicationDestination.ReplicationDestination
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.Types.ReplicationDestination.ReplicationDestination


module Network.AWS.ECR.Types.ReplicationStatus
newtype ReplicationStatus
ReplicationStatus' :: Text -> ReplicationStatus
[fromReplicationStatus] :: ReplicationStatus -> Text
pattern ReplicationStatus_COMPLETE :: ReplicationStatus
pattern ReplicationStatus_FAILED :: ReplicationStatus
pattern ReplicationStatus_IN_PROGRESS :: ReplicationStatus
instance Network.AWS.Data.XML.ToXML Network.AWS.ECR.Types.ReplicationStatus.ReplicationStatus
instance Network.AWS.Data.XML.FromXML Network.AWS.ECR.Types.ReplicationStatus.ReplicationStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.ECR.Types.ReplicationStatus.ReplicationStatus
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.Types.ReplicationStatus.ReplicationStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.ECR.Types.ReplicationStatus.ReplicationStatus
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.ECR.Types.ReplicationStatus.ReplicationStatus
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.Types.ReplicationStatus.ReplicationStatus
instance Network.AWS.Data.Headers.ToHeader Network.AWS.ECR.Types.ReplicationStatus.ReplicationStatus
instance Network.AWS.Data.Log.ToLog Network.AWS.ECR.Types.ReplicationStatus.ReplicationStatus
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.ECR.Types.ReplicationStatus.ReplicationStatus
instance Network.AWS.Data.Text.ToText Network.AWS.ECR.Types.ReplicationStatus.ReplicationStatus
instance Network.AWS.Data.Text.FromText Network.AWS.ECR.Types.ReplicationStatus.ReplicationStatus
instance Control.DeepSeq.NFData Network.AWS.ECR.Types.ReplicationStatus.ReplicationStatus
instance Data.Hashable.Class.Hashable Network.AWS.ECR.Types.ReplicationStatus.ReplicationStatus
instance GHC.Generics.Generic Network.AWS.ECR.Types.ReplicationStatus.ReplicationStatus
instance GHC.Classes.Ord Network.AWS.ECR.Types.ReplicationStatus.ReplicationStatus
instance GHC.Classes.Eq Network.AWS.ECR.Types.ReplicationStatus.ReplicationStatus
instance GHC.Read.Read Network.AWS.ECR.Types.ReplicationStatus.ReplicationStatus
instance GHC.Show.Show Network.AWS.ECR.Types.ReplicationStatus.ReplicationStatus


module Network.AWS.ECR.Types.ImageReplicationStatus

-- | The status of the replication process for an image.
--   
--   <i>See:</i> <a>newImageReplicationStatus</a> smart constructor.
data ImageReplicationStatus
ImageReplicationStatus' :: Maybe ReplicationStatus -> Maybe Text -> Maybe Text -> Maybe Text -> ImageReplicationStatus

-- | The image replication status.
[$sel:status:ImageReplicationStatus'] :: ImageReplicationStatus -> Maybe ReplicationStatus

-- | The AWS account ID associated with the registry to which the image
--   belongs.
[$sel:registryId:ImageReplicationStatus'] :: ImageReplicationStatus -> Maybe Text

-- | The failure code for a replication that has failed.
[$sel:failureCode:ImageReplicationStatus'] :: ImageReplicationStatus -> Maybe Text

-- | The destination Region for the image replication.
[$sel:region:ImageReplicationStatus'] :: ImageReplicationStatus -> Maybe Text

-- | Create a value of <a>ImageReplicationStatus</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:ImageReplicationStatus'</a>,
--   <a>imageReplicationStatus_status</a> - The image replication status.
--   
--   <a>$sel:registryId:ImageReplicationStatus'</a>,
--   <a>imageReplicationStatus_registryId</a> - The AWS account ID
--   associated with the registry to which the image belongs.
--   
--   <a>$sel:failureCode:ImageReplicationStatus'</a>,
--   <a>imageReplicationStatus_failureCode</a> - The failure code for a
--   replication that has failed.
--   
--   <a>$sel:region:ImageReplicationStatus'</a>,
--   <a>imageReplicationStatus_region</a> - The destination Region for the
--   image replication.
newImageReplicationStatus :: ImageReplicationStatus

-- | The image replication status.
imageReplicationStatus_status :: Lens' ImageReplicationStatus (Maybe ReplicationStatus)

-- | The AWS account ID associated with the registry to which the image
--   belongs.
imageReplicationStatus_registryId :: Lens' ImageReplicationStatus (Maybe Text)

-- | The failure code for a replication that has failed.
imageReplicationStatus_failureCode :: Lens' ImageReplicationStatus (Maybe Text)

-- | The destination Region for the image replication.
imageReplicationStatus_region :: Lens' ImageReplicationStatus (Maybe Text)
instance GHC.Generics.Generic Network.AWS.ECR.Types.ImageReplicationStatus.ImageReplicationStatus
instance GHC.Show.Show Network.AWS.ECR.Types.ImageReplicationStatus.ImageReplicationStatus
instance GHC.Read.Read Network.AWS.ECR.Types.ImageReplicationStatus.ImageReplicationStatus
instance GHC.Classes.Eq Network.AWS.ECR.Types.ImageReplicationStatus.ImageReplicationStatus
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.ECR.Types.ImageReplicationStatus.ImageReplicationStatus
instance Data.Hashable.Class.Hashable Network.AWS.ECR.Types.ImageReplicationStatus.ImageReplicationStatus
instance Control.DeepSeq.NFData Network.AWS.ECR.Types.ImageReplicationStatus.ImageReplicationStatus


module Network.AWS.ECR.Types.Repository

-- | An object representing a repository.
--   
--   <i>See:</i> <a>newRepository</a> smart constructor.
data Repository
Repository' :: Maybe EncryptionConfiguration -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe ImageScanningConfiguration -> Maybe ImageTagMutability -> Repository

-- | The encryption configuration for the repository. This determines how
--   the contents of your repository are encrypted at rest.
[$sel:encryptionConfiguration:Repository'] :: Repository -> Maybe EncryptionConfiguration

-- | The URI for the repository. You can use this URI for container image
--   <tt>push</tt> and <tt>pull</tt> operations.
[$sel:repositoryUri:Repository'] :: Repository -> Maybe Text

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository.
[$sel:registryId:Repository'] :: Repository -> Maybe Text

-- | The date and time, in JavaScript date format, when the repository was
--   created.
[$sel:createdAt:Repository'] :: Repository -> Maybe POSIX

-- | The name of the repository.
[$sel:repositoryName:Repository'] :: Repository -> Maybe Text

-- | The Amazon Resource Name (ARN) that identifies the repository. The ARN
--   contains the <tt>arn:aws:ecr</tt> namespace, followed by the region of
--   the repository, Amazon Web Services account ID of the repository
--   owner, repository namespace, and repository name. For example,
--   <tt>arn:aws:ecr:region:012345678910:repository/test</tt>.
[$sel:repositoryArn:Repository'] :: Repository -> Maybe Text
[$sel:imageScanningConfiguration:Repository'] :: Repository -> Maybe ImageScanningConfiguration

-- | The tag mutability setting for the repository.
[$sel:imageTagMutability:Repository'] :: Repository -> Maybe ImageTagMutability

-- | Create a value of <a>Repository</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:encryptionConfiguration:Repository'</a>,
--   <a>repository_encryptionConfiguration</a> - The encryption
--   configuration for the repository. This determines how the contents of
--   your repository are encrypted at rest.
--   
--   <a>$sel:repositoryUri:Repository'</a>, <a>repository_repositoryUri</a>
--   - The URI for the repository. You can use this URI for container image
--   <tt>push</tt> and <tt>pull</tt> operations.
--   
--   <a>$sel:registryId:Repository'</a>, <a>repository_registryId</a> - The
--   Amazon Web Services account ID associated with the registry that
--   contains the repository.
--   
--   <a>$sel:createdAt:Repository'</a>, <a>repository_createdAt</a> - The
--   date and time, in JavaScript date format, when the repository was
--   created.
--   
--   <a>$sel:repositoryName:Repository'</a>,
--   <a>repository_repositoryName</a> - The name of the repository.
--   
--   <a>$sel:repositoryArn:Repository'</a>, <a>repository_repositoryArn</a>
--   - The Amazon Resource Name (ARN) that identifies the repository. The
--   ARN contains the <tt>arn:aws:ecr</tt> namespace, followed by the
--   region of the repository, Amazon Web Services account ID of the
--   repository owner, repository namespace, and repository name. For
--   example, <tt>arn:aws:ecr:region:012345678910:repository/test</tt>.
--   
--   <a>$sel:imageScanningConfiguration:Repository'</a>,
--   <a>repository_imageScanningConfiguration</a> - Undocumented member.
--   
--   <a>$sel:imageTagMutability:Repository'</a>,
--   <a>repository_imageTagMutability</a> - The tag mutability setting for
--   the repository.
newRepository :: Repository

-- | The encryption configuration for the repository. This determines how
--   the contents of your repository are encrypted at rest.
repository_encryptionConfiguration :: Lens' Repository (Maybe EncryptionConfiguration)

-- | The URI for the repository. You can use this URI for container image
--   <tt>push</tt> and <tt>pull</tt> operations.
repository_repositoryUri :: Lens' Repository (Maybe Text)

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository.
repository_registryId :: Lens' Repository (Maybe Text)

-- | The date and time, in JavaScript date format, when the repository was
--   created.
repository_createdAt :: Lens' Repository (Maybe UTCTime)

-- | The name of the repository.
repository_repositoryName :: Lens' Repository (Maybe Text)

-- | The Amazon Resource Name (ARN) that identifies the repository. The ARN
--   contains the <tt>arn:aws:ecr</tt> namespace, followed by the region of
--   the repository, Amazon Web Services account ID of the repository
--   owner, repository namespace, and repository name. For example,
--   <tt>arn:aws:ecr:region:012345678910:repository/test</tt>.
repository_repositoryArn :: Lens' Repository (Maybe Text)

-- | Undocumented member.
repository_imageScanningConfiguration :: Lens' Repository (Maybe ImageScanningConfiguration)

-- | The tag mutability setting for the repository.
repository_imageTagMutability :: Lens' Repository (Maybe ImageTagMutability)
instance GHC.Generics.Generic Network.AWS.ECR.Types.Repository.Repository
instance GHC.Show.Show Network.AWS.ECR.Types.Repository.Repository
instance GHC.Read.Read Network.AWS.ECR.Types.Repository.Repository
instance GHC.Classes.Eq Network.AWS.ECR.Types.Repository.Repository
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.ECR.Types.Repository.Repository
instance Data.Hashable.Class.Hashable Network.AWS.ECR.Types.Repository.Repository
instance Control.DeepSeq.NFData Network.AWS.ECR.Types.Repository.Repository


module Network.AWS.ECR.Types.RepositoryFilterType
newtype RepositoryFilterType
RepositoryFilterType' :: Text -> RepositoryFilterType
[fromRepositoryFilterType] :: RepositoryFilterType -> Text
pattern RepositoryFilterType_PREFIX_MATCH :: RepositoryFilterType
instance Network.AWS.Data.XML.ToXML Network.AWS.ECR.Types.RepositoryFilterType.RepositoryFilterType
instance Network.AWS.Data.XML.FromXML Network.AWS.ECR.Types.RepositoryFilterType.RepositoryFilterType
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.ECR.Types.RepositoryFilterType.RepositoryFilterType
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.Types.RepositoryFilterType.RepositoryFilterType
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.ECR.Types.RepositoryFilterType.RepositoryFilterType
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.ECR.Types.RepositoryFilterType.RepositoryFilterType
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.Types.RepositoryFilterType.RepositoryFilterType
instance Network.AWS.Data.Headers.ToHeader Network.AWS.ECR.Types.RepositoryFilterType.RepositoryFilterType
instance Network.AWS.Data.Log.ToLog Network.AWS.ECR.Types.RepositoryFilterType.RepositoryFilterType
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.ECR.Types.RepositoryFilterType.RepositoryFilterType
instance Network.AWS.Data.Text.ToText Network.AWS.ECR.Types.RepositoryFilterType.RepositoryFilterType
instance Network.AWS.Data.Text.FromText Network.AWS.ECR.Types.RepositoryFilterType.RepositoryFilterType
instance Control.DeepSeq.NFData Network.AWS.ECR.Types.RepositoryFilterType.RepositoryFilterType
instance Data.Hashable.Class.Hashable Network.AWS.ECR.Types.RepositoryFilterType.RepositoryFilterType
instance GHC.Generics.Generic Network.AWS.ECR.Types.RepositoryFilterType.RepositoryFilterType
instance GHC.Classes.Ord Network.AWS.ECR.Types.RepositoryFilterType.RepositoryFilterType
instance GHC.Classes.Eq Network.AWS.ECR.Types.RepositoryFilterType.RepositoryFilterType
instance GHC.Read.Read Network.AWS.ECR.Types.RepositoryFilterType.RepositoryFilterType
instance GHC.Show.Show Network.AWS.ECR.Types.RepositoryFilterType.RepositoryFilterType


module Network.AWS.ECR.Types.RepositoryFilter

-- | The filter settings used with image replication. Specifying a
--   repository filter to a replication rule provides a method for
--   controlling which repositories in a private registry are replicated.
--   If no repository filter is specified, all images in the repository are
--   replicated.
--   
--   <i>See:</i> <a>newRepositoryFilter</a> smart constructor.
data RepositoryFilter
RepositoryFilter' :: Text -> RepositoryFilterType -> RepositoryFilter

-- | The repository filter details. When the <tt>PREFIX_MATCH</tt> filter
--   type is specified, this value is required and should be the repository
--   name prefix to configure replication for.
[$sel:filter':RepositoryFilter'] :: RepositoryFilter -> Text

-- | The repository filter type. The only supported value is
--   <tt>PREFIX_MATCH</tt>, which is a repository name prefix specified
--   with the <tt>filter</tt> parameter.
[$sel:filterType:RepositoryFilter'] :: RepositoryFilter -> RepositoryFilterType

-- | Create a value of <a>RepositoryFilter</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:filter':RepositoryFilter'</a>, <a>repositoryFilter_filter</a>
--   - The repository filter details. When the <tt>PREFIX_MATCH</tt> filter
--   type is specified, this value is required and should be the repository
--   name prefix to configure replication for.
--   
--   <a>$sel:filterType:RepositoryFilter'</a>,
--   <a>repositoryFilter_filterType</a> - The repository filter type. The
--   only supported value is <tt>PREFIX_MATCH</tt>, which is a repository
--   name prefix specified with the <tt>filter</tt> parameter.
newRepositoryFilter :: Text -> RepositoryFilterType -> RepositoryFilter

-- | The repository filter details. When the <tt>PREFIX_MATCH</tt> filter
--   type is specified, this value is required and should be the repository
--   name prefix to configure replication for.
repositoryFilter_filter :: Lens' RepositoryFilter Text

-- | The repository filter type. The only supported value is
--   <tt>PREFIX_MATCH</tt>, which is a repository name prefix specified
--   with the <tt>filter</tt> parameter.
repositoryFilter_filterType :: Lens' RepositoryFilter RepositoryFilterType
instance GHC.Generics.Generic Network.AWS.ECR.Types.RepositoryFilter.RepositoryFilter
instance GHC.Show.Show Network.AWS.ECR.Types.RepositoryFilter.RepositoryFilter
instance GHC.Read.Read Network.AWS.ECR.Types.RepositoryFilter.RepositoryFilter
instance GHC.Classes.Eq Network.AWS.ECR.Types.RepositoryFilter.RepositoryFilter
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.ECR.Types.RepositoryFilter.RepositoryFilter
instance Data.Hashable.Class.Hashable Network.AWS.ECR.Types.RepositoryFilter.RepositoryFilter
instance Control.DeepSeq.NFData Network.AWS.ECR.Types.RepositoryFilter.RepositoryFilter
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.Types.RepositoryFilter.RepositoryFilter


module Network.AWS.ECR.Types.ReplicationRule

-- | An array of objects representing the replication destinations and
--   repository filters for a replication configuration.
--   
--   <i>See:</i> <a>newReplicationRule</a> smart constructor.
data ReplicationRule
ReplicationRule' :: Maybe (NonEmpty RepositoryFilter) -> [ReplicationDestination] -> ReplicationRule

-- | An array of objects representing the filters for a replication rule.
--   Specifying a repository filter for a replication rule provides a
--   method for controlling which repositories in a private registry are
--   replicated.
[$sel:repositoryFilters:ReplicationRule'] :: ReplicationRule -> Maybe (NonEmpty RepositoryFilter)

-- | An array of objects representing the destination for a replication
--   rule.
[$sel:destinations:ReplicationRule'] :: ReplicationRule -> [ReplicationDestination]

-- | Create a value of <a>ReplicationRule</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:repositoryFilters:ReplicationRule'</a>,
--   <a>replicationRule_repositoryFilters</a> - An array of objects
--   representing the filters for a replication rule. Specifying a
--   repository filter for a replication rule provides a method for
--   controlling which repositories in a private registry are replicated.
--   
--   <a>$sel:destinations:ReplicationRule'</a>,
--   <a>replicationRule_destinations</a> - An array of objects representing
--   the destination for a replication rule.
newReplicationRule :: ReplicationRule

-- | An array of objects representing the filters for a replication rule.
--   Specifying a repository filter for a replication rule provides a
--   method for controlling which repositories in a private registry are
--   replicated.
replicationRule_repositoryFilters :: Lens' ReplicationRule (Maybe (NonEmpty RepositoryFilter))

-- | An array of objects representing the destination for a replication
--   rule.
replicationRule_destinations :: Lens' ReplicationRule [ReplicationDestination]
instance GHC.Generics.Generic Network.AWS.ECR.Types.ReplicationRule.ReplicationRule
instance GHC.Show.Show Network.AWS.ECR.Types.ReplicationRule.ReplicationRule
instance GHC.Read.Read Network.AWS.ECR.Types.ReplicationRule.ReplicationRule
instance GHC.Classes.Eq Network.AWS.ECR.Types.ReplicationRule.ReplicationRule
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.ECR.Types.ReplicationRule.ReplicationRule
instance Data.Hashable.Class.Hashable Network.AWS.ECR.Types.ReplicationRule.ReplicationRule
instance Control.DeepSeq.NFData Network.AWS.ECR.Types.ReplicationRule.ReplicationRule
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.Types.ReplicationRule.ReplicationRule


module Network.AWS.ECR.Types.ReplicationConfiguration

-- | The replication configuration for a registry.
--   
--   <i>See:</i> <a>newReplicationConfiguration</a> smart constructor.
data ReplicationConfiguration
ReplicationConfiguration' :: [ReplicationRule] -> ReplicationConfiguration

-- | An array of objects representing the replication destinations and
--   repository filters for a replication configuration.
[$sel:rules:ReplicationConfiguration'] :: ReplicationConfiguration -> [ReplicationRule]

-- | Create a value of <a>ReplicationConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rules:ReplicationConfiguration'</a>,
--   <a>replicationConfiguration_rules</a> - An array of objects
--   representing the replication destinations and repository filters for a
--   replication configuration.
newReplicationConfiguration :: ReplicationConfiguration

-- | An array of objects representing the replication destinations and
--   repository filters for a replication configuration.
replicationConfiguration_rules :: Lens' ReplicationConfiguration [ReplicationRule]
instance GHC.Generics.Generic Network.AWS.ECR.Types.ReplicationConfiguration.ReplicationConfiguration
instance GHC.Show.Show Network.AWS.ECR.Types.ReplicationConfiguration.ReplicationConfiguration
instance GHC.Read.Read Network.AWS.ECR.Types.ReplicationConfiguration.ReplicationConfiguration
instance GHC.Classes.Eq Network.AWS.ECR.Types.ReplicationConfiguration.ReplicationConfiguration
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.ECR.Types.ReplicationConfiguration.ReplicationConfiguration
instance Data.Hashable.Class.Hashable Network.AWS.ECR.Types.ReplicationConfiguration.ReplicationConfiguration
instance Control.DeepSeq.NFData Network.AWS.ECR.Types.ReplicationConfiguration.ReplicationConfiguration
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.Types.ReplicationConfiguration.ReplicationConfiguration


module Network.AWS.ECR.Types.ScanStatus
newtype ScanStatus
ScanStatus' :: Text -> ScanStatus
[fromScanStatus] :: ScanStatus -> Text
pattern ScanStatus_COMPLETE :: ScanStatus
pattern ScanStatus_FAILED :: ScanStatus
pattern ScanStatus_IN_PROGRESS :: ScanStatus
instance Network.AWS.Data.XML.ToXML Network.AWS.ECR.Types.ScanStatus.ScanStatus
instance Network.AWS.Data.XML.FromXML Network.AWS.ECR.Types.ScanStatus.ScanStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.ECR.Types.ScanStatus.ScanStatus
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.Types.ScanStatus.ScanStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.ECR.Types.ScanStatus.ScanStatus
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.ECR.Types.ScanStatus.ScanStatus
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.Types.ScanStatus.ScanStatus
instance Network.AWS.Data.Headers.ToHeader Network.AWS.ECR.Types.ScanStatus.ScanStatus
instance Network.AWS.Data.Log.ToLog Network.AWS.ECR.Types.ScanStatus.ScanStatus
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.ECR.Types.ScanStatus.ScanStatus
instance Network.AWS.Data.Text.ToText Network.AWS.ECR.Types.ScanStatus.ScanStatus
instance Network.AWS.Data.Text.FromText Network.AWS.ECR.Types.ScanStatus.ScanStatus
instance Control.DeepSeq.NFData Network.AWS.ECR.Types.ScanStatus.ScanStatus
instance Data.Hashable.Class.Hashable Network.AWS.ECR.Types.ScanStatus.ScanStatus
instance GHC.Generics.Generic Network.AWS.ECR.Types.ScanStatus.ScanStatus
instance GHC.Classes.Ord Network.AWS.ECR.Types.ScanStatus.ScanStatus
instance GHC.Classes.Eq Network.AWS.ECR.Types.ScanStatus.ScanStatus
instance GHC.Read.Read Network.AWS.ECR.Types.ScanStatus.ScanStatus
instance GHC.Show.Show Network.AWS.ECR.Types.ScanStatus.ScanStatus


module Network.AWS.ECR.Types.ImageScanStatus

-- | The current status of an image scan.
--   
--   <i>See:</i> <a>newImageScanStatus</a> smart constructor.
data ImageScanStatus
ImageScanStatus' :: Maybe ScanStatus -> Maybe Text -> ImageScanStatus

-- | The current state of an image scan.
[$sel:status:ImageScanStatus'] :: ImageScanStatus -> Maybe ScanStatus

-- | The description of the image scan status.
[$sel:description:ImageScanStatus'] :: ImageScanStatus -> Maybe Text

-- | Create a value of <a>ImageScanStatus</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:ImageScanStatus'</a>, <a>imageScanStatus_status</a> -
--   The current state of an image scan.
--   
--   <a>$sel:description:ImageScanStatus'</a>,
--   <a>imageScanStatus_description</a> - The description of the image scan
--   status.
newImageScanStatus :: ImageScanStatus

-- | The current state of an image scan.
imageScanStatus_status :: Lens' ImageScanStatus (Maybe ScanStatus)

-- | The description of the image scan status.
imageScanStatus_description :: Lens' ImageScanStatus (Maybe Text)
instance GHC.Generics.Generic Network.AWS.ECR.Types.ImageScanStatus.ImageScanStatus
instance GHC.Show.Show Network.AWS.ECR.Types.ImageScanStatus.ImageScanStatus
instance GHC.Read.Read Network.AWS.ECR.Types.ImageScanStatus.ImageScanStatus
instance GHC.Classes.Eq Network.AWS.ECR.Types.ImageScanStatus.ImageScanStatus
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.ECR.Types.ImageScanStatus.ImageScanStatus
instance Data.Hashable.Class.Hashable Network.AWS.ECR.Types.ImageScanStatus.ImageScanStatus
instance Control.DeepSeq.NFData Network.AWS.ECR.Types.ImageScanStatus.ImageScanStatus


module Network.AWS.ECR.Types.ImageDetail

-- | An object that describes an image returned by a DescribeImages
--   operation.
--   
--   <i>See:</i> <a>newImageDetail</a> smart constructor.
data ImageDetail
ImageDetail' :: Maybe Text -> Maybe ImageScanStatus -> Maybe [Text] -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Integer -> Maybe Text -> Maybe POSIX -> Maybe ImageScanFindingsSummary -> ImageDetail

-- | The <tt>sha256</tt> digest of the image manifest.
[$sel:imageDigest:ImageDetail'] :: ImageDetail -> Maybe Text

-- | The current state of the scan.
[$sel:imageScanStatus:ImageDetail'] :: ImageDetail -> Maybe ImageScanStatus

-- | The list of tags associated with this image.
[$sel:imageTags:ImageDetail'] :: ImageDetail -> Maybe [Text]

-- | The Amazon Web Services account ID associated with the registry to
--   which this image belongs.
[$sel:registryId:ImageDetail'] :: ImageDetail -> Maybe Text

-- | The name of the repository to which this image belongs.
[$sel:repositoryName:ImageDetail'] :: ImageDetail -> Maybe Text

-- | The artifact media type of the image.
[$sel:artifactMediaType:ImageDetail'] :: ImageDetail -> Maybe Text

-- | The size, in bytes, of the image in the repository.
--   
--   If the image is a manifest list, this will be the max size of all
--   manifests in the list.
--   
--   Beginning with Docker version 1.9, the Docker client compresses image
--   layers before pushing them to a V2 Docker registry. The output of the
--   <tt>docker images</tt> command shows the uncompressed image size, so
--   it may return a larger image size than the image sizes returned by
--   DescribeImages.
[$sel:imageSizeInBytes:ImageDetail'] :: ImageDetail -> Maybe Integer

-- | The media type of the image manifest.
[$sel:imageManifestMediaType:ImageDetail'] :: ImageDetail -> Maybe Text

-- | The date and time, expressed in standard JavaScript date format, at
--   which the current image was pushed to the repository.
[$sel:imagePushedAt:ImageDetail'] :: ImageDetail -> Maybe POSIX

-- | A summary of the last completed image scan.
[$sel:imageScanFindingsSummary:ImageDetail'] :: ImageDetail -> Maybe ImageScanFindingsSummary

-- | Create a value of <a>ImageDetail</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:imageDigest:ImageDetail'</a>, <a>imageDetail_imageDigest</a> -
--   The <tt>sha256</tt> digest of the image manifest.
--   
--   <a>$sel:imageScanStatus:ImageDetail'</a>,
--   <a>imageDetail_imageScanStatus</a> - The current state of the scan.
--   
--   <a>$sel:imageTags:ImageDetail'</a>, <a>imageDetail_imageTags</a> - The
--   list of tags associated with this image.
--   
--   <a>$sel:registryId:ImageDetail'</a>, <a>imageDetail_registryId</a> -
--   The Amazon Web Services account ID associated with the registry to
--   which this image belongs.
--   
--   <a>$sel:repositoryName:ImageDetail'</a>,
--   <a>imageDetail_repositoryName</a> - The name of the repository to
--   which this image belongs.
--   
--   <a>$sel:artifactMediaType:ImageDetail'</a>,
--   <a>imageDetail_artifactMediaType</a> - The artifact media type of the
--   image.
--   
--   <a>$sel:imageSizeInBytes:ImageDetail'</a>,
--   <a>imageDetail_imageSizeInBytes</a> - The size, in bytes, of the image
--   in the repository.
--   
--   If the image is a manifest list, this will be the max size of all
--   manifests in the list.
--   
--   Beginning with Docker version 1.9, the Docker client compresses image
--   layers before pushing them to a V2 Docker registry. The output of the
--   <tt>docker images</tt> command shows the uncompressed image size, so
--   it may return a larger image size than the image sizes returned by
--   DescribeImages.
--   
--   <a>$sel:imageManifestMediaType:ImageDetail'</a>,
--   <a>imageDetail_imageManifestMediaType</a> - The media type of the
--   image manifest.
--   
--   <a>$sel:imagePushedAt:ImageDetail'</a>,
--   <a>imageDetail_imagePushedAt</a> - The date and time, expressed in
--   standard JavaScript date format, at which the current image was pushed
--   to the repository.
--   
--   <a>$sel:imageScanFindingsSummary:ImageDetail'</a>,
--   <a>imageDetail_imageScanFindingsSummary</a> - A summary of the last
--   completed image scan.
newImageDetail :: ImageDetail

-- | The <tt>sha256</tt> digest of the image manifest.
imageDetail_imageDigest :: Lens' ImageDetail (Maybe Text)

-- | The current state of the scan.
imageDetail_imageScanStatus :: Lens' ImageDetail (Maybe ImageScanStatus)

-- | The list of tags associated with this image.
imageDetail_imageTags :: Lens' ImageDetail (Maybe [Text])

-- | The Amazon Web Services account ID associated with the registry to
--   which this image belongs.
imageDetail_registryId :: Lens' ImageDetail (Maybe Text)

-- | The name of the repository to which this image belongs.
imageDetail_repositoryName :: Lens' ImageDetail (Maybe Text)

-- | The artifact media type of the image.
imageDetail_artifactMediaType :: Lens' ImageDetail (Maybe Text)

-- | The size, in bytes, of the image in the repository.
--   
--   If the image is a manifest list, this will be the max size of all
--   manifests in the list.
--   
--   Beginning with Docker version 1.9, the Docker client compresses image
--   layers before pushing them to a V2 Docker registry. The output of the
--   <tt>docker images</tt> command shows the uncompressed image size, so
--   it may return a larger image size than the image sizes returned by
--   DescribeImages.
imageDetail_imageSizeInBytes :: Lens' ImageDetail (Maybe Integer)

-- | The media type of the image manifest.
imageDetail_imageManifestMediaType :: Lens' ImageDetail (Maybe Text)

-- | The date and time, expressed in standard JavaScript date format, at
--   which the current image was pushed to the repository.
imageDetail_imagePushedAt :: Lens' ImageDetail (Maybe UTCTime)

-- | A summary of the last completed image scan.
imageDetail_imageScanFindingsSummary :: Lens' ImageDetail (Maybe ImageScanFindingsSummary)
instance GHC.Generics.Generic Network.AWS.ECR.Types.ImageDetail.ImageDetail
instance GHC.Show.Show Network.AWS.ECR.Types.ImageDetail.ImageDetail
instance GHC.Read.Read Network.AWS.ECR.Types.ImageDetail.ImageDetail
instance GHC.Classes.Eq Network.AWS.ECR.Types.ImageDetail.ImageDetail
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.ECR.Types.ImageDetail.ImageDetail
instance Data.Hashable.Class.Hashable Network.AWS.ECR.Types.ImageDetail.ImageDetail
instance Control.DeepSeq.NFData Network.AWS.ECR.Types.ImageDetail.ImageDetail


module Network.AWS.ECR.Types.Tag

-- | The metadata that you apply to a resource to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define. Tag keys can have a maximum character length of
--   128 characters, and tag values can have a maximum length of 256
--   characters.
--   
--   <i>See:</i> <a>newTag</a> smart constructor.
data Tag
Tag' :: Maybe Text -> Maybe Text -> Tag

-- | One part of a key-value pair that make up a tag. A <tt>key</tt> is a
--   general label that acts like a category for more specific tag values.
[$sel:key:Tag'] :: Tag -> Maybe Text

-- | The optional part of a key-value pair that make up a tag. A
--   <tt>value</tt> acts as a descriptor within a tag category (key).
[$sel:value:Tag'] :: Tag -> Maybe Text

-- | Create a value of <a>Tag</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:key:Tag'</a>, <a>tag_key</a> - One part of a key-value pair
--   that make up a tag. A <tt>key</tt> is a general label that acts like a
--   category for more specific tag values.
--   
--   <a>$sel:value:Tag'</a>, <a>tag_value</a> - The optional part of a
--   key-value pair that make up a tag. A <tt>value</tt> acts as a
--   descriptor within a tag category (key).
newTag :: Tag

-- | One part of a key-value pair that make up a tag. A <tt>key</tt> is a
--   general label that acts like a category for more specific tag values.
tag_key :: Lens' Tag (Maybe Text)

-- | The optional part of a key-value pair that make up a tag. A
--   <tt>value</tt> acts as a descriptor within a tag category (key).
tag_value :: Lens' Tag (Maybe Text)
instance GHC.Generics.Generic Network.AWS.ECR.Types.Tag.Tag
instance GHC.Show.Show Network.AWS.ECR.Types.Tag.Tag
instance GHC.Read.Read Network.AWS.ECR.Types.Tag.Tag
instance GHC.Classes.Eq Network.AWS.ECR.Types.Tag.Tag
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.ECR.Types.Tag.Tag
instance Data.Hashable.Class.Hashable Network.AWS.ECR.Types.Tag.Tag
instance Control.DeepSeq.NFData Network.AWS.ECR.Types.Tag.Tag
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.Types.Tag.Tag


module Network.AWS.ECR.Types.TagStatus
newtype TagStatus
TagStatus' :: Text -> TagStatus
[fromTagStatus] :: TagStatus -> Text
pattern TagStatus_ANY :: TagStatus
pattern TagStatus_TAGGED :: TagStatus
pattern TagStatus_UNTAGGED :: TagStatus
instance Network.AWS.Data.XML.ToXML Network.AWS.ECR.Types.TagStatus.TagStatus
instance Network.AWS.Data.XML.FromXML Network.AWS.ECR.Types.TagStatus.TagStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.ECR.Types.TagStatus.TagStatus
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.Types.TagStatus.TagStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.ECR.Types.TagStatus.TagStatus
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.ECR.Types.TagStatus.TagStatus
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.Types.TagStatus.TagStatus
instance Network.AWS.Data.Headers.ToHeader Network.AWS.ECR.Types.TagStatus.TagStatus
instance Network.AWS.Data.Log.ToLog Network.AWS.ECR.Types.TagStatus.TagStatus
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.ECR.Types.TagStatus.TagStatus
instance Network.AWS.Data.Text.ToText Network.AWS.ECR.Types.TagStatus.TagStatus
instance Network.AWS.Data.Text.FromText Network.AWS.ECR.Types.TagStatus.TagStatus
instance Control.DeepSeq.NFData Network.AWS.ECR.Types.TagStatus.TagStatus
instance Data.Hashable.Class.Hashable Network.AWS.ECR.Types.TagStatus.TagStatus
instance GHC.Generics.Generic Network.AWS.ECR.Types.TagStatus.TagStatus
instance GHC.Classes.Ord Network.AWS.ECR.Types.TagStatus.TagStatus
instance GHC.Classes.Eq Network.AWS.ECR.Types.TagStatus.TagStatus
instance GHC.Read.Read Network.AWS.ECR.Types.TagStatus.TagStatus
instance GHC.Show.Show Network.AWS.ECR.Types.TagStatus.TagStatus


module Network.AWS.ECR.Types.ListImagesFilter

-- | An object representing a filter on a ListImages operation.
--   
--   <i>See:</i> <a>newListImagesFilter</a> smart constructor.
data ListImagesFilter
ListImagesFilter' :: Maybe TagStatus -> ListImagesFilter

-- | The tag status with which to filter your ListImages results. You can
--   filter results based on whether they are <tt>TAGGED</tt> or
--   <tt>UNTAGGED</tt>.
[$sel:tagStatus:ListImagesFilter'] :: ListImagesFilter -> Maybe TagStatus

-- | Create a value of <a>ListImagesFilter</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tagStatus:ListImagesFilter'</a>,
--   <a>listImagesFilter_tagStatus</a> - The tag status with which to
--   filter your ListImages results. You can filter results based on
--   whether they are <tt>TAGGED</tt> or <tt>UNTAGGED</tt>.
newListImagesFilter :: ListImagesFilter

-- | The tag status with which to filter your ListImages results. You can
--   filter results based on whether they are <tt>TAGGED</tt> or
--   <tt>UNTAGGED</tt>.
listImagesFilter_tagStatus :: Lens' ListImagesFilter (Maybe TagStatus)
instance GHC.Generics.Generic Network.AWS.ECR.Types.ListImagesFilter.ListImagesFilter
instance GHC.Show.Show Network.AWS.ECR.Types.ListImagesFilter.ListImagesFilter
instance GHC.Read.Read Network.AWS.ECR.Types.ListImagesFilter.ListImagesFilter
instance GHC.Classes.Eq Network.AWS.ECR.Types.ListImagesFilter.ListImagesFilter
instance Data.Hashable.Class.Hashable Network.AWS.ECR.Types.ListImagesFilter.ListImagesFilter
instance Control.DeepSeq.NFData Network.AWS.ECR.Types.ListImagesFilter.ListImagesFilter
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.Types.ListImagesFilter.ListImagesFilter


module Network.AWS.ECR.Types.LifecyclePolicyPreviewFilter

-- | The filter for the lifecycle policy preview.
--   
--   <i>See:</i> <a>newLifecyclePolicyPreviewFilter</a> smart constructor.
data LifecyclePolicyPreviewFilter
LifecyclePolicyPreviewFilter' :: Maybe TagStatus -> LifecyclePolicyPreviewFilter

-- | The tag status of the image.
[$sel:tagStatus:LifecyclePolicyPreviewFilter'] :: LifecyclePolicyPreviewFilter -> Maybe TagStatus

-- | Create a value of <a>LifecyclePolicyPreviewFilter</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tagStatus:LifecyclePolicyPreviewFilter'</a>,
--   <a>lifecyclePolicyPreviewFilter_tagStatus</a> - The tag status of the
--   image.
newLifecyclePolicyPreviewFilter :: LifecyclePolicyPreviewFilter

-- | The tag status of the image.
lifecyclePolicyPreviewFilter_tagStatus :: Lens' LifecyclePolicyPreviewFilter (Maybe TagStatus)
instance GHC.Generics.Generic Network.AWS.ECR.Types.LifecyclePolicyPreviewFilter.LifecyclePolicyPreviewFilter
instance GHC.Show.Show Network.AWS.ECR.Types.LifecyclePolicyPreviewFilter.LifecyclePolicyPreviewFilter
instance GHC.Read.Read Network.AWS.ECR.Types.LifecyclePolicyPreviewFilter.LifecyclePolicyPreviewFilter
instance GHC.Classes.Eq Network.AWS.ECR.Types.LifecyclePolicyPreviewFilter.LifecyclePolicyPreviewFilter
instance Data.Hashable.Class.Hashable Network.AWS.ECR.Types.LifecyclePolicyPreviewFilter.LifecyclePolicyPreviewFilter
instance Control.DeepSeq.NFData Network.AWS.ECR.Types.LifecyclePolicyPreviewFilter.LifecyclePolicyPreviewFilter
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.Types.LifecyclePolicyPreviewFilter.LifecyclePolicyPreviewFilter


module Network.AWS.ECR.Types.DescribeImagesFilter

-- | An object representing a filter on a DescribeImages operation.
--   
--   <i>See:</i> <a>newDescribeImagesFilter</a> smart constructor.
data DescribeImagesFilter
DescribeImagesFilter' :: Maybe TagStatus -> DescribeImagesFilter

-- | The tag status with which to filter your DescribeImages results. You
--   can filter results based on whether they are <tt>TAGGED</tt> or
--   <tt>UNTAGGED</tt>.
[$sel:tagStatus:DescribeImagesFilter'] :: DescribeImagesFilter -> Maybe TagStatus

-- | Create a value of <a>DescribeImagesFilter</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tagStatus:DescribeImagesFilter'</a>,
--   <a>describeImagesFilter_tagStatus</a> - The tag status with which to
--   filter your DescribeImages results. You can filter results based on
--   whether they are <tt>TAGGED</tt> or <tt>UNTAGGED</tt>.
newDescribeImagesFilter :: DescribeImagesFilter

-- | The tag status with which to filter your DescribeImages results. You
--   can filter results based on whether they are <tt>TAGGED</tt> or
--   <tt>UNTAGGED</tt>.
describeImagesFilter_tagStatus :: Lens' DescribeImagesFilter (Maybe TagStatus)
instance GHC.Generics.Generic Network.AWS.ECR.Types.DescribeImagesFilter.DescribeImagesFilter
instance GHC.Show.Show Network.AWS.ECR.Types.DescribeImagesFilter.DescribeImagesFilter
instance GHC.Read.Read Network.AWS.ECR.Types.DescribeImagesFilter.DescribeImagesFilter
instance GHC.Classes.Eq Network.AWS.ECR.Types.DescribeImagesFilter.DescribeImagesFilter
instance Data.Hashable.Class.Hashable Network.AWS.ECR.Types.DescribeImagesFilter.DescribeImagesFilter
instance Control.DeepSeq.NFData Network.AWS.ECR.Types.DescribeImagesFilter.DescribeImagesFilter
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.Types.DescribeImagesFilter.DescribeImagesFilter


module Network.AWS.ECR.Types

-- | API version <tt>2015-09-21</tt> of the Amazon EC2 Container Registry
--   SDK configuration.
defaultService :: Service

-- | The upload could not be found, or the specified upload ID is not valid
--   for this repository.
_UploadNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified image is tagged with a tag that already exists. The
--   repository is configured for tag immutability.
_ImageTagAlreadyExistsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The list of tags on the repository is over the limit. The maximum
--   number of tags that can be applied to a repository is 50.
_TooManyTagsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified repository could not be found. Check the spelling of the
--   specified repository and ensure that you are performing operations on
--   the correct registry.
_RepositoryNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified image has already been pushed, and there were no changes
--   to the manifest or image tag after the last push.
_ImageAlreadyExistsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified image scan could not be found. Ensure that image
--   scanning is enabled on the repository and try again.
_ScanNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified image digest does not match the digest that Amazon ECR
--   calculated for the image.
_ImageDigestDoesNotMatchException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The image requested does not exist in the specified repository.
_ImageNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Layer parts must be at least 5 MiB in size.
_LayerPartTooSmallException :: AsError a => Getting (First ServiceError) a ServiceError

-- | An invalid parameter has been specified. Tag keys can have a maximum
--   character length of 128 characters, and tag values can have a maximum
--   length of 256 characters.
_InvalidTagParameterException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The layer digest calculation performed by Amazon ECR upon receipt of
--   the image layer does not match the digest specified.
_InvalidLayerException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The layer part size is not valid, or the first byte specified is not
--   consecutive to the last byte of a previous layer part upload.
_InvalidLayerPartException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The manifest list is referencing an image that does not exist.
_ReferencedImagesNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified parameter is invalid. Review the available parameters
--   for the API request.
_InvalidParameterException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified layers could not be found, or the specified layer is not
--   valid for this repository.
_LayersNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | There was an exception validating this request.
_ValidationException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified layer upload does not contain any layer parts.
_EmptyUploadException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The registry doesn't have an associated registry policy.
_RegistryPolicyNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The operation did not succeed because it would have exceeded a service
--   limit for your account. For more information, see <a>Amazon ECR
--   service quotas</a> in the Amazon Elastic Container Registry User
--   Guide.
_LimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The previous lifecycle policy preview request has not completed. Wait
--   and try again.
_LifecyclePolicyPreviewInProgressException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified repository and registry combination does not have an
--   associated repository policy.
_RepositoryPolicyNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified repository already exists in the specified registry.
_RepositoryAlreadyExistsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | There is no dry run for this repository.
_LifecyclePolicyPreviewNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified layer is not available because it is not associated with
--   an image. Unassociated image layers may be cleaned up at any time.
_LayerInaccessibleException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified repository contains images. To delete a repository that
--   contains images, you must force the deletion with the <tt>force</tt>
--   parameter.
_RepositoryNotEmptyException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The image is of a type that cannot be scanned.
_UnsupportedImageTypeException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The lifecycle policy could not be found, and no policy is set to the
--   repository.
_LifecyclePolicyNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The image layer already exists in the associated repository.
_LayerAlreadyExistsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | These errors are usually caused by a server-side issue.
_ServerException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The operation failed due to a KMS exception.
_KmsException :: AsError a => Getting (First ServiceError) a ServiceError
newtype EncryptionType
EncryptionType' :: Text -> EncryptionType
[fromEncryptionType] :: EncryptionType -> Text
pattern EncryptionType_AES256 :: EncryptionType
pattern EncryptionType_KMS :: EncryptionType
newtype FindingSeverity
FindingSeverity' :: Text -> FindingSeverity
[fromFindingSeverity] :: FindingSeverity -> Text
pattern FindingSeverity_CRITICAL :: FindingSeverity
pattern FindingSeverity_HIGH :: FindingSeverity
pattern FindingSeverity_INFORMATIONAL :: FindingSeverity
pattern FindingSeverity_LOW :: FindingSeverity
pattern FindingSeverity_MEDIUM :: FindingSeverity
pattern FindingSeverity_UNDEFINED :: FindingSeverity
newtype ImageActionType
ImageActionType' :: Text -> ImageActionType
[fromImageActionType] :: ImageActionType -> Text
pattern ImageActionType_EXPIRE :: ImageActionType
newtype ImageFailureCode
ImageFailureCode' :: Text -> ImageFailureCode
[fromImageFailureCode] :: ImageFailureCode -> Text
pattern ImageFailureCode_ImageNotFound :: ImageFailureCode
pattern ImageFailureCode_ImageReferencedByManifestList :: ImageFailureCode
pattern ImageFailureCode_ImageTagDoesNotMatchDigest :: ImageFailureCode
pattern ImageFailureCode_InvalidImageDigest :: ImageFailureCode
pattern ImageFailureCode_InvalidImageTag :: ImageFailureCode
pattern ImageFailureCode_KmsError :: ImageFailureCode
pattern ImageFailureCode_MissingDigestAndTag :: ImageFailureCode
newtype ImageTagMutability
ImageTagMutability' :: Text -> ImageTagMutability
[fromImageTagMutability] :: ImageTagMutability -> Text
pattern ImageTagMutability_IMMUTABLE :: ImageTagMutability
pattern ImageTagMutability_MUTABLE :: ImageTagMutability
newtype LayerAvailability
LayerAvailability' :: Text -> LayerAvailability
[fromLayerAvailability] :: LayerAvailability -> Text
pattern LayerAvailability_AVAILABLE :: LayerAvailability
pattern LayerAvailability_UNAVAILABLE :: LayerAvailability
newtype LayerFailureCode
LayerFailureCode' :: Text -> LayerFailureCode
[fromLayerFailureCode] :: LayerFailureCode -> Text
pattern LayerFailureCode_InvalidLayerDigest :: LayerFailureCode
pattern LayerFailureCode_MissingLayerDigest :: LayerFailureCode
newtype LifecyclePolicyPreviewStatus
LifecyclePolicyPreviewStatus' :: Text -> LifecyclePolicyPreviewStatus
[fromLifecyclePolicyPreviewStatus] :: LifecyclePolicyPreviewStatus -> Text
pattern LifecyclePolicyPreviewStatus_COMPLETE :: LifecyclePolicyPreviewStatus
pattern LifecyclePolicyPreviewStatus_EXPIRED :: LifecyclePolicyPreviewStatus
pattern LifecyclePolicyPreviewStatus_FAILED :: LifecyclePolicyPreviewStatus
pattern LifecyclePolicyPreviewStatus_IN_PROGRESS :: LifecyclePolicyPreviewStatus
newtype ReplicationStatus
ReplicationStatus' :: Text -> ReplicationStatus
[fromReplicationStatus] :: ReplicationStatus -> Text
pattern ReplicationStatus_COMPLETE :: ReplicationStatus
pattern ReplicationStatus_FAILED :: ReplicationStatus
pattern ReplicationStatus_IN_PROGRESS :: ReplicationStatus
newtype RepositoryFilterType
RepositoryFilterType' :: Text -> RepositoryFilterType
[fromRepositoryFilterType] :: RepositoryFilterType -> Text
pattern RepositoryFilterType_PREFIX_MATCH :: RepositoryFilterType
newtype ScanStatus
ScanStatus' :: Text -> ScanStatus
[fromScanStatus] :: ScanStatus -> Text
pattern ScanStatus_COMPLETE :: ScanStatus
pattern ScanStatus_FAILED :: ScanStatus
pattern ScanStatus_IN_PROGRESS :: ScanStatus
newtype TagStatus
TagStatus' :: Text -> TagStatus
[fromTagStatus] :: TagStatus -> Text
pattern TagStatus_ANY :: TagStatus
pattern TagStatus_TAGGED :: TagStatus
pattern TagStatus_UNTAGGED :: TagStatus

-- | This data type is used in the ImageScanFinding data type.
--   
--   <i>See:</i> <a>newAttribute</a> smart constructor.
data Attribute
Attribute' :: Maybe Text -> Text -> Attribute

-- | The value assigned to the attribute key.
[$sel:value:Attribute'] :: Attribute -> Maybe Text

-- | The attribute key.
[$sel:key:Attribute'] :: Attribute -> Text

-- | Create a value of <a>Attribute</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:Attribute'</a>, <a>attribute_value</a> - The value
--   assigned to the attribute key.
--   
--   <a>$sel:key:Attribute'</a>, <a>attribute_key</a> - The attribute key.
newAttribute :: Text -> Attribute

-- | The value assigned to the attribute key.
attribute_value :: Lens' Attribute (Maybe Text)

-- | The attribute key.
attribute_key :: Lens' Attribute Text

-- | An object representing authorization data for an Amazon ECR registry.
--   
--   <i>See:</i> <a>newAuthorizationData</a> smart constructor.
data AuthorizationData
AuthorizationData' :: Maybe Text -> Maybe POSIX -> Maybe Text -> AuthorizationData

-- | The registry URL to use for this authorization token in a <tt>docker
--   login</tt> command. The Amazon ECR registry URL format is
--   <tt>https://aws_account_id.dkr.ecr.region.amazonaws.com</tt>. For
--   example,
--   <tt>https://012345678910.dkr.ecr.us-east-1.amazonaws.com</tt>..
[$sel:proxyEndpoint:AuthorizationData'] :: AuthorizationData -> Maybe Text

-- | The Unix time in seconds and milliseconds when the authorization token
--   expires. Authorization tokens are valid for 12 hours.
[$sel:expiresAt:AuthorizationData'] :: AuthorizationData -> Maybe POSIX

-- | A base64-encoded string that contains authorization data for the
--   specified Amazon ECR registry. When the string is decoded, it is
--   presented in the format <tt>user:password</tt> for private registry
--   authentication using <tt>docker login</tt>.
[$sel:authorizationToken:AuthorizationData'] :: AuthorizationData -> Maybe Text

-- | Create a value of <a>AuthorizationData</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:proxyEndpoint:AuthorizationData'</a>,
--   <a>authorizationData_proxyEndpoint</a> - The registry URL to use for
--   this authorization token in a <tt>docker login</tt> command. The
--   Amazon ECR registry URL format is
--   <tt>https://aws_account_id.dkr.ecr.region.amazonaws.com</tt>. For
--   example,
--   <tt>https://012345678910.dkr.ecr.us-east-1.amazonaws.com</tt>..
--   
--   <a>$sel:expiresAt:AuthorizationData'</a>,
--   <a>authorizationData_expiresAt</a> - The Unix time in seconds and
--   milliseconds when the authorization token expires. Authorization
--   tokens are valid for 12 hours.
--   
--   <a>$sel:authorizationToken:AuthorizationData'</a>,
--   <a>authorizationData_authorizationToken</a> - A base64-encoded string
--   that contains authorization data for the specified Amazon ECR
--   registry. When the string is decoded, it is presented in the format
--   <tt>user:password</tt> for private registry authentication using
--   <tt>docker login</tt>.
newAuthorizationData :: AuthorizationData

-- | The registry URL to use for this authorization token in a <tt>docker
--   login</tt> command. The Amazon ECR registry URL format is
--   <tt>https://aws_account_id.dkr.ecr.region.amazonaws.com</tt>. For
--   example,
--   <tt>https://012345678910.dkr.ecr.us-east-1.amazonaws.com</tt>..
authorizationData_proxyEndpoint :: Lens' AuthorizationData (Maybe Text)

-- | The Unix time in seconds and milliseconds when the authorization token
--   expires. Authorization tokens are valid for 12 hours.
authorizationData_expiresAt :: Lens' AuthorizationData (Maybe UTCTime)

-- | A base64-encoded string that contains authorization data for the
--   specified Amazon ECR registry. When the string is decoded, it is
--   presented in the format <tt>user:password</tt> for private registry
--   authentication using <tt>docker login</tt>.
authorizationData_authorizationToken :: Lens' AuthorizationData (Maybe Text)

-- | An object representing a filter on a DescribeImages operation.
--   
--   <i>See:</i> <a>newDescribeImagesFilter</a> smart constructor.
data DescribeImagesFilter
DescribeImagesFilter' :: Maybe TagStatus -> DescribeImagesFilter

-- | The tag status with which to filter your DescribeImages results. You
--   can filter results based on whether they are <tt>TAGGED</tt> or
--   <tt>UNTAGGED</tt>.
[$sel:tagStatus:DescribeImagesFilter'] :: DescribeImagesFilter -> Maybe TagStatus

-- | Create a value of <a>DescribeImagesFilter</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tagStatus:DescribeImagesFilter'</a>,
--   <a>describeImagesFilter_tagStatus</a> - The tag status with which to
--   filter your DescribeImages results. You can filter results based on
--   whether they are <tt>TAGGED</tt> or <tt>UNTAGGED</tt>.
newDescribeImagesFilter :: DescribeImagesFilter

-- | The tag status with which to filter your DescribeImages results. You
--   can filter results based on whether they are <tt>TAGGED</tt> or
--   <tt>UNTAGGED</tt>.
describeImagesFilter_tagStatus :: Lens' DescribeImagesFilter (Maybe TagStatus)

-- | The encryption configuration for the repository. This determines how
--   the contents of your repository are encrypted at rest.
--   
--   By default, when no encryption configuration is set or the
--   <tt>AES256</tt> encryption type is used, Amazon ECR uses server-side
--   encryption with Amazon S3-managed encryption keys which encrypts your
--   data at rest using an AES-256 encryption algorithm. This does not
--   require any action on your part.
--   
--   For more control over the encryption of the contents of your
--   repository, you can use server-side encryption with Key Management
--   Service key stored in Key Management Service (KMS) to encrypt your
--   images. For more information, see <a>Amazon ECR encryption at rest</a>
--   in the <i>Amazon Elastic Container Registry User Guide</i>.
--   
--   <i>See:</i> <a>newEncryptionConfiguration</a> smart constructor.
data EncryptionConfiguration
EncryptionConfiguration' :: Maybe Text -> EncryptionType -> EncryptionConfiguration

-- | If you use the <tt>KMS</tt> encryption type, specify the KMS key to
--   use for encryption. The alias, key ID, or full ARN of the KMS key can
--   be specified. The key must exist in the same Region as the repository.
--   If no key is specified, the default Amazon Web Services managed KMS
--   key for Amazon ECR will be used.
[$sel:kmsKey:EncryptionConfiguration'] :: EncryptionConfiguration -> Maybe Text

-- | The encryption type to use.
--   
--   If you use the <tt>KMS</tt> encryption type, the contents of the
--   repository will be encrypted using server-side encryption with Key
--   Management Service key stored in KMS. When you use KMS to encrypt your
--   data, you can either use the default Amazon Web Services managed KMS
--   key for Amazon ECR, or specify your own KMS key, which you already
--   created. For more information, see <a>Protecting data using
--   server-side encryption with an KMS key stored in Key Management
--   Service (SSE-KMS)</a> in the <i>Amazon Simple Storage Service Console
--   Developer Guide.</i>.
--   
--   If you use the <tt>AES256</tt> encryption type, Amazon ECR uses
--   server-side encryption with Amazon S3-managed encryption keys which
--   encrypts the images in the repository using an AES-256 encryption
--   algorithm. For more information, see <a>Protecting data using
--   server-side encryption with Amazon S3-managed encryption keys
--   (SSE-S3)</a> in the <i>Amazon Simple Storage Service Console Developer
--   Guide.</i>.
[$sel:encryptionType:EncryptionConfiguration'] :: EncryptionConfiguration -> EncryptionType

-- | Create a value of <a>EncryptionConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:kmsKey:EncryptionConfiguration'</a>,
--   <a>encryptionConfiguration_kmsKey</a> - If you use the <tt>KMS</tt>
--   encryption type, specify the KMS key to use for encryption. The alias,
--   key ID, or full ARN of the KMS key can be specified. The key must
--   exist in the same Region as the repository. If no key is specified,
--   the default Amazon Web Services managed KMS key for Amazon ECR will be
--   used.
--   
--   <a>$sel:encryptionType:EncryptionConfiguration'</a>,
--   <a>encryptionConfiguration_encryptionType</a> - The encryption type to
--   use.
--   
--   If you use the <tt>KMS</tt> encryption type, the contents of the
--   repository will be encrypted using server-side encryption with Key
--   Management Service key stored in KMS. When you use KMS to encrypt your
--   data, you can either use the default Amazon Web Services managed KMS
--   key for Amazon ECR, or specify your own KMS key, which you already
--   created. For more information, see <a>Protecting data using
--   server-side encryption with an KMS key stored in Key Management
--   Service (SSE-KMS)</a> in the <i>Amazon Simple Storage Service Console
--   Developer Guide.</i>.
--   
--   If you use the <tt>AES256</tt> encryption type, Amazon ECR uses
--   server-side encryption with Amazon S3-managed encryption keys which
--   encrypts the images in the repository using an AES-256 encryption
--   algorithm. For more information, see <a>Protecting data using
--   server-side encryption with Amazon S3-managed encryption keys
--   (SSE-S3)</a> in the <i>Amazon Simple Storage Service Console Developer
--   Guide.</i>.
newEncryptionConfiguration :: EncryptionType -> EncryptionConfiguration

-- | If you use the <tt>KMS</tt> encryption type, specify the KMS key to
--   use for encryption. The alias, key ID, or full ARN of the KMS key can
--   be specified. The key must exist in the same Region as the repository.
--   If no key is specified, the default Amazon Web Services managed KMS
--   key for Amazon ECR will be used.
encryptionConfiguration_kmsKey :: Lens' EncryptionConfiguration (Maybe Text)

-- | The encryption type to use.
--   
--   If you use the <tt>KMS</tt> encryption type, the contents of the
--   repository will be encrypted using server-side encryption with Key
--   Management Service key stored in KMS. When you use KMS to encrypt your
--   data, you can either use the default Amazon Web Services managed KMS
--   key for Amazon ECR, or specify your own KMS key, which you already
--   created. For more information, see <a>Protecting data using
--   server-side encryption with an KMS key stored in Key Management
--   Service (SSE-KMS)</a> in the <i>Amazon Simple Storage Service Console
--   Developer Guide.</i>.
--   
--   If you use the <tt>AES256</tt> encryption type, Amazon ECR uses
--   server-side encryption with Amazon S3-managed encryption keys which
--   encrypts the images in the repository using an AES-256 encryption
--   algorithm. For more information, see <a>Protecting data using
--   server-side encryption with Amazon S3-managed encryption keys
--   (SSE-S3)</a> in the <i>Amazon Simple Storage Service Console Developer
--   Guide.</i>.
encryptionConfiguration_encryptionType :: Lens' EncryptionConfiguration EncryptionType

-- | An object representing an Amazon ECR image.
--   
--   <i>See:</i> <a>newImage</a> smart constructor.
data Image
Image' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe ImageIdentifier -> Maybe Text -> Image

-- | The Amazon Web Services account ID associated with the registry
--   containing the image.
[$sel:registryId:Image'] :: Image -> Maybe Text

-- | The image manifest associated with the image.
[$sel:imageManifest:Image'] :: Image -> Maybe Text

-- | The name of the repository associated with the image.
[$sel:repositoryName:Image'] :: Image -> Maybe Text

-- | An object containing the image tag and image digest associated with an
--   image.
[$sel:imageId:Image'] :: Image -> Maybe ImageIdentifier

-- | The manifest media type of the image.
[$sel:imageManifestMediaType:Image'] :: Image -> Maybe Text

-- | Create a value of <a>Image</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:Image'</a>, <a>image_registryId</a> - The Amazon
--   Web Services account ID associated with the registry containing the
--   image.
--   
--   <a>$sel:imageManifest:Image'</a>, <a>image_imageManifest</a> - The
--   image manifest associated with the image.
--   
--   <a>$sel:repositoryName:Image'</a>, <a>image_repositoryName</a> - The
--   name of the repository associated with the image.
--   
--   <a>$sel:imageId:Image'</a>, <a>image_imageId</a> - An object
--   containing the image tag and image digest associated with an image.
--   
--   <a>$sel:imageManifestMediaType:Image'</a>,
--   <a>image_imageManifestMediaType</a> - The manifest media type of the
--   image.
newImage :: Image

-- | The Amazon Web Services account ID associated with the registry
--   containing the image.
image_registryId :: Lens' Image (Maybe Text)

-- | The image manifest associated with the image.
image_imageManifest :: Lens' Image (Maybe Text)

-- | The name of the repository associated with the image.
image_repositoryName :: Lens' Image (Maybe Text)

-- | An object containing the image tag and image digest associated with an
--   image.
image_imageId :: Lens' Image (Maybe ImageIdentifier)

-- | The manifest media type of the image.
image_imageManifestMediaType :: Lens' Image (Maybe Text)

-- | An object that describes an image returned by a DescribeImages
--   operation.
--   
--   <i>See:</i> <a>newImageDetail</a> smart constructor.
data ImageDetail
ImageDetail' :: Maybe Text -> Maybe ImageScanStatus -> Maybe [Text] -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Integer -> Maybe Text -> Maybe POSIX -> Maybe ImageScanFindingsSummary -> ImageDetail

-- | The <tt>sha256</tt> digest of the image manifest.
[$sel:imageDigest:ImageDetail'] :: ImageDetail -> Maybe Text

-- | The current state of the scan.
[$sel:imageScanStatus:ImageDetail'] :: ImageDetail -> Maybe ImageScanStatus

-- | The list of tags associated with this image.
[$sel:imageTags:ImageDetail'] :: ImageDetail -> Maybe [Text]

-- | The Amazon Web Services account ID associated with the registry to
--   which this image belongs.
[$sel:registryId:ImageDetail'] :: ImageDetail -> Maybe Text

-- | The name of the repository to which this image belongs.
[$sel:repositoryName:ImageDetail'] :: ImageDetail -> Maybe Text

-- | The artifact media type of the image.
[$sel:artifactMediaType:ImageDetail'] :: ImageDetail -> Maybe Text

-- | The size, in bytes, of the image in the repository.
--   
--   If the image is a manifest list, this will be the max size of all
--   manifests in the list.
--   
--   Beginning with Docker version 1.9, the Docker client compresses image
--   layers before pushing them to a V2 Docker registry. The output of the
--   <tt>docker images</tt> command shows the uncompressed image size, so
--   it may return a larger image size than the image sizes returned by
--   DescribeImages.
[$sel:imageSizeInBytes:ImageDetail'] :: ImageDetail -> Maybe Integer

-- | The media type of the image manifest.
[$sel:imageManifestMediaType:ImageDetail'] :: ImageDetail -> Maybe Text

-- | The date and time, expressed in standard JavaScript date format, at
--   which the current image was pushed to the repository.
[$sel:imagePushedAt:ImageDetail'] :: ImageDetail -> Maybe POSIX

-- | A summary of the last completed image scan.
[$sel:imageScanFindingsSummary:ImageDetail'] :: ImageDetail -> Maybe ImageScanFindingsSummary

-- | Create a value of <a>ImageDetail</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:imageDigest:ImageDetail'</a>, <a>imageDetail_imageDigest</a> -
--   The <tt>sha256</tt> digest of the image manifest.
--   
--   <a>$sel:imageScanStatus:ImageDetail'</a>,
--   <a>imageDetail_imageScanStatus</a> - The current state of the scan.
--   
--   <a>$sel:imageTags:ImageDetail'</a>, <a>imageDetail_imageTags</a> - The
--   list of tags associated with this image.
--   
--   <a>$sel:registryId:ImageDetail'</a>, <a>imageDetail_registryId</a> -
--   The Amazon Web Services account ID associated with the registry to
--   which this image belongs.
--   
--   <a>$sel:repositoryName:ImageDetail'</a>,
--   <a>imageDetail_repositoryName</a> - The name of the repository to
--   which this image belongs.
--   
--   <a>$sel:artifactMediaType:ImageDetail'</a>,
--   <a>imageDetail_artifactMediaType</a> - The artifact media type of the
--   image.
--   
--   <a>$sel:imageSizeInBytes:ImageDetail'</a>,
--   <a>imageDetail_imageSizeInBytes</a> - The size, in bytes, of the image
--   in the repository.
--   
--   If the image is a manifest list, this will be the max size of all
--   manifests in the list.
--   
--   Beginning with Docker version 1.9, the Docker client compresses image
--   layers before pushing them to a V2 Docker registry. The output of the
--   <tt>docker images</tt> command shows the uncompressed image size, so
--   it may return a larger image size than the image sizes returned by
--   DescribeImages.
--   
--   <a>$sel:imageManifestMediaType:ImageDetail'</a>,
--   <a>imageDetail_imageManifestMediaType</a> - The media type of the
--   image manifest.
--   
--   <a>$sel:imagePushedAt:ImageDetail'</a>,
--   <a>imageDetail_imagePushedAt</a> - The date and time, expressed in
--   standard JavaScript date format, at which the current image was pushed
--   to the repository.
--   
--   <a>$sel:imageScanFindingsSummary:ImageDetail'</a>,
--   <a>imageDetail_imageScanFindingsSummary</a> - A summary of the last
--   completed image scan.
newImageDetail :: ImageDetail

-- | The <tt>sha256</tt> digest of the image manifest.
imageDetail_imageDigest :: Lens' ImageDetail (Maybe Text)

-- | The current state of the scan.
imageDetail_imageScanStatus :: Lens' ImageDetail (Maybe ImageScanStatus)

-- | The list of tags associated with this image.
imageDetail_imageTags :: Lens' ImageDetail (Maybe [Text])

-- | The Amazon Web Services account ID associated with the registry to
--   which this image belongs.
imageDetail_registryId :: Lens' ImageDetail (Maybe Text)

-- | The name of the repository to which this image belongs.
imageDetail_repositoryName :: Lens' ImageDetail (Maybe Text)

-- | The artifact media type of the image.
imageDetail_artifactMediaType :: Lens' ImageDetail (Maybe Text)

-- | The size, in bytes, of the image in the repository.
--   
--   If the image is a manifest list, this will be the max size of all
--   manifests in the list.
--   
--   Beginning with Docker version 1.9, the Docker client compresses image
--   layers before pushing them to a V2 Docker registry. The output of the
--   <tt>docker images</tt> command shows the uncompressed image size, so
--   it may return a larger image size than the image sizes returned by
--   DescribeImages.
imageDetail_imageSizeInBytes :: Lens' ImageDetail (Maybe Integer)

-- | The media type of the image manifest.
imageDetail_imageManifestMediaType :: Lens' ImageDetail (Maybe Text)

-- | The date and time, expressed in standard JavaScript date format, at
--   which the current image was pushed to the repository.
imageDetail_imagePushedAt :: Lens' ImageDetail (Maybe UTCTime)

-- | A summary of the last completed image scan.
imageDetail_imageScanFindingsSummary :: Lens' ImageDetail (Maybe ImageScanFindingsSummary)

-- | An object representing an Amazon ECR image failure.
--   
--   <i>See:</i> <a>newImageFailure</a> smart constructor.
data ImageFailure
ImageFailure' :: Maybe ImageFailureCode -> Maybe ImageIdentifier -> Maybe Text -> ImageFailure

-- | The code associated with the failure.
[$sel:failureCode:ImageFailure'] :: ImageFailure -> Maybe ImageFailureCode

-- | The image ID associated with the failure.
[$sel:imageId:ImageFailure'] :: ImageFailure -> Maybe ImageIdentifier

-- | The reason for the failure.
[$sel:failureReason:ImageFailure'] :: ImageFailure -> Maybe Text

-- | Create a value of <a>ImageFailure</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failureCode:ImageFailure'</a>, <a>imageFailure_failureCode</a>
--   - The code associated with the failure.
--   
--   <a>$sel:imageId:ImageFailure'</a>, <a>imageFailure_imageId</a> - The
--   image ID associated with the failure.
--   
--   <a>$sel:failureReason:ImageFailure'</a>,
--   <a>imageFailure_failureReason</a> - The reason for the failure.
newImageFailure :: ImageFailure

-- | The code associated with the failure.
imageFailure_failureCode :: Lens' ImageFailure (Maybe ImageFailureCode)

-- | The image ID associated with the failure.
imageFailure_imageId :: Lens' ImageFailure (Maybe ImageIdentifier)

-- | The reason for the failure.
imageFailure_failureReason :: Lens' ImageFailure (Maybe Text)

-- | An object with identifying information for an image in an Amazon ECR
--   repository.
--   
--   <i>See:</i> <a>newImageIdentifier</a> smart constructor.
data ImageIdentifier
ImageIdentifier' :: Maybe Text -> Maybe Text -> ImageIdentifier

-- | The <tt>sha256</tt> digest of the image manifest.
[$sel:imageDigest:ImageIdentifier'] :: ImageIdentifier -> Maybe Text

-- | The tag used for the image.
[$sel:imageTag:ImageIdentifier'] :: ImageIdentifier -> Maybe Text

-- | Create a value of <a>ImageIdentifier</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:imageDigest:ImageIdentifier'</a>,
--   <a>imageIdentifier_imageDigest</a> - The <tt>sha256</tt> digest of the
--   image manifest.
--   
--   <a>$sel:imageTag:ImageIdentifier'</a>, <a>imageIdentifier_imageTag</a>
--   - The tag used for the image.
newImageIdentifier :: ImageIdentifier

-- | The <tt>sha256</tt> digest of the image manifest.
imageIdentifier_imageDigest :: Lens' ImageIdentifier (Maybe Text)

-- | The tag used for the image.
imageIdentifier_imageTag :: Lens' ImageIdentifier (Maybe Text)

-- | The status of the replication process for an image.
--   
--   <i>See:</i> <a>newImageReplicationStatus</a> smart constructor.
data ImageReplicationStatus
ImageReplicationStatus' :: Maybe ReplicationStatus -> Maybe Text -> Maybe Text -> Maybe Text -> ImageReplicationStatus

-- | The image replication status.
[$sel:status:ImageReplicationStatus'] :: ImageReplicationStatus -> Maybe ReplicationStatus

-- | The AWS account ID associated with the registry to which the image
--   belongs.
[$sel:registryId:ImageReplicationStatus'] :: ImageReplicationStatus -> Maybe Text

-- | The failure code for a replication that has failed.
[$sel:failureCode:ImageReplicationStatus'] :: ImageReplicationStatus -> Maybe Text

-- | The destination Region for the image replication.
[$sel:region:ImageReplicationStatus'] :: ImageReplicationStatus -> Maybe Text

-- | Create a value of <a>ImageReplicationStatus</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:ImageReplicationStatus'</a>,
--   <a>imageReplicationStatus_status</a> - The image replication status.
--   
--   <a>$sel:registryId:ImageReplicationStatus'</a>,
--   <a>imageReplicationStatus_registryId</a> - The AWS account ID
--   associated with the registry to which the image belongs.
--   
--   <a>$sel:failureCode:ImageReplicationStatus'</a>,
--   <a>imageReplicationStatus_failureCode</a> - The failure code for a
--   replication that has failed.
--   
--   <a>$sel:region:ImageReplicationStatus'</a>,
--   <a>imageReplicationStatus_region</a> - The destination Region for the
--   image replication.
newImageReplicationStatus :: ImageReplicationStatus

-- | The image replication status.
imageReplicationStatus_status :: Lens' ImageReplicationStatus (Maybe ReplicationStatus)

-- | The AWS account ID associated with the registry to which the image
--   belongs.
imageReplicationStatus_registryId :: Lens' ImageReplicationStatus (Maybe Text)

-- | The failure code for a replication that has failed.
imageReplicationStatus_failureCode :: Lens' ImageReplicationStatus (Maybe Text)

-- | The destination Region for the image replication.
imageReplicationStatus_region :: Lens' ImageReplicationStatus (Maybe Text)

-- | Contains information about an image scan finding.
--   
--   <i>See:</i> <a>newImageScanFinding</a> smart constructor.
data ImageScanFinding
ImageScanFinding' :: Maybe Text -> Maybe FindingSeverity -> Maybe Text -> Maybe [Attribute] -> Maybe Text -> ImageScanFinding

-- | A link containing additional details about the security vulnerability.
[$sel:uri:ImageScanFinding'] :: ImageScanFinding -> Maybe Text

-- | The finding severity.
[$sel:severity:ImageScanFinding'] :: ImageScanFinding -> Maybe FindingSeverity

-- | The name associated with the finding, usually a CVE number.
[$sel:name:ImageScanFinding'] :: ImageScanFinding -> Maybe Text

-- | A collection of attributes of the host from which the finding is
--   generated.
[$sel:attributes:ImageScanFinding'] :: ImageScanFinding -> Maybe [Attribute]

-- | The description of the finding.
[$sel:description:ImageScanFinding'] :: ImageScanFinding -> Maybe Text

-- | Create a value of <a>ImageScanFinding</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:uri:ImageScanFinding'</a>, <a>imageScanFinding_uri</a> - A
--   link containing additional details about the security vulnerability.
--   
--   <a>$sel:severity:ImageScanFinding'</a>,
--   <a>imageScanFinding_severity</a> - The finding severity.
--   
--   <a>$sel:name:ImageScanFinding'</a>, <a>imageScanFinding_name</a> - The
--   name associated with the finding, usually a CVE number.
--   
--   <a>$sel:attributes:ImageScanFinding'</a>,
--   <a>imageScanFinding_attributes</a> - A collection of attributes of the
--   host from which the finding is generated.
--   
--   <a>$sel:description:ImageScanFinding'</a>,
--   <a>imageScanFinding_description</a> - The description of the finding.
newImageScanFinding :: ImageScanFinding

-- | A link containing additional details about the security vulnerability.
imageScanFinding_uri :: Lens' ImageScanFinding (Maybe Text)

-- | The finding severity.
imageScanFinding_severity :: Lens' ImageScanFinding (Maybe FindingSeverity)

-- | The name associated with the finding, usually a CVE number.
imageScanFinding_name :: Lens' ImageScanFinding (Maybe Text)

-- | A collection of attributes of the host from which the finding is
--   generated.
imageScanFinding_attributes :: Lens' ImageScanFinding (Maybe [Attribute])

-- | The description of the finding.
imageScanFinding_description :: Lens' ImageScanFinding (Maybe Text)

-- | The details of an image scan.
--   
--   <i>See:</i> <a>newImageScanFindings</a> smart constructor.
data ImageScanFindings
ImageScanFindings' :: Maybe [ImageScanFinding] -> Maybe POSIX -> Maybe POSIX -> Maybe (HashMap FindingSeverity Natural) -> ImageScanFindings

-- | The findings from the image scan.
[$sel:findings:ImageScanFindings'] :: ImageScanFindings -> Maybe [ImageScanFinding]

-- | The time of the last completed image scan.
[$sel:imageScanCompletedAt:ImageScanFindings'] :: ImageScanFindings -> Maybe POSIX

-- | The time when the vulnerability data was last scanned.
[$sel:vulnerabilitySourceUpdatedAt:ImageScanFindings'] :: ImageScanFindings -> Maybe POSIX

-- | The image vulnerability counts, sorted by severity.
[$sel:findingSeverityCounts:ImageScanFindings'] :: ImageScanFindings -> Maybe (HashMap FindingSeverity Natural)

-- | Create a value of <a>ImageScanFindings</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:findings:ImageScanFindings'</a>,
--   <a>imageScanFindings_findings</a> - The findings from the image scan.
--   
--   <a>$sel:imageScanCompletedAt:ImageScanFindings'</a>,
--   <a>imageScanFindings_imageScanCompletedAt</a> - The time of the last
--   completed image scan.
--   
--   <a>$sel:vulnerabilitySourceUpdatedAt:ImageScanFindings'</a>,
--   <a>imageScanFindings_vulnerabilitySourceUpdatedAt</a> - The time when
--   the vulnerability data was last scanned.
--   
--   <a>$sel:findingSeverityCounts:ImageScanFindings'</a>,
--   <a>imageScanFindings_findingSeverityCounts</a> - The image
--   vulnerability counts, sorted by severity.
newImageScanFindings :: ImageScanFindings

-- | The findings from the image scan.
imageScanFindings_findings :: Lens' ImageScanFindings (Maybe [ImageScanFinding])

-- | The time of the last completed image scan.
imageScanFindings_imageScanCompletedAt :: Lens' ImageScanFindings (Maybe UTCTime)

-- | The time when the vulnerability data was last scanned.
imageScanFindings_vulnerabilitySourceUpdatedAt :: Lens' ImageScanFindings (Maybe UTCTime)

-- | The image vulnerability counts, sorted by severity.
imageScanFindings_findingSeverityCounts :: Lens' ImageScanFindings (Maybe (HashMap FindingSeverity Natural))

-- | A summary of the last completed image scan.
--   
--   <i>See:</i> <a>newImageScanFindingsSummary</a> smart constructor.
data ImageScanFindingsSummary
ImageScanFindingsSummary' :: Maybe POSIX -> Maybe POSIX -> Maybe (HashMap FindingSeverity Natural) -> ImageScanFindingsSummary

-- | The time of the last completed image scan.
[$sel:imageScanCompletedAt:ImageScanFindingsSummary'] :: ImageScanFindingsSummary -> Maybe POSIX

-- | The time when the vulnerability data was last scanned.
[$sel:vulnerabilitySourceUpdatedAt:ImageScanFindingsSummary'] :: ImageScanFindingsSummary -> Maybe POSIX

-- | The image vulnerability counts, sorted by severity.
[$sel:findingSeverityCounts:ImageScanFindingsSummary'] :: ImageScanFindingsSummary -> Maybe (HashMap FindingSeverity Natural)

-- | Create a value of <a>ImageScanFindingsSummary</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:imageScanCompletedAt:ImageScanFindingsSummary'</a>,
--   <a>imageScanFindingsSummary_imageScanCompletedAt</a> - The time of the
--   last completed image scan.
--   
--   <a>$sel:vulnerabilitySourceUpdatedAt:ImageScanFindingsSummary'</a>,
--   <a>imageScanFindingsSummary_vulnerabilitySourceUpdatedAt</a> - The
--   time when the vulnerability data was last scanned.
--   
--   <a>$sel:findingSeverityCounts:ImageScanFindingsSummary'</a>,
--   <a>imageScanFindingsSummary_findingSeverityCounts</a> - The image
--   vulnerability counts, sorted by severity.
newImageScanFindingsSummary :: ImageScanFindingsSummary

-- | The time of the last completed image scan.
imageScanFindingsSummary_imageScanCompletedAt :: Lens' ImageScanFindingsSummary (Maybe UTCTime)

-- | The time when the vulnerability data was last scanned.
imageScanFindingsSummary_vulnerabilitySourceUpdatedAt :: Lens' ImageScanFindingsSummary (Maybe UTCTime)

-- | The image vulnerability counts, sorted by severity.
imageScanFindingsSummary_findingSeverityCounts :: Lens' ImageScanFindingsSummary (Maybe (HashMap FindingSeverity Natural))

-- | The current status of an image scan.
--   
--   <i>See:</i> <a>newImageScanStatus</a> smart constructor.
data ImageScanStatus
ImageScanStatus' :: Maybe ScanStatus -> Maybe Text -> ImageScanStatus

-- | The current state of an image scan.
[$sel:status:ImageScanStatus'] :: ImageScanStatus -> Maybe ScanStatus

-- | The description of the image scan status.
[$sel:description:ImageScanStatus'] :: ImageScanStatus -> Maybe Text

-- | Create a value of <a>ImageScanStatus</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:ImageScanStatus'</a>, <a>imageScanStatus_status</a> -
--   The current state of an image scan.
--   
--   <a>$sel:description:ImageScanStatus'</a>,
--   <a>imageScanStatus_description</a> - The description of the image scan
--   status.
newImageScanStatus :: ImageScanStatus

-- | The current state of an image scan.
imageScanStatus_status :: Lens' ImageScanStatus (Maybe ScanStatus)

-- | The description of the image scan status.
imageScanStatus_description :: Lens' ImageScanStatus (Maybe Text)

-- | The image scanning configuration for a repository.
--   
--   <i>See:</i> <a>newImageScanningConfiguration</a> smart constructor.
data ImageScanningConfiguration
ImageScanningConfiguration' :: Maybe Bool -> ImageScanningConfiguration

-- | The setting that determines whether images are scanned after being
--   pushed to a repository. If set to <tt>true</tt>, images will be
--   scanned after being pushed. If this parameter is not specified, it
--   will default to <tt>false</tt> and images will not be scanned unless a
--   scan is manually started with the <a>API_StartImageScan</a> API.
[$sel:scanOnPush:ImageScanningConfiguration'] :: ImageScanningConfiguration -> Maybe Bool

-- | Create a value of <a>ImageScanningConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:scanOnPush:ImageScanningConfiguration'</a>,
--   <a>imageScanningConfiguration_scanOnPush</a> - The setting that
--   determines whether images are scanned after being pushed to a
--   repository. If set to <tt>true</tt>, images will be scanned after
--   being pushed. If this parameter is not specified, it will default to
--   <tt>false</tt> and images will not be scanned unless a scan is
--   manually started with the <a>API_StartImageScan</a> API.
newImageScanningConfiguration :: ImageScanningConfiguration

-- | The setting that determines whether images are scanned after being
--   pushed to a repository. If set to <tt>true</tt>, images will be
--   scanned after being pushed. If this parameter is not specified, it
--   will default to <tt>false</tt> and images will not be scanned unless a
--   scan is manually started with the <a>API_StartImageScan</a> API.
imageScanningConfiguration_scanOnPush :: Lens' ImageScanningConfiguration (Maybe Bool)

-- | An object representing an Amazon ECR image layer.
--   
--   <i>See:</i> <a>newLayer</a> smart constructor.
data Layer
Layer' :: Maybe Integer -> Maybe LayerAvailability -> Maybe Text -> Maybe Text -> Layer

-- | The size, in bytes, of the image layer.
[$sel:layerSize:Layer'] :: Layer -> Maybe Integer

-- | The availability status of the image layer.
[$sel:layerAvailability:Layer'] :: Layer -> Maybe LayerAvailability

-- | The media type of the layer, such as
--   <tt>application/vnd.docker.image.rootfs.diff.tar.gzip</tt> or
--   <tt>application/vnd.oci.image.layer.v1.tar+gzip</tt>.
[$sel:mediaType:Layer'] :: Layer -> Maybe Text

-- | The <tt>sha256</tt> digest of the image layer.
[$sel:layerDigest:Layer'] :: Layer -> Maybe Text

-- | Create a value of <a>Layer</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:layerSize:Layer'</a>, <a>layer_layerSize</a> - The size, in
--   bytes, of the image layer.
--   
--   <a>$sel:layerAvailability:Layer'</a>, <a>layer_layerAvailability</a> -
--   The availability status of the image layer.
--   
--   <a>$sel:mediaType:Layer'</a>, <a>layer_mediaType</a> - The media type
--   of the layer, such as
--   <tt>application/vnd.docker.image.rootfs.diff.tar.gzip</tt> or
--   <tt>application/vnd.oci.image.layer.v1.tar+gzip</tt>.
--   
--   <a>$sel:layerDigest:Layer'</a>, <a>layer_layerDigest</a> - The
--   <tt>sha256</tt> digest of the image layer.
newLayer :: Layer

-- | The size, in bytes, of the image layer.
layer_layerSize :: Lens' Layer (Maybe Integer)

-- | The availability status of the image layer.
layer_layerAvailability :: Lens' Layer (Maybe LayerAvailability)

-- | The media type of the layer, such as
--   <tt>application/vnd.docker.image.rootfs.diff.tar.gzip</tt> or
--   <tt>application/vnd.oci.image.layer.v1.tar+gzip</tt>.
layer_mediaType :: Lens' Layer (Maybe Text)

-- | The <tt>sha256</tt> digest of the image layer.
layer_layerDigest :: Lens' Layer (Maybe Text)

-- | An object representing an Amazon ECR image layer failure.
--   
--   <i>See:</i> <a>newLayerFailure</a> smart constructor.
data LayerFailure
LayerFailure' :: Maybe LayerFailureCode -> Maybe Text -> Maybe Text -> LayerFailure

-- | The failure code associated with the failure.
[$sel:failureCode:LayerFailure'] :: LayerFailure -> Maybe LayerFailureCode

-- | The reason for the failure.
[$sel:failureReason:LayerFailure'] :: LayerFailure -> Maybe Text

-- | The layer digest associated with the failure.
[$sel:layerDigest:LayerFailure'] :: LayerFailure -> Maybe Text

-- | Create a value of <a>LayerFailure</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failureCode:LayerFailure'</a>, <a>layerFailure_failureCode</a>
--   - The failure code associated with the failure.
--   
--   <a>$sel:failureReason:LayerFailure'</a>,
--   <a>layerFailure_failureReason</a> - The reason for the failure.
--   
--   <a>$sel:layerDigest:LayerFailure'</a>, <a>layerFailure_layerDigest</a>
--   - The layer digest associated with the failure.
newLayerFailure :: LayerFailure

-- | The failure code associated with the failure.
layerFailure_failureCode :: Lens' LayerFailure (Maybe LayerFailureCode)

-- | The reason for the failure.
layerFailure_failureReason :: Lens' LayerFailure (Maybe Text)

-- | The layer digest associated with the failure.
layerFailure_layerDigest :: Lens' LayerFailure (Maybe Text)

-- | The filter for the lifecycle policy preview.
--   
--   <i>See:</i> <a>newLifecyclePolicyPreviewFilter</a> smart constructor.
data LifecyclePolicyPreviewFilter
LifecyclePolicyPreviewFilter' :: Maybe TagStatus -> LifecyclePolicyPreviewFilter

-- | The tag status of the image.
[$sel:tagStatus:LifecyclePolicyPreviewFilter'] :: LifecyclePolicyPreviewFilter -> Maybe TagStatus

-- | Create a value of <a>LifecyclePolicyPreviewFilter</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tagStatus:LifecyclePolicyPreviewFilter'</a>,
--   <a>lifecyclePolicyPreviewFilter_tagStatus</a> - The tag status of the
--   image.
newLifecyclePolicyPreviewFilter :: LifecyclePolicyPreviewFilter

-- | The tag status of the image.
lifecyclePolicyPreviewFilter_tagStatus :: Lens' LifecyclePolicyPreviewFilter (Maybe TagStatus)

-- | The result of the lifecycle policy preview.
--   
--   <i>See:</i> <a>newLifecyclePolicyPreviewResult</a> smart constructor.
data LifecyclePolicyPreviewResult
LifecyclePolicyPreviewResult' :: Maybe Text -> Maybe Natural -> Maybe [Text] -> Maybe LifecyclePolicyRuleAction -> Maybe POSIX -> LifecyclePolicyPreviewResult

-- | The <tt>sha256</tt> digest of the image manifest.
[$sel:imageDigest:LifecyclePolicyPreviewResult'] :: LifecyclePolicyPreviewResult -> Maybe Text

-- | The priority of the applied rule.
[$sel:appliedRulePriority:LifecyclePolicyPreviewResult'] :: LifecyclePolicyPreviewResult -> Maybe Natural

-- | The list of tags associated with this image.
[$sel:imageTags:LifecyclePolicyPreviewResult'] :: LifecyclePolicyPreviewResult -> Maybe [Text]

-- | The type of action to be taken.
[$sel:action:LifecyclePolicyPreviewResult'] :: LifecyclePolicyPreviewResult -> Maybe LifecyclePolicyRuleAction

-- | The date and time, expressed in standard JavaScript date format, at
--   which the current image was pushed to the repository.
[$sel:imagePushedAt:LifecyclePolicyPreviewResult'] :: LifecyclePolicyPreviewResult -> Maybe POSIX

-- | Create a value of <a>LifecyclePolicyPreviewResult</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:imageDigest:LifecyclePolicyPreviewResult'</a>,
--   <a>lifecyclePolicyPreviewResult_imageDigest</a> - The <tt>sha256</tt>
--   digest of the image manifest.
--   
--   <a>$sel:appliedRulePriority:LifecyclePolicyPreviewResult'</a>,
--   <a>lifecyclePolicyPreviewResult_appliedRulePriority</a> - The priority
--   of the applied rule.
--   
--   <a>$sel:imageTags:LifecyclePolicyPreviewResult'</a>,
--   <a>lifecyclePolicyPreviewResult_imageTags</a> - The list of tags
--   associated with this image.
--   
--   <a>$sel:action:LifecyclePolicyPreviewResult'</a>,
--   <a>lifecyclePolicyPreviewResult_action</a> - The type of action to be
--   taken.
--   
--   <a>$sel:imagePushedAt:LifecyclePolicyPreviewResult'</a>,
--   <a>lifecyclePolicyPreviewResult_imagePushedAt</a> - The date and time,
--   expressed in standard JavaScript date format, at which the current
--   image was pushed to the repository.
newLifecyclePolicyPreviewResult :: LifecyclePolicyPreviewResult

-- | The <tt>sha256</tt> digest of the image manifest.
lifecyclePolicyPreviewResult_imageDigest :: Lens' LifecyclePolicyPreviewResult (Maybe Text)

-- | The priority of the applied rule.
lifecyclePolicyPreviewResult_appliedRulePriority :: Lens' LifecyclePolicyPreviewResult (Maybe Natural)

-- | The list of tags associated with this image.
lifecyclePolicyPreviewResult_imageTags :: Lens' LifecyclePolicyPreviewResult (Maybe [Text])

-- | The type of action to be taken.
lifecyclePolicyPreviewResult_action :: Lens' LifecyclePolicyPreviewResult (Maybe LifecyclePolicyRuleAction)

-- | The date and time, expressed in standard JavaScript date format, at
--   which the current image was pushed to the repository.
lifecyclePolicyPreviewResult_imagePushedAt :: Lens' LifecyclePolicyPreviewResult (Maybe UTCTime)

-- | The summary of the lifecycle policy preview request.
--   
--   <i>See:</i> <a>newLifecyclePolicyPreviewSummary</a> smart constructor.
data LifecyclePolicyPreviewSummary
LifecyclePolicyPreviewSummary' :: Maybe Natural -> LifecyclePolicyPreviewSummary

-- | The number of expiring images.
[$sel:expiringImageTotalCount:LifecyclePolicyPreviewSummary'] :: LifecyclePolicyPreviewSummary -> Maybe Natural

-- | Create a value of <a>LifecyclePolicyPreviewSummary</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:expiringImageTotalCount:LifecyclePolicyPreviewSummary'</a>,
--   <a>lifecyclePolicyPreviewSummary_expiringImageTotalCount</a> - The
--   number of expiring images.
newLifecyclePolicyPreviewSummary :: LifecyclePolicyPreviewSummary

-- | The number of expiring images.
lifecyclePolicyPreviewSummary_expiringImageTotalCount :: Lens' LifecyclePolicyPreviewSummary (Maybe Natural)

-- | The type of action to be taken.
--   
--   <i>See:</i> <a>newLifecyclePolicyRuleAction</a> smart constructor.
data LifecyclePolicyRuleAction
LifecyclePolicyRuleAction' :: Maybe ImageActionType -> LifecyclePolicyRuleAction

-- | The type of action to be taken.
[$sel:type':LifecyclePolicyRuleAction'] :: LifecyclePolicyRuleAction -> Maybe ImageActionType

-- | Create a value of <a>LifecyclePolicyRuleAction</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:type':LifecyclePolicyRuleAction'</a>,
--   <a>lifecyclePolicyRuleAction_type</a> - The type of action to be
--   taken.
newLifecyclePolicyRuleAction :: LifecyclePolicyRuleAction

-- | The type of action to be taken.
lifecyclePolicyRuleAction_type :: Lens' LifecyclePolicyRuleAction (Maybe ImageActionType)

-- | An object representing a filter on a ListImages operation.
--   
--   <i>See:</i> <a>newListImagesFilter</a> smart constructor.
data ListImagesFilter
ListImagesFilter' :: Maybe TagStatus -> ListImagesFilter

-- | The tag status with which to filter your ListImages results. You can
--   filter results based on whether they are <tt>TAGGED</tt> or
--   <tt>UNTAGGED</tt>.
[$sel:tagStatus:ListImagesFilter'] :: ListImagesFilter -> Maybe TagStatus

-- | Create a value of <a>ListImagesFilter</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tagStatus:ListImagesFilter'</a>,
--   <a>listImagesFilter_tagStatus</a> - The tag status with which to
--   filter your ListImages results. You can filter results based on
--   whether they are <tt>TAGGED</tt> or <tt>UNTAGGED</tt>.
newListImagesFilter :: ListImagesFilter

-- | The tag status with which to filter your ListImages results. You can
--   filter results based on whether they are <tt>TAGGED</tt> or
--   <tt>UNTAGGED</tt>.
listImagesFilter_tagStatus :: Lens' ListImagesFilter (Maybe TagStatus)

-- | The replication configuration for a registry.
--   
--   <i>See:</i> <a>newReplicationConfiguration</a> smart constructor.
data ReplicationConfiguration
ReplicationConfiguration' :: [ReplicationRule] -> ReplicationConfiguration

-- | An array of objects representing the replication destinations and
--   repository filters for a replication configuration.
[$sel:rules:ReplicationConfiguration'] :: ReplicationConfiguration -> [ReplicationRule]

-- | Create a value of <a>ReplicationConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rules:ReplicationConfiguration'</a>,
--   <a>replicationConfiguration_rules</a> - An array of objects
--   representing the replication destinations and repository filters for a
--   replication configuration.
newReplicationConfiguration :: ReplicationConfiguration

-- | An array of objects representing the replication destinations and
--   repository filters for a replication configuration.
replicationConfiguration_rules :: Lens' ReplicationConfiguration [ReplicationRule]

-- | An array of objects representing the destination for a replication
--   rule.
--   
--   <i>See:</i> <a>newReplicationDestination</a> smart constructor.
data ReplicationDestination
ReplicationDestination' :: Text -> Text -> ReplicationDestination

-- | The Region to replicate to.
[$sel:region:ReplicationDestination'] :: ReplicationDestination -> Text

-- | The Amazon Web Services account ID of the Amazon ECR private registry
--   to replicate to. When configuring cross-Region replication within your
--   own registry, specify your own account ID.
[$sel:registryId:ReplicationDestination'] :: ReplicationDestination -> Text

-- | Create a value of <a>ReplicationDestination</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:region:ReplicationDestination'</a>,
--   <a>replicationDestination_region</a> - The Region to replicate to.
--   
--   <a>$sel:registryId:ReplicationDestination'</a>,
--   <a>replicationDestination_registryId</a> - The Amazon Web Services
--   account ID of the Amazon ECR private registry to replicate to. When
--   configuring cross-Region replication within your own registry, specify
--   your own account ID.
newReplicationDestination :: Text -> Text -> ReplicationDestination

-- | The Region to replicate to.
replicationDestination_region :: Lens' ReplicationDestination Text

-- | The Amazon Web Services account ID of the Amazon ECR private registry
--   to replicate to. When configuring cross-Region replication within your
--   own registry, specify your own account ID.
replicationDestination_registryId :: Lens' ReplicationDestination Text

-- | An array of objects representing the replication destinations and
--   repository filters for a replication configuration.
--   
--   <i>See:</i> <a>newReplicationRule</a> smart constructor.
data ReplicationRule
ReplicationRule' :: Maybe (NonEmpty RepositoryFilter) -> [ReplicationDestination] -> ReplicationRule

-- | An array of objects representing the filters for a replication rule.
--   Specifying a repository filter for a replication rule provides a
--   method for controlling which repositories in a private registry are
--   replicated.
[$sel:repositoryFilters:ReplicationRule'] :: ReplicationRule -> Maybe (NonEmpty RepositoryFilter)

-- | An array of objects representing the destination for a replication
--   rule.
[$sel:destinations:ReplicationRule'] :: ReplicationRule -> [ReplicationDestination]

-- | Create a value of <a>ReplicationRule</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:repositoryFilters:ReplicationRule'</a>,
--   <a>replicationRule_repositoryFilters</a> - An array of objects
--   representing the filters for a replication rule. Specifying a
--   repository filter for a replication rule provides a method for
--   controlling which repositories in a private registry are replicated.
--   
--   <a>$sel:destinations:ReplicationRule'</a>,
--   <a>replicationRule_destinations</a> - An array of objects representing
--   the destination for a replication rule.
newReplicationRule :: ReplicationRule

-- | An array of objects representing the filters for a replication rule.
--   Specifying a repository filter for a replication rule provides a
--   method for controlling which repositories in a private registry are
--   replicated.
replicationRule_repositoryFilters :: Lens' ReplicationRule (Maybe (NonEmpty RepositoryFilter))

-- | An array of objects representing the destination for a replication
--   rule.
replicationRule_destinations :: Lens' ReplicationRule [ReplicationDestination]

-- | An object representing a repository.
--   
--   <i>See:</i> <a>newRepository</a> smart constructor.
data Repository
Repository' :: Maybe EncryptionConfiguration -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe ImageScanningConfiguration -> Maybe ImageTagMutability -> Repository

-- | The encryption configuration for the repository. This determines how
--   the contents of your repository are encrypted at rest.
[$sel:encryptionConfiguration:Repository'] :: Repository -> Maybe EncryptionConfiguration

-- | The URI for the repository. You can use this URI for container image
--   <tt>push</tt> and <tt>pull</tt> operations.
[$sel:repositoryUri:Repository'] :: Repository -> Maybe Text

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository.
[$sel:registryId:Repository'] :: Repository -> Maybe Text

-- | The date and time, in JavaScript date format, when the repository was
--   created.
[$sel:createdAt:Repository'] :: Repository -> Maybe POSIX

-- | The name of the repository.
[$sel:repositoryName:Repository'] :: Repository -> Maybe Text

-- | The Amazon Resource Name (ARN) that identifies the repository. The ARN
--   contains the <tt>arn:aws:ecr</tt> namespace, followed by the region of
--   the repository, Amazon Web Services account ID of the repository
--   owner, repository namespace, and repository name. For example,
--   <tt>arn:aws:ecr:region:012345678910:repository/test</tt>.
[$sel:repositoryArn:Repository'] :: Repository -> Maybe Text
[$sel:imageScanningConfiguration:Repository'] :: Repository -> Maybe ImageScanningConfiguration

-- | The tag mutability setting for the repository.
[$sel:imageTagMutability:Repository'] :: Repository -> Maybe ImageTagMutability

-- | Create a value of <a>Repository</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:encryptionConfiguration:Repository'</a>,
--   <a>repository_encryptionConfiguration</a> - The encryption
--   configuration for the repository. This determines how the contents of
--   your repository are encrypted at rest.
--   
--   <a>$sel:repositoryUri:Repository'</a>, <a>repository_repositoryUri</a>
--   - The URI for the repository. You can use this URI for container image
--   <tt>push</tt> and <tt>pull</tt> operations.
--   
--   <a>$sel:registryId:Repository'</a>, <a>repository_registryId</a> - The
--   Amazon Web Services account ID associated with the registry that
--   contains the repository.
--   
--   <a>$sel:createdAt:Repository'</a>, <a>repository_createdAt</a> - The
--   date and time, in JavaScript date format, when the repository was
--   created.
--   
--   <a>$sel:repositoryName:Repository'</a>,
--   <a>repository_repositoryName</a> - The name of the repository.
--   
--   <a>$sel:repositoryArn:Repository'</a>, <a>repository_repositoryArn</a>
--   - The Amazon Resource Name (ARN) that identifies the repository. The
--   ARN contains the <tt>arn:aws:ecr</tt> namespace, followed by the
--   region of the repository, Amazon Web Services account ID of the
--   repository owner, repository namespace, and repository name. For
--   example, <tt>arn:aws:ecr:region:012345678910:repository/test</tt>.
--   
--   <a>$sel:imageScanningConfiguration:Repository'</a>,
--   <a>repository_imageScanningConfiguration</a> - Undocumented member.
--   
--   <a>$sel:imageTagMutability:Repository'</a>,
--   <a>repository_imageTagMutability</a> - The tag mutability setting for
--   the repository.
newRepository :: Repository

-- | The encryption configuration for the repository. This determines how
--   the contents of your repository are encrypted at rest.
repository_encryptionConfiguration :: Lens' Repository (Maybe EncryptionConfiguration)

-- | The URI for the repository. You can use this URI for container image
--   <tt>push</tt> and <tt>pull</tt> operations.
repository_repositoryUri :: Lens' Repository (Maybe Text)

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository.
repository_registryId :: Lens' Repository (Maybe Text)

-- | The date and time, in JavaScript date format, when the repository was
--   created.
repository_createdAt :: Lens' Repository (Maybe UTCTime)

-- | The name of the repository.
repository_repositoryName :: Lens' Repository (Maybe Text)

-- | The Amazon Resource Name (ARN) that identifies the repository. The ARN
--   contains the <tt>arn:aws:ecr</tt> namespace, followed by the region of
--   the repository, Amazon Web Services account ID of the repository
--   owner, repository namespace, and repository name. For example,
--   <tt>arn:aws:ecr:region:012345678910:repository/test</tt>.
repository_repositoryArn :: Lens' Repository (Maybe Text)

-- | Undocumented member.
repository_imageScanningConfiguration :: Lens' Repository (Maybe ImageScanningConfiguration)

-- | The tag mutability setting for the repository.
repository_imageTagMutability :: Lens' Repository (Maybe ImageTagMutability)

-- | The filter settings used with image replication. Specifying a
--   repository filter to a replication rule provides a method for
--   controlling which repositories in a private registry are replicated.
--   If no repository filter is specified, all images in the repository are
--   replicated.
--   
--   <i>See:</i> <a>newRepositoryFilter</a> smart constructor.
data RepositoryFilter
RepositoryFilter' :: Text -> RepositoryFilterType -> RepositoryFilter

-- | The repository filter details. When the <tt>PREFIX_MATCH</tt> filter
--   type is specified, this value is required and should be the repository
--   name prefix to configure replication for.
[$sel:filter':RepositoryFilter'] :: RepositoryFilter -> Text

-- | The repository filter type. The only supported value is
--   <tt>PREFIX_MATCH</tt>, which is a repository name prefix specified
--   with the <tt>filter</tt> parameter.
[$sel:filterType:RepositoryFilter'] :: RepositoryFilter -> RepositoryFilterType

-- | Create a value of <a>RepositoryFilter</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:filter':RepositoryFilter'</a>, <a>repositoryFilter_filter</a>
--   - The repository filter details. When the <tt>PREFIX_MATCH</tt> filter
--   type is specified, this value is required and should be the repository
--   name prefix to configure replication for.
--   
--   <a>$sel:filterType:RepositoryFilter'</a>,
--   <a>repositoryFilter_filterType</a> - The repository filter type. The
--   only supported value is <tt>PREFIX_MATCH</tt>, which is a repository
--   name prefix specified with the <tt>filter</tt> parameter.
newRepositoryFilter :: Text -> RepositoryFilterType -> RepositoryFilter

-- | The repository filter details. When the <tt>PREFIX_MATCH</tt> filter
--   type is specified, this value is required and should be the repository
--   name prefix to configure replication for.
repositoryFilter_filter :: Lens' RepositoryFilter Text

-- | The repository filter type. The only supported value is
--   <tt>PREFIX_MATCH</tt>, which is a repository name prefix specified
--   with the <tt>filter</tt> parameter.
repositoryFilter_filterType :: Lens' RepositoryFilter RepositoryFilterType

-- | The metadata that you apply to a resource to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define. Tag keys can have a maximum character length of
--   128 characters, and tag values can have a maximum length of 256
--   characters.
--   
--   <i>See:</i> <a>newTag</a> smart constructor.
data Tag
Tag' :: Maybe Text -> Maybe Text -> Tag

-- | One part of a key-value pair that make up a tag. A <tt>key</tt> is a
--   general label that acts like a category for more specific tag values.
[$sel:key:Tag'] :: Tag -> Maybe Text

-- | The optional part of a key-value pair that make up a tag. A
--   <tt>value</tt> acts as a descriptor within a tag category (key).
[$sel:value:Tag'] :: Tag -> Maybe Text

-- | Create a value of <a>Tag</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:key:Tag'</a>, <a>tag_key</a> - One part of a key-value pair
--   that make up a tag. A <tt>key</tt> is a general label that acts like a
--   category for more specific tag values.
--   
--   <a>$sel:value:Tag'</a>, <a>tag_value</a> - The optional part of a
--   key-value pair that make up a tag. A <tt>value</tt> acts as a
--   descriptor within a tag category (key).
newTag :: Tag

-- | One part of a key-value pair that make up a tag. A <tt>key</tt> is a
--   general label that acts like a category for more specific tag values.
tag_key :: Lens' Tag (Maybe Text)

-- | The optional part of a key-value pair that make up a tag. A
--   <tt>value</tt> acts as a descriptor within a tag category (key).
tag_value :: Lens' Tag (Maybe Text)


-- | Adds specified tags to a resource with the specified ARN. Existing
--   tags on a resource are not changed if they are not specified in the
--   request parameters.
module Network.AWS.ECR.TagResource

-- | <i>See:</i> <a>newTagResource</a> smart constructor.
data TagResource
TagResource' :: Text -> [Tag] -> TagResource

-- | The Amazon Resource Name (ARN) of the the resource to which to add
--   tags. Currently, the only supported resource is an Amazon ECR
--   repository.
[$sel:resourceArn:TagResource'] :: TagResource -> Text

-- | The tags to add to the resource. A tag is an array of key-value pairs.
--   Tag keys can have a maximum character length of 128 characters, and
--   tag values can have a maximum length of 256 characters.
[$sel:tags:TagResource'] :: TagResource -> [Tag]

-- | Create a value of <a>TagResource</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:TagResource'</a>, <a>tagResource_resourceArn</a> -
--   The Amazon Resource Name (ARN) of the the resource to which to add
--   tags. Currently, the only supported resource is an Amazon ECR
--   repository.
--   
--   <a>$sel:tags:TagResource'</a>, <a>tagResource_tags</a> - The tags to
--   add to the resource. A tag is an array of key-value pairs. Tag keys
--   can have a maximum character length of 128 characters, and tag values
--   can have a maximum length of 256 characters.
newTagResource :: Text -> TagResource

-- | The Amazon Resource Name (ARN) of the the resource to which to add
--   tags. Currently, the only supported resource is an Amazon ECR
--   repository.
tagResource_resourceArn :: Lens' TagResource Text

-- | The tags to add to the resource. A tag is an array of key-value pairs.
--   Tag keys can have a maximum character length of 128 characters, and
--   tag values can have a maximum length of 256 characters.
tagResource_tags :: Lens' TagResource [Tag]

-- | <i>See:</i> <a>newTagResourceResponse</a> smart constructor.
data TagResourceResponse
TagResourceResponse' :: Int -> TagResourceResponse

-- | The response's http status code.
[$sel:httpStatus:TagResourceResponse'] :: TagResourceResponse -> Int

-- | Create a value of <a>TagResourceResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:TagResourceResponse'</a>,
--   <a>tagResourceResponse_httpStatus</a> - The response's http status
--   code.
newTagResourceResponse :: Int -> TagResourceResponse

-- | The response's http status code.
tagResourceResponse_httpStatus :: Lens' TagResourceResponse Int
instance GHC.Generics.Generic Network.AWS.ECR.TagResource.TagResource
instance GHC.Show.Show Network.AWS.ECR.TagResource.TagResource
instance GHC.Read.Read Network.AWS.ECR.TagResource.TagResource
instance GHC.Classes.Eq Network.AWS.ECR.TagResource.TagResource
instance GHC.Generics.Generic Network.AWS.ECR.TagResource.TagResourceResponse
instance GHC.Show.Show Network.AWS.ECR.TagResource.TagResourceResponse
instance GHC.Read.Read Network.AWS.ECR.TagResource.TagResourceResponse
instance GHC.Classes.Eq Network.AWS.ECR.TagResource.TagResourceResponse
instance Network.AWS.Types.AWSRequest Network.AWS.ECR.TagResource.TagResource
instance Control.DeepSeq.NFData Network.AWS.ECR.TagResource.TagResourceResponse
instance Data.Hashable.Class.Hashable Network.AWS.ECR.TagResource.TagResource
instance Control.DeepSeq.NFData Network.AWS.ECR.TagResource.TagResource
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.ECR.TagResource.TagResource
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.TagResource.TagResource
instance Network.AWS.Data.Path.ToPath Network.AWS.ECR.TagResource.TagResource
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.TagResource.TagResource


-- | Starts a preview of a lifecycle policy for the specified repository.
--   This allows you to see the results before associating the lifecycle
--   policy with the repository.
module Network.AWS.ECR.StartLifecyclePolicyPreview

-- | <i>See:</i> <a>newStartLifecyclePolicyPreview</a> smart constructor.
data StartLifecyclePolicyPreview
StartLifecyclePolicyPreview' :: Maybe Text -> Maybe Text -> Text -> StartLifecyclePolicyPreview

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository. If you do not specify a registry, the default
--   registry is assumed.
[$sel:registryId:StartLifecyclePolicyPreview'] :: StartLifecyclePolicyPreview -> Maybe Text

-- | The policy to be evaluated against. If you do not specify a policy,
--   the current policy for the repository is used.
[$sel:lifecyclePolicyText:StartLifecyclePolicyPreview'] :: StartLifecyclePolicyPreview -> Maybe Text

-- | The name of the repository to be evaluated.
[$sel:repositoryName:StartLifecyclePolicyPreview'] :: StartLifecyclePolicyPreview -> Text

-- | Create a value of <a>StartLifecyclePolicyPreview</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:StartLifecyclePolicyPreview'</a>,
--   <a>startLifecyclePolicyPreview_registryId</a> - The Amazon Web
--   Services account ID associated with the registry that contains the
--   repository. If you do not specify a registry, the default registry is
--   assumed.
--   
--   <a>$sel:lifecyclePolicyText:StartLifecyclePolicyPreview'</a>,
--   <a>startLifecyclePolicyPreview_lifecyclePolicyText</a> - The policy to
--   be evaluated against. If you do not specify a policy, the current
--   policy for the repository is used.
--   
--   <a>$sel:repositoryName:StartLifecyclePolicyPreview'</a>,
--   <a>startLifecyclePolicyPreview_repositoryName</a> - The name of the
--   repository to be evaluated.
newStartLifecyclePolicyPreview :: Text -> StartLifecyclePolicyPreview

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository. If you do not specify a registry, the default
--   registry is assumed.
startLifecyclePolicyPreview_registryId :: Lens' StartLifecyclePolicyPreview (Maybe Text)

-- | The policy to be evaluated against. If you do not specify a policy,
--   the current policy for the repository is used.
startLifecyclePolicyPreview_lifecyclePolicyText :: Lens' StartLifecyclePolicyPreview (Maybe Text)

-- | The name of the repository to be evaluated.
startLifecyclePolicyPreview_repositoryName :: Lens' StartLifecyclePolicyPreview Text

-- | <i>See:</i> <a>newStartLifecyclePolicyPreviewResponse</a> smart
--   constructor.
data StartLifecyclePolicyPreviewResponse
StartLifecyclePolicyPreviewResponse' :: Maybe LifecyclePolicyPreviewStatus -> Maybe Text -> Maybe Text -> Maybe Text -> Int -> StartLifecyclePolicyPreviewResponse

-- | The status of the lifecycle policy preview request.
[$sel:status:StartLifecyclePolicyPreviewResponse'] :: StartLifecyclePolicyPreviewResponse -> Maybe LifecyclePolicyPreviewStatus

-- | The registry ID associated with the request.
[$sel:registryId:StartLifecyclePolicyPreviewResponse'] :: StartLifecyclePolicyPreviewResponse -> Maybe Text

-- | The repository name associated with the request.
[$sel:repositoryName:StartLifecyclePolicyPreviewResponse'] :: StartLifecyclePolicyPreviewResponse -> Maybe Text

-- | The JSON repository policy text.
[$sel:lifecyclePolicyText:StartLifecyclePolicyPreviewResponse'] :: StartLifecyclePolicyPreviewResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:StartLifecyclePolicyPreviewResponse'] :: StartLifecyclePolicyPreviewResponse -> Int

-- | Create a value of <a>StartLifecyclePolicyPreviewResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:StartLifecyclePolicyPreviewResponse'</a>,
--   <a>startLifecyclePolicyPreviewResponse_status</a> - The status of the
--   lifecycle policy preview request.
--   
--   <a>$sel:registryId:StartLifecyclePolicyPreview'</a>,
--   <a>startLifecyclePolicyPreviewResponse_registryId</a> - The registry
--   ID associated with the request.
--   
--   <a>$sel:repositoryName:StartLifecyclePolicyPreview'</a>,
--   <a>startLifecyclePolicyPreviewResponse_repositoryName</a> - The
--   repository name associated with the request.
--   
--   <a>$sel:lifecyclePolicyText:StartLifecyclePolicyPreview'</a>,
--   <a>startLifecyclePolicyPreviewResponse_lifecyclePolicyText</a> - The
--   JSON repository policy text.
--   
--   <a>$sel:httpStatus:StartLifecyclePolicyPreviewResponse'</a>,
--   <a>startLifecyclePolicyPreviewResponse_httpStatus</a> - The response's
--   http status code.
newStartLifecyclePolicyPreviewResponse :: Int -> StartLifecyclePolicyPreviewResponse

-- | The status of the lifecycle policy preview request.
startLifecyclePolicyPreviewResponse_status :: Lens' StartLifecyclePolicyPreviewResponse (Maybe LifecyclePolicyPreviewStatus)

-- | The registry ID associated with the request.
startLifecyclePolicyPreviewResponse_registryId :: Lens' StartLifecyclePolicyPreviewResponse (Maybe Text)

-- | The repository name associated with the request.
startLifecyclePolicyPreviewResponse_repositoryName :: Lens' StartLifecyclePolicyPreviewResponse (Maybe Text)

-- | The JSON repository policy text.
startLifecyclePolicyPreviewResponse_lifecyclePolicyText :: Lens' StartLifecyclePolicyPreviewResponse (Maybe Text)

-- | The response's http status code.
startLifecyclePolicyPreviewResponse_httpStatus :: Lens' StartLifecyclePolicyPreviewResponse Int
instance GHC.Generics.Generic Network.AWS.ECR.StartLifecyclePolicyPreview.StartLifecyclePolicyPreview
instance GHC.Show.Show Network.AWS.ECR.StartLifecyclePolicyPreview.StartLifecyclePolicyPreview
instance GHC.Read.Read Network.AWS.ECR.StartLifecyclePolicyPreview.StartLifecyclePolicyPreview
instance GHC.Classes.Eq Network.AWS.ECR.StartLifecyclePolicyPreview.StartLifecyclePolicyPreview
instance GHC.Generics.Generic Network.AWS.ECR.StartLifecyclePolicyPreview.StartLifecyclePolicyPreviewResponse
instance GHC.Show.Show Network.AWS.ECR.StartLifecyclePolicyPreview.StartLifecyclePolicyPreviewResponse
instance GHC.Read.Read Network.AWS.ECR.StartLifecyclePolicyPreview.StartLifecyclePolicyPreviewResponse
instance GHC.Classes.Eq Network.AWS.ECR.StartLifecyclePolicyPreview.StartLifecyclePolicyPreviewResponse
instance Network.AWS.Types.AWSRequest Network.AWS.ECR.StartLifecyclePolicyPreview.StartLifecyclePolicyPreview
instance Control.DeepSeq.NFData Network.AWS.ECR.StartLifecyclePolicyPreview.StartLifecyclePolicyPreviewResponse
instance Data.Hashable.Class.Hashable Network.AWS.ECR.StartLifecyclePolicyPreview.StartLifecyclePolicyPreview
instance Control.DeepSeq.NFData Network.AWS.ECR.StartLifecyclePolicyPreview.StartLifecyclePolicyPreview
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.ECR.StartLifecyclePolicyPreview.StartLifecyclePolicyPreview
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.StartLifecyclePolicyPreview.StartLifecyclePolicyPreview
instance Network.AWS.Data.Path.ToPath Network.AWS.ECR.StartLifecyclePolicyPreview.StartLifecyclePolicyPreview
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.StartLifecyclePolicyPreview.StartLifecyclePolicyPreview


-- | Starts an image vulnerability scan. An image scan can only be started
--   once per 24 hours on an individual image. This limit includes if an
--   image was scanned on initial push. For more information, see <a>Image
--   scanning</a> in the <i>Amazon Elastic Container Registry User
--   Guide</i>.
module Network.AWS.ECR.StartImageScan

-- | <i>See:</i> <a>newStartImageScan</a> smart constructor.
data StartImageScan
StartImageScan' :: Maybe Text -> Text -> ImageIdentifier -> StartImageScan

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository in which to start an image scan request. If
--   you do not specify a registry, the default registry is assumed.
[$sel:registryId:StartImageScan'] :: StartImageScan -> Maybe Text

-- | The name of the repository that contains the images to scan.
[$sel:repositoryName:StartImageScan'] :: StartImageScan -> Text
[$sel:imageId:StartImageScan'] :: StartImageScan -> ImageIdentifier

-- | Create a value of <a>StartImageScan</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:StartImageScan'</a>,
--   <a>startImageScan_registryId</a> - The Amazon Web Services account ID
--   associated with the registry that contains the repository in which to
--   start an image scan request. If you do not specify a registry, the
--   default registry is assumed.
--   
--   <a>$sel:repositoryName:StartImageScan'</a>,
--   <a>startImageScan_repositoryName</a> - The name of the repository that
--   contains the images to scan.
--   
--   <a>$sel:imageId:StartImageScan'</a>, <a>startImageScan_imageId</a> -
--   Undocumented member.
newStartImageScan :: Text -> ImageIdentifier -> StartImageScan

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository in which to start an image scan request. If
--   you do not specify a registry, the default registry is assumed.
startImageScan_registryId :: Lens' StartImageScan (Maybe Text)

-- | The name of the repository that contains the images to scan.
startImageScan_repositoryName :: Lens' StartImageScan Text

-- | Undocumented member.
startImageScan_imageId :: Lens' StartImageScan ImageIdentifier

-- | <i>See:</i> <a>newStartImageScanResponse</a> smart constructor.
data StartImageScanResponse
StartImageScanResponse' :: Maybe ImageScanStatus -> Maybe Text -> Maybe Text -> Maybe ImageIdentifier -> Int -> StartImageScanResponse

-- | The current state of the scan.
[$sel:imageScanStatus:StartImageScanResponse'] :: StartImageScanResponse -> Maybe ImageScanStatus

-- | The registry ID associated with the request.
[$sel:registryId:StartImageScanResponse'] :: StartImageScanResponse -> Maybe Text

-- | The repository name associated with the request.
[$sel:repositoryName:StartImageScanResponse'] :: StartImageScanResponse -> Maybe Text
[$sel:imageId:StartImageScanResponse'] :: StartImageScanResponse -> Maybe ImageIdentifier

-- | The response's http status code.
[$sel:httpStatus:StartImageScanResponse'] :: StartImageScanResponse -> Int

-- | Create a value of <a>StartImageScanResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:imageScanStatus:StartImageScanResponse'</a>,
--   <a>startImageScanResponse_imageScanStatus</a> - The current state of
--   the scan.
--   
--   <a>$sel:registryId:StartImageScan'</a>,
--   <a>startImageScanResponse_registryId</a> - The registry ID associated
--   with the request.
--   
--   <a>$sel:repositoryName:StartImageScan'</a>,
--   <a>startImageScanResponse_repositoryName</a> - The repository name
--   associated with the request.
--   
--   <a>$sel:imageId:StartImageScan'</a>,
--   <a>startImageScanResponse_imageId</a> - Undocumented member.
--   
--   <a>$sel:httpStatus:StartImageScanResponse'</a>,
--   <a>startImageScanResponse_httpStatus</a> - The response's http status
--   code.
newStartImageScanResponse :: Int -> StartImageScanResponse

-- | The current state of the scan.
startImageScanResponse_imageScanStatus :: Lens' StartImageScanResponse (Maybe ImageScanStatus)

-- | The registry ID associated with the request.
startImageScanResponse_registryId :: Lens' StartImageScanResponse (Maybe Text)

-- | The repository name associated with the request.
startImageScanResponse_repositoryName :: Lens' StartImageScanResponse (Maybe Text)

-- | Undocumented member.
startImageScanResponse_imageId :: Lens' StartImageScanResponse (Maybe ImageIdentifier)

-- | The response's http status code.
startImageScanResponse_httpStatus :: Lens' StartImageScanResponse Int
instance GHC.Generics.Generic Network.AWS.ECR.StartImageScan.StartImageScan
instance GHC.Show.Show Network.AWS.ECR.StartImageScan.StartImageScan
instance GHC.Read.Read Network.AWS.ECR.StartImageScan.StartImageScan
instance GHC.Classes.Eq Network.AWS.ECR.StartImageScan.StartImageScan
instance GHC.Generics.Generic Network.AWS.ECR.StartImageScan.StartImageScanResponse
instance GHC.Show.Show Network.AWS.ECR.StartImageScan.StartImageScanResponse
instance GHC.Read.Read Network.AWS.ECR.StartImageScan.StartImageScanResponse
instance GHC.Classes.Eq Network.AWS.ECR.StartImageScan.StartImageScanResponse
instance Network.AWS.Types.AWSRequest Network.AWS.ECR.StartImageScan.StartImageScan
instance Control.DeepSeq.NFData Network.AWS.ECR.StartImageScan.StartImageScanResponse
instance Data.Hashable.Class.Hashable Network.AWS.ECR.StartImageScan.StartImageScan
instance Control.DeepSeq.NFData Network.AWS.ECR.StartImageScan.StartImageScan
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.ECR.StartImageScan.StartImageScan
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.StartImageScan.StartImageScan
instance Network.AWS.Data.Path.ToPath Network.AWS.ECR.StartImageScan.StartImageScan
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.StartImageScan.StartImageScan


-- | Applies a repository policy to the specified repository to control
--   access permissions. For more information, see <a>Amazon ECR Repository
--   policies</a> in the <i>Amazon Elastic Container Registry User
--   Guide</i>.
module Network.AWS.ECR.SetRepositoryPolicy

-- | <i>See:</i> <a>newSetRepositoryPolicy</a> smart constructor.
data SetRepositoryPolicy
SetRepositoryPolicy' :: Maybe Text -> Maybe Bool -> Text -> Text -> SetRepositoryPolicy

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository. If you do not specify a registry, the default
--   registry is assumed.
[$sel:registryId:SetRepositoryPolicy'] :: SetRepositoryPolicy -> Maybe Text

-- | If the policy you are attempting to set on a repository policy would
--   prevent you from setting another policy in the future, you must force
--   the SetRepositoryPolicy operation. This is intended to prevent
--   accidental repository lock outs.
[$sel:force:SetRepositoryPolicy'] :: SetRepositoryPolicy -> Maybe Bool

-- | The name of the repository to receive the policy.
[$sel:repositoryName:SetRepositoryPolicy'] :: SetRepositoryPolicy -> Text

-- | The JSON repository policy text to apply to the repository. For more
--   information, see <a>Amazon ECR repository policies</a> in the
--   <i>Amazon Elastic Container Registry User Guide</i>.
[$sel:policyText:SetRepositoryPolicy'] :: SetRepositoryPolicy -> Text

-- | Create a value of <a>SetRepositoryPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:SetRepositoryPolicy'</a>,
--   <a>setRepositoryPolicy_registryId</a> - The Amazon Web Services
--   account ID associated with the registry that contains the repository.
--   If you do not specify a registry, the default registry is assumed.
--   
--   <a>$sel:force:SetRepositoryPolicy'</a>,
--   <a>setRepositoryPolicy_force</a> - If the policy you are attempting to
--   set on a repository policy would prevent you from setting another
--   policy in the future, you must force the SetRepositoryPolicy
--   operation. This is intended to prevent accidental repository lock
--   outs.
--   
--   <a>$sel:repositoryName:SetRepositoryPolicy'</a>,
--   <a>setRepositoryPolicy_repositoryName</a> - The name of the repository
--   to receive the policy.
--   
--   <a>$sel:policyText:SetRepositoryPolicy'</a>,
--   <a>setRepositoryPolicy_policyText</a> - The JSON repository policy
--   text to apply to the repository. For more information, see <a>Amazon
--   ECR repository policies</a> in the <i>Amazon Elastic Container
--   Registry User Guide</i>.
newSetRepositoryPolicy :: Text -> Text -> SetRepositoryPolicy

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository. If you do not specify a registry, the default
--   registry is assumed.
setRepositoryPolicy_registryId :: Lens' SetRepositoryPolicy (Maybe Text)

-- | If the policy you are attempting to set on a repository policy would
--   prevent you from setting another policy in the future, you must force
--   the SetRepositoryPolicy operation. This is intended to prevent
--   accidental repository lock outs.
setRepositoryPolicy_force :: Lens' SetRepositoryPolicy (Maybe Bool)

-- | The name of the repository to receive the policy.
setRepositoryPolicy_repositoryName :: Lens' SetRepositoryPolicy Text

-- | The JSON repository policy text to apply to the repository. For more
--   information, see <a>Amazon ECR repository policies</a> in the
--   <i>Amazon Elastic Container Registry User Guide</i>.
setRepositoryPolicy_policyText :: Lens' SetRepositoryPolicy Text

-- | <i>See:</i> <a>newSetRepositoryPolicyResponse</a> smart constructor.
data SetRepositoryPolicyResponse
SetRepositoryPolicyResponse' :: Maybe Text -> Maybe Text -> Maybe Text -> Int -> SetRepositoryPolicyResponse

-- | The registry ID associated with the request.
[$sel:registryId:SetRepositoryPolicyResponse'] :: SetRepositoryPolicyResponse -> Maybe Text

-- | The repository name associated with the request.
[$sel:repositoryName:SetRepositoryPolicyResponse'] :: SetRepositoryPolicyResponse -> Maybe Text

-- | The JSON repository policy text applied to the repository.
[$sel:policyText:SetRepositoryPolicyResponse'] :: SetRepositoryPolicyResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:SetRepositoryPolicyResponse'] :: SetRepositoryPolicyResponse -> Int

-- | Create a value of <a>SetRepositoryPolicyResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:SetRepositoryPolicy'</a>,
--   <a>setRepositoryPolicyResponse_registryId</a> - The registry ID
--   associated with the request.
--   
--   <a>$sel:repositoryName:SetRepositoryPolicy'</a>,
--   <a>setRepositoryPolicyResponse_repositoryName</a> - The repository
--   name associated with the request.
--   
--   <a>$sel:policyText:SetRepositoryPolicy'</a>,
--   <a>setRepositoryPolicyResponse_policyText</a> - The JSON repository
--   policy text applied to the repository.
--   
--   <a>$sel:httpStatus:SetRepositoryPolicyResponse'</a>,
--   <a>setRepositoryPolicyResponse_httpStatus</a> - The response's http
--   status code.
newSetRepositoryPolicyResponse :: Int -> SetRepositoryPolicyResponse

-- | The registry ID associated with the request.
setRepositoryPolicyResponse_registryId :: Lens' SetRepositoryPolicyResponse (Maybe Text)

-- | The repository name associated with the request.
setRepositoryPolicyResponse_repositoryName :: Lens' SetRepositoryPolicyResponse (Maybe Text)

-- | The JSON repository policy text applied to the repository.
setRepositoryPolicyResponse_policyText :: Lens' SetRepositoryPolicyResponse (Maybe Text)

-- | The response's http status code.
setRepositoryPolicyResponse_httpStatus :: Lens' SetRepositoryPolicyResponse Int
instance GHC.Generics.Generic Network.AWS.ECR.SetRepositoryPolicy.SetRepositoryPolicy
instance GHC.Show.Show Network.AWS.ECR.SetRepositoryPolicy.SetRepositoryPolicy
instance GHC.Read.Read Network.AWS.ECR.SetRepositoryPolicy.SetRepositoryPolicy
instance GHC.Classes.Eq Network.AWS.ECR.SetRepositoryPolicy.SetRepositoryPolicy
instance GHC.Generics.Generic Network.AWS.ECR.SetRepositoryPolicy.SetRepositoryPolicyResponse
instance GHC.Show.Show Network.AWS.ECR.SetRepositoryPolicy.SetRepositoryPolicyResponse
instance GHC.Read.Read Network.AWS.ECR.SetRepositoryPolicy.SetRepositoryPolicyResponse
instance GHC.Classes.Eq Network.AWS.ECR.SetRepositoryPolicy.SetRepositoryPolicyResponse
instance Network.AWS.Types.AWSRequest Network.AWS.ECR.SetRepositoryPolicy.SetRepositoryPolicy
instance Control.DeepSeq.NFData Network.AWS.ECR.SetRepositoryPolicy.SetRepositoryPolicyResponse
instance Data.Hashable.Class.Hashable Network.AWS.ECR.SetRepositoryPolicy.SetRepositoryPolicy
instance Control.DeepSeq.NFData Network.AWS.ECR.SetRepositoryPolicy.SetRepositoryPolicy
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.ECR.SetRepositoryPolicy.SetRepositoryPolicy
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.SetRepositoryPolicy.SetRepositoryPolicy
instance Network.AWS.Data.Path.ToPath Network.AWS.ECR.SetRepositoryPolicy.SetRepositoryPolicy
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.SetRepositoryPolicy.SetRepositoryPolicy


-- | Creates or updates the replication configuration for a registry. The
--   existing replication configuration for a repository can be retrieved
--   with the DescribeRegistry API action. The first time the
--   PutReplicationConfiguration API is called, a service-linked IAM role
--   is created in your account for the replication process. For more
--   information, see <a>Using service-linked roles for Amazon ECR</a> in
--   the <i>Amazon Elastic Container Registry User Guide</i>.
--   
--   When configuring cross-account replication, the destination account
--   must grant the source account permission to replicate. This permission
--   is controlled using a registry permissions policy. For more
--   information, see PutRegistryPolicy.
module Network.AWS.ECR.PutReplicationConfiguration

-- | <i>See:</i> <a>newPutReplicationConfiguration</a> smart constructor.
data PutReplicationConfiguration
PutReplicationConfiguration' :: ReplicationConfiguration -> PutReplicationConfiguration

-- | An object representing the replication configuration for a registry.
[$sel:replicationConfiguration:PutReplicationConfiguration'] :: PutReplicationConfiguration -> ReplicationConfiguration

-- | Create a value of <a>PutReplicationConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:replicationConfiguration:PutReplicationConfiguration'</a>,
--   <a>putReplicationConfiguration_replicationConfiguration</a> - An
--   object representing the replication configuration for a registry.
newPutReplicationConfiguration :: ReplicationConfiguration -> PutReplicationConfiguration

-- | An object representing the replication configuration for a registry.
putReplicationConfiguration_replicationConfiguration :: Lens' PutReplicationConfiguration ReplicationConfiguration

-- | <i>See:</i> <a>newPutReplicationConfigurationResponse</a> smart
--   constructor.
data PutReplicationConfigurationResponse
PutReplicationConfigurationResponse' :: Maybe ReplicationConfiguration -> Int -> PutReplicationConfigurationResponse

-- | The contents of the replication configuration for the registry.
[$sel:replicationConfiguration:PutReplicationConfigurationResponse'] :: PutReplicationConfigurationResponse -> Maybe ReplicationConfiguration

-- | The response's http status code.
[$sel:httpStatus:PutReplicationConfigurationResponse'] :: PutReplicationConfigurationResponse -> Int

-- | Create a value of <a>PutReplicationConfigurationResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:replicationConfiguration:PutReplicationConfiguration'</a>,
--   <a>putReplicationConfigurationResponse_replicationConfiguration</a> -
--   The contents of the replication configuration for the registry.
--   
--   <a>$sel:httpStatus:PutReplicationConfigurationResponse'</a>,
--   <a>putReplicationConfigurationResponse_httpStatus</a> - The response's
--   http status code.
newPutReplicationConfigurationResponse :: Int -> PutReplicationConfigurationResponse

-- | The contents of the replication configuration for the registry.
putReplicationConfigurationResponse_replicationConfiguration :: Lens' PutReplicationConfigurationResponse (Maybe ReplicationConfiguration)

-- | The response's http status code.
putReplicationConfigurationResponse_httpStatus :: Lens' PutReplicationConfigurationResponse Int
instance GHC.Generics.Generic Network.AWS.ECR.PutReplicationConfiguration.PutReplicationConfiguration
instance GHC.Show.Show Network.AWS.ECR.PutReplicationConfiguration.PutReplicationConfiguration
instance GHC.Read.Read Network.AWS.ECR.PutReplicationConfiguration.PutReplicationConfiguration
instance GHC.Classes.Eq Network.AWS.ECR.PutReplicationConfiguration.PutReplicationConfiguration
instance GHC.Generics.Generic Network.AWS.ECR.PutReplicationConfiguration.PutReplicationConfigurationResponse
instance GHC.Show.Show Network.AWS.ECR.PutReplicationConfiguration.PutReplicationConfigurationResponse
instance GHC.Read.Read Network.AWS.ECR.PutReplicationConfiguration.PutReplicationConfigurationResponse
instance GHC.Classes.Eq Network.AWS.ECR.PutReplicationConfiguration.PutReplicationConfigurationResponse
instance Network.AWS.Types.AWSRequest Network.AWS.ECR.PutReplicationConfiguration.PutReplicationConfiguration
instance Control.DeepSeq.NFData Network.AWS.ECR.PutReplicationConfiguration.PutReplicationConfigurationResponse
instance Data.Hashable.Class.Hashable Network.AWS.ECR.PutReplicationConfiguration.PutReplicationConfiguration
instance Control.DeepSeq.NFData Network.AWS.ECR.PutReplicationConfiguration.PutReplicationConfiguration
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.ECR.PutReplicationConfiguration.PutReplicationConfiguration
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.PutReplicationConfiguration.PutReplicationConfiguration
instance Network.AWS.Data.Path.ToPath Network.AWS.ECR.PutReplicationConfiguration.PutReplicationConfiguration
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.PutReplicationConfiguration.PutReplicationConfiguration


-- | Creates or updates the permissions policy for your registry.
--   
--   A registry policy is used to specify permissions for another Amazon
--   Web Services account and is used when configuring cross-account
--   replication. For more information, see <a>Registry permissions</a> in
--   the <i>Amazon Elastic Container Registry User Guide</i>.
module Network.AWS.ECR.PutRegistryPolicy

-- | <i>See:</i> <a>newPutRegistryPolicy</a> smart constructor.
data PutRegistryPolicy
PutRegistryPolicy' :: Text -> PutRegistryPolicy

-- | The JSON policy text to apply to your registry. The policy text
--   follows the same format as IAM policy text. For more information, see
--   <a>Registry permissions</a> in the <i>Amazon Elastic Container
--   Registry User Guide</i>.
[$sel:policyText:PutRegistryPolicy'] :: PutRegistryPolicy -> Text

-- | Create a value of <a>PutRegistryPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:policyText:PutRegistryPolicy'</a>,
--   <a>putRegistryPolicy_policyText</a> - The JSON policy text to apply to
--   your registry. The policy text follows the same format as IAM policy
--   text. For more information, see <a>Registry permissions</a> in the
--   <i>Amazon Elastic Container Registry User Guide</i>.
newPutRegistryPolicy :: Text -> PutRegistryPolicy

-- | The JSON policy text to apply to your registry. The policy text
--   follows the same format as IAM policy text. For more information, see
--   <a>Registry permissions</a> in the <i>Amazon Elastic Container
--   Registry User Guide</i>.
putRegistryPolicy_policyText :: Lens' PutRegistryPolicy Text

-- | <i>See:</i> <a>newPutRegistryPolicyResponse</a> smart constructor.
data PutRegistryPolicyResponse
PutRegistryPolicyResponse' :: Maybe Text -> Maybe Text -> Int -> PutRegistryPolicyResponse

-- | The registry ID.
[$sel:registryId:PutRegistryPolicyResponse'] :: PutRegistryPolicyResponse -> Maybe Text

-- | The JSON policy text for your registry.
[$sel:policyText:PutRegistryPolicyResponse'] :: PutRegistryPolicyResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:PutRegistryPolicyResponse'] :: PutRegistryPolicyResponse -> Int

-- | Create a value of <a>PutRegistryPolicyResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:PutRegistryPolicyResponse'</a>,
--   <a>putRegistryPolicyResponse_registryId</a> - The registry ID.
--   
--   <a>$sel:policyText:PutRegistryPolicy'</a>,
--   <a>putRegistryPolicyResponse_policyText</a> - The JSON policy text for
--   your registry.
--   
--   <a>$sel:httpStatus:PutRegistryPolicyResponse'</a>,
--   <a>putRegistryPolicyResponse_httpStatus</a> - The response's http
--   status code.
newPutRegistryPolicyResponse :: Int -> PutRegistryPolicyResponse

-- | The registry ID.
putRegistryPolicyResponse_registryId :: Lens' PutRegistryPolicyResponse (Maybe Text)

-- | The JSON policy text for your registry.
putRegistryPolicyResponse_policyText :: Lens' PutRegistryPolicyResponse (Maybe Text)

-- | The response's http status code.
putRegistryPolicyResponse_httpStatus :: Lens' PutRegistryPolicyResponse Int
instance GHC.Generics.Generic Network.AWS.ECR.PutRegistryPolicy.PutRegistryPolicy
instance GHC.Show.Show Network.AWS.ECR.PutRegistryPolicy.PutRegistryPolicy
instance GHC.Read.Read Network.AWS.ECR.PutRegistryPolicy.PutRegistryPolicy
instance GHC.Classes.Eq Network.AWS.ECR.PutRegistryPolicy.PutRegistryPolicy
instance GHC.Generics.Generic Network.AWS.ECR.PutRegistryPolicy.PutRegistryPolicyResponse
instance GHC.Show.Show Network.AWS.ECR.PutRegistryPolicy.PutRegistryPolicyResponse
instance GHC.Read.Read Network.AWS.ECR.PutRegistryPolicy.PutRegistryPolicyResponse
instance GHC.Classes.Eq Network.AWS.ECR.PutRegistryPolicy.PutRegistryPolicyResponse
instance Network.AWS.Types.AWSRequest Network.AWS.ECR.PutRegistryPolicy.PutRegistryPolicy
instance Control.DeepSeq.NFData Network.AWS.ECR.PutRegistryPolicy.PutRegistryPolicyResponse
instance Data.Hashable.Class.Hashable Network.AWS.ECR.PutRegistryPolicy.PutRegistryPolicy
instance Control.DeepSeq.NFData Network.AWS.ECR.PutRegistryPolicy.PutRegistryPolicy
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.ECR.PutRegistryPolicy.PutRegistryPolicy
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.PutRegistryPolicy.PutRegistryPolicy
instance Network.AWS.Data.Path.ToPath Network.AWS.ECR.PutRegistryPolicy.PutRegistryPolicy
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.PutRegistryPolicy.PutRegistryPolicy


-- | Creates or updates the lifecycle policy for the specified repository.
--   For more information, see <a>Lifecycle policy template</a>.
module Network.AWS.ECR.PutLifecyclePolicy

-- | <i>See:</i> <a>newPutLifecyclePolicy</a> smart constructor.
data PutLifecyclePolicy
PutLifecyclePolicy' :: Maybe Text -> Text -> Text -> PutLifecyclePolicy

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository. If you do  not specify a registry, the
--   default registry is assumed.
[$sel:registryId:PutLifecyclePolicy'] :: PutLifecyclePolicy -> Maybe Text

-- | The name of the repository to receive the policy.
[$sel:repositoryName:PutLifecyclePolicy'] :: PutLifecyclePolicy -> Text

-- | The JSON repository policy text to apply to the repository.
[$sel:lifecyclePolicyText:PutLifecyclePolicy'] :: PutLifecyclePolicy -> Text

-- | Create a value of <a>PutLifecyclePolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:PutLifecyclePolicy'</a>,
--   <a>putLifecyclePolicy_registryId</a> - The Amazon Web Services account
--   ID associated with the registry that contains the repository. If you
--   do  not specify a registry, the default registry is assumed.
--   
--   <a>$sel:repositoryName:PutLifecyclePolicy'</a>,
--   <a>putLifecyclePolicy_repositoryName</a> - The name of the repository
--   to receive the policy.
--   
--   <a>$sel:lifecyclePolicyText:PutLifecyclePolicy'</a>,
--   <a>putLifecyclePolicy_lifecyclePolicyText</a> - The JSON repository
--   policy text to apply to the repository.
newPutLifecyclePolicy :: Text -> Text -> PutLifecyclePolicy

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository. If you do  not specify a registry, the
--   default registry is assumed.
putLifecyclePolicy_registryId :: Lens' PutLifecyclePolicy (Maybe Text)

-- | The name of the repository to receive the policy.
putLifecyclePolicy_repositoryName :: Lens' PutLifecyclePolicy Text

-- | The JSON repository policy text to apply to the repository.
putLifecyclePolicy_lifecyclePolicyText :: Lens' PutLifecyclePolicy Text

-- | <i>See:</i> <a>newPutLifecyclePolicyResponse</a> smart constructor.
data PutLifecyclePolicyResponse
PutLifecyclePolicyResponse' :: Maybe Text -> Maybe Text -> Maybe Text -> Int -> PutLifecyclePolicyResponse

-- | The registry ID associated with the request.
[$sel:registryId:PutLifecyclePolicyResponse'] :: PutLifecyclePolicyResponse -> Maybe Text

-- | The repository name associated with the request.
[$sel:repositoryName:PutLifecyclePolicyResponse'] :: PutLifecyclePolicyResponse -> Maybe Text

-- | The JSON repository policy text.
[$sel:lifecyclePolicyText:PutLifecyclePolicyResponse'] :: PutLifecyclePolicyResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:PutLifecyclePolicyResponse'] :: PutLifecyclePolicyResponse -> Int

-- | Create a value of <a>PutLifecyclePolicyResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:PutLifecyclePolicy'</a>,
--   <a>putLifecyclePolicyResponse_registryId</a> - The registry ID
--   associated with the request.
--   
--   <a>$sel:repositoryName:PutLifecyclePolicy'</a>,
--   <a>putLifecyclePolicyResponse_repositoryName</a> - The repository name
--   associated with the request.
--   
--   <a>$sel:lifecyclePolicyText:PutLifecyclePolicy'</a>,
--   <a>putLifecyclePolicyResponse_lifecyclePolicyText</a> - The JSON
--   repository policy text.
--   
--   <a>$sel:httpStatus:PutLifecyclePolicyResponse'</a>,
--   <a>putLifecyclePolicyResponse_httpStatus</a> - The response's http
--   status code.
newPutLifecyclePolicyResponse :: Int -> PutLifecyclePolicyResponse

-- | The registry ID associated with the request.
putLifecyclePolicyResponse_registryId :: Lens' PutLifecyclePolicyResponse (Maybe Text)

-- | The repository name associated with the request.
putLifecyclePolicyResponse_repositoryName :: Lens' PutLifecyclePolicyResponse (Maybe Text)

-- | The JSON repository policy text.
putLifecyclePolicyResponse_lifecyclePolicyText :: Lens' PutLifecyclePolicyResponse (Maybe Text)

-- | The response's http status code.
putLifecyclePolicyResponse_httpStatus :: Lens' PutLifecyclePolicyResponse Int
instance GHC.Generics.Generic Network.AWS.ECR.PutLifecyclePolicy.PutLifecyclePolicy
instance GHC.Show.Show Network.AWS.ECR.PutLifecyclePolicy.PutLifecyclePolicy
instance GHC.Read.Read Network.AWS.ECR.PutLifecyclePolicy.PutLifecyclePolicy
instance GHC.Classes.Eq Network.AWS.ECR.PutLifecyclePolicy.PutLifecyclePolicy
instance GHC.Generics.Generic Network.AWS.ECR.PutLifecyclePolicy.PutLifecyclePolicyResponse
instance GHC.Show.Show Network.AWS.ECR.PutLifecyclePolicy.PutLifecyclePolicyResponse
instance GHC.Read.Read Network.AWS.ECR.PutLifecyclePolicy.PutLifecyclePolicyResponse
instance GHC.Classes.Eq Network.AWS.ECR.PutLifecyclePolicy.PutLifecyclePolicyResponse
instance Network.AWS.Types.AWSRequest Network.AWS.ECR.PutLifecyclePolicy.PutLifecyclePolicy
instance Control.DeepSeq.NFData Network.AWS.ECR.PutLifecyclePolicy.PutLifecyclePolicyResponse
instance Data.Hashable.Class.Hashable Network.AWS.ECR.PutLifecyclePolicy.PutLifecyclePolicy
instance Control.DeepSeq.NFData Network.AWS.ECR.PutLifecyclePolicy.PutLifecyclePolicy
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.ECR.PutLifecyclePolicy.PutLifecyclePolicy
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.PutLifecyclePolicy.PutLifecyclePolicy
instance Network.AWS.Data.Path.ToPath Network.AWS.ECR.PutLifecyclePolicy.PutLifecyclePolicy
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.PutLifecyclePolicy.PutLifecyclePolicy


-- | Updates the image tag mutability settings for the specified
--   repository. For more information, see <a>Image tag mutability</a> in
--   the <i>Amazon Elastic Container Registry User Guide</i>.
module Network.AWS.ECR.PutImageTagMutability

-- | <i>See:</i> <a>newPutImageTagMutability</a> smart constructor.
data PutImageTagMutability
PutImageTagMutability' :: Maybe Text -> Text -> ImageTagMutability -> PutImageTagMutability

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository in which to update the image tag mutability
--   settings. If you do not specify a registry, the default registry is
--   assumed.
[$sel:registryId:PutImageTagMutability'] :: PutImageTagMutability -> Maybe Text

-- | The name of the repository in which to update the image tag mutability
--   settings.
[$sel:repositoryName:PutImageTagMutability'] :: PutImageTagMutability -> Text

-- | The tag mutability setting for the repository. If <tt>MUTABLE</tt> is
--   specified, image tags can be overwritten. If <tt>IMMUTABLE</tt> is
--   specified, all image tags within the repository will be immutable
--   which will prevent them from being overwritten.
[$sel:imageTagMutability:PutImageTagMutability'] :: PutImageTagMutability -> ImageTagMutability

-- | Create a value of <a>PutImageTagMutability</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:PutImageTagMutability'</a>,
--   <a>putImageTagMutability_registryId</a> - The Amazon Web Services
--   account ID associated with the registry that contains the repository
--   in which to update the image tag mutability settings. If you do not
--   specify a registry, the default registry is assumed.
--   
--   <a>$sel:repositoryName:PutImageTagMutability'</a>,
--   <a>putImageTagMutability_repositoryName</a> - The name of the
--   repository in which to update the image tag mutability settings.
--   
--   <a>$sel:imageTagMutability:PutImageTagMutability'</a>,
--   <a>putImageTagMutability_imageTagMutability</a> - The tag mutability
--   setting for the repository. If <tt>MUTABLE</tt> is specified, image
--   tags can be overwritten. If <tt>IMMUTABLE</tt> is specified, all image
--   tags within the repository will be immutable which will prevent them
--   from being overwritten.
newPutImageTagMutability :: Text -> ImageTagMutability -> PutImageTagMutability

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository in which to update the image tag mutability
--   settings. If you do not specify a registry, the default registry is
--   assumed.
putImageTagMutability_registryId :: Lens' PutImageTagMutability (Maybe Text)

-- | The name of the repository in which to update the image tag mutability
--   settings.
putImageTagMutability_repositoryName :: Lens' PutImageTagMutability Text

-- | The tag mutability setting for the repository. If <tt>MUTABLE</tt> is
--   specified, image tags can be overwritten. If <tt>IMMUTABLE</tt> is
--   specified, all image tags within the repository will be immutable
--   which will prevent them from being overwritten.
putImageTagMutability_imageTagMutability :: Lens' PutImageTagMutability ImageTagMutability

-- | <i>See:</i> <a>newPutImageTagMutabilityResponse</a> smart constructor.
data PutImageTagMutabilityResponse
PutImageTagMutabilityResponse' :: Maybe Text -> Maybe Text -> Maybe ImageTagMutability -> Int -> PutImageTagMutabilityResponse

-- | The registry ID associated with the request.
[$sel:registryId:PutImageTagMutabilityResponse'] :: PutImageTagMutabilityResponse -> Maybe Text

-- | The repository name associated with the request.
[$sel:repositoryName:PutImageTagMutabilityResponse'] :: PutImageTagMutabilityResponse -> Maybe Text

-- | The image tag mutability setting for the repository.
[$sel:imageTagMutability:PutImageTagMutabilityResponse'] :: PutImageTagMutabilityResponse -> Maybe ImageTagMutability

-- | The response's http status code.
[$sel:httpStatus:PutImageTagMutabilityResponse'] :: PutImageTagMutabilityResponse -> Int

-- | Create a value of <a>PutImageTagMutabilityResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:PutImageTagMutability'</a>,
--   <a>putImageTagMutabilityResponse_registryId</a> - The registry ID
--   associated with the request.
--   
--   <a>$sel:repositoryName:PutImageTagMutability'</a>,
--   <a>putImageTagMutabilityResponse_repositoryName</a> - The repository
--   name associated with the request.
--   
--   <a>$sel:imageTagMutability:PutImageTagMutability'</a>,
--   <a>putImageTagMutabilityResponse_imageTagMutability</a> - The image
--   tag mutability setting for the repository.
--   
--   <a>$sel:httpStatus:PutImageTagMutabilityResponse'</a>,
--   <a>putImageTagMutabilityResponse_httpStatus</a> - The response's http
--   status code.
newPutImageTagMutabilityResponse :: Int -> PutImageTagMutabilityResponse

-- | The registry ID associated with the request.
putImageTagMutabilityResponse_registryId :: Lens' PutImageTagMutabilityResponse (Maybe Text)

-- | The repository name associated with the request.
putImageTagMutabilityResponse_repositoryName :: Lens' PutImageTagMutabilityResponse (Maybe Text)

-- | The image tag mutability setting for the repository.
putImageTagMutabilityResponse_imageTagMutability :: Lens' PutImageTagMutabilityResponse (Maybe ImageTagMutability)

-- | The response's http status code.
putImageTagMutabilityResponse_httpStatus :: Lens' PutImageTagMutabilityResponse Int
instance GHC.Generics.Generic Network.AWS.ECR.PutImageTagMutability.PutImageTagMutability
instance GHC.Show.Show Network.AWS.ECR.PutImageTagMutability.PutImageTagMutability
instance GHC.Read.Read Network.AWS.ECR.PutImageTagMutability.PutImageTagMutability
instance GHC.Classes.Eq Network.AWS.ECR.PutImageTagMutability.PutImageTagMutability
instance GHC.Generics.Generic Network.AWS.ECR.PutImageTagMutability.PutImageTagMutabilityResponse
instance GHC.Show.Show Network.AWS.ECR.PutImageTagMutability.PutImageTagMutabilityResponse
instance GHC.Read.Read Network.AWS.ECR.PutImageTagMutability.PutImageTagMutabilityResponse
instance GHC.Classes.Eq Network.AWS.ECR.PutImageTagMutability.PutImageTagMutabilityResponse
instance Network.AWS.Types.AWSRequest Network.AWS.ECR.PutImageTagMutability.PutImageTagMutability
instance Control.DeepSeq.NFData Network.AWS.ECR.PutImageTagMutability.PutImageTagMutabilityResponse
instance Data.Hashable.Class.Hashable Network.AWS.ECR.PutImageTagMutability.PutImageTagMutability
instance Control.DeepSeq.NFData Network.AWS.ECR.PutImageTagMutability.PutImageTagMutability
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.ECR.PutImageTagMutability.PutImageTagMutability
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.PutImageTagMutability.PutImageTagMutability
instance Network.AWS.Data.Path.ToPath Network.AWS.ECR.PutImageTagMutability.PutImageTagMutability
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.PutImageTagMutability.PutImageTagMutability


-- | Updates the image scanning configuration for the specified repository.
module Network.AWS.ECR.PutImageScanningConfiguration

-- | <i>See:</i> <a>newPutImageScanningConfiguration</a> smart constructor.
data PutImageScanningConfiguration
PutImageScanningConfiguration' :: Maybe Text -> Text -> ImageScanningConfiguration -> PutImageScanningConfiguration

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository in which to update the image scanning
--   configuration setting. If you do not specify a registry, the default
--   registry is assumed.
[$sel:registryId:PutImageScanningConfiguration'] :: PutImageScanningConfiguration -> Maybe Text

-- | The name of the repository in which to update the image scanning
--   configuration setting.
[$sel:repositoryName:PutImageScanningConfiguration'] :: PutImageScanningConfiguration -> Text

-- | The image scanning configuration for the repository. This setting
--   determines whether images are scanned for known vulnerabilities after
--   being pushed to the repository.
[$sel:imageScanningConfiguration:PutImageScanningConfiguration'] :: PutImageScanningConfiguration -> ImageScanningConfiguration

-- | Create a value of <a>PutImageScanningConfiguration</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:PutImageScanningConfiguration'</a>,
--   <a>putImageScanningConfiguration_registryId</a> - The Amazon Web
--   Services account ID associated with the registry that contains the
--   repository in which to update the image scanning configuration
--   setting. If you do not specify a registry, the default registry is
--   assumed.
--   
--   <a>$sel:repositoryName:PutImageScanningConfiguration'</a>,
--   <a>putImageScanningConfiguration_repositoryName</a> - The name of the
--   repository in which to update the image scanning configuration
--   setting.
--   
--   <a>$sel:imageScanningConfiguration:PutImageScanningConfiguration'</a>,
--   <a>putImageScanningConfiguration_imageScanningConfiguration</a> - The
--   image scanning configuration for the repository. This setting
--   determines whether images are scanned for known vulnerabilities after
--   being pushed to the repository.
newPutImageScanningConfiguration :: Text -> ImageScanningConfiguration -> PutImageScanningConfiguration

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository in which to update the image scanning
--   configuration setting. If you do not specify a registry, the default
--   registry is assumed.
putImageScanningConfiguration_registryId :: Lens' PutImageScanningConfiguration (Maybe Text)

-- | The name of the repository in which to update the image scanning
--   configuration setting.
putImageScanningConfiguration_repositoryName :: Lens' PutImageScanningConfiguration Text

-- | The image scanning configuration for the repository. This setting
--   determines whether images are scanned for known vulnerabilities after
--   being pushed to the repository.
putImageScanningConfiguration_imageScanningConfiguration :: Lens' PutImageScanningConfiguration ImageScanningConfiguration

-- | <i>See:</i> <a>newPutImageScanningConfigurationResponse</a> smart
--   constructor.
data PutImageScanningConfigurationResponse
PutImageScanningConfigurationResponse' :: Maybe Text -> Maybe Text -> Maybe ImageScanningConfiguration -> Int -> PutImageScanningConfigurationResponse

-- | The registry ID associated with the request.
[$sel:registryId:PutImageScanningConfigurationResponse'] :: PutImageScanningConfigurationResponse -> Maybe Text

-- | The repository name associated with the request.
[$sel:repositoryName:PutImageScanningConfigurationResponse'] :: PutImageScanningConfigurationResponse -> Maybe Text

-- | The image scanning configuration setting for the repository.
[$sel:imageScanningConfiguration:PutImageScanningConfigurationResponse'] :: PutImageScanningConfigurationResponse -> Maybe ImageScanningConfiguration

-- | The response's http status code.
[$sel:httpStatus:PutImageScanningConfigurationResponse'] :: PutImageScanningConfigurationResponse -> Int

-- | Create a value of <a>PutImageScanningConfigurationResponse</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:PutImageScanningConfiguration'</a>,
--   <a>putImageScanningConfigurationResponse_registryId</a> - The registry
--   ID associated with the request.
--   
--   <a>$sel:repositoryName:PutImageScanningConfiguration'</a>,
--   <a>putImageScanningConfigurationResponse_repositoryName</a> - The
--   repository name associated with the request.
--   
--   <a>$sel:imageScanningConfiguration:PutImageScanningConfiguration'</a>,
--   <a>putImageScanningConfigurationResponse_imageScanningConfiguration</a>
--   - The image scanning configuration setting for the repository.
--   
--   <a>$sel:httpStatus:PutImageScanningConfigurationResponse'</a>,
--   <a>putImageScanningConfigurationResponse_httpStatus</a> - The
--   response's http status code.
newPutImageScanningConfigurationResponse :: Int -> PutImageScanningConfigurationResponse

-- | The registry ID associated with the request.
putImageScanningConfigurationResponse_registryId :: Lens' PutImageScanningConfigurationResponse (Maybe Text)

-- | The repository name associated with the request.
putImageScanningConfigurationResponse_repositoryName :: Lens' PutImageScanningConfigurationResponse (Maybe Text)

-- | The image scanning configuration setting for the repository.
putImageScanningConfigurationResponse_imageScanningConfiguration :: Lens' PutImageScanningConfigurationResponse (Maybe ImageScanningConfiguration)

-- | The response's http status code.
putImageScanningConfigurationResponse_httpStatus :: Lens' PutImageScanningConfigurationResponse Int
instance GHC.Generics.Generic Network.AWS.ECR.PutImageScanningConfiguration.PutImageScanningConfiguration
instance GHC.Show.Show Network.AWS.ECR.PutImageScanningConfiguration.PutImageScanningConfiguration
instance GHC.Read.Read Network.AWS.ECR.PutImageScanningConfiguration.PutImageScanningConfiguration
instance GHC.Classes.Eq Network.AWS.ECR.PutImageScanningConfiguration.PutImageScanningConfiguration
instance GHC.Generics.Generic Network.AWS.ECR.PutImageScanningConfiguration.PutImageScanningConfigurationResponse
instance GHC.Show.Show Network.AWS.ECR.PutImageScanningConfiguration.PutImageScanningConfigurationResponse
instance GHC.Read.Read Network.AWS.ECR.PutImageScanningConfiguration.PutImageScanningConfigurationResponse
instance GHC.Classes.Eq Network.AWS.ECR.PutImageScanningConfiguration.PutImageScanningConfigurationResponse
instance Network.AWS.Types.AWSRequest Network.AWS.ECR.PutImageScanningConfiguration.PutImageScanningConfiguration
instance Control.DeepSeq.NFData Network.AWS.ECR.PutImageScanningConfiguration.PutImageScanningConfigurationResponse
instance Data.Hashable.Class.Hashable Network.AWS.ECR.PutImageScanningConfiguration.PutImageScanningConfiguration
instance Control.DeepSeq.NFData Network.AWS.ECR.PutImageScanningConfiguration.PutImageScanningConfiguration
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.ECR.PutImageScanningConfiguration.PutImageScanningConfiguration
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.PutImageScanningConfiguration.PutImageScanningConfiguration
instance Network.AWS.Data.Path.ToPath Network.AWS.ECR.PutImageScanningConfiguration.PutImageScanningConfiguration
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.PutImageScanningConfiguration.PutImageScanningConfiguration


-- | Creates or updates the image manifest and tags associated with an
--   image.
--   
--   When an image is pushed and all new image layers have been uploaded,
--   the PutImage API is called once to create or update the image manifest
--   and the tags associated with the image.
--   
--   This operation is used by the Amazon ECR proxy and is not generally
--   used by customers for pulling and pushing images. In most cases, you
--   should use the <tt>docker</tt> CLI to pull, tag, and push images.
module Network.AWS.ECR.PutImage

-- | <i>See:</i> <a>newPutImage</a> smart constructor.
data PutImage
PutImage' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Text -> Text -> PutImage

-- | The image digest of the image manifest corresponding to the image.
[$sel:imageDigest:PutImage'] :: PutImage -> Maybe Text

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository in which to put the image. If you do not
--   specify a registry, the default registry is assumed.
[$sel:registryId:PutImage'] :: PutImage -> Maybe Text

-- | The tag to associate with the image. This parameter is required for
--   images that use the Docker Image Manifest V2 Schema 2 or Open
--   Container Initiative (OCI) formats.
[$sel:imageTag:PutImage'] :: PutImage -> Maybe Text

-- | The media type of the image manifest. If you push an image manifest
--   that does not contain the <tt>mediaType</tt> field, you must specify
--   the <tt>imageManifestMediaType</tt> in the request.
[$sel:imageManifestMediaType:PutImage'] :: PutImage -> Maybe Text

-- | The name of the repository in which to put the image.
[$sel:repositoryName:PutImage'] :: PutImage -> Text

-- | The image manifest corresponding to the image to be uploaded.
[$sel:imageManifest:PutImage'] :: PutImage -> Text

-- | Create a value of <a>PutImage</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:imageDigest:PutImage'</a>, <a>putImage_imageDigest</a> - The
--   image digest of the image manifest corresponding to the image.
--   
--   <a>$sel:registryId:PutImage'</a>, <a>putImage_registryId</a> - The
--   Amazon Web Services account ID associated with the registry that
--   contains the repository in which to put the image. If you do not
--   specify a registry, the default registry is assumed.
--   
--   <a>$sel:imageTag:PutImage'</a>, <a>putImage_imageTag</a> - The tag to
--   associate with the image. This parameter is required for images that
--   use the Docker Image Manifest V2 Schema 2 or Open Container Initiative
--   (OCI) formats.
--   
--   <a>$sel:imageManifestMediaType:PutImage'</a>,
--   <a>putImage_imageManifestMediaType</a> - The media type of the image
--   manifest. If you push an image manifest that does not contain the
--   <tt>mediaType</tt> field, you must specify the
--   <tt>imageManifestMediaType</tt> in the request.
--   
--   <a>$sel:repositoryName:PutImage'</a>, <a>putImage_repositoryName</a> -
--   The name of the repository in which to put the image.
--   
--   <a>$sel:imageManifest:PutImage'</a>, <a>putImage_imageManifest</a> -
--   The image manifest corresponding to the image to be uploaded.
newPutImage :: Text -> Text -> PutImage

-- | The image digest of the image manifest corresponding to the image.
putImage_imageDigest :: Lens' PutImage (Maybe Text)

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository in which to put the image. If you do not
--   specify a registry, the default registry is assumed.
putImage_registryId :: Lens' PutImage (Maybe Text)

-- | The tag to associate with the image. This parameter is required for
--   images that use the Docker Image Manifest V2 Schema 2 or Open
--   Container Initiative (OCI) formats.
putImage_imageTag :: Lens' PutImage (Maybe Text)

-- | The media type of the image manifest. If you push an image manifest
--   that does not contain the <tt>mediaType</tt> field, you must specify
--   the <tt>imageManifestMediaType</tt> in the request.
putImage_imageManifestMediaType :: Lens' PutImage (Maybe Text)

-- | The name of the repository in which to put the image.
putImage_repositoryName :: Lens' PutImage Text

-- | The image manifest corresponding to the image to be uploaded.
putImage_imageManifest :: Lens' PutImage Text

-- | <i>See:</i> <a>newPutImageResponse</a> smart constructor.
data PutImageResponse
PutImageResponse' :: Maybe Image -> Int -> PutImageResponse

-- | Details of the image uploaded.
[$sel:image:PutImageResponse'] :: PutImageResponse -> Maybe Image

-- | The response's http status code.
[$sel:httpStatus:PutImageResponse'] :: PutImageResponse -> Int

-- | Create a value of <a>PutImageResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:image:PutImageResponse'</a>, <a>putImageResponse_image</a> -
--   Details of the image uploaded.
--   
--   <a>$sel:httpStatus:PutImageResponse'</a>,
--   <a>putImageResponse_httpStatus</a> - The response's http status code.
newPutImageResponse :: Int -> PutImageResponse

-- | Details of the image uploaded.
putImageResponse_image :: Lens' PutImageResponse (Maybe Image)

-- | The response's http status code.
putImageResponse_httpStatus :: Lens' PutImageResponse Int
instance GHC.Generics.Generic Network.AWS.ECR.PutImage.PutImage
instance GHC.Show.Show Network.AWS.ECR.PutImage.PutImage
instance GHC.Read.Read Network.AWS.ECR.PutImage.PutImage
instance GHC.Classes.Eq Network.AWS.ECR.PutImage.PutImage
instance GHC.Generics.Generic Network.AWS.ECR.PutImage.PutImageResponse
instance GHC.Show.Show Network.AWS.ECR.PutImage.PutImageResponse
instance GHC.Read.Read Network.AWS.ECR.PutImage.PutImageResponse
instance GHC.Classes.Eq Network.AWS.ECR.PutImage.PutImageResponse
instance Network.AWS.Types.AWSRequest Network.AWS.ECR.PutImage.PutImage
instance Control.DeepSeq.NFData Network.AWS.ECR.PutImage.PutImageResponse
instance Data.Hashable.Class.Hashable Network.AWS.ECR.PutImage.PutImage
instance Control.DeepSeq.NFData Network.AWS.ECR.PutImage.PutImage
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.ECR.PutImage.PutImage
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.PutImage.PutImage
instance Network.AWS.Data.Path.ToPath Network.AWS.ECR.PutImage.PutImage
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.PutImage.PutImage


-- | List the tags for an Amazon ECR resource.
module Network.AWS.ECR.ListTagsForResource

-- | <i>See:</i> <a>newListTagsForResource</a> smart constructor.
data ListTagsForResource
ListTagsForResource' :: Text -> ListTagsForResource

-- | The Amazon Resource Name (ARN) that identifies the resource for which
--   to list the tags. Currently, the only supported resource is an Amazon
--   ECR repository.
[$sel:resourceArn:ListTagsForResource'] :: ListTagsForResource -> Text

-- | Create a value of <a>ListTagsForResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:ListTagsForResource'</a>,
--   <a>listTagsForResource_resourceArn</a> - The Amazon Resource Name
--   (ARN) that identifies the resource for which to list the tags.
--   Currently, the only supported resource is an Amazon ECR repository.
newListTagsForResource :: Text -> ListTagsForResource

-- | The Amazon Resource Name (ARN) that identifies the resource for which
--   to list the tags. Currently, the only supported resource is an Amazon
--   ECR repository.
listTagsForResource_resourceArn :: Lens' ListTagsForResource Text

-- | <i>See:</i> <a>newListTagsForResourceResponse</a> smart constructor.
data ListTagsForResourceResponse
ListTagsForResourceResponse' :: Maybe [Tag] -> Int -> ListTagsForResourceResponse

-- | The tags for the resource.
[$sel:tags:ListTagsForResourceResponse'] :: ListTagsForResourceResponse -> Maybe [Tag]

-- | The response's http status code.
[$sel:httpStatus:ListTagsForResourceResponse'] :: ListTagsForResourceResponse -> Int

-- | Create a value of <a>ListTagsForResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tags:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_tags</a> - The tags for the resource.
--   
--   <a>$sel:httpStatus:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_httpStatus</a> - The response's http
--   status code.
newListTagsForResourceResponse :: Int -> ListTagsForResourceResponse

-- | The tags for the resource.
listTagsForResourceResponse_tags :: Lens' ListTagsForResourceResponse (Maybe [Tag])

-- | The response's http status code.
listTagsForResourceResponse_httpStatus :: Lens' ListTagsForResourceResponse Int
instance GHC.Generics.Generic Network.AWS.ECR.ListTagsForResource.ListTagsForResource
instance GHC.Show.Show Network.AWS.ECR.ListTagsForResource.ListTagsForResource
instance GHC.Read.Read Network.AWS.ECR.ListTagsForResource.ListTagsForResource
instance GHC.Classes.Eq Network.AWS.ECR.ListTagsForResource.ListTagsForResource
instance GHC.Generics.Generic Network.AWS.ECR.ListTagsForResource.ListTagsForResourceResponse
instance GHC.Show.Show Network.AWS.ECR.ListTagsForResource.ListTagsForResourceResponse
instance GHC.Read.Read Network.AWS.ECR.ListTagsForResource.ListTagsForResourceResponse
instance GHC.Classes.Eq Network.AWS.ECR.ListTagsForResource.ListTagsForResourceResponse
instance Network.AWS.Types.AWSRequest Network.AWS.ECR.ListTagsForResource.ListTagsForResource
instance Control.DeepSeq.NFData Network.AWS.ECR.ListTagsForResource.ListTagsForResourceResponse
instance Data.Hashable.Class.Hashable Network.AWS.ECR.ListTagsForResource.ListTagsForResource
instance Control.DeepSeq.NFData Network.AWS.ECR.ListTagsForResource.ListTagsForResource
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.ECR.ListTagsForResource.ListTagsForResource
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.ListTagsForResource.ListTagsForResource
instance Network.AWS.Data.Path.ToPath Network.AWS.ECR.ListTagsForResource.ListTagsForResource
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.ListTagsForResource.ListTagsForResource


-- | Lists all the image IDs for the specified repository.
--   
--   You can filter images based on whether or not they are tagged by using
--   the <tt>tagStatus</tt> filter and specifying either <tt>TAGGED</tt>,
--   <tt>UNTAGGED</tt> or <tt>ANY</tt>. For example, you can filter your
--   results to return only <tt>UNTAGGED</tt> images and then pipe that
--   result to a BatchDeleteImage operation to delete them. Or, you can
--   filter your results to return only <tt>TAGGED</tt> images to list all
--   of the tags in your repository.
--   
--   This operation returns paginated results.
module Network.AWS.ECR.ListImages

-- | <i>See:</i> <a>newListImages</a> smart constructor.
data ListImages
ListImages' :: Maybe Text -> Maybe Natural -> Maybe Text -> Maybe ListImagesFilter -> Text -> ListImages

-- | The <tt>nextToken</tt> value returned from a previous paginated
--   <tt>ListImages</tt> request where <tt>maxResults</tt> was used and the
--   results exceeded the value of that parameter. Pagination continues
--   from the end of the previous results that returned the
--   <tt>nextToken</tt> value. This value is <tt>null</tt> when there are
--   no more results to return.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
[$sel:nextToken:ListImages'] :: ListImages -> Maybe Text

-- | The maximum number of image results returned by <tt>ListImages</tt> in
--   paginated output. When this parameter is used, <tt>ListImages</tt>
--   only returns <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt> response element. The remaining results of the
--   initial request can be seen by sending another <tt>ListImages</tt>
--   request with the returned <tt>nextToken</tt> value. This value can be
--   between 1 and 1000. If this parameter is not used, then
--   <tt>ListImages</tt> returns up to 100 results and a <tt>nextToken</tt>
--   value, if applicable.
[$sel:maxResults:ListImages'] :: ListImages -> Maybe Natural

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository in which to list images. If you do not specify
--   a registry, the default registry is assumed.
[$sel:registryId:ListImages'] :: ListImages -> Maybe Text

-- | The filter key and value with which to filter your <tt>ListImages</tt>
--   results.
[$sel:filter':ListImages'] :: ListImages -> Maybe ListImagesFilter

-- | The repository with image IDs to be listed.
[$sel:repositoryName:ListImages'] :: ListImages -> Text

-- | Create a value of <a>ListImages</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListImages'</a>, <a>listImages_nextToken</a> - The
--   <tt>nextToken</tt> value returned from a previous paginated
--   <tt>ListImages</tt> request where <tt>maxResults</tt> was used and the
--   results exceeded the value of that parameter. Pagination continues
--   from the end of the previous results that returned the
--   <tt>nextToken</tt> value. This value is <tt>null</tt> when there are
--   no more results to return.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
--   
--   <a>$sel:maxResults:ListImages'</a>, <a>listImages_maxResults</a> - The
--   maximum number of image results returned by <tt>ListImages</tt> in
--   paginated output. When this parameter is used, <tt>ListImages</tt>
--   only returns <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt> response element. The remaining results of the
--   initial request can be seen by sending another <tt>ListImages</tt>
--   request with the returned <tt>nextToken</tt> value. This value can be
--   between 1 and 1000. If this parameter is not used, then
--   <tt>ListImages</tt> returns up to 100 results and a <tt>nextToken</tt>
--   value, if applicable.
--   
--   <a>$sel:registryId:ListImages'</a>, <a>listImages_registryId</a> - The
--   Amazon Web Services account ID associated with the registry that
--   contains the repository in which to list images. If you do not specify
--   a registry, the default registry is assumed.
--   
--   <a>$sel:filter':ListImages'</a>, <a>listImages_filter</a> - The filter
--   key and value with which to filter your <tt>ListImages</tt> results.
--   
--   <a>$sel:repositoryName:ListImages'</a>,
--   <a>listImages_repositoryName</a> - The repository with image IDs to be
--   listed.
newListImages :: Text -> ListImages

-- | The <tt>nextToken</tt> value returned from a previous paginated
--   <tt>ListImages</tt> request where <tt>maxResults</tt> was used and the
--   results exceeded the value of that parameter. Pagination continues
--   from the end of the previous results that returned the
--   <tt>nextToken</tt> value. This value is <tt>null</tt> when there are
--   no more results to return.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
listImages_nextToken :: Lens' ListImages (Maybe Text)

-- | The maximum number of image results returned by <tt>ListImages</tt> in
--   paginated output. When this parameter is used, <tt>ListImages</tt>
--   only returns <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt> response element. The remaining results of the
--   initial request can be seen by sending another <tt>ListImages</tt>
--   request with the returned <tt>nextToken</tt> value. This value can be
--   between 1 and 1000. If this parameter is not used, then
--   <tt>ListImages</tt> returns up to 100 results and a <tt>nextToken</tt>
--   value, if applicable.
listImages_maxResults :: Lens' ListImages (Maybe Natural)

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository in which to list images. If you do not specify
--   a registry, the default registry is assumed.
listImages_registryId :: Lens' ListImages (Maybe Text)

-- | The filter key and value with which to filter your <tt>ListImages</tt>
--   results.
listImages_filter :: Lens' ListImages (Maybe ListImagesFilter)

-- | The repository with image IDs to be listed.
listImages_repositoryName :: Lens' ListImages Text

-- | <i>See:</i> <a>newListImagesResponse</a> smart constructor.
data ListImagesResponse
ListImagesResponse' :: Maybe Text -> Maybe [ImageIdentifier] -> Int -> ListImagesResponse

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>ListImages</tt> request. When the results of a <tt>ListImages</tt>
--   request exceed <tt>maxResults</tt>, this value can be used to retrieve
--   the next page of results. This value is <tt>null</tt> when there are
--   no more results to return.
[$sel:nextToken:ListImagesResponse'] :: ListImagesResponse -> Maybe Text

-- | The list of image IDs for the requested repository.
[$sel:imageIds:ListImagesResponse'] :: ListImagesResponse -> Maybe [ImageIdentifier]

-- | The response's http status code.
[$sel:httpStatus:ListImagesResponse'] :: ListImagesResponse -> Int

-- | Create a value of <a>ListImagesResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListImages'</a>, <a>listImagesResponse_nextToken</a>
--   - The <tt>nextToken</tt> value to include in a future
--   <tt>ListImages</tt> request. When the results of a <tt>ListImages</tt>
--   request exceed <tt>maxResults</tt>, this value can be used to retrieve
--   the next page of results. This value is <tt>null</tt> when there are
--   no more results to return.
--   
--   <a>$sel:imageIds:ListImagesResponse'</a>,
--   <a>listImagesResponse_imageIds</a> - The list of image IDs for the
--   requested repository.
--   
--   <a>$sel:httpStatus:ListImagesResponse'</a>,
--   <a>listImagesResponse_httpStatus</a> - The response's http status
--   code.
newListImagesResponse :: Int -> ListImagesResponse

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>ListImages</tt> request. When the results of a <tt>ListImages</tt>
--   request exceed <tt>maxResults</tt>, this value can be used to retrieve
--   the next page of results. This value is <tt>null</tt> when there are
--   no more results to return.
listImagesResponse_nextToken :: Lens' ListImagesResponse (Maybe Text)

-- | The list of image IDs for the requested repository.
listImagesResponse_imageIds :: Lens' ListImagesResponse (Maybe [ImageIdentifier])

-- | The response's http status code.
listImagesResponse_httpStatus :: Lens' ListImagesResponse Int
instance GHC.Generics.Generic Network.AWS.ECR.ListImages.ListImages
instance GHC.Show.Show Network.AWS.ECR.ListImages.ListImages
instance GHC.Read.Read Network.AWS.ECR.ListImages.ListImages
instance GHC.Classes.Eq Network.AWS.ECR.ListImages.ListImages
instance GHC.Generics.Generic Network.AWS.ECR.ListImages.ListImagesResponse
instance GHC.Show.Show Network.AWS.ECR.ListImages.ListImagesResponse
instance GHC.Read.Read Network.AWS.ECR.ListImages.ListImagesResponse
instance GHC.Classes.Eq Network.AWS.ECR.ListImages.ListImagesResponse
instance Network.AWS.Types.AWSRequest Network.AWS.ECR.ListImages.ListImages
instance Control.DeepSeq.NFData Network.AWS.ECR.ListImages.ListImagesResponse
instance Network.AWS.Pager.AWSPager Network.AWS.ECR.ListImages.ListImages
instance Data.Hashable.Class.Hashable Network.AWS.ECR.ListImages.ListImages
instance Control.DeepSeq.NFData Network.AWS.ECR.ListImages.ListImages
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.ECR.ListImages.ListImages
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.ListImages.ListImages
instance Network.AWS.Data.Path.ToPath Network.AWS.ECR.ListImages.ListImages
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.ListImages.ListImages


-- | Notifies Amazon ECR that you intend to upload an image layer.
--   
--   When an image is pushed, the InitiateLayerUpload API is called once
--   per image layer that has not already been uploaded. Whether or not an
--   image layer has been uploaded is determined by the
--   BatchCheckLayerAvailability API action.
--   
--   This operation is used by the Amazon ECR proxy and is not generally
--   used by customers for pulling and pushing images. In most cases, you
--   should use the <tt>docker</tt> CLI to pull, tag, and push images.
module Network.AWS.ECR.InitiateLayerUpload

-- | <i>See:</i> <a>newInitiateLayerUpload</a> smart constructor.
data InitiateLayerUpload
InitiateLayerUpload' :: Maybe Text -> Text -> InitiateLayerUpload

-- | The Amazon Web Services account ID associated with the registry to
--   which you intend to upload layers. If you do not specify a registry,
--   the default registry is assumed.
[$sel:registryId:InitiateLayerUpload'] :: InitiateLayerUpload -> Maybe Text

-- | The name of the repository to which you intend to upload layers.
[$sel:repositoryName:InitiateLayerUpload'] :: InitiateLayerUpload -> Text

-- | Create a value of <a>InitiateLayerUpload</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:InitiateLayerUpload'</a>,
--   <a>initiateLayerUpload_registryId</a> - The Amazon Web Services
--   account ID associated with the registry to which you intend to upload
--   layers. If you do not specify a registry, the default registry is
--   assumed.
--   
--   <a>$sel:repositoryName:InitiateLayerUpload'</a>,
--   <a>initiateLayerUpload_repositoryName</a> - The name of the repository
--   to which you intend to upload layers.
newInitiateLayerUpload :: Text -> InitiateLayerUpload

-- | The Amazon Web Services account ID associated with the registry to
--   which you intend to upload layers. If you do not specify a registry,
--   the default registry is assumed.
initiateLayerUpload_registryId :: Lens' InitiateLayerUpload (Maybe Text)

-- | The name of the repository to which you intend to upload layers.
initiateLayerUpload_repositoryName :: Lens' InitiateLayerUpload Text

-- | <i>See:</i> <a>newInitiateLayerUploadResponse</a> smart constructor.
data InitiateLayerUploadResponse
InitiateLayerUploadResponse' :: Maybe Text -> Maybe Natural -> Int -> InitiateLayerUploadResponse

-- | The upload ID for the layer upload. This parameter is passed to
--   further UploadLayerPart and CompleteLayerUpload operations.
[$sel:uploadId:InitiateLayerUploadResponse'] :: InitiateLayerUploadResponse -> Maybe Text

-- | The size, in bytes, that Amazon ECR expects future layer part uploads
--   to be.
[$sel:partSize:InitiateLayerUploadResponse'] :: InitiateLayerUploadResponse -> Maybe Natural

-- | The response's http status code.
[$sel:httpStatus:InitiateLayerUploadResponse'] :: InitiateLayerUploadResponse -> Int

-- | Create a value of <a>InitiateLayerUploadResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:uploadId:InitiateLayerUploadResponse'</a>,
--   <a>initiateLayerUploadResponse_uploadId</a> - The upload ID for the
--   layer upload. This parameter is passed to further UploadLayerPart and
--   CompleteLayerUpload operations.
--   
--   <a>$sel:partSize:InitiateLayerUploadResponse'</a>,
--   <a>initiateLayerUploadResponse_partSize</a> - The size, in bytes, that
--   Amazon ECR expects future layer part uploads to be.
--   
--   <a>$sel:httpStatus:InitiateLayerUploadResponse'</a>,
--   <a>initiateLayerUploadResponse_httpStatus</a> - The response's http
--   status code.
newInitiateLayerUploadResponse :: Int -> InitiateLayerUploadResponse

-- | The upload ID for the layer upload. This parameter is passed to
--   further UploadLayerPart and CompleteLayerUpload operations.
initiateLayerUploadResponse_uploadId :: Lens' InitiateLayerUploadResponse (Maybe Text)

-- | The size, in bytes, that Amazon ECR expects future layer part uploads
--   to be.
initiateLayerUploadResponse_partSize :: Lens' InitiateLayerUploadResponse (Maybe Natural)

-- | The response's http status code.
initiateLayerUploadResponse_httpStatus :: Lens' InitiateLayerUploadResponse Int
instance GHC.Generics.Generic Network.AWS.ECR.InitiateLayerUpload.InitiateLayerUpload
instance GHC.Show.Show Network.AWS.ECR.InitiateLayerUpload.InitiateLayerUpload
instance GHC.Read.Read Network.AWS.ECR.InitiateLayerUpload.InitiateLayerUpload
instance GHC.Classes.Eq Network.AWS.ECR.InitiateLayerUpload.InitiateLayerUpload
instance GHC.Generics.Generic Network.AWS.ECR.InitiateLayerUpload.InitiateLayerUploadResponse
instance GHC.Show.Show Network.AWS.ECR.InitiateLayerUpload.InitiateLayerUploadResponse
instance GHC.Read.Read Network.AWS.ECR.InitiateLayerUpload.InitiateLayerUploadResponse
instance GHC.Classes.Eq Network.AWS.ECR.InitiateLayerUpload.InitiateLayerUploadResponse
instance Network.AWS.Types.AWSRequest Network.AWS.ECR.InitiateLayerUpload.InitiateLayerUpload
instance Control.DeepSeq.NFData Network.AWS.ECR.InitiateLayerUpload.InitiateLayerUploadResponse
instance Data.Hashable.Class.Hashable Network.AWS.ECR.InitiateLayerUpload.InitiateLayerUpload
instance Control.DeepSeq.NFData Network.AWS.ECR.InitiateLayerUpload.InitiateLayerUpload
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.ECR.InitiateLayerUpload.InitiateLayerUpload
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.InitiateLayerUpload.InitiateLayerUpload
instance Network.AWS.Data.Path.ToPath Network.AWS.ECR.InitiateLayerUpload.InitiateLayerUpload
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.InitiateLayerUpload.InitiateLayerUpload


-- | Retrieves the repository policy for the specified repository.
module Network.AWS.ECR.GetRepositoryPolicy

-- | <i>See:</i> <a>newGetRepositoryPolicy</a> smart constructor.
data GetRepositoryPolicy
GetRepositoryPolicy' :: Maybe Text -> Text -> GetRepositoryPolicy

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository. If you do not specify a registry, the default
--   registry is assumed.
[$sel:registryId:GetRepositoryPolicy'] :: GetRepositoryPolicy -> Maybe Text

-- | The name of the repository with the policy to retrieve.
[$sel:repositoryName:GetRepositoryPolicy'] :: GetRepositoryPolicy -> Text

-- | Create a value of <a>GetRepositoryPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:GetRepositoryPolicy'</a>,
--   <a>getRepositoryPolicy_registryId</a> - The Amazon Web Services
--   account ID associated with the registry that contains the repository.
--   If you do not specify a registry, the default registry is assumed.
--   
--   <a>$sel:repositoryName:GetRepositoryPolicy'</a>,
--   <a>getRepositoryPolicy_repositoryName</a> - The name of the repository
--   with the policy to retrieve.
newGetRepositoryPolicy :: Text -> GetRepositoryPolicy

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository. If you do not specify a registry, the default
--   registry is assumed.
getRepositoryPolicy_registryId :: Lens' GetRepositoryPolicy (Maybe Text)

-- | The name of the repository with the policy to retrieve.
getRepositoryPolicy_repositoryName :: Lens' GetRepositoryPolicy Text

-- | <i>See:</i> <a>newGetRepositoryPolicyResponse</a> smart constructor.
data GetRepositoryPolicyResponse
GetRepositoryPolicyResponse' :: Maybe Text -> Maybe Text -> Maybe Text -> Int -> GetRepositoryPolicyResponse

-- | The registry ID associated with the request.
[$sel:registryId:GetRepositoryPolicyResponse'] :: GetRepositoryPolicyResponse -> Maybe Text

-- | The repository name associated with the request.
[$sel:repositoryName:GetRepositoryPolicyResponse'] :: GetRepositoryPolicyResponse -> Maybe Text

-- | The JSON repository policy text associated with the repository.
[$sel:policyText:GetRepositoryPolicyResponse'] :: GetRepositoryPolicyResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:GetRepositoryPolicyResponse'] :: GetRepositoryPolicyResponse -> Int

-- | Create a value of <a>GetRepositoryPolicyResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:GetRepositoryPolicy'</a>,
--   <a>getRepositoryPolicyResponse_registryId</a> - The registry ID
--   associated with the request.
--   
--   <a>$sel:repositoryName:GetRepositoryPolicy'</a>,
--   <a>getRepositoryPolicyResponse_repositoryName</a> - The repository
--   name associated with the request.
--   
--   <a>$sel:policyText:GetRepositoryPolicyResponse'</a>,
--   <a>getRepositoryPolicyResponse_policyText</a> - The JSON repository
--   policy text associated with the repository.
--   
--   <a>$sel:httpStatus:GetRepositoryPolicyResponse'</a>,
--   <a>getRepositoryPolicyResponse_httpStatus</a> - The response's http
--   status code.
newGetRepositoryPolicyResponse :: Int -> GetRepositoryPolicyResponse

-- | The registry ID associated with the request.
getRepositoryPolicyResponse_registryId :: Lens' GetRepositoryPolicyResponse (Maybe Text)

-- | The repository name associated with the request.
getRepositoryPolicyResponse_repositoryName :: Lens' GetRepositoryPolicyResponse (Maybe Text)

-- | The JSON repository policy text associated with the repository.
getRepositoryPolicyResponse_policyText :: Lens' GetRepositoryPolicyResponse (Maybe Text)

-- | The response's http status code.
getRepositoryPolicyResponse_httpStatus :: Lens' GetRepositoryPolicyResponse Int
instance GHC.Generics.Generic Network.AWS.ECR.GetRepositoryPolicy.GetRepositoryPolicy
instance GHC.Show.Show Network.AWS.ECR.GetRepositoryPolicy.GetRepositoryPolicy
instance GHC.Read.Read Network.AWS.ECR.GetRepositoryPolicy.GetRepositoryPolicy
instance GHC.Classes.Eq Network.AWS.ECR.GetRepositoryPolicy.GetRepositoryPolicy
instance GHC.Generics.Generic Network.AWS.ECR.GetRepositoryPolicy.GetRepositoryPolicyResponse
instance GHC.Show.Show Network.AWS.ECR.GetRepositoryPolicy.GetRepositoryPolicyResponse
instance GHC.Read.Read Network.AWS.ECR.GetRepositoryPolicy.GetRepositoryPolicyResponse
instance GHC.Classes.Eq Network.AWS.ECR.GetRepositoryPolicy.GetRepositoryPolicyResponse
instance Network.AWS.Types.AWSRequest Network.AWS.ECR.GetRepositoryPolicy.GetRepositoryPolicy
instance Control.DeepSeq.NFData Network.AWS.ECR.GetRepositoryPolicy.GetRepositoryPolicyResponse
instance Data.Hashable.Class.Hashable Network.AWS.ECR.GetRepositoryPolicy.GetRepositoryPolicy
instance Control.DeepSeq.NFData Network.AWS.ECR.GetRepositoryPolicy.GetRepositoryPolicy
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.ECR.GetRepositoryPolicy.GetRepositoryPolicy
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.GetRepositoryPolicy.GetRepositoryPolicy
instance Network.AWS.Data.Path.ToPath Network.AWS.ECR.GetRepositoryPolicy.GetRepositoryPolicy
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.GetRepositoryPolicy.GetRepositoryPolicy


-- | Retrieves the permissions policy for a registry.
module Network.AWS.ECR.GetRegistryPolicy

-- | <i>See:</i> <a>newGetRegistryPolicy</a> smart constructor.
data GetRegistryPolicy
GetRegistryPolicy' :: GetRegistryPolicy

-- | Create a value of <a>GetRegistryPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newGetRegistryPolicy :: GetRegistryPolicy

-- | <i>See:</i> <a>newGetRegistryPolicyResponse</a> smart constructor.
data GetRegistryPolicyResponse
GetRegistryPolicyResponse' :: Maybe Text -> Maybe Text -> Int -> GetRegistryPolicyResponse

-- | The ID of the registry.
[$sel:registryId:GetRegistryPolicyResponse'] :: GetRegistryPolicyResponse -> Maybe Text

-- | The JSON text of the permissions policy for a registry.
[$sel:policyText:GetRegistryPolicyResponse'] :: GetRegistryPolicyResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:GetRegistryPolicyResponse'] :: GetRegistryPolicyResponse -> Int

-- | Create a value of <a>GetRegistryPolicyResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:GetRegistryPolicyResponse'</a>,
--   <a>getRegistryPolicyResponse_registryId</a> - The ID of the registry.
--   
--   <a>$sel:policyText:GetRegistryPolicyResponse'</a>,
--   <a>getRegistryPolicyResponse_policyText</a> - The JSON text of the
--   permissions policy for a registry.
--   
--   <a>$sel:httpStatus:GetRegistryPolicyResponse'</a>,
--   <a>getRegistryPolicyResponse_httpStatus</a> - The response's http
--   status code.
newGetRegistryPolicyResponse :: Int -> GetRegistryPolicyResponse

-- | The ID of the registry.
getRegistryPolicyResponse_registryId :: Lens' GetRegistryPolicyResponse (Maybe Text)

-- | The JSON text of the permissions policy for a registry.
getRegistryPolicyResponse_policyText :: Lens' GetRegistryPolicyResponse (Maybe Text)

-- | The response's http status code.
getRegistryPolicyResponse_httpStatus :: Lens' GetRegistryPolicyResponse Int
instance GHC.Generics.Generic Network.AWS.ECR.GetRegistryPolicy.GetRegistryPolicy
instance GHC.Show.Show Network.AWS.ECR.GetRegistryPolicy.GetRegistryPolicy
instance GHC.Read.Read Network.AWS.ECR.GetRegistryPolicy.GetRegistryPolicy
instance GHC.Classes.Eq Network.AWS.ECR.GetRegistryPolicy.GetRegistryPolicy
instance GHC.Generics.Generic Network.AWS.ECR.GetRegistryPolicy.GetRegistryPolicyResponse
instance GHC.Show.Show Network.AWS.ECR.GetRegistryPolicy.GetRegistryPolicyResponse
instance GHC.Read.Read Network.AWS.ECR.GetRegistryPolicy.GetRegistryPolicyResponse
instance GHC.Classes.Eq Network.AWS.ECR.GetRegistryPolicy.GetRegistryPolicyResponse
instance Network.AWS.Types.AWSRequest Network.AWS.ECR.GetRegistryPolicy.GetRegistryPolicy
instance Control.DeepSeq.NFData Network.AWS.ECR.GetRegistryPolicy.GetRegistryPolicyResponse
instance Data.Hashable.Class.Hashable Network.AWS.ECR.GetRegistryPolicy.GetRegistryPolicy
instance Control.DeepSeq.NFData Network.AWS.ECR.GetRegistryPolicy.GetRegistryPolicy
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.ECR.GetRegistryPolicy.GetRegistryPolicy
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.GetRegistryPolicy.GetRegistryPolicy
instance Network.AWS.Data.Path.ToPath Network.AWS.ECR.GetRegistryPolicy.GetRegistryPolicy
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.GetRegistryPolicy.GetRegistryPolicy


-- | Retrieves the results of the lifecycle policy preview request for the
--   specified repository.
--   
--   This operation returns paginated results.
module Network.AWS.ECR.GetLifecyclePolicyPreview

-- | <i>See:</i> <a>newGetLifecyclePolicyPreview</a> smart constructor.
data GetLifecyclePolicyPreview
GetLifecyclePolicyPreview' :: Maybe Text -> Maybe [ImageIdentifier] -> Maybe Natural -> Maybe Text -> Maybe LifecyclePolicyPreviewFilter -> Text -> GetLifecyclePolicyPreview

-- | The <tt>nextToken</tt> value returned from a previous paginated 
--   <tt>GetLifecyclePolicyPreviewRequest</tt> request where
--   <tt>maxResults</tt> was used and the  results exceeded the value of
--   that parameter. Pagination continues from the end of the  previous
--   results that returned the <tt>nextToken</tt> value. This value is 
--   <tt>null</tt> when there are no more results to return. This option
--   cannot be used when you specify images with <tt>imageIds</tt>.
[$sel:nextToken:GetLifecyclePolicyPreview'] :: GetLifecyclePolicyPreview -> Maybe Text

-- | The list of imageIDs to be included.
[$sel:imageIds:GetLifecyclePolicyPreview'] :: GetLifecyclePolicyPreview -> Maybe [ImageIdentifier]

-- | The maximum number of repository results returned by
--   <tt>GetLifecyclePolicyPreviewRequest</tt> in  paginated output. When
--   this parameter is used, <tt>GetLifecyclePolicyPreviewRequest</tt> only
--   returns  <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt>  response element. The remaining results of the
--   initial request can be seen by sending  another
--   <tt>GetLifecyclePolicyPreviewRequest</tt> request with the returned
--   <tt>nextToken</tt>  value. This value can be between 1 and 1000. If
--   this  parameter is not used, then
--   <tt>GetLifecyclePolicyPreviewRequest</tt> returns up to  100 results
--   and a <tt>nextToken</tt> value, if  applicable. This option cannot be
--   used when you specify images with <tt>imageIds</tt>.
[$sel:maxResults:GetLifecyclePolicyPreview'] :: GetLifecyclePolicyPreview -> Maybe Natural

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository. If you do not specify a registry, the default
--   registry is assumed.
[$sel:registryId:GetLifecyclePolicyPreview'] :: GetLifecyclePolicyPreview -> Maybe Text

-- | An optional parameter that filters results based on image tag status
--   and all tags, if tagged.
[$sel:filter':GetLifecyclePolicyPreview'] :: GetLifecyclePolicyPreview -> Maybe LifecyclePolicyPreviewFilter

-- | The name of the repository.
[$sel:repositoryName:GetLifecyclePolicyPreview'] :: GetLifecyclePolicyPreview -> Text

-- | Create a value of <a>GetLifecyclePolicyPreview</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:GetLifecyclePolicyPreview'</a>,
--   <a>getLifecyclePolicyPreview_nextToken</a> - The <tt>nextToken</tt>
--   value returned from a previous paginated 
--   <tt>GetLifecyclePolicyPreviewRequest</tt> request where
--   <tt>maxResults</tt> was used and the  results exceeded the value of
--   that parameter. Pagination continues from the end of the  previous
--   results that returned the <tt>nextToken</tt> value. This value is 
--   <tt>null</tt> when there are no more results to return. This option
--   cannot be used when you specify images with <tt>imageIds</tt>.
--   
--   <a>$sel:imageIds:GetLifecyclePolicyPreview'</a>,
--   <a>getLifecyclePolicyPreview_imageIds</a> - The list of imageIDs to be
--   included.
--   
--   <a>$sel:maxResults:GetLifecyclePolicyPreview'</a>,
--   <a>getLifecyclePolicyPreview_maxResults</a> - The maximum number of
--   repository results returned by
--   <tt>GetLifecyclePolicyPreviewRequest</tt> in  paginated output. When
--   this parameter is used, <tt>GetLifecyclePolicyPreviewRequest</tt> only
--   returns  <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt>  response element. The remaining results of the
--   initial request can be seen by sending  another
--   <tt>GetLifecyclePolicyPreviewRequest</tt> request with the returned
--   <tt>nextToken</tt>  value. This value can be between 1 and 1000. If
--   this  parameter is not used, then
--   <tt>GetLifecyclePolicyPreviewRequest</tt> returns up to  100 results
--   and a <tt>nextToken</tt> value, if  applicable. This option cannot be
--   used when you specify images with <tt>imageIds</tt>.
--   
--   <a>$sel:registryId:GetLifecyclePolicyPreview'</a>,
--   <a>getLifecyclePolicyPreview_registryId</a> - The Amazon Web Services
--   account ID associated with the registry that contains the repository.
--   If you do not specify a registry, the default registry is assumed.
--   
--   <a>$sel:filter':GetLifecyclePolicyPreview'</a>,
--   <a>getLifecyclePolicyPreview_filter</a> - An optional parameter that
--   filters results based on image tag status and all tags, if tagged.
--   
--   <a>$sel:repositoryName:GetLifecyclePolicyPreview'</a>,
--   <a>getLifecyclePolicyPreview_repositoryName</a> - The name of the
--   repository.
newGetLifecyclePolicyPreview :: Text -> GetLifecyclePolicyPreview

-- | The <tt>nextToken</tt> value returned from a previous paginated 
--   <tt>GetLifecyclePolicyPreviewRequest</tt> request where
--   <tt>maxResults</tt> was used and the  results exceeded the value of
--   that parameter. Pagination continues from the end of the  previous
--   results that returned the <tt>nextToken</tt> value. This value is 
--   <tt>null</tt> when there are no more results to return. This option
--   cannot be used when you specify images with <tt>imageIds</tt>.
getLifecyclePolicyPreview_nextToken :: Lens' GetLifecyclePolicyPreview (Maybe Text)

-- | The list of imageIDs to be included.
getLifecyclePolicyPreview_imageIds :: Lens' GetLifecyclePolicyPreview (Maybe [ImageIdentifier])

-- | The maximum number of repository results returned by
--   <tt>GetLifecyclePolicyPreviewRequest</tt> in  paginated output. When
--   this parameter is used, <tt>GetLifecyclePolicyPreviewRequest</tt> only
--   returns  <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt>  response element. The remaining results of the
--   initial request can be seen by sending  another
--   <tt>GetLifecyclePolicyPreviewRequest</tt> request with the returned
--   <tt>nextToken</tt>  value. This value can be between 1 and 1000. If
--   this  parameter is not used, then
--   <tt>GetLifecyclePolicyPreviewRequest</tt> returns up to  100 results
--   and a <tt>nextToken</tt> value, if  applicable. This option cannot be
--   used when you specify images with <tt>imageIds</tt>.
getLifecyclePolicyPreview_maxResults :: Lens' GetLifecyclePolicyPreview (Maybe Natural)

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository. If you do not specify a registry, the default
--   registry is assumed.
getLifecyclePolicyPreview_registryId :: Lens' GetLifecyclePolicyPreview (Maybe Text)

-- | An optional parameter that filters results based on image tag status
--   and all tags, if tagged.
getLifecyclePolicyPreview_filter :: Lens' GetLifecyclePolicyPreview (Maybe LifecyclePolicyPreviewFilter)

-- | The name of the repository.
getLifecyclePolicyPreview_repositoryName :: Lens' GetLifecyclePolicyPreview Text

-- | <i>See:</i> <a>newGetLifecyclePolicyPreviewResponse</a> smart
--   constructor.
data GetLifecyclePolicyPreviewResponse
GetLifecyclePolicyPreviewResponse' :: Maybe Text -> Maybe LifecyclePolicyPreviewStatus -> Maybe Text -> Maybe Text -> Maybe LifecyclePolicyPreviewSummary -> Maybe Text -> Maybe [LifecyclePolicyPreviewResult] -> Int -> GetLifecyclePolicyPreviewResponse

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>GetLifecyclePolicyPreview</tt> request. When the results of a
--   <tt>GetLifecyclePolicyPreview</tt> request exceed <tt>maxResults</tt>,
--   this value can be used to retrieve the next page of results. This
--   value is <tt>null</tt> when there are no more results to return.
[$sel:nextToken:GetLifecyclePolicyPreviewResponse'] :: GetLifecyclePolicyPreviewResponse -> Maybe Text

-- | The status of the lifecycle policy preview request.
[$sel:status:GetLifecyclePolicyPreviewResponse'] :: GetLifecyclePolicyPreviewResponse -> Maybe LifecyclePolicyPreviewStatus

-- | The registry ID associated with the request.
[$sel:registryId:GetLifecyclePolicyPreviewResponse'] :: GetLifecyclePolicyPreviewResponse -> Maybe Text

-- | The repository name associated with the request.
[$sel:repositoryName:GetLifecyclePolicyPreviewResponse'] :: GetLifecyclePolicyPreviewResponse -> Maybe Text

-- | The list of images that is returned as a result of the action.
[$sel:summary:GetLifecyclePolicyPreviewResponse'] :: GetLifecyclePolicyPreviewResponse -> Maybe LifecyclePolicyPreviewSummary

-- | The JSON lifecycle policy text.
[$sel:lifecyclePolicyText:GetLifecyclePolicyPreviewResponse'] :: GetLifecyclePolicyPreviewResponse -> Maybe Text

-- | The results of the lifecycle policy preview request.
[$sel:previewResults:GetLifecyclePolicyPreviewResponse'] :: GetLifecyclePolicyPreviewResponse -> Maybe [LifecyclePolicyPreviewResult]

-- | The response's http status code.
[$sel:httpStatus:GetLifecyclePolicyPreviewResponse'] :: GetLifecyclePolicyPreviewResponse -> Int

-- | Create a value of <a>GetLifecyclePolicyPreviewResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:GetLifecyclePolicyPreview'</a>,
--   <a>getLifecyclePolicyPreviewResponse_nextToken</a> - The
--   <tt>nextToken</tt> value to include in a future
--   <tt>GetLifecyclePolicyPreview</tt> request. When the results of a
--   <tt>GetLifecyclePolicyPreview</tt> request exceed <tt>maxResults</tt>,
--   this value can be used to retrieve the next page of results. This
--   value is <tt>null</tt> when there are no more results to return.
--   
--   <a>$sel:status:GetLifecyclePolicyPreviewResponse'</a>,
--   <a>getLifecyclePolicyPreviewResponse_status</a> - The status of the
--   lifecycle policy preview request.
--   
--   <a>$sel:registryId:GetLifecyclePolicyPreview'</a>,
--   <a>getLifecyclePolicyPreviewResponse_registryId</a> - The registry ID
--   associated with the request.
--   
--   <a>$sel:repositoryName:GetLifecyclePolicyPreview'</a>,
--   <a>getLifecyclePolicyPreviewResponse_repositoryName</a> - The
--   repository name associated with the request.
--   
--   <a>$sel:summary:GetLifecyclePolicyPreviewResponse'</a>,
--   <a>getLifecyclePolicyPreviewResponse_summary</a> - The list of images
--   that is returned as a result of the action.
--   
--   <a>$sel:lifecyclePolicyText:GetLifecyclePolicyPreviewResponse'</a>,
--   <a>getLifecyclePolicyPreviewResponse_lifecyclePolicyText</a> - The
--   JSON lifecycle policy text.
--   
--   <a>$sel:previewResults:GetLifecyclePolicyPreviewResponse'</a>,
--   <a>getLifecyclePolicyPreviewResponse_previewResults</a> - The results
--   of the lifecycle policy preview request.
--   
--   <a>$sel:httpStatus:GetLifecyclePolicyPreviewResponse'</a>,
--   <a>getLifecyclePolicyPreviewResponse_httpStatus</a> - The response's
--   http status code.
newGetLifecyclePolicyPreviewResponse :: Int -> GetLifecyclePolicyPreviewResponse

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>GetLifecyclePolicyPreview</tt> request. When the results of a
--   <tt>GetLifecyclePolicyPreview</tt> request exceed <tt>maxResults</tt>,
--   this value can be used to retrieve the next page of results. This
--   value is <tt>null</tt> when there are no more results to return.
getLifecyclePolicyPreviewResponse_nextToken :: Lens' GetLifecyclePolicyPreviewResponse (Maybe Text)

-- | The status of the lifecycle policy preview request.
getLifecyclePolicyPreviewResponse_status :: Lens' GetLifecyclePolicyPreviewResponse (Maybe LifecyclePolicyPreviewStatus)

-- | The registry ID associated with the request.
getLifecyclePolicyPreviewResponse_registryId :: Lens' GetLifecyclePolicyPreviewResponse (Maybe Text)

-- | The repository name associated with the request.
getLifecyclePolicyPreviewResponse_repositoryName :: Lens' GetLifecyclePolicyPreviewResponse (Maybe Text)

-- | The list of images that is returned as a result of the action.
getLifecyclePolicyPreviewResponse_summary :: Lens' GetLifecyclePolicyPreviewResponse (Maybe LifecyclePolicyPreviewSummary)

-- | The JSON lifecycle policy text.
getLifecyclePolicyPreviewResponse_lifecyclePolicyText :: Lens' GetLifecyclePolicyPreviewResponse (Maybe Text)

-- | The results of the lifecycle policy preview request.
getLifecyclePolicyPreviewResponse_previewResults :: Lens' GetLifecyclePolicyPreviewResponse (Maybe [LifecyclePolicyPreviewResult])

-- | The response's http status code.
getLifecyclePolicyPreviewResponse_httpStatus :: Lens' GetLifecyclePolicyPreviewResponse Int
instance GHC.Generics.Generic Network.AWS.ECR.GetLifecyclePolicyPreview.GetLifecyclePolicyPreview
instance GHC.Show.Show Network.AWS.ECR.GetLifecyclePolicyPreview.GetLifecyclePolicyPreview
instance GHC.Read.Read Network.AWS.ECR.GetLifecyclePolicyPreview.GetLifecyclePolicyPreview
instance GHC.Classes.Eq Network.AWS.ECR.GetLifecyclePolicyPreview.GetLifecyclePolicyPreview
instance GHC.Generics.Generic Network.AWS.ECR.GetLifecyclePolicyPreview.GetLifecyclePolicyPreviewResponse
instance GHC.Show.Show Network.AWS.ECR.GetLifecyclePolicyPreview.GetLifecyclePolicyPreviewResponse
instance GHC.Read.Read Network.AWS.ECR.GetLifecyclePolicyPreview.GetLifecyclePolicyPreviewResponse
instance GHC.Classes.Eq Network.AWS.ECR.GetLifecyclePolicyPreview.GetLifecyclePolicyPreviewResponse
instance Network.AWS.Types.AWSRequest Network.AWS.ECR.GetLifecyclePolicyPreview.GetLifecyclePolicyPreview
instance Control.DeepSeq.NFData Network.AWS.ECR.GetLifecyclePolicyPreview.GetLifecyclePolicyPreviewResponse
instance Network.AWS.Pager.AWSPager Network.AWS.ECR.GetLifecyclePolicyPreview.GetLifecyclePolicyPreview
instance Data.Hashable.Class.Hashable Network.AWS.ECR.GetLifecyclePolicyPreview.GetLifecyclePolicyPreview
instance Control.DeepSeq.NFData Network.AWS.ECR.GetLifecyclePolicyPreview.GetLifecyclePolicyPreview
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.ECR.GetLifecyclePolicyPreview.GetLifecyclePolicyPreview
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.GetLifecyclePolicyPreview.GetLifecyclePolicyPreview
instance Network.AWS.Data.Path.ToPath Network.AWS.ECR.GetLifecyclePolicyPreview.GetLifecyclePolicyPreview
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.GetLifecyclePolicyPreview.GetLifecyclePolicyPreview


-- | Retrieves the lifecycle policy for the specified repository.
module Network.AWS.ECR.GetLifecyclePolicy

-- | <i>See:</i> <a>newGetLifecyclePolicy</a> smart constructor.
data GetLifecyclePolicy
GetLifecyclePolicy' :: Maybe Text -> Text -> GetLifecyclePolicy

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository. If you do not specify a registry, the default
--   registry is assumed.
[$sel:registryId:GetLifecyclePolicy'] :: GetLifecyclePolicy -> Maybe Text

-- | The name of the repository.
[$sel:repositoryName:GetLifecyclePolicy'] :: GetLifecyclePolicy -> Text

-- | Create a value of <a>GetLifecyclePolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:GetLifecyclePolicy'</a>,
--   <a>getLifecyclePolicy_registryId</a> - The Amazon Web Services account
--   ID associated with the registry that contains the repository. If you
--   do not specify a registry, the default registry is assumed.
--   
--   <a>$sel:repositoryName:GetLifecyclePolicy'</a>,
--   <a>getLifecyclePolicy_repositoryName</a> - The name of the repository.
newGetLifecyclePolicy :: Text -> GetLifecyclePolicy

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository. If you do not specify a registry, the default
--   registry is assumed.
getLifecyclePolicy_registryId :: Lens' GetLifecyclePolicy (Maybe Text)

-- | The name of the repository.
getLifecyclePolicy_repositoryName :: Lens' GetLifecyclePolicy Text

-- | <i>See:</i> <a>newGetLifecyclePolicyResponse</a> smart constructor.
data GetLifecyclePolicyResponse
GetLifecyclePolicyResponse' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe POSIX -> Int -> GetLifecyclePolicyResponse

-- | The registry ID associated with the request.
[$sel:registryId:GetLifecyclePolicyResponse'] :: GetLifecyclePolicyResponse -> Maybe Text

-- | The repository name associated with the request.
[$sel:repositoryName:GetLifecyclePolicyResponse'] :: GetLifecyclePolicyResponse -> Maybe Text

-- | The JSON lifecycle policy text.
[$sel:lifecyclePolicyText:GetLifecyclePolicyResponse'] :: GetLifecyclePolicyResponse -> Maybe Text

-- | The time stamp of the last time that the lifecycle policy was run.
[$sel:lastEvaluatedAt:GetLifecyclePolicyResponse'] :: GetLifecyclePolicyResponse -> Maybe POSIX

-- | The response's http status code.
[$sel:httpStatus:GetLifecyclePolicyResponse'] :: GetLifecyclePolicyResponse -> Int

-- | Create a value of <a>GetLifecyclePolicyResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:GetLifecyclePolicy'</a>,
--   <a>getLifecyclePolicyResponse_registryId</a> - The registry ID
--   associated with the request.
--   
--   <a>$sel:repositoryName:GetLifecyclePolicy'</a>,
--   <a>getLifecyclePolicyResponse_repositoryName</a> - The repository name
--   associated with the request.
--   
--   <a>$sel:lifecyclePolicyText:GetLifecyclePolicyResponse'</a>,
--   <a>getLifecyclePolicyResponse_lifecyclePolicyText</a> - The JSON
--   lifecycle policy text.
--   
--   <a>$sel:lastEvaluatedAt:GetLifecyclePolicyResponse'</a>,
--   <a>getLifecyclePolicyResponse_lastEvaluatedAt</a> - The time stamp of
--   the last time that the lifecycle policy was run.
--   
--   <a>$sel:httpStatus:GetLifecyclePolicyResponse'</a>,
--   <a>getLifecyclePolicyResponse_httpStatus</a> - The response's http
--   status code.
newGetLifecyclePolicyResponse :: Int -> GetLifecyclePolicyResponse

-- | The registry ID associated with the request.
getLifecyclePolicyResponse_registryId :: Lens' GetLifecyclePolicyResponse (Maybe Text)

-- | The repository name associated with the request.
getLifecyclePolicyResponse_repositoryName :: Lens' GetLifecyclePolicyResponse (Maybe Text)

-- | The JSON lifecycle policy text.
getLifecyclePolicyResponse_lifecyclePolicyText :: Lens' GetLifecyclePolicyResponse (Maybe Text)

-- | The time stamp of the last time that the lifecycle policy was run.
getLifecyclePolicyResponse_lastEvaluatedAt :: Lens' GetLifecyclePolicyResponse (Maybe UTCTime)

-- | The response's http status code.
getLifecyclePolicyResponse_httpStatus :: Lens' GetLifecyclePolicyResponse Int
instance GHC.Generics.Generic Network.AWS.ECR.GetLifecyclePolicy.GetLifecyclePolicy
instance GHC.Show.Show Network.AWS.ECR.GetLifecyclePolicy.GetLifecyclePolicy
instance GHC.Read.Read Network.AWS.ECR.GetLifecyclePolicy.GetLifecyclePolicy
instance GHC.Classes.Eq Network.AWS.ECR.GetLifecyclePolicy.GetLifecyclePolicy
instance GHC.Generics.Generic Network.AWS.ECR.GetLifecyclePolicy.GetLifecyclePolicyResponse
instance GHC.Show.Show Network.AWS.ECR.GetLifecyclePolicy.GetLifecyclePolicyResponse
instance GHC.Read.Read Network.AWS.ECR.GetLifecyclePolicy.GetLifecyclePolicyResponse
instance GHC.Classes.Eq Network.AWS.ECR.GetLifecyclePolicy.GetLifecyclePolicyResponse
instance Network.AWS.Types.AWSRequest Network.AWS.ECR.GetLifecyclePolicy.GetLifecyclePolicy
instance Control.DeepSeq.NFData Network.AWS.ECR.GetLifecyclePolicy.GetLifecyclePolicyResponse
instance Data.Hashable.Class.Hashable Network.AWS.ECR.GetLifecyclePolicy.GetLifecyclePolicy
instance Control.DeepSeq.NFData Network.AWS.ECR.GetLifecyclePolicy.GetLifecyclePolicy
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.ECR.GetLifecyclePolicy.GetLifecyclePolicy
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.GetLifecyclePolicy.GetLifecyclePolicy
instance Network.AWS.Data.Path.ToPath Network.AWS.ECR.GetLifecyclePolicy.GetLifecyclePolicy
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.GetLifecyclePolicy.GetLifecyclePolicy


-- | Retrieves the pre-signed Amazon S3 download URL corresponding to an
--   image layer. You can only get URLs for image layers that are
--   referenced in an image.
--   
--   When an image is pulled, the GetDownloadUrlForLayer API is called once
--   per image layer that is not already cached.
--   
--   This operation is used by the Amazon ECR proxy and is not generally
--   used by customers for pulling and pushing images. In most cases, you
--   should use the <tt>docker</tt> CLI to pull, tag, and push images.
module Network.AWS.ECR.GetDownloadUrlForLayer

-- | <i>See:</i> <a>newGetDownloadUrlForLayer</a> smart constructor.
data GetDownloadUrlForLayer
GetDownloadUrlForLayer' :: Maybe Text -> Text -> Text -> GetDownloadUrlForLayer

-- | The Amazon Web Services account ID associated with the registry that
--   contains the image layer to download. If you do not specify a
--   registry, the default registry is assumed.
[$sel:registryId:GetDownloadUrlForLayer'] :: GetDownloadUrlForLayer -> Maybe Text

-- | The name of the repository that is associated with the image layer to
--   download.
[$sel:repositoryName:GetDownloadUrlForLayer'] :: GetDownloadUrlForLayer -> Text

-- | The digest of the image layer to download.
[$sel:layerDigest:GetDownloadUrlForLayer'] :: GetDownloadUrlForLayer -> Text

-- | Create a value of <a>GetDownloadUrlForLayer</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:GetDownloadUrlForLayer'</a>,
--   <a>getDownloadUrlForLayer_registryId</a> - The Amazon Web Services
--   account ID associated with the registry that contains the image layer
--   to download. If you do not specify a registry, the default registry is
--   assumed.
--   
--   <a>$sel:repositoryName:GetDownloadUrlForLayer'</a>,
--   <a>getDownloadUrlForLayer_repositoryName</a> - The name of the
--   repository that is associated with the image layer to download.
--   
--   <a>$sel:layerDigest:GetDownloadUrlForLayer'</a>,
--   <a>getDownloadUrlForLayer_layerDigest</a> - The digest of the image
--   layer to download.
newGetDownloadUrlForLayer :: Text -> Text -> GetDownloadUrlForLayer

-- | The Amazon Web Services account ID associated with the registry that
--   contains the image layer to download. If you do not specify a
--   registry, the default registry is assumed.
getDownloadUrlForLayer_registryId :: Lens' GetDownloadUrlForLayer (Maybe Text)

-- | The name of the repository that is associated with the image layer to
--   download.
getDownloadUrlForLayer_repositoryName :: Lens' GetDownloadUrlForLayer Text

-- | The digest of the image layer to download.
getDownloadUrlForLayer_layerDigest :: Lens' GetDownloadUrlForLayer Text

-- | <i>See:</i> <a>newGetDownloadUrlForLayerResponse</a> smart
--   constructor.
data GetDownloadUrlForLayerResponse
GetDownloadUrlForLayerResponse' :: Maybe Text -> Maybe Text -> Int -> GetDownloadUrlForLayerResponse

-- | The pre-signed Amazon S3 download URL for the requested layer.
[$sel:downloadUrl:GetDownloadUrlForLayerResponse'] :: GetDownloadUrlForLayerResponse -> Maybe Text

-- | The digest of the image layer to download.
[$sel:layerDigest:GetDownloadUrlForLayerResponse'] :: GetDownloadUrlForLayerResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:GetDownloadUrlForLayerResponse'] :: GetDownloadUrlForLayerResponse -> Int

-- | Create a value of <a>GetDownloadUrlForLayerResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:downloadUrl:GetDownloadUrlForLayerResponse'</a>,
--   <a>getDownloadUrlForLayerResponse_downloadUrl</a> - The pre-signed
--   Amazon S3 download URL for the requested layer.
--   
--   <a>$sel:layerDigest:GetDownloadUrlForLayer'</a>,
--   <a>getDownloadUrlForLayerResponse_layerDigest</a> - The digest of the
--   image layer to download.
--   
--   <a>$sel:httpStatus:GetDownloadUrlForLayerResponse'</a>,
--   <a>getDownloadUrlForLayerResponse_httpStatus</a> - The response's http
--   status code.
newGetDownloadUrlForLayerResponse :: Int -> GetDownloadUrlForLayerResponse

-- | The pre-signed Amazon S3 download URL for the requested layer.
getDownloadUrlForLayerResponse_downloadUrl :: Lens' GetDownloadUrlForLayerResponse (Maybe Text)

-- | The digest of the image layer to download.
getDownloadUrlForLayerResponse_layerDigest :: Lens' GetDownloadUrlForLayerResponse (Maybe Text)

-- | The response's http status code.
getDownloadUrlForLayerResponse_httpStatus :: Lens' GetDownloadUrlForLayerResponse Int
instance GHC.Generics.Generic Network.AWS.ECR.GetDownloadUrlForLayer.GetDownloadUrlForLayer
instance GHC.Show.Show Network.AWS.ECR.GetDownloadUrlForLayer.GetDownloadUrlForLayer
instance GHC.Read.Read Network.AWS.ECR.GetDownloadUrlForLayer.GetDownloadUrlForLayer
instance GHC.Classes.Eq Network.AWS.ECR.GetDownloadUrlForLayer.GetDownloadUrlForLayer
instance GHC.Generics.Generic Network.AWS.ECR.GetDownloadUrlForLayer.GetDownloadUrlForLayerResponse
instance GHC.Show.Show Network.AWS.ECR.GetDownloadUrlForLayer.GetDownloadUrlForLayerResponse
instance GHC.Read.Read Network.AWS.ECR.GetDownloadUrlForLayer.GetDownloadUrlForLayerResponse
instance GHC.Classes.Eq Network.AWS.ECR.GetDownloadUrlForLayer.GetDownloadUrlForLayerResponse
instance Network.AWS.Types.AWSRequest Network.AWS.ECR.GetDownloadUrlForLayer.GetDownloadUrlForLayer
instance Control.DeepSeq.NFData Network.AWS.ECR.GetDownloadUrlForLayer.GetDownloadUrlForLayerResponse
instance Data.Hashable.Class.Hashable Network.AWS.ECR.GetDownloadUrlForLayer.GetDownloadUrlForLayer
instance Control.DeepSeq.NFData Network.AWS.ECR.GetDownloadUrlForLayer.GetDownloadUrlForLayer
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.ECR.GetDownloadUrlForLayer.GetDownloadUrlForLayer
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.GetDownloadUrlForLayer.GetDownloadUrlForLayer
instance Network.AWS.Data.Path.ToPath Network.AWS.ECR.GetDownloadUrlForLayer.GetDownloadUrlForLayer
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.GetDownloadUrlForLayer.GetDownloadUrlForLayer


-- | Retrieves an authorization token. An authorization token represents
--   your IAM authentication credentials and can be used to access any
--   Amazon ECR registry that your IAM principal has access to. The
--   authorization token is valid for 12 hours.
--   
--   The <tt>authorizationToken</tt> returned is a base64 encoded string
--   that can be decoded and used in a <tt>docker login</tt> command to
--   authenticate to a registry. The CLI offers an
--   <tt>get-login-password</tt> command that simplifies the login process.
--   For more information, see <a>Registry authentication</a> in the
--   <i>Amazon Elastic Container Registry User Guide</i>.
module Network.AWS.ECR.GetAuthorizationToken

-- | <i>See:</i> <a>newGetAuthorizationToken</a> smart constructor.
data GetAuthorizationToken
GetAuthorizationToken' :: Maybe (NonEmpty Text) -> GetAuthorizationToken

-- | A list of Amazon Web Services account IDs that are associated with the
--   registries for which to get AuthorizationData objects. If you do not
--   specify a registry, the default registry is assumed.
[$sel:registryIds:GetAuthorizationToken'] :: GetAuthorizationToken -> Maybe (NonEmpty Text)

-- | Create a value of <a>GetAuthorizationToken</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryIds:GetAuthorizationToken'</a>,
--   <a>getAuthorizationToken_registryIds</a> - A list of Amazon Web
--   Services account IDs that are associated with the registries for which
--   to get AuthorizationData objects. If you do not specify a registry,
--   the default registry is assumed.
newGetAuthorizationToken :: GetAuthorizationToken

-- | A list of Amazon Web Services account IDs that are associated with the
--   registries for which to get AuthorizationData objects. If you do not
--   specify a registry, the default registry is assumed.
getAuthorizationToken_registryIds :: Lens' GetAuthorizationToken (Maybe (NonEmpty Text))

-- | <i>See:</i> <a>newGetAuthorizationTokenResponse</a> smart constructor.
data GetAuthorizationTokenResponse
GetAuthorizationTokenResponse' :: Maybe [AuthorizationData] -> Int -> GetAuthorizationTokenResponse

-- | A list of authorization token data objects that correspond to the
--   <tt>registryIds</tt> values in the request.
[$sel:authorizationData:GetAuthorizationTokenResponse'] :: GetAuthorizationTokenResponse -> Maybe [AuthorizationData]

-- | The response's http status code.
[$sel:httpStatus:GetAuthorizationTokenResponse'] :: GetAuthorizationTokenResponse -> Int

-- | Create a value of <a>GetAuthorizationTokenResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:authorizationData:GetAuthorizationTokenResponse'</a>,
--   <a>getAuthorizationTokenResponse_authorizationData</a> - A list of
--   authorization token data objects that correspond to the
--   <tt>registryIds</tt> values in the request.
--   
--   <a>$sel:httpStatus:GetAuthorizationTokenResponse'</a>,
--   <a>getAuthorizationTokenResponse_httpStatus</a> - The response's http
--   status code.
newGetAuthorizationTokenResponse :: Int -> GetAuthorizationTokenResponse

-- | A list of authorization token data objects that correspond to the
--   <tt>registryIds</tt> values in the request.
getAuthorizationTokenResponse_authorizationData :: Lens' GetAuthorizationTokenResponse (Maybe [AuthorizationData])

-- | The response's http status code.
getAuthorizationTokenResponse_httpStatus :: Lens' GetAuthorizationTokenResponse Int
instance GHC.Generics.Generic Network.AWS.ECR.GetAuthorizationToken.GetAuthorizationToken
instance GHC.Show.Show Network.AWS.ECR.GetAuthorizationToken.GetAuthorizationToken
instance GHC.Read.Read Network.AWS.ECR.GetAuthorizationToken.GetAuthorizationToken
instance GHC.Classes.Eq Network.AWS.ECR.GetAuthorizationToken.GetAuthorizationToken
instance GHC.Generics.Generic Network.AWS.ECR.GetAuthorizationToken.GetAuthorizationTokenResponse
instance GHC.Show.Show Network.AWS.ECR.GetAuthorizationToken.GetAuthorizationTokenResponse
instance GHC.Read.Read Network.AWS.ECR.GetAuthorizationToken.GetAuthorizationTokenResponse
instance GHC.Classes.Eq Network.AWS.ECR.GetAuthorizationToken.GetAuthorizationTokenResponse
instance Network.AWS.Types.AWSRequest Network.AWS.ECR.GetAuthorizationToken.GetAuthorizationToken
instance Control.DeepSeq.NFData Network.AWS.ECR.GetAuthorizationToken.GetAuthorizationTokenResponse
instance Data.Hashable.Class.Hashable Network.AWS.ECR.GetAuthorizationToken.GetAuthorizationToken
instance Control.DeepSeq.NFData Network.AWS.ECR.GetAuthorizationToken.GetAuthorizationToken
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.ECR.GetAuthorizationToken.GetAuthorizationToken
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.GetAuthorizationToken.GetAuthorizationToken
instance Network.AWS.Data.Path.ToPath Network.AWS.ECR.GetAuthorizationToken.GetAuthorizationToken
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.GetAuthorizationToken.GetAuthorizationToken


-- | Describes image repositories in a registry.
--   
--   This operation returns paginated results.
module Network.AWS.ECR.DescribeRepositories

-- | <i>See:</i> <a>newDescribeRepositories</a> smart constructor.
data DescribeRepositories
DescribeRepositories' :: Maybe Text -> Maybe (NonEmpty Text) -> Maybe Natural -> Maybe Text -> DescribeRepositories

-- | The <tt>nextToken</tt> value returned from a previous paginated
--   <tt>DescribeRepositories</tt> request where <tt>maxResults</tt> was
--   used and the results exceeded the value of that parameter. Pagination
--   continues from the end of the previous results that returned the
--   <tt>nextToken</tt> value. This value is <tt>null</tt> when there are
--   no more results to return. This option cannot be used when you specify
--   repositories with <tt>repositoryNames</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
[$sel:nextToken:DescribeRepositories'] :: DescribeRepositories -> Maybe Text

-- | A list of repositories to describe. If this parameter is omitted, then
--   all repositories in a registry are described.
[$sel:repositoryNames:DescribeRepositories'] :: DescribeRepositories -> Maybe (NonEmpty Text)

-- | The maximum number of repository results returned by
--   <tt>DescribeRepositories</tt> in paginated output. When this parameter
--   is used, <tt>DescribeRepositories</tt> only returns
--   <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt> response element. The remaining results of the
--   initial request can be seen by sending another
--   <tt>DescribeRepositories</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 1000. If
--   this parameter is not used, then <tt>DescribeRepositories</tt> returns
--   up to 100 results and a <tt>nextToken</tt> value, if applicable. This
--   option cannot be used when you specify repositories with
--   <tt>repositoryNames</tt>.
[$sel:maxResults:DescribeRepositories'] :: DescribeRepositories -> Maybe Natural

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repositories to be described. If you do not specify a
--   registry, the default registry is assumed.
[$sel:registryId:DescribeRepositories'] :: DescribeRepositories -> Maybe Text

-- | Create a value of <a>DescribeRepositories</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:DescribeRepositories'</a>,
--   <a>describeRepositories_nextToken</a> - The <tt>nextToken</tt> value
--   returned from a previous paginated <tt>DescribeRepositories</tt>
--   request where <tt>maxResults</tt> was used and the results exceeded
--   the value of that parameter. Pagination continues from the end of the
--   previous results that returned the <tt>nextToken</tt> value. This
--   value is <tt>null</tt> when there are no more results to return. This
--   option cannot be used when you specify repositories with
--   <tt>repositoryNames</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
--   
--   <a>$sel:repositoryNames:DescribeRepositories'</a>,
--   <a>describeRepositories_repositoryNames</a> - A list of repositories
--   to describe. If this parameter is omitted, then all repositories in a
--   registry are described.
--   
--   <a>$sel:maxResults:DescribeRepositories'</a>,
--   <a>describeRepositories_maxResults</a> - The maximum number of
--   repository results returned by <tt>DescribeRepositories</tt> in
--   paginated output. When this parameter is used,
--   <tt>DescribeRepositories</tt> only returns <tt>maxResults</tt> results
--   in a single page along with a <tt>nextToken</tt> response element. The
--   remaining results of the initial request can be seen by sending
--   another <tt>DescribeRepositories</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 1000. If
--   this parameter is not used, then <tt>DescribeRepositories</tt> returns
--   up to 100 results and a <tt>nextToken</tt> value, if applicable. This
--   option cannot be used when you specify repositories with
--   <tt>repositoryNames</tt>.
--   
--   <a>$sel:registryId:DescribeRepositories'</a>,
--   <a>describeRepositories_registryId</a> - The Amazon Web Services
--   account ID associated with the registry that contains the repositories
--   to be described. If you do not specify a registry, the default
--   registry is assumed.
newDescribeRepositories :: DescribeRepositories

-- | The <tt>nextToken</tt> value returned from a previous paginated
--   <tt>DescribeRepositories</tt> request where <tt>maxResults</tt> was
--   used and the results exceeded the value of that parameter. Pagination
--   continues from the end of the previous results that returned the
--   <tt>nextToken</tt> value. This value is <tt>null</tt> when there are
--   no more results to return. This option cannot be used when you specify
--   repositories with <tt>repositoryNames</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
describeRepositories_nextToken :: Lens' DescribeRepositories (Maybe Text)

-- | A list of repositories to describe. If this parameter is omitted, then
--   all repositories in a registry are described.
describeRepositories_repositoryNames :: Lens' DescribeRepositories (Maybe (NonEmpty Text))

-- | The maximum number of repository results returned by
--   <tt>DescribeRepositories</tt> in paginated output. When this parameter
--   is used, <tt>DescribeRepositories</tt> only returns
--   <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt> response element. The remaining results of the
--   initial request can be seen by sending another
--   <tt>DescribeRepositories</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 1000. If
--   this parameter is not used, then <tt>DescribeRepositories</tt> returns
--   up to 100 results and a <tt>nextToken</tt> value, if applicable. This
--   option cannot be used when you specify repositories with
--   <tt>repositoryNames</tt>.
describeRepositories_maxResults :: Lens' DescribeRepositories (Maybe Natural)

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repositories to be described. If you do not specify a
--   registry, the default registry is assumed.
describeRepositories_registryId :: Lens' DescribeRepositories (Maybe Text)

-- | <i>See:</i> <a>newDescribeRepositoriesResponse</a> smart constructor.
data DescribeRepositoriesResponse
DescribeRepositoriesResponse' :: Maybe Text -> Maybe [Repository] -> Int -> DescribeRepositoriesResponse

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>DescribeRepositories</tt> request. When the results of a
--   <tt>DescribeRepositories</tt> request exceed <tt>maxResults</tt>, this
--   value can be used to retrieve the next page of results. This value is
--   <tt>null</tt> when there are no more results to return.
[$sel:nextToken:DescribeRepositoriesResponse'] :: DescribeRepositoriesResponse -> Maybe Text

-- | A list of repository objects corresponding to valid repositories.
[$sel:repositories:DescribeRepositoriesResponse'] :: DescribeRepositoriesResponse -> Maybe [Repository]

-- | The response's http status code.
[$sel:httpStatus:DescribeRepositoriesResponse'] :: DescribeRepositoriesResponse -> Int

-- | Create a value of <a>DescribeRepositoriesResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:DescribeRepositories'</a>,
--   <a>describeRepositoriesResponse_nextToken</a> - The <tt>nextToken</tt>
--   value to include in a future <tt>DescribeRepositories</tt> request.
--   When the results of a <tt>DescribeRepositories</tt> request exceed
--   <tt>maxResults</tt>, this value can be used to retrieve the next page
--   of results. This value is <tt>null</tt> when there are no more results
--   to return.
--   
--   <a>$sel:repositories:DescribeRepositoriesResponse'</a>,
--   <a>describeRepositoriesResponse_repositories</a> - A list of
--   repository objects corresponding to valid repositories.
--   
--   <a>$sel:httpStatus:DescribeRepositoriesResponse'</a>,
--   <a>describeRepositoriesResponse_httpStatus</a> - The response's http
--   status code.
newDescribeRepositoriesResponse :: Int -> DescribeRepositoriesResponse

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>DescribeRepositories</tt> request. When the results of a
--   <tt>DescribeRepositories</tt> request exceed <tt>maxResults</tt>, this
--   value can be used to retrieve the next page of results. This value is
--   <tt>null</tt> when there are no more results to return.
describeRepositoriesResponse_nextToken :: Lens' DescribeRepositoriesResponse (Maybe Text)

-- | A list of repository objects corresponding to valid repositories.
describeRepositoriesResponse_repositories :: Lens' DescribeRepositoriesResponse (Maybe [Repository])

-- | The response's http status code.
describeRepositoriesResponse_httpStatus :: Lens' DescribeRepositoriesResponse Int
instance GHC.Generics.Generic Network.AWS.ECR.DescribeRepositories.DescribeRepositories
instance GHC.Show.Show Network.AWS.ECR.DescribeRepositories.DescribeRepositories
instance GHC.Read.Read Network.AWS.ECR.DescribeRepositories.DescribeRepositories
instance GHC.Classes.Eq Network.AWS.ECR.DescribeRepositories.DescribeRepositories
instance GHC.Generics.Generic Network.AWS.ECR.DescribeRepositories.DescribeRepositoriesResponse
instance GHC.Show.Show Network.AWS.ECR.DescribeRepositories.DescribeRepositoriesResponse
instance GHC.Read.Read Network.AWS.ECR.DescribeRepositories.DescribeRepositoriesResponse
instance GHC.Classes.Eq Network.AWS.ECR.DescribeRepositories.DescribeRepositoriesResponse
instance Network.AWS.Types.AWSRequest Network.AWS.ECR.DescribeRepositories.DescribeRepositories
instance Control.DeepSeq.NFData Network.AWS.ECR.DescribeRepositories.DescribeRepositoriesResponse
instance Network.AWS.Pager.AWSPager Network.AWS.ECR.DescribeRepositories.DescribeRepositories
instance Data.Hashable.Class.Hashable Network.AWS.ECR.DescribeRepositories.DescribeRepositories
instance Control.DeepSeq.NFData Network.AWS.ECR.DescribeRepositories.DescribeRepositories
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.ECR.DescribeRepositories.DescribeRepositories
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.DescribeRepositories.DescribeRepositories
instance Network.AWS.Data.Path.ToPath Network.AWS.ECR.DescribeRepositories.DescribeRepositories
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.DescribeRepositories.DescribeRepositories


-- | Describes the settings for a registry. The replication configuration
--   for a repository can be created or updated with the
--   PutReplicationConfiguration API action.
module Network.AWS.ECR.DescribeRegistry

-- | <i>See:</i> <a>newDescribeRegistry</a> smart constructor.
data DescribeRegistry
DescribeRegistry' :: DescribeRegistry

-- | Create a value of <a>DescribeRegistry</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newDescribeRegistry :: DescribeRegistry

-- | <i>See:</i> <a>newDescribeRegistryResponse</a> smart constructor.
data DescribeRegistryResponse
DescribeRegistryResponse' :: Maybe ReplicationConfiguration -> Maybe Text -> Int -> DescribeRegistryResponse

-- | The replication configuration for the registry.
[$sel:replicationConfiguration:DescribeRegistryResponse'] :: DescribeRegistryResponse -> Maybe ReplicationConfiguration

-- | The ID of the registry.
[$sel:registryId:DescribeRegistryResponse'] :: DescribeRegistryResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:DescribeRegistryResponse'] :: DescribeRegistryResponse -> Int

-- | Create a value of <a>DescribeRegistryResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:replicationConfiguration:DescribeRegistryResponse'</a>,
--   <a>describeRegistryResponse_replicationConfiguration</a> - The
--   replication configuration for the registry.
--   
--   <a>$sel:registryId:DescribeRegistryResponse'</a>,
--   <a>describeRegistryResponse_registryId</a> - The ID of the registry.
--   
--   <a>$sel:httpStatus:DescribeRegistryResponse'</a>,
--   <a>describeRegistryResponse_httpStatus</a> - The response's http
--   status code.
newDescribeRegistryResponse :: Int -> DescribeRegistryResponse

-- | The replication configuration for the registry.
describeRegistryResponse_replicationConfiguration :: Lens' DescribeRegistryResponse (Maybe ReplicationConfiguration)

-- | The ID of the registry.
describeRegistryResponse_registryId :: Lens' DescribeRegistryResponse (Maybe Text)

-- | The response's http status code.
describeRegistryResponse_httpStatus :: Lens' DescribeRegistryResponse Int
instance GHC.Generics.Generic Network.AWS.ECR.DescribeRegistry.DescribeRegistry
instance GHC.Show.Show Network.AWS.ECR.DescribeRegistry.DescribeRegistry
instance GHC.Read.Read Network.AWS.ECR.DescribeRegistry.DescribeRegistry
instance GHC.Classes.Eq Network.AWS.ECR.DescribeRegistry.DescribeRegistry
instance GHC.Generics.Generic Network.AWS.ECR.DescribeRegistry.DescribeRegistryResponse
instance GHC.Show.Show Network.AWS.ECR.DescribeRegistry.DescribeRegistryResponse
instance GHC.Read.Read Network.AWS.ECR.DescribeRegistry.DescribeRegistryResponse
instance GHC.Classes.Eq Network.AWS.ECR.DescribeRegistry.DescribeRegistryResponse
instance Network.AWS.Types.AWSRequest Network.AWS.ECR.DescribeRegistry.DescribeRegistry
instance Control.DeepSeq.NFData Network.AWS.ECR.DescribeRegistry.DescribeRegistryResponse
instance Data.Hashable.Class.Hashable Network.AWS.ECR.DescribeRegistry.DescribeRegistry
instance Control.DeepSeq.NFData Network.AWS.ECR.DescribeRegistry.DescribeRegistry
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.ECR.DescribeRegistry.DescribeRegistry
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.DescribeRegistry.DescribeRegistry
instance Network.AWS.Data.Path.ToPath Network.AWS.ECR.DescribeRegistry.DescribeRegistry
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.DescribeRegistry.DescribeRegistry


-- | Returns metadata about the images in a repository.
--   
--   Beginning with Docker version 1.9, the Docker client compresses image
--   layers before pushing them to a V2 Docker registry. The output of the
--   <tt>docker images</tt> command shows the uncompressed image size, so
--   it may return a larger image size than the image sizes returned by
--   DescribeImages.
--   
--   This operation returns paginated results.
module Network.AWS.ECR.DescribeImages

-- | <i>See:</i> <a>newDescribeImages</a> smart constructor.
data DescribeImages
DescribeImages' :: Maybe Text -> Maybe [ImageIdentifier] -> Maybe Natural -> Maybe Text -> Maybe DescribeImagesFilter -> Text -> DescribeImages

-- | The <tt>nextToken</tt> value returned from a previous paginated
--   <tt>DescribeImages</tt> request where <tt>maxResults</tt> was used and
--   the results exceeded the value of that parameter. Pagination continues
--   from the end of the previous results that returned the
--   <tt>nextToken</tt> value. This value is <tt>null</tt> when there are
--   no more results to return. This option cannot be used when you specify
--   images with <tt>imageIds</tt>.
[$sel:nextToken:DescribeImages'] :: DescribeImages -> Maybe Text

-- | The list of image IDs for the requested repository.
[$sel:imageIds:DescribeImages'] :: DescribeImages -> Maybe [ImageIdentifier]

-- | The maximum number of repository results returned by
--   <tt>DescribeImages</tt> in paginated output. When this parameter is
--   used, <tt>DescribeImages</tt> only returns <tt>maxResults</tt> results
--   in a single page along with a <tt>nextToken</tt> response element. The
--   remaining results of the initial request can be seen by sending
--   another <tt>DescribeImages</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 1000. If
--   this parameter is not used, then <tt>DescribeImages</tt> returns up to
--   100 results and a <tt>nextToken</tt> value, if applicable. This option
--   cannot be used when you specify images with <tt>imageIds</tt>.
[$sel:maxResults:DescribeImages'] :: DescribeImages -> Maybe Natural

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository in which to describe images. If you do not
--   specify a registry, the default registry is assumed.
[$sel:registryId:DescribeImages'] :: DescribeImages -> Maybe Text

-- | The filter key and value with which to filter your
--   <tt>DescribeImages</tt> results.
[$sel:filter':DescribeImages'] :: DescribeImages -> Maybe DescribeImagesFilter

-- | The repository that contains the images to describe.
[$sel:repositoryName:DescribeImages'] :: DescribeImages -> Text

-- | Create a value of <a>DescribeImages</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:DescribeImages'</a>, <a>describeImages_nextToken</a>
--   - The <tt>nextToken</tt> value returned from a previous paginated
--   <tt>DescribeImages</tt> request where <tt>maxResults</tt> was used and
--   the results exceeded the value of that parameter. Pagination continues
--   from the end of the previous results that returned the
--   <tt>nextToken</tt> value. This value is <tt>null</tt> when there are
--   no more results to return. This option cannot be used when you specify
--   images with <tt>imageIds</tt>.
--   
--   <a>$sel:imageIds:DescribeImages'</a>, <a>describeImages_imageIds</a> -
--   The list of image IDs for the requested repository.
--   
--   <a>$sel:maxResults:DescribeImages'</a>,
--   <a>describeImages_maxResults</a> - The maximum number of repository
--   results returned by <tt>DescribeImages</tt> in paginated output. When
--   this parameter is used, <tt>DescribeImages</tt> only returns
--   <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt> response element. The remaining results of the
--   initial request can be seen by sending another <tt>DescribeImages</tt>
--   request with the returned <tt>nextToken</tt> value. This value can be
--   between 1 and 1000. If this parameter is not used, then
--   <tt>DescribeImages</tt> returns up to 100 results and a
--   <tt>nextToken</tt> value, if applicable. This option cannot be used
--   when you specify images with <tt>imageIds</tt>.
--   
--   <a>$sel:registryId:DescribeImages'</a>,
--   <a>describeImages_registryId</a> - The Amazon Web Services account ID
--   associated with the registry that contains the repository in which to
--   describe images. If you do not specify a registry, the default
--   registry is assumed.
--   
--   <a>$sel:filter':DescribeImages'</a>, <a>describeImages_filter</a> -
--   The filter key and value with which to filter your
--   <tt>DescribeImages</tt> results.
--   
--   <a>$sel:repositoryName:DescribeImages'</a>,
--   <a>describeImages_repositoryName</a> - The repository that contains
--   the images to describe.
newDescribeImages :: Text -> DescribeImages

-- | The <tt>nextToken</tt> value returned from a previous paginated
--   <tt>DescribeImages</tt> request where <tt>maxResults</tt> was used and
--   the results exceeded the value of that parameter. Pagination continues
--   from the end of the previous results that returned the
--   <tt>nextToken</tt> value. This value is <tt>null</tt> when there are
--   no more results to return. This option cannot be used when you specify
--   images with <tt>imageIds</tt>.
describeImages_nextToken :: Lens' DescribeImages (Maybe Text)

-- | The list of image IDs for the requested repository.
describeImages_imageIds :: Lens' DescribeImages (Maybe [ImageIdentifier])

-- | The maximum number of repository results returned by
--   <tt>DescribeImages</tt> in paginated output. When this parameter is
--   used, <tt>DescribeImages</tt> only returns <tt>maxResults</tt> results
--   in a single page along with a <tt>nextToken</tt> response element. The
--   remaining results of the initial request can be seen by sending
--   another <tt>DescribeImages</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 1000. If
--   this parameter is not used, then <tt>DescribeImages</tt> returns up to
--   100 results and a <tt>nextToken</tt> value, if applicable. This option
--   cannot be used when you specify images with <tt>imageIds</tt>.
describeImages_maxResults :: Lens' DescribeImages (Maybe Natural)

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository in which to describe images. If you do not
--   specify a registry, the default registry is assumed.
describeImages_registryId :: Lens' DescribeImages (Maybe Text)

-- | The filter key and value with which to filter your
--   <tt>DescribeImages</tt> results.
describeImages_filter :: Lens' DescribeImages (Maybe DescribeImagesFilter)

-- | The repository that contains the images to describe.
describeImages_repositoryName :: Lens' DescribeImages Text

-- | <i>See:</i> <a>newDescribeImagesResponse</a> smart constructor.
data DescribeImagesResponse
DescribeImagesResponse' :: Maybe Text -> Maybe [ImageDetail] -> Int -> DescribeImagesResponse

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>DescribeImages</tt> request. When the results of a
--   <tt>DescribeImages</tt> request exceed <tt>maxResults</tt>, this value
--   can be used to retrieve the next page of results. This value is
--   <tt>null</tt> when there are no more results to return.
[$sel:nextToken:DescribeImagesResponse'] :: DescribeImagesResponse -> Maybe Text

-- | A list of ImageDetail objects that contain data about the image.
[$sel:imageDetails:DescribeImagesResponse'] :: DescribeImagesResponse -> Maybe [ImageDetail]

-- | The response's http status code.
[$sel:httpStatus:DescribeImagesResponse'] :: DescribeImagesResponse -> Int

-- | Create a value of <a>DescribeImagesResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:DescribeImages'</a>,
--   <a>describeImagesResponse_nextToken</a> - The <tt>nextToken</tt> value
--   to include in a future <tt>DescribeImages</tt> request. When the
--   results of a <tt>DescribeImages</tt> request exceed
--   <tt>maxResults</tt>, this value can be used to retrieve the next page
--   of results. This value is <tt>null</tt> when there are no more results
--   to return.
--   
--   <a>$sel:imageDetails:DescribeImagesResponse'</a>,
--   <a>describeImagesResponse_imageDetails</a> - A list of ImageDetail
--   objects that contain data about the image.
--   
--   <a>$sel:httpStatus:DescribeImagesResponse'</a>,
--   <a>describeImagesResponse_httpStatus</a> - The response's http status
--   code.
newDescribeImagesResponse :: Int -> DescribeImagesResponse

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>DescribeImages</tt> request. When the results of a
--   <tt>DescribeImages</tt> request exceed <tt>maxResults</tt>, this value
--   can be used to retrieve the next page of results. This value is
--   <tt>null</tt> when there are no more results to return.
describeImagesResponse_nextToken :: Lens' DescribeImagesResponse (Maybe Text)

-- | A list of ImageDetail objects that contain data about the image.
describeImagesResponse_imageDetails :: Lens' DescribeImagesResponse (Maybe [ImageDetail])

-- | The response's http status code.
describeImagesResponse_httpStatus :: Lens' DescribeImagesResponse Int
instance GHC.Generics.Generic Network.AWS.ECR.DescribeImages.DescribeImages
instance GHC.Show.Show Network.AWS.ECR.DescribeImages.DescribeImages
instance GHC.Read.Read Network.AWS.ECR.DescribeImages.DescribeImages
instance GHC.Classes.Eq Network.AWS.ECR.DescribeImages.DescribeImages
instance GHC.Generics.Generic Network.AWS.ECR.DescribeImages.DescribeImagesResponse
instance GHC.Show.Show Network.AWS.ECR.DescribeImages.DescribeImagesResponse
instance GHC.Read.Read Network.AWS.ECR.DescribeImages.DescribeImagesResponse
instance GHC.Classes.Eq Network.AWS.ECR.DescribeImages.DescribeImagesResponse
instance Network.AWS.Types.AWSRequest Network.AWS.ECR.DescribeImages.DescribeImages
instance Control.DeepSeq.NFData Network.AWS.ECR.DescribeImages.DescribeImagesResponse
instance Network.AWS.Pager.AWSPager Network.AWS.ECR.DescribeImages.DescribeImages
instance Data.Hashable.Class.Hashable Network.AWS.ECR.DescribeImages.DescribeImages
instance Control.DeepSeq.NFData Network.AWS.ECR.DescribeImages.DescribeImages
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.ECR.DescribeImages.DescribeImages
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.DescribeImages.DescribeImages
instance Network.AWS.Data.Path.ToPath Network.AWS.ECR.DescribeImages.DescribeImages
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.DescribeImages.DescribeImages


-- | Returns the scan findings for the specified image.
--   
--   This operation returns paginated results.
module Network.AWS.ECR.DescribeImageScanFindings

-- | <i>See:</i> <a>newDescribeImageScanFindings</a> smart constructor.
data DescribeImageScanFindings
DescribeImageScanFindings' :: Maybe Text -> Maybe Natural -> Maybe Text -> Text -> ImageIdentifier -> DescribeImageScanFindings

-- | The <tt>nextToken</tt> value returned from a previous paginated
--   <tt>DescribeImageScanFindings</tt> request where <tt>maxResults</tt>
--   was used and the results exceeded the value of that parameter.
--   Pagination continues from the end of the previous results that
--   returned the <tt>nextToken</tt> value. This value is null when there
--   are no more results to return.
[$sel:nextToken:DescribeImageScanFindings'] :: DescribeImageScanFindings -> Maybe Text

-- | The maximum number of image scan results returned by
--   <tt>DescribeImageScanFindings</tt> in paginated output. When this
--   parameter is used, <tt>DescribeImageScanFindings</tt> only returns
--   <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt> response element. The remaining results of the
--   initial request can be seen by sending another
--   <tt>DescribeImageScanFindings</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 1000. If
--   this parameter is not used, then <tt>DescribeImageScanFindings</tt>
--   returns up to 100 results and a <tt>nextToken</tt> value, if
--   applicable.
[$sel:maxResults:DescribeImageScanFindings'] :: DescribeImageScanFindings -> Maybe Natural

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository in which to describe the image scan findings
--   for. If you do not specify a registry, the default registry is
--   assumed.
[$sel:registryId:DescribeImageScanFindings'] :: DescribeImageScanFindings -> Maybe Text

-- | The repository for the image for which to describe the scan findings.
[$sel:repositoryName:DescribeImageScanFindings'] :: DescribeImageScanFindings -> Text
[$sel:imageId:DescribeImageScanFindings'] :: DescribeImageScanFindings -> ImageIdentifier

-- | Create a value of <a>DescribeImageScanFindings</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:DescribeImageScanFindings'</a>,
--   <a>describeImageScanFindings_nextToken</a> - The <tt>nextToken</tt>
--   value returned from a previous paginated
--   <tt>DescribeImageScanFindings</tt> request where <tt>maxResults</tt>
--   was used and the results exceeded the value of that parameter.
--   Pagination continues from the end of the previous results that
--   returned the <tt>nextToken</tt> value. This value is null when there
--   are no more results to return.
--   
--   <a>$sel:maxResults:DescribeImageScanFindings'</a>,
--   <a>describeImageScanFindings_maxResults</a> - The maximum number of
--   image scan results returned by <tt>DescribeImageScanFindings</tt> in
--   paginated output. When this parameter is used,
--   <tt>DescribeImageScanFindings</tt> only returns <tt>maxResults</tt>
--   results in a single page along with a <tt>nextToken</tt> response
--   element. The remaining results of the initial request can be seen by
--   sending another <tt>DescribeImageScanFindings</tt> request with the
--   returned <tt>nextToken</tt> value. This value can be between 1 and
--   1000. If this parameter is not used, then
--   <tt>DescribeImageScanFindings</tt> returns up to 100 results and a
--   <tt>nextToken</tt> value, if applicable.
--   
--   <a>$sel:registryId:DescribeImageScanFindings'</a>,
--   <a>describeImageScanFindings_registryId</a> - The Amazon Web Services
--   account ID associated with the registry that contains the repository
--   in which to describe the image scan findings for. If you do not
--   specify a registry, the default registry is assumed.
--   
--   <a>$sel:repositoryName:DescribeImageScanFindings'</a>,
--   <a>describeImageScanFindings_repositoryName</a> - The repository for
--   the image for which to describe the scan findings.
--   
--   <a>$sel:imageId:DescribeImageScanFindings'</a>,
--   <a>describeImageScanFindings_imageId</a> - Undocumented member.
newDescribeImageScanFindings :: Text -> ImageIdentifier -> DescribeImageScanFindings

-- | The <tt>nextToken</tt> value returned from a previous paginated
--   <tt>DescribeImageScanFindings</tt> request where <tt>maxResults</tt>
--   was used and the results exceeded the value of that parameter.
--   Pagination continues from the end of the previous results that
--   returned the <tt>nextToken</tt> value. This value is null when there
--   are no more results to return.
describeImageScanFindings_nextToken :: Lens' DescribeImageScanFindings (Maybe Text)

-- | The maximum number of image scan results returned by
--   <tt>DescribeImageScanFindings</tt> in paginated output. When this
--   parameter is used, <tt>DescribeImageScanFindings</tt> only returns
--   <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt> response element. The remaining results of the
--   initial request can be seen by sending another
--   <tt>DescribeImageScanFindings</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 1000. If
--   this parameter is not used, then <tt>DescribeImageScanFindings</tt>
--   returns up to 100 results and a <tt>nextToken</tt> value, if
--   applicable.
describeImageScanFindings_maxResults :: Lens' DescribeImageScanFindings (Maybe Natural)

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository in which to describe the image scan findings
--   for. If you do not specify a registry, the default registry is
--   assumed.
describeImageScanFindings_registryId :: Lens' DescribeImageScanFindings (Maybe Text)

-- | The repository for the image for which to describe the scan findings.
describeImageScanFindings_repositoryName :: Lens' DescribeImageScanFindings Text

-- | Undocumented member.
describeImageScanFindings_imageId :: Lens' DescribeImageScanFindings ImageIdentifier

-- | <i>See:</i> <a>newDescribeImageScanFindingsResponse</a> smart
--   constructor.
data DescribeImageScanFindingsResponse
DescribeImageScanFindingsResponse' :: Maybe ImageScanStatus -> Maybe Text -> Maybe ImageScanFindings -> Maybe Text -> Maybe Text -> Maybe ImageIdentifier -> Int -> DescribeImageScanFindingsResponse

-- | The current state of the scan.
[$sel:imageScanStatus:DescribeImageScanFindingsResponse'] :: DescribeImageScanFindingsResponse -> Maybe ImageScanStatus

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>DescribeImageScanFindings</tt> request. When the results of a
--   <tt>DescribeImageScanFindings</tt> request exceed <tt>maxResults</tt>,
--   this value can be used to retrieve the next page of results. This
--   value is null when there are no more results to return.
[$sel:nextToken:DescribeImageScanFindingsResponse'] :: DescribeImageScanFindingsResponse -> Maybe Text

-- | The information contained in the image scan findings.
[$sel:imageScanFindings:DescribeImageScanFindingsResponse'] :: DescribeImageScanFindingsResponse -> Maybe ImageScanFindings

-- | The registry ID associated with the request.
[$sel:registryId:DescribeImageScanFindingsResponse'] :: DescribeImageScanFindingsResponse -> Maybe Text

-- | The repository name associated with the request.
[$sel:repositoryName:DescribeImageScanFindingsResponse'] :: DescribeImageScanFindingsResponse -> Maybe Text
[$sel:imageId:DescribeImageScanFindingsResponse'] :: DescribeImageScanFindingsResponse -> Maybe ImageIdentifier

-- | The response's http status code.
[$sel:httpStatus:DescribeImageScanFindingsResponse'] :: DescribeImageScanFindingsResponse -> Int

-- | Create a value of <a>DescribeImageScanFindingsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:imageScanStatus:DescribeImageScanFindingsResponse'</a>,
--   <a>describeImageScanFindingsResponse_imageScanStatus</a> - The current
--   state of the scan.
--   
--   <a>$sel:nextToken:DescribeImageScanFindings'</a>,
--   <a>describeImageScanFindingsResponse_nextToken</a> - The
--   <tt>nextToken</tt> value to include in a future
--   <tt>DescribeImageScanFindings</tt> request. When the results of a
--   <tt>DescribeImageScanFindings</tt> request exceed <tt>maxResults</tt>,
--   this value can be used to retrieve the next page of results. This
--   value is null when there are no more results to return.
--   
--   <a>$sel:imageScanFindings:DescribeImageScanFindingsResponse'</a>,
--   <a>describeImageScanFindingsResponse_imageScanFindings</a> - The
--   information contained in the image scan findings.
--   
--   <a>$sel:registryId:DescribeImageScanFindings'</a>,
--   <a>describeImageScanFindingsResponse_registryId</a> - The registry ID
--   associated with the request.
--   
--   <a>$sel:repositoryName:DescribeImageScanFindings'</a>,
--   <a>describeImageScanFindingsResponse_repositoryName</a> - The
--   repository name associated with the request.
--   
--   <a>$sel:imageId:DescribeImageScanFindings'</a>,
--   <a>describeImageScanFindingsResponse_imageId</a> - Undocumented
--   member.
--   
--   <a>$sel:httpStatus:DescribeImageScanFindingsResponse'</a>,
--   <a>describeImageScanFindingsResponse_httpStatus</a> - The response's
--   http status code.
newDescribeImageScanFindingsResponse :: Int -> DescribeImageScanFindingsResponse

-- | The current state of the scan.
describeImageScanFindingsResponse_imageScanStatus :: Lens' DescribeImageScanFindingsResponse (Maybe ImageScanStatus)

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>DescribeImageScanFindings</tt> request. When the results of a
--   <tt>DescribeImageScanFindings</tt> request exceed <tt>maxResults</tt>,
--   this value can be used to retrieve the next page of results. This
--   value is null when there are no more results to return.
describeImageScanFindingsResponse_nextToken :: Lens' DescribeImageScanFindingsResponse (Maybe Text)

-- | The information contained in the image scan findings.
describeImageScanFindingsResponse_imageScanFindings :: Lens' DescribeImageScanFindingsResponse (Maybe ImageScanFindings)

-- | The registry ID associated with the request.
describeImageScanFindingsResponse_registryId :: Lens' DescribeImageScanFindingsResponse (Maybe Text)

-- | The repository name associated with the request.
describeImageScanFindingsResponse_repositoryName :: Lens' DescribeImageScanFindingsResponse (Maybe Text)

-- | Undocumented member.
describeImageScanFindingsResponse_imageId :: Lens' DescribeImageScanFindingsResponse (Maybe ImageIdentifier)

-- | The response's http status code.
describeImageScanFindingsResponse_httpStatus :: Lens' DescribeImageScanFindingsResponse Int
instance GHC.Generics.Generic Network.AWS.ECR.DescribeImageScanFindings.DescribeImageScanFindings
instance GHC.Show.Show Network.AWS.ECR.DescribeImageScanFindings.DescribeImageScanFindings
instance GHC.Read.Read Network.AWS.ECR.DescribeImageScanFindings.DescribeImageScanFindings
instance GHC.Classes.Eq Network.AWS.ECR.DescribeImageScanFindings.DescribeImageScanFindings
instance GHC.Generics.Generic Network.AWS.ECR.DescribeImageScanFindings.DescribeImageScanFindingsResponse
instance GHC.Show.Show Network.AWS.ECR.DescribeImageScanFindings.DescribeImageScanFindingsResponse
instance GHC.Read.Read Network.AWS.ECR.DescribeImageScanFindings.DescribeImageScanFindingsResponse
instance GHC.Classes.Eq Network.AWS.ECR.DescribeImageScanFindings.DescribeImageScanFindingsResponse
instance Network.AWS.Types.AWSRequest Network.AWS.ECR.DescribeImageScanFindings.DescribeImageScanFindings
instance Control.DeepSeq.NFData Network.AWS.ECR.DescribeImageScanFindings.DescribeImageScanFindingsResponse
instance Network.AWS.Pager.AWSPager Network.AWS.ECR.DescribeImageScanFindings.DescribeImageScanFindings
instance Data.Hashable.Class.Hashable Network.AWS.ECR.DescribeImageScanFindings.DescribeImageScanFindings
instance Control.DeepSeq.NFData Network.AWS.ECR.DescribeImageScanFindings.DescribeImageScanFindings
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.ECR.DescribeImageScanFindings.DescribeImageScanFindings
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.DescribeImageScanFindings.DescribeImageScanFindings
instance Network.AWS.Data.Path.ToPath Network.AWS.ECR.DescribeImageScanFindings.DescribeImageScanFindings
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.DescribeImageScanFindings.DescribeImageScanFindings


-- | Returns the replication status for a specified image.
module Network.AWS.ECR.DescribeImageReplicationStatus

-- | <i>See:</i> <a>newDescribeImageReplicationStatus</a> smart
--   constructor.
data DescribeImageReplicationStatus
DescribeImageReplicationStatus' :: Maybe Text -> Text -> ImageIdentifier -> DescribeImageReplicationStatus

-- | The Amazon Web Services account ID associated with the registry. If
--   you do not specify a registry, the default registry is assumed.
[$sel:registryId:DescribeImageReplicationStatus'] :: DescribeImageReplicationStatus -> Maybe Text

-- | The name of the repository that the image is in.
[$sel:repositoryName:DescribeImageReplicationStatus'] :: DescribeImageReplicationStatus -> Text
[$sel:imageId:DescribeImageReplicationStatus'] :: DescribeImageReplicationStatus -> ImageIdentifier

-- | Create a value of <a>DescribeImageReplicationStatus</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:DescribeImageReplicationStatus'</a>,
--   <a>describeImageReplicationStatus_registryId</a> - The Amazon Web
--   Services account ID associated with the registry. If you do not
--   specify a registry, the default registry is assumed.
--   
--   <a>$sel:repositoryName:DescribeImageReplicationStatus'</a>,
--   <a>describeImageReplicationStatus_repositoryName</a> - The name of the
--   repository that the image is in.
--   
--   <a>$sel:imageId:DescribeImageReplicationStatus'</a>,
--   <a>describeImageReplicationStatus_imageId</a> - Undocumented member.
newDescribeImageReplicationStatus :: Text -> ImageIdentifier -> DescribeImageReplicationStatus

-- | The Amazon Web Services account ID associated with the registry. If
--   you do not specify a registry, the default registry is assumed.
describeImageReplicationStatus_registryId :: Lens' DescribeImageReplicationStatus (Maybe Text)

-- | The name of the repository that the image is in.
describeImageReplicationStatus_repositoryName :: Lens' DescribeImageReplicationStatus Text

-- | Undocumented member.
describeImageReplicationStatus_imageId :: Lens' DescribeImageReplicationStatus ImageIdentifier

-- | <i>See:</i> <a>newDescribeImageReplicationStatusResponse</a> smart
--   constructor.
data DescribeImageReplicationStatusResponse
DescribeImageReplicationStatusResponse' :: Maybe Text -> Maybe ImageIdentifier -> Maybe [ImageReplicationStatus] -> Int -> DescribeImageReplicationStatusResponse

-- | The repository name associated with the request.
[$sel:repositoryName:DescribeImageReplicationStatusResponse'] :: DescribeImageReplicationStatusResponse -> Maybe Text
[$sel:imageId:DescribeImageReplicationStatusResponse'] :: DescribeImageReplicationStatusResponse -> Maybe ImageIdentifier

-- | The replication status details for the images in the specified
--   repository.
[$sel:replicationStatuses:DescribeImageReplicationStatusResponse'] :: DescribeImageReplicationStatusResponse -> Maybe [ImageReplicationStatus]

-- | The response's http status code.
[$sel:httpStatus:DescribeImageReplicationStatusResponse'] :: DescribeImageReplicationStatusResponse -> Int

-- | Create a value of <a>DescribeImageReplicationStatusResponse</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:repositoryName:DescribeImageReplicationStatus'</a>,
--   <a>describeImageReplicationStatusResponse_repositoryName</a> - The
--   repository name associated with the request.
--   
--   <a>$sel:imageId:DescribeImageReplicationStatus'</a>,
--   <a>describeImageReplicationStatusResponse_imageId</a> - Undocumented
--   member.
--   
--   
--   <a>$sel:replicationStatuses:DescribeImageReplicationStatusResponse'</a>,
--   <a>describeImageReplicationStatusResponse_replicationStatuses</a> -
--   The replication status details for the images in the specified
--   repository.
--   
--   <a>$sel:httpStatus:DescribeImageReplicationStatusResponse'</a>,
--   <a>describeImageReplicationStatusResponse_httpStatus</a> - The
--   response's http status code.
newDescribeImageReplicationStatusResponse :: Int -> DescribeImageReplicationStatusResponse

-- | The repository name associated with the request.
describeImageReplicationStatusResponse_repositoryName :: Lens' DescribeImageReplicationStatusResponse (Maybe Text)

-- | Undocumented member.
describeImageReplicationStatusResponse_imageId :: Lens' DescribeImageReplicationStatusResponse (Maybe ImageIdentifier)

-- | The replication status details for the images in the specified
--   repository.
describeImageReplicationStatusResponse_replicationStatuses :: Lens' DescribeImageReplicationStatusResponse (Maybe [ImageReplicationStatus])

-- | The response's http status code.
describeImageReplicationStatusResponse_httpStatus :: Lens' DescribeImageReplicationStatusResponse Int
instance GHC.Generics.Generic Network.AWS.ECR.DescribeImageReplicationStatus.DescribeImageReplicationStatus
instance GHC.Show.Show Network.AWS.ECR.DescribeImageReplicationStatus.DescribeImageReplicationStatus
instance GHC.Read.Read Network.AWS.ECR.DescribeImageReplicationStatus.DescribeImageReplicationStatus
instance GHC.Classes.Eq Network.AWS.ECR.DescribeImageReplicationStatus.DescribeImageReplicationStatus
instance GHC.Generics.Generic Network.AWS.ECR.DescribeImageReplicationStatus.DescribeImageReplicationStatusResponse
instance GHC.Show.Show Network.AWS.ECR.DescribeImageReplicationStatus.DescribeImageReplicationStatusResponse
instance GHC.Read.Read Network.AWS.ECR.DescribeImageReplicationStatus.DescribeImageReplicationStatusResponse
instance GHC.Classes.Eq Network.AWS.ECR.DescribeImageReplicationStatus.DescribeImageReplicationStatusResponse
instance Network.AWS.Types.AWSRequest Network.AWS.ECR.DescribeImageReplicationStatus.DescribeImageReplicationStatus
instance Control.DeepSeq.NFData Network.AWS.ECR.DescribeImageReplicationStatus.DescribeImageReplicationStatusResponse
instance Data.Hashable.Class.Hashable Network.AWS.ECR.DescribeImageReplicationStatus.DescribeImageReplicationStatus
instance Control.DeepSeq.NFData Network.AWS.ECR.DescribeImageReplicationStatus.DescribeImageReplicationStatus
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.ECR.DescribeImageReplicationStatus.DescribeImageReplicationStatus
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.DescribeImageReplicationStatus.DescribeImageReplicationStatus
instance Network.AWS.Data.Path.ToPath Network.AWS.ECR.DescribeImageReplicationStatus.DescribeImageReplicationStatus
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.DescribeImageReplicationStatus.DescribeImageReplicationStatus


-- | Deletes the repository policy associated with the specified
--   repository.
module Network.AWS.ECR.DeleteRepositoryPolicy

-- | <i>See:</i> <a>newDeleteRepositoryPolicy</a> smart constructor.
data DeleteRepositoryPolicy
DeleteRepositoryPolicy' :: Maybe Text -> Text -> DeleteRepositoryPolicy

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository policy to delete. If you do not specify a
--   registry, the default registry is assumed.
[$sel:registryId:DeleteRepositoryPolicy'] :: DeleteRepositoryPolicy -> Maybe Text

-- | The name of the repository that is associated with the repository
--   policy to delete.
[$sel:repositoryName:DeleteRepositoryPolicy'] :: DeleteRepositoryPolicy -> Text

-- | Create a value of <a>DeleteRepositoryPolicy</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:DeleteRepositoryPolicy'</a>,
--   <a>deleteRepositoryPolicy_registryId</a> - The Amazon Web Services
--   account ID associated with the registry that contains the repository
--   policy to delete. If you do not specify a registry, the default
--   registry is assumed.
--   
--   <a>$sel:repositoryName:DeleteRepositoryPolicy'</a>,
--   <a>deleteRepositoryPolicy_repositoryName</a> - The name of the
--   repository that is associated with the repository policy to delete.
newDeleteRepositoryPolicy :: Text -> DeleteRepositoryPolicy

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository policy to delete. If you do not specify a
--   registry, the default registry is assumed.
deleteRepositoryPolicy_registryId :: Lens' DeleteRepositoryPolicy (Maybe Text)

-- | The name of the repository that is associated with the repository
--   policy to delete.
deleteRepositoryPolicy_repositoryName :: Lens' DeleteRepositoryPolicy Text

-- | <i>See:</i> <a>newDeleteRepositoryPolicyResponse</a> smart
--   constructor.
data DeleteRepositoryPolicyResponse
DeleteRepositoryPolicyResponse' :: Maybe Text -> Maybe Text -> Maybe Text -> Int -> DeleteRepositoryPolicyResponse

-- | The registry ID associated with the request.
[$sel:registryId:DeleteRepositoryPolicyResponse'] :: DeleteRepositoryPolicyResponse -> Maybe Text

-- | The repository name associated with the request.
[$sel:repositoryName:DeleteRepositoryPolicyResponse'] :: DeleteRepositoryPolicyResponse -> Maybe Text

-- | The JSON repository policy that was deleted from the repository.
[$sel:policyText:DeleteRepositoryPolicyResponse'] :: DeleteRepositoryPolicyResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:DeleteRepositoryPolicyResponse'] :: DeleteRepositoryPolicyResponse -> Int

-- | Create a value of <a>DeleteRepositoryPolicyResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:DeleteRepositoryPolicy'</a>,
--   <a>deleteRepositoryPolicyResponse_registryId</a> - The registry ID
--   associated with the request.
--   
--   <a>$sel:repositoryName:DeleteRepositoryPolicy'</a>,
--   <a>deleteRepositoryPolicyResponse_repositoryName</a> - The repository
--   name associated with the request.
--   
--   <a>$sel:policyText:DeleteRepositoryPolicyResponse'</a>,
--   <a>deleteRepositoryPolicyResponse_policyText</a> - The JSON repository
--   policy that was deleted from the repository.
--   
--   <a>$sel:httpStatus:DeleteRepositoryPolicyResponse'</a>,
--   <a>deleteRepositoryPolicyResponse_httpStatus</a> - The response's http
--   status code.
newDeleteRepositoryPolicyResponse :: Int -> DeleteRepositoryPolicyResponse

-- | The registry ID associated with the request.
deleteRepositoryPolicyResponse_registryId :: Lens' DeleteRepositoryPolicyResponse (Maybe Text)

-- | The repository name associated with the request.
deleteRepositoryPolicyResponse_repositoryName :: Lens' DeleteRepositoryPolicyResponse (Maybe Text)

-- | The JSON repository policy that was deleted from the repository.
deleteRepositoryPolicyResponse_policyText :: Lens' DeleteRepositoryPolicyResponse (Maybe Text)

-- | The response's http status code.
deleteRepositoryPolicyResponse_httpStatus :: Lens' DeleteRepositoryPolicyResponse Int
instance GHC.Generics.Generic Network.AWS.ECR.DeleteRepositoryPolicy.DeleteRepositoryPolicy
instance GHC.Show.Show Network.AWS.ECR.DeleteRepositoryPolicy.DeleteRepositoryPolicy
instance GHC.Read.Read Network.AWS.ECR.DeleteRepositoryPolicy.DeleteRepositoryPolicy
instance GHC.Classes.Eq Network.AWS.ECR.DeleteRepositoryPolicy.DeleteRepositoryPolicy
instance GHC.Generics.Generic Network.AWS.ECR.DeleteRepositoryPolicy.DeleteRepositoryPolicyResponse
instance GHC.Show.Show Network.AWS.ECR.DeleteRepositoryPolicy.DeleteRepositoryPolicyResponse
instance GHC.Read.Read Network.AWS.ECR.DeleteRepositoryPolicy.DeleteRepositoryPolicyResponse
instance GHC.Classes.Eq Network.AWS.ECR.DeleteRepositoryPolicy.DeleteRepositoryPolicyResponse
instance Network.AWS.Types.AWSRequest Network.AWS.ECR.DeleteRepositoryPolicy.DeleteRepositoryPolicy
instance Control.DeepSeq.NFData Network.AWS.ECR.DeleteRepositoryPolicy.DeleteRepositoryPolicyResponse
instance Data.Hashable.Class.Hashable Network.AWS.ECR.DeleteRepositoryPolicy.DeleteRepositoryPolicy
instance Control.DeepSeq.NFData Network.AWS.ECR.DeleteRepositoryPolicy.DeleteRepositoryPolicy
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.ECR.DeleteRepositoryPolicy.DeleteRepositoryPolicy
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.DeleteRepositoryPolicy.DeleteRepositoryPolicy
instance Network.AWS.Data.Path.ToPath Network.AWS.ECR.DeleteRepositoryPolicy.DeleteRepositoryPolicy
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.DeleteRepositoryPolicy.DeleteRepositoryPolicy


-- | Deletes a repository. If the repository contains images, you must
--   either delete all images in the repository or use the <tt>force</tt>
--   option to delete the repository.
module Network.AWS.ECR.DeleteRepository

-- | <i>See:</i> <a>newDeleteRepository</a> smart constructor.
data DeleteRepository
DeleteRepository' :: Maybe Text -> Maybe Bool -> Text -> DeleteRepository

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository to delete. If you do not specify a registry,
--   the default registry is assumed.
[$sel:registryId:DeleteRepository'] :: DeleteRepository -> Maybe Text

-- | If a repository contains images, forces the deletion.
[$sel:force:DeleteRepository'] :: DeleteRepository -> Maybe Bool

-- | The name of the repository to delete.
[$sel:repositoryName:DeleteRepository'] :: DeleteRepository -> Text

-- | Create a value of <a>DeleteRepository</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:DeleteRepository'</a>,
--   <a>deleteRepository_registryId</a> - The Amazon Web Services account
--   ID associated with the registry that contains the repository to
--   delete. If you do not specify a registry, the default registry is
--   assumed.
--   
--   <a>$sel:force:DeleteRepository'</a>, <a>deleteRepository_force</a> -
--   If a repository contains images, forces the deletion.
--   
--   <a>$sel:repositoryName:DeleteRepository'</a>,
--   <a>deleteRepository_repositoryName</a> - The name of the repository to
--   delete.
newDeleteRepository :: Text -> DeleteRepository

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository to delete. If you do not specify a registry,
--   the default registry is assumed.
deleteRepository_registryId :: Lens' DeleteRepository (Maybe Text)

-- | If a repository contains images, forces the deletion.
deleteRepository_force :: Lens' DeleteRepository (Maybe Bool)

-- | The name of the repository to delete.
deleteRepository_repositoryName :: Lens' DeleteRepository Text

-- | <i>See:</i> <a>newDeleteRepositoryResponse</a> smart constructor.
data DeleteRepositoryResponse
DeleteRepositoryResponse' :: Maybe Repository -> Int -> DeleteRepositoryResponse

-- | The repository that was deleted.
[$sel:repository:DeleteRepositoryResponse'] :: DeleteRepositoryResponse -> Maybe Repository

-- | The response's http status code.
[$sel:httpStatus:DeleteRepositoryResponse'] :: DeleteRepositoryResponse -> Int

-- | Create a value of <a>DeleteRepositoryResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:repository:DeleteRepositoryResponse'</a>,
--   <a>deleteRepositoryResponse_repository</a> - The repository that was
--   deleted.
--   
--   <a>$sel:httpStatus:DeleteRepositoryResponse'</a>,
--   <a>deleteRepositoryResponse_httpStatus</a> - The response's http
--   status code.
newDeleteRepositoryResponse :: Int -> DeleteRepositoryResponse

-- | The repository that was deleted.
deleteRepositoryResponse_repository :: Lens' DeleteRepositoryResponse (Maybe Repository)

-- | The response's http status code.
deleteRepositoryResponse_httpStatus :: Lens' DeleteRepositoryResponse Int
instance GHC.Generics.Generic Network.AWS.ECR.DeleteRepository.DeleteRepository
instance GHC.Show.Show Network.AWS.ECR.DeleteRepository.DeleteRepository
instance GHC.Read.Read Network.AWS.ECR.DeleteRepository.DeleteRepository
instance GHC.Classes.Eq Network.AWS.ECR.DeleteRepository.DeleteRepository
instance GHC.Generics.Generic Network.AWS.ECR.DeleteRepository.DeleteRepositoryResponse
instance GHC.Show.Show Network.AWS.ECR.DeleteRepository.DeleteRepositoryResponse
instance GHC.Read.Read Network.AWS.ECR.DeleteRepository.DeleteRepositoryResponse
instance GHC.Classes.Eq Network.AWS.ECR.DeleteRepository.DeleteRepositoryResponse
instance Network.AWS.Types.AWSRequest Network.AWS.ECR.DeleteRepository.DeleteRepository
instance Control.DeepSeq.NFData Network.AWS.ECR.DeleteRepository.DeleteRepositoryResponse
instance Data.Hashable.Class.Hashable Network.AWS.ECR.DeleteRepository.DeleteRepository
instance Control.DeepSeq.NFData Network.AWS.ECR.DeleteRepository.DeleteRepository
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.ECR.DeleteRepository.DeleteRepository
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.DeleteRepository.DeleteRepository
instance Network.AWS.Data.Path.ToPath Network.AWS.ECR.DeleteRepository.DeleteRepository
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.DeleteRepository.DeleteRepository


-- | Deletes the registry permissions policy.
module Network.AWS.ECR.DeleteRegistryPolicy

-- | <i>See:</i> <a>newDeleteRegistryPolicy</a> smart constructor.
data DeleteRegistryPolicy
DeleteRegistryPolicy' :: DeleteRegistryPolicy

-- | Create a value of <a>DeleteRegistryPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newDeleteRegistryPolicy :: DeleteRegistryPolicy

-- | <i>See:</i> <a>newDeleteRegistryPolicyResponse</a> smart constructor.
data DeleteRegistryPolicyResponse
DeleteRegistryPolicyResponse' :: Maybe Text -> Maybe Text -> Int -> DeleteRegistryPolicyResponse

-- | The registry ID associated with the request.
[$sel:registryId:DeleteRegistryPolicyResponse'] :: DeleteRegistryPolicyResponse -> Maybe Text

-- | The contents of the registry permissions policy that was deleted.
[$sel:policyText:DeleteRegistryPolicyResponse'] :: DeleteRegistryPolicyResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:DeleteRegistryPolicyResponse'] :: DeleteRegistryPolicyResponse -> Int

-- | Create a value of <a>DeleteRegistryPolicyResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:DeleteRegistryPolicyResponse'</a>,
--   <a>deleteRegistryPolicyResponse_registryId</a> - The registry ID
--   associated with the request.
--   
--   <a>$sel:policyText:DeleteRegistryPolicyResponse'</a>,
--   <a>deleteRegistryPolicyResponse_policyText</a> - The contents of the
--   registry permissions policy that was deleted.
--   
--   <a>$sel:httpStatus:DeleteRegistryPolicyResponse'</a>,
--   <a>deleteRegistryPolicyResponse_httpStatus</a> - The response's http
--   status code.
newDeleteRegistryPolicyResponse :: Int -> DeleteRegistryPolicyResponse

-- | The registry ID associated with the request.
deleteRegistryPolicyResponse_registryId :: Lens' DeleteRegistryPolicyResponse (Maybe Text)

-- | The contents of the registry permissions policy that was deleted.
deleteRegistryPolicyResponse_policyText :: Lens' DeleteRegistryPolicyResponse (Maybe Text)

-- | The response's http status code.
deleteRegistryPolicyResponse_httpStatus :: Lens' DeleteRegistryPolicyResponse Int
instance GHC.Generics.Generic Network.AWS.ECR.DeleteRegistryPolicy.DeleteRegistryPolicy
instance GHC.Show.Show Network.AWS.ECR.DeleteRegistryPolicy.DeleteRegistryPolicy
instance GHC.Read.Read Network.AWS.ECR.DeleteRegistryPolicy.DeleteRegistryPolicy
instance GHC.Classes.Eq Network.AWS.ECR.DeleteRegistryPolicy.DeleteRegistryPolicy
instance GHC.Generics.Generic Network.AWS.ECR.DeleteRegistryPolicy.DeleteRegistryPolicyResponse
instance GHC.Show.Show Network.AWS.ECR.DeleteRegistryPolicy.DeleteRegistryPolicyResponse
instance GHC.Read.Read Network.AWS.ECR.DeleteRegistryPolicy.DeleteRegistryPolicyResponse
instance GHC.Classes.Eq Network.AWS.ECR.DeleteRegistryPolicy.DeleteRegistryPolicyResponse
instance Network.AWS.Types.AWSRequest Network.AWS.ECR.DeleteRegistryPolicy.DeleteRegistryPolicy
instance Control.DeepSeq.NFData Network.AWS.ECR.DeleteRegistryPolicy.DeleteRegistryPolicyResponse
instance Data.Hashable.Class.Hashable Network.AWS.ECR.DeleteRegistryPolicy.DeleteRegistryPolicy
instance Control.DeepSeq.NFData Network.AWS.ECR.DeleteRegistryPolicy.DeleteRegistryPolicy
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.ECR.DeleteRegistryPolicy.DeleteRegistryPolicy
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.DeleteRegistryPolicy.DeleteRegistryPolicy
instance Network.AWS.Data.Path.ToPath Network.AWS.ECR.DeleteRegistryPolicy.DeleteRegistryPolicy
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.DeleteRegistryPolicy.DeleteRegistryPolicy


-- | Deletes the lifecycle policy associated with the specified repository.
module Network.AWS.ECR.DeleteLifecyclePolicy

-- | <i>See:</i> <a>newDeleteLifecyclePolicy</a> smart constructor.
data DeleteLifecyclePolicy
DeleteLifecyclePolicy' :: Maybe Text -> Text -> DeleteLifecyclePolicy

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository. If you do not specify a registry, the default
--   registry is assumed.
[$sel:registryId:DeleteLifecyclePolicy'] :: DeleteLifecyclePolicy -> Maybe Text

-- | The name of the repository.
[$sel:repositoryName:DeleteLifecyclePolicy'] :: DeleteLifecyclePolicy -> Text

-- | Create a value of <a>DeleteLifecyclePolicy</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:DeleteLifecyclePolicy'</a>,
--   <a>deleteLifecyclePolicy_registryId</a> - The Amazon Web Services
--   account ID associated with the registry that contains the repository.
--   If you do not specify a registry, the default registry is assumed.
--   
--   <a>$sel:repositoryName:DeleteLifecyclePolicy'</a>,
--   <a>deleteLifecyclePolicy_repositoryName</a> - The name of the
--   repository.
newDeleteLifecyclePolicy :: Text -> DeleteLifecyclePolicy

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository. If you do not specify a registry, the default
--   registry is assumed.
deleteLifecyclePolicy_registryId :: Lens' DeleteLifecyclePolicy (Maybe Text)

-- | The name of the repository.
deleteLifecyclePolicy_repositoryName :: Lens' DeleteLifecyclePolicy Text

-- | <i>See:</i> <a>newDeleteLifecyclePolicyResponse</a> smart constructor.
data DeleteLifecyclePolicyResponse
DeleteLifecyclePolicyResponse' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe POSIX -> Int -> DeleteLifecyclePolicyResponse

-- | The registry ID associated with the request.
[$sel:registryId:DeleteLifecyclePolicyResponse'] :: DeleteLifecyclePolicyResponse -> Maybe Text

-- | The repository name associated with the request.
[$sel:repositoryName:DeleteLifecyclePolicyResponse'] :: DeleteLifecyclePolicyResponse -> Maybe Text

-- | The JSON lifecycle policy text.
[$sel:lifecyclePolicyText:DeleteLifecyclePolicyResponse'] :: DeleteLifecyclePolicyResponse -> Maybe Text

-- | The time stamp of the last time that the lifecycle policy was run.
[$sel:lastEvaluatedAt:DeleteLifecyclePolicyResponse'] :: DeleteLifecyclePolicyResponse -> Maybe POSIX

-- | The response's http status code.
[$sel:httpStatus:DeleteLifecyclePolicyResponse'] :: DeleteLifecyclePolicyResponse -> Int

-- | Create a value of <a>DeleteLifecyclePolicyResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:DeleteLifecyclePolicy'</a>,
--   <a>deleteLifecyclePolicyResponse_registryId</a> - The registry ID
--   associated with the request.
--   
--   <a>$sel:repositoryName:DeleteLifecyclePolicy'</a>,
--   <a>deleteLifecyclePolicyResponse_repositoryName</a> - The repository
--   name associated with the request.
--   
--   <a>$sel:lifecyclePolicyText:DeleteLifecyclePolicyResponse'</a>,
--   <a>deleteLifecyclePolicyResponse_lifecyclePolicyText</a> - The JSON
--   lifecycle policy text.
--   
--   <a>$sel:lastEvaluatedAt:DeleteLifecyclePolicyResponse'</a>,
--   <a>deleteLifecyclePolicyResponse_lastEvaluatedAt</a> - The time stamp
--   of the last time that the lifecycle policy was run.
--   
--   <a>$sel:httpStatus:DeleteLifecyclePolicyResponse'</a>,
--   <a>deleteLifecyclePolicyResponse_httpStatus</a> - The response's http
--   status code.
newDeleteLifecyclePolicyResponse :: Int -> DeleteLifecyclePolicyResponse

-- | The registry ID associated with the request.
deleteLifecyclePolicyResponse_registryId :: Lens' DeleteLifecyclePolicyResponse (Maybe Text)

-- | The repository name associated with the request.
deleteLifecyclePolicyResponse_repositoryName :: Lens' DeleteLifecyclePolicyResponse (Maybe Text)

-- | The JSON lifecycle policy text.
deleteLifecyclePolicyResponse_lifecyclePolicyText :: Lens' DeleteLifecyclePolicyResponse (Maybe Text)

-- | The time stamp of the last time that the lifecycle policy was run.
deleteLifecyclePolicyResponse_lastEvaluatedAt :: Lens' DeleteLifecyclePolicyResponse (Maybe UTCTime)

-- | The response's http status code.
deleteLifecyclePolicyResponse_httpStatus :: Lens' DeleteLifecyclePolicyResponse Int
instance GHC.Generics.Generic Network.AWS.ECR.DeleteLifecyclePolicy.DeleteLifecyclePolicy
instance GHC.Show.Show Network.AWS.ECR.DeleteLifecyclePolicy.DeleteLifecyclePolicy
instance GHC.Read.Read Network.AWS.ECR.DeleteLifecyclePolicy.DeleteLifecyclePolicy
instance GHC.Classes.Eq Network.AWS.ECR.DeleteLifecyclePolicy.DeleteLifecyclePolicy
instance GHC.Generics.Generic Network.AWS.ECR.DeleteLifecyclePolicy.DeleteLifecyclePolicyResponse
instance GHC.Show.Show Network.AWS.ECR.DeleteLifecyclePolicy.DeleteLifecyclePolicyResponse
instance GHC.Read.Read Network.AWS.ECR.DeleteLifecyclePolicy.DeleteLifecyclePolicyResponse
instance GHC.Classes.Eq Network.AWS.ECR.DeleteLifecyclePolicy.DeleteLifecyclePolicyResponse
instance Network.AWS.Types.AWSRequest Network.AWS.ECR.DeleteLifecyclePolicy.DeleteLifecyclePolicy
instance Control.DeepSeq.NFData Network.AWS.ECR.DeleteLifecyclePolicy.DeleteLifecyclePolicyResponse
instance Data.Hashable.Class.Hashable Network.AWS.ECR.DeleteLifecyclePolicy.DeleteLifecyclePolicy
instance Control.DeepSeq.NFData Network.AWS.ECR.DeleteLifecyclePolicy.DeleteLifecyclePolicy
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.ECR.DeleteLifecyclePolicy.DeleteLifecyclePolicy
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.DeleteLifecyclePolicy.DeleteLifecyclePolicy
instance Network.AWS.Data.Path.ToPath Network.AWS.ECR.DeleteLifecyclePolicy.DeleteLifecyclePolicy
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.DeleteLifecyclePolicy.DeleteLifecyclePolicy


-- | Creates a repository. For more information, see <a>Amazon ECR
--   repositories</a> in the <i>Amazon Elastic Container Registry User
--   Guide</i>.
module Network.AWS.ECR.CreateRepository

-- | <i>See:</i> <a>newCreateRepository</a> smart constructor.
data CreateRepository
CreateRepository' :: Maybe EncryptionConfiguration -> Maybe Text -> Maybe [Tag] -> Maybe ImageScanningConfiguration -> Maybe ImageTagMutability -> Text -> CreateRepository

-- | The encryption configuration for the repository. This determines how
--   the contents of your repository are encrypted at rest.
[$sel:encryptionConfiguration:CreateRepository'] :: CreateRepository -> Maybe EncryptionConfiguration

-- | The AWS account ID associated with the registry to create the
--   repository. If you do not specify a registry, the default registry is
--   assumed.
[$sel:registryId:CreateRepository'] :: CreateRepository -> Maybe Text

-- | The metadata that you apply to the repository to help you categorize
--   and organize them. Each tag consists of a key and an optional value,
--   both of which you define. Tag keys can have a maximum character length
--   of 128 characters, and tag values can have a maximum length of 256
--   characters.
[$sel:tags:CreateRepository'] :: CreateRepository -> Maybe [Tag]

-- | The image scanning configuration for the repository. This determines
--   whether images are scanned for known vulnerabilities after being
--   pushed to the repository.
[$sel:imageScanningConfiguration:CreateRepository'] :: CreateRepository -> Maybe ImageScanningConfiguration

-- | The tag mutability setting for the repository. If this parameter is
--   omitted, the default setting of <tt>MUTABLE</tt> will be used which
--   will allow image tags to be overwritten. If <tt>IMMUTABLE</tt> is
--   specified, all image tags within the repository will be immutable
--   which will prevent them from being overwritten.
[$sel:imageTagMutability:CreateRepository'] :: CreateRepository -> Maybe ImageTagMutability

-- | The name to use for the repository. The repository name may be
--   specified on its own (such as <tt>nginx-web-app</tt>) or it can be
--   prepended with a namespace to group the repository into a category
--   (such as <tt>project-a/nginx-web-app</tt>).
[$sel:repositoryName:CreateRepository'] :: CreateRepository -> Text

-- | Create a value of <a>CreateRepository</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:encryptionConfiguration:CreateRepository'</a>,
--   <a>createRepository_encryptionConfiguration</a> - The encryption
--   configuration for the repository. This determines how the contents of
--   your repository are encrypted at rest.
--   
--   <a>$sel:registryId:CreateRepository'</a>,
--   <a>createRepository_registryId</a> - The AWS account ID associated
--   with the registry to create the repository. If you do not specify a
--   registry, the default registry is assumed.
--   
--   <a>$sel:tags:CreateRepository'</a>, <a>createRepository_tags</a> - The
--   metadata that you apply to the repository to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define. Tag keys can have a maximum character length of
--   128 characters, and tag values can have a maximum length of 256
--   characters.
--   
--   <a>$sel:imageScanningConfiguration:CreateRepository'</a>,
--   <a>createRepository_imageScanningConfiguration</a> - The image
--   scanning configuration for the repository. This determines whether
--   images are scanned for known vulnerabilities after being pushed to the
--   repository.
--   
--   <a>$sel:imageTagMutability:CreateRepository'</a>,
--   <a>createRepository_imageTagMutability</a> - The tag mutability
--   setting for the repository. If this parameter is omitted, the default
--   setting of <tt>MUTABLE</tt> will be used which will allow image tags
--   to be overwritten. If <tt>IMMUTABLE</tt> is specified, all image tags
--   within the repository will be immutable which will prevent them from
--   being overwritten.
--   
--   <a>$sel:repositoryName:CreateRepository'</a>,
--   <a>createRepository_repositoryName</a> - The name to use for the
--   repository. The repository name may be specified on its own (such as
--   <tt>nginx-web-app</tt>) or it can be prepended with a namespace to
--   group the repository into a category (such as
--   <tt>project-a/nginx-web-app</tt>).
newCreateRepository :: Text -> CreateRepository

-- | The encryption configuration for the repository. This determines how
--   the contents of your repository are encrypted at rest.
createRepository_encryptionConfiguration :: Lens' CreateRepository (Maybe EncryptionConfiguration)

-- | The AWS account ID associated with the registry to create the
--   repository. If you do not specify a registry, the default registry is
--   assumed.
createRepository_registryId :: Lens' CreateRepository (Maybe Text)

-- | The metadata that you apply to the repository to help you categorize
--   and organize them. Each tag consists of a key and an optional value,
--   both of which you define. Tag keys can have a maximum character length
--   of 128 characters, and tag values can have a maximum length of 256
--   characters.
createRepository_tags :: Lens' CreateRepository (Maybe [Tag])

-- | The image scanning configuration for the repository. This determines
--   whether images are scanned for known vulnerabilities after being
--   pushed to the repository.
createRepository_imageScanningConfiguration :: Lens' CreateRepository (Maybe ImageScanningConfiguration)

-- | The tag mutability setting for the repository. If this parameter is
--   omitted, the default setting of <tt>MUTABLE</tt> will be used which
--   will allow image tags to be overwritten. If <tt>IMMUTABLE</tt> is
--   specified, all image tags within the repository will be immutable
--   which will prevent them from being overwritten.
createRepository_imageTagMutability :: Lens' CreateRepository (Maybe ImageTagMutability)

-- | The name to use for the repository. The repository name may be
--   specified on its own (such as <tt>nginx-web-app</tt>) or it can be
--   prepended with a namespace to group the repository into a category
--   (such as <tt>project-a/nginx-web-app</tt>).
createRepository_repositoryName :: Lens' CreateRepository Text

-- | <i>See:</i> <a>newCreateRepositoryResponse</a> smart constructor.
data CreateRepositoryResponse
CreateRepositoryResponse' :: Maybe Repository -> Int -> CreateRepositoryResponse

-- | The repository that was created.
[$sel:repository:CreateRepositoryResponse'] :: CreateRepositoryResponse -> Maybe Repository

-- | The response's http status code.
[$sel:httpStatus:CreateRepositoryResponse'] :: CreateRepositoryResponse -> Int

-- | Create a value of <a>CreateRepositoryResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:repository:CreateRepositoryResponse'</a>,
--   <a>createRepositoryResponse_repository</a> - The repository that was
--   created.
--   
--   <a>$sel:httpStatus:CreateRepositoryResponse'</a>,
--   <a>createRepositoryResponse_httpStatus</a> - The response's http
--   status code.
newCreateRepositoryResponse :: Int -> CreateRepositoryResponse

-- | The repository that was created.
createRepositoryResponse_repository :: Lens' CreateRepositoryResponse (Maybe Repository)

-- | The response's http status code.
createRepositoryResponse_httpStatus :: Lens' CreateRepositoryResponse Int
instance GHC.Generics.Generic Network.AWS.ECR.CreateRepository.CreateRepository
instance GHC.Show.Show Network.AWS.ECR.CreateRepository.CreateRepository
instance GHC.Read.Read Network.AWS.ECR.CreateRepository.CreateRepository
instance GHC.Classes.Eq Network.AWS.ECR.CreateRepository.CreateRepository
instance GHC.Generics.Generic Network.AWS.ECR.CreateRepository.CreateRepositoryResponse
instance GHC.Show.Show Network.AWS.ECR.CreateRepository.CreateRepositoryResponse
instance GHC.Read.Read Network.AWS.ECR.CreateRepository.CreateRepositoryResponse
instance GHC.Classes.Eq Network.AWS.ECR.CreateRepository.CreateRepositoryResponse
instance Network.AWS.Types.AWSRequest Network.AWS.ECR.CreateRepository.CreateRepository
instance Control.DeepSeq.NFData Network.AWS.ECR.CreateRepository.CreateRepositoryResponse
instance Data.Hashable.Class.Hashable Network.AWS.ECR.CreateRepository.CreateRepository
instance Control.DeepSeq.NFData Network.AWS.ECR.CreateRepository.CreateRepository
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.ECR.CreateRepository.CreateRepository
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.CreateRepository.CreateRepository
instance Network.AWS.Data.Path.ToPath Network.AWS.ECR.CreateRepository.CreateRepository
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.CreateRepository.CreateRepository


-- | Informs Amazon ECR that the image layer upload has completed for a
--   specified registry, repository name, and upload ID. You can optionally
--   provide a <tt>sha256</tt> digest of the image layer for data
--   validation purposes.
--   
--   When an image is pushed, the CompleteLayerUpload API is called once
--   per each new image layer to verify that the upload has completed.
--   
--   This operation is used by the Amazon ECR proxy and is not generally
--   used by customers for pulling and pushing images. In most cases, you
--   should use the <tt>docker</tt> CLI to pull, tag, and push images.
module Network.AWS.ECR.CompleteLayerUpload

-- | <i>See:</i> <a>newCompleteLayerUpload</a> smart constructor.
data CompleteLayerUpload
CompleteLayerUpload' :: Maybe Text -> Text -> Text -> NonEmpty Text -> CompleteLayerUpload

-- | The Amazon Web Services account ID associated with the registry to
--   which to upload layers. If you do not specify a registry, the default
--   registry is assumed.
[$sel:registryId:CompleteLayerUpload'] :: CompleteLayerUpload -> Maybe Text

-- | The name of the repository to associate with the image layer.
[$sel:repositoryName:CompleteLayerUpload'] :: CompleteLayerUpload -> Text

-- | The upload ID from a previous InitiateLayerUpload operation to
--   associate with the image layer.
[$sel:uploadId:CompleteLayerUpload'] :: CompleteLayerUpload -> Text

-- | The <tt>sha256</tt> digest of the image layer.
[$sel:layerDigests:CompleteLayerUpload'] :: CompleteLayerUpload -> NonEmpty Text

-- | Create a value of <a>CompleteLayerUpload</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:CompleteLayerUpload'</a>,
--   <a>completeLayerUpload_registryId</a> - The Amazon Web Services
--   account ID associated with the registry to which to upload layers. If
--   you do not specify a registry, the default registry is assumed.
--   
--   <a>$sel:repositoryName:CompleteLayerUpload'</a>,
--   <a>completeLayerUpload_repositoryName</a> - The name of the repository
--   to associate with the image layer.
--   
--   <a>$sel:uploadId:CompleteLayerUpload'</a>,
--   <a>completeLayerUpload_uploadId</a> - The upload ID from a previous
--   InitiateLayerUpload operation to associate with the image layer.
--   
--   <a>$sel:layerDigests:CompleteLayerUpload'</a>,
--   <a>completeLayerUpload_layerDigests</a> - The <tt>sha256</tt> digest
--   of the image layer.
newCompleteLayerUpload :: Text -> Text -> NonEmpty Text -> CompleteLayerUpload

-- | The Amazon Web Services account ID associated with the registry to
--   which to upload layers. If you do not specify a registry, the default
--   registry is assumed.
completeLayerUpload_registryId :: Lens' CompleteLayerUpload (Maybe Text)

-- | The name of the repository to associate with the image layer.
completeLayerUpload_repositoryName :: Lens' CompleteLayerUpload Text

-- | The upload ID from a previous InitiateLayerUpload operation to
--   associate with the image layer.
completeLayerUpload_uploadId :: Lens' CompleteLayerUpload Text

-- | The <tt>sha256</tt> digest of the image layer.
completeLayerUpload_layerDigests :: Lens' CompleteLayerUpload (NonEmpty Text)

-- | <i>See:</i> <a>newCompleteLayerUploadResponse</a> smart constructor.
data CompleteLayerUploadResponse
CompleteLayerUploadResponse' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Int -> CompleteLayerUploadResponse

-- | The upload ID associated with the layer.
[$sel:uploadId:CompleteLayerUploadResponse'] :: CompleteLayerUploadResponse -> Maybe Text

-- | The registry ID associated with the request.
[$sel:registryId:CompleteLayerUploadResponse'] :: CompleteLayerUploadResponse -> Maybe Text

-- | The repository name associated with the request.
[$sel:repositoryName:CompleteLayerUploadResponse'] :: CompleteLayerUploadResponse -> Maybe Text

-- | The <tt>sha256</tt> digest of the image layer.
[$sel:layerDigest:CompleteLayerUploadResponse'] :: CompleteLayerUploadResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:CompleteLayerUploadResponse'] :: CompleteLayerUploadResponse -> Int

-- | Create a value of <a>CompleteLayerUploadResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:uploadId:CompleteLayerUpload'</a>,
--   <a>completeLayerUploadResponse_uploadId</a> - The upload ID associated
--   with the layer.
--   
--   <a>$sel:registryId:CompleteLayerUpload'</a>,
--   <a>completeLayerUploadResponse_registryId</a> - The registry ID
--   associated with the request.
--   
--   <a>$sel:repositoryName:CompleteLayerUpload'</a>,
--   <a>completeLayerUploadResponse_repositoryName</a> - The repository
--   name associated with the request.
--   
--   <a>$sel:layerDigest:CompleteLayerUploadResponse'</a>,
--   <a>completeLayerUploadResponse_layerDigest</a> - The <tt>sha256</tt>
--   digest of the image layer.
--   
--   <a>$sel:httpStatus:CompleteLayerUploadResponse'</a>,
--   <a>completeLayerUploadResponse_httpStatus</a> - The response's http
--   status code.
newCompleteLayerUploadResponse :: Int -> CompleteLayerUploadResponse

-- | The upload ID associated with the layer.
completeLayerUploadResponse_uploadId :: Lens' CompleteLayerUploadResponse (Maybe Text)

-- | The registry ID associated with the request.
completeLayerUploadResponse_registryId :: Lens' CompleteLayerUploadResponse (Maybe Text)

-- | The repository name associated with the request.
completeLayerUploadResponse_repositoryName :: Lens' CompleteLayerUploadResponse (Maybe Text)

-- | The <tt>sha256</tt> digest of the image layer.
completeLayerUploadResponse_layerDigest :: Lens' CompleteLayerUploadResponse (Maybe Text)

-- | The response's http status code.
completeLayerUploadResponse_httpStatus :: Lens' CompleteLayerUploadResponse Int
instance GHC.Generics.Generic Network.AWS.ECR.CompleteLayerUpload.CompleteLayerUpload
instance GHC.Show.Show Network.AWS.ECR.CompleteLayerUpload.CompleteLayerUpload
instance GHC.Read.Read Network.AWS.ECR.CompleteLayerUpload.CompleteLayerUpload
instance GHC.Classes.Eq Network.AWS.ECR.CompleteLayerUpload.CompleteLayerUpload
instance GHC.Generics.Generic Network.AWS.ECR.CompleteLayerUpload.CompleteLayerUploadResponse
instance GHC.Show.Show Network.AWS.ECR.CompleteLayerUpload.CompleteLayerUploadResponse
instance GHC.Read.Read Network.AWS.ECR.CompleteLayerUpload.CompleteLayerUploadResponse
instance GHC.Classes.Eq Network.AWS.ECR.CompleteLayerUpload.CompleteLayerUploadResponse
instance Network.AWS.Types.AWSRequest Network.AWS.ECR.CompleteLayerUpload.CompleteLayerUpload
instance Control.DeepSeq.NFData Network.AWS.ECR.CompleteLayerUpload.CompleteLayerUploadResponse
instance Data.Hashable.Class.Hashable Network.AWS.ECR.CompleteLayerUpload.CompleteLayerUpload
instance Control.DeepSeq.NFData Network.AWS.ECR.CompleteLayerUpload.CompleteLayerUpload
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.ECR.CompleteLayerUpload.CompleteLayerUpload
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.CompleteLayerUpload.CompleteLayerUpload
instance Network.AWS.Data.Path.ToPath Network.AWS.ECR.CompleteLayerUpload.CompleteLayerUpload
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.CompleteLayerUpload.CompleteLayerUpload


-- | Gets detailed information for an image. Images are specified with
--   either an <tt>imageTag</tt> or <tt>imageDigest</tt>.
--   
--   When an image is pulled, the BatchGetImage API is called once to
--   retrieve the image manifest.
module Network.AWS.ECR.BatchGetImage

-- | <i>See:</i> <a>newBatchGetImage</a> smart constructor.
data BatchGetImage
BatchGetImage' :: Maybe (NonEmpty Text) -> Maybe Text -> Text -> [ImageIdentifier] -> BatchGetImage

-- | The accepted media types for the request.
--   
--   Valid values:
--   <tt>application/vnd.docker.distribution.manifest.v1+json</tt> |
--   <tt>application/vnd.docker.distribution.manifest.v2+json</tt> |
--   <tt>application/vnd.oci.image.manifest.v1+json</tt>
[$sel:acceptedMediaTypes:BatchGetImage'] :: BatchGetImage -> Maybe (NonEmpty Text)

-- | The Amazon Web Services account ID associated with the registry that
--   contains the images to describe. If you do not specify a registry, the
--   default registry is assumed.
[$sel:registryId:BatchGetImage'] :: BatchGetImage -> Maybe Text

-- | The repository that contains the images to describe.
[$sel:repositoryName:BatchGetImage'] :: BatchGetImage -> Text

-- | A list of image ID references that correspond to images to describe.
--   The format of the <tt>imageIds</tt> reference is <tt>imageTag=tag</tt>
--   or <tt>imageDigest=digest</tt>.
[$sel:imageIds:BatchGetImage'] :: BatchGetImage -> [ImageIdentifier]

-- | Create a value of <a>BatchGetImage</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:acceptedMediaTypes:BatchGetImage'</a>,
--   <a>batchGetImage_acceptedMediaTypes</a> - The accepted media types for
--   the request.
--   
--   Valid values:
--   <tt>application/vnd.docker.distribution.manifest.v1+json</tt> |
--   <tt>application/vnd.docker.distribution.manifest.v2+json</tt> |
--   <tt>application/vnd.oci.image.manifest.v1+json</tt>
--   
--   <a>$sel:registryId:BatchGetImage'</a>, <a>batchGetImage_registryId</a>
--   - The Amazon Web Services account ID associated with the registry that
--   contains the images to describe. If you do not specify a registry, the
--   default registry is assumed.
--   
--   <a>$sel:repositoryName:BatchGetImage'</a>,
--   <a>batchGetImage_repositoryName</a> - The repository that contains the
--   images to describe.
--   
--   <a>$sel:imageIds:BatchGetImage'</a>, <a>batchGetImage_imageIds</a> - A
--   list of image ID references that correspond to images to describe. The
--   format of the <tt>imageIds</tt> reference is <tt>imageTag=tag</tt> or
--   <tt>imageDigest=digest</tt>.
newBatchGetImage :: Text -> BatchGetImage

-- | The accepted media types for the request.
--   
--   Valid values:
--   <tt>application/vnd.docker.distribution.manifest.v1+json</tt> |
--   <tt>application/vnd.docker.distribution.manifest.v2+json</tt> |
--   <tt>application/vnd.oci.image.manifest.v1+json</tt>
batchGetImage_acceptedMediaTypes :: Lens' BatchGetImage (Maybe (NonEmpty Text))

-- | The Amazon Web Services account ID associated with the registry that
--   contains the images to describe. If you do not specify a registry, the
--   default registry is assumed.
batchGetImage_registryId :: Lens' BatchGetImage (Maybe Text)

-- | The repository that contains the images to describe.
batchGetImage_repositoryName :: Lens' BatchGetImage Text

-- | A list of image ID references that correspond to images to describe.
--   The format of the <tt>imageIds</tt> reference is <tt>imageTag=tag</tt>
--   or <tt>imageDigest=digest</tt>.
batchGetImage_imageIds :: Lens' BatchGetImage [ImageIdentifier]

-- | <i>See:</i> <a>newBatchGetImageResponse</a> smart constructor.
data BatchGetImageResponse
BatchGetImageResponse' :: Maybe [Image] -> Maybe [ImageFailure] -> Int -> BatchGetImageResponse

-- | A list of image objects corresponding to the image references in the
--   request.
[$sel:images:BatchGetImageResponse'] :: BatchGetImageResponse -> Maybe [Image]

-- | Any failures associated with the call.
[$sel:failures:BatchGetImageResponse'] :: BatchGetImageResponse -> Maybe [ImageFailure]

-- | The response's http status code.
[$sel:httpStatus:BatchGetImageResponse'] :: BatchGetImageResponse -> Int

-- | Create a value of <a>BatchGetImageResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:images:BatchGetImageResponse'</a>,
--   <a>batchGetImageResponse_images</a> - A list of image objects
--   corresponding to the image references in the request.
--   
--   <a>$sel:failures:BatchGetImageResponse'</a>,
--   <a>batchGetImageResponse_failures</a> - Any failures associated with
--   the call.
--   
--   <a>$sel:httpStatus:BatchGetImageResponse'</a>,
--   <a>batchGetImageResponse_httpStatus</a> - The response's http status
--   code.
newBatchGetImageResponse :: Int -> BatchGetImageResponse

-- | A list of image objects corresponding to the image references in the
--   request.
batchGetImageResponse_images :: Lens' BatchGetImageResponse (Maybe [Image])

-- | Any failures associated with the call.
batchGetImageResponse_failures :: Lens' BatchGetImageResponse (Maybe [ImageFailure])

-- | The response's http status code.
batchGetImageResponse_httpStatus :: Lens' BatchGetImageResponse Int
instance GHC.Generics.Generic Network.AWS.ECR.BatchGetImage.BatchGetImage
instance GHC.Show.Show Network.AWS.ECR.BatchGetImage.BatchGetImage
instance GHC.Read.Read Network.AWS.ECR.BatchGetImage.BatchGetImage
instance GHC.Classes.Eq Network.AWS.ECR.BatchGetImage.BatchGetImage
instance GHC.Generics.Generic Network.AWS.ECR.BatchGetImage.BatchGetImageResponse
instance GHC.Show.Show Network.AWS.ECR.BatchGetImage.BatchGetImageResponse
instance GHC.Read.Read Network.AWS.ECR.BatchGetImage.BatchGetImageResponse
instance GHC.Classes.Eq Network.AWS.ECR.BatchGetImage.BatchGetImageResponse
instance Network.AWS.Types.AWSRequest Network.AWS.ECR.BatchGetImage.BatchGetImage
instance Control.DeepSeq.NFData Network.AWS.ECR.BatchGetImage.BatchGetImageResponse
instance Data.Hashable.Class.Hashable Network.AWS.ECR.BatchGetImage.BatchGetImage
instance Control.DeepSeq.NFData Network.AWS.ECR.BatchGetImage.BatchGetImage
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.ECR.BatchGetImage.BatchGetImage
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.BatchGetImage.BatchGetImage
instance Network.AWS.Data.Path.ToPath Network.AWS.ECR.BatchGetImage.BatchGetImage
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.BatchGetImage.BatchGetImage


-- | Deletes a list of specified images within a repository. Images are
--   specified with either an <tt>imageTag</tt> or <tt>imageDigest</tt>.
--   
--   You can remove a tag from an image by specifying the image's tag in
--   your request. When you remove the last tag from an image, the image is
--   deleted from your repository.
--   
--   You can completely delete an image (and all of its tags) by specifying
--   the image's digest in your request.
module Network.AWS.ECR.BatchDeleteImage

-- | Deletes specified images within a specified repository. Images are
--   specified with either the <tt>imageTag</tt> or <tt>imageDigest</tt>.
--   
--   <i>See:</i> <a>newBatchDeleteImage</a> smart constructor.
data BatchDeleteImage
BatchDeleteImage' :: Maybe Text -> Text -> [ImageIdentifier] -> BatchDeleteImage

-- | The Amazon Web Services account ID associated with the registry that
--   contains the image to delete. If you do not specify a registry, the
--   default registry is assumed.
[$sel:registryId:BatchDeleteImage'] :: BatchDeleteImage -> Maybe Text

-- | The repository that contains the image to delete.
[$sel:repositoryName:BatchDeleteImage'] :: BatchDeleteImage -> Text

-- | A list of image ID references that correspond to images to delete. The
--   format of the <tt>imageIds</tt> reference is <tt>imageTag=tag</tt> or
--   <tt>imageDigest=digest</tt>.
[$sel:imageIds:BatchDeleteImage'] :: BatchDeleteImage -> [ImageIdentifier]

-- | Create a value of <a>BatchDeleteImage</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:BatchDeleteImage'</a>,
--   <a>batchDeleteImage_registryId</a> - The Amazon Web Services account
--   ID associated with the registry that contains the image to delete. If
--   you do not specify a registry, the default registry is assumed.
--   
--   <a>$sel:repositoryName:BatchDeleteImage'</a>,
--   <a>batchDeleteImage_repositoryName</a> - The repository that contains
--   the image to delete.
--   
--   <a>$sel:imageIds:BatchDeleteImage'</a>,
--   <a>batchDeleteImage_imageIds</a> - A list of image ID references that
--   correspond to images to delete. The format of the <tt>imageIds</tt>
--   reference is <tt>imageTag=tag</tt> or <tt>imageDigest=digest</tt>.
newBatchDeleteImage :: Text -> BatchDeleteImage

-- | The Amazon Web Services account ID associated with the registry that
--   contains the image to delete. If you do not specify a registry, the
--   default registry is assumed.
batchDeleteImage_registryId :: Lens' BatchDeleteImage (Maybe Text)

-- | The repository that contains the image to delete.
batchDeleteImage_repositoryName :: Lens' BatchDeleteImage Text

-- | A list of image ID references that correspond to images to delete. The
--   format of the <tt>imageIds</tt> reference is <tt>imageTag=tag</tt> or
--   <tt>imageDigest=digest</tt>.
batchDeleteImage_imageIds :: Lens' BatchDeleteImage [ImageIdentifier]

-- | <i>See:</i> <a>newBatchDeleteImageResponse</a> smart constructor.
data BatchDeleteImageResponse
BatchDeleteImageResponse' :: Maybe [ImageIdentifier] -> Maybe [ImageFailure] -> Int -> BatchDeleteImageResponse

-- | The image IDs of the deleted images.
[$sel:imageIds:BatchDeleteImageResponse'] :: BatchDeleteImageResponse -> Maybe [ImageIdentifier]

-- | Any failures associated with the call.
[$sel:failures:BatchDeleteImageResponse'] :: BatchDeleteImageResponse -> Maybe [ImageFailure]

-- | The response's http status code.
[$sel:httpStatus:BatchDeleteImageResponse'] :: BatchDeleteImageResponse -> Int

-- | Create a value of <a>BatchDeleteImageResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:imageIds:BatchDeleteImage'</a>,
--   <a>batchDeleteImageResponse_imageIds</a> - The image IDs of the
--   deleted images.
--   
--   <a>$sel:failures:BatchDeleteImageResponse'</a>,
--   <a>batchDeleteImageResponse_failures</a> - Any failures associated
--   with the call.
--   
--   <a>$sel:httpStatus:BatchDeleteImageResponse'</a>,
--   <a>batchDeleteImageResponse_httpStatus</a> - The response's http
--   status code.
newBatchDeleteImageResponse :: Int -> BatchDeleteImageResponse

-- | The image IDs of the deleted images.
batchDeleteImageResponse_imageIds :: Lens' BatchDeleteImageResponse (Maybe [ImageIdentifier])

-- | Any failures associated with the call.
batchDeleteImageResponse_failures :: Lens' BatchDeleteImageResponse (Maybe [ImageFailure])

-- | The response's http status code.
batchDeleteImageResponse_httpStatus :: Lens' BatchDeleteImageResponse Int
instance GHC.Generics.Generic Network.AWS.ECR.BatchDeleteImage.BatchDeleteImage
instance GHC.Show.Show Network.AWS.ECR.BatchDeleteImage.BatchDeleteImage
instance GHC.Read.Read Network.AWS.ECR.BatchDeleteImage.BatchDeleteImage
instance GHC.Classes.Eq Network.AWS.ECR.BatchDeleteImage.BatchDeleteImage
instance GHC.Generics.Generic Network.AWS.ECR.BatchDeleteImage.BatchDeleteImageResponse
instance GHC.Show.Show Network.AWS.ECR.BatchDeleteImage.BatchDeleteImageResponse
instance GHC.Read.Read Network.AWS.ECR.BatchDeleteImage.BatchDeleteImageResponse
instance GHC.Classes.Eq Network.AWS.ECR.BatchDeleteImage.BatchDeleteImageResponse
instance Network.AWS.Types.AWSRequest Network.AWS.ECR.BatchDeleteImage.BatchDeleteImage
instance Control.DeepSeq.NFData Network.AWS.ECR.BatchDeleteImage.BatchDeleteImageResponse
instance Data.Hashable.Class.Hashable Network.AWS.ECR.BatchDeleteImage.BatchDeleteImage
instance Control.DeepSeq.NFData Network.AWS.ECR.BatchDeleteImage.BatchDeleteImage
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.ECR.BatchDeleteImage.BatchDeleteImage
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.BatchDeleteImage.BatchDeleteImage
instance Network.AWS.Data.Path.ToPath Network.AWS.ECR.BatchDeleteImage.BatchDeleteImage
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.BatchDeleteImage.BatchDeleteImage


-- | Checks the availability of one or more image layers in a repository.
--   
--   When an image is pushed to a repository, each image layer is checked
--   to verify if it has been uploaded before. If it has been uploaded,
--   then the image layer is skipped.
--   
--   This operation is used by the Amazon ECR proxy and is not generally
--   used by customers for pulling and pushing images. In most cases, you
--   should use the <tt>docker</tt> CLI to pull, tag, and push images.
module Network.AWS.ECR.BatchCheckLayerAvailability

-- | <i>See:</i> <a>newBatchCheckLayerAvailability</a> smart constructor.
data BatchCheckLayerAvailability
BatchCheckLayerAvailability' :: Maybe Text -> Text -> NonEmpty Text -> BatchCheckLayerAvailability

-- | The Amazon Web Services account ID associated with the registry that
--   contains the image layers to check. If you do not specify a registry,
--   the default registry is assumed.
[$sel:registryId:BatchCheckLayerAvailability'] :: BatchCheckLayerAvailability -> Maybe Text

-- | The name of the repository that is associated with the image layers to
--   check.
[$sel:repositoryName:BatchCheckLayerAvailability'] :: BatchCheckLayerAvailability -> Text

-- | The digests of the image layers to check.
[$sel:layerDigests:BatchCheckLayerAvailability'] :: BatchCheckLayerAvailability -> NonEmpty Text

-- | Create a value of <a>BatchCheckLayerAvailability</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:BatchCheckLayerAvailability'</a>,
--   <a>batchCheckLayerAvailability_registryId</a> - The Amazon Web
--   Services account ID associated with the registry that contains the
--   image layers to check. If you do not specify a registry, the default
--   registry is assumed.
--   
--   <a>$sel:repositoryName:BatchCheckLayerAvailability'</a>,
--   <a>batchCheckLayerAvailability_repositoryName</a> - The name of the
--   repository that is associated with the image layers to check.
--   
--   <a>$sel:layerDigests:BatchCheckLayerAvailability'</a>,
--   <a>batchCheckLayerAvailability_layerDigests</a> - The digests of the
--   image layers to check.
newBatchCheckLayerAvailability :: Text -> NonEmpty Text -> BatchCheckLayerAvailability

-- | The Amazon Web Services account ID associated with the registry that
--   contains the image layers to check. If you do not specify a registry,
--   the default registry is assumed.
batchCheckLayerAvailability_registryId :: Lens' BatchCheckLayerAvailability (Maybe Text)

-- | The name of the repository that is associated with the image layers to
--   check.
batchCheckLayerAvailability_repositoryName :: Lens' BatchCheckLayerAvailability Text

-- | The digests of the image layers to check.
batchCheckLayerAvailability_layerDigests :: Lens' BatchCheckLayerAvailability (NonEmpty Text)

-- | <i>See:</i> <a>newBatchCheckLayerAvailabilityResponse</a> smart
--   constructor.
data BatchCheckLayerAvailabilityResponse
BatchCheckLayerAvailabilityResponse' :: Maybe [LayerFailure] -> Maybe [Layer] -> Int -> BatchCheckLayerAvailabilityResponse

-- | Any failures associated with the call.
[$sel:failures:BatchCheckLayerAvailabilityResponse'] :: BatchCheckLayerAvailabilityResponse -> Maybe [LayerFailure]

-- | A list of image layer objects corresponding to the image layer
--   references in the request.
[$sel:layers:BatchCheckLayerAvailabilityResponse'] :: BatchCheckLayerAvailabilityResponse -> Maybe [Layer]

-- | The response's http status code.
[$sel:httpStatus:BatchCheckLayerAvailabilityResponse'] :: BatchCheckLayerAvailabilityResponse -> Int

-- | Create a value of <a>BatchCheckLayerAvailabilityResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failures:BatchCheckLayerAvailabilityResponse'</a>,
--   <a>batchCheckLayerAvailabilityResponse_failures</a> - Any failures
--   associated with the call.
--   
--   <a>$sel:layers:BatchCheckLayerAvailabilityResponse'</a>,
--   <a>batchCheckLayerAvailabilityResponse_layers</a> - A list of image
--   layer objects corresponding to the image layer references in the
--   request.
--   
--   <a>$sel:httpStatus:BatchCheckLayerAvailabilityResponse'</a>,
--   <a>batchCheckLayerAvailabilityResponse_httpStatus</a> - The response's
--   http status code.
newBatchCheckLayerAvailabilityResponse :: Int -> BatchCheckLayerAvailabilityResponse

-- | Any failures associated with the call.
batchCheckLayerAvailabilityResponse_failures :: Lens' BatchCheckLayerAvailabilityResponse (Maybe [LayerFailure])

-- | A list of image layer objects corresponding to the image layer
--   references in the request.
batchCheckLayerAvailabilityResponse_layers :: Lens' BatchCheckLayerAvailabilityResponse (Maybe [Layer])

-- | The response's http status code.
batchCheckLayerAvailabilityResponse_httpStatus :: Lens' BatchCheckLayerAvailabilityResponse Int
instance GHC.Generics.Generic Network.AWS.ECR.BatchCheckLayerAvailability.BatchCheckLayerAvailability
instance GHC.Show.Show Network.AWS.ECR.BatchCheckLayerAvailability.BatchCheckLayerAvailability
instance GHC.Read.Read Network.AWS.ECR.BatchCheckLayerAvailability.BatchCheckLayerAvailability
instance GHC.Classes.Eq Network.AWS.ECR.BatchCheckLayerAvailability.BatchCheckLayerAvailability
instance GHC.Generics.Generic Network.AWS.ECR.BatchCheckLayerAvailability.BatchCheckLayerAvailabilityResponse
instance GHC.Show.Show Network.AWS.ECR.BatchCheckLayerAvailability.BatchCheckLayerAvailabilityResponse
instance GHC.Read.Read Network.AWS.ECR.BatchCheckLayerAvailability.BatchCheckLayerAvailabilityResponse
instance GHC.Classes.Eq Network.AWS.ECR.BatchCheckLayerAvailability.BatchCheckLayerAvailabilityResponse
instance Network.AWS.Types.AWSRequest Network.AWS.ECR.BatchCheckLayerAvailability.BatchCheckLayerAvailability
instance Control.DeepSeq.NFData Network.AWS.ECR.BatchCheckLayerAvailability.BatchCheckLayerAvailabilityResponse
instance Data.Hashable.Class.Hashable Network.AWS.ECR.BatchCheckLayerAvailability.BatchCheckLayerAvailability
instance Control.DeepSeq.NFData Network.AWS.ECR.BatchCheckLayerAvailability.BatchCheckLayerAvailability
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.ECR.BatchCheckLayerAvailability.BatchCheckLayerAvailability
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.BatchCheckLayerAvailability.BatchCheckLayerAvailability
instance Network.AWS.Data.Path.ToPath Network.AWS.ECR.BatchCheckLayerAvailability.BatchCheckLayerAvailability
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.BatchCheckLayerAvailability.BatchCheckLayerAvailability


-- | Deletes specified tags from a resource.
module Network.AWS.ECR.UntagResource

-- | <i>See:</i> <a>newUntagResource</a> smart constructor.
data UntagResource
UntagResource' :: Text -> [Text] -> UntagResource

-- | The Amazon Resource Name (ARN) of the resource from which to remove
--   tags. Currently, the only supported resource is an Amazon ECR
--   repository.
[$sel:resourceArn:UntagResource'] :: UntagResource -> Text

-- | The keys of the tags to be removed.
[$sel:tagKeys:UntagResource'] :: UntagResource -> [Text]

-- | Create a value of <a>UntagResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:UntagResource'</a>,
--   <a>untagResource_resourceArn</a> - The Amazon Resource Name (ARN) of
--   the resource from which to remove tags. Currently, the only supported
--   resource is an Amazon ECR repository.
--   
--   <a>$sel:tagKeys:UntagResource'</a>, <a>untagResource_tagKeys</a> - The
--   keys of the tags to be removed.
newUntagResource :: Text -> UntagResource

-- | The Amazon Resource Name (ARN) of the resource from which to remove
--   tags. Currently, the only supported resource is an Amazon ECR
--   repository.
untagResource_resourceArn :: Lens' UntagResource Text

-- | The keys of the tags to be removed.
untagResource_tagKeys :: Lens' UntagResource [Text]

-- | <i>See:</i> <a>newUntagResourceResponse</a> smart constructor.
data UntagResourceResponse
UntagResourceResponse' :: Int -> UntagResourceResponse

-- | The response's http status code.
[$sel:httpStatus:UntagResourceResponse'] :: UntagResourceResponse -> Int

-- | Create a value of <a>UntagResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UntagResourceResponse'</a>,
--   <a>untagResourceResponse_httpStatus</a> - The response's http status
--   code.
newUntagResourceResponse :: Int -> UntagResourceResponse

-- | The response's http status code.
untagResourceResponse_httpStatus :: Lens' UntagResourceResponse Int
instance GHC.Generics.Generic Network.AWS.ECR.UntagResource.UntagResource
instance GHC.Show.Show Network.AWS.ECR.UntagResource.UntagResource
instance GHC.Read.Read Network.AWS.ECR.UntagResource.UntagResource
instance GHC.Classes.Eq Network.AWS.ECR.UntagResource.UntagResource
instance GHC.Generics.Generic Network.AWS.ECR.UntagResource.UntagResourceResponse
instance GHC.Show.Show Network.AWS.ECR.UntagResource.UntagResourceResponse
instance GHC.Read.Read Network.AWS.ECR.UntagResource.UntagResourceResponse
instance GHC.Classes.Eq Network.AWS.ECR.UntagResource.UntagResourceResponse
instance Network.AWS.Types.AWSRequest Network.AWS.ECR.UntagResource.UntagResource
instance Control.DeepSeq.NFData Network.AWS.ECR.UntagResource.UntagResourceResponse
instance Data.Hashable.Class.Hashable Network.AWS.ECR.UntagResource.UntagResource
instance Control.DeepSeq.NFData Network.AWS.ECR.UntagResource.UntagResource
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.ECR.UntagResource.UntagResource
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.UntagResource.UntagResource
instance Network.AWS.Data.Path.ToPath Network.AWS.ECR.UntagResource.UntagResource
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.UntagResource.UntagResource


-- | Uploads an image layer part to Amazon ECR.
--   
--   When an image is pushed, each new image layer is uploaded in parts.
--   The maximum size of each image layer part can be 20971520 bytes (or
--   about 20MB). The UploadLayerPart API is called once per each new image
--   layer part.
--   
--   This operation is used by the Amazon ECR proxy and is not generally
--   used by customers for pulling and pushing images. In most cases, you
--   should use the <tt>docker</tt> CLI to pull, tag, and push images.
module Network.AWS.ECR.UploadLayerPart

-- | <i>See:</i> <a>newUploadLayerPart</a> smart constructor.
data UploadLayerPart
UploadLayerPart' :: Maybe Text -> Text -> Text -> Natural -> Natural -> Base64 -> UploadLayerPart

-- | The Amazon Web Services account ID associated with the registry to
--   which you are uploading layer parts. If you do not specify a registry,
--   the default registry is assumed.
[$sel:registryId:UploadLayerPart'] :: UploadLayerPart -> Maybe Text

-- | The name of the repository to which you are uploading layer parts.
[$sel:repositoryName:UploadLayerPart'] :: UploadLayerPart -> Text

-- | The upload ID from a previous InitiateLayerUpload operation to
--   associate with the layer part upload.
[$sel:uploadId:UploadLayerPart'] :: UploadLayerPart -> Text

-- | The position of the first byte of the layer part witin the overall
--   image layer.
[$sel:partFirstByte:UploadLayerPart'] :: UploadLayerPart -> Natural

-- | The position of the last byte of the layer part within the overall
--   image layer.
[$sel:partLastByte:UploadLayerPart'] :: UploadLayerPart -> Natural

-- | The base64-encoded layer part payload.
[$sel:layerPartBlob:UploadLayerPart'] :: UploadLayerPart -> Base64

-- | Create a value of <a>UploadLayerPart</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:UploadLayerPart'</a>,
--   <a>uploadLayerPart_registryId</a> - The Amazon Web Services account ID
--   associated with the registry to which you are uploading layer parts.
--   If you do not specify a registry, the default registry is assumed.
--   
--   <a>$sel:repositoryName:UploadLayerPart'</a>,
--   <a>uploadLayerPart_repositoryName</a> - The name of the repository to
--   which you are uploading layer parts.
--   
--   <a>$sel:uploadId:UploadLayerPart'</a>, <a>uploadLayerPart_uploadId</a>
--   - The upload ID from a previous InitiateLayerUpload operation to
--   associate with the layer part upload.
--   
--   <a>$sel:partFirstByte:UploadLayerPart'</a>,
--   <a>uploadLayerPart_partFirstByte</a> - The position of the first byte
--   of the layer part witin the overall image layer.
--   
--   <a>$sel:partLastByte:UploadLayerPart'</a>,
--   <a>uploadLayerPart_partLastByte</a> - The position of the last byte of
--   the layer part within the overall image layer.
--   
--   <a>$sel:layerPartBlob:UploadLayerPart'</a>,
--   <a>uploadLayerPart_layerPartBlob</a> - The base64-encoded layer part
--   payload.-- -- <i>Note:</i> This <tt>Lens</tt> automatically encodes
--   and decodes Base64 data. -- The underlying isomorphism will encode to
--   Base64 representation during -- serialisation, and decode from Base64
--   representation during deserialisation. -- This <tt>Lens</tt> accepts
--   and returns only raw unencoded data.
newUploadLayerPart :: Text -> Text -> Natural -> Natural -> ByteString -> UploadLayerPart

-- | The Amazon Web Services account ID associated with the registry to
--   which you are uploading layer parts. If you do not specify a registry,
--   the default registry is assumed.
uploadLayerPart_registryId :: Lens' UploadLayerPart (Maybe Text)

-- | The name of the repository to which you are uploading layer parts.
uploadLayerPart_repositoryName :: Lens' UploadLayerPart Text

-- | The upload ID from a previous InitiateLayerUpload operation to
--   associate with the layer part upload.
uploadLayerPart_uploadId :: Lens' UploadLayerPart Text

-- | The position of the first byte of the layer part witin the overall
--   image layer.
uploadLayerPart_partFirstByte :: Lens' UploadLayerPart Natural

-- | The position of the last byte of the layer part within the overall
--   image layer.
uploadLayerPart_partLastByte :: Lens' UploadLayerPart Natural

-- | The base64-encoded layer part payload.-- -- <i>Note:</i> This
--   <tt>Lens</tt> automatically encodes and decodes Base64 data. -- The
--   underlying isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
uploadLayerPart_layerPartBlob :: Lens' UploadLayerPart ByteString

-- | <i>See:</i> <a>newUploadLayerPartResponse</a> smart constructor.
data UploadLayerPartResponse
UploadLayerPartResponse' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Natural -> Int -> UploadLayerPartResponse

-- | The upload ID associated with the request.
[$sel:uploadId:UploadLayerPartResponse'] :: UploadLayerPartResponse -> Maybe Text

-- | The registry ID associated with the request.
[$sel:registryId:UploadLayerPartResponse'] :: UploadLayerPartResponse -> Maybe Text

-- | The repository name associated with the request.
[$sel:repositoryName:UploadLayerPartResponse'] :: UploadLayerPartResponse -> Maybe Text

-- | The integer value of the last byte received in the request.
[$sel:lastByteReceived:UploadLayerPartResponse'] :: UploadLayerPartResponse -> Maybe Natural

-- | The response's http status code.
[$sel:httpStatus:UploadLayerPartResponse'] :: UploadLayerPartResponse -> Int

-- | Create a value of <a>UploadLayerPartResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:uploadId:UploadLayerPart'</a>,
--   <a>uploadLayerPartResponse_uploadId</a> - The upload ID associated
--   with the request.
--   
--   <a>$sel:registryId:UploadLayerPart'</a>,
--   <a>uploadLayerPartResponse_registryId</a> - The registry ID associated
--   with the request.
--   
--   <a>$sel:repositoryName:UploadLayerPart'</a>,
--   <a>uploadLayerPartResponse_repositoryName</a> - The repository name
--   associated with the request.
--   
--   <a>$sel:lastByteReceived:UploadLayerPartResponse'</a>,
--   <a>uploadLayerPartResponse_lastByteReceived</a> - The integer value of
--   the last byte received in the request.
--   
--   <a>$sel:httpStatus:UploadLayerPartResponse'</a>,
--   <a>uploadLayerPartResponse_httpStatus</a> - The response's http status
--   code.
newUploadLayerPartResponse :: Int -> UploadLayerPartResponse

-- | The upload ID associated with the request.
uploadLayerPartResponse_uploadId :: Lens' UploadLayerPartResponse (Maybe Text)

-- | The registry ID associated with the request.
uploadLayerPartResponse_registryId :: Lens' UploadLayerPartResponse (Maybe Text)

-- | The repository name associated with the request.
uploadLayerPartResponse_repositoryName :: Lens' UploadLayerPartResponse (Maybe Text)

-- | The integer value of the last byte received in the request.
uploadLayerPartResponse_lastByteReceived :: Lens' UploadLayerPartResponse (Maybe Natural)

-- | The response's http status code.
uploadLayerPartResponse_httpStatus :: Lens' UploadLayerPartResponse Int
instance GHC.Generics.Generic Network.AWS.ECR.UploadLayerPart.UploadLayerPart
instance GHC.Show.Show Network.AWS.ECR.UploadLayerPart.UploadLayerPart
instance GHC.Read.Read Network.AWS.ECR.UploadLayerPart.UploadLayerPart
instance GHC.Classes.Eq Network.AWS.ECR.UploadLayerPart.UploadLayerPart
instance GHC.Generics.Generic Network.AWS.ECR.UploadLayerPart.UploadLayerPartResponse
instance GHC.Show.Show Network.AWS.ECR.UploadLayerPart.UploadLayerPartResponse
instance GHC.Read.Read Network.AWS.ECR.UploadLayerPart.UploadLayerPartResponse
instance GHC.Classes.Eq Network.AWS.ECR.UploadLayerPart.UploadLayerPartResponse
instance Network.AWS.Types.AWSRequest Network.AWS.ECR.UploadLayerPart.UploadLayerPart
instance Control.DeepSeq.NFData Network.AWS.ECR.UploadLayerPart.UploadLayerPartResponse
instance Data.Hashable.Class.Hashable Network.AWS.ECR.UploadLayerPart.UploadLayerPart
instance Control.DeepSeq.NFData Network.AWS.ECR.UploadLayerPart.UploadLayerPart
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.ECR.UploadLayerPart.UploadLayerPart
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.ECR.UploadLayerPart.UploadLayerPart
instance Network.AWS.Data.Path.ToPath Network.AWS.ECR.UploadLayerPart.UploadLayerPart
instance Network.AWS.Data.Query.ToQuery Network.AWS.ECR.UploadLayerPart.UploadLayerPart


module Network.AWS.ECR.Lens

-- | The Amazon Web Services account ID associated with the registry to
--   which you are uploading layer parts. If you do not specify a registry,
--   the default registry is assumed.
uploadLayerPart_registryId :: Lens' UploadLayerPart (Maybe Text)

-- | The name of the repository to which you are uploading layer parts.
uploadLayerPart_repositoryName :: Lens' UploadLayerPart Text

-- | The upload ID from a previous InitiateLayerUpload operation to
--   associate with the layer part upload.
uploadLayerPart_uploadId :: Lens' UploadLayerPart Text

-- | The position of the first byte of the layer part witin the overall
--   image layer.
uploadLayerPart_partFirstByte :: Lens' UploadLayerPart Natural

-- | The position of the last byte of the layer part within the overall
--   image layer.
uploadLayerPart_partLastByte :: Lens' UploadLayerPart Natural

-- | The base64-encoded layer part payload.-- -- <i>Note:</i> This
--   <tt>Lens</tt> automatically encodes and decodes Base64 data. -- The
--   underlying isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
uploadLayerPart_layerPartBlob :: Lens' UploadLayerPart ByteString

-- | The upload ID associated with the request.
uploadLayerPartResponse_uploadId :: Lens' UploadLayerPartResponse (Maybe Text)

-- | The registry ID associated with the request.
uploadLayerPartResponse_registryId :: Lens' UploadLayerPartResponse (Maybe Text)

-- | The repository name associated with the request.
uploadLayerPartResponse_repositoryName :: Lens' UploadLayerPartResponse (Maybe Text)

-- | The integer value of the last byte received in the request.
uploadLayerPartResponse_lastByteReceived :: Lens' UploadLayerPartResponse (Maybe Natural)

-- | The response's http status code.
uploadLayerPartResponse_httpStatus :: Lens' UploadLayerPartResponse Int

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository. If you do  not specify a registry, the
--   default registry is assumed.
putLifecyclePolicy_registryId :: Lens' PutLifecyclePolicy (Maybe Text)

-- | The name of the repository to receive the policy.
putLifecyclePolicy_repositoryName :: Lens' PutLifecyclePolicy Text

-- | The JSON repository policy text to apply to the repository.
putLifecyclePolicy_lifecyclePolicyText :: Lens' PutLifecyclePolicy Text

-- | The registry ID associated with the request.
putLifecyclePolicyResponse_registryId :: Lens' PutLifecyclePolicyResponse (Maybe Text)

-- | The repository name associated with the request.
putLifecyclePolicyResponse_repositoryName :: Lens' PutLifecyclePolicyResponse (Maybe Text)

-- | The JSON repository policy text.
putLifecyclePolicyResponse_lifecyclePolicyText :: Lens' PutLifecyclePolicyResponse (Maybe Text)

-- | The response's http status code.
putLifecyclePolicyResponse_httpStatus :: Lens' PutLifecyclePolicyResponse Int

-- | The JSON policy text to apply to your registry. The policy text
--   follows the same format as IAM policy text. For more information, see
--   <a>Registry permissions</a> in the <i>Amazon Elastic Container
--   Registry User Guide</i>.
putRegistryPolicy_policyText :: Lens' PutRegistryPolicy Text

-- | The registry ID.
putRegistryPolicyResponse_registryId :: Lens' PutRegistryPolicyResponse (Maybe Text)

-- | The JSON policy text for your registry.
putRegistryPolicyResponse_policyText :: Lens' PutRegistryPolicyResponse (Maybe Text)

-- | The response's http status code.
putRegistryPolicyResponse_httpStatus :: Lens' PutRegistryPolicyResponse Int

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository. If you do not specify a registry, the default
--   registry is assumed.
startLifecyclePolicyPreview_registryId :: Lens' StartLifecyclePolicyPreview (Maybe Text)

-- | The policy to be evaluated against. If you do not specify a policy,
--   the current policy for the repository is used.
startLifecyclePolicyPreview_lifecyclePolicyText :: Lens' StartLifecyclePolicyPreview (Maybe Text)

-- | The name of the repository to be evaluated.
startLifecyclePolicyPreview_repositoryName :: Lens' StartLifecyclePolicyPreview Text

-- | The status of the lifecycle policy preview request.
startLifecyclePolicyPreviewResponse_status :: Lens' StartLifecyclePolicyPreviewResponse (Maybe LifecyclePolicyPreviewStatus)

-- | The registry ID associated with the request.
startLifecyclePolicyPreviewResponse_registryId :: Lens' StartLifecyclePolicyPreviewResponse (Maybe Text)

-- | The repository name associated with the request.
startLifecyclePolicyPreviewResponse_repositoryName :: Lens' StartLifecyclePolicyPreviewResponse (Maybe Text)

-- | The JSON repository policy text.
startLifecyclePolicyPreviewResponse_lifecyclePolicyText :: Lens' StartLifecyclePolicyPreviewResponse (Maybe Text)

-- | The response's http status code.
startLifecyclePolicyPreviewResponse_httpStatus :: Lens' StartLifecyclePolicyPreviewResponse Int

-- | The <tt>nextToken</tt> value returned from a previous paginated
--   <tt>DescribeRepositories</tt> request where <tt>maxResults</tt> was
--   used and the results exceeded the value of that parameter. Pagination
--   continues from the end of the previous results that returned the
--   <tt>nextToken</tt> value. This value is <tt>null</tt> when there are
--   no more results to return. This option cannot be used when you specify
--   repositories with <tt>repositoryNames</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
describeRepositories_nextToken :: Lens' DescribeRepositories (Maybe Text)

-- | A list of repositories to describe. If this parameter is omitted, then
--   all repositories in a registry are described.
describeRepositories_repositoryNames :: Lens' DescribeRepositories (Maybe (NonEmpty Text))

-- | The maximum number of repository results returned by
--   <tt>DescribeRepositories</tt> in paginated output. When this parameter
--   is used, <tt>DescribeRepositories</tt> only returns
--   <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt> response element. The remaining results of the
--   initial request can be seen by sending another
--   <tt>DescribeRepositories</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 1000. If
--   this parameter is not used, then <tt>DescribeRepositories</tt> returns
--   up to 100 results and a <tt>nextToken</tt> value, if applicable. This
--   option cannot be used when you specify repositories with
--   <tt>repositoryNames</tt>.
describeRepositories_maxResults :: Lens' DescribeRepositories (Maybe Natural)

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repositories to be described. If you do not specify a
--   registry, the default registry is assumed.
describeRepositories_registryId :: Lens' DescribeRepositories (Maybe Text)

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>DescribeRepositories</tt> request. When the results of a
--   <tt>DescribeRepositories</tt> request exceed <tt>maxResults</tt>, this
--   value can be used to retrieve the next page of results. This value is
--   <tt>null</tt> when there are no more results to return.
describeRepositoriesResponse_nextToken :: Lens' DescribeRepositoriesResponse (Maybe Text)

-- | A list of repository objects corresponding to valid repositories.
describeRepositoriesResponse_repositories :: Lens' DescribeRepositoriesResponse (Maybe [Repository])

-- | The response's http status code.
describeRepositoriesResponse_httpStatus :: Lens' DescribeRepositoriesResponse Int

-- | The image digest of the image manifest corresponding to the image.
putImage_imageDigest :: Lens' PutImage (Maybe Text)

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository in which to put the image. If you do not
--   specify a registry, the default registry is assumed.
putImage_registryId :: Lens' PutImage (Maybe Text)

-- | The tag to associate with the image. This parameter is required for
--   images that use the Docker Image Manifest V2 Schema 2 or Open
--   Container Initiative (OCI) formats.
putImage_imageTag :: Lens' PutImage (Maybe Text)

-- | The media type of the image manifest. If you push an image manifest
--   that does not contain the <tt>mediaType</tt> field, you must specify
--   the <tt>imageManifestMediaType</tt> in the request.
putImage_imageManifestMediaType :: Lens' PutImage (Maybe Text)

-- | The name of the repository in which to put the image.
putImage_repositoryName :: Lens' PutImage Text

-- | The image manifest corresponding to the image to be uploaded.
putImage_imageManifest :: Lens' PutImage Text

-- | Details of the image uploaded.
putImageResponse_image :: Lens' PutImageResponse (Maybe Image)

-- | The response's http status code.
putImageResponse_httpStatus :: Lens' PutImageResponse Int

-- | The <tt>nextToken</tt> value returned from a previous paginated
--   <tt>ListImages</tt> request where <tt>maxResults</tt> was used and the
--   results exceeded the value of that parameter. Pagination continues
--   from the end of the previous results that returned the
--   <tt>nextToken</tt> value. This value is <tt>null</tt> when there are
--   no more results to return.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
listImages_nextToken :: Lens' ListImages (Maybe Text)

-- | The maximum number of image results returned by <tt>ListImages</tt> in
--   paginated output. When this parameter is used, <tt>ListImages</tt>
--   only returns <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt> response element. The remaining results of the
--   initial request can be seen by sending another <tt>ListImages</tt>
--   request with the returned <tt>nextToken</tt> value. This value can be
--   between 1 and 1000. If this parameter is not used, then
--   <tt>ListImages</tt> returns up to 100 results and a <tt>nextToken</tt>
--   value, if applicable.
listImages_maxResults :: Lens' ListImages (Maybe Natural)

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository in which to list images. If you do not specify
--   a registry, the default registry is assumed.
listImages_registryId :: Lens' ListImages (Maybe Text)

-- | The filter key and value with which to filter your <tt>ListImages</tt>
--   results.
listImages_filter :: Lens' ListImages (Maybe ListImagesFilter)

-- | The repository with image IDs to be listed.
listImages_repositoryName :: Lens' ListImages Text

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>ListImages</tt> request. When the results of a <tt>ListImages</tt>
--   request exceed <tt>maxResults</tt>, this value can be used to retrieve
--   the next page of results. This value is <tt>null</tt> when there are
--   no more results to return.
listImagesResponse_nextToken :: Lens' ListImagesResponse (Maybe Text)

-- | The list of image IDs for the requested repository.
listImagesResponse_imageIds :: Lens' ListImagesResponse (Maybe [ImageIdentifier])

-- | The response's http status code.
listImagesResponse_httpStatus :: Lens' ListImagesResponse Int

-- | The ID of the registry.
getRegistryPolicyResponse_registryId :: Lens' GetRegistryPolicyResponse (Maybe Text)

-- | The JSON text of the permissions policy for a registry.
getRegistryPolicyResponse_policyText :: Lens' GetRegistryPolicyResponse (Maybe Text)

-- | The response's http status code.
getRegistryPolicyResponse_httpStatus :: Lens' GetRegistryPolicyResponse Int

-- | The Amazon Web Services account ID associated with the registry to
--   which you intend to upload layers. If you do not specify a registry,
--   the default registry is assumed.
initiateLayerUpload_registryId :: Lens' InitiateLayerUpload (Maybe Text)

-- | The name of the repository to which you intend to upload layers.
initiateLayerUpload_repositoryName :: Lens' InitiateLayerUpload Text

-- | The upload ID for the layer upload. This parameter is passed to
--   further UploadLayerPart and CompleteLayerUpload operations.
initiateLayerUploadResponse_uploadId :: Lens' InitiateLayerUploadResponse (Maybe Text)

-- | The size, in bytes, that Amazon ECR expects future layer part uploads
--   to be.
initiateLayerUploadResponse_partSize :: Lens' InitiateLayerUploadResponse (Maybe Natural)

-- | The response's http status code.
initiateLayerUploadResponse_httpStatus :: Lens' InitiateLayerUploadResponse Int

-- | The <tt>nextToken</tt> value returned from a previous paginated
--   <tt>DescribeImageScanFindings</tt> request where <tt>maxResults</tt>
--   was used and the results exceeded the value of that parameter.
--   Pagination continues from the end of the previous results that
--   returned the <tt>nextToken</tt> value. This value is null when there
--   are no more results to return.
describeImageScanFindings_nextToken :: Lens' DescribeImageScanFindings (Maybe Text)

-- | The maximum number of image scan results returned by
--   <tt>DescribeImageScanFindings</tt> in paginated output. When this
--   parameter is used, <tt>DescribeImageScanFindings</tt> only returns
--   <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt> response element. The remaining results of the
--   initial request can be seen by sending another
--   <tt>DescribeImageScanFindings</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 1000. If
--   this parameter is not used, then <tt>DescribeImageScanFindings</tt>
--   returns up to 100 results and a <tt>nextToken</tt> value, if
--   applicable.
describeImageScanFindings_maxResults :: Lens' DescribeImageScanFindings (Maybe Natural)

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository in which to describe the image scan findings
--   for. If you do not specify a registry, the default registry is
--   assumed.
describeImageScanFindings_registryId :: Lens' DescribeImageScanFindings (Maybe Text)

-- | The repository for the image for which to describe the scan findings.
describeImageScanFindings_repositoryName :: Lens' DescribeImageScanFindings Text

-- | Undocumented member.
describeImageScanFindings_imageId :: Lens' DescribeImageScanFindings ImageIdentifier

-- | The current state of the scan.
describeImageScanFindingsResponse_imageScanStatus :: Lens' DescribeImageScanFindingsResponse (Maybe ImageScanStatus)

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>DescribeImageScanFindings</tt> request. When the results of a
--   <tt>DescribeImageScanFindings</tt> request exceed <tt>maxResults</tt>,
--   this value can be used to retrieve the next page of results. This
--   value is null when there are no more results to return.
describeImageScanFindingsResponse_nextToken :: Lens' DescribeImageScanFindingsResponse (Maybe Text)

-- | The information contained in the image scan findings.
describeImageScanFindingsResponse_imageScanFindings :: Lens' DescribeImageScanFindingsResponse (Maybe ImageScanFindings)

-- | The registry ID associated with the request.
describeImageScanFindingsResponse_registryId :: Lens' DescribeImageScanFindingsResponse (Maybe Text)

-- | The repository name associated with the request.
describeImageScanFindingsResponse_repositoryName :: Lens' DescribeImageScanFindingsResponse (Maybe Text)

-- | Undocumented member.
describeImageScanFindingsResponse_imageId :: Lens' DescribeImageScanFindingsResponse (Maybe ImageIdentifier)

-- | The response's http status code.
describeImageScanFindingsResponse_httpStatus :: Lens' DescribeImageScanFindingsResponse Int

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository policy to delete. If you do not specify a
--   registry, the default registry is assumed.
deleteRepositoryPolicy_registryId :: Lens' DeleteRepositoryPolicy (Maybe Text)

-- | The name of the repository that is associated with the repository
--   policy to delete.
deleteRepositoryPolicy_repositoryName :: Lens' DeleteRepositoryPolicy Text

-- | The registry ID associated with the request.
deleteRepositoryPolicyResponse_registryId :: Lens' DeleteRepositoryPolicyResponse (Maybe Text)

-- | The repository name associated with the request.
deleteRepositoryPolicyResponse_repositoryName :: Lens' DeleteRepositoryPolicyResponse (Maybe Text)

-- | The JSON repository policy that was deleted from the repository.
deleteRepositoryPolicyResponse_policyText :: Lens' DeleteRepositoryPolicyResponse (Maybe Text)

-- | The response's http status code.
deleteRepositoryPolicyResponse_httpStatus :: Lens' DeleteRepositoryPolicyResponse Int

-- | The Amazon Resource Name (ARN) of the resource from which to remove
--   tags. Currently, the only supported resource is an Amazon ECR
--   repository.
untagResource_resourceArn :: Lens' UntagResource Text

-- | The keys of the tags to be removed.
untagResource_tagKeys :: Lens' UntagResource [Text]

-- | The response's http status code.
untagResourceResponse_httpStatus :: Lens' UntagResourceResponse Int

-- | The Amazon Resource Name (ARN) of the the resource to which to add
--   tags. Currently, the only supported resource is an Amazon ECR
--   repository.
tagResource_resourceArn :: Lens' TagResource Text

-- | The tags to add to the resource. A tag is an array of key-value pairs.
--   Tag keys can have a maximum character length of 128 characters, and
--   tag values can have a maximum length of 256 characters.
tagResource_tags :: Lens' TagResource [Tag]

-- | The response's http status code.
tagResourceResponse_httpStatus :: Lens' TagResourceResponse Int

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository. If you do not specify a registry, the default
--   registry is assumed.
setRepositoryPolicy_registryId :: Lens' SetRepositoryPolicy (Maybe Text)

-- | If the policy you are attempting to set on a repository policy would
--   prevent you from setting another policy in the future, you must force
--   the SetRepositoryPolicy operation. This is intended to prevent
--   accidental repository lock outs.
setRepositoryPolicy_force :: Lens' SetRepositoryPolicy (Maybe Bool)

-- | The name of the repository to receive the policy.
setRepositoryPolicy_repositoryName :: Lens' SetRepositoryPolicy Text

-- | The JSON repository policy text to apply to the repository. For more
--   information, see <a>Amazon ECR repository policies</a> in the
--   <i>Amazon Elastic Container Registry User Guide</i>.
setRepositoryPolicy_policyText :: Lens' SetRepositoryPolicy Text

-- | The registry ID associated with the request.
setRepositoryPolicyResponse_registryId :: Lens' SetRepositoryPolicyResponse (Maybe Text)

-- | The repository name associated with the request.
setRepositoryPolicyResponse_repositoryName :: Lens' SetRepositoryPolicyResponse (Maybe Text)

-- | The JSON repository policy text applied to the repository.
setRepositoryPolicyResponse_policyText :: Lens' SetRepositoryPolicyResponse (Maybe Text)

-- | The response's http status code.
setRepositoryPolicyResponse_httpStatus :: Lens' SetRepositoryPolicyResponse Int

-- | The replication configuration for the registry.
describeRegistryResponse_replicationConfiguration :: Lens' DescribeRegistryResponse (Maybe ReplicationConfiguration)

-- | The ID of the registry.
describeRegistryResponse_registryId :: Lens' DescribeRegistryResponse (Maybe Text)

-- | The response's http status code.
describeRegistryResponse_httpStatus :: Lens' DescribeRegistryResponse Int

-- | The Amazon Web Services account ID associated with the registry that
--   contains the image to delete. If you do not specify a registry, the
--   default registry is assumed.
batchDeleteImage_registryId :: Lens' BatchDeleteImage (Maybe Text)

-- | The repository that contains the image to delete.
batchDeleteImage_repositoryName :: Lens' BatchDeleteImage Text

-- | A list of image ID references that correspond to images to delete. The
--   format of the <tt>imageIds</tt> reference is <tt>imageTag=tag</tt> or
--   <tt>imageDigest=digest</tt>.
batchDeleteImage_imageIds :: Lens' BatchDeleteImage [ImageIdentifier]

-- | The image IDs of the deleted images.
batchDeleteImageResponse_imageIds :: Lens' BatchDeleteImageResponse (Maybe [ImageIdentifier])

-- | Any failures associated with the call.
batchDeleteImageResponse_failures :: Lens' BatchDeleteImageResponse (Maybe [ImageFailure])

-- | The response's http status code.
batchDeleteImageResponse_httpStatus :: Lens' BatchDeleteImageResponse Int

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository in which to update the image scanning
--   configuration setting. If you do not specify a registry, the default
--   registry is assumed.
putImageScanningConfiguration_registryId :: Lens' PutImageScanningConfiguration (Maybe Text)

-- | The name of the repository in which to update the image scanning
--   configuration setting.
putImageScanningConfiguration_repositoryName :: Lens' PutImageScanningConfiguration Text

-- | The image scanning configuration for the repository. This setting
--   determines whether images are scanned for known vulnerabilities after
--   being pushed to the repository.
putImageScanningConfiguration_imageScanningConfiguration :: Lens' PutImageScanningConfiguration ImageScanningConfiguration

-- | The registry ID associated with the request.
putImageScanningConfigurationResponse_registryId :: Lens' PutImageScanningConfigurationResponse (Maybe Text)

-- | The repository name associated with the request.
putImageScanningConfigurationResponse_repositoryName :: Lens' PutImageScanningConfigurationResponse (Maybe Text)

-- | The image scanning configuration setting for the repository.
putImageScanningConfigurationResponse_imageScanningConfiguration :: Lens' PutImageScanningConfigurationResponse (Maybe ImageScanningConfiguration)

-- | The response's http status code.
putImageScanningConfigurationResponse_httpStatus :: Lens' PutImageScanningConfigurationResponse Int

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository. If you do not specify a registry, the default
--   registry is assumed.
deleteLifecyclePolicy_registryId :: Lens' DeleteLifecyclePolicy (Maybe Text)

-- | The name of the repository.
deleteLifecyclePolicy_repositoryName :: Lens' DeleteLifecyclePolicy Text

-- | The registry ID associated with the request.
deleteLifecyclePolicyResponse_registryId :: Lens' DeleteLifecyclePolicyResponse (Maybe Text)

-- | The repository name associated with the request.
deleteLifecyclePolicyResponse_repositoryName :: Lens' DeleteLifecyclePolicyResponse (Maybe Text)

-- | The JSON lifecycle policy text.
deleteLifecyclePolicyResponse_lifecyclePolicyText :: Lens' DeleteLifecyclePolicyResponse (Maybe Text)

-- | The time stamp of the last time that the lifecycle policy was run.
deleteLifecyclePolicyResponse_lastEvaluatedAt :: Lens' DeleteLifecyclePolicyResponse (Maybe UTCTime)

-- | The response's http status code.
deleteLifecyclePolicyResponse_httpStatus :: Lens' DeleteLifecyclePolicyResponse Int

-- | The registry ID associated with the request.
deleteRegistryPolicyResponse_registryId :: Lens' DeleteRegistryPolicyResponse (Maybe Text)

-- | The contents of the registry permissions policy that was deleted.
deleteRegistryPolicyResponse_policyText :: Lens' DeleteRegistryPolicyResponse (Maybe Text)

-- | The response's http status code.
deleteRegistryPolicyResponse_httpStatus :: Lens' DeleteRegistryPolicyResponse Int

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository. If you do not specify a registry, the default
--   registry is assumed.
getRepositoryPolicy_registryId :: Lens' GetRepositoryPolicy (Maybe Text)

-- | The name of the repository with the policy to retrieve.
getRepositoryPolicy_repositoryName :: Lens' GetRepositoryPolicy Text

-- | The registry ID associated with the request.
getRepositoryPolicyResponse_registryId :: Lens' GetRepositoryPolicyResponse (Maybe Text)

-- | The repository name associated with the request.
getRepositoryPolicyResponse_repositoryName :: Lens' GetRepositoryPolicyResponse (Maybe Text)

-- | The JSON repository policy text associated with the repository.
getRepositoryPolicyResponse_policyText :: Lens' GetRepositoryPolicyResponse (Maybe Text)

-- | The response's http status code.
getRepositoryPolicyResponse_httpStatus :: Lens' GetRepositoryPolicyResponse Int

-- | The Amazon Web Services account ID associated with the registry to
--   which to upload layers. If you do not specify a registry, the default
--   registry is assumed.
completeLayerUpload_registryId :: Lens' CompleteLayerUpload (Maybe Text)

-- | The name of the repository to associate with the image layer.
completeLayerUpload_repositoryName :: Lens' CompleteLayerUpload Text

-- | The upload ID from a previous InitiateLayerUpload operation to
--   associate with the image layer.
completeLayerUpload_uploadId :: Lens' CompleteLayerUpload Text

-- | The <tt>sha256</tt> digest of the image layer.
completeLayerUpload_layerDigests :: Lens' CompleteLayerUpload (NonEmpty Text)

-- | The upload ID associated with the layer.
completeLayerUploadResponse_uploadId :: Lens' CompleteLayerUploadResponse (Maybe Text)

-- | The registry ID associated with the request.
completeLayerUploadResponse_registryId :: Lens' CompleteLayerUploadResponse (Maybe Text)

-- | The repository name associated with the request.
completeLayerUploadResponse_repositoryName :: Lens' CompleteLayerUploadResponse (Maybe Text)

-- | The <tt>sha256</tt> digest of the image layer.
completeLayerUploadResponse_layerDigest :: Lens' CompleteLayerUploadResponse (Maybe Text)

-- | The response's http status code.
completeLayerUploadResponse_httpStatus :: Lens' CompleteLayerUploadResponse Int

-- | The Amazon Web Services account ID associated with the registry that
--   contains the image layer to download. If you do not specify a
--   registry, the default registry is assumed.
getDownloadUrlForLayer_registryId :: Lens' GetDownloadUrlForLayer (Maybe Text)

-- | The name of the repository that is associated with the image layer to
--   download.
getDownloadUrlForLayer_repositoryName :: Lens' GetDownloadUrlForLayer Text

-- | The digest of the image layer to download.
getDownloadUrlForLayer_layerDigest :: Lens' GetDownloadUrlForLayer Text

-- | The pre-signed Amazon S3 download URL for the requested layer.
getDownloadUrlForLayerResponse_downloadUrl :: Lens' GetDownloadUrlForLayerResponse (Maybe Text)

-- | The digest of the image layer to download.
getDownloadUrlForLayerResponse_layerDigest :: Lens' GetDownloadUrlForLayerResponse (Maybe Text)

-- | The response's http status code.
getDownloadUrlForLayerResponse_httpStatus :: Lens' GetDownloadUrlForLayerResponse Int

-- | The <tt>nextToken</tt> value returned from a previous paginated
--   <tt>DescribeImages</tt> request where <tt>maxResults</tt> was used and
--   the results exceeded the value of that parameter. Pagination continues
--   from the end of the previous results that returned the
--   <tt>nextToken</tt> value. This value is <tt>null</tt> when there are
--   no more results to return. This option cannot be used when you specify
--   images with <tt>imageIds</tt>.
describeImages_nextToken :: Lens' DescribeImages (Maybe Text)

-- | The list of image IDs for the requested repository.
describeImages_imageIds :: Lens' DescribeImages (Maybe [ImageIdentifier])

-- | The maximum number of repository results returned by
--   <tt>DescribeImages</tt> in paginated output. When this parameter is
--   used, <tt>DescribeImages</tt> only returns <tt>maxResults</tt> results
--   in a single page along with a <tt>nextToken</tt> response element. The
--   remaining results of the initial request can be seen by sending
--   another <tt>DescribeImages</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 1000. If
--   this parameter is not used, then <tt>DescribeImages</tt> returns up to
--   100 results and a <tt>nextToken</tt> value, if applicable. This option
--   cannot be used when you specify images with <tt>imageIds</tt>.
describeImages_maxResults :: Lens' DescribeImages (Maybe Natural)

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository in which to describe images. If you do not
--   specify a registry, the default registry is assumed.
describeImages_registryId :: Lens' DescribeImages (Maybe Text)

-- | The filter key and value with which to filter your
--   <tt>DescribeImages</tt> results.
describeImages_filter :: Lens' DescribeImages (Maybe DescribeImagesFilter)

-- | The repository that contains the images to describe.
describeImages_repositoryName :: Lens' DescribeImages Text

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>DescribeImages</tt> request. When the results of a
--   <tt>DescribeImages</tt> request exceed <tt>maxResults</tt>, this value
--   can be used to retrieve the next page of results. This value is
--   <tt>null</tt> when there are no more results to return.
describeImagesResponse_nextToken :: Lens' DescribeImagesResponse (Maybe Text)

-- | A list of ImageDetail objects that contain data about the image.
describeImagesResponse_imageDetails :: Lens' DescribeImagesResponse (Maybe [ImageDetail])

-- | The response's http status code.
describeImagesResponse_httpStatus :: Lens' DescribeImagesResponse Int

-- | A list of Amazon Web Services account IDs that are associated with the
--   registries for which to get AuthorizationData objects. If you do not
--   specify a registry, the default registry is assumed.
getAuthorizationToken_registryIds :: Lens' GetAuthorizationToken (Maybe (NonEmpty Text))

-- | A list of authorization token data objects that correspond to the
--   <tt>registryIds</tt> values in the request.
getAuthorizationTokenResponse_authorizationData :: Lens' GetAuthorizationTokenResponse (Maybe [AuthorizationData])

-- | The response's http status code.
getAuthorizationTokenResponse_httpStatus :: Lens' GetAuthorizationTokenResponse Int

-- | The encryption configuration for the repository. This determines how
--   the contents of your repository are encrypted at rest.
createRepository_encryptionConfiguration :: Lens' CreateRepository (Maybe EncryptionConfiguration)

-- | The AWS account ID associated with the registry to create the
--   repository. If you do not specify a registry, the default registry is
--   assumed.
createRepository_registryId :: Lens' CreateRepository (Maybe Text)

-- | The metadata that you apply to the repository to help you categorize
--   and organize them. Each tag consists of a key and an optional value,
--   both of which you define. Tag keys can have a maximum character length
--   of 128 characters, and tag values can have a maximum length of 256
--   characters.
createRepository_tags :: Lens' CreateRepository (Maybe [Tag])

-- | The image scanning configuration for the repository. This determines
--   whether images are scanned for known vulnerabilities after being
--   pushed to the repository.
createRepository_imageScanningConfiguration :: Lens' CreateRepository (Maybe ImageScanningConfiguration)

-- | The tag mutability setting for the repository. If this parameter is
--   omitted, the default setting of <tt>MUTABLE</tt> will be used which
--   will allow image tags to be overwritten. If <tt>IMMUTABLE</tt> is
--   specified, all image tags within the repository will be immutable
--   which will prevent them from being overwritten.
createRepository_imageTagMutability :: Lens' CreateRepository (Maybe ImageTagMutability)

-- | The name to use for the repository. The repository name may be
--   specified on its own (such as <tt>nginx-web-app</tt>) or it can be
--   prepended with a namespace to group the repository into a category
--   (such as <tt>project-a/nginx-web-app</tt>).
createRepository_repositoryName :: Lens' CreateRepository Text

-- | The repository that was created.
createRepositoryResponse_repository :: Lens' CreateRepositoryResponse (Maybe Repository)

-- | The response's http status code.
createRepositoryResponse_httpStatus :: Lens' CreateRepositoryResponse Int

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository to delete. If you do not specify a registry,
--   the default registry is assumed.
deleteRepository_registryId :: Lens' DeleteRepository (Maybe Text)

-- | If a repository contains images, forces the deletion.
deleteRepository_force :: Lens' DeleteRepository (Maybe Bool)

-- | The name of the repository to delete.
deleteRepository_repositoryName :: Lens' DeleteRepository Text

-- | The repository that was deleted.
deleteRepositoryResponse_repository :: Lens' DeleteRepositoryResponse (Maybe Repository)

-- | The response's http status code.
deleteRepositoryResponse_httpStatus :: Lens' DeleteRepositoryResponse Int

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository. If you do not specify a registry, the default
--   registry is assumed.
getLifecyclePolicy_registryId :: Lens' GetLifecyclePolicy (Maybe Text)

-- | The name of the repository.
getLifecyclePolicy_repositoryName :: Lens' GetLifecyclePolicy Text

-- | The registry ID associated with the request.
getLifecyclePolicyResponse_registryId :: Lens' GetLifecyclePolicyResponse (Maybe Text)

-- | The repository name associated with the request.
getLifecyclePolicyResponse_repositoryName :: Lens' GetLifecyclePolicyResponse (Maybe Text)

-- | The JSON lifecycle policy text.
getLifecyclePolicyResponse_lifecyclePolicyText :: Lens' GetLifecyclePolicyResponse (Maybe Text)

-- | The time stamp of the last time that the lifecycle policy was run.
getLifecyclePolicyResponse_lastEvaluatedAt :: Lens' GetLifecyclePolicyResponse (Maybe UTCTime)

-- | The response's http status code.
getLifecyclePolicyResponse_httpStatus :: Lens' GetLifecyclePolicyResponse Int

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository in which to start an image scan request. If
--   you do not specify a registry, the default registry is assumed.
startImageScan_registryId :: Lens' StartImageScan (Maybe Text)

-- | The name of the repository that contains the images to scan.
startImageScan_repositoryName :: Lens' StartImageScan Text

-- | Undocumented member.
startImageScan_imageId :: Lens' StartImageScan ImageIdentifier

-- | The current state of the scan.
startImageScanResponse_imageScanStatus :: Lens' StartImageScanResponse (Maybe ImageScanStatus)

-- | The registry ID associated with the request.
startImageScanResponse_registryId :: Lens' StartImageScanResponse (Maybe Text)

-- | The repository name associated with the request.
startImageScanResponse_repositoryName :: Lens' StartImageScanResponse (Maybe Text)

-- | Undocumented member.
startImageScanResponse_imageId :: Lens' StartImageScanResponse (Maybe ImageIdentifier)

-- | The response's http status code.
startImageScanResponse_httpStatus :: Lens' StartImageScanResponse Int

-- | The Amazon Web Services account ID associated with the registry that
--   contains the image layers to check. If you do not specify a registry,
--   the default registry is assumed.
batchCheckLayerAvailability_registryId :: Lens' BatchCheckLayerAvailability (Maybe Text)

-- | The name of the repository that is associated with the image layers to
--   check.
batchCheckLayerAvailability_repositoryName :: Lens' BatchCheckLayerAvailability Text

-- | The digests of the image layers to check.
batchCheckLayerAvailability_layerDigests :: Lens' BatchCheckLayerAvailability (NonEmpty Text)

-- | Any failures associated with the call.
batchCheckLayerAvailabilityResponse_failures :: Lens' BatchCheckLayerAvailabilityResponse (Maybe [LayerFailure])

-- | A list of image layer objects corresponding to the image layer
--   references in the request.
batchCheckLayerAvailabilityResponse_layers :: Lens' BatchCheckLayerAvailabilityResponse (Maybe [Layer])

-- | The response's http status code.
batchCheckLayerAvailabilityResponse_httpStatus :: Lens' BatchCheckLayerAvailabilityResponse Int

-- | The accepted media types for the request.
--   
--   Valid values:
--   <tt>application/vnd.docker.distribution.manifest.v1+json</tt> |
--   <tt>application/vnd.docker.distribution.manifest.v2+json</tt> |
--   <tt>application/vnd.oci.image.manifest.v1+json</tt>
batchGetImage_acceptedMediaTypes :: Lens' BatchGetImage (Maybe (NonEmpty Text))

-- | The Amazon Web Services account ID associated with the registry that
--   contains the images to describe. If you do not specify a registry, the
--   default registry is assumed.
batchGetImage_registryId :: Lens' BatchGetImage (Maybe Text)

-- | The repository that contains the images to describe.
batchGetImage_repositoryName :: Lens' BatchGetImage Text

-- | A list of image ID references that correspond to images to describe.
--   The format of the <tt>imageIds</tt> reference is <tt>imageTag=tag</tt>
--   or <tt>imageDigest=digest</tt>.
batchGetImage_imageIds :: Lens' BatchGetImage [ImageIdentifier]

-- | A list of image objects corresponding to the image references in the
--   request.
batchGetImageResponse_images :: Lens' BatchGetImageResponse (Maybe [Image])

-- | Any failures associated with the call.
batchGetImageResponse_failures :: Lens' BatchGetImageResponse (Maybe [ImageFailure])

-- | The response's http status code.
batchGetImageResponse_httpStatus :: Lens' BatchGetImageResponse Int

-- | An object representing the replication configuration for a registry.
putReplicationConfiguration_replicationConfiguration :: Lens' PutReplicationConfiguration ReplicationConfiguration

-- | The contents of the replication configuration for the registry.
putReplicationConfigurationResponse_replicationConfiguration :: Lens' PutReplicationConfigurationResponse (Maybe ReplicationConfiguration)

-- | The response's http status code.
putReplicationConfigurationResponse_httpStatus :: Lens' PutReplicationConfigurationResponse Int

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository in which to update the image tag mutability
--   settings. If you do not specify a registry, the default registry is
--   assumed.
putImageTagMutability_registryId :: Lens' PutImageTagMutability (Maybe Text)

-- | The name of the repository in which to update the image tag mutability
--   settings.
putImageTagMutability_repositoryName :: Lens' PutImageTagMutability Text

-- | The tag mutability setting for the repository. If <tt>MUTABLE</tt> is
--   specified, image tags can be overwritten. If <tt>IMMUTABLE</tt> is
--   specified, all image tags within the repository will be immutable
--   which will prevent them from being overwritten.
putImageTagMutability_imageTagMutability :: Lens' PutImageTagMutability ImageTagMutability

-- | The registry ID associated with the request.
putImageTagMutabilityResponse_registryId :: Lens' PutImageTagMutabilityResponse (Maybe Text)

-- | The repository name associated with the request.
putImageTagMutabilityResponse_repositoryName :: Lens' PutImageTagMutabilityResponse (Maybe Text)

-- | The image tag mutability setting for the repository.
putImageTagMutabilityResponse_imageTagMutability :: Lens' PutImageTagMutabilityResponse (Maybe ImageTagMutability)

-- | The response's http status code.
putImageTagMutabilityResponse_httpStatus :: Lens' PutImageTagMutabilityResponse Int

-- | The Amazon Web Services account ID associated with the registry. If
--   you do not specify a registry, the default registry is assumed.
describeImageReplicationStatus_registryId :: Lens' DescribeImageReplicationStatus (Maybe Text)

-- | The name of the repository that the image is in.
describeImageReplicationStatus_repositoryName :: Lens' DescribeImageReplicationStatus Text

-- | Undocumented member.
describeImageReplicationStatus_imageId :: Lens' DescribeImageReplicationStatus ImageIdentifier

-- | The repository name associated with the request.
describeImageReplicationStatusResponse_repositoryName :: Lens' DescribeImageReplicationStatusResponse (Maybe Text)

-- | Undocumented member.
describeImageReplicationStatusResponse_imageId :: Lens' DescribeImageReplicationStatusResponse (Maybe ImageIdentifier)

-- | The replication status details for the images in the specified
--   repository.
describeImageReplicationStatusResponse_replicationStatuses :: Lens' DescribeImageReplicationStatusResponse (Maybe [ImageReplicationStatus])

-- | The response's http status code.
describeImageReplicationStatusResponse_httpStatus :: Lens' DescribeImageReplicationStatusResponse Int

-- | The Amazon Resource Name (ARN) that identifies the resource for which
--   to list the tags. Currently, the only supported resource is an Amazon
--   ECR repository.
listTagsForResource_resourceArn :: Lens' ListTagsForResource Text

-- | The tags for the resource.
listTagsForResourceResponse_tags :: Lens' ListTagsForResourceResponse (Maybe [Tag])

-- | The response's http status code.
listTagsForResourceResponse_httpStatus :: Lens' ListTagsForResourceResponse Int

-- | The <tt>nextToken</tt> value returned from a previous paginated 
--   <tt>GetLifecyclePolicyPreviewRequest</tt> request where
--   <tt>maxResults</tt> was used and the  results exceeded the value of
--   that parameter. Pagination continues from the end of the  previous
--   results that returned the <tt>nextToken</tt> value. This value is 
--   <tt>null</tt> when there are no more results to return. This option
--   cannot be used when you specify images with <tt>imageIds</tt>.
getLifecyclePolicyPreview_nextToken :: Lens' GetLifecyclePolicyPreview (Maybe Text)

-- | The list of imageIDs to be included.
getLifecyclePolicyPreview_imageIds :: Lens' GetLifecyclePolicyPreview (Maybe [ImageIdentifier])

-- | The maximum number of repository results returned by
--   <tt>GetLifecyclePolicyPreviewRequest</tt> in  paginated output. When
--   this parameter is used, <tt>GetLifecyclePolicyPreviewRequest</tt> only
--   returns  <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt>  response element. The remaining results of the
--   initial request can be seen by sending  another
--   <tt>GetLifecyclePolicyPreviewRequest</tt> request with the returned
--   <tt>nextToken</tt>  value. This value can be between 1 and 1000. If
--   this  parameter is not used, then
--   <tt>GetLifecyclePolicyPreviewRequest</tt> returns up to  100 results
--   and a <tt>nextToken</tt> value, if  applicable. This option cannot be
--   used when you specify images with <tt>imageIds</tt>.
getLifecyclePolicyPreview_maxResults :: Lens' GetLifecyclePolicyPreview (Maybe Natural)

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository. If you do not specify a registry, the default
--   registry is assumed.
getLifecyclePolicyPreview_registryId :: Lens' GetLifecyclePolicyPreview (Maybe Text)

-- | An optional parameter that filters results based on image tag status
--   and all tags, if tagged.
getLifecyclePolicyPreview_filter :: Lens' GetLifecyclePolicyPreview (Maybe LifecyclePolicyPreviewFilter)

-- | The name of the repository.
getLifecyclePolicyPreview_repositoryName :: Lens' GetLifecyclePolicyPreview Text

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>GetLifecyclePolicyPreview</tt> request. When the results of a
--   <tt>GetLifecyclePolicyPreview</tt> request exceed <tt>maxResults</tt>,
--   this value can be used to retrieve the next page of results. This
--   value is <tt>null</tt> when there are no more results to return.
getLifecyclePolicyPreviewResponse_nextToken :: Lens' GetLifecyclePolicyPreviewResponse (Maybe Text)

-- | The status of the lifecycle policy preview request.
getLifecyclePolicyPreviewResponse_status :: Lens' GetLifecyclePolicyPreviewResponse (Maybe LifecyclePolicyPreviewStatus)

-- | The registry ID associated with the request.
getLifecyclePolicyPreviewResponse_registryId :: Lens' GetLifecyclePolicyPreviewResponse (Maybe Text)

-- | The repository name associated with the request.
getLifecyclePolicyPreviewResponse_repositoryName :: Lens' GetLifecyclePolicyPreviewResponse (Maybe Text)

-- | The list of images that is returned as a result of the action.
getLifecyclePolicyPreviewResponse_summary :: Lens' GetLifecyclePolicyPreviewResponse (Maybe LifecyclePolicyPreviewSummary)

-- | The JSON lifecycle policy text.
getLifecyclePolicyPreviewResponse_lifecyclePolicyText :: Lens' GetLifecyclePolicyPreviewResponse (Maybe Text)

-- | The results of the lifecycle policy preview request.
getLifecyclePolicyPreviewResponse_previewResults :: Lens' GetLifecyclePolicyPreviewResponse (Maybe [LifecyclePolicyPreviewResult])

-- | The response's http status code.
getLifecyclePolicyPreviewResponse_httpStatus :: Lens' GetLifecyclePolicyPreviewResponse Int

-- | The value assigned to the attribute key.
attribute_value :: Lens' Attribute (Maybe Text)

-- | The attribute key.
attribute_key :: Lens' Attribute Text

-- | The registry URL to use for this authorization token in a <tt>docker
--   login</tt> command. The Amazon ECR registry URL format is
--   <tt>https://aws_account_id.dkr.ecr.region.amazonaws.com</tt>. For
--   example,
--   <tt>https://012345678910.dkr.ecr.us-east-1.amazonaws.com</tt>..
authorizationData_proxyEndpoint :: Lens' AuthorizationData (Maybe Text)

-- | The Unix time in seconds and milliseconds when the authorization token
--   expires. Authorization tokens are valid for 12 hours.
authorizationData_expiresAt :: Lens' AuthorizationData (Maybe UTCTime)

-- | A base64-encoded string that contains authorization data for the
--   specified Amazon ECR registry. When the string is decoded, it is
--   presented in the format <tt>user:password</tt> for private registry
--   authentication using <tt>docker login</tt>.
authorizationData_authorizationToken :: Lens' AuthorizationData (Maybe Text)

-- | The tag status with which to filter your DescribeImages results. You
--   can filter results based on whether they are <tt>TAGGED</tt> or
--   <tt>UNTAGGED</tt>.
describeImagesFilter_tagStatus :: Lens' DescribeImagesFilter (Maybe TagStatus)

-- | If you use the <tt>KMS</tt> encryption type, specify the KMS key to
--   use for encryption. The alias, key ID, or full ARN of the KMS key can
--   be specified. The key must exist in the same Region as the repository.
--   If no key is specified, the default Amazon Web Services managed KMS
--   key for Amazon ECR will be used.
encryptionConfiguration_kmsKey :: Lens' EncryptionConfiguration (Maybe Text)

-- | The encryption type to use.
--   
--   If you use the <tt>KMS</tt> encryption type, the contents of the
--   repository will be encrypted using server-side encryption with Key
--   Management Service key stored in KMS. When you use KMS to encrypt your
--   data, you can either use the default Amazon Web Services managed KMS
--   key for Amazon ECR, or specify your own KMS key, which you already
--   created. For more information, see <a>Protecting data using
--   server-side encryption with an KMS key stored in Key Management
--   Service (SSE-KMS)</a> in the <i>Amazon Simple Storage Service Console
--   Developer Guide.</i>.
--   
--   If you use the <tt>AES256</tt> encryption type, Amazon ECR uses
--   server-side encryption with Amazon S3-managed encryption keys which
--   encrypts the images in the repository using an AES-256 encryption
--   algorithm. For more information, see <a>Protecting data using
--   server-side encryption with Amazon S3-managed encryption keys
--   (SSE-S3)</a> in the <i>Amazon Simple Storage Service Console Developer
--   Guide.</i>.
encryptionConfiguration_encryptionType :: Lens' EncryptionConfiguration EncryptionType

-- | The Amazon Web Services account ID associated with the registry
--   containing the image.
image_registryId :: Lens' Image (Maybe Text)

-- | The image manifest associated with the image.
image_imageManifest :: Lens' Image (Maybe Text)

-- | The name of the repository associated with the image.
image_repositoryName :: Lens' Image (Maybe Text)

-- | An object containing the image tag and image digest associated with an
--   image.
image_imageId :: Lens' Image (Maybe ImageIdentifier)

-- | The manifest media type of the image.
image_imageManifestMediaType :: Lens' Image (Maybe Text)

-- | The <tt>sha256</tt> digest of the image manifest.
imageDetail_imageDigest :: Lens' ImageDetail (Maybe Text)

-- | The current state of the scan.
imageDetail_imageScanStatus :: Lens' ImageDetail (Maybe ImageScanStatus)

-- | The list of tags associated with this image.
imageDetail_imageTags :: Lens' ImageDetail (Maybe [Text])

-- | The Amazon Web Services account ID associated with the registry to
--   which this image belongs.
imageDetail_registryId :: Lens' ImageDetail (Maybe Text)

-- | The name of the repository to which this image belongs.
imageDetail_repositoryName :: Lens' ImageDetail (Maybe Text)

-- | The artifact media type of the image.
imageDetail_artifactMediaType :: Lens' ImageDetail (Maybe Text)

-- | The size, in bytes, of the image in the repository.
--   
--   If the image is a manifest list, this will be the max size of all
--   manifests in the list.
--   
--   Beginning with Docker version 1.9, the Docker client compresses image
--   layers before pushing them to a V2 Docker registry. The output of the
--   <tt>docker images</tt> command shows the uncompressed image size, so
--   it may return a larger image size than the image sizes returned by
--   DescribeImages.
imageDetail_imageSizeInBytes :: Lens' ImageDetail (Maybe Integer)

-- | The media type of the image manifest.
imageDetail_imageManifestMediaType :: Lens' ImageDetail (Maybe Text)

-- | The date and time, expressed in standard JavaScript date format, at
--   which the current image was pushed to the repository.
imageDetail_imagePushedAt :: Lens' ImageDetail (Maybe UTCTime)

-- | A summary of the last completed image scan.
imageDetail_imageScanFindingsSummary :: Lens' ImageDetail (Maybe ImageScanFindingsSummary)

-- | The code associated with the failure.
imageFailure_failureCode :: Lens' ImageFailure (Maybe ImageFailureCode)

-- | The image ID associated with the failure.
imageFailure_imageId :: Lens' ImageFailure (Maybe ImageIdentifier)

-- | The reason for the failure.
imageFailure_failureReason :: Lens' ImageFailure (Maybe Text)

-- | The <tt>sha256</tt> digest of the image manifest.
imageIdentifier_imageDigest :: Lens' ImageIdentifier (Maybe Text)

-- | The tag used for the image.
imageIdentifier_imageTag :: Lens' ImageIdentifier (Maybe Text)

-- | The image replication status.
imageReplicationStatus_status :: Lens' ImageReplicationStatus (Maybe ReplicationStatus)

-- | The AWS account ID associated with the registry to which the image
--   belongs.
imageReplicationStatus_registryId :: Lens' ImageReplicationStatus (Maybe Text)

-- | The failure code for a replication that has failed.
imageReplicationStatus_failureCode :: Lens' ImageReplicationStatus (Maybe Text)

-- | The destination Region for the image replication.
imageReplicationStatus_region :: Lens' ImageReplicationStatus (Maybe Text)

-- | A link containing additional details about the security vulnerability.
imageScanFinding_uri :: Lens' ImageScanFinding (Maybe Text)

-- | The finding severity.
imageScanFinding_severity :: Lens' ImageScanFinding (Maybe FindingSeverity)

-- | The name associated with the finding, usually a CVE number.
imageScanFinding_name :: Lens' ImageScanFinding (Maybe Text)

-- | A collection of attributes of the host from which the finding is
--   generated.
imageScanFinding_attributes :: Lens' ImageScanFinding (Maybe [Attribute])

-- | The description of the finding.
imageScanFinding_description :: Lens' ImageScanFinding (Maybe Text)

-- | The findings from the image scan.
imageScanFindings_findings :: Lens' ImageScanFindings (Maybe [ImageScanFinding])

-- | The time of the last completed image scan.
imageScanFindings_imageScanCompletedAt :: Lens' ImageScanFindings (Maybe UTCTime)

-- | The time when the vulnerability data was last scanned.
imageScanFindings_vulnerabilitySourceUpdatedAt :: Lens' ImageScanFindings (Maybe UTCTime)

-- | The image vulnerability counts, sorted by severity.
imageScanFindings_findingSeverityCounts :: Lens' ImageScanFindings (Maybe (HashMap FindingSeverity Natural))

-- | The time of the last completed image scan.
imageScanFindingsSummary_imageScanCompletedAt :: Lens' ImageScanFindingsSummary (Maybe UTCTime)

-- | The time when the vulnerability data was last scanned.
imageScanFindingsSummary_vulnerabilitySourceUpdatedAt :: Lens' ImageScanFindingsSummary (Maybe UTCTime)

-- | The image vulnerability counts, sorted by severity.
imageScanFindingsSummary_findingSeverityCounts :: Lens' ImageScanFindingsSummary (Maybe (HashMap FindingSeverity Natural))

-- | The current state of an image scan.
imageScanStatus_status :: Lens' ImageScanStatus (Maybe ScanStatus)

-- | The description of the image scan status.
imageScanStatus_description :: Lens' ImageScanStatus (Maybe Text)

-- | The setting that determines whether images are scanned after being
--   pushed to a repository. If set to <tt>true</tt>, images will be
--   scanned after being pushed. If this parameter is not specified, it
--   will default to <tt>false</tt> and images will not be scanned unless a
--   scan is manually started with the <a>API_StartImageScan</a> API.
imageScanningConfiguration_scanOnPush :: Lens' ImageScanningConfiguration (Maybe Bool)

-- | The size, in bytes, of the image layer.
layer_layerSize :: Lens' Layer (Maybe Integer)

-- | The availability status of the image layer.
layer_layerAvailability :: Lens' Layer (Maybe LayerAvailability)

-- | The media type of the layer, such as
--   <tt>application/vnd.docker.image.rootfs.diff.tar.gzip</tt> or
--   <tt>application/vnd.oci.image.layer.v1.tar+gzip</tt>.
layer_mediaType :: Lens' Layer (Maybe Text)

-- | The <tt>sha256</tt> digest of the image layer.
layer_layerDigest :: Lens' Layer (Maybe Text)

-- | The failure code associated with the failure.
layerFailure_failureCode :: Lens' LayerFailure (Maybe LayerFailureCode)

-- | The reason for the failure.
layerFailure_failureReason :: Lens' LayerFailure (Maybe Text)

-- | The layer digest associated with the failure.
layerFailure_layerDigest :: Lens' LayerFailure (Maybe Text)

-- | The tag status of the image.
lifecyclePolicyPreviewFilter_tagStatus :: Lens' LifecyclePolicyPreviewFilter (Maybe TagStatus)

-- | The <tt>sha256</tt> digest of the image manifest.
lifecyclePolicyPreviewResult_imageDigest :: Lens' LifecyclePolicyPreviewResult (Maybe Text)

-- | The priority of the applied rule.
lifecyclePolicyPreviewResult_appliedRulePriority :: Lens' LifecyclePolicyPreviewResult (Maybe Natural)

-- | The list of tags associated with this image.
lifecyclePolicyPreviewResult_imageTags :: Lens' LifecyclePolicyPreviewResult (Maybe [Text])

-- | The type of action to be taken.
lifecyclePolicyPreviewResult_action :: Lens' LifecyclePolicyPreviewResult (Maybe LifecyclePolicyRuleAction)

-- | The date and time, expressed in standard JavaScript date format, at
--   which the current image was pushed to the repository.
lifecyclePolicyPreviewResult_imagePushedAt :: Lens' LifecyclePolicyPreviewResult (Maybe UTCTime)

-- | The number of expiring images.
lifecyclePolicyPreviewSummary_expiringImageTotalCount :: Lens' LifecyclePolicyPreviewSummary (Maybe Natural)

-- | The type of action to be taken.
lifecyclePolicyRuleAction_type :: Lens' LifecyclePolicyRuleAction (Maybe ImageActionType)

-- | The tag status with which to filter your ListImages results. You can
--   filter results based on whether they are <tt>TAGGED</tt> or
--   <tt>UNTAGGED</tt>.
listImagesFilter_tagStatus :: Lens' ListImagesFilter (Maybe TagStatus)

-- | An array of objects representing the replication destinations and
--   repository filters for a replication configuration.
replicationConfiguration_rules :: Lens' ReplicationConfiguration [ReplicationRule]

-- | The Region to replicate to.
replicationDestination_region :: Lens' ReplicationDestination Text

-- | The Amazon Web Services account ID of the Amazon ECR private registry
--   to replicate to. When configuring cross-Region replication within your
--   own registry, specify your own account ID.
replicationDestination_registryId :: Lens' ReplicationDestination Text

-- | An array of objects representing the filters for a replication rule.
--   Specifying a repository filter for a replication rule provides a
--   method for controlling which repositories in a private registry are
--   replicated.
replicationRule_repositoryFilters :: Lens' ReplicationRule (Maybe (NonEmpty RepositoryFilter))

-- | An array of objects representing the destination for a replication
--   rule.
replicationRule_destinations :: Lens' ReplicationRule [ReplicationDestination]

-- | The encryption configuration for the repository. This determines how
--   the contents of your repository are encrypted at rest.
repository_encryptionConfiguration :: Lens' Repository (Maybe EncryptionConfiguration)

-- | The URI for the repository. You can use this URI for container image
--   <tt>push</tt> and <tt>pull</tt> operations.
repository_repositoryUri :: Lens' Repository (Maybe Text)

-- | The Amazon Web Services account ID associated with the registry that
--   contains the repository.
repository_registryId :: Lens' Repository (Maybe Text)

-- | The date and time, in JavaScript date format, when the repository was
--   created.
repository_createdAt :: Lens' Repository (Maybe UTCTime)

-- | The name of the repository.
repository_repositoryName :: Lens' Repository (Maybe Text)

-- | The Amazon Resource Name (ARN) that identifies the repository. The ARN
--   contains the <tt>arn:aws:ecr</tt> namespace, followed by the region of
--   the repository, Amazon Web Services account ID of the repository
--   owner, repository namespace, and repository name. For example,
--   <tt>arn:aws:ecr:region:012345678910:repository/test</tt>.
repository_repositoryArn :: Lens' Repository (Maybe Text)

-- | Undocumented member.
repository_imageScanningConfiguration :: Lens' Repository (Maybe ImageScanningConfiguration)

-- | The tag mutability setting for the repository.
repository_imageTagMutability :: Lens' Repository (Maybe ImageTagMutability)

-- | The repository filter details. When the <tt>PREFIX_MATCH</tt> filter
--   type is specified, this value is required and should be the repository
--   name prefix to configure replication for.
repositoryFilter_filter :: Lens' RepositoryFilter Text

-- | The repository filter type. The only supported value is
--   <tt>PREFIX_MATCH</tt>, which is a repository name prefix specified
--   with the <tt>filter</tt> parameter.
repositoryFilter_filterType :: Lens' RepositoryFilter RepositoryFilterType

-- | One part of a key-value pair that make up a tag. A <tt>key</tt> is a
--   general label that acts like a category for more specific tag values.
tag_key :: Lens' Tag (Maybe Text)

-- | The optional part of a key-value pair that make up a tag. A
--   <tt>value</tt> acts as a descriptor within a tag category (key).
tag_value :: Lens' Tag (Maybe Text)


module Network.AWS.ECR.Waiters

-- | Polls <a>DescribeImageScanFindings</a> every 5 seconds until a
--   successful state is reached. An error is returned after 60 failed
--   checks.
newImageScanComplete :: Wait DescribeImageScanFindings

-- | Polls <a>GetLifecyclePolicyPreview</a> every 5 seconds until a
--   successful state is reached. An error is returned after 20 failed
--   checks.
newLifecyclePolicyPreviewComplete :: Wait GetLifecyclePolicyPreview


-- | Derived from API version <tt>2015-09-21</tt> of the AWS service
--   descriptions, licensed under Apache 2.0.
--   
--   Amazon Elastic Container Registry
--   
--   Amazon Elastic Container Registry (Amazon ECR) is a managed container
--   image registry service. Customers can use the familiar Docker CLI, or
--   their preferred client, to push, pull, and manage images. Amazon ECR
--   provides a secure, scalable, and reliable registry for your Docker or
--   Open Container Initiative (OCI) images. Amazon ECR supports private
--   repositories with resource-based permissions using IAM so that
--   specific users or Amazon EC2 instances can access repositories and
--   images.
--   
--   Amazon ECR has service endpoints in each supported Region. For more
--   information, see <a>Amazon ECR endpoints</a> in the <i>Amazon Web
--   Services General Reference</i>.
module Network.AWS.ECR

-- | API version <tt>2015-09-21</tt> of the Amazon EC2 Container Registry
--   SDK configuration.
defaultService :: Service

-- | The upload could not be found, or the specified upload ID is not valid
--   for this repository.
_UploadNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified image is tagged with a tag that already exists. The
--   repository is configured for tag immutability.
_ImageTagAlreadyExistsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The list of tags on the repository is over the limit. The maximum
--   number of tags that can be applied to a repository is 50.
_TooManyTagsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified repository could not be found. Check the spelling of the
--   specified repository and ensure that you are performing operations on
--   the correct registry.
_RepositoryNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified image has already been pushed, and there were no changes
--   to the manifest or image tag after the last push.
_ImageAlreadyExistsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified image scan could not be found. Ensure that image
--   scanning is enabled on the repository and try again.
_ScanNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified image digest does not match the digest that Amazon ECR
--   calculated for the image.
_ImageDigestDoesNotMatchException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The image requested does not exist in the specified repository.
_ImageNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Layer parts must be at least 5 MiB in size.
_LayerPartTooSmallException :: AsError a => Getting (First ServiceError) a ServiceError

-- | An invalid parameter has been specified. Tag keys can have a maximum
--   character length of 128 characters, and tag values can have a maximum
--   length of 256 characters.
_InvalidTagParameterException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The layer digest calculation performed by Amazon ECR upon receipt of
--   the image layer does not match the digest specified.
_InvalidLayerException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The layer part size is not valid, or the first byte specified is not
--   consecutive to the last byte of a previous layer part upload.
_InvalidLayerPartException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The manifest list is referencing an image that does not exist.
_ReferencedImagesNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified parameter is invalid. Review the available parameters
--   for the API request.
_InvalidParameterException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified layers could not be found, or the specified layer is not
--   valid for this repository.
_LayersNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | There was an exception validating this request.
_ValidationException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified layer upload does not contain any layer parts.
_EmptyUploadException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The registry doesn't have an associated registry policy.
_RegistryPolicyNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The operation did not succeed because it would have exceeded a service
--   limit for your account. For more information, see <a>Amazon ECR
--   service quotas</a> in the Amazon Elastic Container Registry User
--   Guide.
_LimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The previous lifecycle policy preview request has not completed. Wait
--   and try again.
_LifecyclePolicyPreviewInProgressException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified repository and registry combination does not have an
--   associated repository policy.
_RepositoryPolicyNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified repository already exists in the specified registry.
_RepositoryAlreadyExistsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | There is no dry run for this repository.
_LifecyclePolicyPreviewNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified layer is not available because it is not associated with
--   an image. Unassociated image layers may be cleaned up at any time.
_LayerInaccessibleException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified repository contains images. To delete a repository that
--   contains images, you must force the deletion with the <tt>force</tt>
--   parameter.
_RepositoryNotEmptyException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The image is of a type that cannot be scanned.
_UnsupportedImageTypeException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The lifecycle policy could not be found, and no policy is set to the
--   repository.
_LifecyclePolicyNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The image layer already exists in the associated repository.
_LayerAlreadyExistsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | These errors are usually caused by a server-side issue.
_ServerException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The operation failed due to a KMS exception.
_KmsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Polls <a>DescribeImageScanFindings</a> every 5 seconds until a
--   successful state is reached. An error is returned after 60 failed
--   checks.
newImageScanComplete :: Wait DescribeImageScanFindings

-- | Polls <a>GetLifecyclePolicyPreview</a> every 5 seconds until a
--   successful state is reached. An error is returned after 20 failed
--   checks.
newLifecyclePolicyPreviewComplete :: Wait GetLifecyclePolicyPreview

-- | <i>See:</i> <a>newUploadLayerPart</a> smart constructor.
data UploadLayerPart
UploadLayerPart' :: Maybe Text -> Text -> Text -> Natural -> Natural -> Base64 -> UploadLayerPart

-- | Create a value of <a>UploadLayerPart</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:UploadLayerPart'</a>,
--   <a>uploadLayerPart_registryId</a> - The Amazon Web Services account ID
--   associated with the registry to which you are uploading layer parts.
--   If you do not specify a registry, the default registry is assumed.
--   
--   <a>$sel:repositoryName:UploadLayerPart'</a>,
--   <a>uploadLayerPart_repositoryName</a> - The name of the repository to
--   which you are uploading layer parts.
--   
--   <a>$sel:uploadId:UploadLayerPart'</a>, <a>uploadLayerPart_uploadId</a>
--   - The upload ID from a previous InitiateLayerUpload operation to
--   associate with the layer part upload.
--   
--   <a>$sel:partFirstByte:UploadLayerPart'</a>,
--   <a>uploadLayerPart_partFirstByte</a> - The position of the first byte
--   of the layer part witin the overall image layer.
--   
--   <a>$sel:partLastByte:UploadLayerPart'</a>,
--   <a>uploadLayerPart_partLastByte</a> - The position of the last byte of
--   the layer part within the overall image layer.
--   
--   <a>$sel:layerPartBlob:UploadLayerPart'</a>,
--   <a>uploadLayerPart_layerPartBlob</a> - The base64-encoded layer part
--   payload.-- -- <i>Note:</i> This <tt>Lens</tt> automatically encodes
--   and decodes Base64 data. -- The underlying isomorphism will encode to
--   Base64 representation during -- serialisation, and decode from Base64
--   representation during deserialisation. -- This <tt>Lens</tt> accepts
--   and returns only raw unencoded data.
newUploadLayerPart :: Text -> Text -> Natural -> Natural -> ByteString -> UploadLayerPart

-- | <i>See:</i> <a>newUploadLayerPartResponse</a> smart constructor.
data UploadLayerPartResponse
UploadLayerPartResponse' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Natural -> Int -> UploadLayerPartResponse

-- | Create a value of <a>UploadLayerPartResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:uploadId:UploadLayerPart'</a>,
--   <a>uploadLayerPartResponse_uploadId</a> - The upload ID associated
--   with the request.
--   
--   <a>$sel:registryId:UploadLayerPart'</a>,
--   <a>uploadLayerPartResponse_registryId</a> - The registry ID associated
--   with the request.
--   
--   <a>$sel:repositoryName:UploadLayerPart'</a>,
--   <a>uploadLayerPartResponse_repositoryName</a> - The repository name
--   associated with the request.
--   
--   <a>$sel:lastByteReceived:UploadLayerPartResponse'</a>,
--   <a>uploadLayerPartResponse_lastByteReceived</a> - The integer value of
--   the last byte received in the request.
--   
--   <a>$sel:httpStatus:UploadLayerPartResponse'</a>,
--   <a>uploadLayerPartResponse_httpStatus</a> - The response's http status
--   code.
newUploadLayerPartResponse :: Int -> UploadLayerPartResponse

-- | <i>See:</i> <a>newPutLifecyclePolicy</a> smart constructor.
data PutLifecyclePolicy
PutLifecyclePolicy' :: Maybe Text -> Text -> Text -> PutLifecyclePolicy

-- | Create a value of <a>PutLifecyclePolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:PutLifecyclePolicy'</a>,
--   <a>putLifecyclePolicy_registryId</a> - The Amazon Web Services account
--   ID associated with the registry that contains the repository. If you
--   do  not specify a registry, the default registry is assumed.
--   
--   <a>$sel:repositoryName:PutLifecyclePolicy'</a>,
--   <a>putLifecyclePolicy_repositoryName</a> - The name of the repository
--   to receive the policy.
--   
--   <a>$sel:lifecyclePolicyText:PutLifecyclePolicy'</a>,
--   <a>putLifecyclePolicy_lifecyclePolicyText</a> - The JSON repository
--   policy text to apply to the repository.
newPutLifecyclePolicy :: Text -> Text -> PutLifecyclePolicy

-- | <i>See:</i> <a>newPutLifecyclePolicyResponse</a> smart constructor.
data PutLifecyclePolicyResponse
PutLifecyclePolicyResponse' :: Maybe Text -> Maybe Text -> Maybe Text -> Int -> PutLifecyclePolicyResponse

-- | Create a value of <a>PutLifecyclePolicyResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:PutLifecyclePolicy'</a>,
--   <a>putLifecyclePolicyResponse_registryId</a> - The registry ID
--   associated with the request.
--   
--   <a>$sel:repositoryName:PutLifecyclePolicy'</a>,
--   <a>putLifecyclePolicyResponse_repositoryName</a> - The repository name
--   associated with the request.
--   
--   <a>$sel:lifecyclePolicyText:PutLifecyclePolicy'</a>,
--   <a>putLifecyclePolicyResponse_lifecyclePolicyText</a> - The JSON
--   repository policy text.
--   
--   <a>$sel:httpStatus:PutLifecyclePolicyResponse'</a>,
--   <a>putLifecyclePolicyResponse_httpStatus</a> - The response's http
--   status code.
newPutLifecyclePolicyResponse :: Int -> PutLifecyclePolicyResponse

-- | <i>See:</i> <a>newPutRegistryPolicy</a> smart constructor.
data PutRegistryPolicy
PutRegistryPolicy' :: Text -> PutRegistryPolicy

-- | Create a value of <a>PutRegistryPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:policyText:PutRegistryPolicy'</a>,
--   <a>putRegistryPolicy_policyText</a> - The JSON policy text to apply to
--   your registry. The policy text follows the same format as IAM policy
--   text. For more information, see <a>Registry permissions</a> in the
--   <i>Amazon Elastic Container Registry User Guide</i>.
newPutRegistryPolicy :: Text -> PutRegistryPolicy

-- | <i>See:</i> <a>newPutRegistryPolicyResponse</a> smart constructor.
data PutRegistryPolicyResponse
PutRegistryPolicyResponse' :: Maybe Text -> Maybe Text -> Int -> PutRegistryPolicyResponse

-- | Create a value of <a>PutRegistryPolicyResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:PutRegistryPolicyResponse'</a>,
--   <a>putRegistryPolicyResponse_registryId</a> - The registry ID.
--   
--   <a>$sel:policyText:PutRegistryPolicy'</a>,
--   <a>putRegistryPolicyResponse_policyText</a> - The JSON policy text for
--   your registry.
--   
--   <a>$sel:httpStatus:PutRegistryPolicyResponse'</a>,
--   <a>putRegistryPolicyResponse_httpStatus</a> - The response's http
--   status code.
newPutRegistryPolicyResponse :: Int -> PutRegistryPolicyResponse

-- | <i>See:</i> <a>newStartLifecyclePolicyPreview</a> smart constructor.
data StartLifecyclePolicyPreview
StartLifecyclePolicyPreview' :: Maybe Text -> Maybe Text -> Text -> StartLifecyclePolicyPreview

-- | Create a value of <a>StartLifecyclePolicyPreview</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:StartLifecyclePolicyPreview'</a>,
--   <a>startLifecyclePolicyPreview_registryId</a> - The Amazon Web
--   Services account ID associated with the registry that contains the
--   repository. If you do not specify a registry, the default registry is
--   assumed.
--   
--   <a>$sel:lifecyclePolicyText:StartLifecyclePolicyPreview'</a>,
--   <a>startLifecyclePolicyPreview_lifecyclePolicyText</a> - The policy to
--   be evaluated against. If you do not specify a policy, the current
--   policy for the repository is used.
--   
--   <a>$sel:repositoryName:StartLifecyclePolicyPreview'</a>,
--   <a>startLifecyclePolicyPreview_repositoryName</a> - The name of the
--   repository to be evaluated.
newStartLifecyclePolicyPreview :: Text -> StartLifecyclePolicyPreview

-- | <i>See:</i> <a>newStartLifecyclePolicyPreviewResponse</a> smart
--   constructor.
data StartLifecyclePolicyPreviewResponse
StartLifecyclePolicyPreviewResponse' :: Maybe LifecyclePolicyPreviewStatus -> Maybe Text -> Maybe Text -> Maybe Text -> Int -> StartLifecyclePolicyPreviewResponse

-- | Create a value of <a>StartLifecyclePolicyPreviewResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:StartLifecyclePolicyPreviewResponse'</a>,
--   <a>startLifecyclePolicyPreviewResponse_status</a> - The status of the
--   lifecycle policy preview request.
--   
--   <a>$sel:registryId:StartLifecyclePolicyPreview'</a>,
--   <a>startLifecyclePolicyPreviewResponse_registryId</a> - The registry
--   ID associated with the request.
--   
--   <a>$sel:repositoryName:StartLifecyclePolicyPreview'</a>,
--   <a>startLifecyclePolicyPreviewResponse_repositoryName</a> - The
--   repository name associated with the request.
--   
--   <a>$sel:lifecyclePolicyText:StartLifecyclePolicyPreview'</a>,
--   <a>startLifecyclePolicyPreviewResponse_lifecyclePolicyText</a> - The
--   JSON repository policy text.
--   
--   <a>$sel:httpStatus:StartLifecyclePolicyPreviewResponse'</a>,
--   <a>startLifecyclePolicyPreviewResponse_httpStatus</a> - The response's
--   http status code.
newStartLifecyclePolicyPreviewResponse :: Int -> StartLifecyclePolicyPreviewResponse

-- | <i>See:</i> <a>newDescribeRepositories</a> smart constructor.
data DescribeRepositories
DescribeRepositories' :: Maybe Text -> Maybe (NonEmpty Text) -> Maybe Natural -> Maybe Text -> DescribeRepositories

-- | Create a value of <a>DescribeRepositories</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:DescribeRepositories'</a>,
--   <a>describeRepositories_nextToken</a> - The <tt>nextToken</tt> value
--   returned from a previous paginated <tt>DescribeRepositories</tt>
--   request where <tt>maxResults</tt> was used and the results exceeded
--   the value of that parameter. Pagination continues from the end of the
--   previous results that returned the <tt>nextToken</tt> value. This
--   value is <tt>null</tt> when there are no more results to return. This
--   option cannot be used when you specify repositories with
--   <tt>repositoryNames</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
--   
--   <a>$sel:repositoryNames:DescribeRepositories'</a>,
--   <a>describeRepositories_repositoryNames</a> - A list of repositories
--   to describe. If this parameter is omitted, then all repositories in a
--   registry are described.
--   
--   <a>$sel:maxResults:DescribeRepositories'</a>,
--   <a>describeRepositories_maxResults</a> - The maximum number of
--   repository results returned by <tt>DescribeRepositories</tt> in
--   paginated output. When this parameter is used,
--   <tt>DescribeRepositories</tt> only returns <tt>maxResults</tt> results
--   in a single page along with a <tt>nextToken</tt> response element. The
--   remaining results of the initial request can be seen by sending
--   another <tt>DescribeRepositories</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 1000. If
--   this parameter is not used, then <tt>DescribeRepositories</tt> returns
--   up to 100 results and a <tt>nextToken</tt> value, if applicable. This
--   option cannot be used when you specify repositories with
--   <tt>repositoryNames</tt>.
--   
--   <a>$sel:registryId:DescribeRepositories'</a>,
--   <a>describeRepositories_registryId</a> - The Amazon Web Services
--   account ID associated with the registry that contains the repositories
--   to be described. If you do not specify a registry, the default
--   registry is assumed.
newDescribeRepositories :: DescribeRepositories

-- | <i>See:</i> <a>newDescribeRepositoriesResponse</a> smart constructor.
data DescribeRepositoriesResponse
DescribeRepositoriesResponse' :: Maybe Text -> Maybe [Repository] -> Int -> DescribeRepositoriesResponse

-- | Create a value of <a>DescribeRepositoriesResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:DescribeRepositories'</a>,
--   <a>describeRepositoriesResponse_nextToken</a> - The <tt>nextToken</tt>
--   value to include in a future <tt>DescribeRepositories</tt> request.
--   When the results of a <tt>DescribeRepositories</tt> request exceed
--   <tt>maxResults</tt>, this value can be used to retrieve the next page
--   of results. This value is <tt>null</tt> when there are no more results
--   to return.
--   
--   <a>$sel:repositories:DescribeRepositoriesResponse'</a>,
--   <a>describeRepositoriesResponse_repositories</a> - A list of
--   repository objects corresponding to valid repositories.
--   
--   <a>$sel:httpStatus:DescribeRepositoriesResponse'</a>,
--   <a>describeRepositoriesResponse_httpStatus</a> - The response's http
--   status code.
newDescribeRepositoriesResponse :: Int -> DescribeRepositoriesResponse

-- | <i>See:</i> <a>newPutImage</a> smart constructor.
data PutImage
PutImage' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Text -> Text -> PutImage

-- | Create a value of <a>PutImage</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:imageDigest:PutImage'</a>, <a>putImage_imageDigest</a> - The
--   image digest of the image manifest corresponding to the image.
--   
--   <a>$sel:registryId:PutImage'</a>, <a>putImage_registryId</a> - The
--   Amazon Web Services account ID associated with the registry that
--   contains the repository in which to put the image. If you do not
--   specify a registry, the default registry is assumed.
--   
--   <a>$sel:imageTag:PutImage'</a>, <a>putImage_imageTag</a> - The tag to
--   associate with the image. This parameter is required for images that
--   use the Docker Image Manifest V2 Schema 2 or Open Container Initiative
--   (OCI) formats.
--   
--   <a>$sel:imageManifestMediaType:PutImage'</a>,
--   <a>putImage_imageManifestMediaType</a> - The media type of the image
--   manifest. If you push an image manifest that does not contain the
--   <tt>mediaType</tt> field, you must specify the
--   <tt>imageManifestMediaType</tt> in the request.
--   
--   <a>$sel:repositoryName:PutImage'</a>, <a>putImage_repositoryName</a> -
--   The name of the repository in which to put the image.
--   
--   <a>$sel:imageManifest:PutImage'</a>, <a>putImage_imageManifest</a> -
--   The image manifest corresponding to the image to be uploaded.
newPutImage :: Text -> Text -> PutImage

-- | <i>See:</i> <a>newPutImageResponse</a> smart constructor.
data PutImageResponse
PutImageResponse' :: Maybe Image -> Int -> PutImageResponse

-- | Create a value of <a>PutImageResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:image:PutImageResponse'</a>, <a>putImageResponse_image</a> -
--   Details of the image uploaded.
--   
--   <a>$sel:httpStatus:PutImageResponse'</a>,
--   <a>putImageResponse_httpStatus</a> - The response's http status code.
newPutImageResponse :: Int -> PutImageResponse

-- | <i>See:</i> <a>newListImages</a> smart constructor.
data ListImages
ListImages' :: Maybe Text -> Maybe Natural -> Maybe Text -> Maybe ListImagesFilter -> Text -> ListImages

-- | Create a value of <a>ListImages</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListImages'</a>, <a>listImages_nextToken</a> - The
--   <tt>nextToken</tt> value returned from a previous paginated
--   <tt>ListImages</tt> request where <tt>maxResults</tt> was used and the
--   results exceeded the value of that parameter. Pagination continues
--   from the end of the previous results that returned the
--   <tt>nextToken</tt> value. This value is <tt>null</tt> when there are
--   no more results to return.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
--   
--   <a>$sel:maxResults:ListImages'</a>, <a>listImages_maxResults</a> - The
--   maximum number of image results returned by <tt>ListImages</tt> in
--   paginated output. When this parameter is used, <tt>ListImages</tt>
--   only returns <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt> response element. The remaining results of the
--   initial request can be seen by sending another <tt>ListImages</tt>
--   request with the returned <tt>nextToken</tt> value. This value can be
--   between 1 and 1000. If this parameter is not used, then
--   <tt>ListImages</tt> returns up to 100 results and a <tt>nextToken</tt>
--   value, if applicable.
--   
--   <a>$sel:registryId:ListImages'</a>, <a>listImages_registryId</a> - The
--   Amazon Web Services account ID associated with the registry that
--   contains the repository in which to list images. If you do not specify
--   a registry, the default registry is assumed.
--   
--   <a>$sel:filter':ListImages'</a>, <a>listImages_filter</a> - The filter
--   key and value with which to filter your <tt>ListImages</tt> results.
--   
--   <a>$sel:repositoryName:ListImages'</a>,
--   <a>listImages_repositoryName</a> - The repository with image IDs to be
--   listed.
newListImages :: Text -> ListImages

-- | <i>See:</i> <a>newListImagesResponse</a> smart constructor.
data ListImagesResponse
ListImagesResponse' :: Maybe Text -> Maybe [ImageIdentifier] -> Int -> ListImagesResponse

-- | Create a value of <a>ListImagesResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListImages'</a>, <a>listImagesResponse_nextToken</a>
--   - The <tt>nextToken</tt> value to include in a future
--   <tt>ListImages</tt> request. When the results of a <tt>ListImages</tt>
--   request exceed <tt>maxResults</tt>, this value can be used to retrieve
--   the next page of results. This value is <tt>null</tt> when there are
--   no more results to return.
--   
--   <a>$sel:imageIds:ListImagesResponse'</a>,
--   <a>listImagesResponse_imageIds</a> - The list of image IDs for the
--   requested repository.
--   
--   <a>$sel:httpStatus:ListImagesResponse'</a>,
--   <a>listImagesResponse_httpStatus</a> - The response's http status
--   code.
newListImagesResponse :: Int -> ListImagesResponse

-- | <i>See:</i> <a>newGetRegistryPolicy</a> smart constructor.
data GetRegistryPolicy
GetRegistryPolicy' :: GetRegistryPolicy

-- | Create a value of <a>GetRegistryPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newGetRegistryPolicy :: GetRegistryPolicy

-- | <i>See:</i> <a>newGetRegistryPolicyResponse</a> smart constructor.
data GetRegistryPolicyResponse
GetRegistryPolicyResponse' :: Maybe Text -> Maybe Text -> Int -> GetRegistryPolicyResponse

-- | Create a value of <a>GetRegistryPolicyResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:GetRegistryPolicyResponse'</a>,
--   <a>getRegistryPolicyResponse_registryId</a> - The ID of the registry.
--   
--   <a>$sel:policyText:GetRegistryPolicyResponse'</a>,
--   <a>getRegistryPolicyResponse_policyText</a> - The JSON text of the
--   permissions policy for a registry.
--   
--   <a>$sel:httpStatus:GetRegistryPolicyResponse'</a>,
--   <a>getRegistryPolicyResponse_httpStatus</a> - The response's http
--   status code.
newGetRegistryPolicyResponse :: Int -> GetRegistryPolicyResponse

-- | <i>See:</i> <a>newInitiateLayerUpload</a> smart constructor.
data InitiateLayerUpload
InitiateLayerUpload' :: Maybe Text -> Text -> InitiateLayerUpload

-- | Create a value of <a>InitiateLayerUpload</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:InitiateLayerUpload'</a>,
--   <a>initiateLayerUpload_registryId</a> - The Amazon Web Services
--   account ID associated with the registry to which you intend to upload
--   layers. If you do not specify a registry, the default registry is
--   assumed.
--   
--   <a>$sel:repositoryName:InitiateLayerUpload'</a>,
--   <a>initiateLayerUpload_repositoryName</a> - The name of the repository
--   to which you intend to upload layers.
newInitiateLayerUpload :: Text -> InitiateLayerUpload

-- | <i>See:</i> <a>newInitiateLayerUploadResponse</a> smart constructor.
data InitiateLayerUploadResponse
InitiateLayerUploadResponse' :: Maybe Text -> Maybe Natural -> Int -> InitiateLayerUploadResponse

-- | Create a value of <a>InitiateLayerUploadResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:uploadId:InitiateLayerUploadResponse'</a>,
--   <a>initiateLayerUploadResponse_uploadId</a> - The upload ID for the
--   layer upload. This parameter is passed to further UploadLayerPart and
--   CompleteLayerUpload operations.
--   
--   <a>$sel:partSize:InitiateLayerUploadResponse'</a>,
--   <a>initiateLayerUploadResponse_partSize</a> - The size, in bytes, that
--   Amazon ECR expects future layer part uploads to be.
--   
--   <a>$sel:httpStatus:InitiateLayerUploadResponse'</a>,
--   <a>initiateLayerUploadResponse_httpStatus</a> - The response's http
--   status code.
newInitiateLayerUploadResponse :: Int -> InitiateLayerUploadResponse

-- | <i>See:</i> <a>newDescribeImageScanFindings</a> smart constructor.
data DescribeImageScanFindings
DescribeImageScanFindings' :: Maybe Text -> Maybe Natural -> Maybe Text -> Text -> ImageIdentifier -> DescribeImageScanFindings

-- | Create a value of <a>DescribeImageScanFindings</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:DescribeImageScanFindings'</a>,
--   <a>describeImageScanFindings_nextToken</a> - The <tt>nextToken</tt>
--   value returned from a previous paginated
--   <tt>DescribeImageScanFindings</tt> request where <tt>maxResults</tt>
--   was used and the results exceeded the value of that parameter.
--   Pagination continues from the end of the previous results that
--   returned the <tt>nextToken</tt> value. This value is null when there
--   are no more results to return.
--   
--   <a>$sel:maxResults:DescribeImageScanFindings'</a>,
--   <a>describeImageScanFindings_maxResults</a> - The maximum number of
--   image scan results returned by <tt>DescribeImageScanFindings</tt> in
--   paginated output. When this parameter is used,
--   <tt>DescribeImageScanFindings</tt> only returns <tt>maxResults</tt>
--   results in a single page along with a <tt>nextToken</tt> response
--   element. The remaining results of the initial request can be seen by
--   sending another <tt>DescribeImageScanFindings</tt> request with the
--   returned <tt>nextToken</tt> value. This value can be between 1 and
--   1000. If this parameter is not used, then
--   <tt>DescribeImageScanFindings</tt> returns up to 100 results and a
--   <tt>nextToken</tt> value, if applicable.
--   
--   <a>$sel:registryId:DescribeImageScanFindings'</a>,
--   <a>describeImageScanFindings_registryId</a> - The Amazon Web Services
--   account ID associated with the registry that contains the repository
--   in which to describe the image scan findings for. If you do not
--   specify a registry, the default registry is assumed.
--   
--   <a>$sel:repositoryName:DescribeImageScanFindings'</a>,
--   <a>describeImageScanFindings_repositoryName</a> - The repository for
--   the image for which to describe the scan findings.
--   
--   <a>$sel:imageId:DescribeImageScanFindings'</a>,
--   <a>describeImageScanFindings_imageId</a> - Undocumented member.
newDescribeImageScanFindings :: Text -> ImageIdentifier -> DescribeImageScanFindings

-- | <i>See:</i> <a>newDescribeImageScanFindingsResponse</a> smart
--   constructor.
data DescribeImageScanFindingsResponse
DescribeImageScanFindingsResponse' :: Maybe ImageScanStatus -> Maybe Text -> Maybe ImageScanFindings -> Maybe Text -> Maybe Text -> Maybe ImageIdentifier -> Int -> DescribeImageScanFindingsResponse

-- | Create a value of <a>DescribeImageScanFindingsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:imageScanStatus:DescribeImageScanFindingsResponse'</a>,
--   <a>describeImageScanFindingsResponse_imageScanStatus</a> - The current
--   state of the scan.
--   
--   <a>$sel:nextToken:DescribeImageScanFindings'</a>,
--   <a>describeImageScanFindingsResponse_nextToken</a> - The
--   <tt>nextToken</tt> value to include in a future
--   <tt>DescribeImageScanFindings</tt> request. When the results of a
--   <tt>DescribeImageScanFindings</tt> request exceed <tt>maxResults</tt>,
--   this value can be used to retrieve the next page of results. This
--   value is null when there are no more results to return.
--   
--   <a>$sel:imageScanFindings:DescribeImageScanFindingsResponse'</a>,
--   <a>describeImageScanFindingsResponse_imageScanFindings</a> - The
--   information contained in the image scan findings.
--   
--   <a>$sel:registryId:DescribeImageScanFindings'</a>,
--   <a>describeImageScanFindingsResponse_registryId</a> - The registry ID
--   associated with the request.
--   
--   <a>$sel:repositoryName:DescribeImageScanFindings'</a>,
--   <a>describeImageScanFindingsResponse_repositoryName</a> - The
--   repository name associated with the request.
--   
--   <a>$sel:imageId:DescribeImageScanFindings'</a>,
--   <a>describeImageScanFindingsResponse_imageId</a> - Undocumented
--   member.
--   
--   <a>$sel:httpStatus:DescribeImageScanFindingsResponse'</a>,
--   <a>describeImageScanFindingsResponse_httpStatus</a> - The response's
--   http status code.
newDescribeImageScanFindingsResponse :: Int -> DescribeImageScanFindingsResponse

-- | <i>See:</i> <a>newDeleteRepositoryPolicy</a> smart constructor.
data DeleteRepositoryPolicy
DeleteRepositoryPolicy' :: Maybe Text -> Text -> DeleteRepositoryPolicy

-- | Create a value of <a>DeleteRepositoryPolicy</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:DeleteRepositoryPolicy'</a>,
--   <a>deleteRepositoryPolicy_registryId</a> - The Amazon Web Services
--   account ID associated with the registry that contains the repository
--   policy to delete. If you do not specify a registry, the default
--   registry is assumed.
--   
--   <a>$sel:repositoryName:DeleteRepositoryPolicy'</a>,
--   <a>deleteRepositoryPolicy_repositoryName</a> - The name of the
--   repository that is associated with the repository policy to delete.
newDeleteRepositoryPolicy :: Text -> DeleteRepositoryPolicy

-- | <i>See:</i> <a>newDeleteRepositoryPolicyResponse</a> smart
--   constructor.
data DeleteRepositoryPolicyResponse
DeleteRepositoryPolicyResponse' :: Maybe Text -> Maybe Text -> Maybe Text -> Int -> DeleteRepositoryPolicyResponse

-- | Create a value of <a>DeleteRepositoryPolicyResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:DeleteRepositoryPolicy'</a>,
--   <a>deleteRepositoryPolicyResponse_registryId</a> - The registry ID
--   associated with the request.
--   
--   <a>$sel:repositoryName:DeleteRepositoryPolicy'</a>,
--   <a>deleteRepositoryPolicyResponse_repositoryName</a> - The repository
--   name associated with the request.
--   
--   <a>$sel:policyText:DeleteRepositoryPolicyResponse'</a>,
--   <a>deleteRepositoryPolicyResponse_policyText</a> - The JSON repository
--   policy that was deleted from the repository.
--   
--   <a>$sel:httpStatus:DeleteRepositoryPolicyResponse'</a>,
--   <a>deleteRepositoryPolicyResponse_httpStatus</a> - The response's http
--   status code.
newDeleteRepositoryPolicyResponse :: Int -> DeleteRepositoryPolicyResponse

-- | <i>See:</i> <a>newUntagResource</a> smart constructor.
data UntagResource
UntagResource' :: Text -> [Text] -> UntagResource

-- | Create a value of <a>UntagResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:UntagResource'</a>,
--   <a>untagResource_resourceArn</a> - The Amazon Resource Name (ARN) of
--   the resource from which to remove tags. Currently, the only supported
--   resource is an Amazon ECR repository.
--   
--   <a>$sel:tagKeys:UntagResource'</a>, <a>untagResource_tagKeys</a> - The
--   keys of the tags to be removed.
newUntagResource :: Text -> UntagResource

-- | <i>See:</i> <a>newUntagResourceResponse</a> smart constructor.
data UntagResourceResponse
UntagResourceResponse' :: Int -> UntagResourceResponse

-- | Create a value of <a>UntagResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UntagResourceResponse'</a>,
--   <a>untagResourceResponse_httpStatus</a> - The response's http status
--   code.
newUntagResourceResponse :: Int -> UntagResourceResponse

-- | <i>See:</i> <a>newTagResource</a> smart constructor.
data TagResource
TagResource' :: Text -> [Tag] -> TagResource

-- | Create a value of <a>TagResource</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:TagResource'</a>, <a>tagResource_resourceArn</a> -
--   The Amazon Resource Name (ARN) of the the resource to which to add
--   tags. Currently, the only supported resource is an Amazon ECR
--   repository.
--   
--   <a>$sel:tags:TagResource'</a>, <a>tagResource_tags</a> - The tags to
--   add to the resource. A tag is an array of key-value pairs. Tag keys
--   can have a maximum character length of 128 characters, and tag values
--   can have a maximum length of 256 characters.
newTagResource :: Text -> TagResource

-- | <i>See:</i> <a>newTagResourceResponse</a> smart constructor.
data TagResourceResponse
TagResourceResponse' :: Int -> TagResourceResponse

-- | Create a value of <a>TagResourceResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:TagResourceResponse'</a>,
--   <a>tagResourceResponse_httpStatus</a> - The response's http status
--   code.
newTagResourceResponse :: Int -> TagResourceResponse

-- | <i>See:</i> <a>newSetRepositoryPolicy</a> smart constructor.
data SetRepositoryPolicy
SetRepositoryPolicy' :: Maybe Text -> Maybe Bool -> Text -> Text -> SetRepositoryPolicy

-- | Create a value of <a>SetRepositoryPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:SetRepositoryPolicy'</a>,
--   <a>setRepositoryPolicy_registryId</a> - The Amazon Web Services
--   account ID associated with the registry that contains the repository.
--   If you do not specify a registry, the default registry is assumed.
--   
--   <a>$sel:force:SetRepositoryPolicy'</a>,
--   <a>setRepositoryPolicy_force</a> - If the policy you are attempting to
--   set on a repository policy would prevent you from setting another
--   policy in the future, you must force the SetRepositoryPolicy
--   operation. This is intended to prevent accidental repository lock
--   outs.
--   
--   <a>$sel:repositoryName:SetRepositoryPolicy'</a>,
--   <a>setRepositoryPolicy_repositoryName</a> - The name of the repository
--   to receive the policy.
--   
--   <a>$sel:policyText:SetRepositoryPolicy'</a>,
--   <a>setRepositoryPolicy_policyText</a> - The JSON repository policy
--   text to apply to the repository. For more information, see <a>Amazon
--   ECR repository policies</a> in the <i>Amazon Elastic Container
--   Registry User Guide</i>.
newSetRepositoryPolicy :: Text -> Text -> SetRepositoryPolicy

-- | <i>See:</i> <a>newSetRepositoryPolicyResponse</a> smart constructor.
data SetRepositoryPolicyResponse
SetRepositoryPolicyResponse' :: Maybe Text -> Maybe Text -> Maybe Text -> Int -> SetRepositoryPolicyResponse

-- | Create a value of <a>SetRepositoryPolicyResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:SetRepositoryPolicy'</a>,
--   <a>setRepositoryPolicyResponse_registryId</a> - The registry ID
--   associated with the request.
--   
--   <a>$sel:repositoryName:SetRepositoryPolicy'</a>,
--   <a>setRepositoryPolicyResponse_repositoryName</a> - The repository
--   name associated with the request.
--   
--   <a>$sel:policyText:SetRepositoryPolicy'</a>,
--   <a>setRepositoryPolicyResponse_policyText</a> - The JSON repository
--   policy text applied to the repository.
--   
--   <a>$sel:httpStatus:SetRepositoryPolicyResponse'</a>,
--   <a>setRepositoryPolicyResponse_httpStatus</a> - The response's http
--   status code.
newSetRepositoryPolicyResponse :: Int -> SetRepositoryPolicyResponse

-- | <i>See:</i> <a>newDescribeRegistry</a> smart constructor.
data DescribeRegistry
DescribeRegistry' :: DescribeRegistry

-- | Create a value of <a>DescribeRegistry</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newDescribeRegistry :: DescribeRegistry

-- | <i>See:</i> <a>newDescribeRegistryResponse</a> smart constructor.
data DescribeRegistryResponse
DescribeRegistryResponse' :: Maybe ReplicationConfiguration -> Maybe Text -> Int -> DescribeRegistryResponse

-- | Create a value of <a>DescribeRegistryResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:replicationConfiguration:DescribeRegistryResponse'</a>,
--   <a>describeRegistryResponse_replicationConfiguration</a> - The
--   replication configuration for the registry.
--   
--   <a>$sel:registryId:DescribeRegistryResponse'</a>,
--   <a>describeRegistryResponse_registryId</a> - The ID of the registry.
--   
--   <a>$sel:httpStatus:DescribeRegistryResponse'</a>,
--   <a>describeRegistryResponse_httpStatus</a> - The response's http
--   status code.
newDescribeRegistryResponse :: Int -> DescribeRegistryResponse

-- | Deletes specified images within a specified repository. Images are
--   specified with either the <tt>imageTag</tt> or <tt>imageDigest</tt>.
--   
--   <i>See:</i> <a>newBatchDeleteImage</a> smart constructor.
data BatchDeleteImage
BatchDeleteImage' :: Maybe Text -> Text -> [ImageIdentifier] -> BatchDeleteImage

-- | Create a value of <a>BatchDeleteImage</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:BatchDeleteImage'</a>,
--   <a>batchDeleteImage_registryId</a> - The Amazon Web Services account
--   ID associated with the registry that contains the image to delete. If
--   you do not specify a registry, the default registry is assumed.
--   
--   <a>$sel:repositoryName:BatchDeleteImage'</a>,
--   <a>batchDeleteImage_repositoryName</a> - The repository that contains
--   the image to delete.
--   
--   <a>$sel:imageIds:BatchDeleteImage'</a>,
--   <a>batchDeleteImage_imageIds</a> - A list of image ID references that
--   correspond to images to delete. The format of the <tt>imageIds</tt>
--   reference is <tt>imageTag=tag</tt> or <tt>imageDigest=digest</tt>.
newBatchDeleteImage :: Text -> BatchDeleteImage

-- | <i>See:</i> <a>newBatchDeleteImageResponse</a> smart constructor.
data BatchDeleteImageResponse
BatchDeleteImageResponse' :: Maybe [ImageIdentifier] -> Maybe [ImageFailure] -> Int -> BatchDeleteImageResponse

-- | Create a value of <a>BatchDeleteImageResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:imageIds:BatchDeleteImage'</a>,
--   <a>batchDeleteImageResponse_imageIds</a> - The image IDs of the
--   deleted images.
--   
--   <a>$sel:failures:BatchDeleteImageResponse'</a>,
--   <a>batchDeleteImageResponse_failures</a> - Any failures associated
--   with the call.
--   
--   <a>$sel:httpStatus:BatchDeleteImageResponse'</a>,
--   <a>batchDeleteImageResponse_httpStatus</a> - The response's http
--   status code.
newBatchDeleteImageResponse :: Int -> BatchDeleteImageResponse

-- | <i>See:</i> <a>newPutImageScanningConfiguration</a> smart constructor.
data PutImageScanningConfiguration
PutImageScanningConfiguration' :: Maybe Text -> Text -> ImageScanningConfiguration -> PutImageScanningConfiguration

-- | Create a value of <a>PutImageScanningConfiguration</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:PutImageScanningConfiguration'</a>,
--   <a>putImageScanningConfiguration_registryId</a> - The Amazon Web
--   Services account ID associated with the registry that contains the
--   repository in which to update the image scanning configuration
--   setting. If you do not specify a registry, the default registry is
--   assumed.
--   
--   <a>$sel:repositoryName:PutImageScanningConfiguration'</a>,
--   <a>putImageScanningConfiguration_repositoryName</a> - The name of the
--   repository in which to update the image scanning configuration
--   setting.
--   
--   <a>$sel:imageScanningConfiguration:PutImageScanningConfiguration'</a>,
--   <a>putImageScanningConfiguration_imageScanningConfiguration</a> - The
--   image scanning configuration for the repository. This setting
--   determines whether images are scanned for known vulnerabilities after
--   being pushed to the repository.
newPutImageScanningConfiguration :: Text -> ImageScanningConfiguration -> PutImageScanningConfiguration

-- | <i>See:</i> <a>newPutImageScanningConfigurationResponse</a> smart
--   constructor.
data PutImageScanningConfigurationResponse
PutImageScanningConfigurationResponse' :: Maybe Text -> Maybe Text -> Maybe ImageScanningConfiguration -> Int -> PutImageScanningConfigurationResponse

-- | Create a value of <a>PutImageScanningConfigurationResponse</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:PutImageScanningConfiguration'</a>,
--   <a>putImageScanningConfigurationResponse_registryId</a> - The registry
--   ID associated with the request.
--   
--   <a>$sel:repositoryName:PutImageScanningConfiguration'</a>,
--   <a>putImageScanningConfigurationResponse_repositoryName</a> - The
--   repository name associated with the request.
--   
--   <a>$sel:imageScanningConfiguration:PutImageScanningConfiguration'</a>,
--   <a>putImageScanningConfigurationResponse_imageScanningConfiguration</a>
--   - The image scanning configuration setting for the repository.
--   
--   <a>$sel:httpStatus:PutImageScanningConfigurationResponse'</a>,
--   <a>putImageScanningConfigurationResponse_httpStatus</a> - The
--   response's http status code.
newPutImageScanningConfigurationResponse :: Int -> PutImageScanningConfigurationResponse

-- | <i>See:</i> <a>newDeleteLifecyclePolicy</a> smart constructor.
data DeleteLifecyclePolicy
DeleteLifecyclePolicy' :: Maybe Text -> Text -> DeleteLifecyclePolicy

-- | Create a value of <a>DeleteLifecyclePolicy</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:DeleteLifecyclePolicy'</a>,
--   <a>deleteLifecyclePolicy_registryId</a> - The Amazon Web Services
--   account ID associated with the registry that contains the repository.
--   If you do not specify a registry, the default registry is assumed.
--   
--   <a>$sel:repositoryName:DeleteLifecyclePolicy'</a>,
--   <a>deleteLifecyclePolicy_repositoryName</a> - The name of the
--   repository.
newDeleteLifecyclePolicy :: Text -> DeleteLifecyclePolicy

-- | <i>See:</i> <a>newDeleteLifecyclePolicyResponse</a> smart constructor.
data DeleteLifecyclePolicyResponse
DeleteLifecyclePolicyResponse' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe POSIX -> Int -> DeleteLifecyclePolicyResponse

-- | Create a value of <a>DeleteLifecyclePolicyResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:DeleteLifecyclePolicy'</a>,
--   <a>deleteLifecyclePolicyResponse_registryId</a> - The registry ID
--   associated with the request.
--   
--   <a>$sel:repositoryName:DeleteLifecyclePolicy'</a>,
--   <a>deleteLifecyclePolicyResponse_repositoryName</a> - The repository
--   name associated with the request.
--   
--   <a>$sel:lifecyclePolicyText:DeleteLifecyclePolicyResponse'</a>,
--   <a>deleteLifecyclePolicyResponse_lifecyclePolicyText</a> - The JSON
--   lifecycle policy text.
--   
--   <a>$sel:lastEvaluatedAt:DeleteLifecyclePolicyResponse'</a>,
--   <a>deleteLifecyclePolicyResponse_lastEvaluatedAt</a> - The time stamp
--   of the last time that the lifecycle policy was run.
--   
--   <a>$sel:httpStatus:DeleteLifecyclePolicyResponse'</a>,
--   <a>deleteLifecyclePolicyResponse_httpStatus</a> - The response's http
--   status code.
newDeleteLifecyclePolicyResponse :: Int -> DeleteLifecyclePolicyResponse

-- | <i>See:</i> <a>newDeleteRegistryPolicy</a> smart constructor.
data DeleteRegistryPolicy
DeleteRegistryPolicy' :: DeleteRegistryPolicy

-- | Create a value of <a>DeleteRegistryPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newDeleteRegistryPolicy :: DeleteRegistryPolicy

-- | <i>See:</i> <a>newDeleteRegistryPolicyResponse</a> smart constructor.
data DeleteRegistryPolicyResponse
DeleteRegistryPolicyResponse' :: Maybe Text -> Maybe Text -> Int -> DeleteRegistryPolicyResponse

-- | Create a value of <a>DeleteRegistryPolicyResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:DeleteRegistryPolicyResponse'</a>,
--   <a>deleteRegistryPolicyResponse_registryId</a> - The registry ID
--   associated with the request.
--   
--   <a>$sel:policyText:DeleteRegistryPolicyResponse'</a>,
--   <a>deleteRegistryPolicyResponse_policyText</a> - The contents of the
--   registry permissions policy that was deleted.
--   
--   <a>$sel:httpStatus:DeleteRegistryPolicyResponse'</a>,
--   <a>deleteRegistryPolicyResponse_httpStatus</a> - The response's http
--   status code.
newDeleteRegistryPolicyResponse :: Int -> DeleteRegistryPolicyResponse

-- | <i>See:</i> <a>newGetRepositoryPolicy</a> smart constructor.
data GetRepositoryPolicy
GetRepositoryPolicy' :: Maybe Text -> Text -> GetRepositoryPolicy

-- | Create a value of <a>GetRepositoryPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:GetRepositoryPolicy'</a>,
--   <a>getRepositoryPolicy_registryId</a> - The Amazon Web Services
--   account ID associated with the registry that contains the repository.
--   If you do not specify a registry, the default registry is assumed.
--   
--   <a>$sel:repositoryName:GetRepositoryPolicy'</a>,
--   <a>getRepositoryPolicy_repositoryName</a> - The name of the repository
--   with the policy to retrieve.
newGetRepositoryPolicy :: Text -> GetRepositoryPolicy

-- | <i>See:</i> <a>newGetRepositoryPolicyResponse</a> smart constructor.
data GetRepositoryPolicyResponse
GetRepositoryPolicyResponse' :: Maybe Text -> Maybe Text -> Maybe Text -> Int -> GetRepositoryPolicyResponse

-- | Create a value of <a>GetRepositoryPolicyResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:GetRepositoryPolicy'</a>,
--   <a>getRepositoryPolicyResponse_registryId</a> - The registry ID
--   associated with the request.
--   
--   <a>$sel:repositoryName:GetRepositoryPolicy'</a>,
--   <a>getRepositoryPolicyResponse_repositoryName</a> - The repository
--   name associated with the request.
--   
--   <a>$sel:policyText:GetRepositoryPolicyResponse'</a>,
--   <a>getRepositoryPolicyResponse_policyText</a> - The JSON repository
--   policy text associated with the repository.
--   
--   <a>$sel:httpStatus:GetRepositoryPolicyResponse'</a>,
--   <a>getRepositoryPolicyResponse_httpStatus</a> - The response's http
--   status code.
newGetRepositoryPolicyResponse :: Int -> GetRepositoryPolicyResponse

-- | <i>See:</i> <a>newCompleteLayerUpload</a> smart constructor.
data CompleteLayerUpload
CompleteLayerUpload' :: Maybe Text -> Text -> Text -> NonEmpty Text -> CompleteLayerUpload

-- | Create a value of <a>CompleteLayerUpload</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:CompleteLayerUpload'</a>,
--   <a>completeLayerUpload_registryId</a> - The Amazon Web Services
--   account ID associated with the registry to which to upload layers. If
--   you do not specify a registry, the default registry is assumed.
--   
--   <a>$sel:repositoryName:CompleteLayerUpload'</a>,
--   <a>completeLayerUpload_repositoryName</a> - The name of the repository
--   to associate with the image layer.
--   
--   <a>$sel:uploadId:CompleteLayerUpload'</a>,
--   <a>completeLayerUpload_uploadId</a> - The upload ID from a previous
--   InitiateLayerUpload operation to associate with the image layer.
--   
--   <a>$sel:layerDigests:CompleteLayerUpload'</a>,
--   <a>completeLayerUpload_layerDigests</a> - The <tt>sha256</tt> digest
--   of the image layer.
newCompleteLayerUpload :: Text -> Text -> NonEmpty Text -> CompleteLayerUpload

-- | <i>See:</i> <a>newCompleteLayerUploadResponse</a> smart constructor.
data CompleteLayerUploadResponse
CompleteLayerUploadResponse' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Int -> CompleteLayerUploadResponse

-- | Create a value of <a>CompleteLayerUploadResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:uploadId:CompleteLayerUpload'</a>,
--   <a>completeLayerUploadResponse_uploadId</a> - The upload ID associated
--   with the layer.
--   
--   <a>$sel:registryId:CompleteLayerUpload'</a>,
--   <a>completeLayerUploadResponse_registryId</a> - The registry ID
--   associated with the request.
--   
--   <a>$sel:repositoryName:CompleteLayerUpload'</a>,
--   <a>completeLayerUploadResponse_repositoryName</a> - The repository
--   name associated with the request.
--   
--   <a>$sel:layerDigest:CompleteLayerUploadResponse'</a>,
--   <a>completeLayerUploadResponse_layerDigest</a> - The <tt>sha256</tt>
--   digest of the image layer.
--   
--   <a>$sel:httpStatus:CompleteLayerUploadResponse'</a>,
--   <a>completeLayerUploadResponse_httpStatus</a> - The response's http
--   status code.
newCompleteLayerUploadResponse :: Int -> CompleteLayerUploadResponse

-- | <i>See:</i> <a>newGetDownloadUrlForLayer</a> smart constructor.
data GetDownloadUrlForLayer
GetDownloadUrlForLayer' :: Maybe Text -> Text -> Text -> GetDownloadUrlForLayer

-- | Create a value of <a>GetDownloadUrlForLayer</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:GetDownloadUrlForLayer'</a>,
--   <a>getDownloadUrlForLayer_registryId</a> - The Amazon Web Services
--   account ID associated with the registry that contains the image layer
--   to download. If you do not specify a registry, the default registry is
--   assumed.
--   
--   <a>$sel:repositoryName:GetDownloadUrlForLayer'</a>,
--   <a>getDownloadUrlForLayer_repositoryName</a> - The name of the
--   repository that is associated with the image layer to download.
--   
--   <a>$sel:layerDigest:GetDownloadUrlForLayer'</a>,
--   <a>getDownloadUrlForLayer_layerDigest</a> - The digest of the image
--   layer to download.
newGetDownloadUrlForLayer :: Text -> Text -> GetDownloadUrlForLayer

-- | <i>See:</i> <a>newGetDownloadUrlForLayerResponse</a> smart
--   constructor.
data GetDownloadUrlForLayerResponse
GetDownloadUrlForLayerResponse' :: Maybe Text -> Maybe Text -> Int -> GetDownloadUrlForLayerResponse

-- | Create a value of <a>GetDownloadUrlForLayerResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:downloadUrl:GetDownloadUrlForLayerResponse'</a>,
--   <a>getDownloadUrlForLayerResponse_downloadUrl</a> - The pre-signed
--   Amazon S3 download URL for the requested layer.
--   
--   <a>$sel:layerDigest:GetDownloadUrlForLayer'</a>,
--   <a>getDownloadUrlForLayerResponse_layerDigest</a> - The digest of the
--   image layer to download.
--   
--   <a>$sel:httpStatus:GetDownloadUrlForLayerResponse'</a>,
--   <a>getDownloadUrlForLayerResponse_httpStatus</a> - The response's http
--   status code.
newGetDownloadUrlForLayerResponse :: Int -> GetDownloadUrlForLayerResponse

-- | <i>See:</i> <a>newDescribeImages</a> smart constructor.
data DescribeImages
DescribeImages' :: Maybe Text -> Maybe [ImageIdentifier] -> Maybe Natural -> Maybe Text -> Maybe DescribeImagesFilter -> Text -> DescribeImages

-- | Create a value of <a>DescribeImages</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:DescribeImages'</a>, <a>describeImages_nextToken</a>
--   - The <tt>nextToken</tt> value returned from a previous paginated
--   <tt>DescribeImages</tt> request where <tt>maxResults</tt> was used and
--   the results exceeded the value of that parameter. Pagination continues
--   from the end of the previous results that returned the
--   <tt>nextToken</tt> value. This value is <tt>null</tt> when there are
--   no more results to return. This option cannot be used when you specify
--   images with <tt>imageIds</tt>.
--   
--   <a>$sel:imageIds:DescribeImages'</a>, <a>describeImages_imageIds</a> -
--   The list of image IDs for the requested repository.
--   
--   <a>$sel:maxResults:DescribeImages'</a>,
--   <a>describeImages_maxResults</a> - The maximum number of repository
--   results returned by <tt>DescribeImages</tt> in paginated output. When
--   this parameter is used, <tt>DescribeImages</tt> only returns
--   <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt> response element. The remaining results of the
--   initial request can be seen by sending another <tt>DescribeImages</tt>
--   request with the returned <tt>nextToken</tt> value. This value can be
--   between 1 and 1000. If this parameter is not used, then
--   <tt>DescribeImages</tt> returns up to 100 results and a
--   <tt>nextToken</tt> value, if applicable. This option cannot be used
--   when you specify images with <tt>imageIds</tt>.
--   
--   <a>$sel:registryId:DescribeImages'</a>,
--   <a>describeImages_registryId</a> - The Amazon Web Services account ID
--   associated with the registry that contains the repository in which to
--   describe images. If you do not specify a registry, the default
--   registry is assumed.
--   
--   <a>$sel:filter':DescribeImages'</a>, <a>describeImages_filter</a> -
--   The filter key and value with which to filter your
--   <tt>DescribeImages</tt> results.
--   
--   <a>$sel:repositoryName:DescribeImages'</a>,
--   <a>describeImages_repositoryName</a> - The repository that contains
--   the images to describe.
newDescribeImages :: Text -> DescribeImages

-- | <i>See:</i> <a>newDescribeImagesResponse</a> smart constructor.
data DescribeImagesResponse
DescribeImagesResponse' :: Maybe Text -> Maybe [ImageDetail] -> Int -> DescribeImagesResponse

-- | Create a value of <a>DescribeImagesResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:DescribeImages'</a>,
--   <a>describeImagesResponse_nextToken</a> - The <tt>nextToken</tt> value
--   to include in a future <tt>DescribeImages</tt> request. When the
--   results of a <tt>DescribeImages</tt> request exceed
--   <tt>maxResults</tt>, this value can be used to retrieve the next page
--   of results. This value is <tt>null</tt> when there are no more results
--   to return.
--   
--   <a>$sel:imageDetails:DescribeImagesResponse'</a>,
--   <a>describeImagesResponse_imageDetails</a> - A list of ImageDetail
--   objects that contain data about the image.
--   
--   <a>$sel:httpStatus:DescribeImagesResponse'</a>,
--   <a>describeImagesResponse_httpStatus</a> - The response's http status
--   code.
newDescribeImagesResponse :: Int -> DescribeImagesResponse

-- | <i>See:</i> <a>newGetAuthorizationToken</a> smart constructor.
data GetAuthorizationToken
GetAuthorizationToken' :: Maybe (NonEmpty Text) -> GetAuthorizationToken

-- | Create a value of <a>GetAuthorizationToken</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryIds:GetAuthorizationToken'</a>,
--   <a>getAuthorizationToken_registryIds</a> - A list of Amazon Web
--   Services account IDs that are associated with the registries for which
--   to get AuthorizationData objects. If you do not specify a registry,
--   the default registry is assumed.
newGetAuthorizationToken :: GetAuthorizationToken

-- | <i>See:</i> <a>newGetAuthorizationTokenResponse</a> smart constructor.
data GetAuthorizationTokenResponse
GetAuthorizationTokenResponse' :: Maybe [AuthorizationData] -> Int -> GetAuthorizationTokenResponse

-- | Create a value of <a>GetAuthorizationTokenResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:authorizationData:GetAuthorizationTokenResponse'</a>,
--   <a>getAuthorizationTokenResponse_authorizationData</a> - A list of
--   authorization token data objects that correspond to the
--   <tt>registryIds</tt> values in the request.
--   
--   <a>$sel:httpStatus:GetAuthorizationTokenResponse'</a>,
--   <a>getAuthorizationTokenResponse_httpStatus</a> - The response's http
--   status code.
newGetAuthorizationTokenResponse :: Int -> GetAuthorizationTokenResponse

-- | <i>See:</i> <a>newCreateRepository</a> smart constructor.
data CreateRepository
CreateRepository' :: Maybe EncryptionConfiguration -> Maybe Text -> Maybe [Tag] -> Maybe ImageScanningConfiguration -> Maybe ImageTagMutability -> Text -> CreateRepository

-- | Create a value of <a>CreateRepository</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:encryptionConfiguration:CreateRepository'</a>,
--   <a>createRepository_encryptionConfiguration</a> - The encryption
--   configuration for the repository. This determines how the contents of
--   your repository are encrypted at rest.
--   
--   <a>$sel:registryId:CreateRepository'</a>,
--   <a>createRepository_registryId</a> - The AWS account ID associated
--   with the registry to create the repository. If you do not specify a
--   registry, the default registry is assumed.
--   
--   <a>$sel:tags:CreateRepository'</a>, <a>createRepository_tags</a> - The
--   metadata that you apply to the repository to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define. Tag keys can have a maximum character length of
--   128 characters, and tag values can have a maximum length of 256
--   characters.
--   
--   <a>$sel:imageScanningConfiguration:CreateRepository'</a>,
--   <a>createRepository_imageScanningConfiguration</a> - The image
--   scanning configuration for the repository. This determines whether
--   images are scanned for known vulnerabilities after being pushed to the
--   repository.
--   
--   <a>$sel:imageTagMutability:CreateRepository'</a>,
--   <a>createRepository_imageTagMutability</a> - The tag mutability
--   setting for the repository. If this parameter is omitted, the default
--   setting of <tt>MUTABLE</tt> will be used which will allow image tags
--   to be overwritten. If <tt>IMMUTABLE</tt> is specified, all image tags
--   within the repository will be immutable which will prevent them from
--   being overwritten.
--   
--   <a>$sel:repositoryName:CreateRepository'</a>,
--   <a>createRepository_repositoryName</a> - The name to use for the
--   repository. The repository name may be specified on its own (such as
--   <tt>nginx-web-app</tt>) or it can be prepended with a namespace to
--   group the repository into a category (such as
--   <tt>project-a/nginx-web-app</tt>).
newCreateRepository :: Text -> CreateRepository

-- | <i>See:</i> <a>newCreateRepositoryResponse</a> smart constructor.
data CreateRepositoryResponse
CreateRepositoryResponse' :: Maybe Repository -> Int -> CreateRepositoryResponse

-- | Create a value of <a>CreateRepositoryResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:repository:CreateRepositoryResponse'</a>,
--   <a>createRepositoryResponse_repository</a> - The repository that was
--   created.
--   
--   <a>$sel:httpStatus:CreateRepositoryResponse'</a>,
--   <a>createRepositoryResponse_httpStatus</a> - The response's http
--   status code.
newCreateRepositoryResponse :: Int -> CreateRepositoryResponse

-- | <i>See:</i> <a>newDeleteRepository</a> smart constructor.
data DeleteRepository
DeleteRepository' :: Maybe Text -> Maybe Bool -> Text -> DeleteRepository

-- | Create a value of <a>DeleteRepository</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:DeleteRepository'</a>,
--   <a>deleteRepository_registryId</a> - The Amazon Web Services account
--   ID associated with the registry that contains the repository to
--   delete. If you do not specify a registry, the default registry is
--   assumed.
--   
--   <a>$sel:force:DeleteRepository'</a>, <a>deleteRepository_force</a> -
--   If a repository contains images, forces the deletion.
--   
--   <a>$sel:repositoryName:DeleteRepository'</a>,
--   <a>deleteRepository_repositoryName</a> - The name of the repository to
--   delete.
newDeleteRepository :: Text -> DeleteRepository

-- | <i>See:</i> <a>newDeleteRepositoryResponse</a> smart constructor.
data DeleteRepositoryResponse
DeleteRepositoryResponse' :: Maybe Repository -> Int -> DeleteRepositoryResponse

-- | Create a value of <a>DeleteRepositoryResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:repository:DeleteRepositoryResponse'</a>,
--   <a>deleteRepositoryResponse_repository</a> - The repository that was
--   deleted.
--   
--   <a>$sel:httpStatus:DeleteRepositoryResponse'</a>,
--   <a>deleteRepositoryResponse_httpStatus</a> - The response's http
--   status code.
newDeleteRepositoryResponse :: Int -> DeleteRepositoryResponse

-- | <i>See:</i> <a>newGetLifecyclePolicy</a> smart constructor.
data GetLifecyclePolicy
GetLifecyclePolicy' :: Maybe Text -> Text -> GetLifecyclePolicy

-- | Create a value of <a>GetLifecyclePolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:GetLifecyclePolicy'</a>,
--   <a>getLifecyclePolicy_registryId</a> - The Amazon Web Services account
--   ID associated with the registry that contains the repository. If you
--   do not specify a registry, the default registry is assumed.
--   
--   <a>$sel:repositoryName:GetLifecyclePolicy'</a>,
--   <a>getLifecyclePolicy_repositoryName</a> - The name of the repository.
newGetLifecyclePolicy :: Text -> GetLifecyclePolicy

-- | <i>See:</i> <a>newGetLifecyclePolicyResponse</a> smart constructor.
data GetLifecyclePolicyResponse
GetLifecyclePolicyResponse' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe POSIX -> Int -> GetLifecyclePolicyResponse

-- | Create a value of <a>GetLifecyclePolicyResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:GetLifecyclePolicy'</a>,
--   <a>getLifecyclePolicyResponse_registryId</a> - The registry ID
--   associated with the request.
--   
--   <a>$sel:repositoryName:GetLifecyclePolicy'</a>,
--   <a>getLifecyclePolicyResponse_repositoryName</a> - The repository name
--   associated with the request.
--   
--   <a>$sel:lifecyclePolicyText:GetLifecyclePolicyResponse'</a>,
--   <a>getLifecyclePolicyResponse_lifecyclePolicyText</a> - The JSON
--   lifecycle policy text.
--   
--   <a>$sel:lastEvaluatedAt:GetLifecyclePolicyResponse'</a>,
--   <a>getLifecyclePolicyResponse_lastEvaluatedAt</a> - The time stamp of
--   the last time that the lifecycle policy was run.
--   
--   <a>$sel:httpStatus:GetLifecyclePolicyResponse'</a>,
--   <a>getLifecyclePolicyResponse_httpStatus</a> - The response's http
--   status code.
newGetLifecyclePolicyResponse :: Int -> GetLifecyclePolicyResponse

-- | <i>See:</i> <a>newStartImageScan</a> smart constructor.
data StartImageScan
StartImageScan' :: Maybe Text -> Text -> ImageIdentifier -> StartImageScan

-- | Create a value of <a>StartImageScan</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:StartImageScan'</a>,
--   <a>startImageScan_registryId</a> - The Amazon Web Services account ID
--   associated with the registry that contains the repository in which to
--   start an image scan request. If you do not specify a registry, the
--   default registry is assumed.
--   
--   <a>$sel:repositoryName:StartImageScan'</a>,
--   <a>startImageScan_repositoryName</a> - The name of the repository that
--   contains the images to scan.
--   
--   <a>$sel:imageId:StartImageScan'</a>, <a>startImageScan_imageId</a> -
--   Undocumented member.
newStartImageScan :: Text -> ImageIdentifier -> StartImageScan

-- | <i>See:</i> <a>newStartImageScanResponse</a> smart constructor.
data StartImageScanResponse
StartImageScanResponse' :: Maybe ImageScanStatus -> Maybe Text -> Maybe Text -> Maybe ImageIdentifier -> Int -> StartImageScanResponse

-- | Create a value of <a>StartImageScanResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:imageScanStatus:StartImageScanResponse'</a>,
--   <a>startImageScanResponse_imageScanStatus</a> - The current state of
--   the scan.
--   
--   <a>$sel:registryId:StartImageScan'</a>,
--   <a>startImageScanResponse_registryId</a> - The registry ID associated
--   with the request.
--   
--   <a>$sel:repositoryName:StartImageScan'</a>,
--   <a>startImageScanResponse_repositoryName</a> - The repository name
--   associated with the request.
--   
--   <a>$sel:imageId:StartImageScan'</a>,
--   <a>startImageScanResponse_imageId</a> - Undocumented member.
--   
--   <a>$sel:httpStatus:StartImageScanResponse'</a>,
--   <a>startImageScanResponse_httpStatus</a> - The response's http status
--   code.
newStartImageScanResponse :: Int -> StartImageScanResponse

-- | <i>See:</i> <a>newBatchCheckLayerAvailability</a> smart constructor.
data BatchCheckLayerAvailability
BatchCheckLayerAvailability' :: Maybe Text -> Text -> NonEmpty Text -> BatchCheckLayerAvailability

-- | Create a value of <a>BatchCheckLayerAvailability</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:BatchCheckLayerAvailability'</a>,
--   <a>batchCheckLayerAvailability_registryId</a> - The Amazon Web
--   Services account ID associated with the registry that contains the
--   image layers to check. If you do not specify a registry, the default
--   registry is assumed.
--   
--   <a>$sel:repositoryName:BatchCheckLayerAvailability'</a>,
--   <a>batchCheckLayerAvailability_repositoryName</a> - The name of the
--   repository that is associated with the image layers to check.
--   
--   <a>$sel:layerDigests:BatchCheckLayerAvailability'</a>,
--   <a>batchCheckLayerAvailability_layerDigests</a> - The digests of the
--   image layers to check.
newBatchCheckLayerAvailability :: Text -> NonEmpty Text -> BatchCheckLayerAvailability

-- | <i>See:</i> <a>newBatchCheckLayerAvailabilityResponse</a> smart
--   constructor.
data BatchCheckLayerAvailabilityResponse
BatchCheckLayerAvailabilityResponse' :: Maybe [LayerFailure] -> Maybe [Layer] -> Int -> BatchCheckLayerAvailabilityResponse

-- | Create a value of <a>BatchCheckLayerAvailabilityResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failures:BatchCheckLayerAvailabilityResponse'</a>,
--   <a>batchCheckLayerAvailabilityResponse_failures</a> - Any failures
--   associated with the call.
--   
--   <a>$sel:layers:BatchCheckLayerAvailabilityResponse'</a>,
--   <a>batchCheckLayerAvailabilityResponse_layers</a> - A list of image
--   layer objects corresponding to the image layer references in the
--   request.
--   
--   <a>$sel:httpStatus:BatchCheckLayerAvailabilityResponse'</a>,
--   <a>batchCheckLayerAvailabilityResponse_httpStatus</a> - The response's
--   http status code.
newBatchCheckLayerAvailabilityResponse :: Int -> BatchCheckLayerAvailabilityResponse

-- | <i>See:</i> <a>newBatchGetImage</a> smart constructor.
data BatchGetImage
BatchGetImage' :: Maybe (NonEmpty Text) -> Maybe Text -> Text -> [ImageIdentifier] -> BatchGetImage

-- | Create a value of <a>BatchGetImage</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:acceptedMediaTypes:BatchGetImage'</a>,
--   <a>batchGetImage_acceptedMediaTypes</a> - The accepted media types for
--   the request.
--   
--   Valid values:
--   <tt>application/vnd.docker.distribution.manifest.v1+json</tt> |
--   <tt>application/vnd.docker.distribution.manifest.v2+json</tt> |
--   <tt>application/vnd.oci.image.manifest.v1+json</tt>
--   
--   <a>$sel:registryId:BatchGetImage'</a>, <a>batchGetImage_registryId</a>
--   - The Amazon Web Services account ID associated with the registry that
--   contains the images to describe. If you do not specify a registry, the
--   default registry is assumed.
--   
--   <a>$sel:repositoryName:BatchGetImage'</a>,
--   <a>batchGetImage_repositoryName</a> - The repository that contains the
--   images to describe.
--   
--   <a>$sel:imageIds:BatchGetImage'</a>, <a>batchGetImage_imageIds</a> - A
--   list of image ID references that correspond to images to describe. The
--   format of the <tt>imageIds</tt> reference is <tt>imageTag=tag</tt> or
--   <tt>imageDigest=digest</tt>.
newBatchGetImage :: Text -> BatchGetImage

-- | <i>See:</i> <a>newBatchGetImageResponse</a> smart constructor.
data BatchGetImageResponse
BatchGetImageResponse' :: Maybe [Image] -> Maybe [ImageFailure] -> Int -> BatchGetImageResponse

-- | Create a value of <a>BatchGetImageResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:images:BatchGetImageResponse'</a>,
--   <a>batchGetImageResponse_images</a> - A list of image objects
--   corresponding to the image references in the request.
--   
--   <a>$sel:failures:BatchGetImageResponse'</a>,
--   <a>batchGetImageResponse_failures</a> - Any failures associated with
--   the call.
--   
--   <a>$sel:httpStatus:BatchGetImageResponse'</a>,
--   <a>batchGetImageResponse_httpStatus</a> - The response's http status
--   code.
newBatchGetImageResponse :: Int -> BatchGetImageResponse

-- | <i>See:</i> <a>newPutReplicationConfiguration</a> smart constructor.
data PutReplicationConfiguration
PutReplicationConfiguration' :: ReplicationConfiguration -> PutReplicationConfiguration

-- | Create a value of <a>PutReplicationConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:replicationConfiguration:PutReplicationConfiguration'</a>,
--   <a>putReplicationConfiguration_replicationConfiguration</a> - An
--   object representing the replication configuration for a registry.
newPutReplicationConfiguration :: ReplicationConfiguration -> PutReplicationConfiguration

-- | <i>See:</i> <a>newPutReplicationConfigurationResponse</a> smart
--   constructor.
data PutReplicationConfigurationResponse
PutReplicationConfigurationResponse' :: Maybe ReplicationConfiguration -> Int -> PutReplicationConfigurationResponse

-- | Create a value of <a>PutReplicationConfigurationResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:replicationConfiguration:PutReplicationConfiguration'</a>,
--   <a>putReplicationConfigurationResponse_replicationConfiguration</a> -
--   The contents of the replication configuration for the registry.
--   
--   <a>$sel:httpStatus:PutReplicationConfigurationResponse'</a>,
--   <a>putReplicationConfigurationResponse_httpStatus</a> - The response's
--   http status code.
newPutReplicationConfigurationResponse :: Int -> PutReplicationConfigurationResponse

-- | <i>See:</i> <a>newPutImageTagMutability</a> smart constructor.
data PutImageTagMutability
PutImageTagMutability' :: Maybe Text -> Text -> ImageTagMutability -> PutImageTagMutability

-- | Create a value of <a>PutImageTagMutability</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:PutImageTagMutability'</a>,
--   <a>putImageTagMutability_registryId</a> - The Amazon Web Services
--   account ID associated with the registry that contains the repository
--   in which to update the image tag mutability settings. If you do not
--   specify a registry, the default registry is assumed.
--   
--   <a>$sel:repositoryName:PutImageTagMutability'</a>,
--   <a>putImageTagMutability_repositoryName</a> - The name of the
--   repository in which to update the image tag mutability settings.
--   
--   <a>$sel:imageTagMutability:PutImageTagMutability'</a>,
--   <a>putImageTagMutability_imageTagMutability</a> - The tag mutability
--   setting for the repository. If <tt>MUTABLE</tt> is specified, image
--   tags can be overwritten. If <tt>IMMUTABLE</tt> is specified, all image
--   tags within the repository will be immutable which will prevent them
--   from being overwritten.
newPutImageTagMutability :: Text -> ImageTagMutability -> PutImageTagMutability

-- | <i>See:</i> <a>newPutImageTagMutabilityResponse</a> smart constructor.
data PutImageTagMutabilityResponse
PutImageTagMutabilityResponse' :: Maybe Text -> Maybe Text -> Maybe ImageTagMutability -> Int -> PutImageTagMutabilityResponse

-- | Create a value of <a>PutImageTagMutabilityResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:PutImageTagMutability'</a>,
--   <a>putImageTagMutabilityResponse_registryId</a> - The registry ID
--   associated with the request.
--   
--   <a>$sel:repositoryName:PutImageTagMutability'</a>,
--   <a>putImageTagMutabilityResponse_repositoryName</a> - The repository
--   name associated with the request.
--   
--   <a>$sel:imageTagMutability:PutImageTagMutability'</a>,
--   <a>putImageTagMutabilityResponse_imageTagMutability</a> - The image
--   tag mutability setting for the repository.
--   
--   <a>$sel:httpStatus:PutImageTagMutabilityResponse'</a>,
--   <a>putImageTagMutabilityResponse_httpStatus</a> - The response's http
--   status code.
newPutImageTagMutabilityResponse :: Int -> PutImageTagMutabilityResponse

-- | <i>See:</i> <a>newDescribeImageReplicationStatus</a> smart
--   constructor.
data DescribeImageReplicationStatus
DescribeImageReplicationStatus' :: Maybe Text -> Text -> ImageIdentifier -> DescribeImageReplicationStatus

-- | Create a value of <a>DescribeImageReplicationStatus</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:DescribeImageReplicationStatus'</a>,
--   <a>describeImageReplicationStatus_registryId</a> - The Amazon Web
--   Services account ID associated with the registry. If you do not
--   specify a registry, the default registry is assumed.
--   
--   <a>$sel:repositoryName:DescribeImageReplicationStatus'</a>,
--   <a>describeImageReplicationStatus_repositoryName</a> - The name of the
--   repository that the image is in.
--   
--   <a>$sel:imageId:DescribeImageReplicationStatus'</a>,
--   <a>describeImageReplicationStatus_imageId</a> - Undocumented member.
newDescribeImageReplicationStatus :: Text -> ImageIdentifier -> DescribeImageReplicationStatus

-- | <i>See:</i> <a>newDescribeImageReplicationStatusResponse</a> smart
--   constructor.
data DescribeImageReplicationStatusResponse
DescribeImageReplicationStatusResponse' :: Maybe Text -> Maybe ImageIdentifier -> Maybe [ImageReplicationStatus] -> Int -> DescribeImageReplicationStatusResponse

-- | Create a value of <a>DescribeImageReplicationStatusResponse</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:repositoryName:DescribeImageReplicationStatus'</a>,
--   <a>describeImageReplicationStatusResponse_repositoryName</a> - The
--   repository name associated with the request.
--   
--   <a>$sel:imageId:DescribeImageReplicationStatus'</a>,
--   <a>describeImageReplicationStatusResponse_imageId</a> - Undocumented
--   member.
--   
--   
--   <a>$sel:replicationStatuses:DescribeImageReplicationStatusResponse'</a>,
--   <a>describeImageReplicationStatusResponse_replicationStatuses</a> -
--   The replication status details for the images in the specified
--   repository.
--   
--   <a>$sel:httpStatus:DescribeImageReplicationStatusResponse'</a>,
--   <a>describeImageReplicationStatusResponse_httpStatus</a> - The
--   response's http status code.
newDescribeImageReplicationStatusResponse :: Int -> DescribeImageReplicationStatusResponse

-- | <i>See:</i> <a>newListTagsForResource</a> smart constructor.
data ListTagsForResource
ListTagsForResource' :: Text -> ListTagsForResource

-- | Create a value of <a>ListTagsForResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:ListTagsForResource'</a>,
--   <a>listTagsForResource_resourceArn</a> - The Amazon Resource Name
--   (ARN) that identifies the resource for which to list the tags.
--   Currently, the only supported resource is an Amazon ECR repository.
newListTagsForResource :: Text -> ListTagsForResource

-- | <i>See:</i> <a>newListTagsForResourceResponse</a> smart constructor.
data ListTagsForResourceResponse
ListTagsForResourceResponse' :: Maybe [Tag] -> Int -> ListTagsForResourceResponse

-- | Create a value of <a>ListTagsForResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tags:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_tags</a> - The tags for the resource.
--   
--   <a>$sel:httpStatus:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_httpStatus</a> - The response's http
--   status code.
newListTagsForResourceResponse :: Int -> ListTagsForResourceResponse

-- | <i>See:</i> <a>newGetLifecyclePolicyPreview</a> smart constructor.
data GetLifecyclePolicyPreview
GetLifecyclePolicyPreview' :: Maybe Text -> Maybe [ImageIdentifier] -> Maybe Natural -> Maybe Text -> Maybe LifecyclePolicyPreviewFilter -> Text -> GetLifecyclePolicyPreview

-- | Create a value of <a>GetLifecyclePolicyPreview</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:GetLifecyclePolicyPreview'</a>,
--   <a>getLifecyclePolicyPreview_nextToken</a> - The <tt>nextToken</tt>
--   value returned from a previous paginated 
--   <tt>GetLifecyclePolicyPreviewRequest</tt> request where
--   <tt>maxResults</tt> was used and the  results exceeded the value of
--   that parameter. Pagination continues from the end of the  previous
--   results that returned the <tt>nextToken</tt> value. This value is 
--   <tt>null</tt> when there are no more results to return. This option
--   cannot be used when you specify images with <tt>imageIds</tt>.
--   
--   <a>$sel:imageIds:GetLifecyclePolicyPreview'</a>,
--   <a>getLifecyclePolicyPreview_imageIds</a> - The list of imageIDs to be
--   included.
--   
--   <a>$sel:maxResults:GetLifecyclePolicyPreview'</a>,
--   <a>getLifecyclePolicyPreview_maxResults</a> - The maximum number of
--   repository results returned by
--   <tt>GetLifecyclePolicyPreviewRequest</tt> in  paginated output. When
--   this parameter is used, <tt>GetLifecyclePolicyPreviewRequest</tt> only
--   returns  <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt>  response element. The remaining results of the
--   initial request can be seen by sending  another
--   <tt>GetLifecyclePolicyPreviewRequest</tt> request with the returned
--   <tt>nextToken</tt>  value. This value can be between 1 and 1000. If
--   this  parameter is not used, then
--   <tt>GetLifecyclePolicyPreviewRequest</tt> returns up to  100 results
--   and a <tt>nextToken</tt> value, if  applicable. This option cannot be
--   used when you specify images with <tt>imageIds</tt>.
--   
--   <a>$sel:registryId:GetLifecyclePolicyPreview'</a>,
--   <a>getLifecyclePolicyPreview_registryId</a> - The Amazon Web Services
--   account ID associated with the registry that contains the repository.
--   If you do not specify a registry, the default registry is assumed.
--   
--   <a>$sel:filter':GetLifecyclePolicyPreview'</a>,
--   <a>getLifecyclePolicyPreview_filter</a> - An optional parameter that
--   filters results based on image tag status and all tags, if tagged.
--   
--   <a>$sel:repositoryName:GetLifecyclePolicyPreview'</a>,
--   <a>getLifecyclePolicyPreview_repositoryName</a> - The name of the
--   repository.
newGetLifecyclePolicyPreview :: Text -> GetLifecyclePolicyPreview

-- | <i>See:</i> <a>newGetLifecyclePolicyPreviewResponse</a> smart
--   constructor.
data GetLifecyclePolicyPreviewResponse
GetLifecyclePolicyPreviewResponse' :: Maybe Text -> Maybe LifecyclePolicyPreviewStatus -> Maybe Text -> Maybe Text -> Maybe LifecyclePolicyPreviewSummary -> Maybe Text -> Maybe [LifecyclePolicyPreviewResult] -> Int -> GetLifecyclePolicyPreviewResponse

-- | Create a value of <a>GetLifecyclePolicyPreviewResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:GetLifecyclePolicyPreview'</a>,
--   <a>getLifecyclePolicyPreviewResponse_nextToken</a> - The
--   <tt>nextToken</tt> value to include in a future
--   <tt>GetLifecyclePolicyPreview</tt> request. When the results of a
--   <tt>GetLifecyclePolicyPreview</tt> request exceed <tt>maxResults</tt>,
--   this value can be used to retrieve the next page of results. This
--   value is <tt>null</tt> when there are no more results to return.
--   
--   <a>$sel:status:GetLifecyclePolicyPreviewResponse'</a>,
--   <a>getLifecyclePolicyPreviewResponse_status</a> - The status of the
--   lifecycle policy preview request.
--   
--   <a>$sel:registryId:GetLifecyclePolicyPreview'</a>,
--   <a>getLifecyclePolicyPreviewResponse_registryId</a> - The registry ID
--   associated with the request.
--   
--   <a>$sel:repositoryName:GetLifecyclePolicyPreview'</a>,
--   <a>getLifecyclePolicyPreviewResponse_repositoryName</a> - The
--   repository name associated with the request.
--   
--   <a>$sel:summary:GetLifecyclePolicyPreviewResponse'</a>,
--   <a>getLifecyclePolicyPreviewResponse_summary</a> - The list of images
--   that is returned as a result of the action.
--   
--   <a>$sel:lifecyclePolicyText:GetLifecyclePolicyPreviewResponse'</a>,
--   <a>getLifecyclePolicyPreviewResponse_lifecyclePolicyText</a> - The
--   JSON lifecycle policy text.
--   
--   <a>$sel:previewResults:GetLifecyclePolicyPreviewResponse'</a>,
--   <a>getLifecyclePolicyPreviewResponse_previewResults</a> - The results
--   of the lifecycle policy preview request.
--   
--   <a>$sel:httpStatus:GetLifecyclePolicyPreviewResponse'</a>,
--   <a>getLifecyclePolicyPreviewResponse_httpStatus</a> - The response's
--   http status code.
newGetLifecyclePolicyPreviewResponse :: Int -> GetLifecyclePolicyPreviewResponse
newtype EncryptionType
EncryptionType' :: Text -> EncryptionType
[fromEncryptionType] :: EncryptionType -> Text
pattern EncryptionType_AES256 :: EncryptionType
pattern EncryptionType_KMS :: EncryptionType
newtype FindingSeverity
FindingSeverity' :: Text -> FindingSeverity
[fromFindingSeverity] :: FindingSeverity -> Text
pattern FindingSeverity_CRITICAL :: FindingSeverity
pattern FindingSeverity_HIGH :: FindingSeverity
pattern FindingSeverity_INFORMATIONAL :: FindingSeverity
pattern FindingSeverity_LOW :: FindingSeverity
pattern FindingSeverity_MEDIUM :: FindingSeverity
pattern FindingSeverity_UNDEFINED :: FindingSeverity
newtype ImageActionType
ImageActionType' :: Text -> ImageActionType
[fromImageActionType] :: ImageActionType -> Text
pattern ImageActionType_EXPIRE :: ImageActionType
newtype ImageFailureCode
ImageFailureCode' :: Text -> ImageFailureCode
[fromImageFailureCode] :: ImageFailureCode -> Text
pattern ImageFailureCode_ImageNotFound :: ImageFailureCode
pattern ImageFailureCode_ImageReferencedByManifestList :: ImageFailureCode
pattern ImageFailureCode_ImageTagDoesNotMatchDigest :: ImageFailureCode
pattern ImageFailureCode_InvalidImageDigest :: ImageFailureCode
pattern ImageFailureCode_InvalidImageTag :: ImageFailureCode
pattern ImageFailureCode_KmsError :: ImageFailureCode
pattern ImageFailureCode_MissingDigestAndTag :: ImageFailureCode
newtype ImageTagMutability
ImageTagMutability' :: Text -> ImageTagMutability
[fromImageTagMutability] :: ImageTagMutability -> Text
pattern ImageTagMutability_IMMUTABLE :: ImageTagMutability
pattern ImageTagMutability_MUTABLE :: ImageTagMutability
newtype LayerAvailability
LayerAvailability' :: Text -> LayerAvailability
[fromLayerAvailability] :: LayerAvailability -> Text
pattern LayerAvailability_AVAILABLE :: LayerAvailability
pattern LayerAvailability_UNAVAILABLE :: LayerAvailability
newtype LayerFailureCode
LayerFailureCode' :: Text -> LayerFailureCode
[fromLayerFailureCode] :: LayerFailureCode -> Text
pattern LayerFailureCode_InvalidLayerDigest :: LayerFailureCode
pattern LayerFailureCode_MissingLayerDigest :: LayerFailureCode
newtype LifecyclePolicyPreviewStatus
LifecyclePolicyPreviewStatus' :: Text -> LifecyclePolicyPreviewStatus
[fromLifecyclePolicyPreviewStatus] :: LifecyclePolicyPreviewStatus -> Text
pattern LifecyclePolicyPreviewStatus_COMPLETE :: LifecyclePolicyPreviewStatus
pattern LifecyclePolicyPreviewStatus_EXPIRED :: LifecyclePolicyPreviewStatus
pattern LifecyclePolicyPreviewStatus_FAILED :: LifecyclePolicyPreviewStatus
pattern LifecyclePolicyPreviewStatus_IN_PROGRESS :: LifecyclePolicyPreviewStatus
newtype ReplicationStatus
ReplicationStatus' :: Text -> ReplicationStatus
[fromReplicationStatus] :: ReplicationStatus -> Text
pattern ReplicationStatus_COMPLETE :: ReplicationStatus
pattern ReplicationStatus_FAILED :: ReplicationStatus
pattern ReplicationStatus_IN_PROGRESS :: ReplicationStatus
newtype RepositoryFilterType
RepositoryFilterType' :: Text -> RepositoryFilterType
[fromRepositoryFilterType] :: RepositoryFilterType -> Text
pattern RepositoryFilterType_PREFIX_MATCH :: RepositoryFilterType
newtype ScanStatus
ScanStatus' :: Text -> ScanStatus
[fromScanStatus] :: ScanStatus -> Text
pattern ScanStatus_COMPLETE :: ScanStatus
pattern ScanStatus_FAILED :: ScanStatus
pattern ScanStatus_IN_PROGRESS :: ScanStatus
newtype TagStatus
TagStatus' :: Text -> TagStatus
[fromTagStatus] :: TagStatus -> Text
pattern TagStatus_ANY :: TagStatus
pattern TagStatus_TAGGED :: TagStatus
pattern TagStatus_UNTAGGED :: TagStatus

-- | This data type is used in the ImageScanFinding data type.
--   
--   <i>See:</i> <a>newAttribute</a> smart constructor.
data Attribute
Attribute' :: Maybe Text -> Text -> Attribute

-- | Create a value of <a>Attribute</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:Attribute'</a>, <a>attribute_value</a> - The value
--   assigned to the attribute key.
--   
--   <a>$sel:key:Attribute'</a>, <a>attribute_key</a> - The attribute key.
newAttribute :: Text -> Attribute

-- | An object representing authorization data for an Amazon ECR registry.
--   
--   <i>See:</i> <a>newAuthorizationData</a> smart constructor.
data AuthorizationData
AuthorizationData' :: Maybe Text -> Maybe POSIX -> Maybe Text -> AuthorizationData

-- | Create a value of <a>AuthorizationData</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:proxyEndpoint:AuthorizationData'</a>,
--   <a>authorizationData_proxyEndpoint</a> - The registry URL to use for
--   this authorization token in a <tt>docker login</tt> command. The
--   Amazon ECR registry URL format is
--   <tt>https://aws_account_id.dkr.ecr.region.amazonaws.com</tt>. For
--   example,
--   <tt>https://012345678910.dkr.ecr.us-east-1.amazonaws.com</tt>..
--   
--   <a>$sel:expiresAt:AuthorizationData'</a>,
--   <a>authorizationData_expiresAt</a> - The Unix time in seconds and
--   milliseconds when the authorization token expires. Authorization
--   tokens are valid for 12 hours.
--   
--   <a>$sel:authorizationToken:AuthorizationData'</a>,
--   <a>authorizationData_authorizationToken</a> - A base64-encoded string
--   that contains authorization data for the specified Amazon ECR
--   registry. When the string is decoded, it is presented in the format
--   <tt>user:password</tt> for private registry authentication using
--   <tt>docker login</tt>.
newAuthorizationData :: AuthorizationData

-- | An object representing a filter on a DescribeImages operation.
--   
--   <i>See:</i> <a>newDescribeImagesFilter</a> smart constructor.
data DescribeImagesFilter
DescribeImagesFilter' :: Maybe TagStatus -> DescribeImagesFilter

-- | Create a value of <a>DescribeImagesFilter</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tagStatus:DescribeImagesFilter'</a>,
--   <a>describeImagesFilter_tagStatus</a> - The tag status with which to
--   filter your DescribeImages results. You can filter results based on
--   whether they are <tt>TAGGED</tt> or <tt>UNTAGGED</tt>.
newDescribeImagesFilter :: DescribeImagesFilter

-- | The encryption configuration for the repository. This determines how
--   the contents of your repository are encrypted at rest.
--   
--   By default, when no encryption configuration is set or the
--   <tt>AES256</tt> encryption type is used, Amazon ECR uses server-side
--   encryption with Amazon S3-managed encryption keys which encrypts your
--   data at rest using an AES-256 encryption algorithm. This does not
--   require any action on your part.
--   
--   For more control over the encryption of the contents of your
--   repository, you can use server-side encryption with Key Management
--   Service key stored in Key Management Service (KMS) to encrypt your
--   images. For more information, see <a>Amazon ECR encryption at rest</a>
--   in the <i>Amazon Elastic Container Registry User Guide</i>.
--   
--   <i>See:</i> <a>newEncryptionConfiguration</a> smart constructor.
data EncryptionConfiguration
EncryptionConfiguration' :: Maybe Text -> EncryptionType -> EncryptionConfiguration

-- | Create a value of <a>EncryptionConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:kmsKey:EncryptionConfiguration'</a>,
--   <a>encryptionConfiguration_kmsKey</a> - If you use the <tt>KMS</tt>
--   encryption type, specify the KMS key to use for encryption. The alias,
--   key ID, or full ARN of the KMS key can be specified. The key must
--   exist in the same Region as the repository. If no key is specified,
--   the default Amazon Web Services managed KMS key for Amazon ECR will be
--   used.
--   
--   <a>$sel:encryptionType:EncryptionConfiguration'</a>,
--   <a>encryptionConfiguration_encryptionType</a> - The encryption type to
--   use.
--   
--   If you use the <tt>KMS</tt> encryption type, the contents of the
--   repository will be encrypted using server-side encryption with Key
--   Management Service key stored in KMS. When you use KMS to encrypt your
--   data, you can either use the default Amazon Web Services managed KMS
--   key for Amazon ECR, or specify your own KMS key, which you already
--   created. For more information, see <a>Protecting data using
--   server-side encryption with an KMS key stored in Key Management
--   Service (SSE-KMS)</a> in the <i>Amazon Simple Storage Service Console
--   Developer Guide.</i>.
--   
--   If you use the <tt>AES256</tt> encryption type, Amazon ECR uses
--   server-side encryption with Amazon S3-managed encryption keys which
--   encrypts the images in the repository using an AES-256 encryption
--   algorithm. For more information, see <a>Protecting data using
--   server-side encryption with Amazon S3-managed encryption keys
--   (SSE-S3)</a> in the <i>Amazon Simple Storage Service Console Developer
--   Guide.</i>.
newEncryptionConfiguration :: EncryptionType -> EncryptionConfiguration

-- | An object representing an Amazon ECR image.
--   
--   <i>See:</i> <a>newImage</a> smart constructor.
data Image
Image' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe ImageIdentifier -> Maybe Text -> Image

-- | Create a value of <a>Image</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:Image'</a>, <a>image_registryId</a> - The Amazon
--   Web Services account ID associated with the registry containing the
--   image.
--   
--   <a>$sel:imageManifest:Image'</a>, <a>image_imageManifest</a> - The
--   image manifest associated with the image.
--   
--   <a>$sel:repositoryName:Image'</a>, <a>image_repositoryName</a> - The
--   name of the repository associated with the image.
--   
--   <a>$sel:imageId:Image'</a>, <a>image_imageId</a> - An object
--   containing the image tag and image digest associated with an image.
--   
--   <a>$sel:imageManifestMediaType:Image'</a>,
--   <a>image_imageManifestMediaType</a> - The manifest media type of the
--   image.
newImage :: Image

-- | An object that describes an image returned by a DescribeImages
--   operation.
--   
--   <i>See:</i> <a>newImageDetail</a> smart constructor.
data ImageDetail
ImageDetail' :: Maybe Text -> Maybe ImageScanStatus -> Maybe [Text] -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Integer -> Maybe Text -> Maybe POSIX -> Maybe ImageScanFindingsSummary -> ImageDetail

-- | Create a value of <a>ImageDetail</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:imageDigest:ImageDetail'</a>, <a>imageDetail_imageDigest</a> -
--   The <tt>sha256</tt> digest of the image manifest.
--   
--   <a>$sel:imageScanStatus:ImageDetail'</a>,
--   <a>imageDetail_imageScanStatus</a> - The current state of the scan.
--   
--   <a>$sel:imageTags:ImageDetail'</a>, <a>imageDetail_imageTags</a> - The
--   list of tags associated with this image.
--   
--   <a>$sel:registryId:ImageDetail'</a>, <a>imageDetail_registryId</a> -
--   The Amazon Web Services account ID associated with the registry to
--   which this image belongs.
--   
--   <a>$sel:repositoryName:ImageDetail'</a>,
--   <a>imageDetail_repositoryName</a> - The name of the repository to
--   which this image belongs.
--   
--   <a>$sel:artifactMediaType:ImageDetail'</a>,
--   <a>imageDetail_artifactMediaType</a> - The artifact media type of the
--   image.
--   
--   <a>$sel:imageSizeInBytes:ImageDetail'</a>,
--   <a>imageDetail_imageSizeInBytes</a> - The size, in bytes, of the image
--   in the repository.
--   
--   If the image is a manifest list, this will be the max size of all
--   manifests in the list.
--   
--   Beginning with Docker version 1.9, the Docker client compresses image
--   layers before pushing them to a V2 Docker registry. The output of the
--   <tt>docker images</tt> command shows the uncompressed image size, so
--   it may return a larger image size than the image sizes returned by
--   DescribeImages.
--   
--   <a>$sel:imageManifestMediaType:ImageDetail'</a>,
--   <a>imageDetail_imageManifestMediaType</a> - The media type of the
--   image manifest.
--   
--   <a>$sel:imagePushedAt:ImageDetail'</a>,
--   <a>imageDetail_imagePushedAt</a> - The date and time, expressed in
--   standard JavaScript date format, at which the current image was pushed
--   to the repository.
--   
--   <a>$sel:imageScanFindingsSummary:ImageDetail'</a>,
--   <a>imageDetail_imageScanFindingsSummary</a> - A summary of the last
--   completed image scan.
newImageDetail :: ImageDetail

-- | An object representing an Amazon ECR image failure.
--   
--   <i>See:</i> <a>newImageFailure</a> smart constructor.
data ImageFailure
ImageFailure' :: Maybe ImageFailureCode -> Maybe ImageIdentifier -> Maybe Text -> ImageFailure

-- | Create a value of <a>ImageFailure</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failureCode:ImageFailure'</a>, <a>imageFailure_failureCode</a>
--   - The code associated with the failure.
--   
--   <a>$sel:imageId:ImageFailure'</a>, <a>imageFailure_imageId</a> - The
--   image ID associated with the failure.
--   
--   <a>$sel:failureReason:ImageFailure'</a>,
--   <a>imageFailure_failureReason</a> - The reason for the failure.
newImageFailure :: ImageFailure

-- | An object with identifying information for an image in an Amazon ECR
--   repository.
--   
--   <i>See:</i> <a>newImageIdentifier</a> smart constructor.
data ImageIdentifier
ImageIdentifier' :: Maybe Text -> Maybe Text -> ImageIdentifier

-- | Create a value of <a>ImageIdentifier</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:imageDigest:ImageIdentifier'</a>,
--   <a>imageIdentifier_imageDigest</a> - The <tt>sha256</tt> digest of the
--   image manifest.
--   
--   <a>$sel:imageTag:ImageIdentifier'</a>, <a>imageIdentifier_imageTag</a>
--   - The tag used for the image.
newImageIdentifier :: ImageIdentifier

-- | The status of the replication process for an image.
--   
--   <i>See:</i> <a>newImageReplicationStatus</a> smart constructor.
data ImageReplicationStatus
ImageReplicationStatus' :: Maybe ReplicationStatus -> Maybe Text -> Maybe Text -> Maybe Text -> ImageReplicationStatus

-- | Create a value of <a>ImageReplicationStatus</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:ImageReplicationStatus'</a>,
--   <a>imageReplicationStatus_status</a> - The image replication status.
--   
--   <a>$sel:registryId:ImageReplicationStatus'</a>,
--   <a>imageReplicationStatus_registryId</a> - The AWS account ID
--   associated with the registry to which the image belongs.
--   
--   <a>$sel:failureCode:ImageReplicationStatus'</a>,
--   <a>imageReplicationStatus_failureCode</a> - The failure code for a
--   replication that has failed.
--   
--   <a>$sel:region:ImageReplicationStatus'</a>,
--   <a>imageReplicationStatus_region</a> - The destination Region for the
--   image replication.
newImageReplicationStatus :: ImageReplicationStatus

-- | Contains information about an image scan finding.
--   
--   <i>See:</i> <a>newImageScanFinding</a> smart constructor.
data ImageScanFinding
ImageScanFinding' :: Maybe Text -> Maybe FindingSeverity -> Maybe Text -> Maybe [Attribute] -> Maybe Text -> ImageScanFinding

-- | Create a value of <a>ImageScanFinding</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:uri:ImageScanFinding'</a>, <a>imageScanFinding_uri</a> - A
--   link containing additional details about the security vulnerability.
--   
--   <a>$sel:severity:ImageScanFinding'</a>,
--   <a>imageScanFinding_severity</a> - The finding severity.
--   
--   <a>$sel:name:ImageScanFinding'</a>, <a>imageScanFinding_name</a> - The
--   name associated with the finding, usually a CVE number.
--   
--   <a>$sel:attributes:ImageScanFinding'</a>,
--   <a>imageScanFinding_attributes</a> - A collection of attributes of the
--   host from which the finding is generated.
--   
--   <a>$sel:description:ImageScanFinding'</a>,
--   <a>imageScanFinding_description</a> - The description of the finding.
newImageScanFinding :: ImageScanFinding

-- | The details of an image scan.
--   
--   <i>See:</i> <a>newImageScanFindings</a> smart constructor.
data ImageScanFindings
ImageScanFindings' :: Maybe [ImageScanFinding] -> Maybe POSIX -> Maybe POSIX -> Maybe (HashMap FindingSeverity Natural) -> ImageScanFindings

-- | Create a value of <a>ImageScanFindings</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:findings:ImageScanFindings'</a>,
--   <a>imageScanFindings_findings</a> - The findings from the image scan.
--   
--   <a>$sel:imageScanCompletedAt:ImageScanFindings'</a>,
--   <a>imageScanFindings_imageScanCompletedAt</a> - The time of the last
--   completed image scan.
--   
--   <a>$sel:vulnerabilitySourceUpdatedAt:ImageScanFindings'</a>,
--   <a>imageScanFindings_vulnerabilitySourceUpdatedAt</a> - The time when
--   the vulnerability data was last scanned.
--   
--   <a>$sel:findingSeverityCounts:ImageScanFindings'</a>,
--   <a>imageScanFindings_findingSeverityCounts</a> - The image
--   vulnerability counts, sorted by severity.
newImageScanFindings :: ImageScanFindings

-- | A summary of the last completed image scan.
--   
--   <i>See:</i> <a>newImageScanFindingsSummary</a> smart constructor.
data ImageScanFindingsSummary
ImageScanFindingsSummary' :: Maybe POSIX -> Maybe POSIX -> Maybe (HashMap FindingSeverity Natural) -> ImageScanFindingsSummary

-- | Create a value of <a>ImageScanFindingsSummary</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:imageScanCompletedAt:ImageScanFindingsSummary'</a>,
--   <a>imageScanFindingsSummary_imageScanCompletedAt</a> - The time of the
--   last completed image scan.
--   
--   <a>$sel:vulnerabilitySourceUpdatedAt:ImageScanFindingsSummary'</a>,
--   <a>imageScanFindingsSummary_vulnerabilitySourceUpdatedAt</a> - The
--   time when the vulnerability data was last scanned.
--   
--   <a>$sel:findingSeverityCounts:ImageScanFindingsSummary'</a>,
--   <a>imageScanFindingsSummary_findingSeverityCounts</a> - The image
--   vulnerability counts, sorted by severity.
newImageScanFindingsSummary :: ImageScanFindingsSummary

-- | The current status of an image scan.
--   
--   <i>See:</i> <a>newImageScanStatus</a> smart constructor.
data ImageScanStatus
ImageScanStatus' :: Maybe ScanStatus -> Maybe Text -> ImageScanStatus

-- | Create a value of <a>ImageScanStatus</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:ImageScanStatus'</a>, <a>imageScanStatus_status</a> -
--   The current state of an image scan.
--   
--   <a>$sel:description:ImageScanStatus'</a>,
--   <a>imageScanStatus_description</a> - The description of the image scan
--   status.
newImageScanStatus :: ImageScanStatus

-- | The image scanning configuration for a repository.
--   
--   <i>See:</i> <a>newImageScanningConfiguration</a> smart constructor.
data ImageScanningConfiguration
ImageScanningConfiguration' :: Maybe Bool -> ImageScanningConfiguration

-- | Create a value of <a>ImageScanningConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:scanOnPush:ImageScanningConfiguration'</a>,
--   <a>imageScanningConfiguration_scanOnPush</a> - The setting that
--   determines whether images are scanned after being pushed to a
--   repository. If set to <tt>true</tt>, images will be scanned after
--   being pushed. If this parameter is not specified, it will default to
--   <tt>false</tt> and images will not be scanned unless a scan is
--   manually started with the <a>API_StartImageScan</a> API.
newImageScanningConfiguration :: ImageScanningConfiguration

-- | An object representing an Amazon ECR image layer.
--   
--   <i>See:</i> <a>newLayer</a> smart constructor.
data Layer
Layer' :: Maybe Integer -> Maybe LayerAvailability -> Maybe Text -> Maybe Text -> Layer

-- | Create a value of <a>Layer</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:layerSize:Layer'</a>, <a>layer_layerSize</a> - The size, in
--   bytes, of the image layer.
--   
--   <a>$sel:layerAvailability:Layer'</a>, <a>layer_layerAvailability</a> -
--   The availability status of the image layer.
--   
--   <a>$sel:mediaType:Layer'</a>, <a>layer_mediaType</a> - The media type
--   of the layer, such as
--   <tt>application/vnd.docker.image.rootfs.diff.tar.gzip</tt> or
--   <tt>application/vnd.oci.image.layer.v1.tar+gzip</tt>.
--   
--   <a>$sel:layerDigest:Layer'</a>, <a>layer_layerDigest</a> - The
--   <tt>sha256</tt> digest of the image layer.
newLayer :: Layer

-- | An object representing an Amazon ECR image layer failure.
--   
--   <i>See:</i> <a>newLayerFailure</a> smart constructor.
data LayerFailure
LayerFailure' :: Maybe LayerFailureCode -> Maybe Text -> Maybe Text -> LayerFailure

-- | Create a value of <a>LayerFailure</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failureCode:LayerFailure'</a>, <a>layerFailure_failureCode</a>
--   - The failure code associated with the failure.
--   
--   <a>$sel:failureReason:LayerFailure'</a>,
--   <a>layerFailure_failureReason</a> - The reason for the failure.
--   
--   <a>$sel:layerDigest:LayerFailure'</a>, <a>layerFailure_layerDigest</a>
--   - The layer digest associated with the failure.
newLayerFailure :: LayerFailure

-- | The filter for the lifecycle policy preview.
--   
--   <i>See:</i> <a>newLifecyclePolicyPreviewFilter</a> smart constructor.
data LifecyclePolicyPreviewFilter
LifecyclePolicyPreviewFilter' :: Maybe TagStatus -> LifecyclePolicyPreviewFilter

-- | Create a value of <a>LifecyclePolicyPreviewFilter</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tagStatus:LifecyclePolicyPreviewFilter'</a>,
--   <a>lifecyclePolicyPreviewFilter_tagStatus</a> - The tag status of the
--   image.
newLifecyclePolicyPreviewFilter :: LifecyclePolicyPreviewFilter

-- | The result of the lifecycle policy preview.
--   
--   <i>See:</i> <a>newLifecyclePolicyPreviewResult</a> smart constructor.
data LifecyclePolicyPreviewResult
LifecyclePolicyPreviewResult' :: Maybe Text -> Maybe Natural -> Maybe [Text] -> Maybe LifecyclePolicyRuleAction -> Maybe POSIX -> LifecyclePolicyPreviewResult

-- | Create a value of <a>LifecyclePolicyPreviewResult</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:imageDigest:LifecyclePolicyPreviewResult'</a>,
--   <a>lifecyclePolicyPreviewResult_imageDigest</a> - The <tt>sha256</tt>
--   digest of the image manifest.
--   
--   <a>$sel:appliedRulePriority:LifecyclePolicyPreviewResult'</a>,
--   <a>lifecyclePolicyPreviewResult_appliedRulePriority</a> - The priority
--   of the applied rule.
--   
--   <a>$sel:imageTags:LifecyclePolicyPreviewResult'</a>,
--   <a>lifecyclePolicyPreviewResult_imageTags</a> - The list of tags
--   associated with this image.
--   
--   <a>$sel:action:LifecyclePolicyPreviewResult'</a>,
--   <a>lifecyclePolicyPreviewResult_action</a> - The type of action to be
--   taken.
--   
--   <a>$sel:imagePushedAt:LifecyclePolicyPreviewResult'</a>,
--   <a>lifecyclePolicyPreviewResult_imagePushedAt</a> - The date and time,
--   expressed in standard JavaScript date format, at which the current
--   image was pushed to the repository.
newLifecyclePolicyPreviewResult :: LifecyclePolicyPreviewResult

-- | The summary of the lifecycle policy preview request.
--   
--   <i>See:</i> <a>newLifecyclePolicyPreviewSummary</a> smart constructor.
data LifecyclePolicyPreviewSummary
LifecyclePolicyPreviewSummary' :: Maybe Natural -> LifecyclePolicyPreviewSummary

-- | Create a value of <a>LifecyclePolicyPreviewSummary</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:expiringImageTotalCount:LifecyclePolicyPreviewSummary'</a>,
--   <a>lifecyclePolicyPreviewSummary_expiringImageTotalCount</a> - The
--   number of expiring images.
newLifecyclePolicyPreviewSummary :: LifecyclePolicyPreviewSummary

-- | The type of action to be taken.
--   
--   <i>See:</i> <a>newLifecyclePolicyRuleAction</a> smart constructor.
data LifecyclePolicyRuleAction
LifecyclePolicyRuleAction' :: Maybe ImageActionType -> LifecyclePolicyRuleAction

-- | Create a value of <a>LifecyclePolicyRuleAction</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:type':LifecyclePolicyRuleAction'</a>,
--   <a>lifecyclePolicyRuleAction_type</a> - The type of action to be
--   taken.
newLifecyclePolicyRuleAction :: LifecyclePolicyRuleAction

-- | An object representing a filter on a ListImages operation.
--   
--   <i>See:</i> <a>newListImagesFilter</a> smart constructor.
data ListImagesFilter
ListImagesFilter' :: Maybe TagStatus -> ListImagesFilter

-- | Create a value of <a>ListImagesFilter</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tagStatus:ListImagesFilter'</a>,
--   <a>listImagesFilter_tagStatus</a> - The tag status with which to
--   filter your ListImages results. You can filter results based on
--   whether they are <tt>TAGGED</tt> or <tt>UNTAGGED</tt>.
newListImagesFilter :: ListImagesFilter

-- | The replication configuration for a registry.
--   
--   <i>See:</i> <a>newReplicationConfiguration</a> smart constructor.
data ReplicationConfiguration
ReplicationConfiguration' :: [ReplicationRule] -> ReplicationConfiguration

-- | Create a value of <a>ReplicationConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rules:ReplicationConfiguration'</a>,
--   <a>replicationConfiguration_rules</a> - An array of objects
--   representing the replication destinations and repository filters for a
--   replication configuration.
newReplicationConfiguration :: ReplicationConfiguration

-- | An array of objects representing the destination for a replication
--   rule.
--   
--   <i>See:</i> <a>newReplicationDestination</a> smart constructor.
data ReplicationDestination
ReplicationDestination' :: Text -> Text -> ReplicationDestination

-- | Create a value of <a>ReplicationDestination</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:region:ReplicationDestination'</a>,
--   <a>replicationDestination_region</a> - The Region to replicate to.
--   
--   <a>$sel:registryId:ReplicationDestination'</a>,
--   <a>replicationDestination_registryId</a> - The Amazon Web Services
--   account ID of the Amazon ECR private registry to replicate to. When
--   configuring cross-Region replication within your own registry, specify
--   your own account ID.
newReplicationDestination :: Text -> Text -> ReplicationDestination

-- | An array of objects representing the replication destinations and
--   repository filters for a replication configuration.
--   
--   <i>See:</i> <a>newReplicationRule</a> smart constructor.
data ReplicationRule
ReplicationRule' :: Maybe (NonEmpty RepositoryFilter) -> [ReplicationDestination] -> ReplicationRule

-- | Create a value of <a>ReplicationRule</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:repositoryFilters:ReplicationRule'</a>,
--   <a>replicationRule_repositoryFilters</a> - An array of objects
--   representing the filters for a replication rule. Specifying a
--   repository filter for a replication rule provides a method for
--   controlling which repositories in a private registry are replicated.
--   
--   <a>$sel:destinations:ReplicationRule'</a>,
--   <a>replicationRule_destinations</a> - An array of objects representing
--   the destination for a replication rule.
newReplicationRule :: ReplicationRule

-- | An object representing a repository.
--   
--   <i>See:</i> <a>newRepository</a> smart constructor.
data Repository
Repository' :: Maybe EncryptionConfiguration -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe ImageScanningConfiguration -> Maybe ImageTagMutability -> Repository

-- | Create a value of <a>Repository</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:encryptionConfiguration:Repository'</a>,
--   <a>repository_encryptionConfiguration</a> - The encryption
--   configuration for the repository. This determines how the contents of
--   your repository are encrypted at rest.
--   
--   <a>$sel:repositoryUri:Repository'</a>, <a>repository_repositoryUri</a>
--   - The URI for the repository. You can use this URI for container image
--   <tt>push</tt> and <tt>pull</tt> operations.
--   
--   <a>$sel:registryId:Repository'</a>, <a>repository_registryId</a> - The
--   Amazon Web Services account ID associated with the registry that
--   contains the repository.
--   
--   <a>$sel:createdAt:Repository'</a>, <a>repository_createdAt</a> - The
--   date and time, in JavaScript date format, when the repository was
--   created.
--   
--   <a>$sel:repositoryName:Repository'</a>,
--   <a>repository_repositoryName</a> - The name of the repository.
--   
--   <a>$sel:repositoryArn:Repository'</a>, <a>repository_repositoryArn</a>
--   - The Amazon Resource Name (ARN) that identifies the repository. The
--   ARN contains the <tt>arn:aws:ecr</tt> namespace, followed by the
--   region of the repository, Amazon Web Services account ID of the
--   repository owner, repository namespace, and repository name. For
--   example, <tt>arn:aws:ecr:region:012345678910:repository/test</tt>.
--   
--   <a>$sel:imageScanningConfiguration:Repository'</a>,
--   <a>repository_imageScanningConfiguration</a> - Undocumented member.
--   
--   <a>$sel:imageTagMutability:Repository'</a>,
--   <a>repository_imageTagMutability</a> - The tag mutability setting for
--   the repository.
newRepository :: Repository

-- | The filter settings used with image replication. Specifying a
--   repository filter to a replication rule provides a method for
--   controlling which repositories in a private registry are replicated.
--   If no repository filter is specified, all images in the repository are
--   replicated.
--   
--   <i>See:</i> <a>newRepositoryFilter</a> smart constructor.
data RepositoryFilter
RepositoryFilter' :: Text -> RepositoryFilterType -> RepositoryFilter

-- | Create a value of <a>RepositoryFilter</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:filter':RepositoryFilter'</a>, <a>repositoryFilter_filter</a>
--   - The repository filter details. When the <tt>PREFIX_MATCH</tt> filter
--   type is specified, this value is required and should be the repository
--   name prefix to configure replication for.
--   
--   <a>$sel:filterType:RepositoryFilter'</a>,
--   <a>repositoryFilter_filterType</a> - The repository filter type. The
--   only supported value is <tt>PREFIX_MATCH</tt>, which is a repository
--   name prefix specified with the <tt>filter</tt> parameter.
newRepositoryFilter :: Text -> RepositoryFilterType -> RepositoryFilter

-- | The metadata that you apply to a resource to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define. Tag keys can have a maximum character length of
--   128 characters, and tag values can have a maximum length of 256
--   characters.
--   
--   <i>See:</i> <a>newTag</a> smart constructor.
data Tag
Tag' :: Maybe Text -> Maybe Text -> Tag

-- | Create a value of <a>Tag</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:key:Tag'</a>, <a>tag_key</a> - One part of a key-value pair
--   that make up a tag. A <tt>key</tt> is a general label that acts like a
--   category for more specific tag values.
--   
--   <a>$sel:value:Tag'</a>, <a>tag_value</a> - The optional part of a
--   key-value pair that make up a tag. A <tt>value</tt> acts as a
--   descriptor within a tag category (key).
newTag :: Tag
